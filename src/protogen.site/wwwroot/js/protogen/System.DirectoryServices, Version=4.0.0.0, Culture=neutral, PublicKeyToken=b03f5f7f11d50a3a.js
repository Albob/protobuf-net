/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm15 = JSIL.DeclareAssembly("System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "System.DirectoryServices.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "System.DirectoryServices.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "System.DirectoryServices.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "4.7.2046.0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", $.String, "30319");

    $.Constant({Static:true , Public:false}, "BuildRevisionStr", $.String, "0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 30319);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", $.String, "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB");

    $.Constant({Static:true , Public:false}, "PlatformPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "Mscorlib", $.String, "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemData", $.String, "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", $.String, "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "System", $.String, "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemCore", $.String, "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemNumerics", $.String, "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", $.String, "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemThreadingTasksDataflow", $.String, "System.Threading.Tasks.Dataflow, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWindowsForms", $.String, "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemXml", $.String, "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", $.String, "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", $.String, "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemConfiguration", $.String, "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", $.String, "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDeployment", $.String, "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDesign", $.String, "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", $.String, "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", $.String, "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawing", $.String, "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", $.String, "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemManagement", $.String, "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemMessaging", $.String, "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttp", $.String, "System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttpWebRequest", $.String, "System.Net.Http.WebRequest, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", $.String, "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntime", $.String, "System.Runtime.WindowsRuntime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntimeUIXaml", $.String, "System.Runtime.WindowsRuntimeUIXaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemSecurity", $.String, "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemServiceModelWeb", $.String, "System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemServiceProcess", $.String, "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWeb", $.String, "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", $.String, "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", $.String, "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", $.String, "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", $.String, "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWebExtensions", $.String, "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", $.String, "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebMobile", $.String, "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", $.String, "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRouting", $.String, "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebServices", $.String, "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "WindowsBase", $.String, "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", $.String, "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", $.String, "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", $.String, "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", $.String, "b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", $.String, "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", $.String, "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", $.String, "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", $.String, "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", $.String, "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftJScript", $.String, "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
/* class System.ExternDll */ 

(function ExternDll$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.ExternDll", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Activeds", $.String, "activeds.dll");

    $.Constant({Static:true , Public:true }, "Advapi32", $.String, "advapi32.dll");

    $.Constant({Static:true , Public:true }, "Comctl32", $.String, "comctl32.dll");

    $.Constant({Static:true , Public:true }, "Comdlg32", $.String, "comdlg32.dll");

    $.Constant({Static:true , Public:true }, "Gdi32", $.String, "gdi32.dll");

    $.Constant({Static:true , Public:true }, "Gdiplus", $.String, "gdiplus.dll");

    $.Constant({Static:true , Public:true }, "Hhctrl", $.String, "hhctrl.ocx");

    $.Constant({Static:true , Public:true }, "Imm32", $.String, "imm32.dll");

    $.Constant({Static:true , Public:true }, "Kernel32", $.String, "kernel32.dll");

    $.Constant({Static:true , Public:true }, "Loadperf", $.String, "Loadperf.dll");

    $.Constant({Static:true , Public:true }, "Mscoree", $.String, "mscoree.dll");

    $.Constant({Static:true , Public:true }, "Clr", $.String, "clr.dll");

    $.Constant({Static:true , Public:true }, "Msi", $.String, "msi.dll");

    $.Constant({Static:true , Public:true }, "Mqrt", $.String, "mqrt.dll");

    $.Constant({Static:true , Public:true }, "Ntdll", $.String, "ntdll.dll");

    $.Constant({Static:true , Public:true }, "Ole32", $.String, "ole32.dll");

    $.Constant({Static:true , Public:true }, "Oleacc", $.String, "oleacc.dll");

    $.Constant({Static:true , Public:true }, "Oleaut32", $.String, "oleaut32.dll");

    $.Constant({Static:true , Public:true }, "Olepro32", $.String, "olepro32.dll");

    $.Constant({Static:true , Public:true }, "PerfCounter", $.String, "perfcounter.dll");

    $.Constant({Static:true , Public:true }, "Powrprof", $.String, "Powrprof.dll");

    $.Constant({Static:true , Public:true }, "Psapi", $.String, "psapi.dll");

    $.Constant({Static:true , Public:true }, "Shell32", $.String, "shell32.dll");

    $.Constant({Static:true , Public:true }, "User32", $.String, "user32.dll");

    $.Constant({Static:true , Public:true }, "Uxtheme", $.String, "uxtheme.dll");

    $.Constant({Static:true , Public:true }, "WinMM", $.String, "winmm.dll");

    $.Constant({Static:true , Public:true }, "Winspool", $.String, "winspool.drv");

    $.Constant({Static:true , Public:true }, "Wtsapi32", $.String, "wtsapi32.dll");

    $.Constant({Static:true , Public:true }, "Version", $.String, "version.dll");

    $.Constant({Static:true , Public:true }, "Vsassert", $.String, "vsassert.dll");

    $.Constant({Static:true , Public:true }, "Fxassert", $.String, "Fxassert.dll");

    $.Constant({Static:true , Public:true }, "Shlwapi", $.String, "shlwapi.dll");

    $.Constant({Static:true , Public:true }, "Crypt32", $.String, "crypt32.dll");

    $.Constant({Static:true , Public:true }, "ShCore", $.String, "SHCore.dll");

    $.Constant({Static:true , Public:false}, "Odbc32", $.String, "odbc32.dll");

    $.Constant({Static:true , Public:false}, "SNI", $.String, "System.Data.dll");

    $.Constant({Static:true , Public:false}, "OciDll", $.String, "oci.dll");

    $.Constant({Static:true , Public:false}, "OraMtsDll", $.String, "oramts.dll");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.DirectoryServices");
/* enum System.DirectoryServices.ActiveDirectoryRights */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectoryRights", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    CreateChild: 1, 
    DeleteChild: 2, 
    ListChildren: 4, 
    Self: 8, 
    ReadProperty: 16, 
    WriteProperty: 32, 
    DeleteTree: 64, 
    ListObject: 128, 
    ExtendedRight: 256, 
    Delete: 65536, 
    ReadControl: 131072, 
    GenericExecute: 131076, 
    GenericWrite: 131112, 
    GenericRead: 131220, 
    WriteDacl: 262144, 
    WriteOwner: 524288, 
    GenericAll: 983551, 
    Synchronize: 1048576, 
    AccessSystemSecurity: 16777216, 
  }
);

/* enum System.DirectoryServices.ActiveDirectorySecurityInheritance */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectorySecurityInheritance", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    All: 1, 
    Descendents: 2, 
    SelfAndChildren: 3, 
    Children: 4, 
  }
);

/* enum System.DirectoryServices.PropertyAccess */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.PropertyAccess", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Read: 0, 
    Write: 1, 
  }
);

/* class System.DirectoryServices.ActiveDirectorySecurity */ 

(function ActiveDirectorySecurity$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.AccessControl.DirectoryObjectSecurity"), 
      Name: "System.DirectoryServices.ActiveDirectorySecurity", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm15.TypeRef("System.DirectoryServices.SecurityMasks")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AccessRuleFactory", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.AccessControl.AccessRule"), [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm07.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm07.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AccessRuleFactory", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.AccessControl.AccessRule"), [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm07.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm07.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm07.TypeRef("System.Guid"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAccessRule", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAccessRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAuditRule", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAuditRule"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AuditRuleFactory", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.AccessControl.AuditRule"), [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm07.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm07.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm07.TypeRef("System.Security.AccessControl.AuditFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AuditRuleFactory", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.AccessControl.AuditRule"), [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm07.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm07.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm07.TypeRef("System.Security.AccessControl.AuditFlags"), 
          $asm07.TypeRef("System.Guid"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DaclRetrieved", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AccessRightType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AccessRuleType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AuditRuleType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsModified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ModifyAccessRule", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Security.AccessControl.AccessControlModification"), $asm07.TypeRef("System.Security.AccessControl.AccessRule"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ModifyAuditRule", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Security.AccessControl.AccessControlModification"), $asm07.TypeRef("System.Security.AccessControl.AuditRule"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PurgeAccessRules", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Principal.IdentityReference"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PurgeAuditRules", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Principal.IdentityReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAccess", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAccessRule", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAccessRule")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAccessRuleSpecific", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAccessRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAudit", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Principal.IdentityReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRule", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAuditRule")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRuleSpecific", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAuditRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetAccessRule", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAccessRule"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SaclRetrieved", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAccessRule", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAccessRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAuditRule", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAuditRule"))
    );

    $.Field({Static:false, Public:false}, "securityMaskUsedInRetrieval", $asm15.TypeRef("System.DirectoryServices.SecurityMasks"));

    $.Property({Static:false, Public:true , Virtual:true }, "AccessRightType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AccessRuleType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AuditRuleType", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectoryRightsTranslator */ 

(function ActiveDirectoryRightsTranslator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectoryRightsTranslator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AccessMaskFromRights", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RightsFromAccessMask", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"), [$.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.PropertyAccessTranslator */ 

(function PropertyAccessTranslator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.PropertyAccessTranslator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AccessMaskFromPropertyAccess", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.PropertyAccess")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectoryInheritanceTranslator */ 

(function ActiveDirectoryInheritanceTranslator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectoryInheritanceTranslator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEffectiveInheritanceFlags", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), [$asm07.TypeRef("System.Security.AccessControl.InheritanceFlags"), $asm07.TypeRef("System.Security.AccessControl.PropagationFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInheritanceFlags", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.AccessControl.InheritanceFlags"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPropagationFlags", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.AccessControl.PropagationFlags"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")])
    );

    $.Field({Static:true , Public:false}, "ITToIF", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Security.AccessControl.InheritanceFlags")]));

    $.Field({Static:true , Public:false}, "ITToPF", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Security.AccessControl.PropagationFlags")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectoryAccessRule */ 

(function ActiveDirectoryAccessRule$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.AccessControl.ObjectAccessRule"), 
      Name: "System.DirectoryServices.ActiveDirectoryAccessRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"), 
          $asm07.TypeRef("System.Security.AccessControl.AccessControlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"), 
          $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"), 
          $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"), 
          $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), $asm07.TypeRef("System.Guid"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"), 
          $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"), 
          $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), $asm07.TypeRef("System.Guid"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), $asm07.TypeRef("System.Guid"), 
          $.Boolean, $asm07.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm07.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActiveDirectoryRights", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InheritanceType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"))
    );

    $.Property({Static:false, Public:true }, "ActiveDirectoryRights", $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"));

    $.Property({Static:false, Public:true }, "InheritanceType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ListChildrenAccessRule */ 

(function ListChildrenAccessRule$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAccessRule"), 
      Name: "System.DirectoryServices.ListChildrenAccessRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), $asm07.TypeRef("System.Guid")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.CreateChildAccessRule */ 

(function CreateChildAccessRule$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAccessRule"), 
      Name: "System.DirectoryServices.CreateChildAccessRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm07.TypeRef("System.Guid"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm07.TypeRef("System.Guid"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), 
          $asm07.TypeRef("System.Guid")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.DeleteChildAccessRule */ 

(function DeleteChildAccessRule$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAccessRule"), 
      Name: "System.DirectoryServices.DeleteChildAccessRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm07.TypeRef("System.Guid"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm07.TypeRef("System.Guid"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), 
          $asm07.TypeRef("System.Guid")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.PropertyAccessRule */ 

(function PropertyAccessRule$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAccessRule"), 
      Name: "System.DirectoryServices.PropertyAccessRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.PropertyAccess")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.PropertyAccess"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.PropertyAccess"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.PropertyAccess"), $asm07.TypeRef("System.Guid"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.PropertyAccess"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.PropertyAccess"), $asm07.TypeRef("System.Guid"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), $asm07.TypeRef("System.Guid")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.PropertySetAccessRule */ 

(function PropertySetAccessRule$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAccessRule"), 
      Name: "System.DirectoryServices.PropertySetAccessRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.PropertyAccess"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.PropertyAccess"), $asm07.TypeRef("System.Guid"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.PropertyAccess"), $asm07.TypeRef("System.Guid"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), $asm07.TypeRef("System.Guid")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ExtendedRightAccessRule */ 

(function ExtendedRightAccessRule$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAccessRule"), 
      Name: "System.DirectoryServices.ExtendedRightAccessRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm07.TypeRef("System.Guid"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm07.TypeRef("System.Guid"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), 
          $asm07.TypeRef("System.Guid")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.DeleteTreeAccessRule */ 

(function DeleteTreeAccessRule$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryAccessRule"), 
      Name: "System.DirectoryServices.DeleteTreeAccessRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm07.TypeRef("System.Security.AccessControl.AccessControlType"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), $asm07.TypeRef("System.Guid")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectoryAuditRule */ 

(function ActiveDirectoryAuditRule$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.AccessControl.ObjectAuditRule"), 
      Name: "System.DirectoryServices.ActiveDirectoryAuditRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"), 
          $asm07.TypeRef("System.Security.AccessControl.AuditFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"), 
          $asm07.TypeRef("System.Security.AccessControl.AuditFlags"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"), 
          $asm07.TypeRef("System.Security.AccessControl.AuditFlags"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"), 
          $asm07.TypeRef("System.Security.AccessControl.AuditFlags"), $asm07.TypeRef("System.Guid"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"), 
          $asm07.TypeRef("System.Security.AccessControl.AuditFlags"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"), 
          $asm07.TypeRef("System.Security.AccessControl.AuditFlags"), $asm07.TypeRef("System.Guid"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $asm07.TypeRef("System.Security.AccessControl.AuditFlags"), $asm07.TypeRef("System.Guid"), 
          $.Boolean, $asm07.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm07.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActiveDirectoryRights", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InheritanceType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"))
    );

    $.Property({Static:false, Public:true }, "ActiveDirectoryRights", $asm15.TypeRef("System.DirectoryServices.ActiveDirectoryRights"));

    $.Property({Static:false, Public:true }, "InheritanceType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurityInheritance"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.AdsVLV */ 

(function AdsVLV$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.AdsVLV", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "beforeCount", $.Int32);

    $.Field({Static:false, Public:true }, "afterCount", $.Int32);

    $.Field({Static:false, Public:true }, "offset", $.Int32);

    $.Field({Static:false, Public:true }, "contentCount", $.Int32);

    $.Field({Static:false, Public:true }, "target", $.IntPtr);

    $.Field({Static:false, Public:true }, "contextIDlength", $.Int32);

    $.Field({Static:false, Public:true }, "contextID", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.AuthenticationTypes */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.AuthenticationTypes", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Secure: 1, 
    SecureSocketsLayer: 2, 
    Encryption: 2, 
    ReadonlyServer: 4, 
    Anonymous: 16, 
    FastBind: 32, 
    Signing: 64, 
    Sealing: 128, 
    Delegation: 256, 
    ServerBind: 512, 
  }
);

/* class System.DirectoryServices.BinaryCompatibility */ 

(function BinaryCompatibility$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.DirectoryServices.BinaryCompatibility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_TargetsAtLeast_Desktop_V4_5_3", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "RunningOnCheck", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "_targetsAtLeast_Desktop_V4_5_3", $.Boolean);

    $.Property({Static:true , Public:false}, "TargetsAtLeast_Desktop_V4_5_3", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.DereferenceAlias */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.DereferenceAlias", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Never: 0, 
    InSearching: 1, 
    FindingBaseObject: 2, 
    Always: 3, 
  }
);

/* class System.DirectoryServices.DSDescriptionAttribute */ 

(function DSDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.DirectoryServices.DSDescriptionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.DirectoryServices.DirectoryEntries */ 

(function DirectoryEntries$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.DirectoryEntries", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIsContainer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaFilter", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SchemaNameCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.Field({Static:false, Public:false}, "container", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Property({Static:false, Public:true }, "SchemaFilter", $asm15.TypeRef("System.DirectoryServices.SchemaNameCollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.DirectoryEntries+ChildEnumerator */ 

(function ChildEnumerator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.DirectoryEntries+ChildEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false}, "container", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "enumVariant", $asm15.TypeRef("System.DirectoryServices.Interop.SafeNativeMethods+EnumVariant"));

    $.Field({Static:false, Public:false}, "currentEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Property({Static:false, Public:true }, "Current", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.DirectoryEntry */ 

(function DirectoryEntry$Members () {
  var $, $thisType;






























































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.Component"), 
      Name: "System.DirectoryServices.DirectoryEntry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm15.TypeRef("System.DirectoryServices.AuthenticationTypes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.String, $.String, 
          $asm15.TypeRef("System.DirectoryServices.AuthenticationTypes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Boolean, 
          $.String, $.String, 
          $asm15.TypeRef("System.DirectoryServices.AuthenticationTypes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Boolean, 
          $.String, $.String, 
          $asm15.TypeRef("System.DirectoryServices.AuthenticationTypes"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Bind", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Bind", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneBrowsable", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CommitChanges", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CommitIfNotCaching", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature($.Type, [$.Type, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteTree", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillCache", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AdsObject", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.Interop.UnsafeNativeMethods+IAds"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.AuthenticationTypes"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Bound", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Children", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntries"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ContainerObject", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsContainer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Guid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsContainer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JustCreated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NativeGuid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NativeObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ObjectSecurity", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntryConfiguration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parent", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.PropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaEntry", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UsePropertyCache", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Username", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetObjectSecurityFromCache", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPassword", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUsername", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitADsObjectOptions", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Invoke", 
      new JSIL.MethodSignature($.Object, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "InvokeGet", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:true }, "InvokeSet", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "MoveTo", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveTo", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "RefreshCache", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "RefreshCache", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Rename", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AuthenticationType", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.AuthenticationTypes"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_JustCreated", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ObjectSecurity", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Password", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Path", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UsePropertyCache", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Username", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetObjectSecurityInCache", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Unbind", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "path", $.String);

    $.Field({Static:false, Public:false}, "adsObject", $asm15.TypeRef("System.DirectoryServices.Interop.UnsafeNativeMethods+IAds"));

    $.Field({Static:false, Public:false}, "useCache", $.Boolean);

    $.Field({Static:false, Public:false}, "cacheFilled", $.Boolean);

    $.Field({Static:false, Public:false}, "propertiesAlreadyEnumerated", $.Boolean);

    $.Field({Static:false, Public:false}, "justCreated", $.Boolean);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "authenticationType", $asm15.TypeRef("System.DirectoryServices.AuthenticationTypes"));

    $.Field({Static:false, Public:false}, "credentials", $asm0A.TypeRef("System.Net.NetworkCredential"));

    $.Field({Static:false, Public:false}, "options", $asm15.TypeRef("System.DirectoryServices.DirectoryEntryConfiguration"));

    $.Field({Static:false, Public:false}, "propertyCollection", $asm15.TypeRef("System.DirectoryServices.PropertyCollection"));

    $.Field({Static:false, Public:false}, "allowMultipleChange", $.Boolean);

    $.Field({Static:false, Public:false}, "userNameIsNull", $.Boolean);

    $.Field({Static:false, Public:false}, "passwordIsNull", $.Boolean);

    $.Field({Static:false, Public:false}, "objectSecurityInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "objectSecurityModified", $.Boolean);

    $.Field({Static:false, Public:false}, "objectSecurity", $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurity"));

    $.Field({Static:true , Public:false}, "securityDescriptorProperty", $.String, "ntSecurityDescriptor");

    $.Property({Static:false, Public:false}, "AdsObject", $asm15.TypeRef("System.DirectoryServices.Interop.UnsafeNativeMethods+IAds"));

    $.Property({Static:false, Public:true }, "AuthenticationType", $asm15.TypeRef("System.DirectoryServices.AuthenticationTypes"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm15.System.DirectoryServices.AuthenticationTypes.Secure]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSAuthenticationType"]; });

    $.Property({Static:false, Public:false}, "Bound", $.Boolean);

    $.Property({Static:false, Public:true }, "Children", $asm15.TypeRef("System.DirectoryServices.DirectoryEntries"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSChildren"]; });

    $.Property({Static:false, Public:false}, "ContainerObject", $asm15.TypeRef("System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsContainer"));

    $.Property({Static:false, Public:true }, "Guid", $asm07.TypeRef("System.Guid"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSGuid"]; });

    $.Property({Static:false, Public:true }, "ObjectSecurity", $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurity"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSObjectSecurity"]; });

    $.Property({Static:false, Public:false}, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:false}, "JustCreated", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSName"]; });

    $.Property({Static:false, Public:true }, "NativeGuid", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSNativeGuid"]; });

    $.Property({Static:false, Public:true }, "NativeObject", $.Object)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSNativeObject"]; });

    $.Property({Static:false, Public:true }, "Parent", $.Type)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSParent"]; });

    $.Property({Static:false, Public:true }, "Password", $.String)
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSPassword"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Path", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSPath"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.SettingsBindableAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true }, "Properties", $asm15.TypeRef("System.DirectoryServices.PropertyCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSProperties"]; });

    $.Property({Static:false, Public:true }, "SchemaClassName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSSchemaClassName"]; });

    $.Property({Static:false, Public:true }, "SchemaEntry", $.Type)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSSchemaEntry"]; });

    $.Property({Static:false, Public:true }, "UsePropertyCache", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSUsePropertyCache"]; });

    $.Property({Static:false, Public:true }, "Username", $.String)
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSUsername"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Options", $asm15.TypeRef("System.DirectoryServices.DirectoryEntryConfiguration"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSOptions"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm15.System.DirectoryServices.Design.DirectoryEntryConverter.__Type__]; })
    .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DirectoryEntryDesc"]; });

})();

/* class System.DirectoryServices.DirectoryEntryConfiguration */ 

(function DirectoryEntryConfiguration$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.DirectoryEntryConfiguration", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PageSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PasswordEncoding", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.PasswordEncodingMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PasswordPort", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Referral", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ReferralChasingOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityMasks", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SecurityMasks"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCurrentServerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsMutuallyAuthenticated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PageSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PasswordEncoding", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.PasswordEncodingMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PasswordPort", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Referral", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ReferralChasingOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityMasks", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.SecurityMasks"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetUserNameQueryQuota", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "entry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Constant({Static:true , Public:false}, "ISC_RET_MUTUAL_AUTH", $.Int32, 2);

    $.Property({Static:false, Public:true }, "Referral", $asm15.TypeRef("System.DirectoryServices.ReferralChasingOption"));

    $.Property({Static:false, Public:true }, "SecurityMasks", $asm15.TypeRef("System.DirectoryServices.SecurityMasks"));

    $.Property({Static:false, Public:true }, "PageSize", $.Int32);

    $.Property({Static:false, Public:true }, "PasswordPort", $.Int32);

    $.Property({Static:false, Public:true }, "PasswordEncoding", $asm15.TypeRef("System.DirectoryServices.PasswordEncodingMethod"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.DirectorySearcher */ 

(function DirectorySearcher$Members () {
  var $, $thisType;
























































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.Component"), 
      Name: "System.DirectoryServices.DirectorySearcher", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm15.TypeRef("System.DirectoryServices.SearchScope")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm15.TypeRef("System.DirectoryServices.SearchScope")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DoSetSearchPrefs", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.Interop.UnsafeNativeMethods+IDirectorySearch"), $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.Interop.AdsSearchPreferenceInfo")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAll", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SearchResultCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAll", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.SearchResultCollection"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindOne", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SearchResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Asynchronous", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeScopeQuery", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CacheResults", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClientTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DerefAlias", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DereferenceAlias"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DirectorySynchronization", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectorySynchronization"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExtendedDN", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ExtendedDN"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PageSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropertiesToLoad", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropertyNamesOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferralChasing", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ReferralChasingOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SearchRoot", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SearchScope", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SearchScope"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityMasks", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SecurityMasks"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServerPageTimeLimit", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServerTimeLimit", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SizeLimit", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sort", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SortOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Tombstone", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VirtualListView", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryVirtualListView"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Asynchronous", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttributeScopeQuery", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CacheResults", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ClientTimeout", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DerefAlias", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DereferenceAlias"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DirectorySynchronization", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectorySynchronization"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExtendedDN", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ExtendedDN"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Filter", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PageSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PropertyNamesOnly", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReferralChasing", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ReferralChasingOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SearchRoot", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SearchScope", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.SearchScope"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityMasks", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.SecurityMasks"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServerPageTimeLimit", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServerTimeLimit", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SizeLimit", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Sort", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.SortOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Tombstone", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_VirtualListView", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryVirtualListView"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSearchPreferences", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.Interop.UnsafeNativeMethods+IDirectorySearch"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "searchRoot", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "filter", $.String);

    $.Field({Static:false, Public:false}, "propertiesToLoad", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "minusOneSecond", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "scope", $asm15.TypeRef("System.DirectoryServices.SearchScope"));

    $.Field({Static:false, Public:false}, "scopeSpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "sizeLimit", $.Int32);

    $.Field({Static:false, Public:false}, "serverTimeLimit", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "propertyNamesOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "clientTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "pageSize", $.Int32);

    $.Field({Static:false, Public:false}, "serverPageTimeLimit", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "referralChasing", $asm15.TypeRef("System.DirectoryServices.ReferralChasingOption"));

    $.Field({Static:false, Public:false}, "sort", $asm15.TypeRef("System.DirectoryServices.SortOption"));

    $.Field({Static:false, Public:false}, "cacheResults", $.Boolean);

    $.Field({Static:false, Public:false}, "cacheResultsSpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "rootEntryAllocated", $.Boolean);

    $.Field({Static:false, Public:false}, "assertDefaultNamingContext", $.String);

    $.Field({Static:false, Public:false}, "asynchronous", $.Boolean);

    $.Field({Static:false, Public:false}, "tombstone", $.Boolean);

    $.Field({Static:false, Public:false}, "attributeScopeQuery", $.String);

    $.Field({Static:false, Public:false}, "attributeScopeQuerySpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "derefAlias", $asm15.TypeRef("System.DirectoryServices.DereferenceAlias"));

    $.Field({Static:false, Public:false}, "securityMask", $asm15.TypeRef("System.DirectoryServices.SecurityMasks"));

    $.Field({Static:false, Public:false}, "extendedDN", $asm15.TypeRef("System.DirectoryServices.ExtendedDN"));

    $.Field({Static:false, Public:false}, "sync", $asm15.TypeRef("System.DirectoryServices.DirectorySynchronization"));

    $.Field({Static:false, Public:false}, "directorySynchronizationSpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "vlv", $asm15.TypeRef("System.DirectoryServices.DirectoryVirtualListView"));

    $.Field({Static:false, Public:false}, "directoryVirtualListViewSpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "searchResult", $asm15.TypeRef("System.DirectoryServices.SearchResultCollection"));

    $.Constant({Static:true , Public:false}, "defaultFilter", $.String, "(objectClass=*)");


    function DirectorySearcher__cctor () {
      $thisType.minusOneSecond = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DirectorySearcher__cctor
    );

    $.Property({Static:false, Public:true }, "CacheResults", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [true]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSCacheResults"]; });

    $.Property({Static:false, Public:true }, "ClientTimeout", $asm07.TypeRef("System.TimeSpan"))
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSClientTimeout"]; });

    $.Property({Static:false, Public:true }, "PropertyNamesOnly", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSPropertyNamesOnly"]; });

    $.Property({Static:false, Public:true }, "Filter", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return ["(objectClass=*)"]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSFilter"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.SettingsBindableAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true }, "PageSize", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSPageSize"]; });

    $.Property({Static:false, Public:true }, "PropertiesToLoad", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSPropertiesToLoad"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Windows.Forms.Design.StringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

    $.Property({Static:false, Public:true }, "ReferralChasing", $asm15.TypeRef("System.DirectoryServices.ReferralChasingOption"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm15.System.DirectoryServices.ReferralChasingOption.External]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSReferralChasing"]; });

    $.Property({Static:false, Public:true }, "SearchScope", $asm15.TypeRef("System.DirectoryServices.SearchScope"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm15.System.DirectoryServices.SearchScope.Subtree]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSSearchScope"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.SettingsBindableAttribute"), function () { return [true]; });

    $.Property({Static:false, Public:true }, "ServerPageTimeLimit", $asm07.TypeRef("System.TimeSpan"))
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSServerPageTimeLimit"]; });

    $.Property({Static:false, Public:true }, "ServerTimeLimit", $asm07.TypeRef("System.TimeSpan"))
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSServerTimeLimit"]; });

    $.Property({Static:false, Public:true }, "SizeLimit", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSSizeLimit"]; });

    $.Property({Static:false, Public:true }, "SearchRoot", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSSearchRoot"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

    $.Property({Static:false, Public:true }, "Sort", $asm15.TypeRef("System.DirectoryServices.SortOption"))
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSSort"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0A.System.ComponentModel.ExpandableObjectConverter.__Type__]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; });

    $.Property({Static:false, Public:true }, "Asynchronous", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSAsynchronous"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Tombstone", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSTombstone"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "AttributeScopeQuery", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSAttributeQuery"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "DerefAlias", $asm15.TypeRef("System.DirectoryServices.DereferenceAlias"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm15.System.DirectoryServices.DereferenceAlias.Never]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSDerefAlias"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "SecurityMasks", $asm15.TypeRef("System.DirectoryServices.SecurityMasks"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm15.System.DirectoryServices.SecurityMasks.None]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSSecurityMasks"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "ExtendedDN", $asm15.TypeRef("System.DirectoryServices.ExtendedDN"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm15.System.DirectoryServices.ExtendedDN.None]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSExtendedDn"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "DirectorySynchronization", $asm15.TypeRef("System.DirectoryServices.DirectorySynchronization"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSDirectorySynchronization"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "VirtualListView", $asm15.TypeRef("System.DirectoryServices.DirectoryVirtualListView"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSVirtualListView"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DirectorySearcherDesc"]; });

})();

/* class System.DirectoryServices.DirectoryServicesPermission */ 

(function DirectoryServicesPermission$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Security.Permissions.ResourcePermissionBase"), 
      Name: "System.DirectoryServices.DirectoryServicesPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionAccess"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntry")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPermissionAccess", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PermissionEntries", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntryCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemovePermissionAccess", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNames", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "innerCollection", $asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntryCollection"));

    $.Property({Static:false, Public:true }, "PermissionEntries", $asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntryCollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.DirectoryServicesPermissionAccess */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.DirectoryServicesPermissionAccess", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Browse: 2, 
    Write: 6, 
  }
);

/* class System.DirectoryServices.DirectoryServicesPermissionAttribute */ 

(function DirectoryServicesPermissionAttribute$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Permissions.CodeAccessSecurityAttribute"), 
      Name: "System.DirectoryServices.DirectoryServicesPermissionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.SecurityAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PermissionAccess", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionAccess"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Path", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PermissionAccess", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionAccess"))
    );

    $.Field({Static:false, Public:false}, "path", $.String);

    $.Field({Static:false, Public:false}, "permissionAccess", $asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionAccess"));

    $.Property({Static:false, Public:true }, "Path", $.String);

    $.Property({Static:false, Public:true }, "PermissionAccess", $asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionAccess"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags(
          "Assembly", "Class", "Constructor", "Event", 
          "Method", "Struct"
      )]; });

})();

/* class System.DirectoryServices.DirectoryServicesPermissionEntry */ 

(function DirectoryServicesPermissionEntry$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.DirectoryServicesPermissionEntry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionAccess"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Permissions.ResourcePermissionBaseEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PermissionAccess", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionAccess"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBaseEntry", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Permissions.ResourcePermissionBaseEntry"))
    );

    $.Field({Static:false, Public:false}, "path", $.String);

    $.Field({Static:false, Public:false}, "permissionAccess", $asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionAccess"));

    $.Property({Static:false, Public:true }, "Path", $.String);

    $.Property({Static:false, Public:true }, "PermissionAccess", $asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionAccess"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.DirectoryServicesPermissionEntryCollection */ 

(function DirectoryServicesPermissionEntryCollection$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.DirectoryServices.DirectoryServicesPermissionEntryCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermission"), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Security.Permissions.ResourcePermissionBaseEntry")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntry")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntry")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntry")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntry"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntry")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntry")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemove", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntry")])
    );

    $.Field({Static:false, Public:false}, "owner", $asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermission"));

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.DirectoryServicesPermissionEntry"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.DirectorySynchronization */ 

(function DirectorySynchronization$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.DirectorySynchronization", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectorySynchronizationOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.DirectorySynchronizationOptions"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Copy", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Option", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectorySynchronizationOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectorySynchronizationCookie", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetDirectorySynchronizationCookie", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetDirectorySynchronizationCookie", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Option", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectorySynchronizationOptions"))
    );

    $.Field({Static:false, Public:false}, "flag", $asm15.TypeRef("System.DirectoryServices.DirectorySynchronizationOptions"));

    $.Field({Static:false, Public:false}, "cookie", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Option", $asm15.TypeRef("System.DirectoryServices.DirectorySynchronizationOptions"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm15.System.DirectoryServices.DirectorySynchronizationOptions.None]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSDirectorySynchronizationFlag"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.DirectorySynchronizationOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.DirectorySynchronizationOptions", 
    BaseType: $asm07.TypeRef("System.Int64"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    ObjectSecurity: 1, 
    ParentsFirst: 2048, 
    PublicDataOnly: 8192, 
    IncrementalValues: 2147483648, 
  }
);

/* class System.DirectoryServices.DirectoryVirtualListView */ 

(function DirectoryVirtualListView$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.DirectoryVirtualListView", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $asm15.TypeRef("System.DirectoryServices.DirectoryVirtualListViewContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.String, $asm15.TypeRef("System.DirectoryServices.DirectoryVirtualListViewContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AfterCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApproximateTotal", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BeforeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DirectoryVirtualListViewContext", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryVirtualListViewContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Offset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetPercentage", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AfterCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApproximateTotal", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BeforeCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DirectoryVirtualListViewContext", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryVirtualListViewContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Offset", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Target", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetPercentage", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "beforeCount", $.Int32);

    $.Field({Static:false, Public:false}, "afterCount", $.Int32);

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "target", $.String);

    $.Field({Static:false, Public:false}, "approximateTotal", $.Int32);

    $.Field({Static:false, Public:false}, "targetPercentage", $.Int32);

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.DirectoryVirtualListViewContext"));

    $.Property({Static:false, Public:true }, "BeforeCount", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSBeforeCount"]; });

    $.Property({Static:false, Public:true }, "AfterCount", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSAfterCount"]; });

    $.Property({Static:false, Public:true }, "Offset", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSOffset"]; });

    $.Property({Static:false, Public:true }, "TargetPercentage", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSTargetPercentage"]; });

    $.Property({Static:false, Public:true }, "Target", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSTarget"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

    $.Property({Static:false, Public:true }, "ApproximateTotal", $.Int32)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [0]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSApproximateTotal"]; });

    $.Property({Static:false, Public:true }, "DirectoryVirtualListViewContext", $asm15.TypeRef("System.DirectoryServices.DirectoryVirtualListViewContext"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSDirectoryVirtualListViewContext"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.DirectoryVirtualListViewContext */ 

(function DirectoryVirtualListViewContext$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.DirectoryVirtualListViewContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Copy", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:false}, "context", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.ExtendedDN */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ExtendedDN", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: -1, 
    HexString: 0, 
    Standard: 1, 
  }
);

/* enum System.DirectoryServices.PasswordEncodingMethod */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.PasswordEncodingMethod", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    PasswordEncodingSsl: 0, 
    PasswordEncodingClear: 1, 
  }
);

/* class System.DirectoryServices.PropertyCollection */ 

(function PropertyCollection$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.PropertyCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.PropertyValueCollection")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.PropertyValueCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropertyNames", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionaryEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_IsFixedSize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "entry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "valueTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.PropertyValueCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "PropertyNames", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IDictionary"), 
      /* 1 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.PropertyCollection+PropertyEnumerator */ 

(function PropertyEnumerator$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.PropertyCollection+PropertyEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $asm15.TypeRef("System.DirectoryServices.DirectoryEntry")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Entry", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.DictionaryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "entry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "parentEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "currentPropName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Entry", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IDictionaryEnumerator"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.PropertyCollection+ValuesCollection */ 

(function ValuesCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.PropertyCollection+ValuesCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.PropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.Field({Static:false, Public:false}, "props", $asm15.TypeRef("System.DirectoryServices.PropertyCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.PropertyCollection+KeysCollection */ 

(function KeysCollection$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.PropertyCollection+ValuesCollection"), 
      Name: "System.DirectoryServices.PropertyCollection+KeysCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.PropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.PropertyCollection+ValuesEnumerator */ 

(function ValuesEnumerator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.PropertyCollection+ValuesEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.PropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "currentIndex", $.Int32);

    $.Field({Static:false, Public:false}, "propCollection", $asm15.TypeRef("System.DirectoryServices.PropertyCollection"));

    $.Property({Static:false, Public:false}, "CurrentIndex", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.PropertyCollection+KeysEnumerator */ 

(function KeysEnumerator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.PropertyCollection+ValuesEnumerator"), 
      Name: "System.DirectoryServices.PropertyCollection+KeysEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.PropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.PropertyValueCollection */ 

(function PropertyValueCollection$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.DirectoryServices.PropertyValueCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropertyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClearComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsertComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemoveComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSetComplete", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateList", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "entry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "propertyName", $.String);

    $.Field({Static:false, Public:false}, "updateType", $asm15.TypeRef("System.DirectoryServices.PropertyValueCollection+UpdateType"));

    $.Field({Static:false, Public:false}, "changeList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "allowMultipleChange", $.Boolean);

    $.Field({Static:false, Public:false}, "needNewBehavior", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "PropertyName", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.PropertyValueCollection+UpdateType */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.PropertyValueCollection+UpdateType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Add: 0, 
    Delete: 1, 
    Update: 2, 
    None: 3, 
  }
);

/* enum System.DirectoryServices.ReferralChasingOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ReferralChasingOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Subordinate: 32, 
    External: 64, 
    All: 96, 
  }
);

/* class System.DirectoryServices.ResultPropertyCollection */ 

(function ResultPropertyCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.DictionaryBase"), 
      Name: "System.DirectoryServices.ResultPropertyCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm15.TypeRef("System.DirectoryServices.ResultPropertyValueCollection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ResultPropertyValueCollection")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ResultPropertyValueCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropertyNames", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ResultPropertyValueCollection"));

    $.Property({Static:false, Public:true }, "PropertyNames", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true }, "Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ResultPropertyValueCollection */ 

(function ResultPropertyValueCollection$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ResultPropertyValueCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.SchemaNameCollection */ 

(function SchemaNameCollection$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.SchemaNameCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.SchemaNameCollection+VariantPropGetter"), $asm15.TypeRef("System.DirectoryServices.SchemaNameCollection+VariantPropSetter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsFixedSize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "set_Item");

    $.Field({Static:false, Public:false}, "propGetter", $asm15.TypeRef("System.DirectoryServices.SchemaNameCollection+VariantPropGetter"));

    $.Field({Static:false, Public:false}, "propSetter", $asm15.TypeRef("System.DirectoryServices.SchemaNameCollection+VariantPropSetter"));

    $.Property({Static:false, Public:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IList"), 
      /* 1 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* delegate System.DirectoryServices.SchemaNameCollection+VariantPropGetter */ 

JSIL.MakeDelegate("System.DirectoryServices.SchemaNameCollection+VariantPropGetter", false, [], 
  JSIL.MethodSignature.Return($asm07.TypeRef("System.Object")));

/* delegate System.DirectoryServices.SchemaNameCollection+VariantPropSetter */ 

JSIL.MakeDelegate("System.DirectoryServices.SchemaNameCollection+VariantPropSetter", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.Object")));

/* class System.DirectoryServices.SchemaNameCollection+FilterDelegateWrapper */ 

(function FilterDelegateWrapper$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.SchemaNameCollection+FilterDelegateWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsContainer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Getter", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SchemaNameCollection+VariantPropGetter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Setter", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SchemaNameCollection+VariantPropSetter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFilter", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFilter", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "obj", $asm15.TypeRef("System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsContainer"));

    $.Property({Static:false, Public:true }, "Getter", $asm15.TypeRef("System.DirectoryServices.SchemaNameCollection+VariantPropGetter"));

    $.Property({Static:false, Public:true }, "Setter", $asm15.TypeRef("System.DirectoryServices.SchemaNameCollection+VariantPropSetter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.SearchResult */ 

(function SearchResult$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.SearchResult", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.NetworkCredential"), $asm15.TypeRef("System.DirectoryServices.AuthenticationTypes")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ResultPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.Field({Static:false, Public:false}, "parentCredentials", $asm0A.TypeRef("System.Net.NetworkCredential"));

    $.Field({Static:false, Public:false}, "parentAuthenticationType", $asm15.TypeRef("System.DirectoryServices.AuthenticationTypes"));

    $.Field({Static:false, Public:false}, "properties", $asm15.TypeRef("System.DirectoryServices.ResultPropertyCollection"));

    $.Property({Static:false, Public:true }, "Path", $.String);

    $.Property({Static:false, Public:true }, "Properties", $asm15.TypeRef("System.DirectoryServices.ResultPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.SearchResultCollection */ 

(function SearchResultCollection$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "System.DirectoryServices.SearchResultCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $.IntPtr, 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm15.TypeRef("System.DirectoryServices.DirectorySearcher")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.SearchResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.SearchResult")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DirsyncCookie", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Filter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Handle", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.SearchResult"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropertiesLoaded", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SearchObject", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.Interop.UnsafeNativeMethods+IDirectorySearch"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VLVResponse", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryVirtualListView"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.SearchResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RetrieveDirectorySynchronizationCookie", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "RetrieveVLVResponse", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryVirtualListView"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.Field({Static:false, Public:false}, "handle", $.IntPtr);

    $.Field({Static:false, Public:false}, "properties", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "searchObject", $asm15.TypeRef("System.DirectoryServices.Interop.UnsafeNativeMethods+IDirectorySearch"));

    $.Field({Static:false, Public:false}, "filter", $.String);

    $.Field({Static:false, Public:false}, "innerList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "rootEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Constant({Static:true , Public:false}, "ADS_DIRSYNC_COOKIE", $.String, "fc8cb04d-311d-406c-8cb9-1ae8b843b418");

    $.Field({Static:false, Public:false}, "AdsDirsynCookieName", $.IntPtr);

    $.Constant({Static:true , Public:false}, "ADS_VLV_RESPONSE", $.String, "fc8cb04d-311d-406c-8cb9-1ae8b843b419");

    $.Field({Static:false, Public:false}, "AdsVLVResponseName", $.IntPtr);

    $.Field({Static:false, Public:false}, "srch", $asm15.TypeRef("System.DirectoryServices.DirectorySearcher"));

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.SearchResult"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "Filter", $.String);

    $.Property({Static:false, Public:false}, "InnerList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "SearchObject", $asm15.TypeRef("System.DirectoryServices.Interop.UnsafeNativeMethods+IDirectorySearch"));

    $.Property({Static:false, Public:true }, "Handle", $.IntPtr);

    $.Property({Static:false, Public:true }, "PropertiesLoaded", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "DirsyncCookie", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "VLVResponse", $asm15.TypeRef("System.DirectoryServices.DirectoryVirtualListView"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.SearchResultCollection+ResultsEnumerator */ 

(function ResultsEnumerator$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.SearchResultCollection+ResultsEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.SearchResultCollection"), $.String, 
          $.String, $asm15.TypeRef("System.DirectoryServices.AuthenticationTypes")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanLastError", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SearchResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCurrentResult", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SearchResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLastError", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false}, "parentCredentials", $asm0A.TypeRef("System.Net.NetworkCredential"));

    $.Field({Static:false, Public:false}, "parentAuthenticationType", $asm15.TypeRef("System.DirectoryServices.AuthenticationTypes"));

    $.Field({Static:false, Public:false}, "results", $asm15.TypeRef("System.DirectoryServices.SearchResultCollection"));

    $.Field({Static:false, Public:false}, "initialized", $.Boolean);

    $.Field({Static:false, Public:false}, "currentResult", $asm15.TypeRef("System.DirectoryServices.SearchResult"));

    $.Field({Static:false, Public:false}, "eof", $.Boolean);

    $.Field({Static:false, Public:false}, "waitForResult", $.Boolean);

    $.Property({Static:false, Public:true }, "Current", $asm15.TypeRef("System.DirectoryServices.SearchResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.SearchScope */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.SearchScope", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Base: 0, 
    OneLevel: 1, 
    Subtree: 2, 
  }
);

/* class System.DirectoryServices.SearchWaitHandler */ 

(function SearchWaitHandler$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.SearchWaitHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Create", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm2F.TypeRef("System.Xml.XmlNode")
        ])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("System.Configuration.IConfigurationSectionHandler")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.HandlerBase */ 

(function HandlerBase$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.HandlerBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveBooleanAttribute", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.SecurityMasks */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.SecurityMasks", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Owner: 1, 
    Group: 2, 
    Dacl: 4, 
    Sacl: 8, 
  }
);

/* enum System.DirectoryServices.SortDirection */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.SortDirection", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Ascending: 0, 
    Descending: 1, 
  }
);

/* class System.DirectoryServices.SortOption */ 

(function SortOption$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.SortOption", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm15.TypeRef("System.DirectoryServices.SortDirection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Direction", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SortDirection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropertyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Direction", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.SortDirection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PropertyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "propertyName", $.String);

    $.Field({Static:false, Public:false}, "sortDirection", $asm15.TypeRef("System.DirectoryServices.SortDirection"));

    $.Property({Static:false, Public:true }, "PropertyName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSSortName"]; });

    $.Property({Static:false, Public:true }, "Direction", $asm15.TypeRef("System.DirectoryServices.SortDirection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm15.System.DirectoryServices.SortDirection.Ascending]; })
      .Attribute($asm15.TypeRef("System.DirectoryServices.DSDescriptionAttribute"), function () { return ["DSSortDirection"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0A.System.ComponentModel.ExpandableObjectConverter.__Type__]; });

})();

/* class System.DirectoryServices.DirectoryServicesCOMException */ 

(function DirectoryServicesCOMException$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.COMException"), 
      Name: "System.DirectoryServices.DirectoryServicesCOMException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Runtime.InteropServices.COMException")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExtendedError", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExtendedErrorMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "extendederror", $.Int32);

    $.Field({Static:false, Public:false}, "extendedmessage", $.String);

    $.Property({Static:false, Public:true }, "ExtendedError", $.Int32);

    $.Property({Static:false, Public:true }, "ExtendedErrorMessage", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.COMExceptionHelper */ 

(function COMExceptionHelper$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.COMExceptionHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFormattedComException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFormattedComException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Runtime.InteropServices.COMException")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ResDescriptionAttribute */ 

(function ResDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.DirectoryServices.ResDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.DirectoryServices.ResCategoryAttribute */ 

(function ResCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.DirectoryServices.ResCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.DirectoryServices.Res */ 

(function Res$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Res", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "DSDoesNotImplementIADs", $.String, "DSDoesNotImplementIADs");

    $.Constant({Static:true , Public:false}, "DSNoObject", $.String, "DSNoObject");

    $.Constant({Static:true , Public:false}, "DSInvalidPath", $.String, "DSInvalidPath");

    $.Constant({Static:true , Public:false}, "DSNotAContainer", $.String, "DSNotAContainer");

    $.Constant({Static:true , Public:false}, "DSCannotDelete", $.String, "DSCannotDelete");

    $.Constant({Static:true , Public:false}, "DSNotInCollection", $.String, "DSNotInCollection");

    $.Constant({Static:true , Public:false}, "DSNoCurrentChild", $.String, "DSNoCurrentChild");

    $.Constant({Static:true , Public:false}, "DSCannotBeIndexed", $.String, "DSCannotBeIndexed");

    $.Constant({Static:true , Public:false}, "DSCannotCount", $.String, "DSCannotCount");

    $.Constant({Static:true , Public:false}, "DSCannotGetKeys", $.String, "DSCannotGetKeys");

    $.Constant({Static:true , Public:false}, "DSCannotEmunerate", $.String, "DSCannotEmunerate");

    $.Constant({Static:true , Public:false}, "DSNoCurrentProperty", $.String, "DSNoCurrentProperty");

    $.Constant({Static:true , Public:false}, "DSNoCurrentValue", $.String, "DSNoCurrentValue");

    $.Constant({Static:true , Public:false}, "DSBadPageSize", $.String, "DSBadPageSize");

    $.Constant({Static:true , Public:false}, "DSBadSizeLimit", $.String, "DSBadSizeLimit");

    $.Constant({Static:true , Public:false}, "DSSearchUnsupported", $.String, "DSSearchUnsupported");

    $.Constant({Static:true , Public:false}, "DSNoCurrentEntry", $.String, "DSNoCurrentEntry");

    $.Constant({Static:true , Public:false}, "DSInvalidSearchFilter", $.String, "DSInvalidSearchFilter");

    $.Constant({Static:true , Public:false}, "DSPropertyNotFound", $.String, "DSPropertyNotFound");

    $.Constant({Static:true , Public:false}, "DSConvertFailed", $.String, "DSConvertFailed");

    $.Constant({Static:true , Public:false}, "DSConvertTypeInvalid", $.String, "DSConvertTypeInvalid");

    $.Constant({Static:true , Public:false}, "DSAdsvalueTypeNYI", $.String, "DSAdsvalueTypeNYI");

    $.Constant({Static:true , Public:false}, "DSAdsiNotInstalled", $.String, "DSAdsiNotInstalled");

    $.Constant({Static:true , Public:false}, "DSNotSet", $.String, "DSNotSet");

    $.Constant({Static:true , Public:false}, "DSEnumerator", $.String, "DSEnumerator");

    $.Constant({Static:true , Public:false}, "DSPathIsNotSet", $.String, "DSPathIsNotSet");

    $.Constant({Static:true , Public:false}, "DSPropertySetSupported", $.String, "DSPropertySetSupported");

    $.Constant({Static:true , Public:false}, "DSAddNotSupported", $.String, "DSAddNotSupported");

    $.Constant({Static:true , Public:false}, "DSClearNotSupported", $.String, "DSClearNotSupported");

    $.Constant({Static:true , Public:false}, "DSRemoveNotSupported", $.String, "DSRemoveNotSupported");

    $.Constant({Static:true , Public:false}, "DSSearchPreferencesNotAccepted", $.String, "DSSearchPreferencesNotAccepted");

    $.Constant({Static:true , Public:false}, "DSBeforeCount", $.String, "DSBeforeCount");

    $.Constant({Static:true , Public:false}, "DSBadBeforeCount", $.String, "DSBadBeforeCount");

    $.Constant({Static:true , Public:false}, "DSAfterCount", $.String, "DSAfterCount");

    $.Constant({Static:true , Public:false}, "DSBadAfterCount", $.String, "DSBadAfterCount");

    $.Constant({Static:true , Public:false}, "DSOffset", $.String, "DSOffset");

    $.Constant({Static:true , Public:false}, "DSBadOffset", $.String, "DSBadOffset");

    $.Constant({Static:true , Public:false}, "DSTargetPercentage", $.String, "DSTargetPercentage");

    $.Constant({Static:true , Public:false}, "DSBadTargetPercentage", $.String, "DSBadTargetPercentage");

    $.Constant({Static:true , Public:false}, "DSTarget", $.String, "DSTarget");

    $.Constant({Static:true , Public:false}, "DSApproximateTotal", $.String, "DSApproximateTotal");

    $.Constant({Static:true , Public:false}, "DSBadApproximateTotal", $.String, "DSBadApproximateTotal");

    $.Constant({Static:true , Public:false}, "DSDirectoryVirtualListViewContext", $.String, "DSDirectoryVirtualListViewContext");

    $.Constant({Static:true , Public:false}, "DSVirtualListView", $.String, "DSVirtualListView");

    $.Constant({Static:true , Public:false}, "DSBadPageSizeDirsync", $.String, "DSBadPageSizeDirsync");

    $.Constant({Static:true , Public:false}, "DSBadCacheResultsVLV", $.String, "DSBadCacheResultsVLV");

    $.Constant({Static:true , Public:false}, "DSBadDirectorySynchronizationFlag", $.String, "DSBadDirectorySynchronizationFlag");

    $.Constant({Static:true , Public:false}, "DSBadASQSearchScope", $.String, "DSBadASQSearchScope");

    $.Constant({Static:true , Public:false}, "DSDoesNotImplementIADsObjectOptions", $.String, "DSDoesNotImplementIADsObjectOptions");

    $.Constant({Static:true , Public:false}, "DSPropertyValueSupportOneOperation", $.String, "DSPropertyValueSupportOneOperation");

    $.Constant({Static:true , Public:false}, "ConfigSectionsUnique", $.String, "ConfigSectionsUnique");

    $.Constant({Static:true , Public:false}, "Invalid_boolean_attribute", $.String, "Invalid_boolean_attribute");

    $.Constant({Static:true , Public:false}, "DSUnknownFailure", $.String, "DSUnknownFailure");

    $.Constant({Static:true , Public:false}, "DSNotSupportOnClient", $.String, "DSNotSupportOnClient");

    $.Constant({Static:true , Public:false}, "DSNotSupportOnDC", $.String, "DSNotSupportOnDC");

    $.Constant({Static:true , Public:false}, "DirectoryContextNeedHost", $.String, "DirectoryContextNeedHost");

    $.Constant({Static:true , Public:false}, "DSSyncAllFailure", $.String, "DSSyncAllFailure");

    $.Constant({Static:true , Public:false}, "UnknownTransport", $.String, "UnknownTransport");

    $.Constant({Static:true , Public:false}, "NotSupportTransportSMTP", $.String, "NotSupportTransportSMTP");

    $.Constant({Static:true , Public:false}, "CannotDelete", $.String, "CannotDelete");

    $.Constant({Static:true , Public:false}, "CannotGetObject", $.String, "CannotGetObject");

    $.Constant({Static:true , Public:false}, "DSNotFound", $.String, "DSNotFound");

    $.Constant({Static:true , Public:false}, "InvalidContextTarget", $.String, "InvalidContextTarget");

    $.Constant({Static:true , Public:false}, "TransportNotFound", $.String, "TransportNotFound");

    $.Constant({Static:true , Public:false}, "SiteNotExist", $.String, "SiteNotExist");

    $.Constant({Static:true , Public:false}, "SiteNotCommitted", $.String, "SiteNotCommitted");

    $.Constant({Static:true , Public:false}, "NoCurrentSite", $.String, "NoCurrentSite");

    $.Constant({Static:true , Public:false}, "SubnetNotCommitted", $.String, "SubnetNotCommitted");

    $.Constant({Static:true , Public:false}, "SiteLinkNotCommitted", $.String, "SiteLinkNotCommitted");

    $.Constant({Static:true , Public:false}, "ConnectionNotCommitted", $.String, "ConnectionNotCommitted");

    $.Constant({Static:true , Public:false}, "AlreadyExistingForestTrust", $.String, "AlreadyExistingForestTrust");

    $.Constant({Static:true , Public:false}, "AlreadyExistingDomainTrust", $.String, "AlreadyExistingDomainTrust");

    $.Constant({Static:true , Public:false}, "NotFoundInCollection", $.String, "NotFoundInCollection");

    $.Constant({Static:true , Public:false}, "AlreadyExistingInCollection", $.String, "AlreadyExistingInCollection");

    $.Constant({Static:true , Public:false}, "NTDSSiteSetting", $.String, "NTDSSiteSetting");

    $.Constant({Static:true , Public:false}, "NotWithinSite", $.String, "NotWithinSite");

    $.Constant({Static:true , Public:false}, "InvalidTime", $.String, "InvalidTime");

    $.Constant({Static:true , Public:false}, "UnableToRetrieveDomainInfo", $.String, "UnableToRetrieveDomainInfo");

    $.Constant({Static:true , Public:false}, "UnableToOpenToken", $.String, "UnableToOpenToken");

    $.Constant({Static:true , Public:false}, "UnableToRetrieveTokenInfo", $.String, "UnableToRetrieveTokenInfo");

    $.Constant({Static:true , Public:false}, "UnableToRetrievePolicy", $.String, "UnableToRetrievePolicy");

    $.Constant({Static:true , Public:false}, "UpdateAvailableRIDPoolOverflowFailure", $.String, "UpdateAvailableRIDPoolOverflowFailure");

    $.Constant({Static:true , Public:false}, "EmptyStringParameter", $.String, "EmptyStringParameter");

    $.Constant({Static:true , Public:false}, "SupportedPlatforms", $.String, "SupportedPlatforms");

    $.Constant({Static:true , Public:false}, "TargetShouldBeADAMServer", $.String, "TargetShouldBeADAMServer");

    $.Constant({Static:true , Public:false}, "TargetShouldBeDC", $.String, "TargetShouldBeDC");

    $.Constant({Static:true , Public:false}, "TargetShouldBeAppNCDnsName", $.String, "TargetShouldBeAppNCDnsName");

    $.Constant({Static:true , Public:false}, "TargetShouldBeServerORForest", $.String, "TargetShouldBeServerORForest");

    $.Constant({Static:true , Public:false}, "TargetShouldBeServerORDomain", $.String, "TargetShouldBeServerORDomain");

    $.Constant({Static:true , Public:false}, "TargetShouldBeDomain", $.String, "TargetShouldBeDomain");

    $.Constant({Static:true , Public:false}, "TargetShouldBeForest", $.String, "TargetShouldBeForest");

    $.Constant({Static:true , Public:false}, "TargetShouldBeConfigSet", $.String, "TargetShouldBeConfigSet");

    $.Constant({Static:true , Public:false}, "TargetShouldBeServerORConfigSet", $.String, "TargetShouldBeServerORConfigSet");

    $.Constant({Static:true , Public:false}, "TargetShouldBeGC", $.String, "TargetShouldBeGC");

    $.Constant({Static:true , Public:false}, "TargetShouldBeServer", $.String, "TargetShouldBeServer");

    $.Constant({Static:true , Public:false}, "NotADOrADAM", $.String, "NotADOrADAM");

    $.Constant({Static:true , Public:false}, "ServerNotAReplica", $.String, "ServerNotAReplica");

    $.Constant({Static:true , Public:false}, "AppNCNotFound", $.String, "AppNCNotFound");

    $.Constant({Static:true , Public:false}, "ReplicaNotFound", $.String, "ReplicaNotFound");

    $.Constant({Static:true , Public:false}, "GCNotFoundInForest", $.String, "GCNotFoundInForest");

    $.Constant({Static:true , Public:false}, "DCNotFoundInDomain", $.String, "DCNotFoundInDomain");

    $.Constant({Static:true , Public:false}, "ADAMInstanceNotFoundInConfigSet", $.String, "ADAMInstanceNotFoundInConfigSet");

    $.Constant({Static:true , Public:false}, "DCNotFound", $.String, "DCNotFound");

    $.Constant({Static:true , Public:false}, "GCNotFound", $.String, "GCNotFound");

    $.Constant({Static:true , Public:false}, "AINotFound", $.String, "AINotFound");

    $.Constant({Static:true , Public:false}, "ServerNotFound", $.String, "ServerNotFound");

    $.Constant({Static:true , Public:false}, "DomainNotFound", $.String, "DomainNotFound");

    $.Constant({Static:true , Public:false}, "ForestNotFound", $.String, "ForestNotFound");

    $.Constant({Static:true , Public:false}, "ConfigSetNotFound", $.String, "ConfigSetNotFound");

    $.Constant({Static:true , Public:false}, "NDNCNotFound", $.String, "NDNCNotFound");

    $.Constant({Static:true , Public:false}, "PropertyNotFoundOnObject", $.String, "PropertyNotFoundOnObject");

    $.Constant({Static:true , Public:false}, "PropertyNotFound", $.String, "PropertyNotFound");

    $.Constant({Static:true , Public:false}, "PropertyNotSet", $.String, "PropertyNotSet");

    $.Constant({Static:true , Public:false}, "ADAMInstanceNotFound", $.String, "ADAMInstanceNotFound");

    $.Constant({Static:true , Public:false}, "CannotPerformOperationOnUncommittedObject", $.String, "CannotPerformOperationOnUncommittedObject");

    $.Constant({Static:true , Public:false}, "LinkIdNotEvenNumber", $.String, "LinkIdNotEvenNumber");

    $.Constant({Static:true , Public:false}, "InvalidServerNameFormat", $.String, "InvalidServerNameFormat");

    $.Constant({Static:true , Public:false}, "NoObjectClassForADPartition", $.String, "NoObjectClassForADPartition");

    $.Constant({Static:true , Public:false}, "InvalidDNFormat", $.String, "InvalidDNFormat");

    $.Constant({Static:true , Public:false}, "InvalidDnsName", $.String, "InvalidDnsName");

    $.Constant({Static:true , Public:false}, "ApplicationPartitionTypeUnknown", $.String, "ApplicationPartitionTypeUnknown");

    $.Constant({Static:true , Public:false}, "UnknownSyntax", $.String, "UnknownSyntax");

    $.Constant({Static:true , Public:false}, "InvalidMode", $.String, "InvalidMode");

    $.Constant({Static:true , Public:false}, "NoW2K3DCs", $.String, "NoW2K3DCs");

    $.Constant({Static:true , Public:false}, "DCInfoNotFound", $.String, "DCInfoNotFound");

    $.Constant({Static:true , Public:false}, "NoW2K3DCsInForest", $.String, "NoW2K3DCsInForest");

    $.Constant({Static:true , Public:false}, "SchemaObjectNotCommitted", $.String, "SchemaObjectNotCommitted");

    $.Constant({Static:true , Public:false}, "InvalidFlags", $.String, "InvalidFlags");

    $.Constant({Static:true , Public:false}, "CannotPerformOnGCObject", $.String, "CannotPerformOnGCObject");

    $.Constant({Static:true , Public:false}, "CannotPerformOnGC", $.String, "CannotPerformOnGC");

    $.Constant({Static:true , Public:false}, "ValueCannotBeModified", $.String, "ValueCannotBeModified");

    $.Constant({Static:true , Public:false}, "ServerShouldBeW2K3", $.String, "ServerShouldBeW2K3");

    $.Constant({Static:true , Public:false}, "LinkedPropertyNotFound", $.String, "LinkedPropertyNotFound");

    $.Constant({Static:true , Public:false}, "GCDisabled", $.String, "GCDisabled");

    $.Constant({Static:true , Public:false}, "PropertyInvalidForADAM", $.String, "PropertyInvalidForADAM");

    $.Constant({Static:true , Public:false}, "OperationInvalidForADAM", $.String, "OperationInvalidForADAM");

    $.Constant({Static:true , Public:false}, "ContextNotAssociatedWithDomain", $.String, "ContextNotAssociatedWithDomain");

    $.Constant({Static:true , Public:false}, "ComputerNotJoinedToDomain", $.String, "ComputerNotJoinedToDomain");

    $.Constant({Static:true , Public:false}, "VersionFailure", $.String, "VersionFailure");

    $.Constant({Static:true , Public:false}, "NoHostName", $.String, "NoHostName");

    $.Constant({Static:true , Public:false}, "NoHostNameOrPortNumber", $.String, "NoHostNameOrPortNumber");

    $.Constant({Static:true , Public:false}, "NTAuthority", $.String, "NTAuthority");

    $.Constant({Static:true , Public:false}, "Name", $.String, "Name");

    $.Constant({Static:true , Public:false}, "OneLevelPartitionNotSupported", $.String, "OneLevelPartitionNotSupported");

    $.Constant({Static:true , Public:false}, "SiteNameNotFound", $.String, "SiteNameNotFound");

    $.Constant({Static:true , Public:false}, "SiteObjectNameNotFound", $.String, "SiteObjectNameNotFound");

    $.Constant({Static:true , Public:false}, "ComputerObjectNameNotFound", $.String, "ComputerObjectNameNotFound");

    $.Constant({Static:true , Public:false}, "ServerObjectNameNotFound", $.String, "ServerObjectNameNotFound");

    $.Constant({Static:true , Public:false}, "NtdsaObjectNameNotFound", $.String, "NtdsaObjectNameNotFound");

    $.Constant({Static:true , Public:false}, "NtdsaObjectGuidNotFound", $.String, "NtdsaObjectGuidNotFound");

    $.Constant({Static:true , Public:false}, "OnlyDomainOrForest", $.String, "OnlyDomainOrForest");

    $.Constant({Static:true , Public:false}, "ServerShouldBeDC", $.String, "ServerShouldBeDC");

    $.Constant({Static:true , Public:false}, "ServerShouldBeAI", $.String, "ServerShouldBeAI");

    $.Constant({Static:true , Public:false}, "CannotModifySacl", $.String, "CannotModifySacl");

    $.Constant({Static:true , Public:false}, "CannotModifyDacl", $.String, "CannotModifyDacl");

    $.Constant({Static:true , Public:false}, "ForestTrustCollision", $.String, "ForestTrustCollision");

    $.Constant({Static:true , Public:false}, "ForestTrustDoesNotExist", $.String, "ForestTrustDoesNotExist");

    $.Constant({Static:true , Public:false}, "DomainTrustDoesNotExist", $.String, "DomainTrustDoesNotExist");

    $.Constant({Static:true , Public:false}, "WrongForestTrust", $.String, "WrongForestTrust");

    $.Constant({Static:true , Public:false}, "WrongTrustDirection", $.String, "WrongTrustDirection");

    $.Constant({Static:true , Public:false}, "NT4NotSupported", $.String, "NT4NotSupported");

    $.Constant({Static:true , Public:false}, "KerberosNotSupported", $.String, "KerberosNotSupported");

    $.Constant({Static:true , Public:false}, "DSPropertyListUnsupported", $.String, "DSPropertyListUnsupported");

    $.Constant({Static:true , Public:false}, "DSMultipleSDNotSupported", $.String, "DSMultipleSDNotSupported");

    $.Constant({Static:true , Public:false}, "DSSDNoValues", $.String, "DSSDNoValues");

    $.Constant({Static:true , Public:false}, "ConnectionSourcServerShouldBeDC", $.String, "ConnectionSourcServerShouldBeDC");

    $.Constant({Static:true , Public:false}, "ConnectionSourcServerShouldBeADAM", $.String, "ConnectionSourcServerShouldBeADAM");

    $.Constant({Static:true , Public:false}, "ConnectionSourcServerSameForest", $.String, "ConnectionSourcServerSameForest");

    $.Constant({Static:true , Public:false}, "ConnectionSourcServerSameConfigSet", $.String, "ConnectionSourcServerSameConfigSet");

    $.Constant({Static:true , Public:false}, "TrustVerificationNotSupport", $.String, "TrustVerificationNotSupport");

    $.Constant({Static:true , Public:false}, "DSChildren", $.String, "DSChildren");

    $.Constant({Static:true , Public:false}, "DSGuid", $.String, "DSGuid");

    $.Constant({Static:true , Public:false}, "DSName", $.String, "DSName");

    $.Constant({Static:true , Public:false}, "DSNativeObject", $.String, "DSNativeObject");

    $.Constant({Static:true , Public:false}, "DSParent", $.String, "DSParent");

    $.Constant({Static:true , Public:false}, "DSPassword", $.String, "DSPassword");

    $.Constant({Static:true , Public:false}, "DSPath", $.String, "DSPath");

    $.Constant({Static:true , Public:false}, "DSProperties", $.String, "DSProperties");

    $.Constant({Static:true , Public:false}, "DSSchemaClassName", $.String, "DSSchemaClassName");

    $.Constant({Static:true , Public:false}, "DSSchemaEntry", $.String, "DSSchemaEntry");

    $.Constant({Static:true , Public:false}, "DSUsePropertyCache", $.String, "DSUsePropertyCache");

    $.Constant({Static:true , Public:false}, "DSUsername", $.String, "DSUsername");

    $.Constant({Static:true , Public:false}, "DSAuthenticationType", $.String, "DSAuthenticationType");

    $.Constant({Static:true , Public:false}, "DSNativeGuid", $.String, "DSNativeGuid");

    $.Constant({Static:true , Public:false}, "DSCacheResults", $.String, "DSCacheResults");

    $.Constant({Static:true , Public:false}, "DSClientTimeout", $.String, "DSClientTimeout");

    $.Constant({Static:true , Public:false}, "DSPropertyNamesOnly", $.String, "DSPropertyNamesOnly");

    $.Constant({Static:true , Public:false}, "DSFilter", $.String, "DSFilter");

    $.Constant({Static:true , Public:false}, "DSPageSize", $.String, "DSPageSize");

    $.Constant({Static:true , Public:false}, "DSPropertiesToLoad", $.String, "DSPropertiesToLoad");

    $.Constant({Static:true , Public:false}, "DSReferralChasing", $.String, "DSReferralChasing");

    $.Constant({Static:true , Public:false}, "DSSearchScope", $.String, "DSSearchScope");

    $.Constant({Static:true , Public:false}, "DSServerPageTimeLimit", $.String, "DSServerPageTimeLimit");

    $.Constant({Static:true , Public:false}, "DSServerTimeLimit", $.String, "DSServerTimeLimit");

    $.Constant({Static:true , Public:false}, "DSSizeLimit", $.String, "DSSizeLimit");

    $.Constant({Static:true , Public:false}, "DSSearchRoot", $.String, "DSSearchRoot");

    $.Constant({Static:true , Public:false}, "DSSort", $.String, "DSSort");

    $.Constant({Static:true , Public:false}, "DSSortName", $.String, "DSSortName");

    $.Constant({Static:true , Public:false}, "DSSortDirection", $.String, "DSSortDirection");

    $.Constant({Static:true , Public:false}, "DSAsynchronous", $.String, "DSAsynchronous");

    $.Constant({Static:true , Public:false}, "DSTombstone", $.String, "DSTombstone");

    $.Constant({Static:true , Public:false}, "DSAttributeQuery", $.String, "DSAttributeQuery");

    $.Constant({Static:true , Public:false}, "DSDerefAlias", $.String, "DSDerefAlias");

    $.Constant({Static:true , Public:false}, "DSSecurityMasks", $.String, "DSSecurityMasks");

    $.Constant({Static:true , Public:false}, "DSExtendedDn", $.String, "DSExtendedDn");

    $.Constant({Static:true , Public:false}, "DSDirectorySynchronizationFlag", $.String, "DSDirectorySynchronizationFlag");

    $.Constant({Static:true , Public:false}, "DSDirectorySynchronizationCookie", $.String, "DSDirectorySynchronizationCookie");

    $.Constant({Static:true , Public:false}, "DSDirectorySynchronization", $.String, "DSDirectorySynchronization");

    $.Constant({Static:true , Public:false}, "DSUnknown", $.String, "DSUnknown");

    $.Constant({Static:true , Public:false}, "DSOptions", $.String, "DSOptions");

    $.Constant({Static:true , Public:false}, "DSObjectSecurity", $.String, "DSObjectSecurity");

    $.Constant({Static:true , Public:false}, "DirectoryEntryDesc", $.String, "DirectoryEntryDesc");

    $.Constant({Static:true , Public:false}, "DirectorySearcherDesc", $.String, "DirectorySearcherDesc");

    $.Constant({Static:true , Public:false}, "OnlyAllowSingleDimension", $.String, "OnlyAllowSingleDimension");

    $.Constant({Static:true , Public:false}, "LessThanZero", $.String, "LessThanZero");

    $.Constant({Static:true , Public:false}, "DestinationArrayNotLargeEnough", $.String, "DestinationArrayNotLargeEnough");

    $.Constant({Static:true , Public:false}, "NoNegativeTime", $.String, "NoNegativeTime");

    $.Constant({Static:true , Public:false}, "ReplicationIntervalExceedMax", $.String, "ReplicationIntervalExceedMax");

    $.Constant({Static:true , Public:false}, "ReplicationIntervalInMinutes", $.String, "ReplicationIntervalInMinutes");

    $.Constant({Static:true , Public:false}, "TimespanExceedMax", $.String, "TimespanExceedMax");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.DirectoryServices.ActiveDirectory");
/* class System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition */ 

(function ActiveDirectoryPartition$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "partitionName", $.String);

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "directoryEntryMgr", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata */ 

(function ActiveDirectoryReplicationMetadata$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.DictionaryBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AttributeMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddHelper", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.IntPtr, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AttributeMetadata")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeNames", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AttributeMetadata"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection"))
    );

    $.Field({Static:false, Public:false}, "server", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "dataValueCollection", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection"));

    $.Field({Static:false, Public:false}, "dataNameCollection", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection"));

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AttributeMetadata"));

    $.Property({Static:false, Public:true }, "AttributeNames", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection"));

    $.Property({Static:false, Public:true }, "Values", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.ActiveDirectory.HourOfDay */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.HourOfDay", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Zero: 0, 
    One: 1, 
    Two: 2, 
    Three: 3, 
    Four: 4, 
    Five: 5, 
    Six: 6, 
    Seven: 7, 
    Eight: 8, 
    Nine: 9, 
    Ten: 10, 
    Eleven: 11, 
    Twelve: 12, 
    Thirteen: 13, 
    Fourteen: 14, 
    Fifteen: 15, 
    Sixteen: 16, 
    Seventeen: 17, 
    Eighteen: 18, 
    Nineteen: 19, 
    Twenty: 20, 
    TwentyOne: 21, 
    TwentyTwo: 22, 
    TwentyThree: 23, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.MinuteOfHour */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.MinuteOfHour", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Zero: 0, 
    Fifteen: 15, 
    Thirty: 30, 
    FortyFive: 45, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule */ 

(function ActiveDirectorySchedule$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RawSchedule", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Boolean, JSIL.ArrayDimensionParameter(3)]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnmanagedSchedule", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetSchedule", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RawSchedule", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Boolean, JSIL.ArrayDimensionParameter(3)]))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetDailySchedule", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.HourOfDay"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.MinuteOfHour"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.HourOfDay"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.MinuteOfHour")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSchedule", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.DayOfWeek"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.HourOfDay"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.MinuteOfHour"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.HourOfDay"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.MinuteOfHour")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSchedule", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.DayOfWeek")]), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.HourOfDay"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.MinuteOfHour"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.HourOfDay"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.MinuteOfHour")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUnmanagedSchedule", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateRawArray", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Boolean, JSIL.ArrayDimensionParameter(3)]))
    );

    $.Field({Static:false, Public:false}, "scheduleArray", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "utcOffSet", $.Int64);

    $.Property({Static:false, Public:true }, "RawSchedule", $jsilcore.TypeRef("System.Array", [$.Boolean, JSIL.ArrayDimensionParameter(3)]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.ActiveDirectory.SchemaClassType */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.SchemaClassType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Type88: 0, 
    Structural: 1, 
    Abstract: 2, 
    Auxiliary: 3, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.PropertyTypes */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.PropertyTypes", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Indexed: 2, 
    InGlobalCatalog: 4, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema */ 

(function ActiveDirectorySchema$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllClasses", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllClasses", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SchemaClassType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllDefunctClasses", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllDefunctProperties", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllProperties", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllProperties", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.PropertyTypes")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindClass", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindDefunctClass", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindDefunctProperty", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindProperty", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaRoleOwner", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAllClasses", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection"), [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAllProperties", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection"), [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCurrentSchema", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSchema", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaRoleOwner", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RefreshSchema", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "schemaEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "abstractSchemaEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "cachedSchemaRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.Property({Static:false, Public:true }, "SchemaRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass */ 

(function ActiveDirectorySchemaClass$Members () {
  var $, $thisType;












































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $asm15.TypeRef("System.DirectoryServices.DirectoryEntry")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm07.TypeRef("System.Collections.Hashtable"), $asm15.TypeRef("System.DirectoryServices.DirectoryEntry")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), 
          $asm15.TypeRef("System.DirectoryServices.DirectoryEntry")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "FindByName", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuxiliaryClasses", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CommonName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultObjectSecurityDescriptor", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDefunct", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MandatoryProperties", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Oid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OptionalProperties", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PossibleInferiors", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PossibleSuperiors", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaGuid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubClassOf", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SchemaClassType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAllProperties", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetClasses", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Collections.ICollection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProperties", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Collections.ICollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPropertiesFromSchemaContainer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Hashtable"), [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropertyValuesRecursively", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ArrayList"), [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaClassDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueFromCache", 
      new JSIL.MethodSignature($.Object, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValuesFromCache", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ICollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializePropertiesFromSchemaContainer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CommonName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultObjectSecurityDescriptor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsDefunct", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Oid", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaGuid", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SubClassOf", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SchemaClassType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "classEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "schemaEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "abstractClassEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "iadsClass", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.NativeComInterfaces+IAdsClass"));

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "isBound", $.Boolean);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "schema", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema"));

    $.Field({Static:false, Public:false}, "propertiesFromSchemaContainerInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "isDefunctOnServer", $.Boolean);

    $.Field({Static:false, Public:false}, "propertyValuesFromServer", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "ldapDisplayName", $.String);

    $.Field({Static:false, Public:false}, "commonName", $.String);

    $.Field({Static:false, Public:false}, "oid", $.String);

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "descriptionInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "isDefunct", $.Boolean);

    $.Field({Static:false, Public:false}, "possibleSuperiors", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection"));

    $.Field({Static:false, Public:false}, "auxiliaryClasses", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection"));

    $.Field({Static:false, Public:false}, "possibleInferiors", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection"));

    $.Field({Static:false, Public:false}, "mandatoryProperties", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection"));

    $.Field({Static:false, Public:false}, "optionalProperties", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection"));

    $.Field({Static:false, Public:false}, "subClassOf", $.Type);

    $.Field({Static:false, Public:false}, "type", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SchemaClassType"));

    $.Field({Static:false, Public:false}, "typeInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "schemaGuidBinaryForm", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "defaultSDSddlForm", $.String);

    $.Field({Static:false, Public:false}, "defaultSDSddlFormInitialized", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "CommonName", $.String);

    $.Property({Static:false, Public:true }, "Oid", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "IsDefunct", $.Boolean);

    $.Property({Static:false, Public:true }, "PossibleSuperiors", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection"));

    $.Property({Static:false, Public:true }, "PossibleInferiors", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection"));

    $.Property({Static:false, Public:true }, "MandatoryProperties", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection"));

    $.Property({Static:false, Public:true }, "OptionalProperties", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection"));

    $.Property({Static:false, Public:true }, "AuxiliaryClasses", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection"));

    $.Property({Static:false, Public:true }, "SubClassOf", $.Type);

    $.Property({Static:false, Public:true }, "Type", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SchemaClassType"));

    $.Property({Static:false, Public:true }, "SchemaGuid", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "DefaultObjectSecurityDescriptor", $asm15.TypeRef("System.DirectoryServices.ActiveDirectorySecurity"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection */ 

(function ActiveDirectorySchemaClassCollection$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClassCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass"), 
          $.Boolean, $.String, 
          $asm07.TypeRef("System.Collections.ICollection"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass"), 
          $.Boolean, $.String, 
          $asm07.TypeRef("System.Collections.ICollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMultiValuedProperty", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClearComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsertComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemoveComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSetComplete", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass")])
    );

    $.Field({Static:false, Public:false}, "classEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "propertyName", $.String);

    $.Field({Static:false, Public:false}, "schemaClass", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass"));

    $.Field({Static:false, Public:false}, "isBound", $.Boolean);

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.ActiveDirectory.SearchFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.SearchFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    IsIndexed: 1, 
    IsIndexedOverContainer: 2, 
    IsInAnr: 4, 
    IsOnTombstonedObject: 8, 
    IsTupleIndexed: 32, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty */ 

(function ActiveDirectorySchemaProperty$Members () {
  var $, $thisType;

























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $asm15.TypeRef("System.DirectoryServices.DirectoryEntry")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.SearchResult"), $asm15.TypeRef("System.DirectoryServices.DirectoryEntry")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), 
          $asm15.TypeRef("System.DirectoryServices.DirectoryEntry")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "FindByName", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CommonName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDefunct", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsInAnr", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsIndexed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsIndexedOverContainer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsInGlobalCatalog", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsOnTombstonedObject", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsSingleValued", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsTupleIndexed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Link", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinkId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Oid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RangeLower", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RangeUpper", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaGuid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Syntax", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPropertiesFromSchemaContainer", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.SearchResult"), [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaPropertyDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueFromCache", 
      new JSIL.MethodSignature($.Object, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializePropertiesFromSchemaContainer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeSearchFlags", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSetInSearchFlags", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SearchFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MapSyntax", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax"), [
          $.String, $.Int32, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.OMObjectClass")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetBitInSearchFlags", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SearchFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CommonName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsDefunct", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsInAnr", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsIndexed", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsIndexedOverContainer", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsInGlobalCatalog", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsOnTombstonedObject", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsSingleValued", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsTupleIndexed", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LinkId", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Oid", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RangeLower", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RangeUpper", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaGuid", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Syntax", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBitInSearchFlags", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SearchFlags"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSyntax", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "schemaEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "propertyEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "abstractPropertyEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "iadsProperty", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.NativeComInterfaces+IAdsProperty"));

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "isBound", $.Boolean);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "schema", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema"));

    $.Field({Static:false, Public:false}, "propertiesFromSchemaContainerInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "isDefunctOnServer", $.Boolean);

    $.Field({Static:false, Public:false}, "propertyValuesFromServer", $asm15.TypeRef("System.DirectoryServices.SearchResult"));

    $.Field({Static:false, Public:false}, "ldapDisplayName", $.String);

    $.Field({Static:false, Public:false}, "commonName", $.String);

    $.Field({Static:false, Public:false}, "oid", $.String);

    $.Field({Static:false, Public:false}, "syntax", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax"));

    $.Field({Static:false, Public:false}, "syntaxInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "descriptionInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "isSingleValued", $.Boolean);

    $.Field({Static:false, Public:false}, "isSingleValuedInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "isInGlobalCatalog", $.Boolean);

    $.Field({Static:false, Public:false}, "isInGlobalCatalogInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "rangeLower", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "rangeLowerInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "rangeUpper", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "rangeUpperInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "isDefunct", $.Boolean);

    $.Field({Static:false, Public:false}, "searchFlags", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SearchFlags"));

    $.Field({Static:false, Public:false}, "searchFlagsInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "linkedProperty", $.Type);

    $.Field({Static:false, Public:false}, "linkedPropertyInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "linkId", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "linkIdInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "schemaGuidBinaryForm", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "dnOMObjectClass", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.OMObjectClass"));

    $.Field({Static:true , Public:false}, "dNWithStringOMObjectClass", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.OMObjectClass"));

    $.Field({Static:true , Public:false}, "dNWithBinaryOMObjectClass", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.OMObjectClass"));

    $.Field({Static:true , Public:false}, "replicaLinkOMObjectClass", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.OMObjectClass"));

    $.Field({Static:true , Public:false}, "presentationAddressOMObjectClass", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.OMObjectClass"));

    $.Field({Static:true , Public:false}, "accessPointDnOMObjectClass", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.OMObjectClass"));

    $.Field({Static:true , Public:false}, "oRNameOMObjectClass", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.OMObjectClass"));

    $.Field({Static:true , Public:false}, "SyntaxesCount", $.Int32, 23);

    $.Field({Static:true , Public:false}, "syntaxes", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Syntax")]));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "CommonName", $.String);

    $.Property({Static:false, Public:true }, "Oid", $.String);

    $.Property({Static:false, Public:true }, "Syntax", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax"));

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "IsSingleValued", $.Boolean);

    $.Property({Static:false, Public:true }, "IsIndexed", $.Boolean);

    $.Property({Static:false, Public:true }, "IsIndexedOverContainer", $.Boolean);

    $.Property({Static:false, Public:true }, "IsInAnr", $.Boolean);

    $.Property({Static:false, Public:true }, "IsOnTombstonedObject", $.Boolean);

    $.Property({Static:false, Public:true }, "IsTupleIndexed", $.Boolean);

    $.Property({Static:false, Public:true }, "IsInGlobalCatalog", $.Boolean);

    $.Property({Static:false, Public:true }, "RangeLower", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "RangeUpper", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "IsDefunct", $.Boolean);

    $.Property({Static:false, Public:true }, "Link", $.Type);

    $.Property({Static:false, Public:true }, "LinkId", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "SchemaGuid", $asm07.TypeRef("System.Guid"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection */ 

(function ActiveDirectorySchemaPropertyCollection$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaPropertyCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass"), 
          $.Boolean, $.String, 
          $asm07.TypeRef("System.Collections.ICollection"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass"), 
          $.Boolean, $.String, 
          $asm07.TypeRef("System.Collections.ICollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMultiValuedProperty", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClearComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsertComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemoveComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSetComplete", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty")])
    );

    $.Field({Static:false, Public:false}, "classEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "propertyName", $.String);

    $.Field({Static:false, Public:false}, "schemaClass", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass"));

    $.Field({Static:false, Public:false}, "isBound", $.Boolean);

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteOptions", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    AutoTopologyDisabled: 1, 
    TopologyCleanupDisabled: 2, 
    AutoMinimumHopDisabled: 4, 
    StaleServerDetectDisabled: 8, 
    AutoInterSiteTopologyDisabled: 16, 
    GroupMembershipCachingEnabled: 32, 
    ForceKccWindows2003Behavior: 64, 
    UseWindows2000IstgElection: 128, 
    RandomBridgeHeaderServerSelectionDisabled: 256, 
    UseHashingForReplicationSchedule: 512, 
    RedundantServerTopologyEnabled: 1024, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectorySite */ 

(function ActiveDirectorySite$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySite", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "FindByName", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AdjacentSites", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BridgeheadServers", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Domains", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InterSiteTopologyGenerator", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IntraSiteReplicationSchedule", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsADAM", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NTDSSiteEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreferredRpcBridgeheadServers", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreferredSmtpBridgeheadServers", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Servers", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SiteLinks", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Subnets", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAdjacentSites", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBridgeheadServers", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetComputerSite", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDomains", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLinks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPreferredBridgeheadServers", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetServers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSubnets", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InterSiteTopologyGenerator", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IntraSiteReplicationSchedule", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Options", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteOptions"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateArgument", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "cachedEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "ntdsEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "subnets", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection"));

    $.Field({Static:false, Public:false}, "topologyGenerator", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.Field({Static:false, Public:false}, "adjacentSites", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "domains", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainCollection"));

    $.Field({Static:false, Public:false}, "servers", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection"));

    $.Field({Static:false, Public:false}, "links", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection"));

    $.Field({Static:false, Public:false}, "siteOptions", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteOptions"));

    $.Field({Static:false, Public:false}, "bridgeheadServers", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection"));

    $.Field({Static:false, Public:false}, "SMTPBridgeheadServers", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServerCollection"));

    $.Field({Static:false, Public:false}, "RPCBridgeheadServers", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServerCollection"));

    $.Field({Static:false, Public:false}, "replicationSchedule", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "existing", $.Boolean);

    $.Field({Static:false, Public:false}, "subnetRetrieved", $.Boolean);

    $.Field({Static:false, Public:false}, "isADAMServer", $.Boolean);

    $.Field({Static:false, Public:false}, "checkADAM", $.Boolean);

    $.Field({Static:false, Public:false}, "topologyTouched", $.Boolean);

    $.Field({Static:false, Public:false}, "adjacentSitesRetrieved", $.Boolean);

    $.Field({Static:false, Public:false}, "siteDN", $.String);

    $.Field({Static:false, Public:false}, "domainsRetrieved", $.Boolean);

    $.Field({Static:false, Public:false}, "serversRetrieved", $.Boolean);

    $.Field({Static:false, Public:false}, "belongLinksRetrieved", $.Boolean);

    $.Field({Static:false, Public:false}, "bridgeheadServerRetrieved", $.Boolean);

    $.Field({Static:false, Public:false}, "SMTPBridgeRetrieved", $.Boolean);

    $.Field({Static:false, Public:false}, "RPCBridgeRetrieved", $.Boolean);

    $.Field({Static:true , Public:false}, "ERROR_NO_SITENAME", $.Int32, 1919);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Domains", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainCollection"));

    $.Property({Static:false, Public:true }, "Subnets", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection"));

    $.Property({Static:false, Public:true }, "Servers", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection"));

    $.Property({Static:false, Public:true }, "AdjacentSites", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection"));

    $.Property({Static:false, Public:true }, "SiteLinks", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection"));

    $.Property({Static:false, Public:true }, "InterSiteTopologyGenerator", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.Property({Static:false, Public:true }, "Options", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteOptions"));

    $.Property({Static:false, Public:true }, "Location", $.String);

    $.Property({Static:false, Public:true }, "BridgeheadServers", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection"));

    $.Property({Static:false, Public:true }, "PreferredSmtpBridgeheadServers", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServerCollection"));

    $.Property({Static:false, Public:true }, "PreferredRpcBridgeheadServers", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServerCollection"));

    $.Property({Static:false, Public:true }, "IntraSiteReplicationSchedule", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule"));

    $.Property({Static:false, Public:false}, "IsADAM", $.Boolean);

    $.Property({Static:false, Public:false}, "NTDSSiteEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection */ 

(function ActiveDirectorySiteCollection$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClearComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsertComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemoveComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSetComplete", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite")])
    );

    $.Field({Static:false, Public:false}, "de", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "initialized", $.Boolean);

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink */ 

(function ActiveDirectorySiteLink$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"), $.Boolean, 
          $asm15.TypeRef("System.DirectoryServices.DirectoryEntry")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "FindByName", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindByName", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Cost", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataCompressionEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InterSiteReplicationSchedule", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotificationEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReciprocalReplicationEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReplicationInterval", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sites", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransportType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSites", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Cost", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataCompressionEnabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InterSiteReplicationSchedule", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NotificationEnabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReciprocalReplicationEnabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReplicationInterval", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateArgument", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType")
        ])
    );

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "transport", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "existing", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Constant({Static:true , Public:false}, "systemDefaultCost", $.Int32, 0);

    $.Field({Static:false, Public:false}, "systemDefaultInterval", $asm07.TypeRef("System.TimeSpan"));

    $.Constant({Static:true , Public:false}, "appDefaultCost", $.Int32, 100);

    $.Constant({Static:true , Public:false}, "appDefaultInterval", $.Int32, 180);

    $.Field({Static:false, Public:false}, "sites", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection"));

    $.Field({Static:false, Public:false}, "siteRetrieved", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "TransportType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"));

    $.Property({Static:false, Public:true }, "Sites", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteCollection"));

    $.Property({Static:false, Public:true }, "Cost", $.Int32);

    $.Property({Static:false, Public:true }, "ReplicationInterval", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "ReciprocalReplicationEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "NotificationEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "DataCompressionEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "InterSiteReplicationSchedule", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge */ 

(function ActiveDirectorySiteLinkBridge$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "FindByName", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindByName", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SiteLinks", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransportType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLinks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateArgument", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType")
        ])
    );

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "transport", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "existing", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "links", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection"));

    $.Field({Static:false, Public:false}, "linksRetrieved", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "SiteLinks", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection"));

    $.Property({Static:false, Public:true }, "TransportType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection */ 

(function ActiveDirectorySiteLinkCollection$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClearComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsertComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemoveComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSetComplete", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink")])
    );

    $.Field({Static:false, Public:false}, "de", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "initialized", $.Boolean);

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet */ 

(function ActiveDirectorySubnet$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "FindByName", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Site", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Site", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateArgument", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.Field({Static:false, Public:false}, "site", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "existing", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Site", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite"));

    $.Property({Static:false, Public:true }, "Location", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection */ 

(function ActiveDirectorySubnetCollection$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnetCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakePath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClearComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsertComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemoveComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSetComplete", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet")])
    );

    $.Field({Static:false, Public:false}, "changeList", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "initialized", $.Boolean);

    $.Field({Static:false, Public:false}, "siteDN", $.String);

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "copyList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySubnet"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.ActiveDirectorySyntax", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    CaseExactString: 0, 
    CaseIgnoreString: 1, 
    NumericString: 2, 
    DirectoryString: 3, 
    OctetString: 4, 
    SecurityDescriptor: 5, 
    Int: 6, 
    Int64: 7, 
    Bool: 8, 
    Oid: 9, 
    GeneralizedTime: 10, 
    UtcTime: 11, 
    DN: 12, 
    DNWithBinary: 13, 
    DNWithString: 14, 
    Enumeration: 15, 
    IA5String: 16, 
    PrintableString: 17, 
    Sid: 18, 
    AccessPointDN: 19, 
    ORName: 20, 
    PresentationAddress: 21, 
    ReplicaLink: 22, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.OMObjectClass */ 

(function OMObjectClass$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.OMObjectClass", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Data", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:true }, "data", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Data", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.Syntax */ 

(function Syntax$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.Syntax", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.OMObjectClass")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.Field({Static:false, Public:true }, "attributeSyntax", $.String);

    $.Field({Static:false, Public:true }, "oMSyntax", $.Int32);

    $.Field({Static:false, Public:true }, "oMObjectClass", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.OMObjectClass"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DirectoryServer */ 

(function DirectoryServer$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DirectoryServer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckConsistencyHelper", 
      new JSIL.MethodSignature(null, [$.IntPtr, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CheckReplicationConsistency", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructFailures", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection"), [
          $.IntPtr, $.Type, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructMetaData", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata"), [
          $.Boolean, $.IntPtr, 
          $.Type, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructNeighbors", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection"), [
          $.IntPtr, $.Type, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructPendingOperations", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation"), [
          $.IntPtr, $.Type, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructReplicationCursors", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection"), [
          $.IntPtr, $.Boolean, 
          $.IntPtr, $.String, 
          $.Type, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:false}, "FreeReplicaInfo", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DS_REPL_INFO_TYPE"), $.IntPtr, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Context", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InboundConnections", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IPAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutboundConnections", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Partitions", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SiteName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncFromAllServersCallback", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncUpdateCallback"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAllReplicationNeighbors", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInboundConnectionsHelper", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutboundConnectionsHelper", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPartitions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationConnectionFailures", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationCursors", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReplicationInfoHelper", 
      new JSIL.MethodSignature($.IntPtr, [
          $.IntPtr, $.Int32, 
          $.Int32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Int32, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationMetadata", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationNeighbors", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationOperationInformation", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToAnotherSite", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SyncFromAllServersCallback", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncUpdateCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SyncAllCallbackRoutine", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:false}, "SyncReplicaAllHelper", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncReplicaFromAllServersCallback"), 
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncUpdateCallback"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SyncReplicaFromAllServers", 
      new JSIL.MethodSignature(null, [$.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SyncReplicaFromServer", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SyncReplicaHelper", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.Boolean, 
          $.String, $.String, 
          $.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TriggerSyncReplicaFromNeighbors", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "replicaName", $.String);

    $.Field({Static:false, Public:false}, "directoryEntryMgr", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager"));

    $.Field({Static:false, Public:false}, "siteInfoModified", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedSiteName", $.String);

    $.Field({Static:false, Public:false}, "cachedSiteObjectName", $.String);

    $.Field({Static:false, Public:false}, "cachedServerObjectName", $.String);

    $.Field({Static:false, Public:false}, "cachedNtdsaObjectName", $.String);

    $.Field({Static:false, Public:false}, "cachedNtdsaObjectGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "cachedIPAddress", $.String);

    $.Field({Static:false, Public:false}, "cachedPartitions", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection"));

    $.Constant({Static:true , Public:false}, "DS_REPSYNC_ASYNCHRONOUS_OPERATION", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DS_REPSYNC_ALL_SOURCES", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "DS_REPSYNCALL_ID_SERVERS_BY_DN", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "DS_REPL_NOTSUPPORTED", $.Int32, 50);

    $.Constant({Static:true , Public:false}, "DS_REPL_INFO_FLAG_IMPROVE_LINKED_ATTRS", $.Int32, 1);

    $.Field({Static:false, Public:false}, "inbound", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"));

    $.Field({Static:false, Public:false}, "outbound", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Partitions", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "IPAddress", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SiteName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncFromAllServersCallback", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncUpdateCallback"));

    $.Property({Static:false, Public:true , Virtual:true }, "InboundConnections", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "OutboundConnections", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"));

    $.Property({Static:false, Public:false}, "Context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.AdamInstance */ 

(function AdamInstance$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), 
      Name: "System.DirectoryServices.ActiveDirectory.AdamInstance", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CheckReplicationConsistency", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:true , Public:true }, "FindAll", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstanceCollection"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindOne", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeADAMHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConfigurationSet", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ConfigurationSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultPartition", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InboundConnections", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IPAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LdapPort", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NtdsaObjectGuid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NtdsaObjectName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutboundConnections", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Roles", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamRoleCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerObjectName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SiteName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SiteObjectName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SslPort", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncFromAllServersCallback", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncUpdateCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetADAMHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAdamInstance", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAllReplicationNeighbors", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationConnectionFailures", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationCursors", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReplicationFailures", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DS_REPL_INFO_TYPE")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationMetadata", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationNeighbors", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationOperationInformation", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SeizeRoleOwnership", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamRole"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultPartition", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SyncFromAllServersCallback", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncUpdateCallback"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SyncReplicaFromAllServers", 
      new JSIL.MethodSignature(null, [$.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SyncReplicaFromServer", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "TransferRoleOwnership", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamRole"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TriggerSyncReplicaFromNeighbors", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "becomeRoleOwnerAttrs", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedHostName", $.String);

    $.Field({Static:false, Public:false}, "cachedLdapPort", $.Int32);

    $.Field({Static:false, Public:false}, "cachedSslPort", $.Int32);

    $.Field({Static:false, Public:false}, "defaultPartitionInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "defaultPartitionModified", $.Boolean);

    $.Field({Static:false, Public:false}, "currentConfigSet", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ConfigurationSet"));

    $.Field({Static:false, Public:false}, "cachedDefaultPartition", $.String);

    $.Field({Static:false, Public:false}, "cachedRoles", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamRoleCollection"));

    $.Field({Static:false, Public:false}, "ADAMHandle", $.IntPtr);

    $.Field({Static:false, Public:false}, "authIdentity", $.IntPtr);

    $.Field({Static:false, Public:false}, "userDelegate", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncUpdateCallback"));

    $.Field({Static:false, Public:false}, "syncAllFunctionPointer", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncReplicaFromAllServersCallback"));

    $.Property({Static:false, Public:true }, "ConfigurationSet", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ConfigurationSet"));

    $.Property({Static:false, Public:true }, "HostName", $.String);

    $.Property({Static:false, Public:true }, "LdapPort", $.Int32);

    $.Property({Static:false, Public:true }, "SslPort", $.Int32);

    $.Property({Static:false, Public:true }, "Roles", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamRoleCollection"));

    $.Property({Static:false, Public:true }, "DefaultPartition", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IPAddress", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SiteName", $.String);

    $.Property({Static:false, Public:false}, "SiteObjectName", $.String);

    $.Property({Static:false, Public:false}, "ServerObjectName", $.String);

    $.Property({Static:false, Public:false}, "NtdsaObjectName", $.String);

    $.Property({Static:false, Public:false}, "NtdsaObjectGuid", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "SyncFromAllServersCallback", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncUpdateCallback"));

    $.Property({Static:false, Public:true , Virtual:true }, "InboundConnections", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "OutboundConnections", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.AdamInstanceCollection */ 

(function AdamInstanceCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.AdamInstanceCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ADSearcher */ 

(function ADSearcher$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ADSearcher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm15.TypeRef("System.DirectoryServices.SearchScope")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm15.TypeRef("System.DirectoryServices.SearchScope"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAll", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SearchResultCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindOne", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.SearchResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PropertiesToLoad", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Filter", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "searcher", $asm15.TypeRef("System.DirectoryServices.DirectorySearcher"));

    $.Field({Static:true , Public:false}, "defaultTimeSpan", $asm07.TypeRef("System.TimeSpan"));


    function ADSearcher__cctor () {
      $thisType.defaultTimeSpan = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ADSearcher__cctor
    );

    $.Property({Static:false, Public:true }, "PropertiesToLoad", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Property({Static:false, Public:true }, "Filter", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.ActiveDirectory.NCFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.NCFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    InstanceTypeIsNCHead: 1, 
    InstanceTypeIsWriteable: 4, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.ApplicationPartitionType */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.ApplicationPartitionType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: -1, 
    ADApplicationPartition: 0, 
    ADAMApplicationPartition: 1, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.ApplicationPartition */ 

(function ApplicationPartition$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition"), 
      Name: "System.DirectoryServices.ActiveDirectory.ApplicationPartition", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartitionType"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateApplicationPartition", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllDirectoryServers", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllDirectoryServers", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAllDirectoryServersInternal", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllDiscoverableDirectoryServers", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllDiscoverableDirectoryServers", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAllDiscoverableDirectoryServersInternal", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindByName", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindDirectoryServer", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindDirectoryServer", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindDirectoryServer", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindDirectoryServer", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDirectoryServerInternal", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DirectoryServers", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityReferenceDomain", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetApplicationPartition", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetApplicationPartitionType", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartitionType"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCrossRefEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamingRoleOwner", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeCrossRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityReferenceDomain", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateApplicationPartitionParameters", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "appType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartitionType"));

    $.Field({Static:false, Public:false}, "committed", $.Boolean);

    $.Field({Static:false, Public:false}, "domainDNSEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "crossRefEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "dnsName", $.String);

    $.Field({Static:false, Public:false}, "cachedDirectoryServers", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServerCollection"));

    $.Field({Static:false, Public:false}, "securityRefDomainModified", $.Boolean);

    $.Field({Static:false, Public:false}, "securityRefDomain", $.String);

    $.Property({Static:false, Public:true }, "DirectoryServers", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServerCollection"));

    $.Property({Static:false, Public:true }, "SecurityReferenceDomain", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection */ 

(function ApplicationPartitionCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartition")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartition")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartition"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartition")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartition"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.AttributeMetadata */ 

(function AttributeMetadata$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.AttributeMetadata", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.Boolean, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastOriginatingChangeTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastOriginatingInvocationId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalChangeUsn", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginatingChangeUsn", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginatingServer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "pszAttributeName", $.String);

    $.Field({Static:false, Public:false}, "dwVersion", $.Int32);

    $.Field({Static:false, Public:false}, "ftimeLastOriginatingChange", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "uuidLastOriginatingDsaInvocationID", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "usnOriginatingChange", $.Int64);

    $.Field({Static:false, Public:false}, "usnLocalChange", $.Int64);

    $.Field({Static:false, Public:false}, "pszLastOriginatingDsaDN", $.String);

    $.Field({Static:false, Public:false}, "originatingServerName", $.String);

    $.Field({Static:false, Public:false}, "server", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "advanced", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Version", $.Int32);

    $.Property({Static:false, Public:true }, "LastOriginatingChangeTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "LastOriginatingInvocationId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "OriginatingChangeUsn", $.Int64);

    $.Property({Static:false, Public:true }, "LocalChangeUsn", $.Int64);

    $.Property({Static:false, Public:true }, "OriginatingServer", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection */ 

(function AttributeMetadataCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.AttributeMetadataCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AttributeMetadata")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AttributeMetadata")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AttributeMetadata")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AttributeMetadata"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AttributeMetadata")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AttributeMetadata"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ConfigurationSet */ 

(function ConfigurationSet$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ConfigurationSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAdamInstance", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAdamInstance", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAdamInstance", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindAdamInstances", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstanceCollection"), [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindAliveAdamInstance", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"), [
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), 
          $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllAdamInstances", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstanceCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllAdamInstances", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstanceCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllAdamInstances", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstanceCollection"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindAnyAdamInstance", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindOneAdamInstance", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"), [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindOneAdamInstance", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"), [
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AdamInstances", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstanceCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationPartitions", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamingRoleOwner", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaRoleOwner", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sites", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetApplicationPartitions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetConfigurationSet", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRoleOwner", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamRole")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSearchRootEntry", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Forest")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSecurityLevel", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSites", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSecurityLevel", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "directoryEntryMgr", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "configSetName", $.String);

    $.Field({Static:false, Public:false}, "cachedSites", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection"));

    $.Field({Static:false, Public:false}, "cachedADAMInstances", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstanceCollection"));

    $.Field({Static:false, Public:false}, "cachedApplicationPartitions", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection"));

    $.Field({Static:false, Public:false}, "cachedSchema", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema"));

    $.Field({Static:false, Public:false}, "cachedSchemaRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"));

    $.Field({Static:false, Public:false}, "cachedNamingRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"));

    $.Field({Static:false, Public:false}, "cachedSecurityLevel", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel"));

    $.Field({Static:true , Public:false}, "locationTimeout", $asm07.TypeRef("System.TimeSpan"));


    function ConfigurationSet__cctor () {
      $thisType.locationTimeout = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ConfigurationSet__cctor
    );

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Sites", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection"));

    $.Property({Static:false, Public:true }, "AdamInstances", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstanceCollection"));

    $.Property({Static:false, Public:true }, "ApplicationPartitions", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection"));

    $.Property({Static:false, Public:true }, "Schema", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema"));

    $.Property({Static:false, Public:true }, "SchemaRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"));

    $.Property({Static:false, Public:true }, "NamingRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamInstance"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.ActiveDirectory.DirectoryContextType */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.DirectoryContextType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Domain: 0, 
    Forest: 1, 
    DirectoryServer: 2, 
    ConfigurationSet: 3, 
    ApplicationPartition: 4, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.DirectoryContext */ 

(function DirectoryContext$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DirectoryContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContextType"), $.String, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContextType"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContextType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContextType"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContextType"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContextType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Credential", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.NetworkCredential"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DnsgetdcSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Password", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ServerBindSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UserName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDnsDomainName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLibraryHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoggedOnDomain", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetServerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeDirectoryContext", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContextType"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "isADAMConfigSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsContextValid", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContextType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "isCurrentForest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "isDomain", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "isNdnc", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "isRootDomain", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "isServer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "useServerBind", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "contextType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContextType"));

    $.Field({Static:false, Public:false}, "credential", $asm0A.TypeRef("System.Net.NetworkCredential"));

    $.Field({Static:false, Public:false}, "serverName", $.String);

    $.Field({Static:false, Public:false}, "usernameIsNull", $.Boolean);

    $.Field({Static:false, Public:false}, "passwordIsNull", $.Boolean);

    $.Field({Static:false, Public:false}, "validated", $.Boolean);

    $.Field({Static:false, Public:false}, "contextIsValid", $.Boolean);

    $.Field({Static:true , Public:false}, "platformSupported", $.Boolean, false);

    $.Field({Static:true , Public:false}, "serverBindSupported", $.Boolean, false);

    $.Field({Static:true , Public:false}, "dnsgetdcSupported", $.Boolean, false);

    $.Field({Static:true , Public:false}, "w2k", $.Boolean, true);

    $.Field({Static:true , Public:false}, "ADHandle", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle"));

    $.Field({Static:true , Public:false}, "ADAMHandle", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle"));

    $.Property({Static:true , Public:false}, "ServerBindSupported", $.Boolean);

    $.Property({Static:true , Public:false}, "DnsgetdcSupported", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "UserName", $.String);

    $.Property({Static:false, Public:false}, "Password", $.String);

    $.Property({Static:false, Public:true }, "ContextType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContextType"));

    $.Property({Static:false, Public:false}, "Credential", $asm0A.TypeRef("System.Net.NetworkCredential"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DistinguishedName */ 

(function DistinguishedName$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DistinguishedName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Components", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Component")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "components", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Component")]));

    $.Property({Static:false, Public:true }, "Components", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Component")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DirectoryEntryManager */ 

(function DirectoryEntryManager$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DirectoryEntryManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Bind", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandWellKnownDN", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.WellKnownDN")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpandWellKnownDN", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.WellKnownDN")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCachedDirectoryEntries", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCachedDirectoryEntry", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.WellKnownDN")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCachedDirectoryEntry", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDirectoryEntry", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.WellKnownDN")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDirectoryEntry", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDirectoryEntryInternal", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNewDirectoryEntry", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveIfExists", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "directoryEntries", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "bindingPrefix", $.String);

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "pathCracker", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.NativeComInterfaces+IAdsPathname"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DirectoryServerCollection */ 

(function DirectoryServerCollection$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.DirectoryServerCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), 
          $.Boolean, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMultiValuedProperty", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClearComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsertComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemoveComplete", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSetComplete", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")])
    );

    $.Field({Static:false, Public:false}, "siteDN", $.String);

    $.Field({Static:false, Public:false}, "transportDN", $.String);

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "initialized", $.Boolean);

    $.Field({Static:false, Public:false}, "changeList", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "copyList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "crossRefEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "isADAM", $.Boolean);

    $.Field({Static:false, Public:false}, "isForNC", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.ActiveDirectory.DomainMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.DomainMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: -1, 
    Windows2000MixedDomain: 0, 
    Windows2000NativeDomain: 1, 
    Windows2003InterimDomain: 2, 
    Windows2003Domain: 3, 
    Windows2008Domain: 4, 
    Windows2008R2Domain: 5, 
    Windows8Domain: 6, 
    Windows2012R2Domain: 7, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.Domain */ 

(function Domain$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition"), 
      Name: "System.DirectoryServices.ActiveDirectory.Domain", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateLocalSideOfTrustRelationship", 
      new JSIL.MethodSignature(null, [
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateTrustRelationship", 
      new JSIL.MethodSignature(null, [$.Type, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteLocalSideOfTrustRelationship", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteTrustRelationship", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllDiscoverableDomainControllers", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainControllerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllDiscoverableDomainControllers", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainControllerCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllDomainControllers", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainControllerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllDomainControllers", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainControllerCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindDomainController", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindDomainController", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindDomainController", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LocatorOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindDomainController", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"), [$.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LocatorOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Children", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DomainControllers", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainControllerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DomainMode", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DomainModeLevel", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Forest", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Forest"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InfrastructureRoleOwner", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parent", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PdcRoleOwner", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RidRoleOwner", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAllTrustRelationships", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChildDomains", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetComputerDomain", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCurrentDomain", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDirectoryContext", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDomain", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDomainMode", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainMode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDomainModeLevel", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParent", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRoleOwner", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSelectiveAuthenticationStatus", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSidFilteringStatus", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTrustRelationship", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTrustsHelper", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ArrayList"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadCrossRefAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "RaiseDomainFunctionality", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RaiseDomainFunctionalityLevel", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RepairTrustHelper", 
      new JSIL.MethodSignature(null, [$.Type, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RepairTrustRelationship", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSelectiveAuthenticationStatus", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSidFilteringStatus", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "UpdateLocalSideOfTrustRelationship", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "UpdateLocalSideOfTrustRelationship", 
      new JSIL.MethodSignature(null, [
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "UpdateTrustRelationship", 
      new JSIL.MethodSignature(null, [$.Type, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyOutboundTrustRelationship", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyTrustRelationship", 
      new JSIL.MethodSignature(null, [$.Type, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection")])
    );

    $.Field({Static:false, Public:false}, "crossRefDN", $.String);

    $.Field({Static:false, Public:false}, "trustParent", $.String);

    $.Field({Static:false, Public:false}, "cachedDomainControllers", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainControllerCollection"));

    $.Field({Static:false, Public:false}, "cachedChildren", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainCollection"));

    $.Field({Static:false, Public:false}, "currentDomainMode", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainMode"));

    $.Field({Static:false, Public:false}, "domainModeLevel", $.Int32);

    $.Field({Static:false, Public:false}, "cachedPdcRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"));

    $.Field({Static:false, Public:false}, "cachedRidRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"));

    $.Field({Static:false, Public:false}, "cachedInfrastructureRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"));

    $.Field({Static:false, Public:false}, "cachedParent", $.Type);

    $.Field({Static:false, Public:false}, "cachedForest", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Forest"));

    $.Field({Static:false, Public:false}, "isParentInitialized", $.Boolean);

    $.Property({Static:false, Public:true }, "Forest", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Forest"));

    $.Property({Static:false, Public:true }, "DomainControllers", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainControllerCollection"));

    $.Property({Static:false, Public:true }, "Children", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainCollection"));

    $.Property({Static:false, Public:true }, "DomainMode", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainMode"));

    $.Property({Static:false, Public:true }, "DomainModeLevel", $.Int32);

    $.Property({Static:false, Public:true }, "Parent", $.Type);

    $.Property({Static:false, Public:true }, "PdcRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"));

    $.Property({Static:false, Public:true }, "RidRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"));

    $.Property({Static:false, Public:true }, "InfrastructureRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DomainCollection */ 

(function DomainCollection$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.DomainCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Domain")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Domain")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Domain")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Domain"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Domain")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Domain"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    AbortIfServerUnavailable: 1, 
    SyncAdjacentServerOnly: 2, 
    CheckServerAlivenessOnly: 8, 
    SkipInitialCheck: 16, 
    PushChangeOutward: 32, 
    CrossSite: 64, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Error: 0, 
    SyncStarted: 1, 
    SyncCompleted: 2, 
    Finished: 3, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    ErrorContactingServer: 0, 
    ErrorReplicating: 1, 
    ServerUnreachable: 2, 
  }
);

/* delegate System.DirectoryServices.ActiveDirectory.SyncUpdateCallback */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.SyncUpdateCallback", true, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [
      $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.String"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException")
    ]));

/* delegate System.DirectoryServices.ActiveDirectory.SyncReplicaFromAllServersCallback */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.SyncReplicaFromAllServersCallback", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr")]));

/* class System.DirectoryServices.ActiveDirectory.DomainController */ 

(function DomainController$Members () {
  var $, $thisType;


























































  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), 
      Name: "System.DirectoryServices.ActiveDirectory.DomainController", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CheckReplicationConsistency", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnableGlobalCatalog", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalog"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:true , Public:true }, "FindAll", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainControllerCollection"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindAll", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainControllerCollection"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindAllInternal", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainControllerCollection"), [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindOne", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindOne", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindOne", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LocatorOptions")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindOne", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LocatorOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindOneInternal", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LocatorOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindOneWithCredentialValidation", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LocatorOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeDSHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ComputerObjectName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Domain", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Domain"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Forest", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Forest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HighestCommittedUsn", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InboundConnections", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IPAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NtdsaObjectGuid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NtdsaObjectName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NumericOSVersion", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OSVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutboundConnections", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Roles", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerObjectName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SiteName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SiteObjectName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncFromAllServersCallback", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncUpdateCallback"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAllReplicationNeighbors", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDirectorySearcher", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectorySearcher"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDomainController", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDomainControllerInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDSHandle", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationConnectionFailures", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationCursors", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReplicationFailures", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DS_REPL_INFO_TYPE")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationMetadata", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryReplicationMetadata"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationNeighbors", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetReplicationOperationInformation", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRoles", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetDirectorySearcher", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectorySearcher"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsGlobalCatalog", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "SeizeRoleOwnership", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SyncFromAllServersCallback", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncUpdateCallback"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SyncReplicaFromAllServers", 
      new JSIL.MethodSignature(null, [$.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersOptions")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SyncReplicaFromServer", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "TransferRoleOwnership", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TriggerSyncReplicaFromNeighbors", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCredential", 
      new JSIL.MethodSignature(null, [$.Type, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.Field({Static:false, Public:false}, "dsHandle", $.IntPtr);

    $.Field({Static:false, Public:false}, "authIdentity", $.IntPtr);

    $.Field({Static:false, Public:false}, "becomeRoleOwnerAttrs", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedComputerObjectName", $.String);

    $.Field({Static:false, Public:false}, "cachedOSVersion", $.String);

    $.Field({Static:false, Public:false}, "cachedNumericOSVersion", $.Double);

    $.Field({Static:false, Public:false}, "currentForest", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Forest"));

    $.Field({Static:false, Public:false}, "cachedDomain", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Domain"));

    $.Field({Static:false, Public:false}, "cachedRoles", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection"));

    $.Field({Static:false, Public:false}, "dcInfoInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "userDelegate", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncUpdateCallback"));

    $.Field({Static:false, Public:false}, "syncAllFunctionPointer", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncReplicaFromAllServersCallback"));

    $.Constant({Static:true , Public:false}, "UpdateRidPoolSeizureValue", $.Int32, 30000);

    $.Property({Static:false, Public:true }, "Forest", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Forest"));

    $.Property({Static:false, Public:true }, "CurrentTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "HighestCommittedUsn", $.Int64);

    $.Property({Static:false, Public:true }, "OSVersion", $.String);

    $.Property({Static:false, Public:false}, "NumericOSVersion", $.Double);

    $.Property({Static:false, Public:true }, "Roles", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection"));

    $.Property({Static:false, Public:true }, "Domain", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Domain"));

    $.Property({Static:false, Public:true , Virtual:true }, "IPAddress", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SiteName", $.String);

    $.Property({Static:false, Public:false}, "SiteObjectName", $.String);

    $.Property({Static:false, Public:false}, "ComputerObjectName", $.String);

    $.Property({Static:false, Public:false}, "ServerObjectName", $.String);

    $.Property({Static:false, Public:false}, "NtdsaObjectName", $.String);

    $.Property({Static:false, Public:false}, "NtdsaObjectGuid", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "SyncFromAllServersCallback", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncUpdateCallback"));

    $.Property({Static:false, Public:true , Virtual:true }, "InboundConnections", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "OutboundConnections", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection"));

    $.Property({Static:false, Public:false}, "Handle", $.IntPtr);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DomainControllerCollection */ 

(function DomainControllerCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.DomainControllerCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation */ 

(function SyncFromAllServersErrorInformation$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory"), $.Int32, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorCategory", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceServer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetServer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "category", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory"));

    $.Field({Static:false, Public:false}, "errorCode", $.Int32);

    $.Field({Static:false, Public:false}, "errorMessage", $.String);

    $.Field({Static:false, Public:false}, "sourceServer", $.String);

    $.Field({Static:false, Public:false}, "targetServer", $.String);

    $.Property({Static:false, Public:true }, "ErrorCategory", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory"));

    $.Property({Static:false, Public:true }, "ErrorCode", $.Int32);

    $.Property({Static:false, Public:true }, "ErrorMessage", $.String);

    $.Property({Static:false, Public:true }, "TargetServer", $.String);

    $.Property({Static:false, Public:true }, "SourceServer", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException */ 

(function ActiveDirectoryObjectNotFoundException$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "objectType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException */ 

(function ActiveDirectoryOperationException$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "errorCode", $.Int32);

    $.Property({Static:false, Public:true }, "ErrorCode", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException */ 

(function ActiveDirectoryServerDownException$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "errorCode", $.Int32);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "ErrorCode", $.Int32);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException */ 

(function ActiveDirectoryObjectExistsException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException */ 

(function SyncFromAllServersOperationException$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException"), 
      Name: "System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorInformation", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "errors", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation")]));

    $.Property({Static:false, Public:true }, "ErrorInformation", $jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorInformation")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException */ 

(function ForestTrustCollisionException$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException"), 
      Name: "System.DirectoryServices.ActiveDirectory.ForestTrustCollisionException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Collisions", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "collisions", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection"));

    $.Property({Static:false, Public:true }, "Collisions", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ExceptionHelper */ 

(function ExceptionHelper$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ExceptionHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateForestTrustCollisionException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.IntPtr])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSyncAllException", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersOperationException"), [$.IntPtr, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetErrorMessage", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExceptionFromCOMException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Runtime.InteropServices.COMException")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExceptionFromCOMException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm07.TypeRef("System.Runtime.InteropServices.COMException")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExceptionFromErrorCode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExceptionFromErrorCode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $.String])
    );

    $.Field({Static:true , Public:false}, "ERROR_NOT_ENOUGH_MEMORY", $.Int32, 8);

    $.Field({Static:true , Public:false}, "ERROR_OUTOFMEMORY", $.Int32, 14);

    $.Field({Static:true , Public:false}, "ERROR_DS_DRA_OUT_OF_MEM", $.Int32, 8446);

    $.Field({Static:true , Public:false}, "ERROR_NO_SUCH_DOMAIN", $.Int32, 1355);

    $.Field({Static:true , Public:false}, "ERROR_ACCESS_DENIED", $.Int32, 5);

    $.Field({Static:true , Public:false}, "ERROR_NO_LOGON_SERVERS", $.Int32, 1311);

    $.Field({Static:true , Public:false}, "ERROR_DS_DRA_ACCESS_DENIED", $.Int32, 8453);

    $.Field({Static:true , Public:false}, "RPC_S_OUT_OF_RESOURCES", $.Int32, 1721);

    $.Field({Static:true , Public:false}, "RPC_S_SERVER_UNAVAILABLE", $.Int32, 1722);

    $.Field({Static:true , Public:false}, "RPC_S_CALL_FAILED", $.Int32, 1726);

    $.Field({Static:true , Public:false}, "ERROR_CANCELLED", $.Int32, 1223);

    $.Field({Static:true , Public:false}, "ERROR_DS_DRA_BAD_DN", $.Int32, 8439);

    $.Field({Static:true , Public:false}, "ERROR_DS_NAME_UNPARSEABLE", $.Int32, 8350);

    $.Field({Static:true , Public:false}, "ERROR_DS_UNKNOWN_ERROR", $.Int32, 8431);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.ActiveDirectory.ForestMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.ForestMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unknown: -1, 
    Windows2000Forest: 0, 
    Windows2003InterimForest: 1, 
    Windows2003Forest: 2, 
    Windows2008Forest: 3, 
    Windows2008R2Forest: 4, 
    Windows8Forest: 5, 
    Windows2012R2Forest: 6, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.Forest */ 

(function Forest$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.Forest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateLocalSideOfTrustRelationship", 
      new JSIL.MethodSignature(null, [
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateTrustRelationship", 
      new JSIL.MethodSignature(null, [$.Type, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteLocalSideOfTrustRelationship", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteTrustRelationship", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllDiscoverableGlobalCatalogs", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllDiscoverableGlobalCatalogs", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllGlobalCatalogs", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllGlobalCatalogs", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindGlobalCatalog", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalog"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindGlobalCatalog", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalog"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindGlobalCatalog", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalog"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LocatorOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindGlobalCatalog", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalog"), [$.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LocatorOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationPartitions", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Domains", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ForestMode", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ForestModeLevel", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GlobalCatalogs", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamingRoleOwner", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RootDomain", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Domain"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaRoleOwner", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sites", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAllTrustRelationships", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetApplicationPartitions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCurrentForest", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDirectoryContext", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDomains", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDSHandle", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetForest", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetForestModeLevel", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRoleOwner", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSelectiveAuthenticationStatus", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSidFilteringStatus", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSites", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTrustRelationship", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTrustsHelper", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "RaiseForestFunctionality", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RaiseForestFunctionalityLevel", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RepairTrustHelper", 
      new JSIL.MethodSignature(null, [$.Type, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RepairTrustRelationship", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSelectiveAuthenticationStatus", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSidFilteringStatus", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "UpdateLocalSideOfTrustRelationship", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "UpdateLocalSideOfTrustRelationship", 
      new JSIL.MethodSignature(null, [
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "UpdateTrustRelationship", 
      new JSIL.MethodSignature(null, [$.Type, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyOutboundTrustRelationship", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyTrustRelationship", 
      new JSIL.MethodSignature(null, [$.Type, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection")])
    );

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "directoryEntryMgr", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager"));

    $.Field({Static:false, Public:false}, "dsHandle", $.IntPtr);

    $.Field({Static:false, Public:false}, "authIdentity", $.IntPtr);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "forestDnsName", $.String);

    $.Field({Static:false, Public:false}, "cachedSites", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection"));

    $.Field({Static:false, Public:false}, "cachedDomains", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainCollection"));

    $.Field({Static:false, Public:false}, "cachedGlobalCatalogs", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection"));

    $.Field({Static:false, Public:false}, "cachedApplicationPartitions", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection"));

    $.Field({Static:false, Public:false}, "forestModeLevel", $.Int32);

    $.Field({Static:false, Public:false}, "cachedRootDomain", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Domain"));

    $.Field({Static:false, Public:false}, "cachedSchema", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema"));

    $.Field({Static:false, Public:false}, "cachedSchemaRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"));

    $.Field({Static:false, Public:false}, "cachedNamingRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Sites", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection"));

    $.Property({Static:false, Public:true }, "Domains", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainCollection"));

    $.Property({Static:false, Public:true }, "GlobalCatalogs", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection"));

    $.Property({Static:false, Public:true }, "ApplicationPartitions", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ApplicationPartitionCollection"));

    $.Property({Static:false, Public:true }, "ForestModeLevel", $.Int32);

    $.Property({Static:false, Public:true }, "ForestMode", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestMode"));

    $.Property({Static:false, Public:true }, "RootDomain", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Domain"));

    $.Property({Static:false, Public:true }, "Schema", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema"));

    $.Property({Static:false, Public:true }, "SchemaRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"));

    $.Property({Static:false, Public:true }, "NamingRoleOwner", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision */ 

(function ForestTrustRelationshipCollision$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelNameCollisionOptions"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainCollisionOptions"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CollisionRecord", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CollisionType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DomainCollisionOption", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainCollisionOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TopLevelNameCollisionOption", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelNameCollisionOptions"))
    );

    $.Field({Static:false, Public:false}, "type", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType"));

    $.Field({Static:false, Public:false}, "tlnFlag", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelNameCollisionOptions"));

    $.Field({Static:false, Public:false}, "domainFlag", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainCollisionOptions"));

    $.Field({Static:false, Public:false}, "record", $.String);

    $.Property({Static:false, Public:true }, "CollisionType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType"));

    $.Property({Static:false, Public:true }, "TopLevelNameCollisionOption", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelNameCollisionOptions"));

    $.Property({Static:false, Public:true }, "DomainCollisionOption", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainCollisionOptions"));

    $.Property({Static:false, Public:true }, "CollisionRecord", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection */ 

(function ForestTrustRelationshipCollisionCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollisionCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipCollision"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection */ 

(function ForestTrustDomainInfoCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.ActiveDirectory.ForestTrustDomainStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.ForestTrustDomainStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Enabled: 0, 
    SidAdminDisabled: 1, 
    SidConflictDisabled: 2, 
    NetBiosNameAdminDisabled: 4, 
    NetBiosNameConflictDisabled: 8, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation */ 

(function ForestTrustDomainInformation$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ForestTrustDomainInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_DOMAIN_INFO"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LARGE_INTEGER")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DnsName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DomainSid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NetBiosName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustDomainStatus"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Status", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustDomainStatus"))
    );

    $.Field({Static:false, Public:false}, "dnsName", $.String);

    $.Field({Static:false, Public:false}, "nbName", $.String);

    $.Field({Static:false, Public:false}, "sid", $.String);

    $.Field({Static:false, Public:false}, "status", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustDomainStatus"));

    $.Field({Static:false, Public:false}, "time", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LARGE_INTEGER"));

    $.Property({Static:false, Public:true }, "DnsName", $.String);

    $.Property({Static:false, Public:true }, "NetBiosName", $.String);

    $.Property({Static:false, Public:true }, "DomainSid", $.String);

    $.Property({Static:false, Public:true }, "Status", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustDomainStatus"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation */ 

(function TrustRelationshipInformation$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustDirection", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustType"))
    );

    $.Field({Static:false, Public:false}, "source", $.String);

    $.Field({Static:false, Public:false}, "target", $.String);

    $.Field({Static:false, Public:false}, "type", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustType"));

    $.Field({Static:false, Public:false}, "direction", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection"));

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Property({Static:false, Public:true }, "SourceName", $.String);

    $.Property({Static:false, Public:true }, "TargetName", $.String);

    $.Property({Static:false, Public:true }, "TrustType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustType"));

    $.Property({Static:false, Public:true }, "TrustDirection", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation */ 

(function ForestTrustRelationshipInformation$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation"), 
      Name: "System.DirectoryServices.ActiveDirectory.ForestTrustRelationshipInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DS_DOMAIN_TRUSTS"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExcludedTopLevelNames", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TopLevelNames", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelNameCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustedDomainInformation", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetForestTrustInfoHelper", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "topLevelNames", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelNameCollection"));

    $.Field({Static:false, Public:false}, "excludedNames", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Field({Static:false, Public:false}, "domainInfo", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection"));

    $.Field({Static:false, Public:false}, "binaryData", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "excludedNameTime", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "binaryDataTime", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "retrieved", $.Boolean);

    $.Property({Static:false, Public:true }, "TopLevelNames", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelNameCollection"));

    $.Property({Static:false, Public:true }, "ExcludedTopLevelNames", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Property({Static:false, Public:true }, "TrustedDomainInformation", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustDomainInfoCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.GlobalCatalog */ 

(function GlobalCatalog$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"), 
      Name: "System.DirectoryServices.ActiveDirectory.GlobalCatalog", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryEntryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfDisabled", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "DisableGlobalCatalog", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainController"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnableGlobalCatalog", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "FindAll", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindAll", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindAllInternal", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection"), [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindAllProperties", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection"))
    );

    $.ExternalMethod({Static:true , Public:true }, "FindOne", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindOne", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindOne", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LocatorOptions")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindOne", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LocatorOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindOneInternal", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LocatorOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindOneWithCredentialValidation", 
      new JSIL.MethodSignature($.Type, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LocatorOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDirectorySearcher", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectorySearcher"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetGlobalCatalog", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetDirectorySearcher", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectorySearcher"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsGlobalCatalog", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "schema", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchema"));

    $.Field({Static:false, Public:false}, "disabled", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection */ 

(function GlobalCatalogCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.GlobalCatalogCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalog")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalog")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalog"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalog")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.GlobalCatalog"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.Locator */ 

(function Locator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.Locator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DnsGetDcWrapper", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Hashtable"), [
          $.String, $.String, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DnsQueryWrapper", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Hashtable"), [
          $.String, $.String, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DsGetDcNameWrapper", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.String, $.Int64, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainControllerInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumerateDomainControllers", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ArrayList"), [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDomainControllerInfo", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DomainControllerInfo"), [
          $.String, $.String, 
          $.String, $.Int64
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.ActiveDirectory.LocatorOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.LocatorOptions", 
    BaseType: $asm07.TypeRef("System.Int64"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    ForceRediscovery: 1, 
    KdcRequired: 1024, 
    TimeServerRequired: 2048, 
    WriteableRequired: 4096, 
    AvoidSelf: 16384, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.PrivateLocatorFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.PrivateLocatorFlags", 
    BaseType: $asm07.TypeRef("System.Int64"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    DirectoryServicesRequired: 16, 
    DirectoryServicesPreferred: 32, 
    GCRequired: 64, 
    PdcRequired: 128, 
    BackgroundOnly: 256, 
    IPRequired: 512, 
    DSWriteableRequired: 4096, 
    GoodTimeServerPreferred: 8192, 
    OnlyLDAPNeeded: 32768, 
    IsFlatName: 65536, 
    IsDNSName: 131072, 
    ReturnDNSName: 1073741824, 
    ReturnFlatName: 2147483648, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.DcEnumFlag */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.DcEnumFlag", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    OnlyDoSiteName: 1, 
    NotifyAfterSiteRecords: 2, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.DomainControllerInfo */ 

(function DomainControllerInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DomainControllerInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "DomainControllerName", $.String);

    $.Field({Static:false, Public:true }, "DomainControllerAddress", $.String);

    $.Field({Static:false, Public:true }, "DomainControllerAddressType", $.Int32);

    $.Field({Static:false, Public:true }, "DomainGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "DomainName", $.String);

    $.Field({Static:false, Public:true }, "DnsForestName", $.String);

    $.Field({Static:false, Public:true }, "Flags", $.Int32);

    $.Field({Static:false, Public:true }, "DcSiteName", $.String);

    $.Field({Static:false, Public:true }, "ClientSiteName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DsDomainControllerInfo2 */ 

(function DsDomainControllerInfo2$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DsDomainControllerInfo2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "netBiosName", $.String);

    $.Field({Static:false, Public:true }, "dnsHostName", $.String);

    $.Field({Static:false, Public:true }, "siteName", $.String);

    $.Field({Static:false, Public:true }, "siteObjectName", $.String);

    $.Field({Static:false, Public:true }, "computerObjectName", $.String);

    $.Field({Static:false, Public:true }, "serverObjectName", $.String);

    $.Field({Static:false, Public:true }, "ntdsaObjectName", $.String);

    $.Field({Static:false, Public:true }, "isPdc", $.Boolean);

    $.Field({Static:false, Public:true }, "dsEnabled", $.Boolean);

    $.Field({Static:false, Public:true }, "isGC", $.Boolean);

    $.Field({Static:false, Public:true }, "siteObjectGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "computerObjectGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "serverObjectGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "ntdsDsaObjectGuid", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DsDomainControllerInfo3 */ 

(function DsDomainControllerInfo3$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DsDomainControllerInfo3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "netBiosName", $.String);

    $.Field({Static:false, Public:true }, "dnsHostName", $.String);

    $.Field({Static:false, Public:true }, "siteName", $.String);

    $.Field({Static:false, Public:true }, "siteObjectName", $.String);

    $.Field({Static:false, Public:true }, "computerObjectName", $.String);

    $.Field({Static:false, Public:true }, "serverObjectName", $.String);

    $.Field({Static:false, Public:true }, "ntdsaObjectName", $.String);

    $.Field({Static:false, Public:true }, "isPdc", $.Boolean);

    $.Field({Static:false, Public:true }, "dsEnabled", $.Boolean);

    $.Field({Static:false, Public:true }, "isGC", $.Boolean);

    $.Field({Static:false, Public:true }, "isRodc", $.Boolean);

    $.Field({Static:false, Public:true }, "siteObjectGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "computerObjectGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "serverObjectGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "ntdsDsaObjectGuid", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DsNameResult */ 

(function DsNameResult$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DsNameResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "itemCount", $.Int32);

    $.Field({Static:false, Public:true }, "items", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DsNameResultItem */ 

(function DsNameResultItem$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DsNameResultItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "status", $.Int32);

    $.Field({Static:false, Public:true }, "domain", $.String);

    $.Field({Static:false, Public:true }, "$name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DnsRecord */ 

(function DnsRecord$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DnsRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "next", $.IntPtr);

    $.Field({Static:false, Public:true }, "$name", $.String);

    $.Field({Static:false, Public:true }, "type", $.Int16);

    $.Field({Static:false, Public:true }, "dataLength", $.Int16);

    $.Field({Static:false, Public:true }, "flags", $.Int32);

    $.Field({Static:false, Public:true }, "ttl", $.Int32);

    $.Field({Static:false, Public:true }, "reserved", $.Int32);

    $.Field({Static:false, Public:true }, "data", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DnsSrvData"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.PartialDnsRecord */ 

(function PartialDnsRecord$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.PartialDnsRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "next", $.IntPtr);

    $.Field({Static:false, Public:true }, "$name", $.String);

    $.Field({Static:false, Public:true }, "type", $.Int16);

    $.Field({Static:false, Public:true }, "dataLength", $.Int16);

    $.Field({Static:false, Public:true }, "flags", $.Int32);

    $.Field({Static:false, Public:true }, "ttl", $.Int32);

    $.Field({Static:false, Public:true }, "reserved", $.Int32);

    $.Field({Static:false, Public:true }, "data", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DnsSrvData */ 

(function DnsSrvData$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DnsSrvData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "targetName", $.String);

    $.Field({Static:false, Public:true }, "priority", $.Int16);

    $.Field({Static:false, Public:true }, "weight", $.Int16);

    $.Field({Static:false, Public:true }, "port", $.Int16);

    $.Field({Static:false, Public:true }, "pad", $.Int16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.OSVersionInfoEx */ 

(function OSVersionInfoEx$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.OSVersionInfoEx", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "osVersionInfoSize", $.Int32);

    $.Field({Static:false, Public:true }, "majorVersion", $.Int32);

    $.Field({Static:false, Public:true }, "minorVersion", $.Int32);

    $.Field({Static:false, Public:true }, "buildNumber", $.Int32);

    $.Field({Static:false, Public:true }, "platformId", $.Int32);

    $.Field({Static:false, Public:true }, "csdVersion", $.String);

    $.Field({Static:false, Public:true }, "servicePackMajor", $.Int16);

    $.Field({Static:false, Public:true }, "servicePackMinor", $.Int16);

    $.Field({Static:false, Public:true }, "suiteMask", $.Int16);

    $.Field({Static:false, Public:true }, "productType", $.Byte);

    $.Field({Static:false, Public:true }, "reserved", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.LUID */ 

(function LUID$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.LUID", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "LowPart", $.Int32);

    $.Field({Static:false, Public:true }, "HighPart", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.NegotiateCallerNameRequest */ 

(function NegotiateCallerNameRequest$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.NegotiateCallerNameRequest", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "messageType", $.Int32);

    $.Field({Static:false, Public:true }, "logonId", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LUID"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.NegotiateCallerNameResponse */ 

(function NegotiateCallerNameResponse$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.NegotiateCallerNameResponse", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "messageType", $.Int32);

    $.Field({Static:false, Public:true }, "callerName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.NativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CompareString", 
      new JSIL.MethodSignature($.Int32, [
          $.UInt32, $.UInt32, 
          $.IntPtr, $.Int32, 
          $.IntPtr, $.Int32
        ]), 
      {
        Module: "Kernel32.dll", 
        CharSet: 'unicode',
        EntryPoint: "CompareStringW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DnsQuery", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int16, 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.IntPtr
        ]), 
      {
        Module: "Dnsapi.dll", 
        CharSet: 'unicode',
        EntryPoint: "DnsQuery_W", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DnsRecordListFree", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean]), 
      {
        Module: "Dnsapi.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DsGetDcClose", 
      JSIL.MethodSignature.Action($.IntPtr), 
      {
        Module: "Netapi32.dll", 
        CharSet: 'unicode',
        EntryPoint: "DsGetDcCloseW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DsGetDcName", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.IntPtr, $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "Netapi32.dll", 
        CharSet: 'unicode',
        EntryPoint: "DsGetDcNameW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DsGetDcNext", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "Netapi32.dll", 
        CharSet: 'unicode',
        EntryPoint: "DsGetDcNextW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DsGetDcOpen", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.String, $.IntPtr, 
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "Netapi32.dll", 
        CharSet: 'unicode',
        EntryPoint: "DsGetDcOpenW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetLastError", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "Kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetVersionEx", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.OSVersionInfoEx")]), 
      {
        Module: "Kernel32.dll", 
        CharSet: 'unicode',
        EntryPoint: "GetVersionExW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LsaCallAuthenticationPackage", 
      new JSIL.MethodSignature($.Int32, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LsaLogonProcessSafeHandle"), $.Int32, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.NegotiateCallerNameRequest"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "Secur32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LsaConnectUntrusted", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LsaLogonProcessSafeHandle")])]), 
      {
        Module: "Secur32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LsaDeregisterLogonProcess", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "Secur32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LsaFreeReturnBuffer", 
      new JSIL.MethodSignature($.UInt32, [$.IntPtr]), 
      {
        Module: "Secur32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LsaNtStatusToWinError", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NetApiBufferFree", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "Netapi32.dll", 
      }
    );

    $.Constant({Static:true , Public:false}, "VER_PLATFORM_WIN32_NT", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_DOMAIN_NAME_FORMAT", $.Int32, 1212);

    $.Constant({Static:true , Public:false}, "ERROR_NO_SUCH_DOMAIN", $.Int32, 1355);

    $.Constant({Static:true , Public:false}, "ERROR_NOT_ENOUGH_MEMORY", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_FLAGS", $.Int32, 1004);

    $.Constant({Static:true , Public:false}, "DS_NAME_NO_ERROR", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "ERROR_NO_MORE_ITEMS", $.Int32, 259);

    $.Constant({Static:true , Public:false}, "ERROR_FILE_MARK_DETECTED", $.Int32, 1101);

    $.Constant({Static:true , Public:false}, "DNS_ERROR_RCODE_NAME_ERROR", $.Int32, 9003);

    $.Constant({Static:true , Public:false}, "ERROR_NO_SUCH_LOGON_SESSION", $.Int32, 1312);

    $.Constant({Static:true , Public:false}, "DS_NAME_FLAG_SYNTACTICAL_ONLY", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DS_FQDN_1779_NAME", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "DS_CANONICAL_NAME", $.Int32, 7);

    $.Constant({Static:true , Public:false}, "DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "STATUS_QUOTA_EXCEEDED", $.Int32, -1073741756);

    $.Constant({Static:true , Public:false}, "DsDomainControllerInfoLevel2", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DsDomainControllerInfoLevel3", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "DsNameNoError", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "DnsSrvData", $.Int32, 33);

    $.Constant({Static:true , Public:false}, "DnsQueryBypassCache", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "NegGetCallerName", $.Int32, 1);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* delegate System.DirectoryServices.ActiveDirectory.NativeMethods+DsMakePasswordCredentials */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.NativeMethods+DsMakePasswordCredentials", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.String"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.String"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])
    ]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, 
      {
        NativeType: "LPWStr"
      }, 
      {
        NativeType: "LPWStr"
      }, null

    ]
  }
);

/* delegate System.DirectoryServices.ActiveDirectory.NativeMethods+DsFreePasswordCredentials */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.NativeMethods+DsFreePasswordCredentials", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.IntPtr")));

/* delegate System.DirectoryServices.ActiveDirectory.NativeMethods+DsBindWithCred */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.NativeMethods+DsBindWithCred", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.String"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])
    ]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, 
      {
        NativeType: "LPWStr"
      }, null
      , null

    ]
  }
);

/* delegate System.DirectoryServices.ActiveDirectory.NativeMethods+DsUnBind */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.NativeMethods+DsUnBind", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])]));

/* delegate System.DirectoryServices.ActiveDirectory.NativeMethods+DsGetDomainControllerInfo */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.NativeMethods+DsGetDomainControllerInfo", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.Int32"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Int32")]), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])
    ]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, null
      , null
      , null

    ]
  }
);

/* delegate System.DirectoryServices.ActiveDirectory.NativeMethods+DsFreeDomainControllerInfo */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.NativeMethods+DsFreeDomainControllerInfo", false, [], 
  new JSIL.MethodSignature(null, [
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.IntPtr")
    ]));

/* delegate System.DirectoryServices.ActiveDirectory.NativeMethods+DsListSites */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.NativeMethods+DsListSites", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])]));

/* delegate System.DirectoryServices.ActiveDirectory.NativeMethods+DsListRoles */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.NativeMethods+DsListRoles", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])]));

/* delegate System.DirectoryServices.ActiveDirectory.NativeMethods+DsCrackNames */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.NativeMethods+DsCrackNames", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.IntPtr"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])
    ]));

/* class System.DirectoryServices.ActiveDirectory.NativeComInterfaces */ 

(function NativeComInterfaces$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.NativeComInterfaces", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "ADS_SETTYPE_DN", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "ADS_FORMAT_X500_DN", $.Int32, 7);

    $.Constant({Static:true , Public:false}, "ADS_ESCAPEDMODE_ON", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "ADS_ESCAPEDMODE_OFF_EX", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "ADS_FORMAT_LEAF", $.Int32, 11);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.DirectoryServices.ActiveDirectory.NativeComInterfaces+Pathname */ 

(function Pathname$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.NativeComInterfaces+Pathname", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["080d0d78-f421-11d0-a36e-00c04fb950dc"]; });

})();

/* interface System.DirectoryServices.ActiveDirectory.NativeComInterfaces+IAdsPathname */ 

JSIL.MakeInterface(
  "System.DirectoryServices.ActiveDirectory.NativeComInterfaces+IAdsPathname", false, [], function ($) {
    $.Method({}, "Set", new JSIL.MethodSignature($.Int32, [$.String, $.Int32]));
    $.Method({}, "SetDisplayType", new JSIL.MethodSignature($.Int32, [$.Int32]));
    $.Method({}, "Retrieve", new JSIL.MethodSignature($.String, [$.Int32]));
    $.Method({}, "GetNumElements", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "GetElement", new JSIL.MethodSignature($.String, [$.Int32]));
    $.Method({}, "AddLeafElement", JSIL.MethodSignature.Action($.String));
    $.Method({}, "RemoveLeafElement", JSIL.MethodSignature.Void);
    $.Method({}, "CopyPath", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "GetEscapedElement", new JSIL.MethodSignature($.String, [$.Int32, $.String]));
    $.Method({}, "get_EscapedMode", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_EscapedMode", JSIL.MethodSignature.Action($.Int32));
    $.Property({}, "EscapedMode");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["D592AED4-F420-11D0-A36E-00C04FB950DC"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface System.DirectoryServices.ActiveDirectory.NativeComInterfaces+IAdsProperty */ 

JSIL.MakeInterface(
  "System.DirectoryServices.ActiveDirectory.NativeComInterfaces+IAdsProperty", false, [], function ($) {
    $.Method({}, "get_Name", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_Class", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_GUID", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_ADsPath", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_Parent", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_Schema", JSIL.MethodSignature.Return($.String));
    $.Method({}, "GetInfo", JSIL.MethodSignature.Void);
    $.Method({}, "SetInfo", JSIL.MethodSignature.Void);
    $.Method({}, "Get", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "Put", new JSIL.MethodSignature(null, [$.String, $.Object]));
    $.Method({}, "GetEx", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "PutEx", new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.Object
        ]));
    $.Method({}, "GetInfoEx", new JSIL.MethodSignature(null, [$.Object, $.Int32]));
    $.Method({}, "get_OID", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_OID", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_Syntax", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_Syntax", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_MaxRange", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_MaxRange", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_MinRange", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_MinRange", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_MultiValued", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_MultiValued", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "Qualifiers", JSIL.MethodSignature.Return($.Object));
    $.Property({}, "Name");
    $.Property({}, "Class");
    $.Property({}, "GUID");
    $.Property({}, "ADsPath");
    $.Property({}, "Parent");
    $.Property({}, "Schema");
    $.Property({}, "OID");
    $.Property({}, "Syntax");
    $.Property({}, "MaxRange");
    $.Property({}, "MinRange");
    $.Property({}, "MultiValued");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["C8F93DD3-4AE0-11CF-9E73-00AA004A5691"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface System.DirectoryServices.ActiveDirectory.NativeComInterfaces+IAdsClass */ 

JSIL.MakeInterface(
  "System.DirectoryServices.ActiveDirectory.NativeComInterfaces+IAdsClass", false, [], function ($) {
    $.Method({}, "get_Name", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_Class", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_GUID", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_ADsPath", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_Parent", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_Schema", JSIL.MethodSignature.Return($.String));
    $.Method({}, "GetInfo", JSIL.MethodSignature.Void);
    $.Method({}, "SetInfo", JSIL.MethodSignature.Void);
    $.Method({}, "Get", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "Put", new JSIL.MethodSignature(null, [$.String, $.Object]));
    $.Method({}, "GetEx", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "PutEx", new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.Object
        ]));
    $.Method({}, "GetInfoEx", new JSIL.MethodSignature(null, [$.Object, $.Int32]));
    $.Method({}, "get_PrimaryInterface", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_CLSID", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_CLSID", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_OID", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_OID", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_Abstract", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_Abstract", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_Auxiliary", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_Auxiliary", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_MandatoryProperties", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_MandatoryProperties", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "get_OptionalProperties", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_OptionalProperties", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "get_NamingProperties", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_NamingProperties", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "get_DerivedFrom", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_DerivedFrom", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "get_AuxDerivedFrom", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_AuxDerivedFrom", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "get_PossibleSuperiors", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_PossibleSuperiors", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "get_Containment", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_Containment", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "get_Container", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_Container", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_HelpFileName", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_HelpFileName", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_HelpFileContext", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_HelpFileContext", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "Qualifiers", JSIL.MethodSignature.Return($.Object));
    $.Property({}, "Name");
    $.Property({}, "Class");
    $.Property({}, "GUID");
    $.Property({}, "ADsPath");
    $.Property({}, "Parent");
    $.Property({}, "Schema");
    $.Property({}, "PrimaryInterface");
    $.Property({}, "CLSID");
    $.Property({}, "OID");
    $.Property({}, "Abstract");
    $.Property({}, "Auxiliary");
    $.Property({}, "MandatoryProperties");
    $.Property({}, "OptionalProperties");
    $.Property({}, "NamingProperties");
    $.Property({}, "DerivedFrom");
    $.Property({}, "AuxDerivedFrom");
    $.Property({}, "PossibleSuperiors");
    $.Property({}, "Containment");
    $.Property({}, "Container");
    $.Property({}, "HelpFileName");
    $.Property({}, "HelpFileContext");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["C8F93DD0-4AE0-11CF-9E73-00AA004A5691"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* class System.DirectoryServices.ActiveDirectory.PropertyManager */ 

(function PropertyManager$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.PropertyManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPropertyValue", 
      new JSIL.MethodSignature($.Object, [$asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPropertyValue", 
      new JSIL.MethodSignature($.Object, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSearchResultPropertyValue", 
      new JSIL.MethodSignature($.Object, [$asm15.TypeRef("System.DirectoryServices.SearchResult"), $.String])
    );

    $.Field({Static:true , Public:true }, "DefaultNamingContext", $.String, "defaultNamingContext");

    $.Field({Static:true , Public:true }, "SchemaNamingContext", $.String, "schemaNamingContext");

    $.Field({Static:true , Public:true }, "ConfigurationNamingContext", $.String, "configurationNamingContext");

    $.Field({Static:true , Public:true }, "RootDomainNamingContext", $.String, "rootDomainNamingContext");

    $.Field({Static:true , Public:true }, "MsDSBehaviorVersion", $.String, "msDS-Behavior-Version");

    $.Field({Static:true , Public:true }, "FsmoRoleOwner", $.String, "fsmoRoleOwner");

    $.Field({Static:true , Public:true }, "ForestFunctionality", $.String, "forestFunctionality");

    $.Field({Static:true , Public:true }, "NTMixedDomain", $.String, "ntMixedDomain");

    $.Field({Static:true , Public:true }, "DomainFunctionality", $.String, "domainFunctionality");

    $.Field({Static:true , Public:true }, "ObjectCategory", $.String, "objectCategory");

    $.Field({Static:true , Public:true }, "SystemFlags", $.String, "systemFlags");

    $.Field({Static:true , Public:true }, "DnsRoot", $.String, "dnsRoot");

    $.Field({Static:true , Public:true }, "DistinguishedName", $.String, "distinguishedName");

    $.Field({Static:true , Public:true }, "TrustParent", $.String, "trustParent");

    $.Field({Static:true , Public:true }, "FlatName", $.String, "flatName");

    $.Field({Static:true , Public:true }, "Name", $.String, "name");

    $.Field({Static:true , Public:true }, "Flags", $.String, "flags");

    $.Field({Static:true , Public:true }, "TrustType", $.String, "trustType");

    $.Field({Static:true , Public:true }, "TrustAttributes", $.String, "trustAttributes");

    $.Field({Static:true , Public:true }, "BecomeSchemaMaster", $.String, "becomeSchemaMaster");

    $.Field({Static:true , Public:true }, "BecomeDomainMaster", $.String, "becomeDomainMaster");

    $.Field({Static:true , Public:true }, "BecomePdc", $.String, "becomePdc");

    $.Field({Static:true , Public:true }, "BecomeRidMaster", $.String, "becomeRidMaster");

    $.Field({Static:true , Public:true }, "BecomeInfrastructureMaster", $.String, "becomeInfrastructureMaster");

    $.Field({Static:true , Public:true }, "DnsHostName", $.String, "dnsHostName");

    $.Field({Static:true , Public:true }, "Options", $.String, "options");

    $.Field({Static:true , Public:true }, "CurrentTime", $.String, "currentTime");

    $.Field({Static:true , Public:true }, "HighestCommittedUSN", $.String, "highestCommittedUSN");

    $.Field({Static:true , Public:true }, "OperatingSystem", $.String, "operatingSystem");

    $.Field({Static:true , Public:true }, "HasMasterNCs", $.String, "hasMasterNCs");

    $.Field({Static:true , Public:true }, "MsDSHasMasterNCs", $.String, "msDS-HasMasterNCs");

    $.Field({Static:true , Public:true }, "MsDSHasFullReplicaNCs", $.String, "msDS-hasFullReplicaNCs");

    $.Field({Static:true , Public:true }, "NCName", $.String, "nCName");

    $.Field({Static:true , Public:true }, "Cn", $.String, "cn");

    $.Field({Static:true , Public:true }, "NETBIOSName", $.String, "nETBIOSName");

    $.Field({Static:true , Public:true }, "DomainDNS", $.String, "domainDNS");

    $.Field({Static:true , Public:true }, "InstanceType", $.String, "instanceType");

    $.Field({Static:true , Public:true }, "MsDSSDReferenceDomain", $.String, "msDS-SDReferenceDomain");

    $.Field({Static:true , Public:true }, "MsDSPortLDAP", $.String, "msDS-PortLDAP");

    $.Field({Static:true , Public:true }, "MsDSPortSSL", $.String, "msDS-PortSSL");

    $.Field({Static:true , Public:true }, "MsDSNCReplicaLocations", $.String, "msDS-NC-Replica-Locations");

    $.Field({Static:true , Public:true }, "MsDSNCROReplicaLocations", $.String, "msDS-NC-RO-Replica-Locations");

    $.Field({Static:true , Public:true }, "SupportedCapabilities", $.String, "supportedCapabilities");

    $.Field({Static:true , Public:true }, "ServerName", $.String, "serverName");

    $.Field({Static:true , Public:true }, "Enabled", $.String, "Enabled");

    $.Field({Static:true , Public:true }, "ObjectGuid", $.String, "objectGuid");

    $.Field({Static:true , Public:true }, "Keywords", $.String, "keywords");

    $.Field({Static:true , Public:true }, "ServiceBindingInformation", $.String, "serviceBindingInformation");

    $.Field({Static:true , Public:true }, "MsDSReplAuthenticationMode", $.String, "msDS-ReplAuthenticationMode");

    $.Field({Static:true , Public:true }, "HasPartialReplicaNCs", $.String, "hasPartialReplicaNCs");

    $.Field({Static:true , Public:true }, "Container", $.String, "container");

    $.Field({Static:true , Public:true }, "LdapDisplayName", $.String, "ldapDisplayName");

    $.Field({Static:true , Public:true }, "AttributeID", $.String, "attributeID");

    $.Field({Static:true , Public:true }, "AttributeSyntax", $.String, "attributeSyntax");

    $.Field({Static:true , Public:true }, "Description", $.String, "description");

    $.Field({Static:true , Public:true }, "SearchFlags", $.String, "searchFlags");

    $.Field({Static:true , Public:true }, "OMSyntax", $.String, "oMSyntax");

    $.Field({Static:true , Public:true }, "OMObjectClass", $.String, "oMObjectClass");

    $.Field({Static:true , Public:true }, "IsSingleValued", $.String, "isSingleValued");

    $.Field({Static:true , Public:true }, "IsDefunct", $.String, "isDefunct");

    $.Field({Static:true , Public:true }, "RangeUpper", $.String, "rangeUpper");

    $.Field({Static:true , Public:true }, "RangeLower", $.String, "rangeLower");

    $.Field({Static:true , Public:true }, "IsMemberOfPartialAttributeSet", $.String, "isMemberOfPartialAttributeSet");

    $.Field({Static:true , Public:true }, "ObjectVersion", $.String, "objectVersion");

    $.Field({Static:true , Public:true }, "LinkID", $.String, "linkID");

    $.Field({Static:true , Public:true }, "ObjectClassCategory", $.String, "objectClassCategory");

    $.Field({Static:true , Public:true }, "SchemaUpdateNow", $.String, "schemaUpdateNow");

    $.Field({Static:true , Public:true }, "SubClassOf", $.String, "subClassOf");

    $.Field({Static:true , Public:true }, "SchemaIDGuid", $.String, "schemaIDGUID");

    $.Field({Static:true , Public:true }, "PossibleSuperiors", $.String, "possSuperiors");

    $.Field({Static:true , Public:true }, "PossibleInferiors", $.String, "possibleInferiors");

    $.Field({Static:true , Public:true }, "MustContain", $.String, "mustContain");

    $.Field({Static:true , Public:true }, "MayContain", $.String, "mayContain");

    $.Field({Static:true , Public:true }, "SystemMustContain", $.String, "systemMustContain");

    $.Field({Static:true , Public:true }, "SystemMayContain", $.String, "systemMayContain");

    $.Field({Static:true , Public:true }, "GovernsID", $.String, "governsID");

    $.Field({Static:true , Public:true }, "IsGlobalCatalogReady", $.String, "isGlobalCatalogReady");

    $.Field({Static:true , Public:true }, "NTSecurityDescriptor", $.String, "ntSecurityDescriptor");

    $.Field({Static:true , Public:true }, "DsServiceName", $.String, "dsServiceName");

    $.Field({Static:true , Public:true }, "ReplicateSingleObject", $.String, "replicateSingleObject");

    $.Field({Static:true , Public:true }, "MsDSMasteredBy", $.String, "msDS-masteredBy");

    $.Field({Static:true , Public:true }, "DefaultSecurityDescriptor", $.String, "defaultSecurityDescriptor");

    $.Field({Static:true , Public:true }, "NamingContexts", $.String, "namingContexts");

    $.Field({Static:true , Public:true }, "MsDSDefaultNamingContext", $.String, "msDS-DefaultNamingContext");

    $.Field({Static:true , Public:true }, "OperatingSystemVersion", $.String, "operatingSystemVersion");

    $.Field({Static:true , Public:true }, "AuxiliaryClass", $.String, "auxiliaryClass");

    $.Field({Static:true , Public:true }, "SystemAuxiliaryClass", $.String, "systemAuxiliaryClass");

    $.Field({Static:true , Public:true }, "SystemPossibleSuperiors", $.String, "systemPossSuperiors");

    $.Field({Static:true , Public:true }, "InterSiteTopologyGenerator", $.String, "interSiteTopologyGenerator");

    $.Field({Static:true , Public:true }, "FromServer", $.String, "fromServer");

    $.Field({Static:true , Public:true }, "RIDAvailablePool", $.String, "rIDAvailablePool");

    $.Field({Static:true , Public:true }, "SiteList", $.String, "siteList");

    $.Field({Static:true , Public:true }, "MsDSHasInstantiatedNCs", $.String, "msDS-HasInstantiatedNCs");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection */ 

(function ReadOnlyActiveDirectorySchemaClassCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaClassCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaClass"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection */ 

(function ReadOnlyActiveDirectorySchemaPropertyCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReadOnlyActiveDirectorySchemaPropertyCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchemaProperty"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection */ 

(function ReadOnlyDirectoryServerCollection$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReadOnlyDirectoryServerCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRange", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection */ 

(function ReadOnlySiteCollection$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReadOnlySiteCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySite"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection */ 

(function ReadOnlySiteLinkBridgeCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLinkBridge"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection */ 

(function ReadOnlySiteLinkCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySiteLink"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection */ 

(function ReadOnlyStringCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReadOnlyStringCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.Property({Static:false, Public:true }, "Item", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.ActiveDirectory.NotificationStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.NotificationStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    NoNotification: 0, 
    IntraSiteOnly: 1, 
    NotificationAlways: 2, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.ReplicationSpan */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.ReplicationSpan", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    IntraSite: 0, 
    InterSite: 1, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.ReplicationConnection */ 

(function ReplicationConnection$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReplicationConnection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:true , Public:true }, "FindByName", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChangeNotificationStatus", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.NotificationStatus"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataCompressionEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DestinationServer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GeneratedByKcc", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsADAM", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReciprocalReplicationEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReplicationSchedule", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReplicationScheduleOwnedByUser", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReplicationSpan", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceServer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransportType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ChangeNotificationStatus", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.NotificationStatus"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataCompressionEnabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Enabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_GeneratedByKcc", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReciprocalReplicationEnabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReplicationSchedule", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReplicationScheduleOwnedByUser", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateArgument", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateTargetAndSourceServer", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")])
    );

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "cachedDirectoryEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "existingConnection", $.Boolean);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "checkADAM", $.Boolean);

    $.Field({Static:false, Public:false}, "isADAMServer", $.Boolean);

    $.Field({Static:false, Public:false}, "options", $.Int32);

    $.Field({Static:false, Public:false}, "connectionName", $.String);

    $.Field({Static:false, Public:false}, "sourceServerName", $.String);

    $.Field({Static:false, Public:false}, "destinationServerName", $.String);

    $.Field({Static:false, Public:false}, "transport", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"));

    $.Constant({Static:true , Public:false}, "ADAMGuid", $.String, "1.2.840.113556.1.4.1851");

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "SourceServer", $.String);

    $.Property({Static:false, Public:true }, "DestinationServer", $.String);

    $.Property({Static:false, Public:true }, "Enabled", $.Boolean);

    $.Property({Static:false, Public:true }, "TransportType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"));

    $.Property({Static:false, Public:true }, "GeneratedByKcc", $.Boolean);

    $.Property({Static:false, Public:true }, "ReciprocalReplicationEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "ChangeNotificationStatus", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.NotificationStatus"));

    $.Property({Static:false, Public:true }, "DataCompressionEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "ReplicationScheduleOwnedByUser", $.Boolean);

    $.Property({Static:false, Public:true }, "ReplicationSpan", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationSpan"));

    $.Property({Static:false, Public:true }, "ReplicationSchedule", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectorySchedule"));

    $.Property({Static:false, Public:false}, "IsADAM", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection */ 

(function ReplicationConnectionCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReplicationConnectionCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnection")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnection"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnection")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationConnection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ReplicationCursor */ 

(function ReplicationCursor$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReplicationCursor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), $.String, 
          $asm07.TypeRef("System.Guid"), $.Int64, 
          $.Int64, $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), $.String, 
          $asm07.TypeRef("System.Guid"), $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastSuccessfulSyncTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PartitionName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceInvocationId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceServer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpToDatenessUsn", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.Field({Static:false, Public:false}, "partition", $.String);

    $.Field({Static:false, Public:false}, "invocationID", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "USN", $.Int64);

    $.Field({Static:false, Public:false}, "serverDN", $.String);

    $.Field({Static:false, Public:false}, "syncTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "advanced", $.Boolean);

    $.Field({Static:false, Public:false}, "sourceServer", $.String);

    $.Field({Static:false, Public:false}, "server", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.Property({Static:false, Public:true }, "PartitionName", $.String);

    $.Property({Static:false, Public:true }, "SourceInvocationId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "UpToDatenessUsn", $.Int64);

    $.Property({Static:false, Public:true }, "SourceServer", $.String);

    $.Property({Static:false, Public:true }, "LastSuccessfulSyncTime", $asm07.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection */ 

(function ReplicationCursorCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReplicationCursorCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationCursor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddHelper", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.Boolean, $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationCursor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationCursor")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationCursor"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationCursor")])
    );

    $.Field({Static:false, Public:false}, "server", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationCursor"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ReplicationFailure */ 

(function ReplicationFailure$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReplicationFailure", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), 
          $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConsecutiveFailureCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FirstFailureTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastErrorMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceServer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SourceServerGuid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.Field({Static:false, Public:false}, "sourceDsaDN", $.String);

    $.Field({Static:false, Public:false}, "uuidDsaObjGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "timeFirstFailure", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "numFailures", $.Int32);

    $.Field({Static:false, Public:false}, "lastResult", $.Int32);

    $.Field({Static:false, Public:false}, "server", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.Field({Static:false, Public:false}, "sourceServer", $.String);

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "SourceServer", $.String);

    $.Property({Static:false, Public:false}, "SourceServerGuid", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "FirstFailureTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "ConsecutiveFailureCount", $.Int32);

    $.Property({Static:false, Public:true }, "LastErrorCode", $.Int32);

    $.Property({Static:false, Public:true }, "LastErrorMessage", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection */ 

(function ReplicationFailureCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReplicationFailureCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationFailure")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddHelper", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DS_REPL_KCC_DSA_FAILURES"), $.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationFailure")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationFailure")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationFailure"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationFailure")])
    );

    $.Field({Static:false, Public:false}, "server", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationFailure"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Rpc: 0, 
    Smtp: 1, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.ReplicationNeighbor */ 

(function ReplicationNeighbor$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReplicationNeighbor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), 
          $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConsecutiveFailureCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastAttemptedSync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastSuccessfulSync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastSyncMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastSyncResult", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PartitionName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReplicationNeighborOption", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighbor+ReplicationNeighborOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceInvocationId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceServer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransportType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UsnAttributeFilter", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UsnLastObjectChangeSynced", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.Field({Static:false, Public:false}, "namingContext", $.String);

    $.Field({Static:false, Public:false}, "sourceServerDN", $.String);

    $.Field({Static:false, Public:false}, "transportType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"));

    $.Field({Static:false, Public:false}, "replicaFlags", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighbor+ReplicationNeighborOptions"));

    $.Field({Static:false, Public:false}, "uuidSourceDsaInvocationID", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "usnLastObjChangeSynced", $.Int64);

    $.Field({Static:false, Public:false}, "usnAttributeFilter", $.Int64);

    $.Field({Static:false, Public:false}, "timeLastSyncSuccess", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "timeLastSyncAttempt", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "lastSyncResult", $.Int32);

    $.Field({Static:false, Public:false}, "consecutiveSyncFailures", $.Int32);

    $.Field({Static:false, Public:false}, "server", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.Field({Static:false, Public:false}, "sourceServer", $.String);

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "PartitionName", $.String);

    $.Property({Static:false, Public:true }, "SourceServer", $.String);

    $.Property({Static:false, Public:true }, "TransportType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"));

    $.Property({Static:false, Public:true }, "ReplicationNeighborOption", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighbor+ReplicationNeighborOptions"));

    $.Property({Static:false, Public:true }, "SourceInvocationId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "UsnLastObjectChangeSynced", $.Int64);

    $.Property({Static:false, Public:true }, "UsnAttributeFilter", $.Int64);

    $.Property({Static:false, Public:true }, "LastSuccessfulSync", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "LastAttemptedSync", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "LastSyncResult", $.Int32);

    $.Property({Static:false, Public:true }, "LastSyncMessage", $.String);

    $.Property({Static:false, Public:true }, "ConsecutiveFailureCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.ActiveDirectory.ReplicationNeighbor+ReplicationNeighborOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.ReplicationNeighbor+ReplicationNeighborOptions", 
    BaseType: $asm07.TypeRef("System.Int64"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Writeable: 16, 
    SyncOnStartup: 32, 
    ScheduledSync: 64, 
    UseInterSiteTransport: 128, 
    TwoWaySync: 512, 
    ReturnObjectParent: 2048, 
    FullSyncInProgress: 65536, 
    FullSyncNextPacket: 131072, 
    NeverSynced: 2097152, 
    Preempted: 16777216, 
    IgnoreChangeNotifications: 67108864, 
    DisableScheduledSync: 134217728, 
    CompressChanges: 268435456, 
    NoChangeNotifications: 536870912, 
    PartialAttributeSet: 1073741824, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection */ 

(function ReplicationNeighborCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReplicationNeighborCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighbor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddHelper", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DS_REPL_NEIGHBORS"), $.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighbor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighbor")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighbor"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighbor")])
    );

    $.Field({Static:false, Public:false}, "server", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationNeighbor"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ReplicationOperation */ 

(function ReplicationOperation$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReplicationOperation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"), 
          $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OperationNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OperationType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperationType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PartitionName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Priority", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceServer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SourceServerGuid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TimeEnqueued", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.Field({Static:false, Public:false}, "timeEnqueued", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "serialNumber", $.Int32);

    $.Field({Static:false, Public:false}, "priority", $.Int32);

    $.Field({Static:false, Public:false}, "operationType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperationType"));

    $.Field({Static:false, Public:false}, "namingContext", $.String);

    $.Field({Static:false, Public:false}, "dsaDN", $.String);

    $.Field({Static:false, Public:false}, "uuidDsaObjGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "server", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.Field({Static:false, Public:false}, "sourceServer", $.String);

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "TimeEnqueued", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "OperationNumber", $.Int32);

    $.Property({Static:false, Public:true }, "Priority", $.Int32);

    $.Property({Static:false, Public:true }, "OperationType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperationType"));

    $.Property({Static:false, Public:true }, "PartitionName", $.String);

    $.Property({Static:false, Public:true }, "SourceServer", $.String);

    $.Property({Static:false, Public:false}, "SourceServerGuid", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection */ 

(function ReplicationOperationCollection$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperation")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddHelper", 
      new JSIL.MethodSignature(null, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DS_REPL_PENDING_OPS"), $.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperation")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperation"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFirstOperation", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperation")])
    );

    $.Field({Static:false, Public:false}, "server", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperation"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation */ 

(function ReplicationOperationInformation$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ReplicationOperationInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentOperation", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OperationStartTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PendingOperations", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection"))
    );

    $.Field({Static:false, Public:false}, "startTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "currentOp", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperation"));

    $.Field({Static:false, Public:false}, "collection", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection"));

    $.Property({Static:false, Public:true }, "OperationStartTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "CurrentOperation", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperation"));

    $.Property({Static:false, Public:true }, "PendingOperations", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperationCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport */ 

(function ActiveDirectoryInterSiteTransport$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectoryInterSiteTransport", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"), 
          $asm15.TypeRef("System.DirectoryServices.DirectoryEntry")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "FindByTransportType", 
      new JSIL.MethodSignature($.Type, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BridgeAllSiteLinks", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreReplicationSchedule", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SiteLinkBridges", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SiteLinks", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransportType", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectoryEntry", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BridgeAllSiteLinks", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreReplicationSchedule", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "context", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"));

    $.Field({Static:false, Public:false}, "cachedEntry", $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"));

    $.Field({Static:false, Public:false}, "transport", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "linkRetrieved", $.Boolean);

    $.Field({Static:false, Public:false}, "bridgeRetrieved", $.Boolean);

    $.Field({Static:false, Public:false}, "siteLinkCollection", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection"));

    $.Field({Static:false, Public:false}, "bridgeCollection", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection"));

    $.Property({Static:false, Public:true }, "TransportType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"));

    $.Property({Static:false, Public:true }, "IgnoreReplicationSchedule", $.Boolean);

    $.Property({Static:false, Public:true }, "BridgeAllSiteLinks", $.Boolean);

    $.Property({Static:false, Public:true }, "SiteLinks", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkCollection"));

    $.Property({Static:false, Public:true }, "SiteLinkBridges", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReadOnlySiteLinkBridgeCollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    SchemaRole: 0, 
    NamingRole: 1, 
    PdcRole: 2, 
    RidRole: 3, 
    InfrastructureRole: 4, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.AdamRole */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.AdamRole", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    SchemaRole: 0, 
    NamingRole: 1, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection */ 

(function ActiveDirectoryRoleCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryRole"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.AdamRoleCollection */ 

(function AdamRoleCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.AdamRoleCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamRole")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamRole")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamRole"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamRole")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.AdamRole"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.ActiveDirectory.PolicySafeHandle */ 

(function PolicySafeHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.DirectoryServices.ActiveDirectory.PolicySafeHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.DirectoryServices.ActiveDirectory.LsaLogonProcessSafeHandle */ 

(function LsaLogonProcessSafeHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.DirectoryServices.ActiveDirectory.LsaLogonProcessSafeHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle */ 

(function LoadLibrarySafeHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* enum System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.ReplicationSecurityLevel", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    NegotiatePassThrough: 0, 
    Negotiate: 1, 
    MutualAuthentication: 2, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.SystemFlag */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.SystemFlag", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SystemFlagNtdsNC: 1, 
    SystemFlagNtdsDomain: 2, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.TopLevelNameStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.TopLevelNameStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Enabled: 0, 
    NewlyCreated: 1, 
    AdminDisabled: 2, 
    ConflictDisabled: 4, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.TopLevelName */ 

(function TopLevelName$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.TopLevelName", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LARGE_INTEGER")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelNameStatus"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Status", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelNameStatus"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "status", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelNameStatus"));

    $.Field({Static:false, Public:false}, "time", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LARGE_INTEGER"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Status", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelNameStatus"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.TopLevelNameCollection */ 

(function TopLevelNameCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.TopLevelNameCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelName")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelName"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelName")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TopLevelName"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.ActiveDirectory.TRUSTED_INFORMATION_CLASS */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.TRUSTED_INFORMATION_CLASS", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    TrustedDomainNameInformation: 1, 
    TrustedControllersInformation: 2, 
    TrustedPosixOffsetInformation: 3, 
    TrustedPasswordInformation: 4, 
    TrustedDomainInformationBasic: 5, 
    TrustedDomainInformationEx: 6, 
    TrustedDomainAuthInformation: 7, 
    TrustedDomainFullInformation: 8, 
    TrustedDomainAuthInformationInternal: 9, 
    TrustedDomainFullInformationInternal: 10, 
    TrustedDomainInformationEx2Internal: 11, 
    TrustedDomainFullInformation2Internal: 12, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.TRUST_ATTRIBUTE */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.TRUST_ATTRIBUTE", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    TRUST_ATTRIBUTE_NON_TRANSITIVE: 1, 
    TRUST_ATTRIBUTE_UPLEVEL_ONLY: 2, 
    TRUST_ATTRIBUTE_QUARANTINED_DOMAIN: 4, 
    TRUST_ATTRIBUTE_FOREST_TRANSITIVE: 8, 
    TRUST_ATTRIBUTE_CROSS_ORGANIZATION: 16, 
    TRUST_ATTRIBUTE_WITHIN_FOREST: 32, 
    TRUST_ATTRIBUTE_TREAT_AS_EXTERNAL: 64, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.TrustHelper */ 

(function TrustHelper$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.TrustHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateTrust", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.Boolean, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateTrustPassword", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "DeleteTrust", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTrustedDomainInfo", 
      new JSIL.MethodSignature($.IntPtr, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTrustedDomainInfoStatus", 
      new JSIL.MethodSignature($.Boolean, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TRUST_ATTRIBUTE"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetTrustedDomainInfoStatus", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TRUST_ATTRIBUTE"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateTrust", 
      new JSIL.MethodSignature($.String, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateTrustDirection", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $.String, 
          $.Boolean, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateTrust", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.PolicySafeHandle"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"), 
          $.String, $.String, 
          $.Boolean, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateTrustAttribute", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_INFORMATION_EX"), $.Boolean, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyTrust", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $.Boolean, 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustDirection"), $.Boolean, 
          $.String
        ])
    );

    $.Field({Static:true , Public:false}, "STATUS_OBJECT_NAME_NOT_FOUND", $.Int32, 2);

    $.Field({Static:true , Public:false}, "ERROR_NOT_FOUND", $.Int32, 1168);

    $.Field({Static:true , Public:false}, "NETLOGON_QUERY_LEVEL", $.Int32, 2);

    $.Field({Static:true , Public:false}, "NETLOGON_CONTROL_REDISCOVER", $.Int32, 5);

    $.Field({Static:true , Public:false}, "NETLOGON_CONTROL_TC_VERIFY", $.Int32, 10);

    $.Field({Static:true , Public:false}, "NETLOGON_VERIFY_STATUS_RETURNED", $.Int32, 128);

    $.Field({Static:true , Public:false}, "PASSWORD_LENGTH", $.Int32, 15);

    $.Field({Static:true , Public:false}, "TRUST_AUTH_TYPE_CLEAR", $.Int32, 2);

    $.Field({Static:true , Public:false}, "PolicyDnsDomainInformation", $.Int32, 12);

    $.Field({Static:true , Public:false}, "TRUSTED_SET_POSIX", $.Int32, 16);

    $.Field({Static:true , Public:false}, "TRUSTED_SET_AUTH", $.Int32, 32);

    $.Field({Static:true , Public:false}, "TRUST_TYPE_DOWNLEVEL", $.Int32, 1);

    $.Field({Static:true , Public:false}, "TRUST_TYPE_UPLEVEL", $.Int32, 2);

    $.Field({Static:true , Public:false}, "TRUST_TYPE_MIT", $.Int32, 3);

    $.Field({Static:true , Public:false}, "ERROR_ALREADY_EXISTS", $.Int32, 183);

    $.Field({Static:true , Public:false}, "ERROR_INVALID_LEVEL", $.Int32, 124);

    $.Field({Static:true , Public:false}, "punctuations", $jsilcore.TypeRef("System.Array", [$.Char]), JSIL.StringToCharArray("!@#$%^&*()_-+=[{]};:>|./?"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.ActiveDirectory.TrustType */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.TrustType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    TreeRoot: 0, 
    ParentChild: 1, 
    CrossLink: 2, 
    External: 3, 
    Forest: 4, 
    Kerberos: 5, 
    Unknown: 6, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.TrustDirection */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.TrustDirection", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Inbound: 1, 
    Outbound: 2, 
    Bidirectional: 3, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection */ 

(function TrustRelationshipInformationCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.ActiveDirectory.DS_REPL_INFO_TYPE */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.DS_REPL_INFO_TYPE", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DS_REPL_INFO_NEIGHBORS: 0, 
    DS_REPL_INFO_CURSORS_FOR_NC: 1, 
    DS_REPL_INFO_METADATA_FOR_OBJ: 2, 
    DS_REPL_INFO_KCC_DSA_CONNECT_FAILURES: 3, 
    DS_REPL_INFO_KCC_DSA_LINK_FAILURES: 4, 
    DS_REPL_INFO_PENDING_OPS: 5, 
    DS_REPL_INFO_METADATA_FOR_ATTR_VALUE: 6, 
    DS_REPL_INFO_CURSORS_2_FOR_NC: 7, 
    DS_REPL_INFO_CURSORS_3_FOR_NC: 8, 
    DS_REPL_INFO_METADATA_2_FOR_OBJ: 9, 
    DS_REPL_INFO_METADATA_2_FOR_ATTR_VALUE: 10, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.ReplicationOperationType */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.ReplicationOperationType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Sync: 0, 
    Add: 1, 
    Delete: 2, 
    Modify: 3, 
    UpdateReference: 4, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.DS_NAME_ERROR */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.DS_NAME_ERROR", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DS_NAME_NO_ERROR: 0, 
    DS_NAME_ERROR_RESOLVING: 1, 
    DS_NAME_ERROR_NOT_FOUND: 2, 
    DS_NAME_ERROR_NOT_UNIQUE: 3, 
    DS_NAME_ERROR_NO_MAPPING: 4, 
    DS_NAME_ERROR_DOMAIN_ONLY: 5, 
    DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING: 6, 
    DS_NAME_ERROR_TRUST_REFERRAL: 7, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.DS_DOMAINTRUST_FLAG */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.DS_DOMAINTRUST_FLAG", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    DS_DOMAIN_IN_FOREST: 1, 
    DS_DOMAIN_DIRECT_OUTBOUND: 2, 
    DS_DOMAIN_TREE_ROOT: 4, 
    DS_DOMAIN_PRIMARY: 8, 
    DS_DOMAIN_NATIVE_MODE: 16, 
    DS_DOMAIN_DIRECT_INBOUND: 32, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_RECORD_TYPE */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_RECORD_TYPE", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ForestTrustTopLevelName: 0, 
    ForestTrustTopLevelNameEx: 1, 
    ForestTrustDomainInfo: 2, 
    ForestTrustRecordTypeLast: 3, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    TopLevelName: 0, 
    Domain: 1, 
    Other: 2, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.TopLevelNameCollisionOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.TopLevelNameCollisionOptions", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    NewlyCreated: 1, 
    DisabledByAdmin: 2, 
    DisabledByConflict: 4, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.DomainCollisionOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.DomainCollisionOptions", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    SidDisabledByAdmin: 1, 
    SidDisabledByConflict: 2, 
    NetBiosNameDisabledByAdmin: 4, 
    NetBiosNameDisabledByConflict: 8, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.DSROLE_MACHINE_ROLE */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.DSROLE_MACHINE_ROLE", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DsRole_RoleStandaloneWorkstation: 0, 
    DsRole_RoleMemberWorkstation: 1, 
    DsRole_RoleStandaloneServer: 2, 
    DsRole_RoleMemberServer: 3, 
    DsRole_RoleBackupDomainController: 4, 
    DsRole_RolePrimaryDomainController: 5, 
    DsRole_WorkstationWithSharedAccountDomain: 6, 
    DsRole_ServerWithSharedAccountDomain: 7, 
    DsRole_MemberWorkstationWithSharedAccountDomain: 8, 
    DsRole_MemberServerWithSharedAccountDomain: 9, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.DSROLE_PRIMARY_DOMAIN_INFO_LEVEL */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.DSROLE_PRIMARY_DOMAIN_INFO_LEVEL", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DsRolePrimaryDomainInfoBasic: 1, 
    DsRoleUpgradeStatus: 2, 
    DsRoleOperationState: 3, 
    DsRolePrimaryDomainInfoBasicEx: 4, 
  }
);

/* class System.DirectoryServices.ActiveDirectory.FileTime */ 

(function FileTime$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.FileTime", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "lower", $.Int32);

    $.Field({Static:false, Public:true }, "higher", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.SystemTime */ 

(function SystemTime$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.SystemTime", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "wYear", $.UInt16);

    $.Field({Static:false, Public:true }, "wMonth", $.UInt16);

    $.Field({Static:false, Public:true }, "wDayOfWeek", $.UInt16);

    $.Field({Static:false, Public:true }, "wDay", $.UInt16);

    $.Field({Static:false, Public:true }, "wHour", $.UInt16);

    $.Field({Static:false, Public:true }, "wMinute", $.UInt16);

    $.Field({Static:false, Public:true }, "wSecond", $.UInt16);

    $.Field({Static:false, Public:true }, "wMilliseconds", $.UInt16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_CURSORS_3 */ 

(function DS_REPL_CURSORS_3$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_CURSORS_3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cNumCursors", $.Int32);

    $.Field({Static:false, Public:true }, "dwEnumerationContext", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_CURSORS */ 

(function DS_REPL_CURSORS$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_CURSORS", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cNumCursors", $.Int32);

    $.Field({Static:false, Public:true }, "reserved", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_CURSOR_3 */ 

(function DS_REPL_CURSOR_3$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_CURSOR_3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "uuidSourceDsaInvocationID", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "usnAttributeFilter", $.Int64);

    $.Field({Static:false, Public:true }, "ftimeLastSyncSuccess", $.Int64);

    $.Field({Static:false, Public:true }, "pszSourceDsaDN", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_CURSOR */ 

(function DS_REPL_CURSOR$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_CURSOR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "uuidSourceDsaInvocationID", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "usnAttributeFilter", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_PENDING_OPS */ 

(function DS_REPL_PENDING_OPS$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_PENDING_OPS", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "ftimeCurrentOpStarted", $.Int64);

    $.Field({Static:false, Public:true }, "cNumPendingOps", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_OP */ 

(function DS_REPL_OP$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_OP", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "ftimeEnqueued", $.Int64);

    $.Field({Static:false, Public:true }, "ulSerialNumber", $.Int32);

    $.Field({Static:false, Public:true }, "ulPriority", $.Int32);

    $.Field({Static:false, Public:true }, "OpType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ReplicationOperationType"));

    $.Field({Static:false, Public:true }, "ulOptions", $.Int32);

    $.Field({Static:false, Public:true }, "pszNamingContext", $.IntPtr);

    $.Field({Static:false, Public:true }, "pszDsaDN", $.IntPtr);

    $.Field({Static:false, Public:true }, "pszDsaAddress", $.IntPtr);

    $.Field({Static:false, Public:true }, "uuidNamingContextObjGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "uuidDsaObjGuid", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_NEIGHBORS */ 

(function DS_REPL_NEIGHBORS$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_NEIGHBORS", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cNumNeighbors", $.Int32);

    $.Field({Static:false, Public:true }, "dwReserved", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_NEIGHBOR */ 

(function DS_REPL_NEIGHBOR$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_NEIGHBOR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "pszNamingContext", $.IntPtr);

    $.Field({Static:false, Public:true }, "pszSourceDsaDN", $.IntPtr);

    $.Field({Static:false, Public:true }, "pszSourceDsaAddress", $.IntPtr);

    $.Field({Static:false, Public:true }, "pszAsyncIntersiteTransportDN", $.IntPtr);

    $.Field({Static:false, Public:true }, "dwReplicaFlags", $.Int32);

    $.Field({Static:false, Public:true }, "dwReserved", $.Int32);

    $.Field({Static:false, Public:true }, "uuidNamingContextObjGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "uuidSourceDsaObjGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "uuidSourceDsaInvocationID", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "uuidAsyncIntersiteTransportObjGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "usnLastObjChangeSynced", $.Int64);

    $.Field({Static:false, Public:true }, "usnAttributeFilter", $.Int64);

    $.Field({Static:false, Public:true }, "ftimeLastSyncSuccess", $.Int64);

    $.Field({Static:false, Public:true }, "ftimeLastSyncAttempt", $.Int64);

    $.Field({Static:false, Public:true }, "dwLastSyncResult", $.Int32);

    $.Field({Static:false, Public:true }, "cNumConsecutiveSyncFailures", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_KCC_DSA_FAILURES */ 

(function DS_REPL_KCC_DSA_FAILURES$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_KCC_DSA_FAILURES", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cNumEntries", $.Int32);

    $.Field({Static:false, Public:true }, "dwReserved", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_KCC_DSA_FAILURE */ 

(function DS_REPL_KCC_DSA_FAILURE$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_KCC_DSA_FAILURE", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "pszDsaDN", $.IntPtr);

    $.Field({Static:false, Public:true }, "uuidDsaObjGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "ftimeFirstFailure", $.Int64);

    $.Field({Static:false, Public:true }, "cNumFailures", $.Int32);

    $.Field({Static:false, Public:true }, "dwLastResult", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_OBJ_META_DATA_2 */ 

(function DS_REPL_OBJ_META_DATA_2$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_OBJ_META_DATA_2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cNumEntries", $.Int32);

    $.Field({Static:false, Public:true }, "dwReserved", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_ATTR_META_DATA_2 */ 

(function DS_REPL_ATTR_META_DATA_2$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_ATTR_META_DATA_2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "pszAttributeName", $.IntPtr);

    $.Field({Static:false, Public:true }, "dwVersion", $.Int32);

    $.Field({Static:false, Public:true }, "ftimeLastOriginatingChange1", $.Int32);

    $.Field({Static:false, Public:true }, "ftimeLastOriginatingChange2", $.Int32);

    $.Field({Static:false, Public:true }, "uuidLastOriginatingDsaInvocationID", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "usnOriginatingChange", $.Int64);

    $.Field({Static:false, Public:true }, "usnLocalChange", $.Int64);

    $.Field({Static:false, Public:true }, "pszLastOriginatingDsaDN", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_OBJ_META_DATA */ 

(function DS_REPL_OBJ_META_DATA$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_OBJ_META_DATA", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cNumEntries", $.Int32);

    $.Field({Static:false, Public:true }, "dwReserved", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPL_ATTR_META_DATA */ 

(function DS_REPL_ATTR_META_DATA$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPL_ATTR_META_DATA", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "pszAttributeName", $.IntPtr);

    $.Field({Static:false, Public:true }, "dwVersion", $.Int32);

    $.Field({Static:false, Public:true }, "ftimeLastOriginatingChange1", $.Int32);

    $.Field({Static:false, Public:true }, "ftimeLastOriginatingChange2", $.Int32);

    $.Field({Static:false, Public:true }, "uuidLastOriginatingDsaInvocationID", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "usnOriginatingChange", $.Int64);

    $.Field({Static:false, Public:true }, "usnLocalChange", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPSYNCALL_UPDATE */ 

(function DS_REPSYNCALL_UPDATE$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPSYNCALL_UPDATE", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "eventType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersEvent"));

    $.Field({Static:false, Public:true }, "pErrInfo", $.IntPtr);

    $.Field({Static:false, Public:true }, "pSync", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPSYNCALL_ERRINFO */ 

(function DS_REPSYNCALL_ERRINFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPSYNCALL_ERRINFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "pszSvrId", $.IntPtr);

    $.Field({Static:false, Public:true }, "error", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncFromAllServersErrorCategory"));

    $.Field({Static:false, Public:true }, "dwWin32Err", $.Int32);

    $.Field({Static:false, Public:true }, "pszSrcId", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_REPSYNCALL_SYNC */ 

(function DS_REPSYNCALL_SYNC$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_REPSYNCALL_SYNC", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "pszSrcId", $.IntPtr);

    $.Field({Static:false, Public:true }, "pszDstId", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_NAME_RESULT_ITEM */ 

(function DS_NAME_RESULT_ITEM$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_NAME_RESULT_ITEM", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "status", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DS_NAME_ERROR"));

    $.Field({Static:false, Public:true }, "pDomain", $.IntPtr);

    $.Field({Static:false, Public:true }, "pName", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_NAME_RESULT */ 

(function DS_NAME_RESULT$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_NAME_RESULT", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "cItems", $.Int32);

    $.Field({Static:false, Public:true }, "rItems", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DS_DOMAIN_TRUSTS */ 

(function DS_DOMAIN_TRUSTS$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DS_DOMAIN_TRUSTS", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "NetbiosDomainName", $.IntPtr);

    $.Field({Static:false, Public:true }, "DnsDomainName", $.IntPtr);

    $.Field({Static:false, Public:true }, "Flags", $.Int32);

    $.Field({Static:false, Public:true }, "ParentIndex", $.Int32);

    $.Field({Static:false, Public:true }, "TrustType", $.Int32);

    $.Field({Static:false, Public:true }, "TrustAttributes", $.Int32);

    $.Field({Static:false, Public:true }, "DomainSid", $.IntPtr);

    $.Field({Static:false, Public:true }, "DomainGuid", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.TrustObject */ 

(function TrustObject$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.TrustObject", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "NetbiosDomainName", $.String);

    $.Field({Static:false, Public:true }, "DnsDomainName", $.String);

    $.Field({Static:false, Public:true }, "Flags", $.Int32);

    $.Field({Static:false, Public:true }, "ParentIndex", $.Int32);

    $.Field({Static:false, Public:true }, "TrustType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TrustType"));

    $.Field({Static:false, Public:true }, "TrustAttributes", $.Int32);

    $.Field({Static:false, Public:true }, "OriginalIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_INFORMATION */ 

(function LSA_FOREST_TRUST_INFORMATION$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_INFORMATION", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "RecordCount", $.Int32);

    $.Field({Static:false, Public:true }, "Entries", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_RECORD */ 

(function LSA_FOREST_TRUST_RECORD$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_RECORD", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true , Offset: 0}, "Flags", $.Int32);

    $.Field({Static:false, Public:true , Offset: 4}, "ForestTrustType", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_RECORD_TYPE"));

    $.Field({Static:false, Public:true , Offset: 8}, "Time", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LARGE_INTEGER"));

    $.Field({Static:false, Public:true , Offset: 16}, "TopLevelName", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"));

    $.Field({Static:false, Public:true , Offset: 16}, "Data", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_BINARY_DATA"));

    $.Field({Static:false, Public:true , Offset: 16}, "DomainInfo", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_DOMAIN_INFO"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.LARGE_INTEGER */ 

(function LARGE_INTEGER$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.LARGE_INTEGER", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "lowPart", $.Int32);

    $.Field({Static:false, Public:true }, "highPart", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING */ 

(function LSA_UNICODE_STRING$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Length", $.Int16);

    $.Field({Static:false, Public:true }, "MaximumLength", $.Int16);

    $.Field({Static:false, Public:true }, "Buffer", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_DOMAIN_INFO */ 

(function LSA_FOREST_TRUST_DOMAIN_INFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_DOMAIN_INFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "sid", $.IntPtr);

    $.Field({Static:false, Public:true }, "DNSNameLength", $.Int16);

    $.Field({Static:false, Public:true }, "DNSNameMaximumLength", $.Int16);

    $.Field({Static:false, Public:true }, "DNSNameBuffer", $.IntPtr);

    $.Field({Static:false, Public:true }, "NetBIOSNameLength", $.Int16);

    $.Field({Static:false, Public:true }, "NetBIOSNameMaximumLength", $.Int16);

    $.Field({Static:false, Public:true }, "NetBIOSNameBuffer", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_BINARY_DATA */ 

(function LSA_FOREST_TRUST_BINARY_DATA$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_BINARY_DATA", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Length", $.Int32);

    $.Field({Static:false, Public:true }, "Buffer", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.LSA_OBJECT_ATTRIBUTES */ 

(function LSA_OBJECT_ATTRIBUTES$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.LSA_OBJECT_ATTRIBUTES", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "Length", $.Int32);

    $.Field({Static:false, Public:false}, "RootDirectory", $.IntPtr);

    $.Field({Static:false, Public:false}, "ObjectName", $.IntPtr);

    $.Field({Static:false, Public:false}, "Attributes", $.Int32);

    $.Field({Static:false, Public:false}, "SecurityDescriptor", $.IntPtr);

    $.Field({Static:false, Public:false}, "SecurityQualityOfService", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_INFORMATION_EX */ 

(function TRUSTED_DOMAIN_INFORMATION_EX$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_INFORMATION_EX", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Name", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"));

    $.Field({Static:false, Public:true }, "FlatName", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"));

    $.Field({Static:false, Public:true }, "Sid", $.IntPtr);

    $.Field({Static:false, Public:true }, "TrustDirection", $.Int32);

    $.Field({Static:false, Public:true }, "TrustType", $.Int32);

    $.Field({Static:false, Public:true }, "TrustAttributes", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TRUST_ATTRIBUTE"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_COLLISION_INFORMATION */ 

(function LSA_FOREST_TRUST_COLLISION_INFORMATION$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_COLLISION_INFORMATION", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "RecordCount", $.Int32);

    $.Field({Static:false, Public:true }, "Entries", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_COLLISION_RECORD */ 

(function LSA_FOREST_TRUST_COLLISION_RECORD$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.LSA_FOREST_TRUST_COLLISION_RECORD", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Index", $.Int32);

    $.Field({Static:false, Public:true }, "Type", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ForestTrustCollisionType"));

    $.Field({Static:false, Public:true }, "Flags", $.Int32);

    $.Field({Static:false, Public:true }, "Name", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.NETLOGON_INFO_2 */ 

(function NETLOGON_INFO_2$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.NETLOGON_INFO_2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "netlog2_flags", $.Int32);

    $.Field({Static:false, Public:true }, "netlog2_pdc_connection_status", $.Int32);

    $.Field({Static:false, Public:true }, "netlog2_trusted_dc_name", $.IntPtr);

    $.Field({Static:false, Public:true }, "netlog2_tc_connection_status", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_AUTH_INFORMATION */ 

(function TRUSTED_DOMAIN_AUTH_INFORMATION$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_AUTH_INFORMATION", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "IncomingAuthInfos", $.Int32);

    $.Field({Static:false, Public:true }, "IncomingAuthenticationInformation", $.IntPtr);

    $.Field({Static:false, Public:true }, "IncomingPreviousAuthenticationInformation", $.IntPtr);

    $.Field({Static:false, Public:true }, "OutgoingAuthInfos", $.Int32);

    $.Field({Static:false, Public:true }, "OutgoingAuthenticationInformation", $.IntPtr);

    $.Field({Static:false, Public:true }, "OutgoingPreviousAuthenticationInformation", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.LSA_AUTH_INFORMATION */ 

(function LSA_AUTH_INFORMATION$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.LSA_AUTH_INFORMATION", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "LastUpdateTime", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LARGE_INTEGER"));

    $.Field({Static:false, Public:true }, "AuthType", $.Int32);

    $.Field({Static:false, Public:true }, "AuthInfoLength", $.Int32);

    $.Field({Static:false, Public:true }, "AuthInfo", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.POLICY_DNS_DOMAIN_INFO */ 

(function POLICY_DNS_DOMAIN_INFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.POLICY_DNS_DOMAIN_INFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Name", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"));

    $.Field({Static:false, Public:true }, "DnsDomainName", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"));

    $.Field({Static:false, Public:true }, "DnsForestName", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"));

    $.Field({Static:false, Public:true }, "DomainGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "Sid", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.TRUSTED_POSIX_OFFSET_INFO */ 

(function TRUSTED_POSIX_OFFSET_INFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.TRUSTED_POSIX_OFFSET_INFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "Offset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_FULL_INFORMATION */ 

(function TRUSTED_DOMAIN_FULL_INFORMATION$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_FULL_INFORMATION", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Information", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_INFORMATION_EX"));

    $.Field({Static:false, Public:false}, "PosixOffset", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TRUSTED_POSIX_OFFSET_INFO"));

    $.Field({Static:false, Public:true }, "AuthInformation", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_AUTH_INFORMATION"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.DSROLE_PRIMARY_DOMAIN_INFO_BASIC */ 

(function DSROLE_PRIMARY_DOMAIN_INFO_BASIC$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.DSROLE_PRIMARY_DOMAIN_INFO_BASIC", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "MachineRole", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DSROLE_MACHINE_ROLE"));

    $.Field({Static:false, Public:true }, "Flags", $.UInt32);

    $.Field({Static:false, Public:true }, "DomainNameFlat", $.String);

    $.Field({Static:false, Public:true }, "DomainNameDns", $.String);

    $.Field({Static:false, Public:true }, "DomainForestName", $.String);

    $.Field({Static:false, Public:true }, "DomainGuid", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.SID_AND_ATTR */ 

(function SID_AND_ATTR$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.SID_AND_ATTR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "pSid", $.IntPtr);

    $.Field({Static:false, Public:true }, "attrs", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.TOKEN_USER */ 

(function TOKEN_USER$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.TOKEN_USER", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "sidAndAttributes", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SID_AND_ATTR"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.SID_IDENTIFIER_AUTHORITY */ 

(function SID_IDENTIFIER_AUTHORITY$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.SID_IDENTIFIER_AUTHORITY", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "b1", $.Byte);

    $.Field({Static:false, Public:true }, "b2", $.Byte);

    $.Field({Static:false, Public:true }, "b3", $.Byte);

    $.Field({Static:false, Public:true }, "b4", $.Byte);

    $.Field({Static:false, Public:true }, "b5", $.Byte);

    $.Field({Static:false, Public:true }, "b6", $.Byte);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.POLICY_ACCOUNT_DOMAIN_INFO */ 

(function POLICY_ACCOUNT_DOMAIN_INFO$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.POLICY_ACCOUNT_DOMAIN_INFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "domainName", $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"));

    $.Field({Static:false, Public:true }, "domainSid", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;






















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:true }, "ADsEncodeBinaryData", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "activeds.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CloseHandle", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "Kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ConvertSidToStringSidW", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]), 
      {
        Module: "Advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ConvertStringSidToSidW", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]), 
      {
        Module: "Advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CopySid", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "DsEnumerateDomainTrustsW", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "Netapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "DsGetSiteName", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]), 
      {
        Module: "netapi32.dll", 
        CharSet: 'unicode',
        EntryPoint: "DsGetSiteNameW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "DsRoleFreeMemory", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "Netapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "DsRoleGetPrimaryDomainInformation", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DSROLE_PRIMARY_DOMAIN_INFO_LEVEL"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "Netapi32.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPTStr"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "DsRoleGetPrimaryDomainInformation", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DSROLE_PRIMARY_DOMAIN_INFO_LEVEL"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "Netapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "EqualDomainSid", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]), 
      {
        Module: "advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "FormatMessageW", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "FreeADsMem", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "activeds.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "FreeLibrary", 
      new JSIL.MethodSignature($.UInt32, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetCurrentProcess", 
      JSIL.MethodSignature.Return($.IntPtr), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetCurrentThread", 
      JSIL.MethodSignature.Return($.IntPtr), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetCurrentThreadId", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "Kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetLengthSid", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetProcAddress", 
      new JSIL.MethodSignature($.IntPtr, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle"), $.String]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetSidIdentifierAuthority", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetSidSubAuthority", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.Int32]), 
      {
        Module: "advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetSidSubAuthorityCount", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetSystemTimeAsFileTime", 
      JSIL.MethodSignature.Action($.IntPtr), 
      {
        Module: "Kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetTokenInformation", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "I_NetLogonControl2", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "netapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ImpersonateAnonymousToken", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ImpersonateLoggedOnUser", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "IsValidSid", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LoadLibrary", 
      new JSIL.MethodSignature($.IntPtr, [$.String]), 
      {
        Module: "Kernel32.dll", 
        CharSet: 'unicode',
        EntryPoint: "LoadLibraryW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LocalFree", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LogonUserW", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "Advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaClose", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaCreateTrustedDomainEx", 
      new JSIL.MethodSignature($.Int32, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.PolicySafeHandle"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_INFORMATION_EX"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TRUSTED_DOMAIN_AUTH_INFORMATION"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaDeleteTrustedDomain", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.PolicySafeHandle"), $.IntPtr]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaFreeMemory", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaLookupSids", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaNtStatusToWinError", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaOpenPolicy", 
      new JSIL.MethodSignature($.Int32, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_OBJECT_ATTRIBUTES"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaOpenPolicy", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.IntPtr, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaOpenTrustedDomainByName", 
      new JSIL.MethodSignature($.Int32, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.PolicySafeHandle"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaQueryForestTrustInformation", 
      new JSIL.MethodSignature($.Int32, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.PolicySafeHandle"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaQueryInformationPolicy", 
      new JSIL.MethodSignature($.Int32, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.PolicySafeHandle"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaQueryInformationPolicy", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaQueryTrustedDomainInfoByName", 
      new JSIL.MethodSignature($.Int32, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.PolicySafeHandle"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TRUSTED_INFORMATION_CLASS"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaSetForestTrustInformation", 
      new JSIL.MethodSignature($.Int32, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.PolicySafeHandle"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"), 
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LsaSetTrustedDomainInfoByName", 
      new JSIL.MethodSignature($.Int32, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.PolicySafeHandle"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.TRUSTED_INFORMATION_CLASS"), $.IntPtr
        ]), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "NetApiBufferFree", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "Netapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "OpenProcessToken", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "OpenThread", 
      new JSIL.MethodSignature($.IntPtr, [
          $.UInt32, $.Boolean, 
          $.Int32
        ]), 
      {
        Module: "Kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "OpenThreadToken", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "RevertToSelf", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "Advapi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "RtlInitUnicodeString", 
      new JSIL.MethodSignature($.Int32, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LSA_UNICODE_STRING"), $.IntPtr]), 
      {
        Module: "ntdll.dll", 
      }
    );

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_ALLOCATE_BUFFER", $.Int32, 256);

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_IGNORE_INSERTS", $.Int32, 512);

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_FROM_STRING", $.Int32, 1024);

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_FROM_HMODULE", $.Int32, 2048);

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_FROM_SYSTEM", $.Int32, 4096);

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_ARGUMENT_ARRAY", $.Int32, 8192);

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_MAX_WIDTH_MASK", $.Int32, 255);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* delegate System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsReplicaConsistencyCheck */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsReplicaConsistencyCheck", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Int32")
    ]));

/* delegate System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsReplicaGetInfo2W */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsReplicaGetInfo2W", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.String"), $asm07.TypeRef("System.IntPtr"), 
      $asm07.TypeRef("System.String"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int32"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])
    ]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, null
      , null
      , null
      , null
      , null
      , null

    ]
  }
);

/* delegate System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsReplicaGetInfoW */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsReplicaGetInfoW", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.String"), $asm07.TypeRef("System.IntPtr"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])
    ]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, null
      , null

    ]
  }
);

/* delegate System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsReplicaFreeInfo */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsReplicaFreeInfo", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.IntPtr")]));

/* delegate System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsReplicaSyncW */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsReplicaSyncW", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.Int32")
    ]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, null
      , null

    ]
  }
);

/* delegate System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsReplicaSyncAllW */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsReplicaSyncAllW", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.Int32"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SyncReplicaFromAllServersCallback"), 
      $asm07.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])
    ]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, null
      , null
      , null
      , null

    ]
  }
);

/* delegate System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsListDomainsInSiteW */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsListDomainsInSiteW", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.String"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])
    ]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, null

    ]
  }
);

/* delegate System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsFreeNameResultW */ 

JSIL.MakeDelegate("System.DirectoryServices.ActiveDirectory.UnsafeNativeMethods+DsFreeNameResultW", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.IntPtr")));

/* struct System.DirectoryServices.ActiveDirectory.Component */ 

(function Component$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.ActiveDirectory.Component", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Name", $.String);

    $.Field({Static:false, Public:true }, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.ActiveDirectory.Capability */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.Capability", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ActiveDirectory: 0, 
    ActiveDirectoryApplicationMode: 1, 
    ActiveDirectoryOrADAM: 2, 
  }
);

/* enum System.DirectoryServices.ActiveDirectory.SidType */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.SidType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    RealObject: 0, 
    RealObjectFakeDomain: 1, 
    FakeObject: 2, 
  }
);

/* struct System.DirectoryServices.ActiveDirectory.SupportedCapability */ 

(function SupportedCapability$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.ActiveDirectory.SupportedCapability", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      SizeBytes: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true }, "ADOid", $.String, "1.2.840.113556.1.4.800");

    $.Field({Static:true , Public:true }, "ADAMOid", $.String, "1.2.840.113556.1.4.1851");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.ActiveDirectory.Utils */ 

(function Utils$Members () {
  var $, $thisType;
















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.ActiveDirectory.Utils", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckCapability", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Capability")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClassifySID", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.SidType"), [$.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32, $.String, 
          $.Int32, $.Int32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertByteArrayToIntPtr", 
      new JSIL.MethodSignature($.IntPtr, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FreeAuthIdentity", 
      new JSIL.MethodSignature(null, [$.IntPtr, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FreeDSHandle", 
      new JSIL.MethodSignature(null, [$.IntPtr, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAdamDnsHostNameFromNTDSA", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAdamHostNameAndPortsFromNTDSA", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAuthIdentity", 
      new JSIL.MethodSignature($.IntPtr, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCrossRefEntry", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentUserSid", 
      JSIL.MethodSignature.Return($.IntPtr)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetDNComponents", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.Component")]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDNFromDnsName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDNFromTransportType", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"), $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDnsHostNameFromNTDSA", 
      new JSIL.MethodSignature($.String, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDnsNameFromDN", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDomainAndUsername", 
      new JSIL.MethodSignature(null, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDSHandle", 
      new JSIL.MethodSignature($.IntPtr, [
          $.String, $.String, 
          $.IntPtr, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.LoadLibrarySafeHandle")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEscapedFilterValue", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEscapedPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLastRidFromSid", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetLastRidFromSid", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetMachineDomainSid", 
      JSIL.MethodSignature.Return($.IntPtr)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetNewDirectoryContext", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), [
          $.String, $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContextType"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNtAuthorityString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPartialDN", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPolicyHandle", 
      new JSIL.MethodSignature($.IntPtr, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPolicyServerName", 
      new JSIL.MethodSignature($.String, [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.Boolean, 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRandomIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRdnFromDN", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetReplicaList", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ArrayList"), [
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext"), $.String, 
          $.String, $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetServerNameFromInvocationID", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryServer")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTransportTypeFromDN", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.ActiveDirectory.ActiveDirectoryTransportType"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValuesWithRangeRetrieval", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Hashtable"), [
          $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $.String, 
          $asm07.TypeRef("System.Collections.ArrayList"), $asm15.TypeRef("System.DirectoryServices.SearchScope")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValuesWithRangeRetrieval", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Hashtable"), [
          $asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), $.String, 
          $asm07.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Collections.ArrayList"), 
          $asm15.TypeRef("System.DirectoryServices.SearchScope")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Impersonate", 
      new JSIL.MethodSignature($.Boolean, [$asm15.TypeRef("System.DirectoryServices.ActiveDirectory.DirectoryContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImpersonateAnonymous", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMachineDC", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsSamUser", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsValidDNFormat", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Revert", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Split", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "SplitServerNameAndPortNumber", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.Field({Static:true , Public:false}, "LOGON32_LOGON_NEW_CREDENTIALS", $.Int32, 9);

    $.Field({Static:true , Public:false}, "LOGON32_PROVIDER_WINNT50", $.Int32, 3);

    $.Field({Static:true , Public:false}, "POLICY_VIEW_LOCAL_INFORMATION", $.Int32, 1);

    $.Field({Static:true , Public:false}, "STANDARD_RIGHTS_REQUIRED", $.UInt32, 983040);

    $.Field({Static:true , Public:false}, "SYNCHRONIZE", $.UInt32, 1048576);

    $.Field({Static:true , Public:false}, "THREAD_ALL_ACCESS", $.UInt32, function ($pi) {
        return ((($pi.STANDARD_RIGHTS_REQUIRED >>> 0) | ($pi.SYNCHRONIZE >>> 0)) | 1023);
      });

    $.Field({Static:true , Public:false}, "DefaultAuthType", $asm15.TypeRef("System.DirectoryServices.AuthenticationTypes"), function ($pi) {
        return $asm15.System.DirectoryServices.AuthenticationTypes.$Flags("Sealing", "Secure", "Signing");
      });

    $.Field({Static:true , Public:false}, "LANG_ENGLISH", $.UInt32, 9);

    $.Field({Static:true , Public:false}, "SUBLANG_ENGLISH_US", $.UInt32, 1);

    $.Field({Static:true , Public:false}, "SORT_DEFAULT", $.UInt32, 0);

    $.Field({Static:true , Public:false}, "LANGID", $.UInt32, function ($pi) {
        return ((($pi.SUBLANG_ENGLISH_US & 0xFFFF) << 10) | ($pi.LANG_ENGLISH & 0xFFFF) >>> 0);
      });

    $.Field({Static:true , Public:false}, "LCID", $.UInt32, function ($pi) {
        return ((($pi.SORT_DEFAULT & 0xFFFF) << 16) | ($pi.LANGID & 0xFFFF) >>> 0);
      });

    $.Field({Static:true , Public:false}, "NORM_IGNORECASE", $.UInt32, 1);

    $.Field({Static:true , Public:false}, "NORM_IGNORENONSPACE", $.UInt32, 2);

    $.Field({Static:true , Public:false}, "NORM_IGNOREKANATYPE", $.UInt32, 65536);

    $.Field({Static:true , Public:false}, "NORM_IGNOREWIDTH", $.UInt32, 131072);

    $.Field({Static:true , Public:false}, "SORT_STRINGSORT", $.UInt32, 4096);

    $.Field({Static:true , Public:false}, "DEFAULT_CMP_FLAGS", $.UInt32, function ($pi) {
        return ((((($pi.NORM_IGNORECASE >>> 0) | ($pi.NORM_IGNOREKANATYPE >>> 0)) | ($pi.NORM_IGNORENONSPACE >>> 0)) | ($pi.NORM_IGNOREWIDTH >>> 0)) | ($pi.SORT_STRINGSORT >>> 0));
      });

    $.Field({Static:true , Public:false}, "NTAuthorityString", $.String, null);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.ActiveDirectory.WellKnownDN */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.ActiveDirectory.WellKnownDN", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    RootDSE: 0, 
    DefaultNamingContext: 1, 
    SchemaNamingContext: 2, 
    ConfigurationNamingContext: 3, 
    PartitionsContainer: 4, 
    SitesContainer: 5, 
    SystemContainer: 6, 
    RidManager: 7, 
    Infrastructure: 8, 
    RootDomainNamingContext: 9, 
    Schema: 10, 
  }
);

JSIL.DeclareNamespace("System.DirectoryServices.Interop");
/* enum System.DirectoryServices.Interop.AdsAuthentication */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Interop.AdsAuthentication", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ADS_SECURE_AUTHENTICATION: 1, 
    ADS_USE_SSL: 2, 
    ADS_USE_ENCRYPTION: 2, 
    ADS_READONLY_SERVER: 4, 
    ADS_PROMPT_CREDENTIALS: 8, 
    ADS_NO_AUTHENTICATION: 16, 
    ADS_FAST_BIND: 32, 
    ADS_USE_SIGNING: 64, 
    ADS_USE_SEALING: 128, 
  }
);

/* enum System.DirectoryServices.Interop.AdsOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Interop.AdsOptions", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ADS_OPTION_SERVERNAME: 0, 
    ADS_OPTION_REFERRALS: 1, 
    ADS_OPTION_PAGE_SIZE: 2, 
    ADS_OPTION_SECURITY_MASK: 3, 
    ADS_OPTION_MUTUAL_AUTH_STATUS: 4, 
    ADS_OPTION_QUOTA: 5, 
    ADS_OPTION_PASSWORD_PORTNUMBER: 6, 
    ADS_OPTION_PASSWORD_METHOD: 7, 
  }
);

/* enum System.DirectoryServices.Interop.AdsPropertyOperation */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Interop.AdsPropertyOperation", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Clear: 1, 
    Update: 2, 
    Append: 3, 
    Delete: 4, 
  }
);

/* struct System.DirectoryServices.Interop.AdsSearchColumn */ 

(function AdsSearchColumn$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Interop.AdsSearchColumn", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "pszAttrName", $.IntPtr);

    $.Field({Static:false, Public:true }, "dwADsType", $.Int32);

    $.Field({Static:false, Public:true }, "pADsValues", $jsilcore.TypeRef("JSIL.Pointer", [$asm15.TypeRef("System.DirectoryServices.Interop.AdsValue")]));

    $.Field({Static:false, Public:true }, "dwNumValues", $.Int32);

    $.Field({Static:false, Public:true }, "hReserved", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.DirectoryServices.Interop.AdsSearchPreferenceInfo */ 

(function AdsSearchPreferenceInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Interop.AdsSearchPreferenceInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "dwSearchPref", $.Int32);

    $.Field({Static:false, Public:false}, "pad", $.Int32);

    $.Field({Static:false, Public:true }, "vValue", $asm15.TypeRef("System.DirectoryServices.Interop.AdsValue"));

    $.Field({Static:false, Public:true }, "dwStatus", $.Int32);

    $.Field({Static:false, Public:false}, "pad2", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.Interop.AdsSearchPreferences */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Interop.AdsSearchPreferences", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ASYNCHRONOUS: 0, 
    DEREF_ALIASES: 1, 
    SIZE_LIMIT: 2, 
    TIME_LIMIT: 3, 
    ATTRIBTYPES_ONLY: 4, 
    SEARCH_SCOPE: 5, 
    TIMEOUT: 6, 
    PAGESIZE: 7, 
    PAGED_TIME_LIMIT: 8, 
    CHASE_REFERRALS: 9, 
    SORT_ON: 10, 
    CACHE_RESULTS: 11, 
    DIRSYNC: 12, 
    TOMBSTONE: 13, 
    VLV: 14, 
    ATTRIBUTE_QUERY: 15, 
    SECURITY_MASK: 16, 
    DIRSYNC_FLAG: 17, 
    EXTENDED_DN: 18, 
  }
);

/* struct System.DirectoryServices.Interop.AdsSortKey */ 

(function AdsSortKey$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Interop.AdsSortKey", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "pszAttrType", $.IntPtr);

    $.Field({Static:false, Public:true }, "pszReserved", $.IntPtr);

    $.Field({Static:false, Public:true }, "fReverseOrder", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.Interop.AdsStatusEnum */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Interop.AdsStatusEnum", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ADS_STATUS_S_OK: 0, 
    ADS_STATUS_INVALID_SEARCHPREF: 1, 
    ADS_STATUS_INVALID_SEARCHPREFVALUE: 2, 
  }
);

/* enum System.DirectoryServices.Interop.AdsType */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Interop.AdsType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ADSTYPE_INVALID: 0, 
    ADSTYPE_DN_STRING: 1, 
    ADSTYPE_CASE_EXACT_STRING: 2, 
    ADSTYPE_CASE_IGNORE_STRING: 3, 
    ADSTYPE_PRINTABLE_STRING: 4, 
    ADSTYPE_NUMERIC_STRING: 5, 
    ADSTYPE_BOOLEAN: 6, 
    ADSTYPE_INTEGER: 7, 
    ADSTYPE_OCTET_STRING: 8, 
    ADSTYPE_UTC_TIME: 9, 
    ADSTYPE_LARGE_INTEGER: 10, 
    ADSTYPE_PROV_SPECIFIC: 11, 
    ADSTYPE_OBJECT_CLASS: 12, 
    ADSTYPE_CASEIGNORE_LIST: 13, 
    ADSTYPE_OCTET_LIST: 14, 
    ADSTYPE_PATH: 15, 
    ADSTYPE_POSTALADDRESS: 16, 
    ADSTYPE_TIMESTAMP: 17, 
    ADSTYPE_BACKLINK: 18, 
    ADSTYPE_TYPEDNAME: 19, 
    ADSTYPE_HOLD: 20, 
    ADSTYPE_NETADDRESS: 21, 
    ADSTYPE_REPLICAPOINTER: 22, 
    ADSTYPE_FAXNUMBER: 23, 
    ADSTYPE_EMAIL: 24, 
    ADSTYPE_NT_SECURITY_DESCRIPTOR: 25, 
    ADSTYPE_UNKNOWN: 26, 
    ADSTYPE_DN_WITH_BINARY: 27, 
    ADSTYPE_DN_WITH_STRING: 28, 
  }
);

/* struct System.DirectoryServices.Interop.Ads_Pointer */ 

(function Ads_Pointer$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Interop.Ads_Pointer", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "value", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.DirectoryServices.Interop.Ads_OctetString */ 

(function Ads_OctetString$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Interop.Ads_OctetString", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "$length", $.Int32);

    $.Field({Static:false, Public:true }, "value", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.DirectoryServices.Interop.Ads_Generic */ 

(function Ads_Generic$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Interop.Ads_Generic", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "a", $.Int32);

    $.Field({Static:false, Public:true }, "b", $.Int32);

    $.Field({Static:false, Public:true }, "c", $.Int32);

    $.Field({Static:false, Public:true }, "d", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.DirectoryServices.Interop.AdsValue */ 

(function AdsValue$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Interop.AdsValue", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true , Offset: 0}, "dwType", $.Int32);

    $.Field({Static:false, Public:false, Offset: 4}, "pad", $.Int32);

    $.Field({Static:false, Public:true , Offset: 8}, "pointer", $asm15.TypeRef("System.DirectoryServices.Interop.Ads_Pointer"));

    $.Field({Static:false, Public:true , Offset: 8}, "octetString", $asm15.TypeRef("System.DirectoryServices.Interop.Ads_OctetString"));

    $.Field({Static:false, Public:true , Offset: 8}, "generic", $asm15.TypeRef("System.DirectoryServices.Interop.Ads_Generic"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.DirectoryServices.Interop.SystemTime */ 

(function SystemTime$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Interop.SystemTime", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "wYear", $.UInt16);

    $.Field({Static:false, Public:true }, "wMonth", $.UInt16);

    $.Field({Static:false, Public:true }, "wDayOfWeek", $.UInt16);

    $.Field({Static:false, Public:true }, "wDay", $.UInt16);

    $.Field({Static:false, Public:true }, "wHour", $.UInt16);

    $.Field({Static:false, Public:true }, "wMinute", $.UInt16);

    $.Field({Static:false, Public:true }, "wSecond", $.UInt16);

    $.Field({Static:false, Public:true }, "wMilliseconds", $.UInt16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Interop.DnWithBinary */ 

(function DnWithBinary$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Interop.DnWithBinary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "dwLength", $.Int32);

    $.Field({Static:false, Public:true }, "lpBinaryValue", $.IntPtr);

    $.Field({Static:false, Public:true }, "pszDNString", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Interop.DnWithString */ 

(function DnWithString$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Interop.DnWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "pszStringValue", $.IntPtr);

    $.Field({Static:false, Public:true }, "pszDNString", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Interop.AdsValueHelper */ 

(function AdsValueHelper$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Interop.AdsValueHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.Interop.AdsValue"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm15.TypeRef("System.DirectoryServices.Interop.AdsType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true }, "get_LowInt64", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAdsTypeForManagedType", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.Interop.AdsType"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetStruct", 
      JSIL.MethodSignature.Return($asm15.TypeRef("System.DirectoryServices.Interop.AdsValue"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetVlvValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "HighOfInt", 
      new JSIL.MethodSignature($.UInt16, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "LowOfInt", 
      new JSIL.MethodSignature($.UInt16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LowInt64", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$.Object, $asm15.TypeRef("System.DirectoryServices.Interop.AdsType")])
    );

    $.Field({Static:false, Public:true }, "adsvalue", $asm15.TypeRef("System.DirectoryServices.Interop.AdsValue"));

    $.Field({Static:false, Public:false}, "pinnedHandle", $asm07.TypeRef("System.Runtime.InteropServices.GCHandle"));

    $.Property({Static:false, Public:true }, "LowInt64", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Interop.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Interop.NativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* enum System.DirectoryServices.Interop.NativeMethods+AuthenticationModes */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Interop.NativeMethods+AuthenticationModes", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SecureAuthentication: 1, 
    UseEncryption: 2, 
    UseSSL: 2, 
    ReadonlyServer: 4, 
    NoAuthentication: 16, 
    FastBind: 32, 
    UseSigning: 64, 
    UseSealing: 128, 
    UseDelegation: 256, 
    UseServerBinding: 512, 
  }
);

/* class System.DirectoryServices.Interop.SafeNativeMethods */ 

(function SafeNativeMethods$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Interop.SafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:true }, "ADsGetLastError", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32, $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ]), 
      {
        Module: "activeds.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ADsSetLastError", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.String, 
          $.String
        ]), 
      {
        Module: "activeds.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "FormatMessageW", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "FreeADsMem", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "activeds.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "VariantClear", 
      JSIL.MethodSignature.Action($.IntPtr), 
      {
        Module: "oleaut32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "VariantInit", 
      JSIL.MethodSignature.Action($.IntPtr), 
      {
        Module: "oleaut32.dll", 
      }
    );

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_ALLOCATE_BUFFER", $.Int32, 256);

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_IGNORE_INSERTS", $.Int32, 512);

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_FROM_STRING", $.Int32, 1024);

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_FROM_HMODULE", $.Int32, 2048);

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_FROM_SYSTEM", $.Int32, 4096);

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_ARGUMENT_ARRAY", $.Int32, 8192);

    $.Constant({Static:true , Public:true }, "FORMAT_MESSAGE_MAX_WIDTH_MASK", $.Int32, 255);

    $.Constant({Static:true , Public:true }, "ERROR_MORE_DATA", $.Int32, 234);

    $.Constant({Static:true , Public:true }, "ERROR_SUCCESS", $.Int32, 0);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.DirectoryServices.Interop.SafeNativeMethods+EnumVariant */ 

(function EnumVariant$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Interop.SafeNativeMethods+EnumVariant", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm15.TypeRef("System.DirectoryServices.Interop.SafeNativeMethods+IEnumVariant"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Advance", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "NoMoreValues", $.Object);

    $.Field({Static:false, Public:false}, "currentValue", $.Object);

    $.Field({Static:false, Public:false}, "enumerator", $asm15.TypeRef("System.DirectoryServices.Interop.SafeNativeMethods+IEnumVariant"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* interface System.DirectoryServices.Interop.SafeNativeMethods+IEnumVariant */ 

JSIL.MakeInterface(
  "System.DirectoryServices.Interop.SafeNativeMethods+IEnumVariant", false, [], function ($) {
    $.Method({}, "Next", new JSIL.MethodSignature(null, [
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]));
    $.Method({}, "Skip", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "Reset", JSIL.MethodSignature.Void);
    $.Method({}, "Clone", JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Type])));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["00020404-0000-0000-C000-000000000046"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* struct System.DirectoryServices.Interop.Variant */ 

(function Variant$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Interop.Variant", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true , Offset: 0}, "varType", $.UInt16);

    $.Field({Static:false, Public:true , Offset: 2}, "reserved1", $.UInt16);

    $.Field({Static:false, Public:true , Offset: 4}, "reserved2", $.UInt16);

    $.Field({Static:false, Public:true , Offset: 6}, "reserved3", $.UInt16);

    $.Field({Static:false, Public:true , Offset: 8}, "boolvalue", $.Int16);

    $.Field({Static:false, Public:true , Offset: 8}, "ptr1", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 12}, "ptr2", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Interop.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Interop.UnsafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ADsOpenObject", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.PInvokeMethod({Static:true , Public:false}, "IntADsOpenObject", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      {
        Module: "activeds.dll", 
        CharSet: 'unicode',
        EntryPoint: "ADsOpenObject", 
        Parameters: [
          {
            NativeType: "IntF", 
            Out: true
          }
        ]
      }
    );

    $.Constant({Static:true , Public:false}, "S_ADS_NOMORE_ROWS", $.Int32, 20498);

    $.Constant({Static:true , Public:false}, "INVALID_FILTER", $.Int32, -2147016642);

    $.Constant({Static:true , Public:false}, "SIZE_LIMIT_EXCEEDED", $.Int32, -2147016669);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* interface System.DirectoryServices.Interop.UnsafeNativeMethods+IAds */ 

JSIL.MakeInterface(
  "System.DirectoryServices.Interop.UnsafeNativeMethods+IAds", false, [], function ($) {
    $.Method({}, "get_Name", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_Class", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_GUID", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_ADsPath", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_Parent", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_Schema", JSIL.MethodSignature.Return($.String));
    $.Method({}, "GetInfo", JSIL.MethodSignature.Void);
    $.Method({}, "SetInfo", JSIL.MethodSignature.Void);
    $.Method({}, "Get", new JSIL.MethodSignature($.Object, [$.String]));
    $.Method({}, "Put", new JSIL.MethodSignature(null, [$.String, $.Object]));
    $.Method({}, "GetEx", new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])]));
    $.Method({}, "PutEx", new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.Object
        ]));
    $.Method({}, "GetInfoEx", new JSIL.MethodSignature(null, [$.Object, $.Int32]));
    $.Property({}, "Name");
    $.Property({}, "Class");
    $.Property({}, "GUID");
    $.Property({}, "ADsPath");
    $.Property({}, "Parent");
    $.Property({}, "Schema");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["FD8256D0-FD15-11CE-ABC4-02608C9E7553"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsContainer */ 

JSIL.MakeInterface(
  "System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsContainer", false, [], function ($) {
    $.Method({}, "get_Count", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get__NewEnum", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "get_Filter", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_Filter", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "get_Hints", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_Hints", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "GetObject", new JSIL.MethodSignature($.Object, [$.String, $.String]));
    $.Method({}, "Create", new JSIL.MethodSignature($.Object, [$.String, $.String]));
    $.Method({}, "Delete", new JSIL.MethodSignature(null, [$.String, $.String]));
    $.Method({}, "CopyHere", new JSIL.MethodSignature($.Object, [$.String, $.String]));
    $.Method({}, "MoveHere", new JSIL.MethodSignature($.Object, [$.String, $.String]));
    $.Property({}, "Count");
    $.Property({}, "_NewEnum");
    $.Property({}, "Filter");
    $.Property({}, "Hints");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["001677D0-FD16-11CE-ABC4-02608C9E7553"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsDeleteOps */ 

JSIL.MakeInterface(
  "System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsDeleteOps", false, [], function ($) {
    $.Method({}, "DeleteObject", JSIL.MethodSignature.Action($.Int32));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["B2BD0902-8878-11D1-8C21-00C04FD8D503"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* class System.DirectoryServices.Interop.UnsafeNativeMethods+PropertyValue */ 

(function PropertyValue$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Interop.UnsafeNativeMethods+PropertyValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["7b9e38b0-a97c-11d0-8534-00c04fd8d503"]; });

})();

/* interface System.DirectoryServices.Interop.UnsafeNativeMethods+IADsLargeInteger */ 

JSIL.MakeInterface(
  "System.DirectoryServices.Interop.UnsafeNativeMethods+IADsLargeInteger", false, [], function ($) {
    $.Method({}, "get_HighPart", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_HighPart", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_LowPart", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_LowPart", JSIL.MethodSignature.Action($.Int32));
    $.Property({}, "HighPart");
    $.Property({}, "LowPart");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["9068270B-0939-11D1-8BE1-00C04FD8D503"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsPropertyValue */ 

JSIL.MakeInterface(
  "System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsPropertyValue", false, [], function ($) {
    $.Method({}, "Clear", JSIL.MethodSignature.Void);
    $.Method({}, "get_ADsType", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_ADsType", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_DNString", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_DNString", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_CaseExactString", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_CaseExactString", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_CaseIgnoreString", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_CaseIgnoreString", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_PrintableString", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_PrintableString", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_NumericString", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_NumericString", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_Boolean", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_Boolean", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_Integer", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_Integer", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_OctetString", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_OctetString", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "get_SecurityDescriptor", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_SecurityDescriptor", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "get_LargeInteger", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_LargeInteger", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "get_UTCTime", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_UTCTime", JSIL.MethodSignature.Action($.Object));
    $.Property({}, "ADsType");
    $.Property({}, "DNString");
    $.Property({}, "CaseExactString");
    $.Property({}, "CaseIgnoreString");
    $.Property({}, "PrintableString");
    $.Property({}, "NumericString");
    $.Property({}, "Boolean");
    $.Property({}, "Integer");
    $.Property({}, "OctetString");
    $.Property({}, "SecurityDescriptor");
    $.Property({}, "LargeInteger");
    $.Property({}, "UTCTime");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["79FA9AD0-A97C-11D0-8534-00C04FD8D503"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* class System.DirectoryServices.Interop.UnsafeNativeMethods+PropertyEntry */ 

(function PropertyEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Interop.UnsafeNativeMethods+PropertyEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["72d3edc2-a4c4-11d0-8533-00c04fd8d503"]; });

})();

/* interface System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsPropertyEntry */ 

JSIL.MakeInterface(
  "System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsPropertyEntry", false, [], function ($) {
    $.Method({}, "Clear", JSIL.MethodSignature.Void);
    $.Method({}, "get_Name", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_Name", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_ADsType", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_ADsType", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_ControlCode", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_ControlCode", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_Values", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_Values", JSIL.MethodSignature.Action($.Object));
    $.Property({}, "Name");
    $.Property({}, "ADsType");
    $.Property({}, "ControlCode");
    $.Property({}, "Values");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["05792C8E-941F-11D0-8529-00C04FD8D503"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsPropertyList */ 

JSIL.MakeInterface(
  "System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsPropertyList", false, [], function ($) {
    $.Method({}, "get_PropertyCount", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "Next", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Object])]));
    $.Method({}, "Skip", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "Reset", JSIL.MethodSignature.Void);
    $.Method({}, "Item", new JSIL.MethodSignature($.Object, [$.Object]));
    $.Method({}, "GetPropertyItem", new JSIL.MethodSignature($.Object, [$.String, $.Int32]));
    $.Method({}, "PutPropertyItem", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "ResetPropertyItem", JSIL.MethodSignature.Action($.Object));
    $.Method({}, "PurgePropertyList", JSIL.MethodSignature.Void);
    $.Property({}, "PropertyCount");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["C6F602B6-8F69-11D0-8528-00C04FD8D503"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface System.DirectoryServices.Interop.UnsafeNativeMethods+IDirectorySearch */ 

JSIL.MakeInterface(
  "System.DirectoryServices.Interop.UnsafeNativeMethods+IDirectorySearch", false, [], function ($) {
    $.Method({}, "SetSearchPreference", new JSIL.MethodSignature(null, [$.IntPtr, $.Int32]));
    $.Method({}, "ExecuteSearch", new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
    $.Method({}, "AbandonSearch", JSIL.MethodSignature.Action($.IntPtr));
    $.Method({}, "GetFirstRow", new JSIL.MethodSignature($.Int32, [$.IntPtr]));
    $.Method({}, "GetNextRow", new JSIL.MethodSignature($.Int32, [$.IntPtr]));
    $.Method({}, "GetPreviousRow", new JSIL.MethodSignature($.Int32, [$.IntPtr]));
    $.Method({}, "GetNextColumnName", new JSIL.MethodSignature($.Int32, [$.IntPtr, $.IntPtr]));
    $.Method({}, "GetColumn", new JSIL.MethodSignature(null, [
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ]));
    $.Method({}, "FreeColumn", JSIL.MethodSignature.Action($.IntPtr));
    $.Method({}, "CloseSearchHandle", JSIL.MethodSignature.Action($.IntPtr));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["109BA8EC-92F0-11D0-A790-00C04FD8D5A8"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* interface System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsObjectOptions */ 

JSIL.MakeInterface(
  "System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsObjectOptions", false, [], function ($) {
    $.Method({}, "GetOption", new JSIL.MethodSignature($.Object, [$.Int32]));
    $.Method({}, "SetOption", new JSIL.MethodSignature(null, [$.Int32, $.Object]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["46F14FDA-232B-11D1-A808-00C04FD8D5A8"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsObjectOptions2 */ 

JSIL.MakeInterface(
  "System.DirectoryServices.Interop.UnsafeNativeMethods+IAdsObjectOptions2", false, [], function ($) {
    $.Method({}, "GetOption", new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Object])]));
    $.Method({}, "SetOption", new JSIL.MethodSignature(null, [$.Int32, $asm15.TypeRef("System.DirectoryServices.Interop.Variant")]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["46f14fda-232b-11d1-a808-00c04fd8d5a8"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

JSIL.DeclareNamespace("System.DirectoryServices.Design");
/* class System.DirectoryServices.Design.DirectoryEntryConverter */ 

(function DirectoryEntryConverter$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.DirectoryServices.Design.DirectoryEntryConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFromCache", 
      new JSIL.MethodSignature($asm15.TypeRef("System.DirectoryServices.DirectoryEntry"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValues", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"), [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesExclusive", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValuesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );

    $.Field({Static:true , Public:false}, "values", $asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"));

    $.Field({Static:true , Public:false}, "componentsCreated", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Configuration");
/* class System.Configuration.PrivilegedConfigurationManager */ 

(function PrivilegedConfigurationManager$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Configuration.PrivilegedConfigurationManager", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_ConnectionStrings", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConnectionStringSettingsCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.Property({Static:true , Public:false}, "ConnectionStrings", $asm0E.TypeRef("System.Configuration.ConnectionStringSettingsCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false, ReadOnly:true }, "CD1228D2D78263003C9D8FE88D49BC2E96D38ABF", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

