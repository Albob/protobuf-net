/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm02 = JSIL.DeclareAssembly("Microsoft.Build.Utilities.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "Microsoft.Build.Utilities.v4.0.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "Microsoft.Build.Utilities.v4.0.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "Microsoft.Build.Utilities.v4.0.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "4.7.2046.0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", $.String, "30319");

    $.Constant({Static:true , Public:false}, "BuildRevisionStr", $.String, "0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 30319);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Build");
JSIL.DeclareNamespace("Microsoft.Build.Internal");
/* class Microsoft.Build.Internal.Tracing */ 

(function Tracing$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.Build.Internal.Tracing", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Dump", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "List", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Record", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Slot", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Slot", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", ["!!0", "!!1"])], ["K", "V"])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:true , Public:false}, "counts", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:true , Public:false}, "last", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false}, "interval", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false}, "slot", $.String, function ($pi) {
        return $asm07.System.String.Empty;
      });

    $.Field({Static:true , Public:false}, "currentAssemblyName", $.String);


    function Tracing__cctor () {
      $thisType.last = new $asm07.System.DateTime();
      $thisType.interval = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Tracing__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Build.Utilities");
/* class Microsoft.Build.Utilities.TaskLoggingHelper */ 

(function TaskLoggingHelper$Members () {
  var $, $thisType;
















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "Microsoft.Build.Utilities.TaskLoggingHelper", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITask"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExtractMessageCode", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatResourceString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "get_BuildEngine", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasLoggedErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HelpKeywordPrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TaskName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TaskNameUpperCase", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TaskResources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResourceMessage", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializeLifetimeService", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "LogCommandLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "LogCommandLine", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogCriticalMessage", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(9, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogError", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogError", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(9, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogErrorFromException", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "LogErrorFromException", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Exception"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogErrorFromException", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Exception"), $.Boolean, 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogErrorFromResources", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogErrorFromResources", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(9, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogErrorWithCodeFromResources", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogErrorWithCodeFromResources", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(7, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogExternalProjectFinished", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogExternalProjectStarted", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogMessage", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogMessage", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogMessage", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(10, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogMessageFromResources", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogMessageFromResources", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogMessageFromText", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogMessagesFromFile", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogMessagesFromFile", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogMessagesFromStream", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.IO.TextReader"), $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogWarning", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogWarning", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(9, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogWarningFromException", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "LogWarningFromException", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Exception"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogWarningFromResources", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogWarningFromResources", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(9, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogWarningWithCodeFromResources", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "LogWarningWithCodeFromResources", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(7, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "MarkAsInactive", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HelpKeywordPrefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TaskResources", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.Field({Static:false, Public:false}, "sponsor", $asm07.TypeRef("System.Runtime.Remoting.Lifetime.ClientSponsor"));

    $.Field({Static:false, Public:false}, "taskInstance", $asm00.TypeRef("Microsoft.Build.Framework.ITask"));

    $.Field({Static:false, Public:false}, "locker", $.Object);

    $.Field({Static:false, Public:false}, "taskName", $.String);

    $.Field({Static:false, Public:false}, "taskNameUpperCase", $.String);

    $.Field({Static:false, Public:false}, "buildEngine", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"));

    $.Field({Static:false, Public:false}, "taskResources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:false, Public:false}, "helpKeywordPrefix", $.String);

    $.Field({Static:false, Public:false}, "hasLoggedErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "TaskName", $.String);

    $.Property({Static:false, Public:false}, "TaskNameUpperCase", $.String);

    $.Property({Static:false, Public:false}, "BuildEngine", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"));

    $.Property({Static:false, Public:true }, "TaskResources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:false, Public:true }, "HelpKeywordPrefix", $.String);

    $.Property({Static:false, Public:true }, "HasLoggedErrors", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.AppDomainIsolatedTask */ 

(function AppDomainIsolatedTask$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "Microsoft.Build.Utilities.AppDomainIsolatedTask", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Resources.ResourceManager"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BuildEngine", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HelpKeywordPrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HostObject", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskHost"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Log", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TaskResources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializeLifetimeService", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_BuildEngine", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HelpKeywordPrefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_HostObject", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskHost"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TaskResources", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.Field({Static:false, Public:false}, "buildEngine", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"));

    $.Field({Static:false, Public:false}, "hostObject", $asm00.TypeRef("Microsoft.Build.Framework.ITaskHost"));

    $.Field({Static:false, Public:false}, "log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Property({Static:false, Public:true , Virtual:true }, "BuildEngine", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"));

    $.Property({Static:false, Public:true , Virtual:true }, "HostObject", $asm00.TypeRef("Microsoft.Build.Framework.ITaskHost"));

    $.Property({Static:false, Public:true }, "Log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Property({Static:false, Public:false}, "TaskResources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:false, Public:false}, "HelpKeywordPrefix", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Build.Framework.ITask")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("Microsoft.Build.Framework.LoadInSeparateAppDomainAttribute"));

})();

/* class Microsoft.Build.Utilities.AssemblyFoldersExInfo */ 

(function AssemblyFoldersExInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.Microsoft.Win32.RegistryHive)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Version)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.Microsoft.Win32.RegistryView)) ();
  };



  function AssemblyFoldersExInfo_get_DirectoryPath () {
    return this.AssemblyFoldersExInfo$DirectoryPath$value;
  }; 

  function AssemblyFoldersExInfo_get_Hive () {
    return this.AssemblyFoldersExInfo$Hive$value;
  }; 

  function AssemblyFoldersExInfo_get_Key () {
    return this.AssemblyFoldersExInfo$Key$value;
  }; 

  function AssemblyFoldersExInfo_get_TargetFrameworkVersion () {
    return this.AssemblyFoldersExInfo$TargetFrameworkVersion$value;
  }; 

  function AssemblyFoldersExInfo_get_View () {
    return this.AssemblyFoldersExInfo$View$value;
  }; 

  function AssemblyFoldersExInfo_set_DirectoryPath (value) {
    this.AssemblyFoldersExInfo$DirectoryPath$value = value;
  }; 

  function AssemblyFoldersExInfo_set_Hive (value) {
    this.AssemblyFoldersExInfo$Hive$value = value;
  }; 

  function AssemblyFoldersExInfo_set_Key (value) {
    this.AssemblyFoldersExInfo$Key$value = value;
  }; 

  function AssemblyFoldersExInfo_set_TargetFrameworkVersion (value) {
    this.AssemblyFoldersExInfo$TargetFrameworkVersion$value = value;
  }; 

  function AssemblyFoldersExInfo_set_View (value) {
    this.AssemblyFoldersExInfo$View$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.AssemblyFoldersExInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Microsoft.Win32.RegistryHive"), $asm07.TypeRef("Microsoft.Win32.RegistryView"), 
          $.String, $.String, 
          $asm07.TypeRef("System.Version")
        ])
    );

    $.Method({Static:false, Public:true }, "get_DirectoryPath", 
      JSIL.MethodSignature.Return($.String), 
      AssemblyFoldersExInfo_get_DirectoryPath
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Hive", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.RegistryHive")), 
      AssemblyFoldersExInfo_get_Hive
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($.String), 
      AssemblyFoldersExInfo_get_Key
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TargetFrameworkVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version")), 
      AssemblyFoldersExInfo_get_TargetFrameworkVersion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_View", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.RegistryView")), 
      AssemblyFoldersExInfo_get_View
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_DirectoryPath", 
      JSIL.MethodSignature.Action($.String), 
      AssemblyFoldersExInfo_set_DirectoryPath
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Hive", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Microsoft.Win32.RegistryHive")), 
      AssemblyFoldersExInfo_set_Hive
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Key", 
      JSIL.MethodSignature.Action($.String), 
      AssemblyFoldersExInfo_set_Key
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TargetFrameworkVersion", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version")), 
      AssemblyFoldersExInfo_set_TargetFrameworkVersion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_View", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Microsoft.Win32.RegistryView")), 
      AssemblyFoldersExInfo_set_View
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AssemblyFoldersExInfo$Hive$value", $asm07.TypeRef("Microsoft.Win32.RegistryHive"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AssemblyFoldersExInfo$View$value", $asm07.TypeRef("Microsoft.Win32.RegistryView"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AssemblyFoldersExInfo$Key$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AssemblyFoldersExInfo$DirectoryPath$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AssemblyFoldersExInfo$TargetFrameworkVersion$value", $asm07.TypeRef("System.Version"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Hive", $asm07.TypeRef("Microsoft.Win32.RegistryHive"));

    $.Property({Static:false, Public:true }, "View", $asm07.TypeRef("Microsoft.Win32.RegistryView"));

    $.Property({Static:false, Public:true }, "Key", $.String);

    $.Property({Static:false, Public:true }, "DirectoryPath", $.String);

    $.Property({Static:false, Public:true }, "TargetFrameworkVersion", $asm07.TypeRef("System.Version"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.CommandLineBuilder */ 

(function CommandLineBuilder$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.CommandLineBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendFileNameIfNotNull", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendFileNameIfNotNull", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendFileNamesIfNotNull", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendFileNamesIfNotNull", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendFileNameWithQuoting", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendQuotedTextToBuffer", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSpaceIfNotEmpty", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendSwitch", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendSwitchIfNotNull", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendSwitchIfNotNull", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendSwitchIfNotNull", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendSwitchIfNotNull", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendSwitchUnquotedIfNotNull", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendSwitchUnquotedIfNotNull", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendSwitchUnquotedIfNotNull", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendSwitchUnquotedIfNotNull", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AppendTextUnquoted", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendTextWithQuoting", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowedUnquoted", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Text.RegularExpressions.Regex"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CommandLine", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefinitelyNeedQuotes", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Text.RegularExpressions.Regex"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsQuotingRequired", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VerifyThrowNoEmbeddedDoubleQuotes", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "commandLine", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:true , Public:false}, "allowedUnquotedRegexNoHyphen", $.String, "^[a-z\\\\/:0-9\\._+=]*$");

    $.Field({Static:true , Public:false}, "definitelyNeedQuotesRegexWithHyphen", $.String, "[|><\\s,;\\-\"]+");

    $.Field({Static:true , Public:false}, "allowedUnquotedRegexWithHyphen", $.String, "^[a-z\\\\/:0-9\\._\\-+=]*$");

    $.Field({Static:true , Public:false}, "definitelyNeedQuotesRegexNoHyphen", $.String, "[|><\\s,;\"]+");

    $.Field({Static:false, Public:false}, "quoteHyphens", $.Boolean);

    $.Field({Static:false, Public:false}, "allowedUnquoted", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:false, Public:false}, "definitelyNeedQuotes", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Property({Static:false, Public:true }, "Length", $.Int32);

    $.Property({Static:false, Public:false}, "CommandLine", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Property({Static:false, Public:false}, "DefinitelyNeedQuotes", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Property({Static:false, Public:false}, "AllowedUnquoted", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.Logger */ 

(function Logger$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.Logger", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatErrorEvent", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.BuildErrorEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatWarningEvent", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.BuildWarningEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Verbosity", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.LoggerVerbosity"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.IEventSource"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsVerbosityAtLeast", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.LoggerVerbosity")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Parameters", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Verbosity", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.LoggerVerbosity"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Shutdown", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "verbosity", $asm00.TypeRef("Microsoft.Build.Framework.LoggerVerbosity"));

    $.Field({Static:false, Public:false}, "parameters", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Verbosity", $asm00.TypeRef("Microsoft.Build.Framework.LoggerVerbosity"));

    $.Property({Static:false, Public:true , Virtual:true }, "Parameters", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Build.Framework.ILogger")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.MuxLogger */ 

(function MuxLogger$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Build.Framework.LoggerVerbosity)) ();
  };





  function MuxLogger_get_Parameters () {
    return this.MuxLogger$Parameters$value;
  }; 

  function MuxLogger_get_Verbosity () {
    return this.MuxLogger$Verbosity$value;
  }; 







  function MuxLogger_set_Parameters (value) {
    this.MuxLogger$Parameters$value = value;
  }; 

  function MuxLogger_set_Verbosity (value) {
    this.MuxLogger$Verbosity$value = value;
  }; 



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.MuxLogger", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildFinished", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.BuildFinishedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildStarted", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.BuildStartedEventArgs")])
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($.String), 
      MuxLogger_get_Parameters
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Verbosity", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.LoggerVerbosity")), 
      MuxLogger_get_Verbosity
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.IEventSource"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.IEventSource"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeLogger", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ILogger")]), $asm00.TypeRef("Microsoft.Build.Framework.ILogger"), 
          $asm00.TypeRef("Microsoft.Build.Framework.IEventSource")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProjectFinished", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.ProjectFinishedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProjectStarted", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.ProjectStartedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RegisterLogger", 
      new JSIL.MethodSignature(null, [$.Int32, $asm00.TypeRef("Microsoft.Build.Framework.ILogger")])
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Parameters", 
      JSIL.MethodSignature.Action($.String), 
      MuxLogger_set_Parameters
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "set_Verbosity", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.LoggerVerbosity")), 
      MuxLogger_set_Verbosity
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Shutdown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "UnregisterLoggers", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "submissionRecords", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm02.TypeRef("Microsoft.Build.Utilities.MuxLogger+SubmissionRecord")]));

    $.Field({Static:false, Public:false}, "buildStartedEvent", $asm00.TypeRef("Microsoft.Build.Framework.BuildStartedEventArgs"));

    $.Field({Static:false, Public:false}, "eventSourceForBuild", $asm00.TypeRef("Microsoft.Build.Framework.IEventSource"));

    $.Field({Static:false, Public:false}, "buildStartedEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.BuildStartedEventHandler"));

    $.Field({Static:false, Public:false}, "buildFinishedEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.BuildFinishedEventHandler"));

    $.Field({Static:false, Public:false}, "projectStartedEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.ProjectStartedEventHandler"));

    $.Field({Static:false, Public:false}, "projectFinishedEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.ProjectFinishedEventHandler"));

    $.Field({Static:false, Public:false}, "submissionProjectsInProgress", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Int32]));

    $.Field({Static:false, Public:false}, "maxNodeCount", $.Int32);

    $.Field({Static:false, Public:false}, "MuxLogger$Verbosity$value", $asm00.TypeRef("Microsoft.Build.Framework.LoggerVerbosity"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MuxLogger$Parameters$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Verbosity", $asm00.TypeRef("Microsoft.Build.Framework.LoggerVerbosity"));

    $.Property({Static:false, Public:true , Virtual:true }, "Parameters", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Build.Framework.INodeLogger"), 
      /* 1 */ $asm00.TypeRef("Microsoft.Build.Framework.ILogger")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.MuxLogger+SubmissionRecord */ 

(function SubmissionRecord$Members () {
  var $, $thisType;


















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "Microsoft.Build.Utilities.MuxLogger+SubmissionRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("Microsoft.Build.Framework.IEventSource"), 
          $asm00.TypeRef("Microsoft.Build.Framework.BuildStartedEventArgs"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_AnyEventRaised", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.AnyEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_BuildFinished", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.BuildFinishedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_BuildStarted", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.BuildStartedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_CustomEventRaised", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.CustomBuildEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_ErrorRaised", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.BuildErrorEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_MessageRaised", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.BuildMessageEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_ProjectFinished", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ProjectFinishedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_ProjectStarted", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ProjectStartedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_StatusEventRaised", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.BuildStatusEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_TargetFinished", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.TargetFinishedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_TargetStarted", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.TargetStartedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_TaskFinished", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.TaskFinishedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_TaskStarted", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.TaskStartedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_WarningRaised", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.BuildWarningEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddLogger", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ILogger"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeInternalEventSource", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseAnyEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.BuildEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseBuildFinishedEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.BuildFinishedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseBuildStartedEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.BuildStartedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseCustomEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.CustomBuildEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseErrorEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.BuildErrorEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseMessageEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.BuildMessageEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseProjectFinishedEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.ProjectFinishedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseProjectStartedEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.ProjectStartedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseStatusEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.BuildStatusEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseStatusEvent", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm00.TypeRef("Microsoft.Build.Framework.BuildStatusEventArgs"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseTargetFinishedEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.TargetFinishedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseTargetStartedEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.TargetStartedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseTaskFinishedEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.TaskFinishedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseTaskStartedEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.TaskStartedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RaiseWarningEvent", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("Microsoft.Build.Framework.BuildWarningEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_AnyEventRaised", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.AnyEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_BuildFinished", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.BuildFinishedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_BuildStarted", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.BuildStartedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_CustomEventRaised", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.CustomBuildEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_ErrorRaised", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.BuildErrorEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_MessageRaised", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.BuildMessageEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_ProjectFinished", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ProjectFinishedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_ProjectStarted", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ProjectStartedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_StatusEventRaised", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.BuildStatusEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_TargetFinished", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.TargetFinishedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_TargetStarted", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.TargetStartedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_TaskFinished", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.TaskFinishedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_TaskStarted", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.TaskStartedEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_WarningRaised", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.BuildWarningEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetGlobalBuildStartedEvent", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.BuildStartedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Shutdown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UnregisterAllEventHandlers", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "syncLock", $.Object);

    $.Field({Static:false, Public:false}, "loggers", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ILogger")]));

    $.Field({Static:false, Public:false}, "maxNodeCount", $.Int32);

    $.Field({Static:false, Public:false}, "eventSourceForBuild", $asm00.TypeRef("Microsoft.Build.Framework.IEventSource"));

    $.Field({Static:false, Public:false}, "buildStartedEvent", $asm00.TypeRef("Microsoft.Build.Framework.BuildStartedEventArgs"));

    $.Field({Static:false, Public:false}, "firstProjectStartedEventContext", $asm00.TypeRef("Microsoft.Build.Framework.BuildEventContext"));

    $.Field({Static:false, Public:false}, "submissionId", $.Int32);

    $.Field({Static:false, Public:false}, "shutdown", $.Boolean);

    $.Field({Static:false, Public:false}, "anyEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.AnyEventHandler"));

    $.Field({Static:false, Public:false}, "buildFinishedEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.BuildFinishedEventHandler"));

    $.Field({Static:false, Public:false}, "buildStartedEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.BuildStartedEventHandler"));

    $.Field({Static:false, Public:false}, "customBuildEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.CustomBuildEventHandler"));

    $.Field({Static:false, Public:false}, "buildErrorEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.BuildErrorEventHandler"));

    $.Field({Static:false, Public:false}, "buildMessageEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.BuildMessageEventHandler"));

    $.Field({Static:false, Public:false}, "projectFinishedEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.ProjectFinishedEventHandler"));

    $.Field({Static:false, Public:false}, "projectStartedEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.ProjectStartedEventHandler"));

    $.Field({Static:false, Public:false}, "buildStatusEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.BuildStatusEventHandler"));

    $.Field({Static:false, Public:false}, "targetFinishedEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.TargetFinishedEventHandler"));

    $.Field({Static:false, Public:false}, "targetStartedEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.TargetStartedEventHandler"));

    $.Field({Static:false, Public:false}, "taskFinishedEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.TaskFinishedEventHandler"));

    $.Field({Static:false, Public:false}, "taskStartedEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.TaskStartedEventHandler"));

    $.Field({Static:false, Public:false}, "buildWarningEventHandler", $asm00.TypeRef("Microsoft.Build.Framework.BuildWarningEventHandler"));

    $.Field({Static:false, Public:false}, "MessageRaised", $asm00.TypeRef("Microsoft.Build.Framework.BuildMessageEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ErrorRaised", $asm00.TypeRef("Microsoft.Build.Framework.BuildErrorEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WarningRaised", $asm00.TypeRef("Microsoft.Build.Framework.BuildWarningEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "BuildStarted", $asm00.TypeRef("Microsoft.Build.Framework.BuildStartedEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "BuildFinished", $asm00.TypeRef("Microsoft.Build.Framework.BuildFinishedEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ProjectStarted", $asm00.TypeRef("Microsoft.Build.Framework.ProjectStartedEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ProjectFinished", $asm00.TypeRef("Microsoft.Build.Framework.ProjectFinishedEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TargetStarted", $asm00.TypeRef("Microsoft.Build.Framework.TargetStartedEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TargetFinished", $asm00.TypeRef("Microsoft.Build.Framework.TargetFinishedEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TaskStarted", $asm00.TypeRef("Microsoft.Build.Framework.TaskStartedEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TaskFinished", $asm00.TypeRef("Microsoft.Build.Framework.TaskFinishedEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "CustomEventRaised", $asm00.TypeRef("Microsoft.Build.Framework.CustomBuildEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "StatusEventRaised", $asm00.TypeRef("Microsoft.Build.Framework.BuildStatusEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AnyEventRaised", $asm00.TypeRef("Microsoft.Build.Framework.AnyEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Event({Static:false, Public:true , Virtual:true }, "MessageRaised", $asm00.TypeRef("Microsoft.Build.Framework.BuildMessageEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "ErrorRaised", $asm00.TypeRef("Microsoft.Build.Framework.BuildErrorEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "WarningRaised", $asm00.TypeRef("Microsoft.Build.Framework.BuildWarningEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "BuildStarted", $asm00.TypeRef("Microsoft.Build.Framework.BuildStartedEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "BuildFinished", $asm00.TypeRef("Microsoft.Build.Framework.BuildFinishedEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "ProjectStarted", $asm00.TypeRef("Microsoft.Build.Framework.ProjectStartedEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "ProjectFinished", $asm00.TypeRef("Microsoft.Build.Framework.ProjectFinishedEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "TargetStarted", $asm00.TypeRef("Microsoft.Build.Framework.TargetStartedEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "TargetFinished", $asm00.TypeRef("Microsoft.Build.Framework.TargetFinishedEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "TaskStarted", $asm00.TypeRef("Microsoft.Build.Framework.TaskStartedEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "TaskFinished", $asm00.TypeRef("Microsoft.Build.Framework.TaskFinishedEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "CustomEventRaised", $asm00.TypeRef("Microsoft.Build.Framework.CustomBuildEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "StatusEventRaised", $asm00.TypeRef("Microsoft.Build.Framework.BuildStatusEventHandler"));

    $.Event({Static:false, Public:true , Virtual:true }, "AnyEventRaised", $asm00.TypeRef("Microsoft.Build.Framework.AnyEventHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Build.Framework.IEventSource")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.ProcessorArchitecture */ 

(function ProcessorArchitecture$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Build.Utilities.ProcessorArchitecture", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_CurrentProcessArchitecture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentProcessArchitecture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:true }, "X86", $.String, "x86");

    $.Constant({Static:true , Public:true }, "IA64", $.String, "IA64");

    $.Constant({Static:true , Public:true }, "AMD64", $.String, "AMD64");

    $.Constant({Static:true , Public:true }, "MSIL", $.String, "MSIL");

    $.Constant({Static:true , Public:true }, "ARM", $.String, "ARM");

    $.Field({Static:true , Public:false}, "currentProcessArchitecture", $.String);

    $.Field({Static:true , Public:false}, "currentProcessArchitectureInitialized", $.Boolean);

    $.Property({Static:true , Public:true }, "CurrentProcessArchitecture", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Build.Utilities.ProcessorArchitecture+IsWow64ProcessDelegate */ 

JSIL.MakeDelegate("Microsoft.Build.Utilities.ProcessorArchitecture+IsWow64ProcessDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Boolean")])]));

/* class Microsoft.Build.Utilities.TargetPlatformSDK */ 

(function TargetPlatformSDK$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.String, $asm07.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Version)) ();
  };





  function TargetPlatformSDK_get_ExtensionSDKs () {
    return this.TargetPlatformSDK$ExtensionSDKs$value;
  }; 


  function TargetPlatformSDK_get_TargetPlatformIdentifier () {
    return this.TargetPlatformSDK$TargetPlatformIdentifier$value;
  }; 

  function TargetPlatformSDK_get_TargetPlatformVersion () {
    return this.TargetPlatformSDK$TargetPlatformVersion$value;
  }; 


  function TargetPlatformSDK_set_ExtensionSDKs (value) {
    this.TargetPlatformSDK$ExtensionSDKs$value = value;
  }; 


  function TargetPlatformSDK_set_TargetPlatformIdentifier (value) {
    this.TargetPlatformSDK$TargetPlatformIdentifier$value = value;
  }; 

  function TargetPlatformSDK_set_TargetPlatformVersion (value) {
    this.TargetPlatformSDK$TargetPlatformVersion$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.TargetPlatformSDK", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Version"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.Method({Static:false, Public:false}, "get_ExtensionSDKs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])), 
      TargetPlatformSDK_get_ExtensionSDKs
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true }, "get_TargetPlatformIdentifier", 
      JSIL.MethodSignature.Return($.String), 
      TargetPlatformSDK_get_TargetPlatformIdentifier
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TargetPlatformVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version")), 
      TargetPlatformSDK_get_TargetPlatformVersion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Method({Static:false, Public:false}, "set_ExtensionSDKs", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])), 
      TargetPlatformSDK_set_ExtensionSDKs
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Path", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:false}, "set_TargetPlatformIdentifier", 
      JSIL.MethodSignature.Action($.String), 
      TargetPlatformSDK_set_TargetPlatformIdentifier
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TargetPlatformVersion", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version")), 
      TargetPlatformSDK_set_TargetPlatformVersion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "path", $.String);

    $.Field({Static:false, Public:false}, "TargetPlatformSDK$TargetPlatformIdentifier$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TargetPlatformSDK$TargetPlatformVersion$value", $asm07.TypeRef("System.Version"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TargetPlatformSDK$ExtensionSDKs$value", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "TargetPlatformIdentifier", $.String);

    $.Property({Static:false, Public:true }, "TargetPlatformVersion", $asm07.TypeRef("System.Version"));

    $.Property({Static:false, Public:true }, "Path", $.String);

    $.Property({Static:false, Public:false}, "ExtensionSDKs", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.Task */ 

(function Task$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.Task", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Resources.ResourceManager"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BuildEngine", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BuildEngine2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine2"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BuildEngine3", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine3"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BuildEngine4", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine4"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HelpKeywordPrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HostObject", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskHost"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Log", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TaskResources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_BuildEngine", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HelpKeywordPrefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_HostObject", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskHost"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TaskResources", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.Field({Static:false, Public:false}, "buildEngine", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"));

    $.Field({Static:false, Public:false}, "hostObject", $asm00.TypeRef("Microsoft.Build.Framework.ITaskHost"));

    $.Field({Static:false, Public:false}, "log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Property({Static:false, Public:true , Virtual:true }, "BuildEngine", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"));

    $.Property({Static:false, Public:true }, "BuildEngine2", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine2"));

    $.Property({Static:false, Public:true }, "BuildEngine3", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine3"));

    $.Property({Static:false, Public:true }, "BuildEngine4", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine4"));

    $.Property({Static:false, Public:true , Virtual:true }, "HostObject", $asm00.TypeRef("Microsoft.Build.Framework.ITaskHost"));

    $.Property({Static:false, Public:true }, "Log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Property({Static:false, Public:false}, "TaskResources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:false, Public:false}, "HelpKeywordPrefix", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Build.Framework.ITask")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.TaskItem */ 

(function TaskItem$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "Microsoft.Build.Utilities.TaskItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Collections.IDictionary")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneCustomMetadata", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyMetadataTo", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ItemSpec", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Metadata", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MetadataCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MetadataNames", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMetadata", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializeLifetimeService", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Build.Framework.ITaskItem2.CloneCustomMetadataEscaped", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionary"))
    )
      .Overrides($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem2"), "CloneCustomMetadataEscaped");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Build.Framework.ITaskItem2.get_EvaluatedIncludeEscaped", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem2"), "get_EvaluatedIncludeEscaped");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Build.Framework.ITaskItem2.GetMetadataValueEscaped", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem2"), "GetMetadataValueEscaped");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Build.Framework.ITaskItem2.set_EvaluatedIncludeEscaped", 
      JSIL.MethodSignature.Action($.String)
    )
      .Overrides($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem2"), "set_EvaluatedIncludeEscaped");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Build.Framework.ITaskItem2.SetMetadataValueLiteral", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Overrides($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem2"), "SetMetadataValueLiteral");

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.String, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveMetadata", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ItemSpec", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Metadata", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetMetadata", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "itemSpec", $.String);

    $.Field({Static:false, Public:false}, "metadata", $asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "fullPath", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ItemSpec", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "Microsoft.Build.Framework.ITaskItem2.EvaluatedIncludeEscaped", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "MetadataNames", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "MetadataCount", $.Int32);

    $.Property({Static:false, Public:false}, "Metadata", $asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.String, $.String]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), 
      /* 1 */ $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem2")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Utilities.TargetDotNetFrameworkVersion */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Utilities.TargetDotNetFrameworkVersion", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Version11: 0, 
    Version20: 1, 
    Version30: 2, 
    Version35: 3, 
    Version40: 4, 
    VersionLatest: 5, 
    Version45: 5, 
  }
);

/* enum Microsoft.Build.Utilities.VisualStudioVersion */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Utilities.VisualStudioVersion", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Version100: 0, 
    VersionLatest: 1, 
    Version110: 1, 
  }
);

/* enum Microsoft.Build.Utilities.DotNetFrameworkArchitecture */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Utilities.DotNetFrameworkArchitecture", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Current: 0, 
    Bitness32: 1, 
    Bitness64: 2, 
  }
);

/* class Microsoft.Build.Utilities.ToolLocationHelper */ 

(function ToolLocationHelper$Members () {
  var $, $thisType;






















































































  JSIL.MakeStaticClass("Microsoft.Build.Utilities.ToolLocationHelper", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AddSDKPath", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddSDKPaths", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ChainReferenceAssemblyPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ClearSDKStaticCache", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ClearStaticCaches", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertDotNetFrameworkArchitectureToProcessorArchitecture", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.DotNetFrameworkArchitecture")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertTargetFrameworkVersionToVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateReferenceAssemblyPathsCache", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtractSdkDiskRootsFromEnvironment", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GatherSDKListFromDirectory", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK"), $asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GatherSDKListFromRegistry", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK"), $asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GatherSDKsFromRegistryImpl", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK"), $asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK")]), $.String, 
          $asm07.TypeRef("Microsoft.Win32.RegistryView"), $asm07.TypeRef("Microsoft.Win32.RegistryHive"), 
          $asm02.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyNames"), $asm02.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue"), 
          $asm02.TypeRef("Microsoft.Build.Shared.OpenBaseKey"), $asm02.TypeRef("Microsoft.Build.Shared.FileExists")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateReferenceAssemblyCacheKey", 
      new JSIL.MethodSignature($.String, [$.String, $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateReferenceAssemblyPath", 
      new JSIL.MethodSignature($.String, [$.String, $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PathToSystem", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAssemblyFoldersExInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("Microsoft.Build.Utilities.AssemblyFoldersExInfo")]), [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Reflection.ProcessorArchitecture")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultSDKDiskRoots", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDisplayNameForTargetFrameworkDirectory", 
      new JSIL.MethodSignature($.String, [$.String, $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDotNetFrameworkRootRegistryKey", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDotNetFrameworkSdkInstallKeyValue", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDotNetFrameworkSdkInstallKeyValue", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), $asm02.TypeRef("Microsoft.Build.Utilities.VisualStudioVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDotNetFrameworkSdkRootRegistryKey", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDotNetFrameworkSdkRootRegistryKey", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), $asm02.TypeRef("Microsoft.Build.Utilities.VisualStudioVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDotNetFrameworkVersionFolderPrefix", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFrameworkIdentifiers", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFrameworkProfiles", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFrameworkVersions", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFx35AndEarlierVersions", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathAndChainReferenceAssemblyLocations", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [
          $.String, $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToDotNetFramework", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToDotNetFramework", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), $asm02.TypeRef("Microsoft.Build.Utilities.DotNetFrameworkArchitecture")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToDotNetFrameworkFile", 
      new JSIL.MethodSignature($.String, [$.String, $asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToDotNetFrameworkFile", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), 
          $asm02.TypeRef("Microsoft.Build.Utilities.DotNetFrameworkArchitecture")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToDotNetFrameworkReferenceAssemblies", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToDotNetFrameworkSdk", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToDotNetFrameworkSdk", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), $asm02.TypeRef("Microsoft.Build.Utilities.VisualStudioVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToDotNetFrameworkSdkFile", 
      new JSIL.MethodSignature($.String, [$.String, $asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToDotNetFrameworkSdkFile", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), 
          $asm02.TypeRef("Microsoft.Build.Utilities.VisualStudioVersion")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToDotNetFrameworkSdkFile", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), 
          $asm02.TypeRef("Microsoft.Build.Utilities.DotNetFrameworkArchitecture")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToDotNetFrameworkSdkFile", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), 
          $asm02.TypeRef("Microsoft.Build.Utilities.VisualStudioVersion"), $asm02.TypeRef("Microsoft.Build.Utilities.DotNetFrameworkArchitecture")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathToDotNetFrameworkSdkFile", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), 
          $asm02.TypeRef("Microsoft.Build.Utilities.VisualStudioVersion"), $asm02.TypeRef("Microsoft.Build.Utilities.DotNetFrameworkArchitecture"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathToDotNetFrameworkSdkFile", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToReferenceAssemblies", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToReferenceAssemblies", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToReferenceAssemblies", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$.String, $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToStandardLibraries", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToStandardLibraries", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToSystemFile", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToWindowsSdk", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), $asm02.TypeRef("Microsoft.Build.Utilities.VisualStudioVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToWindowsSdkFile", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), 
          $asm02.TypeRef("Microsoft.Build.Utilities.VisualStudioVersion")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathToWindowsSdkFile", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), 
          $asm02.TypeRef("Microsoft.Build.Utilities.VisualStudioVersion"), $asm02.TypeRef("Microsoft.Build.Utilities.DotNetFrameworkArchitecture")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathToWindowsSdkFile", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), 
          $asm02.TypeRef("Microsoft.Build.Utilities.VisualStudioVersion"), $asm02.TypeRef("Microsoft.Build.Utilities.DotNetFrameworkArchitecture"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathToWindowsSdkFile", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPlatformExtensionSDKLocation", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm07.TypeRef("System.Version")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPlatformExtensionSDKLocation", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm07.TypeRef("System.Version"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPlatformExtensionSDKLocation", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPlatformExtensionSDKLocation", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPlatformExtensionSDKLocations", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$.String, $asm07.TypeRef("System.Version")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPlatformExtensionSDKLocations", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [
          $jsilcore.TypeRef("System.Array", [$.String]), $.String, 
          $.String, $asm07.TypeRef("System.Version")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPlatformSDKLocation", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Version")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPlatformSDKLocation", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm07.TypeRef("System.Version"), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPlatformSDKLocation", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPlatformSDKLocation", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetProgramFilesReferenceAssemblyRoot", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSDKDesignTimeFolders", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSDKDesignTimeFolders", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSDKRedistFolders", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSDKRedistFolders", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSDKReferenceFolders", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSDKReferenceFolders", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSupportedTargetFrameworks", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTargetPlatformMonikerDiskRoots", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTargetPlatformMonikerRegistryRoots", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTargetPlatformSdks", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTargetPlatformSdks", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK")]), [$jsilcore.TypeRef("System.Array", [$.String]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleLegacy20", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$asm02.TypeRef("Microsoft.Build.Utilities.ToolLocationHelper+VersionToPath")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleLegacy30", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$asm02.TypeRef("Microsoft.Build.Utilities.ToolLocationHelper+VersionToPath"), $asm02.TypeRef("Microsoft.Build.Utilities.ToolLocationHelper+VersionToPath")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleLegacy35", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$asm02.TypeRef("Microsoft.Build.Utilities.ToolLocationHelper+VersionToPath"), $asm02.TypeRef("Microsoft.Build.Utilities.ToolLocationHelper+VersionToPath")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleLegacyDotNetFrameworkReferenceAssemblyPaths", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [
          $asm02.TypeRef("Microsoft.Build.Utilities.ToolLocationHelper+VersionToPath"), $asm02.TypeRef("Microsoft.Build.Utilities.ToolLocationHelper+VersionToPath"), 
          $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "HighestVersionOfTargetFrameworkIdentifier", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemapSdkArchitecture", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveDirectories", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "RetrieveTargetPlatformList", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK")]), [$jsilcore.TypeRef("System.Array", [$.String]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VersionToDotNetFrameworkPath", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.ToolLocationHelper+VersionToPath"), $asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VersionToDotNetReferenceAssemblies", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.ToolLocationHelper+VersionToPath"), $asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion")])
    );

    $.Field({Static:true , Public:false}, "dotnet40ReferenceAssemblyPath", $.String);

    $.Field({Static:true , Public:false}, "dotnet45ReferenceAssemblyPath", $.String);

    $.Field({Static:true , Public:false}, "chainedReferenceAssemblyPath", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:true , Public:false}, "locker", $.Object);

    $.Field({Static:true , Public:false}, "cachedReferenceAssemblyPaths", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String])]));

    $.Field({Static:true , Public:false}, "cachedHighestFrameworkNameForTargetFrameworkIdentifier", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")]));

    $.Field({Static:true , Public:false}, "cachedTargetPlatforms", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK")])]));

    $.Field({Static:true , Public:false}, "cachedTargetFrameworkDisplayNames", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:true , Public:false}, "targetFrameworkMonikers", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), null);

    $.Field({Static:true , Public:false, ReadOnly:true }, "dotNetFrameworkVersion11", $asm07.TypeRef("System.Version"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "dotNetFrameworkVersion20", $asm07.TypeRef("System.Version"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "dotNetFrameworkVersion30", $asm07.TypeRef("System.Version"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "dotNetFrameworkVersion35", $asm07.TypeRef("System.Version"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "dotNetFrameworkVersion40", $asm07.TypeRef("System.Version"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "dotNetFrameworkVersion45", $asm07.TypeRef("System.Version"));

    $.Constant({Static:true , Public:false}, "dotNetFrameworkIdentifier", $.String, ".NETFramework");

    $.Constant({Static:true , Public:false}, "retailConfigurationName", $.String, "Retail");

    $.Constant({Static:true , Public:false}, "neutralArchitectureName", $.String, "Neutral");

    $.Constant({Static:true , Public:false}, "commonConfigurationFolderName", $.String, "CommonConfiguration");

    $.Constant({Static:true , Public:false}, "redistFolderName", $.String, "Redist");

    $.Constant({Static:true , Public:false}, "referencesFolderName", $.String, "References");

    $.Constant({Static:true , Public:false}, "designTimeFolderName", $.String, "DesignTime");

    $.Constant({Static:true , Public:false}, "subsetListFolder", $.String, "SubsetList");

    $.Constant({Static:true , Public:false}, "subsetPattern", $.String, "*.xml");

    $.Constant({Static:true , Public:false}, "subsetExtension", $.String, ".xml");

    $.Constant({Static:true , Public:false}, "redistListFile", $.String, "FrameworkList.xml");

    $.Constant({Static:true , Public:false}, "redistListFolder", $.String, "RedistList");

    $.Constant({Static:true , Public:false}, "subTypeFolder", $.String, "SubType");

    $.Constant({Static:true , Public:false}, "frameworkReferenceRootPath", $.String, "Reference Assemblies\\Microsoft\\Framework");

    $.Field({Static:true , Public:false, ReadOnly:true }, "dotNetFourFrameworkName", $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "dotNetFourFiveFrameworkName", $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "diskRootSplitChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:true , Public:true }, "PathToSystem", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Build.Utilities.ToolLocationHelper+VersionToPath */ 

JSIL.MakeDelegate("Microsoft.Build.Utilities.ToolLocationHelper+VersionToPath", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.String"), [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion")]));

/* class Microsoft.Build.Utilities.ToolLocationHelper+VersionComparer */ 

(function VersionComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.ToolLocationHelper+VersionComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.ToolLocationHelper+<>c__DisplayClass35_0 */ 

(function $l$gc__DisplayClass35_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.ToolLocationHelper+<>c__DisplayClass35_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetPlatformExtensionSDKLocations$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK")])
    );

    $.Field({Static:false, Public:true }, "targetPlatformIdentifier", $.String);

    $.Field({Static:false, Public:true }, "targetPlatformVersion", $asm07.TypeRef("System.Version"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Utilities.ToolLocationHelper+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.ToolLocationHelper+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lExtractSdkDiskRootsFromEnvironment$gb__90_0", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "$lExtractSdkDiskRootsFromEnvironment$gb__90_1", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGatherSDKListFromDirectory$gb__86_0", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.IO.DirectoryInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetPlatformExtensionSDKLocation$gb__37_1", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetPlatformExtensionSDKLocations$gb__35_1", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetTargetPlatformSdks$gb__48_0", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__35_1", $asm07.TypeRef("System.Func`2", [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK"), $asm07.TypeRef("System.Version")]));

    $.Field({Static:true , Public:true }, "$l$g9__37_1", $asm07.TypeRef("System.Func`2", [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK"), $asm07.TypeRef("System.Version")]));

    $.Field({Static:true , Public:true }, "$l$g9__48_0", $asm07.TypeRef("System.Func`2", [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK"), $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__86_0", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.IO.DirectoryInfo"), $.String]));

    $.Field({Static:true , Public:true }, "$l$g9__90_0", $asm07.TypeRef("System.Action`1", [$.String]));

    $.Field({Static:true , Public:true }, "$l$g9__90_1", $asm07.TypeRef("System.Predicate`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Utilities.ToolLocationHelper+<>c__DisplayClass37_0 */ 

(function $l$gc__DisplayClass37_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.ToolLocationHelper+<>c__DisplayClass37_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetPlatformExtensionSDKLocation$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK")])
    );

    $.Field({Static:false, Public:true }, "targetPlatformIdentifier", $.String);

    $.Field({Static:false, Public:true }, "targetPlatformVersion", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:true }, "sdkMoniker", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Utilities.ToolLocationHelper+<>c__DisplayClass50_0 */ 

(function $l$gc__DisplayClass50_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.ToolLocationHelper+<>c__DisplayClass50_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetPlatformSDKLocation$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetPlatformSDK")])
    );

    $.Field({Static:false, Public:true }, "targetPlatformIdentifier", $.String);

    $.Field({Static:false, Public:true }, "targetPlatformVersion", $asm07.TypeRef("System.Version"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* enum Microsoft.Build.Utilities.HostObjectInitializationStatus */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Utilities.HostObjectInitializationStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    UseHostObjectToExecute: 0, 
    UseAlternateToolToExecute: 1, 
    NoActionReturnSuccess: 2, 
    NoActionReturnFailure: 3, 
  }
);

/* class Microsoft.Build.Utilities.ToolTask */ 

(function ToolTask$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm07.System.String))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Threading.ManualResetEvent)) ();
  };















  function ToolTask_get_EchoOff () {
    return this.ToolTask$EchoOff$value;
  }; 


  function ToolTask_get_EnvironmentVariables () {
    return this.ToolTask$EnvironmentVariables$value;
  }; 















  function ToolTask_get_TaskProcessTerminationTimeout () {
    return this.ToolTask$TaskProcessTerminationTimeout$value;
  }; 


  function ToolTask_get_ToolCanceled () {
    return this.ToolTask$ToolCanceled$value;
  }; 




  function ToolTask_get_UseCommandProcessor () {
    return this.ToolTask$UseCommandProcessor$value;
  }; 

  function ToolTask_get_YieldDuringToolExecution () {
    return this.ToolTask$YieldDuringToolExecution$value;
  }; 























  function ToolTask_set_EchoOff (value) {
    this.ToolTask$EchoOff$value = value;
  }; 

  function ToolTask_set_EnvironmentVariables (value) {
    this.ToolTask$EnvironmentVariables$value = value;
  }; 




  function ToolTask_set_TaskProcessTerminationTimeout (value) {
    this.ToolTask$TaskProcessTerminationTimeout$value = (value | 0);
  }; 


  function ToolTask_set_ToolCanceled (value) {
    this.ToolTask$ToolCanceled$value = value;
  }; 



  function ToolTask_set_UseCommandProcessor (value) {
    this.ToolTask$UseCommandProcessor$value = value;
  }; 

  function ToolTask_set_YieldDuringToolExecution (value) {
    this.ToolTask$YieldDuringToolExecution$value = value;
  }; 





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Build.Utilities.Task"), 
      Name: "Microsoft.Build.Utilities.ToolTask", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Resources.ResourceManager"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssignStandardStreamLoggingImportance", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CallHostObjectToExecute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Cancel", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputePathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "DeleteTempFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteTool", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateCommandLineCommands", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateFullPathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateResponseFileCommands", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true }, "get_EchoOff", 
      JSIL.MethodSignature.Return($.Boolean), 
      ToolTask_get_EchoOff
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EnvironmentOverride", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Specialized.StringDictionary"))
    );

    $.Method({Static:false, Public:true }, "get_EnvironmentVariables", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String])), 
      ToolTask_get_EnvironmentVariables
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ExitCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasLoggedErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LogPrivate", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LogShared", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogStandardErrorAsError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ResponseFileEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_StandardErrorEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StandardErrorImportance", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StandardErrorImportanceToUse", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_StandardErrorLoggingImportance", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_StandardOutputEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StandardOutputImportance", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StandardOutputImportanceToUse", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_StandardOutputLoggingImportance", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"))
    );

    $.Method({Static:false, Public:false}, "get_TaskProcessTerminationTimeout", 
      JSIL.MethodSignature.Return($.Int32), 
      ToolTask_get_TaskProcessTerminationTimeout
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Timeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Method({Static:false, Public:false}, "get_ToolCanceled", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.ManualResetEvent")), 
      ToolTask_get_ToolCanceled
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ToolExe", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ToolPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true }, "get_UseCommandProcessor", 
      JSIL.MethodSignature.Return($.Boolean), 
      ToolTask_get_UseCommandProcessor
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_YieldDuringToolExecution", 
      JSIL.MethodSignature.Return($.Boolean), 
      ToolTask_get_YieldDuringToolExecution
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetErrorMessageWithDiagnosticsCheck", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProcessStartInfo", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Diagnostics.ProcessStartInfo"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetResponseFileSwitch", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTemporaryResponseFile", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWorkingDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HandleTaskExecutionErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleToolNotifications", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Diagnostics.Process"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeHostObject", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Build.Utilities.HostObjectInitializationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "KillToolProcessOnTimeout", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Diagnostics.Process"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogEnvironmentVariable", 
      new JSIL.MethodSignature($.Boolean, [
          $.Boolean, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LogEventsFromTextOutput", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogMessagesFromStandardError", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LogMessagesFromStandardErrorOrOutput", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Queue"), $asm07.TypeRef("System.Threading.ManualResetEvent"), 
          $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"), $asm02.TypeRef("Microsoft.Build.Utilities.ToolTask+StandardOutputOrErrorQueueType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogMessagesFromStandardOutput", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LogPathToTool", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LogToolCommand", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReceiveExitNotification", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReceiveStandardErrorData", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.Diagnostics.DataReceivedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReceiveStandardErrorOrOutputData", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.DataReceivedEventArgs"), $asm07.TypeRef("System.Collections.Queue"), 
          $asm07.TypeRef("System.Threading.ManualResetEvent")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReceiveStandardOutputData", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.Diagnostics.DataReceivedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReceiveTimeoutNotification", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResponseFileEscape", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Method({Static:false, Public:true }, "set_EchoOff", 
      JSIL.MethodSignature.Action($.Boolean), 
      ToolTask_set_EchoOff
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_EnvironmentVariables", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String])), 
      ToolTask_set_EnvironmentVariables
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_LogStandardErrorAsError", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StandardErrorImportance", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StandardOutputImportance", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:false}, "set_TaskProcessTerminationTimeout", 
      JSIL.MethodSignature.Action($.Int32), 
      ToolTask_set_TaskProcessTerminationTimeout
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Method({Static:false, Public:false}, "set_ToolCanceled", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.ManualResetEvent")), 
      ToolTask_set_ToolCanceled
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ToolExe", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ToolPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:true }, "set_UseCommandProcessor", 
      JSIL.MethodSignature.Action($.Boolean), 
      ToolTask_set_UseCommandProcessor
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_YieldDuringToolExecution", 
      JSIL.MethodSignature.Action($.Boolean), 
      ToolTask_set_YieldDuringToolExecution
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SkipTaskExecution", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TerminateToolProcess", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Diagnostics.Process"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitForProcessExit", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Diagnostics.Process"))
    );

    $.Field({Static:false, Public:false}, "ToolTask$YieldDuringToolExecution$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ToolTask$UseCommandProcessor$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ToolTask$EchoOff$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ToolTask$TaskProcessTerminationTimeout$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ToolTask$ToolCanceled$value", $asm07.TypeRef("System.Threading.ManualResetEvent"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "exitCode", $.Int32);

    $.Field({Static:false, Public:false}, "temporaryBatchFile", $.String);

    $.Field({Static:false, Public:false}, "ToolTask$EnvironmentVariables$value", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "toolPath", $.String);

    $.Field({Static:false, Public:false}, "timeout", $.Int32);

    $.Field({Static:false, Public:false}, "logPrivate", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Field({Static:false, Public:false}, "logShared", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Field({Static:false, Public:false}, "eventCloseLock", $.Object);

    $.Field({Static:true , Public:false}, "equalsSplitter", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "standardOutputImportance", $.String);

    $.Field({Static:false, Public:false}, "standardErrorImportance", $.String);

    $.Field({Static:false, Public:false}, "logStandardErrorAsError", $.Boolean);

    $.Field({Static:false, Public:false}, "standardOutputImportanceToUse", $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"));

    $.Field({Static:false, Public:false}, "standardErrorImportanceToUse", $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"));

    $.Field({Static:false, Public:false}, "standardErrorData", $asm07.TypeRef("System.Collections.Queue"));

    $.Field({Static:false, Public:false}, "standardOutputData", $asm07.TypeRef("System.Collections.Queue"));

    $.Field({Static:false, Public:false}, "standardErrorDataAvailable", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "standardOutputDataAvailable", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "toolExited", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "terminatedTool", $.Boolean);

    $.Field({Static:false, Public:false}, "toolTimeoutExpired", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "toolTimer", $asm07.TypeRef("System.Threading.Timer"));

    $.Field({Static:false, Public:false}, "toolExe", $.String);

    $.Field({Static:false, Public:false}, "eventsDisposed", $.Boolean);

    $.Field({Static:false, Public:false}, "environmentVariablePairs", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Object, $.Object])]));

    $.Property({Static:false, Public:true }, "ExitCode", $.Int32)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "YieldDuringToolExecution", $.Boolean);

    $.Property({Static:false, Public:true }, "UseCommandProcessor", $.Boolean);

    $.Property({Static:false, Public:true }, "EchoOff", $.Boolean);

    $.Property({Static:false, Public:false}, "TaskProcessTerminationTimeout", $.Int32);

    $.Property({Static:false, Public:false}, "ToolCanceled", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Property({Static:false, Public:false, Virtual:true }, "ToolName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ToolExe", $.String);

    $.Property({Static:false, Public:true }, "ToolPath", $.String);

    $.Property({Static:false, Public:true }, "EnvironmentVariables", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Timeout", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "ResponseFileEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false, Virtual:true }, "StandardOutputEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false, Virtual:true }, "StandardErrorEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false, Virtual:true }, "EnvironmentOverride", $asm0A.TypeRef("System.Collections.Specialized.StringDictionary"))
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Use EnvironmentVariables property"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "StandardErrorLoggingImportance", $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasLoggedErrors", $.Boolean);

    $.Property({Static:false, Public:true }, "StandardOutputImportance", $.String);

    $.Property({Static:false, Public:true }, "StandardErrorImportance", $.String);

    $.Property({Static:false, Public:true }, "LogStandardErrorAsError", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "StandardOutputLoggingImportance", $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"));

    $.Property({Static:false, Public:false}, "StandardOutputImportanceToUse", $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"));

    $.Property({Static:false, Public:false}, "StandardErrorImportanceToUse", $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"));

    $.Property({Static:false, Public:false}, "LogPrivate", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Property({Static:false, Public:false}, "LogShared", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("Microsoft.Build.Framework.ICancelableTask")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Utilities.ToolTask+StandardOutputOrErrorQueueType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Utilities.ToolTask+StandardOutputOrErrorQueueType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    StandardError: 0, 
    StandardOutput: 1, 
  }
);

/* class Microsoft.Build.Utilities.CanonicalTrackedInputFiles */ 

(function CanonicalTrackedInputFiles$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.CanonicalTrackedInputFiles", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $asm02.TypeRef("Microsoft.Build.Utilities.CanonicalTrackedOutputFiles"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm02.TypeRef("Microsoft.Build.Utilities.CanonicalTrackedOutputFiles"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITask"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $asm02.TypeRef("Microsoft.Build.Utilities.CanonicalTrackedOutputFiles"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITask"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITask"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $asm02.TypeRef("Microsoft.Build.Utilities.CanonicalTrackedOutputFiles"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfSourceNeedsCompilation", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Concurrent.ConcurrentQueue`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.Boolean, 
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareTaskItems", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ComputeSourcesNeedingCompilation", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ComputeSourcesNeedingCompilation", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeSourcesNeedingCompilationFromCompositeRootingMarker", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeSourcesNeedingCompilationFromPrimaryFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructDependencyTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "FileIsExcludedFromDependencyCheck", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FilesExistAndRecordNewestWriteTime", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DependencyTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SourcesNeedingCompilation", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalConstruct", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITask"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm02.TypeRef("Microsoft.Build.Utilities.CanonicalTrackedOutputFiles"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsUpToDate", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveDependenciesFromEntryIfMissing", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveDependenciesFromEntryIfMissing", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveDependenciesFromEntryIfMissing", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveDependenciesFromEntryIfMissing", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependenciesFromEntryIfMissing", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveDependencyFromEntry", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveDependencyFromEntry", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependencyFromEntry", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveEntriesForSource", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveEntriesForSource", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveEntryForSourceRoot", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveTlog", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveTlog", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Build.Utilities.DependencyFilter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SourcesNeedingCompilation", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SourceDependenciesForOutputRoot", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
        ])
    );

    $.Field({Static:false, Public:false}, "outputNewestTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "outputNewest", $.String);

    $.Field({Static:false, Public:false}, "dependencyTable", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])]));

    $.Field({Static:false, Public:false}, "tlogFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "sourceFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "Log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Field({Static:false, Public:false}, "sourcesNeedingCompilation", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "outputs", $asm02.TypeRef("Microsoft.Build.Utilities.CanonicalTrackedOutputFiles"));

    $.Field({Static:false, Public:false}, "outputFileGroup", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "outputFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "useMinimalRebuildOptimization", $.Boolean);

    $.Field({Static:false, Public:false}, "tlogAvailable", $.Boolean);

    $.Field({Static:false, Public:false}, "maintainCompositeRootingMarkers", $.Boolean);

    $.Field({Static:false, Public:false}, "excludedInputPaths", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]));

    $.Field({Static:false, Public:false}, "lastWriteTimeCache", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:false}, "SourcesNeedingCompilation", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "DependencyTable", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.CanonicalTrackedInputFiles+<>c__DisplayClass28_0 */ 

(function $l$gc__DisplayClass28_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.CanonicalTrackedInputFiles+<>c__DisplayClass28_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lComputeSourcesNeedingCompilationFromPrimaryFiles$gb__0", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:true }, "sourcesNeedingCompilationList", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentQueue`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:true }, "allOutputFilesExist", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm02.TypeRef("Microsoft.Build.Utilities.CanonicalTrackedInputFiles"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Utilities.DependencyTableCache */ 

(function DependencyTableCache$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.Build.Utilities.DependencyTableCache", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DependencyTableIsUpToDate", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Build.Utilities.DependencyTableCacheEntry")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatNormalizedTlogRootingMarker", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DependencyTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm02.TypeRef("Microsoft.Build.Utilities.DependencyTableCacheEntry")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCachedEntry", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Utilities.DependencyTableCacheEntry"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NormalizeTlogPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false}, "dependencyTableCache", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm02.TypeRef("Microsoft.Build.Utilities.DependencyTableCacheEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "numerals", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false}, "taskItemComparer", $asm02.TypeRef("Microsoft.Build.Utilities.DependencyTableCache+TaskItemItemSpecIgnoreCaseComparer"));

    $.Property({Static:true , Public:false}, "DependencyTable", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm02.TypeRef("Microsoft.Build.Utilities.DependencyTableCacheEntry")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.DependencyTableCache+TaskItemItemSpecIgnoreCaseComparer */ 

(function TaskItemItemSpecIgnoreCaseComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.DependencyTableCache+TaskItemItemSpecIgnoreCaseComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.DependencyTableCacheEntry */ 

(function DependencyTableCacheEntry$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.DependencyTableCacheEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm07.TypeRef("System.Collections.IDictionary")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DependencyTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TableTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TlogFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Field({Static:false, Public:false}, "tlogFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "tableTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "dependencyTable", $asm07.TypeRef("System.Collections.IDictionary"));

    $.Property({Static:false, Public:true }, "TlogFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "TableTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "DependencyTable", $asm07.TypeRef("System.Collections.IDictionary"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.FlatTrackingData */ 

(function FlatTrackingData$Members () {
  var $, $thisType;















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.FlatTrackingData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $asm07.TypeRef("System.DateTime"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm07.TypeRef("System.DateTime")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITask"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITask"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructFileTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "FileIsExcludedFromDependencyCheck", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FinalizeTLogs", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DependencyTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MissingFiles", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewestFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewestFileTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewestFileTimeUtc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewestTLogFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewestTLogTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewestTLogTimeUtc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OldestFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OldestFileTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OldestFileTimeUtc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SkipMissingFiles", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TlogFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TlogsAvailable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TreatRootMarkersAsEntries", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLastWriteTimeUtc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalConstruct", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITask"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.Boolean, 
          $asm07.TypeRef("System.DateTime"), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsUpToDate", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("Microsoft.Build.Utilities.Task"), $asm02.TypeRef("Microsoft.Build.Utilities.UpToDateCheckType"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsUpToDate", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $asm02.TypeRef("Microsoft.Build.Utilities.UpToDateCheckType"), 
          $.Type, $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordEntryDetails", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveTlog", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveTlog", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Build.Utilities.DependencyFilter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MissingFiles", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewestFileName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewestFileTime", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewestFileTimeUtc", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewestTLogFileName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewestTLogTime", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewestTLogTimeUtc", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OldestFileName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OldestFileTime", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OldestFileTimeUtc", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SkipMissingFiles", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TlogFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TlogsAvailable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TreatRootMarkersAsEntries", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "UpdateFileEntryDetails", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "MaxLogCount", $.Int32, 100);

    $.Field({Static:false, Public:false}, "dependencyTable", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm07.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "tlogFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "tlogMarker", $.String);

    $.Field({Static:false, Public:false}, "Log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Field({Static:false, Public:false}, "tlogsAvailable", $.Boolean);

    $.Field({Static:false, Public:false}, "oldestFileName", $.String);

    $.Field({Static:false, Public:false}, "oldestFileTimeUtc", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "newestFileName", $.String);

    $.Field({Static:false, Public:false}, "newestFileTimeUtc", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "treatRootMarkersAsEntries", $.Boolean);

    $.Field({Static:false, Public:false}, "skipMissingFiles", $.Boolean);

    $.Field({Static:false, Public:false}, "missingFileTimeUtc", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "missingFiles", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "newestTLogTimeUtc", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "newestTLogFileName", $.String);

    $.Field({Static:false, Public:false}, "lastWriteTimeUtcCache", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm07.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "excludedInputPaths", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Property({Static:false, Public:true }, "DependencyTable", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm07.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "MissingFiles", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Property({Static:false, Public:true }, "OldestFileName", $.String);

    $.Property({Static:false, Public:true }, "OldestFileTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "OldestFileTimeUtc", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "NewestFileName", $.String);

    $.Property({Static:false, Public:true }, "NewestFileTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "NewestFileTimeUtc", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "TreatRootMarkersAsEntries", $.Boolean);

    $.Property({Static:false, Public:true }, "SkipMissingFiles", $.Boolean);

    $.Property({Static:false, Public:true }, "TlogFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "NewestTLogTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "NewestTLogTimeUtc", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "NewestTLogFileName", $.String);

    $.Property({Static:false, Public:true }, "TlogsAvailable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.FlatTrackingData+<>c__DisplayClass78_0 */ 

(function $l$gc__DisplayClass78_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.FlatTrackingData+<>c__DisplayClass78_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFinalizeTLogs$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFinalizeTLogs$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:true }, "trackedFilesToRemove", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* enum Microsoft.Build.Utilities.UpToDateCheckType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Utilities.UpToDateCheckType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    InputNewerThanOutput: 0, 
    InputOrOutputNewerThanTracking: 1, 
    InputNewerThanTracking: 2, 
  }
);

/* class Microsoft.Build.Utilities.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Build.Utilities.NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "GetFileAttributesEx", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("Microsoft.Build.Utilities.WIN32_FILE_ATTRIBUTE_DATA")])
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLastWriteTimeUtc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.String])
    );

    $.Constant({Static:true , Public:false}, "MAX_PATH", $.Int32, 260);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Utilities.WIN32_FILE_ATTRIBUTE_DATA */ 

(function WIN32_FILE_ATTRIBUTE_DATA$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Utilities.WIN32_FILE_ATTRIBUTE_DATA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "fileAttributes", $.Int32);

    $.Field({Static:false, Public:false}, "ftCreationTimeLow", $.UInt32);

    $.Field({Static:false, Public:false}, "ftCreationTimeHigh", $.UInt32);

    $.Field({Static:false, Public:false}, "ftLastAccessTimeLow", $.UInt32);

    $.Field({Static:false, Public:false}, "ftLastAccessTimeHigh", $.UInt32);

    $.Field({Static:false, Public:false}, "ftLastWriteTimeLow", $.UInt32);

    $.Field({Static:false, Public:false}, "ftLastWriteTimeHigh", $.UInt32);

    $.Field({Static:false, Public:false}, "fileSizeHigh", $.UInt32);

    $.Field({Static:false, Public:false}, "fileSizeLow", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Utilities.ExecutableType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Utilities.ExecutableType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Native32Bit: 0, 
    Native64Bit: 1, 
    ManagedIL: 2, 
    Managed32Bit: 3, 
    Managed64Bit: 4, 
    SameAsCurrentProcess: 5, 
  }
);

/* class Microsoft.Build.Utilities.FileTracker */ 

(function FileTracker$Members () {
  var $, $thisType;










































  JSIL.MakeStaticClass("Microsoft.Build.Utilities.FileTracker", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CreateRootingMarkerResponseFile", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRootingMarkerResponseFile", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "EndTrackingContext", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "EnsureFileTrackerOnPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "EnsureFileTrackerOnPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileIsExcludedFromDependencies", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileIsUnderPath", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindTrackerOnPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "ForceOutOfProcTracking", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Build.Utilities.ExecutableType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForceOutOfProcTracking", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("Microsoft.Build.Utilities.ExecutableType"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FormatRootingMarker", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FormatRootingMarker", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FormatRootingMarker", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "FormatRootingMarker", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFileTrackerPath", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.ExecutableType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFileTrackerPath", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.ExecutableType"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPath", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm02.TypeRef("Microsoft.Build.Utilities.ExecutableType"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPath", 
      new JSIL.MethodSignature($.String, [$.String, $asm02.TypeRef("Microsoft.Build.Utilities.DotNetFrameworkArchitecture")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTrackerPath", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.ExecutableType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTrackerPath", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.ExecutableType"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogMessage", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(3, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "LogMessageFromResources", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(3, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "LogWarningWithCodeFromResources", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ResumeTracking", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "SetThreadCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "StartProcess", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Diagnostics.Process"), [
          $.String, $.String, 
          $asm02.TypeRef("Microsoft.Build.Utilities.ExecutableType"), $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StartProcess", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Diagnostics.Process"), [
          $.String, $.String, 
          $asm02.TypeRef("Microsoft.Build.Utilities.ExecutableType"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StartProcess", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Diagnostics.Process"), [
          $.String, $.String, 
          $asm02.TypeRef("Microsoft.Build.Utilities.ExecutableType"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StartProcess", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Diagnostics.Process"), [
          $.String, $.String, 
          $asm02.TypeRef("Microsoft.Build.Utilities.ExecutableType"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StartProcess", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Diagnostics.Process"), [
          $.String, $.String, 
          $asm02.TypeRef("Microsoft.Build.Utilities.ExecutableType")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StartTrackingContext", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "StartTrackingContextWithRoot", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StopTrackingAndCleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "SuspendTracking", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "TrackerArguments", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrackerArguments", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrackerCommandArguments", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrackerResponseFileArguments", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrackerResponseFileArguments", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteAllTLogs", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteContextTLogs", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:true , Public:false}, "s_tempPath", $.String);

    $.Field({Static:true , Public:false}, "s_tempShortPath", $.String);

    $.Field({Static:true , Public:false}, "s_tempLongPath", $.String);

    $.Field({Static:true , Public:false}, "s_applicationDataPath", $.String);

    $.Field({Static:true , Public:false}, "s_localApplicationDataPath", $.String);

    $.Field({Static:true , Public:false}, "s_localLowApplicationDataPath", $.String);

    $.Field({Static:true , Public:false}, "s_commonApplicationDataPaths", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:true , Public:false}, "s_TrackerFilename", $.String, "Tracker.exe");

    $.Field({Static:true , Public:false}, "s_FileTrackerFilename", $.String, "FileTracker.dll");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.FileTracker+<>c__DisplayClass19_0 */ 

(function $l$gc__DisplayClass19_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.FileTracker+<>c__DisplayClass19_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFileIsExcludedFromDependencies$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:true }, "fileName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* delegate Microsoft.Build.Utilities.DependencyFilter */ 

JSIL.MakeDelegate("Microsoft.Build.Utilities.DependencyFilter", true, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.String")]));

/* class Microsoft.Build.Utilities.CanonicalTrackedOutputFiles */ 

(function CanonicalTrackedOutputFiles$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Utilities.CanonicalTrackedOutputFiles", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.ITask"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITask"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddComputedOutputForSourceRoot", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddComputedOutputsForSourceRoot", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddComputedOutputsForSourceRoot", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOutput", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.DateTime")]), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructOutputTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DependencyTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.DateTime")])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSourceKeyOutputs", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.DateTime")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalConstruct", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITask"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "OutputsForNonCompositeSource", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    )
      .Parameter(0, "sources", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "OutputsForSource", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    )
      .Parameter(0, "sources", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "OutputsForSource", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputsForSourceRoot", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveDependenciesFromEntryIfMissing", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveDependenciesFromEntryIfMissing", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveDependenciesFromEntryIfMissing", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveDependenciesFromEntryIfMissing", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependenciesFromEntryIfMissing", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveDependencyFromEntry", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveDependencyFromEntry", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependencyFromEntry", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveEntriesForSource", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveEntriesForSource", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveEntriesForSource", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveEntriesForSource", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveOutputForSourceRoot", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveRootsWithSharedOutputs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RootContainsAllSubRootComponents", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveTlog", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveTlog", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Build.Utilities.DependencyFilter"))
    );

    $.Field({Static:false, Public:false}, "dependencyTable", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.DateTime")])]));

    $.Field({Static:false, Public:false}, "tlogFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "Log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Field({Static:false, Public:false}, "tlogAvailable", $.Boolean);

    $.Property({Static:false, Public:true }, "DependencyTable", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.DateTime")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.TrackedDependencies */ 

(function TrackedDependencies$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Build.Utilities.TrackedDependencies", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ExpandWildcards", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ItemsExist", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Utilities.CanonicalTrackedFilesHelper */ 

(function CanonicalTrackedFilesHelper$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("Microsoft.Build.Utilities.CanonicalTrackedFilesHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FilesExistAndRecordNewestWriteTime", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FilesExistAndRecordOldestWriteTime", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FilesExistAndRecordRequestedWriteTime", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RootContainsAllSubRootComponents", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.Constant({Static:true , Public:false}, "MaxLogCount", $.Int32, 100);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Build.Collections");
/* class Microsoft.Build.Collections.CopyOnWriteDictionary`2 */ 

(function CopyOnWriteDictionary$b2$Members () {
  var $, $thisType;














































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.CopyOnWriteDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("K")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("K")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Comparer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("K")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Dummy", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDummy", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("V"), [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("K")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadOperation", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
            $.GenericParameter("K"), $.GenericParameter("V"), 
            $.GenericParameter("K"), $.GenericParameter("V")
          ]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("V")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteOperation", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
            $.GenericParameter("K"), $.GenericParameter("V"), 
            $.GenericParameter("K"), $.GenericParameter("V")
          ]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "HasSameBacking", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_IsFixedSize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Values");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionaryEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("V")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "keyComparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("K")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "capacity", $.Int32);

    $.Field({Static:true , Public:false}, "dummy", $asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]));

    $.Field({Static:false, Public:false}, "backing", $asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
          $.GenericParameter("K"), $.GenericParameter("V"), 
          $.GenericParameter("K"), $.GenericParameter("V")
        ]));

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("K")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("V")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.GenericProperty({Static:true , Public:false}, "Dummy", $asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]));

    $.Property({Static:false, Public:false}, "IsDummy", $.Boolean);

    $.Property({Static:false, Public:false}, "Comparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("K")]));

    $.Property({Static:false, Public:false}, "ReadOperation", $asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
          $.GenericParameter("K"), $.GenericParameter("V"), 
          $.GenericParameter("K"), $.GenericParameter("V")
        ]));

    $.Property({Static:false, Public:false}, "WriteOperation", $asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
          $.GenericParameter("K"), $.GenericParameter("V"), 
          $.GenericParameter("K"), $.GenericParameter("V")
        ]));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("V"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), 
      /* 3 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IDictionary"), 
      /* 5 */ $asm07.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Build.Collections.HybridDictionary`2 */ 

(function HybridDictionary$b2$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.HybridDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Build.Collections.HybridDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToOrUpdateList", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), $.GenericParameter("TKey"), 
          $.GenericParameter("TValue"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Comparer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Values");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionaryEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "MaxListSize", $.Int32);

    $.Field({Static:false, Public:false}, "store", $.Object);

    $.Field({Static:false, Public:false}, "comparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:true }, "Comparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 3 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IDictionary"), 
      /* 5 */ $asm07.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct Microsoft.Build.Collections.HybridDictionary`2+SingleEnumerator */ 

(function SingleEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Collections.HybridDictionary`2+SingleEnumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false}, "value", $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Field({Static:false, Public:false}, "enumerationComplete", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Collections.HybridDictionary`2+SingleDictionaryEntryEnumerator */ 

(function SingleDictionaryEntryEnumerator$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Collections.HybridDictionary`2+SingleDictionaryEntryEnumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.DictionaryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Entry", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.DictionaryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "value", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.Field({Static:false, Public:false}, "enumerationComplete", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Entry", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IDictionaryEnumerator"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Collections.HybridDictionary`2+ListDictionaryEntryEnumerator`2 */ 

(function ListDictionaryEntryEnumerator$b2$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Collections.HybridDictionary`2+ListDictionaryEntryEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue", "KK", "VV"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("KK"), $.GenericParameter("VV")])])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Entry", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.DictionaryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "enumerator", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("KK"), $.GenericParameter("VV")])]));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Entry", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IDictionaryEnumerator"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2 */ 

(function CopyOnWriteBackingDictionary$b2$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Build.Collections.HybridDictionary`2", [new JSIL.GenericParameter("K1", "Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2"), new JSIL.GenericParameter("V1", "Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2")]), 
      Name: "Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V", "K1", "V1"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("K1")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
            $.GenericParameter("K"), $.GenericParameter("V"), 
            $.GenericParameter("K1"), $.GenericParameter("V1")
          ])])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRef", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "CloneForWriteIfNecessary", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
            $.GenericParameter("K"), $.GenericParameter("V"), 
            $.GenericParameter("K1"), $.GenericParameter("V1")
          ]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasNoClones", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ReadOnlyEmptyInstance", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
            $.GenericParameter("K"), $.GenericParameter("V"), 
            $.GenericParameter("K1"), $.GenericParameter("V1")
          ]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDeserialized", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.Serialization.StreamingContext"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.Serialization.OnDeserializedAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "readOnlyEmptyDictionary", $asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
          $.GenericParameter("K"), $.GenericParameter("V"), 
          $.GenericParameter("K1"), $.GenericParameter("V1")
        ]));

    $.Field({Static:false, Public:false}, "refCount", $.Int32);

    $.GenericProperty({Static:true , Public:true }, "ReadOnlyEmptyInstance", $asm02.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
          $.GenericParameter("K"), $.GenericParameter("V"), 
          $.GenericParameter("K1"), $.GenericParameter("V1")
        ]));

    $.Property({Static:false, Public:true }, "HasNoClones", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Build.Collections.IKeyed */ 

JSIL.MakeInterface(
  "Microsoft.Build.Collections.IKeyed", false, [], function ($) {
    $.Method({}, "get_Key", JSIL.MethodSignature.Return($.String));
    $.Property({}, "Key");
  }, []);

/* class Microsoft.Build.Collections.MSBuildNameIgnoreCaseComparer */ 

(function MSBuildNameIgnoreCaseComparer$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Generic.EqualityComparer`1", [$asm07.TypeRef("System.String")]), 
      Name: "Microsoft.Build.Collections.MSBuildNameIgnoreCaseComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Build.Collections.IKeyed"), $asm02.TypeRef("Microsoft.Build.Collections.IKeyed")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Default", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Mutable", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("Microsoft.Build.Collections.IKeyed")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValueWithConstraints", 
      new JSIL.MethodSignature("!!0", [
          $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, "!!0"]), $.String, 
          $.Int32, $.Int32
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveConstraintsForUnitTestingOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetConstraintsForUnitTestingOnly", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:false}, "immutableComparer", $.Type);

    $.Field({Static:true , Public:false}, "mutableComparer", $.Type);

    $.Field({Static:true , Public:false}, "runningProcessorArchitecture", $.UInt16, 0);

    $.Field({Static:false, Public:false}, "lockObject", $.Object);

    $.Field({Static:false, Public:false}, "constraintString", $.String);

    $.Field({Static:false, Public:false}, "startIndex", $.Int32);

    $.Field({Static:false, Public:false}, "endIndex", $.Int32);

    $.Field({Static:false, Public:false}, "immutable", $.Boolean);

    $.Property({Static:true , Public:false}, "Default", $.Type);

    $.Property({Static:true , Public:false}, "Mutable", $.Type);

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm02.TypeRef("Microsoft.Build.Collections.IKeyed")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Collections.ReadOnlyEmptyCollection`1 */ 

(function ReadOnlyEmptyCollection$b1$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.ReadOnlyEmptyCollection`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyCollection`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm02.Microsoft.Build.Collections.ReadOnlyEmptyCollection$b1_$lGetEnumerator$gd__17.__Type__]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:true , Public:false}, "instance", $asm02.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyCollection`1", [$.GenericParameter("T")]));

    $.GenericProperty({Static:true , Public:true }, "Instance", $asm02.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyCollection`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm07.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Collections.ReadOnlyEmptyCollection`1+<GetEnumerator>d__17 */ 

(function $lGetEnumerator$gd__17$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.ReadOnlyEmptyCollection`1+<GetEnumerator>d__17", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Collections.ReadOnlyEmptyDictionary`2 */ 

(function ReadOnlyEmptyDictionary$b2$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.ReadOnlyEmptyDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("V"), [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("K")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("V")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Values");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionaryEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("V")])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "backing", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]));

    $.Field({Static:true , Public:false}, "instance", $asm02.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]));

    $.GenericProperty({Static:true , Public:true }, "Instance", $asm02.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("K")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("V")]));

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("V"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), 
      /* 3 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IDictionary"), 
      /* 5 */ $asm07.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Build.Collections.ReadOnlyEmptyList`1 */ 

(function ReadOnlyEmptyList$b1$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.ReadOnlyEmptyList`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyList`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm02.Microsoft.Build.Collections.ReadOnlyEmptyList$b1_$lGetEnumerator$gd__17.__Type__]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:true , Public:false}, "instance", $asm02.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyList`1", [$.GenericParameter("T")]));

    $.GenericProperty({Static:true , Public:true }, "Instance", $asm02.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyList`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("T"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = 0"]; });

})();

/* class Microsoft.Build.Collections.ReadOnlyEmptyList`1+<GetEnumerator>d__17 */ 

(function $lGetEnumerator$gd__17$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.ReadOnlyEmptyList`1+<GetEnumerator>d__17", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("Microsoft.Build.Shared");
/* class Microsoft.Build.Shared.AssemblyFoldersEx */ 

(function AssemblyFoldersEx$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.AssemblyFoldersEx", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm02.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyNames"), 
          $asm02.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue"), $asm07.TypeRef("System.Reflection.ProcessorArchitecture"), 
          $asm02.TypeRef("Microsoft.Build.Shared.OpenBaseKey")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddCandidateVersion", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Collections.Generic.SortedDictionary`2", [$asm07.TypeRef("System.Version"), $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]), $.String, 
          $asm07.TypeRef("System.Version")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDirectories", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Microsoft.Win32.RegistryView"), $asm07.TypeRef("Microsoft.Win32.RegistryHive"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm02.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyNames"), 
          $asm02.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue"), $asm02.TypeRef("Microsoft.Build.Shared.OpenBaseKey")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GatherVersionStrings", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Microsoft.Build.Shared.ExtensionFoldersRegistryKey")]), [$.String, $asm07.TypeRef("System.Collections.IEnumerable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsVersionInsideRange", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Version"), $asm07.TypeRef("Microsoft.Win32.RegistryKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchingPlatformExists", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.Build.Utilities.AssemblyFoldersExInfo$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("Microsoft.Build.Utilities.AssemblyFoldersExInfo")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("Microsoft.Build.Utilities.AssemblyFoldersExInfo")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "directoryNames", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Microsoft.Build.Utilities.AssemblyFoldersExInfo")]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("Microsoft.Build.Utilities.AssemblyFoldersExInfo")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.CanonicalError */ 

(function CanonicalError$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Build.Shared.CanonicalError", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ConvertToIntWithDefault", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Parse", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Shared.CanonicalError+Parts"), [$.String])
    );

    $.Field({Static:true , Public:false}, "originCategoryCodeTextExpression", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "filenameLocationFromOrigin", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "lineFromLocation", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "lineLineFromLocation", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "lineColFromLocation", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "lineColColFromLocation", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "lineColLineColFromLocation", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.CanonicalError+Parts */ 

(function Parts$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.CanonicalError+Parts", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "numberNotSpecified", $.Int32, 0);

    $.Field({Static:false, Public:false}, "origin", $.String);

    $.Field({Static:false, Public:false}, "line", $.Int32);

    $.Field({Static:false, Public:false}, "column", $.Int32);

    $.Field({Static:false, Public:false}, "endLine", $.Int32);

    $.Field({Static:false, Public:false}, "endColumn", $.Int32);

    $.Field({Static:false, Public:false}, "category", $asm02.TypeRef("Microsoft.Build.Shared.CanonicalError+Parts+Category"));

    $.Field({Static:false, Public:false}, "subcategory", $.String);

    $.Field({Static:false, Public:false}, "code", $.String);

    $.Field({Static:false, Public:false}, "text", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Shared.CanonicalError+Parts+Category */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Shared.CanonicalError+Parts+Category", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Warning: 0, 
    Error: 1, 
  }
);

/* class Microsoft.Build.Shared.ExtensionFoldersRegistryKey */ 

(function ExtensionFoldersRegistryKey$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Version)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };




  function ExtensionFoldersRegistryKey_get_ComponentVersion () {
    return this.ExtensionFoldersRegistryKey$ComponentVersion$value;
  }; 

  function ExtensionFoldersRegistryKey_get_RegistryKey () {
    return this.ExtensionFoldersRegistryKey$RegistryKey$value;
  }; 

  function ExtensionFoldersRegistryKey_get_TargetFrameworkVersion () {
    return this.ExtensionFoldersRegistryKey$TargetFrameworkVersion$value;
  }; 

  function ExtensionFoldersRegistryKey_set_ComponentVersion (value) {
    this.ExtensionFoldersRegistryKey$ComponentVersion$value = value;
  }; 

  function ExtensionFoldersRegistryKey_set_RegistryKey (value) {
    this.ExtensionFoldersRegistryKey$RegistryKey$value = value;
  }; 

  function ExtensionFoldersRegistryKey_set_TargetFrameworkVersion (value) {
    this.ExtensionFoldersRegistryKey$TargetFrameworkVersion$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.ExtensionFoldersRegistryKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Version")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Version"), 
          $asm07.TypeRef("System.Version")
        ])
    );

    $.Method({Static:false, Public:false}, "get_ComponentVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version")), 
      ExtensionFoldersRegistryKey_get_ComponentVersion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_RegistryKey", 
      JSIL.MethodSignature.Return($.String), 
      ExtensionFoldersRegistryKey_get_RegistryKey
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_TargetFrameworkVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version")), 
      ExtensionFoldersRegistryKey_get_TargetFrameworkVersion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ComponentVersion", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version")), 
      ExtensionFoldersRegistryKey_set_ComponentVersion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RegistryKey", 
      JSIL.MethodSignature.Action($.String), 
      ExtensionFoldersRegistryKey_set_RegistryKey
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TargetFrameworkVersion", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version")), 
      ExtensionFoldersRegistryKey_set_TargetFrameworkVersion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ExtensionFoldersRegistryKey$RegistryKey$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ExtensionFoldersRegistryKey$ComponentVersion$value", $asm07.TypeRef("System.Version"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ExtensionFoldersRegistryKey$TargetFrameworkVersion$value", $asm07.TypeRef("System.Version"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "RegistryKey", $.String);

    $.Property({Static:false, Public:false}, "ComponentVersion", $asm07.TypeRef("System.Version"));

    $.Property({Static:false, Public:false}, "TargetFrameworkVersion", $asm07.TypeRef("System.Version"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Build.Shared.DirectoryGetFiles */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.DirectoryGetFiles", false, [], 
  new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.String")]), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Shared.GetDirectories */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.GetDirectories", false, [], 
  new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.String")]), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Shared.DirectoryExists */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.DirectoryExists", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Shared.FileExists */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.FileExists", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Shared.FileCopy */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.FileCopy", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Shared.FileDelete */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.FileDelete", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.String")));

/* delegate Microsoft.Build.Shared.FileCreate */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.FileCreate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.IO.FileStream"), [$asm07.TypeRef("System.String")]));

/* class Microsoft.Build.Shared.EncodingUtilities */ 

(function EncodingUtilities$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Build.Shared.EncodingUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentSystemOemEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.Field({Static:true , Public:false}, "currentOemEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:true , Public:false}, "CurrentSystemOemEncoding", $asm07.TypeRef("System.Text.Encoding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.ErrorUtilities */ 

(function ErrorUtilities$Members () {
  var $, $thisType;







































  JSIL.MakeStaticClass("Microsoft.Build.Shared.ErrorUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "DebugTraceMessage", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "ThrowArgument", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "ThrowArgument", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Exception"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "ThrowArgumentOutOfRange", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowIfTypeDoesNotImplementToString", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowInternalError", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "ThrowInternalError", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "ThrowInternalErrorUnreachable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidOperation", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrow", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrow", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrow", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrow", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrow", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Exception"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Exception"), 
          $.String, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Exception"), 
          $.String, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Exception"), 
          $.String, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Exception"), 
          $.String, $.Object, 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgumentArraysSameLength", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Array"), $asm07.TypeRef("System.Array"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgumentLength", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgumentLengthIfNotNull", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgumentNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgumentNull", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgumentOutOfRange", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInternalLength", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInternalLockHeld", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInternalNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInternalRooted", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInvalidOperation", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInvalidOperation", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInvalidOperation", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInvalidOperation", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "throwExceptions", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "enableMSBuildDebugTracing", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.EscapingUtilities */ 

(function EscapingUtilities$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.Build.Shared.EscapingUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ContainsEscapedWildcards", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsReservedCharacters", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Escape", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnescapeAll", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnescapeAll", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Field({Static:true , Public:false}, "charsToEscape", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.EventArgsFormatting */ 

(function EventArgsFormatting$Members () {
  var $, $thisType;














  JSIL.MakeStaticClass("Microsoft.Build.Shared.EventArgsFormatting", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EscapeCarriageReturn", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatEventMessage", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.BuildErrorEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatEventMessage", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.BuildErrorEventArgs"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatEventMessage", 
      new JSIL.MethodSignature($.String, [
          $asm00.TypeRef("Microsoft.Build.Framework.BuildErrorEventArgs"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatEventMessage", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.BuildWarningEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatEventMessage", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.BuildWarningEventArgs"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatEventMessage", 
      new JSIL.MethodSignature($.String, [
          $asm00.TypeRef("Microsoft.Build.Framework.BuildWarningEventArgs"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatEventMessage", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.BuildMessageEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatEventMessage", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.BuildMessageEventArgs"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatEventMessage", 
      new JSIL.MethodSignature($.String, [
          $asm00.TypeRef("Microsoft.Build.Framework.BuildMessageEventArgs"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatEventMessage", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatEventMessage", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SplitStringOnNewLines", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "newLines", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.ExceptionHandling */ 

(function ExceptionHandling$Members () {
  var $, $thisType;













  JSIL.MakeStaticClass("Microsoft.Build.Shared.ExceptionHandling", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DumpExceptionToFile", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlLineAndColumn", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Shared.ExceptionHandling+LineAndColumn"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCriticalException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIoRelatedException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsXmlException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotExpectedException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotExpectedFunctionException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotExpectedIoOrXmlException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotExpectedReflectionException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotExpectedRegistryException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotExpectedSerializationException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExceptionHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.UnhandledExceptionEventArgs")])
    );

    $.Field({Static:true , Public:false}, "dumpFileName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Shared.ExceptionHandling+LineAndColumn */ 

(function LineAndColumn$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };


  function LineAndColumn_get_Column () {
    return this.LineAndColumn$Column$value;
  }; 

  function LineAndColumn_get_Line () {
    return this.LineAndColumn$Line$value;
  }; 

  function LineAndColumn_set_Column (value) {
    this.LineAndColumn$Column$value = (value | 0);
  }; 

  function LineAndColumn_set_Line (value) {
    this.LineAndColumn$Line$value = (value | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Shared.ExceptionHandling+LineAndColumn", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, "get_Column", 
      JSIL.MethodSignature.Return($.Int32), 
      LineAndColumn_get_Column
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Line", 
      JSIL.MethodSignature.Return($.Int32), 
      LineAndColumn_get_Line
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Column", 
      JSIL.MethodSignature.Action($.Int32), 
      LineAndColumn_set_Column
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Line", 
      JSIL.MethodSignature.Action($.Int32), 
      LineAndColumn_set_Line
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "LineAndColumn$Line$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "LineAndColumn$Column$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "Line", $.Int32);

    $.Property({Static:false, Public:false}, "Column", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.FileUtilities */ 

(function FileUtilities$Members () {
  var $, $thisType;






































  JSIL.MakeStaticClass("Microsoft.Build.Shared.FileUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AttemptToShortenPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClearCacheDirectory", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateUriFromPath", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Uri"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeleteDirectoryNoThrow", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeleteNoThrow", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "DirectoryExistsNoThrow", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EndsWithSlash", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureNoLeadingSlash", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureNoTrailingSlash", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureTrailingSlash", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FileExistsNoThrow", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FileOrDirectoryExistsNoThrow", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentExecutableConfigurationFilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentExecutableDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentExecutableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentExecutablePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExecutingAssemblyPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCacheDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDirectory", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDirectoryNameOfFullPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileInfoNoThrow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.FileInfo"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFullPath", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFullPathNoThrow", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHexHash", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathsHash", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTemporaryFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTemporaryFile", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTemporaryFile", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasExtension", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMetaprojectFilename", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRootedNoThrow", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSlash", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSolutionFilename", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsVCProjFilename", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeRelative", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NormalizePath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TrimAndStripAnyQuotes", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "MaxPath", $.Int32, 260);

    $.Field({Static:true , Public:false}, "cacheDirectory", $.String, null);

    $.Field({Static:true , Public:false}, "lastBufferSizeNeeded", $.Int32, function ($pi) {
        return $asm02.Microsoft.Build.Shared.NativeMethodsShared.MAX_PATH;
      });

    $.Constant({Static:true , Public:false}, "FileTimeFormat", $.String, "yyyy'-'MM'-'dd HH':'mm':'ss'.'fffffff");

    $.Field({Static:true , Public:false}, "executablePath", $.String);

    $.Property({Static:true , Public:false}, "ExecutingAssemblyPath", $.String);

    $.Property({Static:true , Public:false}, "CurrentExecutableName", $.String);

    $.Property({Static:true , Public:false}, "CurrentExecutablePath", $.String);

    $.Property({Static:true , Public:false}, "CurrentExecutableDirectory", $.String);

    $.Property({Static:true , Public:false}, "CurrentExecutableConfigurationFilePath", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.FileUtilities+ItemSpecModifiers */ 

(function ItemSpecModifiers$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.Build.Shared.FileUtilities+ItemSpecModifiers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetItemSpecModifier", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetItemSpecModifier", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDerivableItemSpecModifier", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsItemSpecModifier", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowForUrl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.Constant({Static:true , Public:false}, "FullPath", $.String, "FullPath");

    $.Constant({Static:true , Public:false}, "RootDir", $.String, "RootDir");

    $.Constant({Static:true , Public:false}, "Filename", $.String, "Filename");

    $.Constant({Static:true , Public:false}, "Extension", $.String, "Extension");

    $.Constant({Static:true , Public:false}, "RelativeDir", $.String, "RelativeDir");

    $.Constant({Static:true , Public:false}, "Directory", $.String, "Directory");

    $.Constant({Static:true , Public:false}, "RecursiveDir", $.String, "RecursiveDir");

    $.Constant({Static:true , Public:false}, "Identity", $.String, "Identity");

    $.Constant({Static:true , Public:false}, "ModifiedTime", $.String, "ModifiedTime");

    $.Constant({Static:true , Public:false}, "CreatedTime", $.String, "CreatedTime");

    $.Constant({Static:true , Public:false}, "AccessedTime", $.String, "AccessedTime");

    $.Field({Static:true , Public:false, ReadOnly:true }, "All", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "tableOfItemSpecModifiers", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.FileMatcher */ 

(function FileMatcher$Members () {
  var $, $thisType;





















  JSIL.MakeStaticClass("Microsoft.Build.Shared.FileMatcher", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FileMatch", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Shared.FileMatcher+Result"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAccessibleDirectories", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAccessibleFiles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAccessibleFilesAndDirectories", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAccessibleFileSystemEntries", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $asm02.TypeRef("Microsoft.Build.Shared.FileMatcher+FileSystemEntity"), $.String, 
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFiles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFiles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $.String, $.String, 
          $asm02.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries"), $asm02.TypeRef("Microsoft.Build.Shared.DirectoryExists")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileSpecInfo", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Text.RegularExpressions.Regex")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $asm02.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileSpecInfo", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $asm02.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFilesRecursive", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.IList"), $.String, 
          $.String, $.String, 
          $.Int32, $asm0A.TypeRef("System.Text.RegularExpressions.Regex"), 
          $.Boolean, $.String, 
          $.Boolean, $asm02.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLongPathName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLongPathName", 
      new JSIL.MethodSignature($.String, [$.String, $asm02.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasWildcards", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasWildcardsSemicolonItemOrPropertyReferences", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDirectorySeparator", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "PreprocessFileSpecForSplitting", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RegularExpressionFromFileSpec", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveInitialDotSlash", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveProjectDirectory", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SplitFileSpec", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $asm02.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries")
        ])
    );

    $.Constant({Static:true , Public:false}, "recursiveDirectoryMatch", $.String, "**");

    $.Constant({Static:true , Public:false}, "dotdot", $.String, "..");

    $.Field({Static:true , Public:false, ReadOnly:true }, "directorySeparator", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "altDirectorySeparator", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "wildcardCharacters", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "wildcardAndSemicolonCharacters", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "directorySeparatorCharacters", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultGetFileSystemEntries", $asm02.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries"), function ($pi) {
        return $asm02.Microsoft.Build.Shared.FileMatcher_GetFileSystemEntries.New(null, null, new JSIL.MethodPointerInfo($thisType, "GetAccessibleFileSystemEntries", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
                $asm02.TypeRef("Microsoft.Build.Shared.FileMatcher+FileSystemEntity"), $.String, 
                $.String, $.String, 
                $.Boolean
              ]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultDirectoryExists", $asm02.TypeRef("Microsoft.Build.Shared.DirectoryExists"), function ($pi) {
        return $asm02.Microsoft.Build.Shared.DirectoryExists.New(null, null, new JSIL.MethodPointerInfo($asm07.System.IO.Directory, "Exists", new JSIL.MethodSignature($.Boolean, [$.String]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "invalidPathChars", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Shared.FileMatcher+FileSystemEntity */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Shared.FileMatcher+FileSystemEntity", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Files: 0, 
    Directories: 1, 
    FilesAndDirectories: 2, 
  }
);

/* delegate Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries", false, [], 
  new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.String")]), [
      $asm02.TypeRef("Microsoft.Build.Shared.FileMatcher+FileSystemEntity"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.String"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.Boolean")
    ]));

/* class Microsoft.Build.Shared.FileMatcher+Result */ 

(function Result$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.FileMatcher+Result", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "isLegalFileSpec", $.Boolean);

    $.Field({Static:false, Public:false}, "isMatch", $.Boolean);

    $.Field({Static:false, Public:false}, "isFileSpecRecursive", $.Boolean);

    $.Field({Static:false, Public:false}, "fixedDirectoryPart", $.String);

    $.Field({Static:false, Public:false}, "wildcardDirectoryPart", $.String);

    $.Field({Static:false, Public:false}, "filenamePart", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.FileUtilitiesRegex */ 

(function FileUtilitiesRegex$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.Build.Shared.FileUtilitiesRegex", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false, ReadOnly:true }, "DrivePattern", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "UNCPattern", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Shared.DotNetFrameworkArchitecture */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Shared.DotNetFrameworkArchitecture", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Current: 0, 
    Bitness32: 1, 
    Bitness64: 2, 
  }
);

/* class Microsoft.Build.Shared.FrameworkLocationHelper */ 

(function FrameworkLocationHelper$Members () {
  var $, $thisType;






































  JSIL.MakeStaticClass("Microsoft.Build.Shared.FrameworkLocationHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CheckForFrameworkInstallation", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindDotNetFrameworkPath", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm02.TypeRef("Microsoft.Build.Shared.DirectoryExists"), $asm02.TypeRef("Microsoft.Build.Shared.GetDirectories"), 
          $asm02.TypeRef("Microsoft.Build.Shared.DotNetFrameworkArchitecture")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindRegistryValueUnderKey", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindRegistryValueUnderKey", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm07.TypeRef("Microsoft.Win32.RegistryView")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateProgramFiles32", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateProgramFiles64", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateProgramFilesReferenceAssemblyRoot", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateReferenceAssemblyDirectory", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FallbackDotNetFrameworkSdkInstallPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkReferenceAssembliesV30", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkReferenceAssembliesV35", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkSdkV11", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkSdkV20", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkSdkV35ToolsOnVS10", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkSdkV35ToolsOnVS11", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkSdkV40ToolsOnVS10", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkSdkV40ToolsOnVS11", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkSdkV45ToolsOnVS10", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkSdkV45ToolsOnVS11", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkV11", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkV20", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkV30", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkV35", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkV40", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToDotNetFrameworkV45", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToV35ToolsInFallbackDotNetFrameworkSdk", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToV4ToolsInFallbackDotNetFrameworkSdk", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToWindowsSdkV45OnVS10", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PathToWindowsSdkV45OnVS11", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathToDotNetFramework", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Version")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathToDotNetFramework", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Version"), $asm02.TypeRef("Microsoft.Build.Shared.DotNetFrameworkArchitecture")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathToDotNetFrameworkV11", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Shared.DotNetFrameworkArchitecture")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathToDotNetFrameworkV20", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Shared.DotNetFrameworkArchitecture")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathToDotNetFrameworkV30", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Shared.DotNetFrameworkArchitecture")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathToDotNetFrameworkV35", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Shared.DotNetFrameworkArchitecture")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathToDotNetFrameworkV40", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Shared.DotNetFrameworkArchitecture")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathToDotNetFrameworkV45", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Shared.DotNetFrameworkArchitecture")])
    );

    $.Constant({Static:true , Public:false}, "dotNetFrameworkRegistryPath", $.String, "SOFTWARE\\Microsoft\\.NETFramework");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSetupRegistryPath", $.String, "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSetupRegistryInstalledName", $.String, "Install");

    $.Constant({Static:true , Public:false}, "fullDotNetFrameworkRegistryKey", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkAssemblyFoldersRegistryPath", $.String, "SOFTWARE\\Microsoft\\.NETFramework\\AssemblyFolders");

    $.Constant({Static:true , Public:false}, "referenceAssembliesRegistryValueName", $.String, "All Assemblies In");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueV11", $.String, "SDKInstallRootv1.1");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkVersionFolderPrefixV11", $.String, "v1.1");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkVersionV11", $.String, "v1.1.4322");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkRegistryKeyV11", $.String, "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v1.1.4322");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueV20", $.String, "SDKInstallRootv2.0");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkVersionFolderPrefixV20", $.String, "v2.0");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkVersionV20", $.String, "v2.0.50727");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkRegistryKeyV20", $.String, "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v2.0.50727");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkVersionFolderPrefixV30", $.String, "v3.0");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkVersionV30", $.String, "v3.0");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkAssemblyFoldersRegistryKeyV30", $.String, "SOFTWARE\\Microsoft\\.NETFramework\\AssemblyFolders\\v3.0");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkRegistryKeyV30", $.String, "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v3.0\\Setup");

    $.Constant({Static:true , Public:false}, "fallbackDotNetFrameworkSdkRegistryInstallPath", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows");

    $.Constant({Static:true , Public:false}, "fallbackDotNetFrameworkSdkInstallKeyValue", $.String, "CurrentInstallFolder");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkRegistryInstallPathWinSDK70A", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v7.0A");

    $.Constant({Static:true , Public:false}, "fullDotNetFrameworkSdkRegistryInstallPathWinSDK70A", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v7.0A");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueWinSDK70A", $.String, "InstallationFolder");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkRegistryInstallPathManagedToolsSDK80A", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A");

    $.Constant({Static:true , Public:false}, "fullDotNetFrameworkSdkRegistryInstallPathManagedToolsSDK80A", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueManagedToolsSDK80A", $.String, "InstallationFolder");

    $.Constant({Static:true , Public:false}, "windowsSdk80RegistryInstallPath", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0");

    $.Constant({Static:true , Public:false}, "fullWindowsSdk80RegistryInstallPath", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0");

    $.Constant({Static:true , Public:false}, "windowsSdk80InstallKeyValue", $.String, "InstallationFolder");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkRegistryPathForV35ToolsOnWinSDK70A", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v7.0A\\WinSDK-NetFx35Tools-x86");

    $.Constant({Static:true , Public:false}, "fullDotNetFrameworkSdkRegistryPathForV35ToolsOnWinSDK70A", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v7.0A\\WinSDK-NetFx35Tools-x86");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueForV35ToolsOnWinSDK70A", $.String, "InstallationFolder");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkRegistryPathForV4ToolsOnWinSDK70A", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v7.0A\\WinSDK-NetFx40Tools-x86");

    $.Constant({Static:true , Public:false}, "fullDotNetFrameworkSdkRegistryPathForV4ToolsOnWinSDK70A", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v7.0A\\WinSDK-NetFx40Tools-x86");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueForV4ToolsOnWinSDK70A", $.String, "InstallationFolder");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkRegistryPathForV35ToolsOnManagedToolsSDK80A", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx35Tools-x86");

    $.Constant({Static:true , Public:false}, "fullDotNetFrameworkSdkRegistryPathForV35ToolsOnManagedToolsSDK80A", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx35Tools-x86");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueForV35ToolsOnManagedToolsSDK80A", $.String, "InstallationFolder");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK80A", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx40Tools-x86");

    $.Constant({Static:true , Public:false}, "fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK80A", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx40Tools-x86");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueForV4ToolsOnManagedToolsSDK80A", $.String, "InstallationFolder");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkRegistryKeyV35", $.String, "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v3.5");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkVersionFolderPrefixV35", $.String, "v3.5");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkAssemblyFoldersRegistryKeyV35", $.String, "SOFTWARE\\Microsoft\\.NETFramework\\AssemblyFolders\\v3.5");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkRegistryPathV35OnVS10", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v7.0A\\WinSDK-NetFx35Tools-x86");

    $.Constant({Static:true , Public:false}, "fullDotNetFrameworkSdkRegistryKeyV35OnVS10", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v7.0A\\WinSDK-NetFx35Tools-x86");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueV35OnVS10", $.String, "InstallationFolder");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkRegistryPathV35OnVS11", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx35Tools-x86");

    $.Constant({Static:true , Public:false}, "fullDotNetFrameworkSdkRegistryKeyV35OnVS11", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx35Tools-x86");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueV35OnVS11", $.String, "InstallationFolder");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkVersionFolderPrefixV40", $.String, "v4.0");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkVersionV40", $.String, "v4.0");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkRegistryKeyV40", $.String, "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkRegistryPathV40OnVS10", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v7.0A\\WinSDK-NetFx40Tools-x86");

    $.Constant({Static:true , Public:false}, "fullDotNetFrameworkSdkRegistryKeyV40OnVS10", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v7.0A\\WinSDK-NetFx40Tools-x86");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueV40OnVS10", $.String, "InstallationFolder");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkRegistryPathV40OnVS11", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx40Tools-x86");

    $.Constant({Static:true , Public:false}, "fullDotNetFrameworkSdkRegistryKeyV40OnVS11", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx40Tools-x86");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueV40OnVS11", $.String, "InstallationFolder");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkVersionFolderPrefixV45", $.String, "v4.0");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkVersionV45", $.String, "v4.0");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkRegistryKeyV45", $.String, "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkRegistryPathV45OnVS10", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx40Tools-x86");

    $.Constant({Static:true , Public:false}, "fullDotNetFrameworkSdkRegistryKeyV45OnVS10", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx40Tools-x86");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueV45OnVS10", $.String, "InstallationFolder");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkRegistryPathV45OnVS11", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx40Tools-x86");

    $.Constant({Static:true , Public:false}, "fullDotNetFrameworkSdkRegistryKeyV45OnVS11", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx40Tools-x86");

    $.Constant({Static:true , Public:false}, "dotNetFrameworkSdkInstallKeyValueV45OnVS11", $.String, "InstallationFolder");

    $.Constant({Static:true , Public:false}, "windowsSdkRegistryPathV45OnVS11", $.String, "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0");

    $.Constant({Static:true , Public:false}, "fullWindowsSdkRegistryPathV45OnVS11", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0");

    $.Constant({Static:true , Public:false}, "windowsSdkInstallKeyValueV45OnVS11", $.String, "InstallationFolder");

    $.Field({Static:true , Public:false, ReadOnly:true }, "getDirectories", $asm02.TypeRef("Microsoft.Build.Shared.GetDirectories"), function ($pi) {
        return $asm02.Microsoft.Build.Shared.GetDirectories.New(null, null, new JSIL.MethodPointerInfo($asm07.System.IO.Directory, "GetDirectories", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "directoryExists", $asm02.TypeRef("Microsoft.Build.Shared.DirectoryExists"), function ($pi) {
        return $asm02.Microsoft.Build.Shared.DirectoryExists.New(null, null, new JSIL.MethodPointerInfo($asm07.System.IO.Directory, "Exists", new JSIL.MethodSignature($.Boolean, [$.String]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "programFiles", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "programFiles32", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "programFiles64", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "programFilesReferenceAssemblyLocation", $.String);

    $.Field({Static:true , Public:false}, "pathToCurrentDotNetFrameworkV11", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFramework32V11", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFramework64V11", $.String);

    $.Field({Static:true , Public:false}, "pathToCurrentDotNetFrameworkV20", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFramework32V20", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFramework64V20", $.String);

    $.Field({Static:true , Public:false}, "pathToCurrentDotNetFrameworkV30", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFramework32V30", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFramework64V30", $.String);

    $.Field({Static:true , Public:false}, "pathToCurrentDotNetFrameworkV35", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFramework32V35", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFramework64V35", $.String);

    $.Field({Static:true , Public:false}, "pathToCurrentDotNetFrameworkV40", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFramework32V40", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFramework64V40", $.String);

    $.Field({Static:true , Public:false}, "pathToCurrentDotNetFrameworkV45", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFramework32V45", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFramework64V45", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFrameworkSdkV11", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFrameworkSdkV20", $.String);

    $.Field({Static:true , Public:false}, "fallbackDotNetFrameworkSdkInstallPath", $.String);

    $.Field({Static:true , Public:false}, "pathToV35ToolsInFallbackDotNetFrameworkSdk", $.String);

    $.Field({Static:true , Public:false}, "pathToV4ToolsInFallbackDotNetFrameworkSdk", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFrameworkSdkV35ToolsOnVS10", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFrameworkSdkV35ToolsOnVS11", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFrameworkSdkV40ToolsOnVS10", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFrameworkSdkV40OnVS11", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFrameworkSdkV45ToolsOnVS11", $.String);

    $.Field({Static:true , Public:false}, "pathToWindowsSdkV45OnVS11", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFrameworkReferenceAssembliesV30", $.String);

    $.Field({Static:true , Public:false}, "pathToDotNetFrameworkReferenceAssembliesV35", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkV11", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkV20", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkV30", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkV35", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkV40", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkV45", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkSdkV11", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkSdkV20", $.String);

    $.Property({Static:true , Public:false}, "FallbackDotNetFrameworkSdkInstallPath", $.String);

    $.Property({Static:true , Public:false}, "PathToV35ToolsInFallbackDotNetFrameworkSdk", $.String);

    $.Property({Static:true , Public:false}, "PathToV4ToolsInFallbackDotNetFrameworkSdk", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkSdkV35ToolsOnVS10", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkSdkV35ToolsOnVS11", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkSdkV40ToolsOnVS10", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkSdkV40ToolsOnVS11", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkSdkV45ToolsOnVS10", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkSdkV45ToolsOnVS11", $.String);

    $.Property({Static:true , Public:false}, "PathToWindowsSdkV45OnVS10", $.String);

    $.Property({Static:true , Public:false}, "PathToWindowsSdkV45OnVS11", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkReferenceAssembliesV30", $.String);

    $.Property({Static:true , Public:false}, "PathToDotNetFrameworkReferenceAssembliesV35", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.InternalErrorException */ 

(function InternalErrorException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Build.Shared.InternalErrorException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConsiderDebuggerLaunch", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.NativeMethodsShared */ 

(function NativeMethodsShared$Members () {
  var $, $thisType;












































  JSIL.MakeStaticClass("Microsoft.Build.Shared.NativeMethodsShared", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "CoWaitForMultipleHandles", 
      new JSIL.MethodSignature($.Int32, [
          $asm02.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+COWAIT_FLAGS"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "ole32.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreatePipe", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle")]), 
          $asm02.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+SecurityAttributes"), $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "FindOnPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.PInvokeMethod({Static:true , Public:false}, "FreeLibrary", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChildProcessIds", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int32, $asm02.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+SafeProcessHandle")])]), [$.Int32, $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetCurrentDirectory", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $asm07.TypeRef("System.Text.StringBuilder")]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetFileAttributesEx", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+WIN32_FILE_ATTRIBUTE_DATA")])
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetFileType", 
      new JSIL.MethodSignature($.UInt32, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetFullPathName", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Text.StringBuilder"), $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLastWriteDirectoryUtcTime", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLastWriteFileUtcTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLongFilePath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetLongPathName", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMemoryStatus", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+MemoryStatus"))
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetModuleFileName", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetNativeSystemInfo", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+SYSTEM_INFO")])), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetOEMCP", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParentProcessId", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetProcAddress", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'ansi',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetRequestedRuntimeInfo", 
      new JSIL.MethodSignature($.UInt32, [
          $.String, $.String, 
          $.String, $.UInt32, 
          $.UInt32, $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $asm07.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "mscoree.dll", 
        CharSet: 'unicode',
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "GetShortFilePath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetShortPathName", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetStdHandle", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetSystemInfo", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+SYSTEM_INFO")])), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GlobalMemoryStatusEx", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+MemoryStatus")]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.ExternalMethod({Static:true , Public:true }, "HResultFailed", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "HResultSucceeded", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "KillTree", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.PInvokeMethod({Static:true , Public:false}, "LoadLibrary", 
      new JSIL.MethodSignature($.IntPtr, [$.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "MsgWaitOne", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.WaitHandle")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MsgWaitOne", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.WaitHandle"), $asm07.TypeRef("System.TimeSpan")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MsgWaitOne", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.WaitHandle"), $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "NtQueryInformationProcess", 
      new JSIL.MethodSignature($.Int32, [
          $asm02.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+SafeProcessHandle"), $asm02.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+PROCESSINFOCLASS"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+PROCESS_BASIC_INFORMATION")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "NTDLL.DLL", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "OpenProcess", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+SafeProcessHandle"), [
          $asm02.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+eDesiredAccess"), $.Boolean, 
          $.Int32
        ]), 
      {
        Module: "KERNEL32.DLL", 
        Parameters: [
          {
            NativeType: "Boolean"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ReadFile", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SearchPath", 
      new JSIL.MethodSignature($.UInt32, [
          $.String, $.String, 
          $.String, $.Int32, 
          $asm07.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetCurrentDirectory", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "SetErrorMode", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetErrorMode_VistaAndOlder", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "kernel32.dll", 
        EntryPoint: "SetErrorMode", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetErrorMode_Win7AndNewer", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "kernel32.dll", 
        EntryPoint: "SetThreadErrorMode", 
      }
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowExceptionForErrorCode", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.PInvokeMethod({Static:true , Public:true }, "WaitForMultipleObjects", 
      new JSIL.MethodSignature($.Int32, [
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.IntPtr]), 
          $.Boolean, $.UInt32
        ]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.Constant({Static:true , Public:false}, "ERROR_INSUFFICIENT_BUFFER", $.UInt32, 2147942522);

    $.Constant({Static:true , Public:false}, "STARTUP_LOADER_SAFEMODE", $.UInt32, 16);

    $.Constant({Static:true , Public:false}, "S_OK", $.UInt32, 0);

    $.Constant({Static:true , Public:false}, "S_FALSE", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "ERROR_FILE_NOT_FOUND", $.UInt32, 2147942402);

    $.Constant({Static:true , Public:false}, "FUSION_E_PRIVATE_ASM_DISALLOWED", $.UInt32, 2148732996);

    $.Constant({Static:true , Public:false}, "RUNTIME_INFO_DONT_SHOW_ERROR_DIALOG", $.UInt32, 64);

    $.Constant({Static:true , Public:false}, "FILE_TYPE_CHAR", $.UInt32, 2);

    $.Constant({Static:true , Public:false}, "STD_OUTPUT_HANDLE", $.Int32, -11);

    $.Constant({Static:true , Public:false}, "RPC_S_CALLPENDING", $.UInt32, 2147549461);

    $.Constant({Static:true , Public:false}, "E_ABORT", $.UInt32, 2147500036);

    $.Constant({Static:true , Public:false}, "FILE_ATTRIBUTE_READONLY", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FILE_ATTRIBUTE_DIRECTORY", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "FILE_ATTRIBUTE_REPARSE_POINT", $.Int32, 1024);

    $.Constant({Static:true , Public:false}, "kernel32Dll", $.String, "kernel32.dll");

    $.Constant({Static:true , Public:false}, "mscoreeDLL", $.String, "mscoree.dll");

    $.Field({Static:true , Public:false}, "NullHandleRef", $asm07.TypeRef("System.Runtime.InteropServices.HandleRef"));

    $.Field({Static:true , Public:false}, "NullIntPtr", $.IntPtr);

    $.Constant({Static:true , Public:false}, "PROCESSOR_ARCHITECTURE_INTEL", $.UInt16, 0);

    $.Constant({Static:true , Public:false}, "PROCESSOR_ARCHITECTURE_ARM", $.UInt16, 5);

    $.Constant({Static:true , Public:false}, "PROCESSOR_ARCHITECTURE_IA64", $.UInt16, 6);

    $.Constant({Static:true , Public:false}, "PROCESSOR_ARCHITECTURE_AMD64", $.UInt16, 9);

    $.Constant({Static:true , Public:false}, "INFINITE", $.UInt32, 4294967295);

    $.Constant({Static:true , Public:false}, "WAIT_ABANDONED_0", $.UInt32, 128);

    $.Constant({Static:true , Public:false}, "WAIT_OBJECT_0", $.UInt32, 0);

    $.Constant({Static:true , Public:false}, "WAIT_TIMEOUT", $.UInt32, 258);

    $.Field({Static:true , Public:false}, "MAX_PATH", $.Int32, 260);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ThreadErrorModeMinOsVersion", $asm07.TypeRef("System.Version"));


    function NativeMethodsShared__cctor () {
      $thisType.NullHandleRef = new $asm07.System.Runtime.InteropServices.HandleRef();
      $thisType.NullIntPtr = new $asm07.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      NativeMethodsShared__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* enum Microsoft.Build.Shared.NativeMethodsShared+PROCESSINFOCLASS */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Shared.NativeMethodsShared+PROCESSINFOCLASS", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ProcessBasicInformation: 0, 
    ProcessQuotaLimits: 1, 
    ProcessIoCounters: 2, 
    ProcessVmCounters: 3, 
    ProcessTimes: 4, 
    ProcessBasePriority: 5, 
    ProcessRaisePriority: 6, 
    ProcessDebugPort: 7, 
    ProcessExceptionPort: 8, 
    ProcessAccessToken: 9, 
    ProcessLdtInformation: 10, 
    ProcessLdtSize: 11, 
    ProcessDefaultHardErrorMode: 12, 
    ProcessIoPortHandlers: 13, 
    ProcessPooledUsageAndLimits: 14, 
    ProcessWorkingSetWatch: 15, 
    ProcessUserModeIOPL: 16, 
    ProcessEnableAlignmentFaultFixup: 17, 
    ProcessPriorityClass: 18, 
    ProcessWx86Information: 19, 
    ProcessHandleCount: 20, 
    ProcessAffinityMask: 21, 
    ProcessPriorityBoost: 22, 
    MaxProcessInfoClass: 23, 
  }
);

/* enum Microsoft.Build.Shared.NativeMethodsShared+eDesiredAccess */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Shared.NativeMethodsShared+eDesiredAccess", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PROCESS_TERMINATE: 1, 
    PROCESS_CREATE_THREAD: 2, 
    PROCESS_SET_SESSIONID: 4, 
    PROCESS_VM_OPERATION: 8, 
    PROCESS_VM_READ: 16, 
    PROCESS_VM_WRITE: 32, 
    PROCESS_DUP_HANDLE: 64, 
    PROCESS_CREATE_PROCESS: 128, 
    PROCESS_SET_QUOTA: 256, 
    PROCESS_SET_INFORMATION: 512, 
    PROCESS_QUERY_INFORMATION: 1024, 
    DELETE: 65536, 
    READ_CONTROL: 131072, 
    WRITE_DAC: 262144, 
    WRITE_OWNER: 524288, 
    SYNCHRONIZE: 1048576, 
    PROCESS_ALL_ACCESS: 1052671, 
    STANDARD_RIGHTS_ALL: 2031616, 
  }
);

/* enum Microsoft.Build.Shared.NativeMethodsShared+COWAIT_FLAGS */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Shared.NativeMethodsShared+COWAIT_FLAGS", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    COWAIT_NONE: 0, 
    COWAIT_WAITALL: 1, 
    COWAIT_ALERTABLE: 2, 
  }
);

/* struct Microsoft.Build.Shared.NativeMethodsShared+SYSTEM_INFO */ 

(function SYSTEM_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Shared.NativeMethodsShared+SYSTEM_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "wProcessorArchitecture", $.UInt16);

    $.Field({Static:false, Public:false}, "wReserved", $.UInt16);

    $.Field({Static:false, Public:false}, "dwPageSize", $.UInt32);

    $.Field({Static:false, Public:false}, "lpMinimumApplicationAddress", $.IntPtr);

    $.Field({Static:false, Public:false}, "lpMaximumApplicationAddress", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwActiveProcessorMask", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwNumberOfProcessors", $.UInt32);

    $.Field({Static:false, Public:false}, "dwProcessorType", $.UInt32);

    $.Field({Static:false, Public:false}, "dwAllocationGranularity", $.UInt32);

    $.Field({Static:false, Public:false}, "wProcessorLevel", $.UInt16);

    $.Field({Static:false, Public:false}, "wProcessorRevision", $.UInt16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.NativeMethodsShared+SafeProcessHandle */ 

(function SafeProcessHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Build.Shared.NativeMethodsShared+SafeProcessHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CloseHandle", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "KERNEL32.DLL", 
      }
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.NativeMethodsShared+MemoryStatus */ 

(function MemoryStatus$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.NativeMethodsShared+MemoryStatus", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "Length", $.UInt32);

    $.Field({Static:false, Public:true }, "MemoryLoad", $.UInt32);

    $.Field({Static:false, Public:true }, "TotalPhysical", $.UInt64);

    $.Field({Static:false, Public:true }, "AvailablePhysical", $.UInt64);

    $.Field({Static:false, Public:true }, "TotalPageFile", $.UInt64);

    $.Field({Static:false, Public:true }, "AvailablePageFile", $.UInt64);

    $.Field({Static:false, Public:true }, "TotalVirtual", $.UInt64);

    $.Field({Static:false, Public:true }, "AvailableVirtual", $.UInt64);

    $.Field({Static:false, Public:true }, "AvailableExtendedVirtual", $.UInt64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Shared.NativeMethodsShared+PROCESS_BASIC_INFORMATION */ 

(function PROCESS_BASIC_INFORMATION$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Shared.NativeMethodsShared+PROCESS_BASIC_INFORMATION", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:true }, "ExitStatus", $.Int32);

    $.Field({Static:false, Public:true }, "PebBaseAddress", $.Int32);

    $.Field({Static:false, Public:true }, "AffinityMask", $.Int32);

    $.Field({Static:false, Public:true }, "BasePriority", $.Int32);

    $.Field({Static:false, Public:true }, "UniqueProcessId", $.Int32);

    $.Field({Static:false, Public:true }, "InheritedFromUniqueProcessId", $.Int32);

    $.Property({Static:false, Public:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Shared.NativeMethodsShared+WIN32_FILE_ATTRIBUTE_DATA */ 

(function WIN32_FILE_ATTRIBUTE_DATA$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Shared.NativeMethodsShared+WIN32_FILE_ATTRIBUTE_DATA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "fileAttributes", $.Int32);

    $.Field({Static:false, Public:false}, "ftCreationTimeLow", $.UInt32);

    $.Field({Static:false, Public:false}, "ftCreationTimeHigh", $.UInt32);

    $.Field({Static:false, Public:false}, "ftLastAccessTimeLow", $.UInt32);

    $.Field({Static:false, Public:false}, "ftLastAccessTimeHigh", $.UInt32);

    $.Field({Static:false, Public:false}, "ftLastWriteTimeLow", $.UInt32);

    $.Field({Static:false, Public:false}, "ftLastWriteTimeHigh", $.UInt32);

    $.Field({Static:false, Public:false}, "fileSizeHigh", $.UInt32);

    $.Field({Static:false, Public:false}, "fileSizeLow", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.NativeMethodsShared+SecurityAttributes */ 

(function SecurityAttributes$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.NativeMethodsShared+SecurityAttributes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nLength", $.UInt32);

    $.Field({Static:false, Public:true }, "lpSecurityDescriptor", $.IntPtr);

    $.Field({Static:false, Public:true }, "bInheritHandle", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.InprocTrackingNativeMethods */ 

(function InprocTrackingNativeMethods$Members () {
  var $, $thisType;










  JSIL.MakeStaticClass("Microsoft.Build.Shared.InprocTrackingNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EndTrackingContext", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ResumeTracking", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "SetThreadCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "StartTrackingContext", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StartTrackingContextWithRoot", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "StopTrackingAndCleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "SuspendTracking", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteAllTLogs", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteContextTLogs", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Build.Shared.InprocTrackingNativeMethods+StartTrackingContextDelegate */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.InprocTrackingNativeMethods+StartTrackingContextDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, 
      {
        NativeType: "LPWStr"
      }
    ]
  }
);

/* delegate Microsoft.Build.Shared.InprocTrackingNativeMethods+StartTrackingContextWithRootDelegate */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.InprocTrackingNativeMethods+StartTrackingContextWithRootDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.String"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.String")
    ]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, 
      {
        NativeType: "LPWStr"
      }, 
      {
        NativeType: "LPWStr"
      }
    ]
  }
);

/* delegate Microsoft.Build.Shared.InprocTrackingNativeMethods+EndTrackingContextDelegate */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.InprocTrackingNativeMethods+EndTrackingContextDelegate", false, [], 
  JSIL.MethodSignature.Return($asm07.TypeRef("System.Int32")));

/* delegate Microsoft.Build.Shared.InprocTrackingNativeMethods+StopTrackingAndCleanupDelegate */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.InprocTrackingNativeMethods+StopTrackingAndCleanupDelegate", false, [], 
  JSIL.MethodSignature.Return($asm07.TypeRef("System.Int32")));

/* delegate Microsoft.Build.Shared.InprocTrackingNativeMethods+SuspendTrackingDelegate */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.InprocTrackingNativeMethods+SuspendTrackingDelegate", false, [], 
  JSIL.MethodSignature.Return($asm07.TypeRef("System.Int32")));

/* delegate Microsoft.Build.Shared.InprocTrackingNativeMethods+ResumeTrackingDelegate */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.InprocTrackingNativeMethods+ResumeTrackingDelegate", false, [], 
  JSIL.MethodSignature.Return($asm07.TypeRef("System.Int32")));

/* delegate Microsoft.Build.Shared.InprocTrackingNativeMethods+WriteAllTLogsDelegate */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.InprocTrackingNativeMethods+WriteAllTLogsDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, 
      {
        NativeType: "LPWStr"
      }
    ]
  }
);

/* delegate Microsoft.Build.Shared.InprocTrackingNativeMethods+WriteContextTLogsDelegate */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.InprocTrackingNativeMethods+WriteContextTLogsDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, 
      {
        NativeType: "LPWStr"
      }
    ]
  }
);

/* delegate Microsoft.Build.Shared.InprocTrackingNativeMethods+SetThreadCountDelegate */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.InprocTrackingNativeMethods+SetThreadCountDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.Int32")]));

/* class Microsoft.Build.Shared.InprocTrackingNativeMethods+FileTrackerDllStub */ 

(function FileTrackerDllStub$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.Build.Shared.InprocTrackingNativeMethods+FileTrackerDllStub", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateDelegate", 
      new JSIL.MethodSignature("!!0", [$.String], ["DT"])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetProcAddress", 
      new JSIL.MethodSignature($.IntPtr, [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'ansi',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "InitDelegates", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadFileTrackerDll", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "LoadLibrary", 
      new JSIL.MethodSignature($asm02.TypeRef("Microsoft.Build.Shared.InprocTrackingNativeMethods+FileTrackerDllStub+SafeLibraryHandle"), [$.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "fileTrackerDllName", $.String, "FileTracker.dll");

    $.Field({Static:true , Public:false}, "fileTrackerDllHandle", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "startTrackingContextDelegate", $asm02.TypeRef("Microsoft.Build.Shared.InprocTrackingNativeMethods+StartTrackingContextDelegate"));

    $.Field({Static:true , Public:false}, "startTrackingContextWithRootDelegate", $asm02.TypeRef("Microsoft.Build.Shared.InprocTrackingNativeMethods+StartTrackingContextWithRootDelegate"));

    $.Field({Static:true , Public:false}, "endTrackingContextDelegate", $asm02.TypeRef("Microsoft.Build.Shared.InprocTrackingNativeMethods+EndTrackingContextDelegate"));

    $.Field({Static:true , Public:false}, "stopTrackingAndCleanupDelegate", $asm02.TypeRef("Microsoft.Build.Shared.InprocTrackingNativeMethods+StopTrackingAndCleanupDelegate"));

    $.Field({Static:true , Public:false}, "suspendTrackingDelegate", $asm02.TypeRef("Microsoft.Build.Shared.InprocTrackingNativeMethods+SuspendTrackingDelegate"));

    $.Field({Static:true , Public:false}, "resumeTrackingDelegate", $asm02.TypeRef("Microsoft.Build.Shared.InprocTrackingNativeMethods+ResumeTrackingDelegate"));

    $.Field({Static:true , Public:false}, "writeAllTLogsDelegate", $asm02.TypeRef("Microsoft.Build.Shared.InprocTrackingNativeMethods+WriteAllTLogsDelegate"));

    $.Field({Static:true , Public:false}, "writeContextTLogsDelegate", $asm02.TypeRef("Microsoft.Build.Shared.InprocTrackingNativeMethods+WriteContextTLogsDelegate"));

    $.Field({Static:true , Public:false}, "setThreadCountDelegate", $asm02.TypeRef("Microsoft.Build.Shared.InprocTrackingNativeMethods+SetThreadCountDelegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.InprocTrackingNativeMethods+FileTrackerDllStub+SafeLibraryHandle */ 

(function SafeLibraryHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "Microsoft.Build.Shared.InprocTrackingNativeMethods+FileTrackerDllStub+SafeLibraryHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; })
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* delegate Microsoft.Build.Shared.OpenBaseKey */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.OpenBaseKey", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.RegistryKey"), [$asm07.TypeRef("Microsoft.Win32.RegistryHive"), $asm07.TypeRef("Microsoft.Win32.RegistryView")]));

/* delegate Microsoft.Build.Shared.GetRegistrySubKeyNames */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.GetRegistrySubKeyNames", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.String")]), [$asm07.TypeRef("Microsoft.Win32.RegistryKey"), $asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.String"), [$asm07.TypeRef("Microsoft.Win32.RegistryKey"), $asm07.TypeRef("System.String")]));

/* class Microsoft.Build.Shared.RegistryHelper */ 

(function RegistryHelper$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Build.Shared.RegistryHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultValue", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("Microsoft.Win32.RegistryKey"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSubKeyNames", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [$asm07.TypeRef("Microsoft.Win32.RegistryKey"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenBaseKey", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.RegistryKey"), [$asm07.TypeRef("Microsoft.Win32.RegistryHive"), $asm07.TypeRef("Microsoft.Win32.RegistryView")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.ResourceUtilities */ 

(function ResourceUtilities$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("Microsoft.Build.Shared.ResourceUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ExtractMessageCode", 
      new JSIL.MethodSignature($.String, [
          $.Boolean, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatResourceString", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(3, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "FormatResourceString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "FormatString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetHelpKeyword", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetResourceString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyResourceStringExists", 
      JSIL.MethodSignature.Action($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.VersionUtilities */ 

(function VersionUtilities$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Build.Shared.VersionUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ConvertToVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GatherVersionStrings", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Collections.Generic.SortedDictionary`2", [$asm07.TypeRef("System.Version"), $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]), [$asm07.TypeRef("System.Version"), $asm07.TypeRef("System.Collections.IEnumerable")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.ReverseStringGenericComparer */ 

(function ReverseStringGenericComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.ReverseStringGenericComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IComparer$lSystem.String$g.Compare", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.String")]), "Compare");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Comparer", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.ReverseVersionGenericComparer */ 

(function ReverseVersionGenericComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.ReverseVersionGenericComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IComparer$lSystem.Version$g.Compare", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Version"), $asm07.TypeRef("System.Version")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.Version")]), "Compare");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Comparer", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.Version")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.AssemblyResources */ 

(function AssemblyResources$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.Build.Shared.AssemblyResources", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FormatResourceString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "FormatString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "get_PrimaryResources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SharedResources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "sharedResources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "PrimaryResources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "SharedResources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

