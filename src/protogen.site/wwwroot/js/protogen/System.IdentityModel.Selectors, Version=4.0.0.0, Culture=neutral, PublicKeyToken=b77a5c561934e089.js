/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm1A = JSIL.DeclareAssembly("System.IdentityModel.Selectors, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.InfoCards");
/* class Microsoft.InfoCards.InfoCardBaseException */ 

(function InfoCardBaseException$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.InfoCards.InfoCardBaseException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExtendedMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Logged", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NativeHResult", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "MarkLogged", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_logged", $.Boolean);

    $.Field({Static:false, Public:false}, "m_extendedMessage", $.String);

    $.Property({Static:false, Public:true }, "NativeHResult", $.Int32);

    $.Property({Static:false, Public:true }, "Logged", $.Boolean);

    $.Property({Static:false, Public:true }, "ExtendedMessage", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.InfoCards.UserCancelledException */ 

(function UserCancelledException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm1A.TypeRef("Microsoft.InfoCards.InfoCardBaseException"), 
      Name: "Microsoft.InfoCards.UserCancelledException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Constant({Static:true , Public:false}, "HRESULT", $.Int32, -1073413869);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.InfoCards.InfoCardArgumentException */ 

(function InfoCardArgumentException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm1A.TypeRef("Microsoft.InfoCards.InfoCardBaseException"), 
      Name: "Microsoft.InfoCards.InfoCardArgumentException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Constant({Static:true , Public:false}, "HRESULT", $.Int32, -1073413883);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.InfoCards.HGlobalSafeHandle */ 

(function HGlobalSafeHandle$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "Microsoft.InfoCards.HGlobalSafeHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Construct", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "Construct", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Construct", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.PInvokeMethod({Static:true , Public:true }, "ZeroMemory", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Int32]), 
      {
        Module: "Kernel32.dll", 
        EntryPoint: "RtlZeroMemory", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Field({Static:false, Public:false}, "m_bytes", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.InfoCards.GlobalAllocSafeHandle */ 

(function GlobalAllocSafeHandle$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "Microsoft.InfoCards.GlobalAllocSafeHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.PInvokeMethod({Static:true , Public:true }, "GlobalFree", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Length", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.PInvokeMethod({Static:true , Public:true }, "ZeroMemory", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Int32]), 
      {
        Module: "Kernel32.dll", 
        EntryPoint: "RtlZeroMemory", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Field({Static:false, Public:false}, "m_bytes", $.Int32);

    $.Property({Static:false, Public:true }, "Length", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.InfoCards.InfoCardCryptoHelper */ 

(function InfoCardCryptoHelper$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.InfoCards.InfoCardCryptoHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "IsAsymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.InfoCards.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "Microsoft.InfoCards.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class Microsoft.InfoCards.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "Microsoft.InfoCards.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class Microsoft.InfoCards.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.InfoCards.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "ServiceInformation", $.String, "ServiceInformation");

    $.Constant({Static:true , Public:false}, "ServiceTooManyCryptoSessions", $.String, "ServiceTooManyCryptoSessions");

    $.Constant({Static:true , Public:false}, "ServiceProcessHasExited", $.String, "ServiceProcessHasExited");

    $.Constant({Static:true , Public:false}, "ServiceUnknownCryptoSessionId", $.String, "ServiceUnknownCryptoSessionId");

    $.Constant({Static:true , Public:false}, "ServiceInvalidAsyncHandle", $.String, "ServiceInvalidAsyncHandle");

    $.Constant({Static:true , Public:false}, "ServiceAsyncOpGeneratedException", $.String, "ServiceAsyncOpGeneratedException");

    $.Constant({Static:true , Public:false}, "ServiceTooManyAsyncOperations", $.String, "ServiceTooManyAsyncOperations");

    $.Constant({Static:true , Public:false}, "ServiceBadKeySizeInPolicy", $.String, "ServiceBadKeySizeInPolicy");

    $.Constant({Static:true , Public:false}, "ServiceInvalidEprInPolicy", $.String, "ServiceInvalidEprInPolicy");

    $.Constant({Static:true , Public:false}, "ServiceUnableToDeserializeInfoCardStream", $.String, "ServiceUnableToDeserializeInfoCardStream");

    $.Constant({Static:true , Public:false}, "ServicePopulateIdBeforeInfoCardGet", $.String, "ServicePopulateIdBeforeInfoCardGet");

    $.Constant({Static:true , Public:false}, "ServicePopulateIdBeforeInfoCardGetClaims", $.String, "ServicePopulateIdBeforeInfoCardGetClaims");

    $.Constant({Static:true , Public:false}, "ServicePopulateIdBeforeInfoCardGetLedger", $.String, "ServicePopulateIdBeforeInfoCardGetLedger");

    $.Constant({Static:true , Public:false}, "ServiceObjectIsNotOfExpectedType", $.String, "ServiceObjectIsNotOfExpectedType");

    $.Constant({Static:true , Public:false}, "ServiceCantSerializeIncompleteInfoCard", $.String, "ServiceCantSerializeIncompleteInfoCard");

    $.Constant({Static:true , Public:false}, "ServiceCantGetRowWithNullID", $.String, "ServiceCantGetRowWithNullID");

    $.Constant({Static:true , Public:false}, "ServiceEncounteredFatalError", $.String, "ServiceEncounteredFatalError");

    $.Constant({Static:true , Public:false}, "ServiceCrashedWithoutException", $.String, "ServiceCrashedWithoutException");

    $.Constant({Static:true , Public:false}, "ServiceClientProcessExited", $.String, "ServiceClientProcessExited");

    $.Constant({Static:true , Public:false}, "ServiceUnableToReadUIAgentSleepTime", $.String, "ServiceUnableToReadUIAgentSleepTime");

    $.Constant({Static:true , Public:false}, "ServiceErrorGettingClientTSSession", $.String, "ServiceErrorGettingClientTSSession");

    $.Constant({Static:true , Public:false}, "ServiceErrorGettingClientPid", $.String, "ServiceErrorGettingClientPid");

    $.Constant({Static:true , Public:false}, "ServiceInUseOnAnotherSession", $.String, "ServiceInUseOnAnotherSession");

    $.Constant({Static:true , Public:false}, "ServiceInvalidClaimUri", $.String, "ServiceInvalidClaimUri");

    $.Constant({Static:true , Public:false}, "ServiceUnsupportedKeyDerivationAlgorithm", $.String, "ServiceUnsupportedKeyDerivationAlgorithm");

    $.Constant({Static:true , Public:false}, "ServiceSTSCommunicationFailed", $.String, "ServiceSTSCommunicationFailed");

    $.Constant({Static:true , Public:false}, "ServiceCanNotExportCertIdentityPrivateKey", $.String, "ServiceCanNotExportCertIdentityPrivateKey");

    $.Constant({Static:true , Public:false}, "ServiceInvalidCredentialSelector", $.String, "ServiceInvalidCredentialSelector");

    $.Constant({Static:true , Public:false}, "ServiceInvalidTokenService", $.String, "ServiceInvalidTokenService");

    $.Constant({Static:true , Public:false}, "ServiceUnsupportedKeyIdentifierType", $.String, "ServiceUnsupportedKeyIdentifierType");

    $.Constant({Static:true , Public:false}, "ServiceInvalidThumbPrintValue", $.String, "ServiceInvalidThumbPrintValue");

    $.Constant({Static:true , Public:false}, "ServiceInvalidSerialNumber", $.String, "ServiceInvalidSerialNumber");

    $.Constant({Static:true , Public:false}, "ServiceInvalidUri", $.String, "ServiceInvalidUri");

    $.Constant({Static:true , Public:false}, "ServiceDoesNotSupportThisTokenType", $.String, "ServiceDoesNotSupportThisTokenType");

    $.Constant({Static:true , Public:false}, "ServiceDoesNotSupportThisClaim", $.String, "ServiceDoesNotSupportThisClaim");

    $.Constant({Static:true , Public:false}, "ServiceInvalidDataInRequest", $.String, "ServiceInvalidDataInRequest");

    $.Constant({Static:true , Public:false}, "ServiceInaccessibleFile", $.String, "ServiceInaccessibleFile");

    $.Constant({Static:true , Public:false}, "ServiceInvalidArguments", $.String, "ServiceInvalidArguments");

    $.Constant({Static:true , Public:false}, "ServiceInvalidArgument", $.String, "ServiceInvalidArgument");

    $.Constant({Static:true , Public:false}, "ServiceFailedToWriteToken", $.String, "ServiceFailedToWriteToken");

    $.Constant({Static:true , Public:false}, "ServiceUnsupportedFileSystem", $.String, "ServiceUnsupportedFileSystem");

    $.Constant({Static:true , Public:false}, "UserIdentityEqualSystemNotSupported", $.String, "UserIdentityEqualSystemNotSupported");

    $.Constant({Static:true , Public:false}, "FailedToSerializeObject", $.String, "FailedToSerializeObject");

    $.Constant({Static:true , Public:false}, "CreateProcessFailed", $.String, "CreateProcessFailed");

    $.Constant({Static:true , Public:false}, "FailedToVerifySignature", $.String, "FailedToVerifySignature");

    $.Constant({Static:true , Public:false}, "NoTokenReturned", $.String, "NoTokenReturned");

    $.Constant({Static:true , Public:false}, "InvalidFlagsSpecified", $.String, "InvalidFlagsSpecified");

    $.Constant({Static:true , Public:false}, "UnableToBuildChainForNonHARecipient", $.String, "UnableToBuildChainForNonHARecipient");

    $.Constant({Static:true , Public:false}, "InvalidHACertificateStructure", $.String, "InvalidHACertificateStructure");

    $.Constant({Static:true , Public:false}, "ServiceCouldNotRetrieveCertNameString", $.String, "ServiceCouldNotRetrieveCertNameString");

    $.Constant({Static:true , Public:false}, "InvalidPolicyLength", $.String, "InvalidPolicyLength");

    $.Constant({Static:true , Public:false}, "InvalidAppliesToInPolicy", $.String, "InvalidAppliesToInPolicy");

    $.Constant({Static:true , Public:false}, "AppliesToMustOnlyHaveEndpointAddress", $.String, "AppliesToMustOnlyHaveEndpointAddress");

    $.Constant({Static:true , Public:false}, "RecipientNotFromSameSecurityDomain", $.String, "RecipientNotFromSameSecurityDomain");

    $.Constant({Static:true , Public:false}, "UnableToAuthenticateUIAgent", $.String, "UnableToAuthenticateUIAgent");

    $.Constant({Static:true , Public:false}, "RemoteCryptoSessionUnavailable", $.String, "RemoteCryptoSessionUnavailable");

    $.Constant({Static:true , Public:false}, "ServiceRequestBufferLengthInvalid", $.String, "ServiceRequestBufferLengthInvalid");

    $.Constant({Static:true , Public:false}, "FailedToCreateProcessMutex", $.String, "FailedToCreateProcessMutex");

    $.Constant({Static:true , Public:false}, "InvalidOrCorruptArgumentStream", $.String, "InvalidOrCorruptArgumentStream");

    $.Constant({Static:true , Public:false}, "ServiceInvalidCallerToken", $.String, "ServiceInvalidCallerToken");

    $.Constant({Static:true , Public:false}, "ServiceUnableToValidateCallerToken", $.String, "ServiceUnableToValidateCallerToken");

    $.Constant({Static:true , Public:false}, "MultipleTokenTypeElementsFound", $.String, "MultipleTokenTypeElementsFound");

    $.Constant({Static:true , Public:false}, "MultipleKeySizeElementsFound", $.String, "MultipleKeySizeElementsFound");

    $.Constant({Static:true , Public:false}, "MultipleLifetimeElementsFound", $.String, "MultipleLifetimeElementsFound");

    $.Constant({Static:true , Public:false}, "MultipleRequestedSecurityTokenElementsFound", $.String, "MultipleRequestedSecurityTokenElementsFound");

    $.Constant({Static:true , Public:false}, "MultipleRequestedProofTokenElementsFound", $.String, "MultipleRequestedProofTokenElementsFound");

    $.Constant({Static:true , Public:false}, "MultipleEntropyElementsFound", $.String, "MultipleEntropyElementsFound");

    $.Constant({Static:true , Public:false}, "MultipleRequestedDisplayTokenElementsFound", $.String, "MultipleRequestedDisplayTokenElementsFound");

    $.Constant({Static:true , Public:false}, "MultipleRequestedAttachedReferenceElementsFound", $.String, "MultipleRequestedAttachedReferenceElementsFound");

    $.Constant({Static:true , Public:false}, "MultipleRequestedUnattachedReferenceElementsFound", $.String, "MultipleRequestedUnattachedReferenceElementsFound");

    $.Constant({Static:true , Public:false}, "MultipleRequestTypeElementsFound", $.String, "MultipleRequestTypeElementsFound");

    $.Constant({Static:true , Public:false}, "KeySizeMustBeGreaterThanZero", $.String, "KeySizeMustBeGreaterThanZero");

    $.Constant({Static:true , Public:false}, "NoIssuedTokenXml", $.String, "NoIssuedTokenXml");

    $.Constant({Static:true , Public:false}, "EntropyModeCannotHaveComputedKey", $.String, "EntropyModeCannotHaveComputedKey");

    $.Constant({Static:true , Public:false}, "EntropyModeRequiresProofToken", $.String, "EntropyModeRequiresProofToken");

    $.Constant({Static:true , Public:false}, "ProofTokenXmlUnexpectedInRstr", $.String, "ProofTokenXmlUnexpectedInRstr");

    $.Constant({Static:true , Public:false}, "ServiceInvalidPrivacyNoticeVersion", $.String, "ServiceInvalidPrivacyNoticeVersion");

    $.Constant({Static:true , Public:false}, "ServiceCardEncryptionFailed", $.String, "ServiceCardEncryptionFailed");

    $.Constant({Static:true , Public:false}, "ServiceCardDecryptionFailed", $.String, "ServiceCardDecryptionFailed");

    $.Constant({Static:true , Public:false}, "ServiceCardWrongVersion", $.String, "ServiceCardWrongVersion");

    $.Constant({Static:true , Public:false}, "ServiceEprDoesNotHaveValidMetadata", $.String, "ServiceEprDoesNotHaveValidMetadata");

    $.Constant({Static:true , Public:false}, "NoIssuerSpecifiedWhenMexIsSpecified", $.String, "NoIssuerSpecifiedWhenMexIsSpecified");

    $.Constant({Static:true , Public:false}, "OnlyIssueRequestTypeSupported", $.String, "OnlyIssueRequestTypeSupported");

    $.Constant({Static:true , Public:false}, "ServiceDisplayTokenNoClaimName", $.String, "ServiceDisplayTokenNoClaimName");

    $.Constant({Static:true , Public:false}, "SelfOrAnonIssuerNotAllowedWhenMexSpecified", $.String, "SelfOrAnonIssuerNotAllowedWhenMexSpecified");

    $.Constant({Static:true , Public:false}, "MoreThanOneEndPointFoundWhenNoIssuerIsSpecified", $.String, "MoreThanOneEndPointFoundWhenNoIssuerIsSpecified");

    $.Constant({Static:true , Public:false}, "NoAppropriateEndPointFound", $.String, "NoAppropriateEndPointFound");

    $.Constant({Static:true , Public:false}, "ServiceInvalidEncryptedClaimValues", $.String, "ServiceInvalidEncryptedClaimValues");

    $.Constant({Static:true , Public:false}, "ServiceInvalidAsymmetricKeySize", $.String, "ServiceInvalidAsymmetricKeySize");

    $.Constant({Static:true , Public:false}, "ServiceUnsupportedPolicyElementFound", $.String, "ServiceUnsupportedPolicyElementFound");

    $.Constant({Static:true , Public:false}, "ServiceTokenEncryptionFailed", $.String, "ServiceTokenEncryptionFailed");

    $.Constant({Static:true , Public:false}, "InvalidKeyOption", $.String, "InvalidKeyOption");

    $.Constant({Static:true , Public:false}, "RPStsWithNoSSLFailure", $.String, "RPStsWithNoSSLFailure");

    $.Constant({Static:true , Public:false}, "UnsupportedIdentityType", $.String, "UnsupportedIdentityType");

    $.Constant({Static:true , Public:false}, "StoreBeginTransaction", $.String, "StoreBeginTransaction");

    $.Constant({Static:true , Public:false}, "StoreCanNotUnmountSystemStorage", $.String, "StoreCanNotUnmountSystemStorage");

    $.Constant({Static:true , Public:false}, "StoreClosing", $.String, "StoreClosing");

    $.Constant({Static:true , Public:false}, "StoreCommitTransaction", $.String, "StoreCommitTransaction");

    $.Constant({Static:true , Public:false}, "StoreCryptProtectDataAsSystemFailed", $.String, "StoreCryptProtectDataAsSystemFailed");

    $.Constant({Static:true , Public:false}, "StoreCryptProtectDataFailed", $.String, "StoreCryptProtectDataFailed");

    $.Constant({Static:true , Public:false}, "StoreCryptUnprotectDataAsSystemFailed", $.String, "StoreCryptUnprotectDataAsSystemFailed");

    $.Constant({Static:true , Public:false}, "StoreCryptUnprotectDataFailed", $.String, "StoreCryptUnprotectDataFailed");

    $.Constant({Static:true , Public:false}, "StoreDataSourceCanNotImportToSelf", $.String, "StoreDataSourceCanNotImportToSelf");

    $.Constant({Static:true , Public:false}, "StoreDataSourceIdOutOfRange", $.String, "StoreDataSourceIdOutOfRange");

    $.Constant({Static:true , Public:false}, "StoreDataSourceInvalidIndexName", $.String, "StoreDataSourceInvalidIndexName");

    $.Constant({Static:true , Public:false}, "StoreDataSourceRowNotOwned", $.String, "StoreDataSourceRowNotOwned");

    $.Constant({Static:true , Public:false}, "StoreDataSourceWriteLockNotHeld", $.String, "StoreDataSourceWriteLockNotHeld");

    $.Constant({Static:true , Public:false}, "StoreDecryptedKeyIsNotValid", $.String, "StoreDecryptedKeyIsNotValid");

    $.Constant({Static:true , Public:false}, "StoreDeleting", $.String, "StoreDeleting");

    $.Constant({Static:true , Public:false}, "StoreFailedToOpenStore", $.String, "StoreFailedToOpenStore");

    $.Constant({Static:true , Public:false}, "StoreFileNotProtectedByPassphrase", $.String, "StoreFileNotProtectedByPassphrase");

    $.Constant({Static:true , Public:false}, "StoreFileNotProtectedWithDPAPI", $.String, "StoreFileNotProtectedWithDPAPI");

    $.Constant({Static:true , Public:false}, "StoreFreeListSizeOutOfRange", $.String, "StoreFreeListSizeOutOfRange");

    $.Constant({Static:true , Public:false}, "StoreFreeListValueOutOfRange", $.String, "StoreFreeListValueOutOfRange");

    $.Constant({Static:true , Public:false}, "StoreHashUtilityDataOutOfRange", $.String, "StoreHashUtilityDataOutOfRange");

    $.Constant({Static:true , Public:false}, "StoreHashUtilityDataToHashOutOfRange", $.String, "StoreHashUtilityDataToHashOutOfRange");

    $.Constant({Static:true , Public:false}, "StoreHighValueOutOfRange", $.String, "StoreHighValueOutOfRange");

    $.Constant({Static:true , Public:false}, "StoreImpersonateLoggedOnUserFailed", $.String, "StoreImpersonateLoggedOnUserFailed");

    $.Constant({Static:true , Public:false}, "StoreIndexDataBufferDataLengthOutOfRange", $.String, "StoreIndexDataBufferDataLengthOutOfRange");

    $.Constant({Static:true , Public:false}, "StoreIndexDataBufferIndexOutOfRange", $.String, "StoreIndexDataBufferIndexOutOfRange");

    $.Constant({Static:true , Public:false}, "StoreIndexGrowthFactorInvalid", $.String, "StoreIndexGrowthFactorInvalid");

    $.Constant({Static:true , Public:false}, "StoreIndexInitialSizeInvalid", $.String, "StoreIndexInitialSizeInvalid");

    $.Constant({Static:true , Public:false}, "StoreIndexNameInvalid", $.String, "StoreIndexNameInvalid");

    $.Constant({Static:true , Public:false}, "StoreIndexObjectBufferOverflow", $.String, "StoreIndexObjectBufferOverflow");

    $.Constant({Static:true , Public:false}, "StoreIndexObjectCanNotBeCanonicalized", $.String, "StoreIndexObjectCanNotBeCanonicalized");

    $.Constant({Static:true , Public:false}, "StoreIndexObjectCanNotBeCompiled", $.String, "StoreIndexObjectCanNotBeCompiled");

    $.Constant({Static:true , Public:false}, "StoreIndexValueCanNotBeNull", $.String, "StoreIndexValueCanNotBeNull");

    $.Constant({Static:true , Public:false}, "StoreIndexedDataBufferNullOrEmptyDataIndexBuffer", $.String, "StoreIndexedDataBufferNullOrEmptyDataIndexBuffer");

    $.Constant({Static:true , Public:false}, "StoreIndexedDataBufferNullOrEmptyMasterIndexBuffer", $.String, "StoreIndexedDataBufferNullOrEmptyMasterIndexBuffer");

    $.Constant({Static:true , Public:false}, "StoreKeyAlreadyProtected", $.String, "StoreKeyAlreadyProtected");

    $.Constant({Static:true , Public:false}, "StoreKeyNotAlreadyProtected", $.String, "StoreKeyNotAlreadyProtected");

    $.Constant({Static:true , Public:false}, "StoreLastIndexOutOfRange", $.String, "StoreLastIndexOutOfRange");

    $.Constant({Static:true , Public:false}, "StoreLoading", $.String, "StoreLoading");

    $.Constant({Static:true , Public:false}, "StoreLocalIdOutOfRange", $.String, "StoreLocalIdOutOfRange");

    $.Constant({Static:true , Public:false}, "StoreLowValueOutOfRange", $.String, "StoreLowValueOutOfRange");

    $.Constant({Static:true , Public:false}, "StoreMoreThanOneRowReturnedInSingleMatchQuery", $.String, "StoreMoreThanOneRowReturnedInSingleMatchQuery");

    $.Constant({Static:true , Public:false}, "StoreNullIndexValueNotPermitted", $.String, "StoreNullIndexValueNotPermitted");

    $.Constant({Static:true , Public:false}, "StorePassphraseKeyAlreadyProtected", $.String, "StorePassphraseKeyAlreadyProtected");

    $.Constant({Static:true , Public:false}, "StorePassphraseNotAlreadyProtected", $.String, "StorePassphraseNotAlreadyProtected");

    $.Constant({Static:true , Public:false}, "StoreProcessingTransaction", $.String, "StoreProcessingTransaction");

    $.Constant({Static:true , Public:false}, "StoreRollbackTransaction", $.String, "StoreRollbackTransaction");

    $.Constant({Static:true , Public:false}, "StoreRowOwnedByOtherDataSource", $.String, "StoreRowOwnedByOtherDataSource");

    $.Constant({Static:true , Public:false}, "StoreSignatureNotValid", $.String, "StoreSignatureNotValid");

    $.Constant({Static:true , Public:false}, "StoreSourceAlreadyMounted", $.String, "StoreSourceAlreadyMounted");

    $.Constant({Static:true , Public:false}, "StoreSourceIdOutOfRange", $.String, "StoreSourceIdOutOfRange");

    $.Constant({Static:true , Public:false}, "StoreUnableToGetStoreKeyFromDPAPI", $.String, "StoreUnableToGetStoreKeyFromDPAPI");

    $.Constant({Static:true , Public:false}, "StoreUniqueIndexConstraintBroken", $.String, "StoreUniqueIndexConstraintBroken");

    $.Constant({Static:true , Public:false}, "StoreIsAlreadyLoaded", $.String, "StoreIsAlreadyLoaded");

    $.Constant({Static:true , Public:false}, "StoreInvalidDataFilePath", $.String, "StoreInvalidDataFilePath");

    $.Constant({Static:true , Public:false}, "StoreNoReparsePointAllowed", $.String, "StoreNoReparsePointAllowed");

    $.Constant({Static:true , Public:false}, "StoreFileInUse", $.String, "StoreFileInUse");

    $.Constant({Static:true , Public:false}, "UIAgentCrash", $.String, "UIAgentCrash");

    $.Constant({Static:true , Public:false}, "ClientCryptoSessionDisposed", $.String, "ClientCryptoSessionDisposed");

    $.Constant({Static:true , Public:false}, "ClientUnsupportedCryptoAlgorithm", $.String, "ClientUnsupportedCryptoAlgorithm");

    $.Constant({Static:true , Public:false}, "TooManyIssuedSecurityTokenParameters", $.String, "TooManyIssuedSecurityTokenParameters");

    $.Constant({Static:true , Public:false}, "LedgerEntryIncorrectType", $.String, "LedgerEntryIncorrectType");

    $.Constant({Static:true , Public:false}, "ClaimIdNull", $.String, "ClaimIdNull");

    $.Constant({Static:true , Public:false}, "InvalidSelfIssuedUri", $.String, "InvalidSelfIssuedUri");

    $.Constant({Static:true , Public:false}, "InvalidDisplayClaimType", $.String, "InvalidDisplayClaimType");

    $.Constant({Static:true , Public:false}, "NoAuthenticationServicesInCard", $.String, "NoAuthenticationServicesInCard");

    $.Constant({Static:true , Public:false}, "InvalidImportFile", $.String, "InvalidImportFile");

    $.Constant({Static:true , Public:false}, "SelfIssuedUriUsed", $.String, "SelfIssuedUriUsed");

    $.Constant({Static:true , Public:false}, "InvalidUriFormat", $.String, "InvalidUriFormat");

    $.Constant({Static:true , Public:false}, "SignatureNotVerified", $.String, "SignatureNotVerified");

    $.Constant({Static:true , Public:false}, "NoCertificateFoundInSignature", $.String, "NoCertificateFoundInSignature");

    $.Constant({Static:true , Public:false}, "ImportInaccesibleFile", $.String, "ImportInaccesibleFile");

    $.Constant({Static:true , Public:false}, "ImportFileNotFound", $.String, "ImportFileNotFound");

    $.Constant({Static:true , Public:false}, "SchemaValidationError", $.String, "SchemaValidationError");

    $.Constant({Static:true , Public:false}, "CannotOpenImportFile", $.String, "CannotOpenImportFile");

    $.Constant({Static:true , Public:false}, "InvalidImportFileName", $.String, "InvalidImportFileName");

    $.Constant({Static:true , Public:false}, "TooLongClaimValue", $.String, "TooLongClaimValue");

    $.Constant({Static:true , Public:false}, "MultipleIssuerInformation", $.String, "MultipleIssuerInformation");

    $.Constant({Static:true , Public:false}, "ExtendedInfoInSelfIssued", $.String, "ExtendedInfoInSelfIssued");

    $.Constant({Static:true , Public:false}, "MultiplePolicyElementsWithSameID", $.String, "MultiplePolicyElementsWithSameID");

    $.Constant({Static:true , Public:false}, "NoPolicyElementFound", $.String, "NoPolicyElementFound");

    $.Constant({Static:true , Public:false}, "MultipleTokenElementsFoundInPolicy", $.String, "MultipleTokenElementsFoundInPolicy");

    $.Constant({Static:true , Public:false}, "NoValidPolicyElementFound", $.String, "NoValidPolicyElementFound");

    $.Constant({Static:true , Public:false}, "IndigoNoSuitableEndpointsForAddress", $.String, "IndigoNoSuitableEndpointsForAddress");

    $.Constant({Static:true , Public:false}, "InvalidServiceUri", $.String, "InvalidServiceUri");

    $.Constant({Static:true , Public:false}, "EndpointNotFound", $.String, "EndpointNotFound");

    $.Constant({Static:true , Public:false}, "NonHttpsURIFound", $.String, "NonHttpsURIFound");

    $.Constant({Static:true , Public:false}, "InvalidDisplayToken", $.String, "InvalidDisplayToken");

    $.Constant({Static:true , Public:false}, "InvalidIPSTSPolicy", $.String, "InvalidIPSTSPolicy");

    $.Constant({Static:true , Public:false}, "NoSymmetricKeyFound", $.String, "NoSymmetricKeyFound");

    $.Constant({Static:true , Public:false}, "InvalidIssuerForIssuedToken", $.String, "InvalidIssuerForIssuedToken");

    $.Constant({Static:true , Public:false}, "FailedReadingIPSTSPolicy", $.String, "FailedReadingIPSTSPolicy");

    $.Constant({Static:true , Public:false}, "IPSTSClientInvalidTokenReference", $.String, "IPSTSClientInvalidTokenReference");

    $.Constant({Static:true , Public:false}, "UnsupportedEncryptionAlgorithm", $.String, "UnsupportedEncryptionAlgorithm");

    $.Constant({Static:true , Public:false}, "UnsupportedEncryptWithAlgorithm", $.String, "UnsupportedEncryptWithAlgorithm");

    $.Constant({Static:true , Public:false}, "UnsupportedSignWithAlgorithm", $.String, "UnsupportedSignWithAlgorithm");

    $.Constant({Static:true , Public:false}, "UnsupportedSignatureAlgorithm", $.String, "UnsupportedSignatureAlgorithm");

    $.Constant({Static:true , Public:false}, "CardDoesNotMatchRequiredAuthType", $.String, "CardDoesNotMatchRequiredAuthType");

    $.Constant({Static:true , Public:false}, "IdentityProviderRequestedUnsupportedAuthType", $.String, "IdentityProviderRequestedUnsupportedAuthType");

    $.Constant({Static:true , Public:false}, "ProblemRetrievingTokenFromIdentityProvider", $.String, "ProblemRetrievingTokenFromIdentityProvider");

    $.Constant({Static:true , Public:false}, "OnlyPSha1SupportedCurrently", $.String, "OnlyPSha1SupportedCurrently");

    $.Constant({Static:true , Public:false}, "InvalidEntropyContents", $.String, "InvalidEntropyContents");

    $.Constant({Static:true , Public:false}, "IPStsPolicyRequestingNonPpidClaims", $.String, "IPStsPolicyRequestingNonPpidClaims");

    $.Constant({Static:true , Public:false}, "NoCertificateInEndPoint", $.String, "NoCertificateInEndPoint");

    $.Constant({Static:true , Public:false}, "StsCommunicationException", $.String, "StsCommunicationException");

    $.Constant({Static:true , Public:false}, "ClientAPIInfocardError", $.String, "ClientAPIInfocardError");

    $.Constant({Static:true , Public:false}, "ClientAPIUserCancellationError", $.String, "ClientAPIUserCancellationError");

    $.Constant({Static:true , Public:false}, "ClientAPIServiceNotStartedError", $.String, "ClientAPIServiceNotStartedError");

    $.Constant({Static:true , Public:false}, "ClientAPIUntrustedRecipientError", $.String, "ClientAPIUntrustedRecipientError");

    $.Constant({Static:true , Public:false}, "ClientAPIInvalidIdentity", $.String, "ClientAPIInvalidIdentity");

    $.Constant({Static:true , Public:false}, "ClientAPIServiceBusy", $.String, "ClientAPIServiceBusy");

    $.Constant({Static:true , Public:false}, "ClientStsCommunicationException", $.String, "ClientStsCommunicationException");

    $.Constant({Static:true , Public:false}, "ClientAPIInvalidPolicy", $.String, "ClientAPIInvalidPolicy");

    $.Constant({Static:true , Public:false}, "ClientAPIUnsupportedPolicyOptions", $.String, "ClientAPIUnsupportedPolicyOptions");

    $.Constant({Static:true , Public:false}, "ClientAPICannotImport", $.String, "ClientAPICannotImport");

    $.Constant({Static:true , Public:false}, "ClientAPIUIInitializationFailed", $.String, "ClientAPIUIInitializationFailed");

    $.Constant({Static:true , Public:false}, "ClientAPIServiceNotInstalledError", $.String, "ClientAPIServiceNotInstalledError");

    $.Constant({Static:true , Public:false}, "ClientAPIDetailedExceptionMessage", $.String, "ClientAPIDetailedExceptionMessage");

    $.Constant({Static:true , Public:false}, "LogoInvalidAsnLength", $.String, "LogoInvalidAsnLength");

    $.Constant({Static:true , Public:false}, "LogoInvalidCertificateLength", $.String, "LogoInvalidCertificateLength");

    $.Constant({Static:true , Public:false}, "LogoInvalidLogoType", $.String, "LogoInvalidLogoType");

    $.Constant({Static:true , Public:false}, "LogosPresentButNoHashes", $.String, "LogosPresentButNoHashes");

    $.Constant({Static:true , Public:false}, "LogoHashValidationFailed", $.String, "LogoHashValidationFailed");

    $.Constant({Static:true , Public:false}, "LogoCouldNotCreateHashAlgorithm", $.String, "LogoCouldNotCreateHashAlgorithm");

    $.Constant({Static:true , Public:false}, "LogoUnsupportedType", $.String, "LogoUnsupportedType");

    $.Constant({Static:true , Public:false}, "LogoUnsupportedIndirectReferences", $.String, "LogoUnsupportedIndirectReferences");

    $.Constant({Static:true , Public:false}, "LogoUnsupportedAudio", $.String, "LogoUnsupportedAudio");

    $.Constant({Static:true , Public:false}, "UnexpectedElement", $.String, "UnexpectedElement");

    $.Constant({Static:true , Public:false}, "GeneralInformation", $.String, "GeneralInformation");

    $.Constant({Static:true , Public:false}, "InvalidRecipientSpecified", $.String, "InvalidRecipientSpecified");

    $.Constant({Static:true , Public:false}, "NoRecipientCertificateFound", $.String, "NoRecipientCertificateFound");

    $.Constant({Static:true , Public:false}, "RecipientCertificateNotValid", $.String, "RecipientCertificateNotValid");

    $.Constant({Static:true , Public:false}, "InvalidPolicySpecified", $.String, "InvalidPolicySpecified");

    $.Constant({Static:true , Public:false}, "NonApprovedlistedElementFound", $.String, "NonApprovedlistedElementFound");

    $.Constant({Static:true , Public:false}, "NoClaimsFoundInPolicy", $.String, "NoClaimsFoundInPolicy");

    $.Constant({Static:true , Public:false}, "UnableToQueueThreadpool", $.String, "UnableToQueueThreadpool");

    $.Constant({Static:true , Public:false}, "TooManyClientRequests", $.String, "TooManyClientRequests");

    $.Constant({Static:true , Public:false}, "TooManyClientUIConnections", $.String, "TooManyClientUIConnections");

    $.Constant({Static:true , Public:false}, "StoreAclsTamperedWith", $.String, "StoreAclsTamperedWith");

    $.Constant({Static:true , Public:false}, "StoreVersionNotSupported", $.String, "StoreVersionNotSupported");

    $.Constant({Static:true , Public:false}, "NoCachedCertificateForRecipient", $.String, "NoCachedCertificateForRecipient");

    $.Constant({Static:true , Public:false}, "NoCardNameSpecified", $.String, "NoCardNameSpecified");

    $.Constant({Static:true , Public:false}, "GeneralExceptionMessage", $.String, "GeneralExceptionMessage");

    $.Constant({Static:true , Public:false}, "EventLogMessage", $.String, "EventLogMessage");

    $.Constant({Static:true , Public:false}, "GeneralTraceMessage", $.String, "GeneralTraceMessage");

    $.Constant({Static:true , Public:false}, "InnerExceptionTraceFormat", $.String, "InnerExceptionTraceFormat");

    $.Constant({Static:true , Public:false}, "CallStackTraceFormat", $.String, "CallStackTraceFormat");

    $.Constant({Static:true , Public:false}, "SelfIssuedIssuerName", $.String, "SelfIssuedIssuerName");

    $.Constant({Static:true , Public:false}, "GivenNameText", $.String, "GivenNameText");

    $.Constant({Static:true , Public:false}, "SurnameText", $.String, "SurnameText");

    $.Constant({Static:true , Public:false}, "EmailAddressText", $.String, "EmailAddressText");

    $.Constant({Static:true , Public:false}, "StreetAddressText", $.String, "StreetAddressText");

    $.Constant({Static:true , Public:false}, "LocalityText", $.String, "LocalityText");

    $.Constant({Static:true , Public:false}, "StateOrProvinceText", $.String, "StateOrProvinceText");

    $.Constant({Static:true , Public:false}, "PostalCodeText", $.String, "PostalCodeText");

    $.Constant({Static:true , Public:false}, "CountryText", $.String, "CountryText");

    $.Constant({Static:true , Public:false}, "HomePhoneText", $.String, "HomePhoneText");

    $.Constant({Static:true , Public:false}, "OtherPhoneText", $.String, "OtherPhoneText");

    $.Constant({Static:true , Public:false}, "MobilePhoneText", $.String, "MobilePhoneText");

    $.Constant({Static:true , Public:false}, "DateOfBirthText", $.String, "DateOfBirthText");

    $.Constant({Static:true , Public:false}, "GenderText", $.String, "GenderText");

    $.Constant({Static:true , Public:false}, "PPIDText", $.String, "PPIDText");

    $.Constant({Static:true , Public:false}, "WebPageText", $.String, "WebPageText");

    $.Constant({Static:true , Public:false}, "GivenNameDescription", $.String, "GivenNameDescription");

    $.Constant({Static:true , Public:false}, "SurnameDescription", $.String, "SurnameDescription");

    $.Constant({Static:true , Public:false}, "EmailAddressDescription", $.String, "EmailAddressDescription");

    $.Constant({Static:true , Public:false}, "StreetAddressDescription", $.String, "StreetAddressDescription");

    $.Constant({Static:true , Public:false}, "LocalityDescription", $.String, "LocalityDescription");

    $.Constant({Static:true , Public:false}, "StateOrProvinceDescription", $.String, "StateOrProvinceDescription");

    $.Constant({Static:true , Public:false}, "PostalCodeDescription", $.String, "PostalCodeDescription");

    $.Constant({Static:true , Public:false}, "CountryDescription", $.String, "CountryDescription");

    $.Constant({Static:true , Public:false}, "HomePhoneDescription", $.String, "HomePhoneDescription");

    $.Constant({Static:true , Public:false}, "OtherPhoneDescription", $.String, "OtherPhoneDescription");

    $.Constant({Static:true , Public:false}, "MobilePhoneDescription", $.String, "MobilePhoneDescription");

    $.Constant({Static:true , Public:false}, "DateOfBirthDescription", $.String, "DateOfBirthDescription");

    $.Constant({Static:true , Public:false}, "GenderDescription", $.String, "GenderDescription");

    $.Constant({Static:true , Public:false}, "PPIDDescription", $.String, "PPIDDescription");

    $.Constant({Static:true , Public:false}, "WebPageDescription", $.String, "WebPageDescription");

    $.Constant({Static:true , Public:false}, "NonceLengthTooShort", $.String, "NonceLengthTooShort");

    $.Constant({Static:true , Public:false}, "Invalid3DesKeySize", $.String, "Invalid3DesKeySize");

    $.Constant({Static:true , Public:false}, "CouldNotGenerateStrong3DesKey", $.String, "CouldNotGenerateStrong3DesKey");

    $.Constant({Static:true , Public:false}, "KeyTypeNotRecognized", $.String, "KeyTypeNotRecognized");

    $.Constant({Static:true , Public:false}, "FailedToBindToService", $.String, "FailedToBindToService");

    $.Constant({Static:true , Public:false}, "SchemaValidationFailed", $.String, "SchemaValidationFailed");

    $.Constant({Static:true , Public:false}, "ValueMustBePositive", $.String, "ValueMustBePositive");

    $.Constant({Static:true , Public:false}, "ValueMustBeInRange", $.String, "ValueMustBeInRange");

    $.Constant({Static:true , Public:false}, "ValueMustBeNonNegative", $.String, "ValueMustBeNonNegative");

    $.Constant({Static:true , Public:false}, "NoProofKeyOnlyAllowedInBrowser", $.String, "NoProofKeyOnlyAllowedInBrowser");

    $.Constant({Static:true , Public:false}, "ProofKeyTypeMismatch", $.String, "ProofKeyTypeMismatch");

    $.Constant({Static:true , Public:false}, "SymmetricProofKeyLengthMismatch", $.String, "SymmetricProofKeyLengthMismatch");

    $.Constant({Static:true , Public:false}, "X509ChainBuildFail", $.String, "X509ChainBuildFail");

    $.Constant({Static:true , Public:false}, "X509ChainFailAndPeerTrustFail", $.String, "X509ChainFailAndPeerTrustFail");

    $.Constant({Static:true , Public:false}, "FaultMessageFormat", $.String, "FaultMessageFormat");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.InfoCards.Diagnostics");
/* enum Microsoft.InfoCards.Diagnostics.InfoCardTraceCode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.InfoCards.Diagnostics.InfoCardTraceCode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    General: 5000, 
    GeneralInformation: 5001, 
    Store: 10000, 
    StoreLoading: 10001, 
    StoreBeginTransaction: 10002, 
    StoreCommitTransaction: 10003, 
    StoreRollbackTransaction: 10004, 
    StoreClosing: 10005, 
    StoreFailedToOpenStore: 10006, 
    StoreSignatureNotValid: 10007, 
    StoreInvalidKey: 10008, 
    StoreDeleting: 10009, 
    UIAgent: 20000, 
    AgentInfoCardSelected: 20001, 
    AgentPiiDisclosed: 20002, 
    Engine: 30000, 
    Client: 40000, 
    ClientInformation: 40001, 
    Service: 50000, 
  }
);

/* enum Microsoft.InfoCards.Diagnostics.EventCode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.InfoCards.Diagnostics.EventCode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    E_INVALIDARG: -2147483645, 
    E_OUTOFMEMORY: -2147024882, 
    SCARD_W_CANCELLED_BY_USER: -2146434962, 
    E_ICARD_COMMUNICATION: -1073413888, 
    E_ICARD_DATA_ACCESS: -1073413887, 
    E_ICARD_EXPORT: -1073413886, 
    E_ICARD_IDENTITY: -1073413885, 
    E_ICARD_IMPORT: -1073413884, 
    E_ICARD_ARGUMENT: -1073413883, 
    E_ICARD_REQUEST: -1073413882, 
    E_ICARD_INFORMATIONCARD: -1073413881, 
    E_ICARD_STOREKEY: -1073413880, 
    E_ICARD_LOGOVALIDATION: -1073413879, 
    E_ICARD_PASSWORDVALIDATION: -1073413878, 
    E_ICARD_POLICY: -1073413877, 
    E_ICARD_PROCESSDIED: -1073413876, 
    E_ICARD_SERVICEBUSY: -1073413875, 
    E_ICARD_SERVICE: -1073413874, 
    E_ICARD_SHUTTINGDOWN: -1073413873, 
    E_ICARD_TOKENCREATION: -1073413872, 
    E_ICARD_TRUSTEXCHANGE: -1073413871, 
    E_ICARD_UNTRUSTED: -1073413870, 
    E_ICARD_USERCANCELLED: -1073413869, 
    E_ICARD_STORE_IMPORT: -1073413868, 
    E_ICARD_FAILEDUISTART: -1073413867, 
    E_ICARD_UNSUPPORTED: -1073413866, 
    E_ICARD_MAXSESSIONCOUNT: -1073413865, 
    E_ICARD_FILE_ACCESS: -1073413864, 
    E_ICARD_MALFORMED_REQUEST: -1073413863, 
    E_ICARD_UI_INITIALIZATION: -1073413862, 
    E_ICARD_REFRESH_REQUIRED: -1073413760, 
    E_ICARD_MISSING_APPLIESTO: -1073413759, 
    E_ICARD_INVALID_PROOF_KEY: -1073413758, 
    E_ICARD_UNKNOWN_REFERENCE: -1073413757, 
    E_ICARD_FAILED_REQUIRED_CLAIMS: -1073413756, 
    AUDIT_CARD_WRITTEN: 1074070016, 
    AUDIT_CARD_DELETE: 1074070017, 
    AUDIT_CARD_IMPORT: 1074070018, 
    AUDIT_STORE_IMPORT: 1074070019, 
    AUDIT_STORE_EXPORT: 1074070020, 
    AUDIT_STORE_DELETE: 1074070021, 
    AUDIT_SERVICE_IDLE_STOP: 1074070022, 
  }
);

/* enum Microsoft.InfoCards.Diagnostics.InfoCardEventCategory */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.InfoCards.Diagnostics.InfoCardEventCategory", 
    BaseType: $asm07.TypeRef("System.Int16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    General: 1, 
  }
);

/* class Microsoft.InfoCards.Diagnostics.DiagnosticUtility */ 

(function DiagnosticUtility$Members () {
  var $, $thisType;





















  JSIL.MakeStaticClass("Microsoft.InfoCards.Diagnostics.DiagnosticUtility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DebugAssert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "DebugAssert", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "FailFast", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DiagnosticTrace", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExceptionUtility", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceCritical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceInformation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceVerbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceWarning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldUseActivity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TracingEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Utility", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.Utility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExceptionUtility", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUtility", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.Utility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InitDiagnosticTraceImpl", 
      new JSIL.MethodSignature(null, [$asm33.TypeRef("System.ServiceModel.Diagnostics.TraceSourceKind"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeTracing", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeFinalHandler", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldTrace", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "TraceSourceName", $.String, "CardSpace");

    $.Constant({Static:true , Public:false}, "EventSourceName", $.String, "CardSpace 4.0.0.0");

    $.Constant({Static:true , Public:false}, "DefaultTraceListenerName", $.String, "Default");

    $.Field({Static:true , Public:false}, "level", $asm0A.TypeRef("System.Diagnostics.SourceLevels"), function ($pi) {
        return $asm0A.System.Diagnostics.SourceLevels.Off;
      });

    $.Field({Static:true , Public:false}, "tracingEnabled", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldUseActivity", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceVerbose", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceInformation", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceWarning", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceError", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceCritical", $.Boolean, false);

    $.Field({Static:true , Public:false}, "diagnosticTrace", $asm33.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"));

    $.Field({Static:true , Public:false}, "lockObject", $.Object);

    $.Field({Static:true , Public:false}, "exceptionUtility", $asm33.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"), null);

    $.Field({Static:true , Public:false}, "utility", $asm33.TypeRef("System.ServiceModel.Diagnostics.Utility"), null);

    $.Property({Static:true , Public:false}, "DiagnosticTrace", $asm33.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"));

    $.Property({Static:true , Public:false}, "ExceptionUtility", $asm33.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"));

    $.Property({Static:true , Public:false}, "Utility", $asm33.TypeRef("System.ServiceModel.Diagnostics.Utility"));

    $.Property({Static:true , Public:false}, "TracingEnabled", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceCritical", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldUseActivity", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceError", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceWarning", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceInformation", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceVerbose", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.InfoCards.Diagnostics.InfoCardTrace */ 

(function InfoCardTrace$Members () {
  var $, $thisType;
















































  JSIL.MakeStaticClass("Microsoft.InfoCards.Diagnostics.InfoCardTrace", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Assert", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Audit", 
      JSIL.MethodSignature.Action($asm1A.TypeRef("Microsoft.InfoCards.Diagnostics.EventCode"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Audit", 
      new JSIL.MethodSignature(null, [$asm1A.TypeRef("Microsoft.InfoCards.Diagnostics.EventCode"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildMessage", 
      new JSIL.MethodSignature($.String, [$asm1A.TypeRef("Microsoft.InfoCards.InfoCardBaseException")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CloseInvalidOutSafeHandle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"))
    );

    $.ExternalMethod({Static:true , Public:true }, "DebugAssert", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Parameter(2, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "FailFast", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceCritical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceInformation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceVerbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceWarning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetActivityId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMsdnTraceCode", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTraceString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsFatal", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "LogEvent", 
      new JSIL.MethodSignature(null, [
          $asm1A.TypeRef("Microsoft.InfoCards.Diagnostics.EventCode"), $.String, 
          $asm0A.TypeRef("System.Diagnostics.EventLogEntryType")
        ])
    );

    $.PInvokeMethod({Static:true , Public:false}, "ReportEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.Int16, 
          $.UInt16, $.UInt32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int16, 
          $.Int32, $asm07.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "advapi32", 
        CharSet: 'unicode',
        EntryPoint: "ReportEventW", 
      }
    );

    $.ExternalMethod({Static:true , Public:true }, "SetActivityId", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ShouldTrace", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperArgument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperArgumentNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperArgumentNull", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperCritical", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperErrorWithNoLogging", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperWarning", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowInvalidArgumentConditional", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThunkCallback", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.TimerCallback"), [$asm07.TypeRef("System.Threading.TimerCallback")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThunkCallback", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.WaitCallback"), [$asm07.TypeRef("System.Threading.WaitCallback")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Parameter(2, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "TraceAndLogException", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TraceCritical", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "TraceCritical", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "TraceDebug", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "TraceDebug", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "TraceError", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "TraceError", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "TraceException", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "TraceInfo", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "TraceInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "TraceInternal", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Parameter(2, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "TraceVerbose", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "TraceVerbose", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "TraceWarning", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "TraceWarning", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:true , Public:false}, "traceCodes", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.String]));

    $.Constant({Static:true , Public:false}, "InfoCardEventSource", $.String, "CardSpace 4.0.0.0");

    $.Property({Static:true , Public:true }, "ShouldTraceCritical", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceError", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceWarning", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceInformation", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceVerbose", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.InfoCards.Diagnostics.InfoCardTrace+TraceCode */ 

(function TraceCode$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.InfoCards.Diagnostics.InfoCardTrace+TraceCode", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "IdentityModelSelectors", $.Int32, 851968);

    $.Constant({Static:true , Public:true }, "GeneralInformation", $.Int32, 851969);

    $.Constant({Static:true , Public:true }, "StoreLoading", $.Int32, 851970);

    $.Constant({Static:true , Public:true }, "StoreBeginTransaction", $.Int32, 851971);

    $.Constant({Static:true , Public:true }, "StoreCommitTransaction", $.Int32, 851972);

    $.Constant({Static:true , Public:true }, "StoreRollbackTransaction", $.Int32, 851973);

    $.Constant({Static:true , Public:true }, "StoreClosing", $.Int32, 851974);

    $.Constant({Static:true , Public:true }, "StoreFailedToOpenStore", $.Int32, 851975);

    $.Constant({Static:true , Public:true }, "StoreSignatureNotValid", $.Int32, 851976);

    $.Constant({Static:true , Public:true }, "StoreDeleting", $.Int32, 851977);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.InfoCards.Diagnostics.InfoCardTrace+SafeEventLogHandle */ 

(function SafeEventLogHandle$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "Microsoft.InfoCards.Diagnostics.InfoCardTrace+SafeEventLogHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Construct", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.PInvokeMethod({Static:true , Public:false}, "DeregisterEventSource", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "advapi32", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.PInvokeMethod({Static:true , Public:false}, "RegisterEventSource", 
      new JSIL.MethodSignature($.Type, [$.String, $.String]), 
      {
        Module: "advapi32", 
        CharSet: 'unicode',
        EntryPoint: "RegisterEventSourceW", 
      }
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.InfoCards.Diagnostics.InfoCardTraceRecord */ 

(function InfoCardTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "Microsoft.InfoCards.Diagnostics.InfoCardTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "m_eventID", $.String);

    $.Field({Static:false, Public:false}, "m_message", $.String);

    $.Constant({Static:true , Public:false}, "InfoCardEventIdBase", $.String, "http://schemas.microsoft.com/2004/11/InfoCard/");

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.IdentityModel");
JSIL.DeclareNamespace("System.IdentityModel.Selectors");
/* class System.IdentityModel.Selectors.CryptoHandle */ 

(function CryptoHandle$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.CryptoHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.DateTime"), 
          $.IntPtr, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Duplicate", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expiration", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InternalHandle", 
      JSIL.MethodSignature.Return($asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDuplicate", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_isDisposed", $.Boolean);

    $.Field({Static:false, Public:false}, "m_internalHandle", $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"));

    $.Property({Static:false, Public:true }, "InternalHandle", $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"));

    $.Property({Static:false, Public:true }, "Expiration", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "Parameters", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.ProofTokenCryptoHandle */ 

(function ProofTokenCryptoHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm1A.TypeRef("System.IdentityModel.Selectors.CryptoHandle"), 
      Name: "System.IdentityModel.Selectors.ProofTokenCryptoHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.DateTime"), 
          $.IntPtr, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateProofToken", 
      JSIL.MethodSignature.Return($asm1A.TypeRef("System.IdentityModel.Selectors.InfoCardProofToken"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnCreateProofToken", 
      JSIL.MethodSignature.Return($asm1A.TypeRef("System.IdentityModel.Selectors.InfoCardProofToken"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.AsymmetricCryptoHandle */ 

(function AsymmetricCryptoHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm1A.TypeRef("System.IdentityModel.Selectors.ProofTokenCryptoHandle"), 
      Name: "System.IdentityModel.Selectors.AsymmetricCryptoHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.DateTime"), 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnCreateProofToken", 
      JSIL.MethodSignature.Return($asm1A.TypeRef("System.IdentityModel.Selectors.InfoCardProofToken"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDuplicate", 
      JSIL.MethodSignature.Return($asm1A.TypeRef("System.IdentityModel.Selectors.CryptoHandle"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InternalRefCountedHandle */ 

(function InternalRefCountedHandle$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.IdentityModel.Selectors.InternalRefCountedHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRef", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CloseCryptoHandle", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "infocardapi.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Expiration", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Release", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfInvalid", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_refcount", $.Int32);

    $.Field({Static:false, Public:false}, "m_expiration", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_parameters", $.Object);

    $.Property({Static:false, Public:true }, "Parameters", $.Object);

    $.Property({Static:false, Public:true }, "Expiration", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.HashCryptoHandle */ 

(function HashCryptoHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm1A.TypeRef("System.IdentityModel.Selectors.CryptoHandle"), 
      Name: "System.IdentityModel.Selectors.HashCryptoHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.DateTime"), 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDuplicate", 
      JSIL.MethodSignature.Return($asm1A.TypeRef("System.IdentityModel.Selectors.CryptoHandle"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InfoCardAsymmetricCrypto */ 

(function InfoCardAsymmetricCrypto$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.AsymmetricSecurityKey"), 
      Name: "System.IdentityModel.Selectors.InfoCardAsymmetricCrypto", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm1A.TypeRef("System.IdentityModel.Selectors.AsymmetricCryptoHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAsymmetricAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashAlgorithmForSignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSignatureDeformatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureDeformatter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSignatureFormatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureFormatter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasPrivateKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsAsymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSupportedAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:false}, "m_rsa", $asm1A.TypeRef("System.IdentityModel.Selectors.InfoCardRSACryptoProvider"));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.Selectors.RpcGenericXmlToken */ 

(function RpcGenericXmlToken$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.Selectors.RpcGenericXmlToken", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "createDate", $.Int64);

    $.Field({Static:false, Public:true }, "expiryDate", $.Int64);

    $.Field({Static:false, Public:true }, "xmlToken", $.String);

    $.Field({Static:false, Public:true }, "internalTokenReference", $.String);

    $.Field({Static:false, Public:true }, "externalTokenReference", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.CardSpaceSelector */ 

(function CardSpaceSelector$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.IdentityModel.Selectors.CardSpaceSelector", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateReaderWithQuotas", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryReader"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetShim", 
      JSIL.MethodSignature.Return($asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.GenericXmlSecurityToken"), [
          $asm2F.TypeRef("System.Xml.XmlElement"), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2F.TypeRef("System.Xml.XmlElement")]), 
          $asm2F.TypeRef("System.Xml.XmlElement"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.GenericXmlSecurityToken"), [$jsilcore.TypeRef("System.Array", [$asm1A.TypeRef("System.IdentityModel.Selectors.CardSpacePolicyElement")]), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Import", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Manage", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "XmlToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm2F.TypeRef("System.Xml.XmlElement")])])
    );

    $.Field({Static:true , Public:false}, "s_cardSpaceShim", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim"));

    $.Field({Static:true , Public:false}, "DefaultQuotas", $asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Constant({Static:true , Public:false}, "MaxPolicyChainLength", $.Int32, 50);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.ExceptionHelper */ 

(function ExceptionHelper$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.IdentityModel.Selectors.ExceptionHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ThrowIfCardSpaceException", 
      JSIL.MethodSignature.Action($.Int32)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.CardSpaceException */ 

(function CardSpaceException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.Selectors.CardSpaceException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InfoCardKeyedHashAlgorithm */ 

(function InfoCardKeyedHashAlgorithm$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.KeyedHashAlgorithm"), 
      Name: "System.IdentityModel.Selectors.InfoCardKeyedHashAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm1A.TypeRef("System.IdentityModel.Selectors.SymmetricCryptoHandle"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReuseTransform", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTransformMultipleBlocks", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HashSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InputBlockSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutputBlockSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_cryptoHandle", $asm1A.TypeRef("System.IdentityModel.Selectors.HashCryptoHandle"));

    $.Field({Static:false, Public:false}, "m_param", $asm1A.TypeRef("System.IdentityModel.Selectors.RpcHashCryptoParameters"));

    $.Field({Static:false, Public:false}, "m_cachedBlock", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "HashSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "InputBlockSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OutputBlockSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTransformMultipleBlocks", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReuseTransform", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InfoCardProofToken */ 

(function InfoCardProofToken$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
      Name: "System.IdentityModel.Selectors.InfoCardProofToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm1A.TypeRef("System.IdentityModel.Selectors.AsymmetricCryptoHandle"), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm1A.TypeRef("System.IdentityModel.Selectors.SymmetricCryptoHandle"), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitCrypto", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.Field({Static:false, Public:false}, "m_id", $.String);

    $.Field({Static:false, Public:false}, "m_expiration", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_securityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Field({Static:false, Public:false}, "m_securityKey", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InfoCardRSACryptoProvider */ 

(function InfoCardRSACryptoProvider$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.RSA"), 
      Name: "System.IdentityModel.Selectors.InfoCardRSACryptoProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm1A.TypeRef("System.IdentityModel.Selectors.AsymmetricCryptoHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Decrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Encrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExportParameters", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.RSAParameters"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXmlString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyExchangeAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SignatureAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportParameters", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.RSAParameters"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyHash", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.Field({Static:false, Public:false}, "m_cryptoHandle", $asm1A.TypeRef("System.IdentityModel.Selectors.AsymmetricCryptoHandle"));

    $.Field({Static:false, Public:false}, "m_params", $asm1A.TypeRef("System.IdentityModel.Selectors.RpcAsymmetricCryptoParameters"));

    $.Property({Static:false, Public:true , Virtual:true }, "SignatureAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "KeyExchangeAlgorithm", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InfoCardRSAOAEPKeyExchangeDeformatter */ 

(function InfoCardRSAOAEPKeyExchangeDeformatter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter"), 
      Name: "System.IdentityModel.Selectors.InfoCardRSAOAEPKeyExchangeDeformatter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptKeyExchange", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetKey", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.Field({Static:false, Public:false}, "m_rsaKey", $asm07.TypeRef("System.Security.Cryptography.RSA"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InfoCardRSAOAEPKeyExchangeFormatter */ 

(function InfoCardRSAOAEPKeyExchangeFormatter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.RSAOAEPKeyExchangeFormatter"), 
      Name: "System.IdentityModel.Selectors.InfoCardRSAOAEPKeyExchangeFormatter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKeyExchange", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetKey", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.Field({Static:false, Public:false}, "m_rsaKey", $asm07.TypeRef("System.Security.Cryptography.RSA"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InfoCardRSAPKCS1KeyExchangeDeformatter */ 

(function InfoCardRSAPKCS1KeyExchangeDeformatter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter"), 
      Name: "System.IdentityModel.Selectors.InfoCardRSAPKCS1KeyExchangeDeformatter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptKeyExchange", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetKey", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.Field({Static:false, Public:false}, "m_rsaKey", $asm07.TypeRef("System.Security.Cryptography.RSA"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InfoCardRSAPKCS1KeyExchangeFormatter */ 

(function InfoCardRSAPKCS1KeyExchangeFormatter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter"), 
      Name: "System.IdentityModel.Selectors.InfoCardRSAPKCS1KeyExchangeFormatter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKeyExchange", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetKey", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.Field({Static:false, Public:false}, "m_rsaKey", $asm07.TypeRef("System.Security.Cryptography.RSA"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InfoCardRSAPKCS1SignatureDeformatter */ 

(function InfoCardRSAPKCS1SignatureDeformatter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.RSAPKCS1SignatureDeformatter"), 
      Name: "System.IdentityModel.Selectors.InfoCardRSAPKCS1SignatureDeformatter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetHashAlgorithm", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetKey", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifySignature", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Field({Static:false, Public:false}, "m_rsaKey", $asm07.TypeRef("System.Security.Cryptography.RSA"));

    $.Field({Static:false, Public:false}, "m_strOID", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InfoCardRSAPKCS1SignatureFormatter */ 

(function InfoCardRSAPKCS1SignatureFormatter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.RSAPKCS1SignatureFormatter"), 
      Name: "System.IdentityModel.Selectors.InfoCardRSAPKCS1SignatureFormatter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSignature", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetHashAlgorithm", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetKey", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.Field({Static:false, Public:false}, "m_rsaKey", $asm07.TypeRef("System.Security.Cryptography.RSA"));

    $.Field({Static:false, Public:false}, "m_strOID", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InfoCardSymmetricAlgorithm */ 

(function InfoCardSymmetricAlgorithm$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.SymmetricAlgorithm"), 
      Name: "System.IdentityModel.Selectors.InfoCardSymmetricAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm1A.TypeRef("System.IdentityModel.Selectors.SymmetricCryptoHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateIV", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateKey", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Key", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "random", $asm07.TypeRef("System.Security.Cryptography.RandomNumberGenerator"));

    $.Field({Static:false, Public:false}, "m_cryptoHandle", $asm1A.TypeRef("System.IdentityModel.Selectors.SymmetricCryptoHandle"));

    $.Field({Static:false, Public:false}, "m_parameters", $asm1A.TypeRef("System.IdentityModel.Selectors.RpcSymmetricCryptoParameters"));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InfoCardSymmetricAlgorithm+CryptoTransform */ 

(function CryptoTransform$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.InfoCardSymmetricAlgorithm+CryptoTransform", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm1A.TypeRef("System.IdentityModel.Selectors.InfoCardSymmetricAlgorithm"), $asm1A.TypeRef("System.IdentityModel.Selectors.InfoCardSymmetricAlgorithm+CryptoTransform+Direction")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReuseTransform", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTransformMultipleBlocks", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InputBlockSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutputBlockSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformBlock", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformFinalBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_transCryptoHandle", $asm1A.TypeRef("System.IdentityModel.Selectors.TransformCryptoHandle"));

    $.Field({Static:false, Public:false}, "m_param", $asm1A.TypeRef("System.IdentityModel.Selectors.RpcTransformCryptoParameters"));

    $.Property({Static:false, Public:true , Virtual:true }, "InputBlockSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OutputBlockSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTransformMultipleBlocks", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReuseTransform", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), 
      /* 1 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.Selectors.InfoCardSymmetricAlgorithm+CryptoTransform+Direction */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.Selectors.InfoCardSymmetricAlgorithm+CryptoTransform+Direction", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Encrypt: 1, 
    Decrypt: 2, 
  }
);

/* class System.IdentityModel.Selectors.InfoCardSymmetricCrypto */ 

(function InfoCardSymmetricCrypto$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SymmetricSecurityKey"), 
      Name: "System.IdentityModel.Selectors.InfoCardSymmetricCrypto", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm1A.TypeRef("System.IdentityModel.Selectors.SymmetricCryptoHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateDerivedKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecryptionTransform", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEncryptionTransform", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIVSize", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetKeyedHashAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.KeyedHashAlgorithm"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSymmetricAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.SymmetricAlgorithm"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSymmetricKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsAsymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSupportedAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:false}, "m_cryptoHandle", $asm1A.TypeRef("System.IdentityModel.Selectors.SymmetricCryptoHandle"));

    $.Field({Static:false, Public:false}, "m_params", $asm1A.TypeRef("System.IdentityModel.Selectors.RpcSymmetricCryptoParameters"));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.InternalPolicyElement */ 

(function InternalPolicyElement$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.InternalPolicyElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm1A.TypeRef("System.IdentityModel.Selectors.CardSpacePolicyElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "DoMarshal", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:true , Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_element", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpacePolicyElement"));

    $.Field({Static:false, Public:false}, "m_nativeElement", $asm1A.TypeRef("System.IdentityModel.Selectors.NativePolicyElement"));

    $.Field({Static:false, Public:false}, "m_nativePtr", $.IntPtr);

    $.Property({Static:true , Public:true }, "Size", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.IdentityModel.Selectors.NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "GetProcAddress", 
      new JSIL.MethodSignature($.IntPtr, [$asm1A.TypeRef("System.IdentityModel.Selectors.SafeLibraryHandle"), $.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'ansi',
        Parameters: [
          {
            NativeType: "LPStr"
          }
        ]
      }
    );

    $.ExternalMethod({Static:true , Public:true }, "GetProcAddressWrapper", 
      new JSIL.MethodSignature($.IntPtr, [$asm1A.TypeRef("System.IdentityModel.Selectors.SafeLibraryHandle"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowWin32ExceptionWithContext", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.Win32Exception"), [$asm0A.TypeRef("System.ComponentModel.Win32Exception"), $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.Selectors.NativePolicyElement */ 

(function NativePolicyElement$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.Selectors.NativePolicyElement", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "targetEndpointAddress", $.String);

    $.Field({Static:false, Public:true }, "issuerEndpointAddress", $.String);

    $.Field({Static:false, Public:true }, "issuedTokenParameters", $.String);

    $.Field({Static:false, Public:true }, "policyNoticeLink", $.String);

    $.Field({Static:false, Public:true }, "policyNoticeVersion", $.Int32);

    $.Field({Static:false, Public:true }, "isManagedCardProvider", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.PolicyChain */ 

(function PolicyChain$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.PolicyChain", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm1A.TypeRef("System.IdentityModel.Selectors.CardSpacePolicyElement")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "DoMarshal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_nativeChain", $asm1A.TypeRef("Microsoft.InfoCards.HGlobalSafeHandle"));

    $.Field({Static:false, Public:false}, "m_chain", $jsilcore.TypeRef("System.Array", [$asm1A.TypeRef("System.IdentityModel.Selectors.InternalPolicyElement")]));

    $.Property({Static:false, Public:true }, "Length", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.Selectors.RpcAsymmetricCryptoParameters */ 

(function RpcAsymmetricCryptoParameters$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.Selectors.RpcAsymmetricCryptoParameters", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "keySize", $.Int32);

    $.Field({Static:false, Public:true }, "keyExchangeAlgorithm", $.String);

    $.Field({Static:false, Public:true }, "signatureAlgorithm", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.Selectors.RpcHashCryptoParameters */ 

(function RpcHashCryptoParameters$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.Selectors.RpcHashCryptoParameters", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "hashSize", $.Int32);

    $.Field({Static:false, Public:true }, "transform", $asm1A.TypeRef("System.IdentityModel.Selectors.RpcTransformCryptoParameters"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.Selectors.RpcInfoCardCryptoHandle */ 

(function RpcInfoCardCryptoHandle$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.Selectors.RpcInfoCardCryptoHandle", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "type", $asm1A.TypeRef("System.IdentityModel.Selectors.RpcInfoCardCryptoHandle+HandleType"));

    $.Field({Static:false, Public:true }, "expiration", $.Int64);

    $.Field({Static:false, Public:true }, "cryptoParameters", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.Selectors.RpcInfoCardCryptoHandle+HandleType */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.Selectors.RpcInfoCardCryptoHandle+HandleType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Asymmetric: 1, 
    Symmetric: 2, 
    Transform: 3, 
    Hash: 4, 
  }
);

/* struct System.IdentityModel.Selectors.RpcInfoCardOptions */ 

(function RpcInfoCardOptions$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.Selectors.RpcInfoCardOptions", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "UISuppression", $.Boolean);

    $.Field({Static:false, Public:true }, "cchKeyLength", $.Int32);

    $.Field({Static:false, Public:true }, "keyType", $.String);

    $.Field({Static:false, Public:true }, "cbKeyValue", $.Int32);

    $.Field({Static:false, Public:true }, "keyValue", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.Selectors.RpcSymmetricCryptoParameters */ 

(function RpcSymmetricCryptoParameters$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.Selectors.RpcSymmetricCryptoParameters", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "keySize", $.Int32);

    $.Field({Static:false, Public:true }, "blockSize", $.Int32);

    $.Field({Static:false, Public:true }, "feedbackSize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.Selectors.RpcTokenRequestDetail */ 

(function RpcTokenRequestDetail$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.Selectors.RpcTokenRequestDetail", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "uriLength", $.Int32);

    $.Field({Static:false, Public:true }, "recipientUri", $.String);

    $.Field({Static:false, Public:true }, "cbRecipientToken", $.Int32);

    $.Field({Static:false, Public:true }, "recipientToken", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "cchPolicy", $.Int32);

    $.Field({Static:false, Public:true }, "policy", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.Selectors.RpcTransformCryptoParameters */ 

(function RpcTransformCryptoParameters$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.Selectors.RpcTransformCryptoParameters", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "inputBlockSize", $.Int32);

    $.Field({Static:false, Public:true }, "outputBlockSize", $.Int32);

    $.Field({Static:false, Public:true }, "canTransformMultipleBlocks", $.Boolean);

    $.Field({Static:false, Public:true }, "canReuseTransform", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.ServiceNotStartedException */ 

(function ServiceNotStartedException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.Selectors.ServiceNotStartedException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.StsCommunicationException */ 

(function StsCommunicationException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.Selectors.StsCommunicationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SymmetricCryptoHandle */ 

(function SymmetricCryptoHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm1A.TypeRef("System.IdentityModel.Selectors.ProofTokenCryptoHandle"), 
      Name: "System.IdentityModel.Selectors.SymmetricCryptoHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.DateTime"), 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnCreateProofToken", 
      JSIL.MethodSignature.Return($asm1A.TypeRef("System.IdentityModel.Selectors.InfoCardProofToken"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDuplicate", 
      JSIL.MethodSignature.Return($asm1A.TypeRef("System.IdentityModel.Selectors.CryptoHandle"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.ThrowOnMultipleAssignment`1 */ 

(function ThrowOnMultipleAssignment$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.ThrowOnMultipleAssignment`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.Field({Static:false, Public:false}, "m_errorString", $.String);

    $.Field({Static:false, Public:false}, "m_value", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "Value", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.TransformCryptoHandle */ 

(function TransformCryptoHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm1A.TypeRef("System.IdentityModel.Selectors.CryptoHandle"), 
      Name: "System.IdentityModel.Selectors.TransformCryptoHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.DateTime"), 
          $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDuplicate", 
      JSIL.MethodSignature.Return($asm1A.TypeRef("System.IdentityModel.Selectors.CryptoHandle"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.UntrustedRecipientException */ 

(function UntrustedRecipientException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.Selectors.UntrustedRecipientException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.UserCancellationException */ 

(function UserCancellationException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.Selectors.UserCancellationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.ServiceBusyException */ 

(function ServiceBusyException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.Selectors.ServiceBusyException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.IdentityValidationException */ 

(function IdentityValidationException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.Selectors.IdentityValidationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.PolicyValidationException */ 

(function PolicyValidationException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.Selectors.PolicyValidationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.UnsupportedPolicyOptionsException */ 

(function UnsupportedPolicyOptionsException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.Selectors.UnsupportedPolicyOptionsException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.UIInitializationException */ 

(function UIInitializationException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.Selectors.UIInitializationException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SafeTokenHandle */ 

(function SafeTokenHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.IdentityModel.Selectors.SafeTokenHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:true }, "FreeToken", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "infocardapi.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.CardSpacePolicyElement */ 

(function CardSpacePolicyElement$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.CardSpacePolicyElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $asm2F.TypeRef("System.Xml.XmlElement"), 
          $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm2F.TypeRef("System.Xml.XmlElement")]), $asm0A.TypeRef("System.Uri"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsManagedIssuer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Issuer", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm2F.TypeRef("System.Xml.XmlElement")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PolicyNoticeLink", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PolicyNoticeVersion", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsManagedIssuer", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Issuer", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PolicyNoticeLink", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PolicyNoticeVersion", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Target", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.Field({Static:false, Public:false}, "m_target", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Field({Static:false, Public:false}, "m_issuer", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Field({Static:false, Public:false}, "m_parameters", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm2F.TypeRef("System.Xml.XmlElement")]));

    $.Field({Static:false, Public:false}, "m_policyNoticeLink", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "m_policyNoticeVersion", $.Int32);

    $.Field({Static:false, Public:false}, "m_isManagedIssuer", $.Boolean);

    $.Property({Static:false, Public:true }, "IsManagedIssuer", $.Boolean);

    $.Property({Static:false, Public:true }, "Target", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true }, "Issuer", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true }, "Parameters", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm2F.TypeRef("System.Xml.XmlElement")]));

    $.Property({Static:false, Public:true }, "PolicyNoticeLink", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "PolicyNoticeVersion", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.CardSpaceShim */ 

(function CardSpaceShim$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.CardSpaceShim", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCardSpaceImplementationDll", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetV2ImplementationDllPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "InitializeIfNecessary", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSafeFile", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Constant({Static:true , Public:false}, "REDIRECT_DLL_REG_KEY", $.String, "software\\microsoft\\cardspace\\v1");

    $.Constant({Static:true , Public:false}, "REDIRECT_DLL_IMPLEMENTATION_VALUE", $.String, "ImplementationDLL");

    $.Constant({Static:true , Public:false}, "REDIRECT_DLL_IMPLEMENTATION_VALUE_DEFAULT", $.String, "infocardapi2");

    $.Constant({Static:true , Public:false}, "REDIRECT_DLL_CARDSPACE_V1", $.String, "infocardapi");

    $.Field({Static:false, Public:false}, "m_syncRoot", $.Object);

    $.Field({Static:false, Public:false}, "m_isInitialized", $.Boolean);

    $.Field({Static:false, Public:true }, "m_csShimManageCardSpace", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2ManageCardSpace"));

    $.Field({Static:false, Public:true }, "m_csShimGetToken", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2GetToken"));

    $.Field({Static:false, Public:true }, "m_csShimImportInformationCard", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2ImportInformationCard"));

    $.Field({Static:false, Public:true }, "m_csShimEncrypt", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2Encrypt"));

    $.Field({Static:false, Public:true }, "m_csShimDecrypt", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2Decrypt"));

    $.Field({Static:false, Public:true }, "m_csShimSignHash", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2SignHash"));

    $.Field({Static:false, Public:true }, "m_csShimVerifyHash", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2VerifyHash"));

    $.Field({Static:false, Public:true }, "m_csShimGenerateDerivedKey", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2GenerateDerivedKey"));

    $.Field({Static:false, Public:true }, "m_csShimGetCryptoTransform", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2GetCryptoTransform"));

    $.Field({Static:false, Public:true }, "m_csShimTransformBlock", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2TransformBlock"));

    $.Field({Static:false, Public:true }, "m_csShimTransformFinalBlock", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2TransformFinalBlock"));

    $.Field({Static:false, Public:true }, "m_csShimGetKeyedHash", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2GetKeyedHash"));

    $.Field({Static:false, Public:true }, "m_csShimHashCore", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2HashCore"));

    $.Field({Static:false, Public:true }, "m_csShimHashFinal", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2HashFinal"));

    $.Field({Static:false, Public:true }, "m_csShimFreeToken", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2FreeToken"));

    $.Field({Static:false, Public:true }, "m_csShimCloseCryptoHandle", $asm1A.TypeRef("System.IdentityModel.Selectors.CardSpaceShim+CsV2CloseCryptoHandle"));

    $.Field({Static:false, Public:false}, "m_implementationDll", $asm1A.TypeRef("System.IdentityModel.Selectors.SafeLibraryHandle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2ManageCardSpace */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2ManageCardSpace", false, [], 
  JSIL.MethodSignature.Return($asm07.TypeRef("System.Int32")));

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2GetToken */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2GetToken", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm1A.TypeRef("System.IdentityModel.Selectors.SafeTokenHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle")])
    ]));

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2ImportInformationCard */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2ImportInformationCard", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.String")]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }
    ]
  }
);

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2Encrypt */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2Encrypt", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.Boolean"), 
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Int32")]), $jsilcore.TypeRef("JSIL.Reference", [$asm1A.TypeRef("Microsoft.InfoCards.GlobalAllocSafeHandle")])
    ]), {
    Parameters: [
      {
        NativeType: "U4"
      }, null
      , 
      {
        NativeType: "U4", 
        Out: true
      }, null

    ]
  }
);

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2Decrypt */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2Decrypt", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.Boolean"), 
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Int32")]), $jsilcore.TypeRef("JSIL.Reference", [$asm1A.TypeRef("Microsoft.InfoCards.GlobalAllocSafeHandle")])
    ]), {
    Parameters: [
      {
        NativeType: "U4"
      }, null
      , 
      {
        NativeType: "U4", 
        Out: true
      }, null

    ]
  }
);

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2SignHash */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2SignHash", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Int32")]), $jsilcore.TypeRef("JSIL.Reference", [$asm1A.TypeRef("Microsoft.InfoCards.GlobalAllocSafeHandle")])
    ]), {
    Parameters: [
      {
        NativeType: "U4"
      }, null
      , null
      , 
      {
        NativeType: "U4", 
        Out: true
      }, null

    ]
  }
);

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2VerifyHash */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2VerifyHash", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Boolean")])
    ]), {
    Parameters: [
      {
        NativeType: "U4"
      }, null
      , null
      , 
      {
        NativeType: "U4"
      }, null
      , null

    ]
  }
);

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2GenerateDerivedKey */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2GenerateDerivedKey", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.String"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Int32")]), $jsilcore.TypeRef("JSIL.Reference", [$asm1A.TypeRef("Microsoft.InfoCards.GlobalAllocSafeHandle")])
    ]), {
    Parameters: [
      {
        NativeType: "LPWStr"
      }, null
      , null

    ]
  }
);

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2GetCryptoTransform */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2GetCryptoTransform", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle")])
    ]));

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2TransformBlock */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2TransformBlock", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Int32")]), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm1A.TypeRef("Microsoft.InfoCards.GlobalAllocSafeHandle")])
    ]));

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2TransformFinalBlock */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2TransformFinalBlock", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Int32")]), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm1A.TypeRef("Microsoft.InfoCards.GlobalAllocSafeHandle")])
    ]));

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2GetKeyedHash */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2GetKeyedHash", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle")])]));

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2HashCore */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2HashCore", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle")
    ]));

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2HashFinal */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2HashFinal", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm1A.TypeRef("System.IdentityModel.Selectors.InternalRefCountedHandle"), $asm07.TypeRef("System.Int32"), 
      $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Int32")]), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm1A.TypeRef("Microsoft.InfoCards.GlobalAllocSafeHandle")])
    ]));

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2CloseCryptoHandle */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2CloseCryptoHandle", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.IntPtr")]));

/* delegate System.IdentityModel.Selectors.CardSpaceShim+CsV2FreeToken */ 

JSIL.MakeDelegate("System.IdentityModel.Selectors.CardSpaceShim+CsV2FreeToken", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.IntPtr")]));

/* class System.IdentityModel.Selectors.SafeLibraryHandle */ 

(function SafeLibraryHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IdentityModel.Selectors.SafeLibraryHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "FreeLibrary", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LoadLibraryW", 
      new JSIL.MethodSignature($.Type, [$.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }
        ]
      }
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ComputeStringHash", 
      new JSIL.MethodSignature($.UInt32, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

