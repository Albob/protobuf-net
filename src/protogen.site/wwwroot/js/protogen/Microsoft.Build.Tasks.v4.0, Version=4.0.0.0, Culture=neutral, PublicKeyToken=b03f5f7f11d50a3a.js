/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm01 = JSIL.DeclareAssembly("Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "Microsoft.Build.Tasks.v4.0.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "Microsoft.Build.Tasks.v4.0.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "Microsoft.Build.Tasks.v4.0.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "4.7.2046.0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", $.String, "30319");

    $.Constant({Static:true , Public:false}, "BuildRevisionStr", $.String, "0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 30319);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Runtime");
JSIL.DeclareNamespace("Microsoft.Runtime.Hosting");
/* class Microsoft.Runtime.Hosting.StrongNameHelpers */ 

(function StrongNameHelpers$Members () {
  var $, $thisType;





















  JSIL.MakeStaticClass("Microsoft.Runtime.Hosting.StrongNameHelpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_StrongName", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Runtime.Hosting.IClrStrongName"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_StrongNameUsingIntPtr", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Runtime.Hosting.IClrStrongNameUsingIntPtr"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameErrorInfo", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameFreeBuffer", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameGetPublicKey", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.IntPtr, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameGetPublicKey", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameKeyDelete", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameKeyGen", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameKeyInstall", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.IntPtr, 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameKeyInstall", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameSignatureGeneration", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.IntPtr, $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameSignatureGeneration", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameSignatureGeneration", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameSignatureGeneration", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameSignatureSize", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameSignatureSize", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameSignatureVerification", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameSignatureVerificationEx", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameTokenFromPublicKey", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "StrongNameTokenFromPublicKey", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "ts_LastStrongNameHR", $.Int32)
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.Field({Static:true , Public:false}, "s_StrongName", $asm01.TypeRef("Microsoft.Runtime.Hosting.IClrStrongName"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.Property({Static:true , Public:false}, "StrongName", $asm01.TypeRef("Microsoft.Runtime.Hosting.IClrStrongName"));

    $.Property({Static:true , Public:false}, "StrongNameUsingIntPtr", $asm01.TypeRef("Microsoft.Runtime.Hosting.IClrStrongNameUsingIntPtr"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Runtime.Hosting.IClrStrongNameUsingIntPtr */ 

JSIL.MakeInterface(
  "Microsoft.Runtime.Hosting.IClrStrongNameUsingIntPtr", false, [], function ($) {
    $.Method({}, "GetHashFromAssemblyFile", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetHashFromAssemblyFileW", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetHashFromBlob", new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetHashFromFile", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetHashFromFileW", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetHashFromHandle", new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameCompareAssemblies", new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameFreeBuffer", new JSIL.MethodSignature($.Int32, [$.IntPtr]));
    $.Method({}, "StrongNameGetBlob", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameGetBlobFromImage", new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameGetPublicKey", new JSIL.MethodSignature($.Int32, [
          $.String, $.IntPtr, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameHashSize", new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]));
    $.Method({}, "StrongNameKeyDelete", new JSIL.MethodSignature($.Int32, [$.String]));
    $.Method({}, "StrongNameKeyGen", new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameKeyGenEx", new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameKeyInstall", new JSIL.MethodSignature($.Int32, [
          $.String, $.IntPtr, 
          $.Int32
        ]));
    $.Method({}, "StrongNameSignatureGeneration", new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.IntPtr, $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameSignatureGenerationEx", new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.IntPtr, $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ]));
    $.Method({}, "StrongNameSignatureSize", new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameSignatureVerification", new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameSignatureVerificationEx", new JSIL.MethodSignature($.Int32, [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]));
    $.Method({}, "StrongNameSignatureVerificationFromImage", new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameTokenFromAssembly", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameTokenFromAssemblyEx", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameTokenFromPublicKey", new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComConversionLossAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["9FD93CCF-3280-4391-B3A9-96E1CDE77C8D"]; });

/* interface Microsoft.Runtime.Hosting.IClrStrongName */ 

JSIL.MakeInterface(
  "Microsoft.Runtime.Hosting.IClrStrongName", false, [], function ($) {
    $.Method({}, "GetHashFromAssemblyFile", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetHashFromAssemblyFileW", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetHashFromBlob", new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetHashFromFile", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetHashFromFileW", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetHashFromHandle", new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameCompareAssemblies", new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameFreeBuffer", new JSIL.MethodSignature($.Int32, [$.IntPtr]));
    $.Method({}, "StrongNameGetBlob", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameGetBlobFromImage", new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameGetPublicKey", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameHashSize", new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]));
    $.Method({}, "StrongNameKeyDelete", new JSIL.MethodSignature($.Int32, [$.String]));
    $.Method({}, "StrongNameKeyGen", new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameKeyGenEx", new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameKeyInstall", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ]));
    $.Method({}, "StrongNameSignatureGeneration", new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameSignatureGenerationEx", new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ]));
    $.Method({}, "StrongNameSignatureSize", new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameSignatureVerification", new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameSignatureVerificationEx", new JSIL.MethodSignature($.Int32, [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]));
    $.Method({}, "StrongNameSignatureVerificationFromImage", new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameTokenFromAssembly", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameTokenFromAssemblyEx", new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "StrongNameTokenFromPublicKey", new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComConversionLossAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["9FD93CCF-3280-4391-B3A9-96E1CDE77C8D"]; });

JSIL.DeclareNamespace("Microsoft.Internal");
JSIL.DeclareNamespace("Microsoft.Internal.Performance");
/* class Microsoft.Internal.Performance.CodeMarkers */ 

(function CodeMarkers$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Internal.Performance.CodeMarkers", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CodeMarker", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CodeMarkerEx", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CodeMarkerEx", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CodeMarkerEx", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CodeMarkerEx", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CodeMarkerEx", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.UInt64])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type);

    $.Constant({Static:true , Public:false}, "AtomName", $.String, "VSCodeMarkersEnabled");

    $.Constant({Static:true , Public:false}, "DllName", $.String, "Microsoft.Internal.Performance.CodeMarkers.dll");

    $.Field({Static:false, Public:false}, "state", $asm01.TypeRef("Microsoft.Internal.Performance.CodeMarkers+State"));

    $.Property({Static:false, Public:true }, "IsEnabled", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Internal.Performance.CodeMarkers+NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Internal.Performance.CodeMarkers+NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "DllPerfCodeMarker", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ]), 
      {
        Module: "Microsoft.Internal.Performance.CodeMarkers.dll", 
        EntryPoint: "PerfCodeMarker", 
        Parameters: [
          {
            NativeType: "Array"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "FindAtom", 
      new JSIL.MethodSignature($.UInt16, [$.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }
        ]
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Internal.Performance.CodeMarkers+State */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Internal.Performance.CodeMarkers+State", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Enabled: 0, 
    Disabled: 1, 
    DisabledDueToDllImportException: 2, 
    DisabledViaRegistryCheck: 3, 
  }
);

/* struct Microsoft.Internal.Performance.CodeMarkerStartEnd */ 

(function CodeMarkerStartEnd$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Internal.Performance.CodeMarkerStartEnd", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_end", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Internal.Performance.CodeMarkerExStartEnd */ 

(function CodeMarkerExStartEnd$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Internal.Performance.CodeMarkerExStartEnd", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.UInt64
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_end", $.Int32);

    $.Field({Static:false, Public:false}, "_aBuff", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Build");
/* class Microsoft.Build.OpportunisticIntern */ 

(function OpportunisticIntern$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("Microsoft.Build.OpportunisticIntern", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AssignViaEnvironment", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharArrayToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Char]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharArrayToString", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnableStatisticsGathering", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "InternableToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("Microsoft.Build.OpportunisticIntern+IInternable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternStringIfPossible", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReportStatistics", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "StringBuilderToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Text.StringBuilder")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SmallMruSize", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "LargeMruSize", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "HugeMruSize", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SmallMruThreshhold", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "LargeMruThreshhold", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "HugeMruThreshhold", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "GinormousThreshhold", $.Int32);

    $.Field({Static:true , Public:false}, "si", $asm01.TypeRef("Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList"));

    $.Field({Static:true , Public:false}, "whatIfInfinite", $asm01.TypeRef("Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList"));

    $.Field({Static:true , Public:false}, "whatIfDoubled", $asm01.TypeRef("Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList"));

    $.Field({Static:true , Public:false}, "whatIfHalved", $asm01.TypeRef("Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList"));

    $.Field({Static:true , Public:false}, "whatIfZero", $asm01.TypeRef("Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Build.OpportunisticIntern+IInternable */ 

JSIL.MakeInterface(
  "Microsoft.Build.OpportunisticIntern+IInternable", false, [], function ($) {
    $.Method({}, "get_Length", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Item", new JSIL.MethodSignature($.Char, [$.Int32]));
    $.Method({}, "ExpensiveConvertToString", JSIL.MethodSignature.Return($.String));
    $.Method({}, "IsOrdinalEqualToStringOfSameLength", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "ReferenceEquals", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Property({}, "Length");
    $.Property({}, "Item");
  }, [])
  .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

/* struct Microsoft.Build.OpportunisticIntern+StringBuilderInternTarget */ 

(function StringBuilderInternTarget$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.OpportunisticIntern+StringBuilderInternTarget", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpensiveConvertToString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsOrdinalEqualToStringOfSameLength", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReferenceEquals", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "target", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Char);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Build.OpportunisticIntern+IInternable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct Microsoft.Build.OpportunisticIntern+CharArrayInternTarget */ 

(function CharArrayInternTarget$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.OpportunisticIntern+CharArrayInternTarget", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Char]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpensiveConvertToString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsOrdinalEqualToStringOfSameLength", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReferenceEquals", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "startIndex", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "target", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Char);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Build.OpportunisticIntern+IInternable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct Microsoft.Build.OpportunisticIntern+StringInternTarget */ 

(function StringInternTarget$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.OpportunisticIntern+StringInternTarget", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpensiveConvertToString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsOrdinalEqualToStringOfSameLength", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReferenceEquals", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:false}, "target", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Char);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Build.OpportunisticIntern+IInternable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList */ 

(function BucketedPrioritizedStringList$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InterningToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("Microsoft.Build.OpportunisticIntern+IInternable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternWithStatistics", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("Microsoft.Build.OpportunisticIntern+IInternable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportStatistics", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryIntern", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$.Boolean]), [$asm01.TypeRef("Microsoft.Build.OpportunisticIntern+IInternable"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.Field({Static:false, Public:false}, "smallMru", $asm01.TypeRef("Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList+PrioritizedStringList"));

    $.Field({Static:false, Public:false}, "largeMru", $asm01.TypeRef("Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList+PrioritizedStringList"));

    $.Field({Static:false, Public:false}, "hugeMru", $asm01.TypeRef("Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList+PrioritizedStringList"));

    $.Field({Static:false, Public:false}, "ginormous", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm07.TypeRef("System.WeakReference")]));

    $.Field({Static:false, Public:false}, "smallMruThreshhold", $.Int32);

    $.Field({Static:false, Public:false}, "largeMruThreshhold", $.Int32);

    $.Field({Static:false, Public:false}, "hugeMruThreshhold", $.Int32);

    $.Field({Static:false, Public:false}, "ginormousThreshhold", $.Int32);

    $.Field({Static:false, Public:false}, "gatherStatistics", $.Boolean);

    $.Field({Static:false, Public:false}, "internHits", $.Int32);

    $.Field({Static:false, Public:false}, "internMisses", $.Int32);

    $.Field({Static:false, Public:false}, "internRejects", $.Int32);

    $.Field({Static:false, Public:false}, "internEliminatedStrings", $.Int32);

    $.Field({Static:false, Public:false}, "internEliminatedChars", $.Int32);

    $.Field({Static:false, Public:false}, "ginormousHits", $.Int32);

    $.Field({Static:false, Public:false}, "ginormousMisses", $.Int32);

    $.Field({Static:false, Public:false}, "ginormousCharsSaved", $.Int32);

    $.Field({Static:false, Public:false}, "dontTrack", $.Boolean);

    $.Field({Static:false, Public:false}, "stopwatch", $asm0A.TypeRef("System.Diagnostics.Stopwatch"));

    $.Field({Static:false, Public:false}, "missedStrings", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false}, "rejectedStrings", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false}, "ginormousSize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList+PrioritizedStringList */ 

(function PrioritizedStringList$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList+PrioritizedStringList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Statistics", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int32, $.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGet", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.OpportunisticIntern+IInternable"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "size", $.Int32);

    $.Field({Static:false, Public:false}, "mru", $asm01.TypeRef("Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList+PrioritizedStringList+Node"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList+PrioritizedStringList+Node */ 

(function Node$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };



  function Node_get_Next () {
    return this.Node$Next$value;
  }; 

  function Node_get_Value () {
    return this.Node$Value$value;
  }; 

  function Node_set_Next (value) {
    this.Node$Next$value = value;
  }; 

  function Node_set_Value (value) {
    this.Node$Value$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList+PrioritizedStringList+Node", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:false}, "get_Next", 
      JSIL.MethodSignature.Return($.Type), 
      Node_get_Next
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.String), 
      Node_get_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Next", 
      JSIL.MethodSignature.Action($.Type), 
      Node_set_Next
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Value", 
      JSIL.MethodSignature.Action($.String), 
      Node_set_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Node$Next$value", $.Type)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Node$Value$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "Next", $.Type);

    $.Property({Static:false, Public:false}, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.OpportunisticIntern+BucketedPrioritizedStringList+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReportStatistics$gb__24_0", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReportStatistics$gb__24_1", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReportStatistics$gb__24_2", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReportStatistics$gb__24_3", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReportStatistics$gb__24_4", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReportStatistics$gb__24_5", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32])])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__24_0", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32]), $.Int32]));

    $.Field({Static:true , Public:true }, "$l$g9__24_1", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32]), $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__24_2", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32]), $.String]));

    $.Field({Static:true , Public:true }, "$l$g9__24_3", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32]), $.Int32]));

    $.Field({Static:true , Public:true }, "$l$g9__24_4", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32]), $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__24_5", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Int32]), $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("Microsoft.Build.Internal");
/* class Microsoft.Build.Internal.Tracing */ 

(function Tracing$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.Build.Internal.Tracing", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Dump", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "List", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Record", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Slot", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Slot", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", ["!!0", "!!1"])], ["K", "V"])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:true , Public:false}, "counts", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:true , Public:false}, "last", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false}, "interval", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false}, "slot", $.String, function ($pi) {
        return $asm07.System.String.Empty;
      });

    $.Field({Static:true , Public:false}, "currentAssemblyName", $.String);


    function Tracing__cctor () {
      $thisType.last = new $asm07.System.DateTime();
      $thisType.interval = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Tracing__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Build.Tasks");
/* class Microsoft.Build.Tasks.PropertyParser */ 

(function PropertyParser$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Build.Tasks.PropertyParser", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetTable", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Hashtable")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTableWithEscaping", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Hashtable")])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.PropertyParser+PropertyNameValuePair */ 

(function PropertyNameValuePair$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.PropertyParser+PropertyNameValuePair", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Value", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Text.StringBuilder"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "value", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Value", $asm07.TypeRef("System.Text.StringBuilder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.TaskLoggingHelperExtension */ 

(function TaskLoggingHelperExtension$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), 
      Name: "Microsoft.Build.Tasks.TaskLoggingHelperExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITask"), $asm07.TypeRef("System.Resources.ResourceManager"), 
          $asm07.TypeRef("System.Resources.ResourceManager"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatResourceString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "get_TaskSharedResources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TaskSharedResources", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.Field({Static:false, Public:false}, "taskSharedResources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:false, Public:true }, "TaskSharedResources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ToolTaskExtension */ 

(function ToolTaskExtension$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Build.Utilities.ToolTask"), 
      Name: "Microsoft.Build.Tasks.ToolTaskExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddCommandLineCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddResponseFileCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateCommandLineCommands", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateResponseFileCommands", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Bag", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasLoggedErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Log", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBoolParameterWithDefault", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIntParameterWithDefault", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.Field({Static:false, Public:false}, "logExtension", $asm01.TypeRef("Microsoft.Build.Tasks.TaskLoggingHelperExtension"));

    $.Field({Static:false, Public:false}, "bag", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasLoggedErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "Bag", $asm07.TypeRef("System.Collections.Hashtable"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AL */ 

(function AL$Members () {
  var $, $thisType;







































































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ToolTaskExtension"), 
      Name: "Microsoft.Build.Tasks.AL", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddResponseFileCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateFullPathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AlgorithmId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompanyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Configuration", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Copyright", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Culture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DelaySign", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EmbedResources", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EvidenceFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Flags", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GenerateFullPaths", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyContainer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinkResources", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MainEntryPoint", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputAssembly", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Platform", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PlatformWith32BitPreference", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefer32Bit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProductName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProductVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResponseFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SdkToolsPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceModules", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TemplateFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Title", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Trademark", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Win32Icon", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Win32Resource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AlgorithmId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseAddress", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CompanyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Configuration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Copyright", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Culture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DelaySign", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EmbedResources", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EvidenceFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FileVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Flags", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_GenerateFullPaths", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyContainer", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LinkResources", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MainEntryPoint", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputAssembly", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Platform", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefer32Bit", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProductName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProductVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResponseFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SdkToolsPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SourceModules", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TemplateFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Title", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Trademark", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Win32Icon", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Win32Resource", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Property({Static:false, Public:true }, "AlgorithmId", $.String);

    $.Property({Static:false, Public:true }, "BaseAddress", $.String);

    $.Property({Static:false, Public:true }, "CompanyName", $.String);

    $.Property({Static:false, Public:true }, "Configuration", $.String);

    $.Property({Static:false, Public:true }, "Copyright", $.String);

    $.Property({Static:false, Public:true }, "Culture", $.String);

    $.Property({Static:false, Public:true }, "DelaySign", $.Boolean);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "EvidenceFile", $.String);

    $.Property({Static:false, Public:true }, "FileVersion", $.String);

    $.Property({Static:false, Public:true }, "Flags", $.String);

    $.Property({Static:false, Public:true }, "GenerateFullPaths", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyFile", $.String);

    $.Property({Static:false, Public:true }, "KeyContainer", $.String);

    $.Property({Static:false, Public:true }, "MainEntryPoint", $.String);

    $.Property({Static:false, Public:true }, "OutputAssembly", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "Platform", $.String);

    $.Property({Static:false, Public:false}, "PlatformWith32BitPreference", $.String);

    $.Property({Static:false, Public:true }, "Prefer32Bit", $.Boolean);

    $.Property({Static:false, Public:true }, "ProductName", $.String);

    $.Property({Static:false, Public:true }, "ProductVersion", $.String);

    $.Property({Static:false, Public:true }, "ResponseFiles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "TargetType", $.String);

    $.Property({Static:false, Public:true }, "TemplateFile", $.String);

    $.Property({Static:false, Public:true }, "Title", $.String);

    $.Property({Static:false, Public:true }, "Trademark", $.String);

    $.Property({Static:false, Public:true }, "Version", $.String);

    $.Property({Static:false, Public:true }, "Win32Icon", $.String);

    $.Property({Static:false, Public:true }, "Win32Resource", $.String);

    $.Property({Static:false, Public:true }, "SourceModules", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "EmbedResources", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "LinkResources", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "SdkToolsPath", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ToolName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AppDomainIsolatedTaskExtension */ 

(function AppDomainIsolatedTaskExtension$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Build.Utilities.AppDomainIsolatedTask"), 
      Name: "Microsoft.Build.Tasks.AppDomainIsolatedTaskExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Log", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"))
    );

    $.Field({Static:false, Public:false}, "logExtension", $asm01.TypeRef("Microsoft.Build.Tasks.TaskLoggingHelperExtension"));

    $.Property({Static:false, Public:true }, "Log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("Microsoft.Build.Framework.LoadInSeparateAppDomainAttribute"));

})();

/* class Microsoft.Build.Tasks.AppConfig */ 

(function AppConfig$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.AppConfig", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Runtime", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.RuntimeSection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Load", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlTextReader"))
    );

    $.ExternalMethod({Static:true , Public:false}, "StringEquals", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "runtime", $asm01.TypeRef("Microsoft.Build.Tasks.RuntimeSection"));

    $.Property({Static:false, Public:false}, "Runtime", $asm01.TypeRef("Microsoft.Build.Tasks.RuntimeSection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AppConfigException */ 

(function AppConfigException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ApplicationException"), 
      Name: "Microsoft.Build.Tasks.AppConfigException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Column", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Line", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "fileName", $.String);

    $.Field({Static:false, Public:false}, "line", $.Int32);

    $.Field({Static:false, Public:false}, "column", $.Int32);

    $.Property({Static:false, Public:false}, "FileName", $.String);

    $.Property({Static:false, Public:false}, "Line", $.Int32);

    $.Property({Static:false, Public:false}, "Column", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.BindingRedirect */ 

(function BindingRedirect$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.BindingRedirect", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NewVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OldVersionHigh", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OldVersionLow", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlTextReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NewVersion", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_OldVersionHigh", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_OldVersionLow", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version"))
    );

    $.Field({Static:false, Public:false}, "oldVersionLow", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "oldVersionHigh", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "newVersion", $asm07.TypeRef("System.Version"));

    $.Property({Static:false, Public:false}, "OldVersionLow", $asm07.TypeRef("System.Version"));

    $.Property({Static:false, Public:false}, "OldVersionHigh", $asm07.TypeRef("System.Version"));

    $.Property({Static:false, Public:false}, "NewVersion", $asm07.TypeRef("System.Version"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.DependentAssembly */ 

(function DependentAssembly$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.DependentAssembly", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BindingRedirects", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.BindingRedirect")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PartialAssemblyName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.AssemblyName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlTextReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BindingRedirects", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.BindingRedirect")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PartialAssemblyName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.AssemblyName"))
    );

    $.Field({Static:false, Public:false}, "bindingRedirects", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.BindingRedirect")]));

    $.Field({Static:false, Public:false}, "partialAssemblyName", $asm07.TypeRef("System.Reflection.AssemblyName"));

    $.Property({Static:false, Public:false}, "PartialAssemblyName", $asm07.TypeRef("System.Reflection.AssemblyName"));

    $.Property({Static:false, Public:false}, "BindingRedirects", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.BindingRedirect")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.RuntimeSection */ 

(function RuntimeSection$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.RuntimeSection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DependentAssemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.DependentAssembly")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlTextReader"))
    );

    $.Field({Static:false, Public:false}, "dependentAssemblies", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "DependentAssemblies", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.DependentAssembly")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AspNetCompiler */ 

(function AspNetCompiler$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ToolTaskExtension"), 
      Name: "Microsoft.Build.Tasks.AspNetCompiler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddCommandLineCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateFullPathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowPartiallyTrustedCallers", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Clean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Debug", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DelaySign", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FixedNames", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Force", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyContainer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MetabasePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PhysicalPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProjectName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkMoniker", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TargetName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Updateable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VirtualPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowPartiallyTrustedCallers", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Clean", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Debug", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DelaySign", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FixedNames", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Force", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyContainer", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MetabasePath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PhysicalPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkMoniker", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Updateable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_VirtualPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_updateable", $.Boolean);

    $.Field({Static:false, Public:false}, "_force", $.Boolean);

    $.Field({Static:false, Public:false}, "_debug", $.Boolean);

    $.Field({Static:false, Public:false}, "_clean", $.Boolean);

    $.Field({Static:false, Public:false}, "_aptca", $.Boolean);

    $.Field({Static:false, Public:false}, "_delaySign", $.Boolean);

    $.Field({Static:false, Public:false}, "_fixedNames", $.Boolean);

    $.Property({Static:false, Public:true }, "AllowPartiallyTrustedCallers", $.Boolean);

    $.Property({Static:false, Public:true }, "DelaySign", $.Boolean);

    $.Property({Static:false, Public:true }, "FixedNames", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyContainer", $.String);

    $.Property({Static:false, Public:true }, "KeyFile", $.String);

    $.Property({Static:false, Public:true }, "MetabasePath", $.String);

    $.Property({Static:false, Public:true }, "PhysicalPath", $.String);

    $.Property({Static:false, Public:true }, "TargetPath", $.String);

    $.Property({Static:false, Public:true }, "VirtualPath", $.String);

    $.Property({Static:false, Public:true }, "Updateable", $.Boolean);

    $.Property({Static:false, Public:true }, "Force", $.Boolean);

    $.Property({Static:false, Public:true }, "Debug", $.Boolean);

    $.Property({Static:false, Public:true }, "Clean", $.Boolean);

    $.Property({Static:false, Public:true }, "TargetFrameworkMoniker", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ToolName", $.String);

    $.Property({Static:false, Public:false}, "ProjectName", $.String);

    $.Property({Static:false, Public:false}, "TargetName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Resolver */ 

(function Resolver$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Resolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm07.TypeRef("System.Version"), $asm07.TypeRef("System.Reflection.ProcessorArchitecture"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FileMatchesAssemblyName", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.ResolutionSearchLocation")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SearchPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Resolve", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String, 
          $.String, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveAsFile", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveFromDirectory", 
      new JSIL.MethodSignature($.String, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.Field({Static:false, Public:false}, "searchPathElement", $.String);

    $.Field({Static:false, Public:false}, "getAssemblyName", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"));

    $.Field({Static:false, Public:false}, "fileExists", $asm01.TypeRef("Microsoft.Build.Shared.FileExists"));

    $.Field({Static:false, Public:false}, "getRuntimeVersion", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"));

    $.Field({Static:false, Public:false}, "targetedRuntimeVersion", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "targetProcessorArchitecture", $asm07.TypeRef("System.Reflection.ProcessorArchitecture"));

    $.Field({Static:false, Public:false}, "compareProcessorArchitecture", $.Boolean);

    $.Property({Static:false, Public:true }, "SearchPath", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssemblyFoldersExResolver */ 

(function AssemblyFoldersExResolver$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Resolver"), 
      Name: "Microsoft.Build.Tasks.AssemblyFoldersExResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 11, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyNames"), 
          $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm01.TypeRef("Microsoft.Build.Shared.OpenBaseKey"), $asm07.TypeRef("System.Version"), 
          $asm07.TypeRef("System.Reflection.ProcessorArchitecture"), $.Boolean, 
          $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AssemblyFoldersExLocations", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.AssemblyFoldersEx"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LazyInitialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Resolve", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String, 
          $.String, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "crackAssemblyFoldersExSentinel", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:false, Public:false}, "getRegistrySubKeyNames", $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyNames"));

    $.Field({Static:false, Public:false}, "getRegistrySubKeyDefaultValue", $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue"));

    $.Field({Static:false, Public:false}, "openBaseKey", $asm01.TypeRef("Microsoft.Build.Shared.OpenBaseKey"));

    $.Field({Static:false, Public:false}, "wasMatch", $.Boolean);

    $.Field({Static:false, Public:false}, "registryKeyRoot", $.String);

    $.Field({Static:false, Public:false}, "targetRuntimeVersion", $.String);

    $.Field({Static:false, Public:false}, "registryKeySuffix", $.String);

    $.Field({Static:false, Public:false}, "osVersion", $.String);

    $.Field({Static:false, Public:false}, "platform", $.String);

    $.Field({Static:false, Public:false}, "isInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "assemblyFoldersCache", $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyFoldersExCache"));

    $.Field({Static:false, Public:false}, "buildEngine", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine4"));

    $.Property({Static:false, Public:false}, "AssemblyFoldersExLocations", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyFoldersEx"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssemblyFoldersExCache */ 

(function AssemblyFoldersExCache$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.AssemblyFoldersExCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyFoldersEx"), $asm01.TypeRef("Microsoft.Build.Shared.FileExists")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FileExists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AssemblyFoldersEx", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.AssemblyFoldersEx"))
    );

    $.Field({Static:false, Public:false}, "assemblyFoldersEx", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyFoldersEx"));

    $.Field({Static:false, Public:false}, "filesInDirectories", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]));

    $.Field({Static:false, Public:false}, "fileExists", $asm01.TypeRef("Microsoft.Build.Shared.FileExists"));

    $.Field({Static:false, Public:false}, "useOriginalFileExists", $.Boolean);

    $.Property({Static:false, Public:false}, "AssemblyFoldersEx", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyFoldersEx"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssemblyFoldersExCache+<>c__DisplayClass4_0 */ 

(function $l$gc__DisplayClass4_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.AssemblyFoldersExCache+<>c__DisplayClass4_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l.ctor$gb__0", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Build.Utilities.AssemblyFoldersExInfo"))
    );

    $.Field({Static:false, Public:true }, "lockobject", $.Object);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyFoldersExCache"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.AssemblyFoldersResolver */ 

(function AssemblyFoldersResolver$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Resolver"), 
      Name: "Microsoft.Build.Tasks.AssemblyFoldersResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm07.TypeRef("System.Version")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Resolve", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String, 
          $.String, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.DisposableBase */ 

(function DisposableBase$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.DisposableBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DisposeManagedResources", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DisposeUnmanagedResources", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.Field({Static:false, Public:false}, "_disposed", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssemblyInformation */ 

(function AssemblyInformation$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.DisposableBase"), 
      Name: "Microsoft.Build.Tasks.AssemblyInformation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocAsmMeta", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructAssemblyName", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), [
          $.IntPtr, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.UInt32, $.IntPtr, 
          $.UInt32, $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DisposeUnmanagedResources", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeAsmMeta", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Dependencies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Files", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FrameworkNameAttribute", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAssemblyMetadata", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.String])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFrameworkName", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRuntimeVersion", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTargetFrameworkAttribute", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAssemblyDependencies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWinMDFile", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.Field({Static:false, Public:false}, "assemblyDependencies", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]));

    $.Field({Static:false, Public:false}, "assemblyFiles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "metadataDispenser", $asm01.TypeRef("Microsoft.Build.Tasks.IMetaDataDispenser"));

    $.Field({Static:false, Public:false}, "assemblyImport", $asm01.TypeRef("Microsoft.Build.Tasks.IMetaDataAssemblyImport"));

    $.Field({Static:true , Public:false}, "importerGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "sourceFile", $.String);

    $.Field({Static:false, Public:false}, "frameworkName", $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"));

    $.Field({Static:true , Public:false}, "targetFrameworkAttribute", $.String, "System.Runtime.Versioning.TargetFrameworkAttribute");

    $.Constant({Static:true , Public:false}, "GENMAN_STRING_BUF_SIZE", $.Int32, 1024);

    $.Constant({Static:true , Public:false}, "GENMAN_LOCALE_BUF_SIZE", $.Int32, 64);

    $.Constant({Static:true , Public:false}, "GENMAN_ENUM_TOKEN_BUF_SIZE", $.Int32, 16);


    function AssemblyInformation__cctor () {
      $thisType.importerGuid = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      AssemblyInformation__cctor
    );

    $.Property({Static:false, Public:true }, "Dependencies", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]));

    $.Property({Static:false, Public:true }, "Files", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "FrameworkNameAttribute", $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Tasks.AssemblyNameReference */ 

(function AssemblyNameReference$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.AssemblyNameReference", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Tasks.Reference")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "assemblyName", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Field({Static:false, Public:false}, "reference", $asm01.TypeRef("Microsoft.Build.Tasks.Reference"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssemblyNameReferenceAscendingVersionComparer */ 

(function AssemblyNameReferenceAscendingVersionComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.AssemblyNameReferenceAscendingVersionComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "comparer", $asm07.TypeRef("System.Collections.IComparer"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssemblyResolution */ 

(function AssemblyResolution$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Build.Tasks.AssemblyResolution", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CompileDirectories", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Resolver")]), [
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm07.TypeRef("System.Version")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompileSearchPaths", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Resolver")]), [
          $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm07.TypeRef("System.Reflection.ProcessorArchitecture"), 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyNames"), 
          $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue"), $asm01.TypeRef("Microsoft.Build.Shared.OpenBaseKey"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.InstalledAssemblies"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm07.TypeRef("System.Version")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveReference", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Resolver")])]), $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), 
          $.String, $.String, 
          $.Boolean, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String]), $.String, 
          $.String, $asm07.TypeRef("System.Collections.ArrayList"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssemblyResolutionConstants */ 

(function AssemblyResolutionConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.Build.Tasks.AssemblyResolutionConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "hintPathSentinel", $.String, "{hintpathfromitem}");

    $.Constant({Static:true , Public:true }, "assemblyFoldersSentinel", $.String, "{assemblyfolders}");

    $.Constant({Static:true , Public:true }, "candidateAssemblyFilesSentinel", $.String, "{candidateassemblyfiles}");

    $.Constant({Static:true , Public:true }, "gacSentinel", $.String, "{gac}");

    $.Constant({Static:true , Public:true }, "frameworkPathSentinel", $.String, "{targetframeworkdirectory}");

    $.Constant({Static:true , Public:true }, "rawFileNameSentinel", $.String, "{rawfilename}");

    $.Constant({Static:true , Public:true }, "assemblyFoldersExSentinel", $.String, "{registry:");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.BadImageReferenceException */ 

(function BadImageReferenceException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Build.Tasks.BadImageReferenceException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.CandidateAssemblyFilesResolver */ 

(function CandidateAssemblyFilesResolver$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Resolver"), 
      Name: "Microsoft.Build.Tasks.CandidateAssemblyFilesResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.String]), $.String, 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), $asm07.TypeRef("System.Version")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Resolve", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String, 
          $.String, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.Field({Static:false, Public:false}, "candidateAssemblyFiles", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.ConflictLossReason */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.ConflictLossReason", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DidntLose: 0, 
    HadLowerVersion: 1, 
    InsolubleConflict: 2, 
    WasNotPrimary: 3, 
    FusionEquivalentWithSameVersion: 4, 
  }
);

/* enum Microsoft.Build.Tasks.CopyLocalState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.CopyLocalState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Undecided: 0, 
    YesBecauseOfHeuristic: 1, 
    YesBecauseReferenceItemHadMetadata: 2, 
    NoBecauseFrameworkFile: 3, 
    NoBecausePrerequisite: 4, 
    NoBecauseReferenceItemHadMetadata: 5, 
    NoBecauseReferenceFoundInGAC: 6, 
    NoBecauseConflictVictim: 7, 
    NoBecauseUnresolved: 8, 
    NoBecauseEmbedded: 9, 
    NoBecauseParentReferencesFoundInGAC: 10, 
  }
);

/* class Microsoft.Build.Tasks.CopyLocalStateUtility */ 

(function CopyLocalStateUtility$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Build.Tasks.CopyLocalStateUtility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "IsCopyLocal", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.CopyLocalState")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.DependencyResolutionException */ 

(function DependencyResolutionException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Build.Tasks.DependencyResolutionException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.DirectoryResolver */ 

(function DirectoryResolver$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Resolver"), 
      Name: "Microsoft.Build.Tasks.DirectoryResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm07.TypeRef("System.Version")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Resolve", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String, 
          $.String, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.FrameworkPathResolver */ 

(function FrameworkPathResolver$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Resolver"), 
      Name: "Microsoft.Build.Tasks.FrameworkPathResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.String]), $asm01.TypeRef("Microsoft.Build.Tasks.InstalledAssemblies"), 
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm07.TypeRef("System.Version")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHighestVersionInRedist", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), [$asm01.TypeRef("Microsoft.Build.Tasks.InstalledAssemblies"), $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Resolve", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String, 
          $.String, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.Field({Static:false, Public:false}, "frameworkPaths", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "installedAssemblies", $asm01.TypeRef("Microsoft.Build.Tasks.InstalledAssemblies"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GacResolver */ 

(function GacResolver$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Resolver"), 
      Name: "Microsoft.Build.Tasks.GacResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.ProcessorArchitecture"), $.String, 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), $asm07.TypeRef("System.Version"), 
          $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Resolve", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String, 
          $.String, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.Field({Static:false, Public:false}, "buildEngine", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine4"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GlobalAssemblyCache */ 

(function GlobalAssemblyCache$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("Microsoft.Build.Tasks.GlobalAssemblyCache", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CheckForFullFusionNameInGac", 
      new JSIL.MethodSignature($.String, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String, 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetPathFromFusionName")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateListOfAssembliesByRuntime", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Collections.Generic.SortedDictionary`2", [$asm07.TypeRef("System.Version"), $asm0A.TypeRef("System.Collections.Generic.SortedDictionary`2", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String])]), [
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm07.TypeRef("System.Version"), $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetPathFromFusionName"), $asm01.TypeRef("Microsoft.Build.Tasks.GetGacEnumerator"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGacNativeEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGacPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLocation", 
      new JSIL.MethodSignature($.String, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm07.TypeRef("System.Reflection.ProcessorArchitecture"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), $asm07.TypeRef("System.Version"), 
          $.Boolean, $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetPathFromFusionName"), $asm01.TypeRef("Microsoft.Build.Tasks.GetGacEnumerator"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLocation", 
      new JSIL.MethodSignature($.String, [
          $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine4"), $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), 
          $asm07.TypeRef("System.Reflection.ProcessorArchitecture"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm07.TypeRef("System.Version"), $.Boolean, 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $asm01.TypeRef("Microsoft.Build.Tasks.GetPathFromFusionName"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetGacEnumerator"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLocationImpl", 
      new JSIL.MethodSignature($.String, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String, 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), $asm07.TypeRef("System.Version"), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $asm01.TypeRef("Microsoft.Build.Tasks.GetPathFromFusionName"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetGacEnumerator"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RetreivePathFromFusionName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "pathFromFusionName", $asm01.TypeRef("Microsoft.Build.Tasks.GetPathFromFusionName"), function ($pi) {
        return $asm01.Microsoft.Build.Tasks.GetPathFromFusionName.New(null, null, new JSIL.MethodPointerInfo($thisType, "RetreivePathFromFusionName", new JSIL.MethodSignature($.String, [$.String]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "gacEnumerator", $asm01.TypeRef("Microsoft.Build.Tasks.GetGacEnumerator"), function ($pi) {
        return $asm01.Microsoft.Build.Tasks.GetGacEnumerator.New(null, null, new JSIL.MethodPointerInfo($thisType, "GetGacNativeEnumerator", new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]), [$.String]), true, false));
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.HintPathResolver */ 

(function HintPathResolver$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Resolver"), 
      Name: "Microsoft.Build.Tasks.HintPathResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm07.TypeRef("System.Version")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Resolve", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String, 
          $.String, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.InstalledAssemblies */ 

(function InstalledAssemblies$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.InstalledAssemblies", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.RedistList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAssemblyNameFromSimpleName", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyEntry")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindHighestVersionInRedistList", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.AssemblyEntry"), [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FrameworkAssemblyEntryInRedist", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInfo", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Version")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Nullable`1", [$.Boolean])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemapAssemblyExtension", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.Field({Static:false, Public:false}, "redistList", $asm01.TypeRef("Microsoft.Build.Tasks.RedistList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.InvalidReferenceAssemblyNameException */ 

(function InvalidReferenceAssemblyNameException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Build.Tasks.InvalidReferenceAssemblyNameException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SourceItemSpec", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "sourceItemSpec", $.String);

    $.Property({Static:false, Public:false}, "SourceItemSpec", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.NoMatchReason */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.NoMatchReason", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    FileNotFound: 1, 
    FusionNamesDidNotMatch: 2, 
    TargetHadNoFusionName: 3, 
    NotInGac: 4, 
    NotAFileNameOnDisk: 5, 
    ProcessorArchitectureDoesNotMatch: 6, 
  }
);

/* class Microsoft.Build.Tasks.RawFilenameResolver */ 

(function RawFilenameResolver$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Resolver"), 
      Name: "Microsoft.Build.Tasks.RawFilenameResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm07.TypeRef("System.Version")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Resolve", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String, 
          $.String, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Reference */ 

(function Reference$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };



























  function Reference_get_FoundInGac () {
    return this.Reference$FoundInGac$value;
  }; 






  function Reference_get_ImplementationAssembly () {
    return this.Reference$ImplementationAssembly$value;
  }; 









































  function Reference_set_FoundInGac (value) {
    this.Reference$FoundInGac$value = value;
  }; 





  function Reference_set_ImplementationAssembly (value) {
    this.Reference$ImplementationAssembly$value = value;
  }; 












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Reference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.IsWinMDFile"), $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAssembliesConsideredAndRejected", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddConflictVictim", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDependee", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDependency", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddError", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPreUnificationVersion", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Version"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.UnificationReason")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRelatedFileExtension", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRemapping", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSatelliteFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSerializationAssemblyFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSourceItem", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSourceItems", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AttachScatterFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForSpecificVersionMetadataOnParentsReference", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AssembliesConsideredAndRejected", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AssemblyFolderKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConflictLossExplanation", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.ConflictLossReason"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConflictVictorName", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CopyLocal", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.CopyLocalState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DependenciesFound", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DirectoryName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EmbedInteropTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExclusionListLoggingProperties", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Reference+ExclusionListProperties"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileNameWithoutExtension", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:false}, "get_FoundInGac", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean])), 
      Reference_get_FoundInGac
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_FrameworkNameAttribute", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FullPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FullPathWithoutExtension", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HintPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImageRuntime", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true }, "get_ImplementationAssembly", 
      JSIL.MethodSignature.Return($.String), 
      Reference_get_ImplementationAssembly
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsBadImage", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConflictVictim", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCopyLocal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsManagedWinMDFile", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrerequisite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrimary", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRedistRoot", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsResolved", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnresolvable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWinMDFile", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PrimarySourceItem", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RedistName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferenceVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResolvedSearchPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SDKName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UserRequestedSpecificFile", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WantSpecificVersion", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConflictVictims", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDependees", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrors", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExecutableExtensions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPreUnificationVersions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.UnificationVersion")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRelatedFileExtensions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSatelliteFiles", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetScatterFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSerializationAssemblyFiles", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSourceItems", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFrameworkFile", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeDependentAssemblyReference", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "MakePrimaryAssemblyReference", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropagateSourceItems", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemappedAssemblyNames", 
      JSIL.MethodSignature.Return($asm10.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyRemapping")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependee", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependency", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AssemblyFolderKey", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConflictLossExplanation", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.ConflictLossReason"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConflictVictorName", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DependenciesFound", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EmbedInteropTypes", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:false}, "set_FoundInGac", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Boolean])), 
      Reference_set_FoundInGac
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_FrameworkNameAttribute", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FullPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HintPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ImageRuntime", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:true }, "set_ImplementationAssembly", 
      JSIL.MethodSignature.Action($.String), 
      Reference_set_ImplementationAssembly
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsManagedWinMDFile", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsPrerequisite", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsRedistRoot", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsWinMDFile", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RedistName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReferenceVersion", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResolvedSearchPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_UserRequestedSpecificFile", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetExecutableExtension", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFinalCopyLocalState", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("System.Reflection.ProcessorArchitecture"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm07.TypeRef("System.Version"), $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), 
          $.Boolean, $asm01.TypeRef("Microsoft.Build.Tasks.ReferenceTable"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.CheckIfAssemblyInGac")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "sourceItems", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "dependees", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "dependencies", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.Type]));

    $.Field({Static:false, Public:false}, "scatterFiles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "errors", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "relatedFileExtensions", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "satelliteFiles", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "serializationAssemblyFiles", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "assembliesConsideredAndRejected", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "resolvedSearchPath", $.String);

    $.Field({Static:false, Public:false}, "conflictVictorName", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Field({Static:false, Public:false}, "conflictLossReason", $asm01.TypeRef("Microsoft.Build.Tasks.ConflictLossReason"));

    $.Field({Static:false, Public:false}, "conflictVictims", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "preUnificationVersions", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.UnificationVersion")]));

    $.Field({Static:false, Public:false}, "isBadImage", $.Boolean);

    $.Field({Static:false, Public:false}, "primarySourceItem", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "fullPath", $.String);

    $.Field({Static:false, Public:false}, "directoryName", $.String);

    $.Field({Static:false, Public:false}, "fileNameWithoutExtension", $.String);

    $.Field({Static:false, Public:false}, "fullPathWithoutExtension", $.String);

    $.Field({Static:false, Public:false}, "isPrimary", $.Boolean);

    $.Field({Static:false, Public:false}, "isPrerequisite", $.Boolean);

    $.Field({Static:false, Public:false}, "isRedistRoot", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "redistName", $.String);

    $.Field({Static:false, Public:false}, "copyLocalState", $asm01.TypeRef("Microsoft.Build.Tasks.CopyLocalState"));

    $.Field({Static:false, Public:false}, "dependenciesFound", $.Boolean);

    $.Field({Static:false, Public:false}, "hintPath", $.String);

    $.Field({Static:false, Public:false}, "expectedExtensions", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "wantSpecificVersion", $.Boolean);

    $.Field({Static:false, Public:false}, "embedInteropTypes", $.Boolean);

    $.Field({Static:false, Public:false}, "assemblyFolderKey", $.String);

    $.Field({Static:false, Public:false}, "userRequestedSpecificFile", $.Boolean);

    $.Field({Static:false, Public:false}, "referenceVersion", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "exclusionListProperties", $asm01.TypeRef("Microsoft.Build.Tasks.Reference+ExclusionListProperties"));

    $.Field({Static:false, Public:false}, "winMDFile", $.Boolean);

    $.Field({Static:false, Public:false}, "isManagedWinMDFile", $.Boolean);

    $.Field({Static:false, Public:false}, "imageRuntimeVersion", $.String);

    $.Field({Static:false, Public:false}, "sdkName", $.String);

    $.Field({Static:false, Public:false}, "remappedAssemblyNames", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyRemapping")]));

    $.Field({Static:false, Public:false}, "isWinMDFile", $asm01.TypeRef("Microsoft.Build.Tasks.IsWinMDFile"));

    $.Field({Static:false, Public:false}, "fileExists", $asm01.TypeRef("Microsoft.Build.Shared.FileExists"));

    $.Field({Static:false, Public:false}, "getRuntimeVersion", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"));

    $.Field({Static:false, Public:false}, "frameworkName", $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"));

    $.Field({Static:false, Public:false}, "Reference$FoundInGac$value", $asm07.TypeRef("System.Nullable`1", [$.Boolean]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Reference$ImplementationAssembly$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "WantSpecificVersion", $.Boolean);

    $.Property({Static:false, Public:false}, "EmbedInteropTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "UserRequestedSpecificFile", $.Boolean);

    $.Property({Static:false, Public:false}, "ReferenceVersion", $asm07.TypeRef("System.Version"));

    $.Property({Static:false, Public:false}, "FoundInGac", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:false}, "ExclusionListLoggingProperties", $asm01.TypeRef("Microsoft.Build.Tasks.Reference+ExclusionListProperties"));

    $.Property({Static:false, Public:false}, "FullPath", $.String);

    $.Property({Static:false, Public:false}, "DirectoryName", $.String);

    $.Property({Static:false, Public:false}, "FileNameWithoutExtension", $.String);

    $.Property({Static:false, Public:false}, "FullPathWithoutExtension", $.String);

    $.Property({Static:false, Public:false}, "HintPath", $.String);

    $.Property({Static:false, Public:false}, "AssemblyFolderKey", $.String);

    $.Property({Static:false, Public:false}, "IsPrimary", $.Boolean);

    $.Property({Static:false, Public:false}, "IsPrerequisite", $.Boolean);

    $.Property({Static:false, Public:false}, "IsRedistRoot", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:false}, "RedistName", $.String);

    $.Property({Static:false, Public:false}, "PrimarySourceItem", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:false}, "IsBadImage", $.Boolean);

    $.Property({Static:false, Public:false}, "IsConflictVictim", $.Boolean);

    $.Property({Static:false, Public:false}, "ConflictVictorName", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Property({Static:false, Public:false}, "ConflictLossExplanation", $asm01.TypeRef("Microsoft.Build.Tasks.ConflictLossReason"));

    $.Property({Static:false, Public:false}, "IsWinMDFile", $.Boolean);

    $.Property({Static:false, Public:false}, "IsManagedWinMDFile", $.Boolean);

    $.Property({Static:false, Public:true }, "ImplementationAssembly", $.String);

    $.Property({Static:false, Public:false}, "ImageRuntime", $.String);

    $.Property({Static:false, Public:false}, "IsUnified", $.Boolean);

    $.Property({Static:false, Public:false}, "CopyLocal", $asm01.TypeRef("Microsoft.Build.Tasks.CopyLocalState"));

    $.Property({Static:false, Public:false}, "IsCopyLocal", $.Boolean);

    $.Property({Static:false, Public:false}, "IsResolved", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUnresolvable", $.Boolean);

    $.Property({Static:false, Public:false}, "DependenciesFound", $.Boolean);

    $.Property({Static:false, Public:false}, "SDKName", $.String);

    $.Property({Static:false, Public:false}, "AssembliesConsideredAndRejected", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "ResolvedSearchPath", $.String);

    $.Property({Static:false, Public:false}, "FrameworkNameAttribute", $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Reference+ExclusionListProperties */ 

(function ExclusionListProperties$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Reference+ExclusionListProperties", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExclusionReasonLogDelegate", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.ReferenceTable+LogExclusionReason"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HighestRedistListMonkier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HighestVersionInRedist", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInExclusionList", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ExclusionReasonLogDelegate", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.ReferenceTable+LogExclusionReason"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HighestRedistListMonkier", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HighestVersionInRedist", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsInExclusionList", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "highestVersionInRedist", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "exclusionReasonLogDelegate", $asm01.TypeRef("Microsoft.Build.Tasks.ReferenceTable+LogExclusionReason"));

    $.Field({Static:false, Public:false}, "highestRedistListMonkier", $.String);

    $.Field({Static:false, Public:false}, "isInExclusionList", $.Boolean);

    $.Property({Static:false, Public:false}, "IsInExclusionList", $.Boolean);

    $.Property({Static:false, Public:false}, "HighestVersionInRedist", $asm07.TypeRef("System.Version"));

    $.Property({Static:false, Public:false}, "HighestRedistListMonkier", $.String);

    $.Property({Static:false, Public:false}, "ExclusionReasonLogDelegate", $asm01.TypeRef("Microsoft.Build.Tasks.ReferenceTable+LogExclusionReason"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ReferenceResolutionException */ 

(function ReferenceResolutionException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Build.Tasks.ReferenceResolutionException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ReferenceTable */ 

(function ReferenceTable$Members () {
  var $, $thisType;
























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ReferenceTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 34, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm01.TypeRef("Microsoft.Build.Tasks.InstalledAssemblies"), 
          $asm07.TypeRef("System.Reflection.ProcessorArchitecture"), $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), 
          $asm01.TypeRef("Microsoft.Build.Shared.DirectoryExists"), $asm01.TypeRef("Microsoft.Build.Tasks.GetDirectories"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyMetadata"), 
          $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyNames"), $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue"), 
          $asm01.TypeRef("Microsoft.Build.Shared.OpenBaseKey"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm07.TypeRef("System.Version"), $asm07.TypeRef("System.Version"), 
          $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"), $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $asm01.TypeRef("Microsoft.Build.Tasks.CheckIfAssemblyInGac"), $asm01.TypeRef("Microsoft.Build.Tasks.IsWinMDFile"), 
          $.Boolean, $asm01.TypeRef("Microsoft.Build.Tasks.ReadMachineTypeFromPEHeader"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.WarnOrErrorOnTargetArchitectureMismatchBehavior"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReference", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Tasks.Reference")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddToDependencyGraph", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.ReferenceTable+ReferenceAssemblyExtensionPair")])]), $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Reference")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSimpleNameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CalcuateParentAssemblyDirectories", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Hashtable"), $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Reference")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeClosure", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.DependentAssembly")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeClosure", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAssociatedFiles", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "FindCopyLocalItems", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDependenciesAndScatterFiles", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindRelatedFiles", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Reference"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSatellites", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Reference"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSerializationAssemblies", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Reference"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ListOfExcludedAssemblies", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_References", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Tasks.Reference")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Resolvers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Resolver")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHighestVersionFullFrameworkForTFM", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Tuple`2", [$asm01.TypeRef("Microsoft.Build.Tasks.RedistList"), $.String]), [$asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHighestVersionReferenceAssemblyDirectories", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReference", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Reference"), [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferenceFromItemSpec", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferenceItems", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnifiedAssemblyMetadata", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Build.Tasks.UnifiedAssemblyName")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.String])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnifiedAssemblyNames", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Build.Tasks.UnifiedAssemblyName")]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm01.Microsoft.Build.Tasks.ReferenceTable_$lGetUnifiedAssemblyNames$gd__59.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "InLatestRedistList", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Tasks.Reference")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPseudoAssembly", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogAnotherFrameworkUnResolve", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogHigherVersionUnresolve", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogHigherVersionUnresolveDueToAttribute", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogProfileExclusionUnresolve", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkReferenceForExclusionDueToHigherThanCurrentFramework", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Tasks.Reference")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkReferenceForExclusionDueToHigherThanCurrentFrameworkAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Tasks.Reference")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkReferencesExcludedDueToOtherFramework", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Tasks.Reference")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkReferencesForExclusion", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkReferenceWithHighestVersionInCurrentRedistList", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Tasks.Reference")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NameAssemblyFileReference", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadMachineTypeFromPEHeader", 
      new JSIL.MethodSignature($.UInt16, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependencies", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Tasks.Reference")]), 
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.ReferenceTable+ReferenceAssemblyExtensionPair")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependencyMarkedForExclusion", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ReferenceTable+LogExclusionReason"), $.Boolean, 
          $.String, $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Tasks.Reference")]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Reference")]), $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Reference")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveNonForwardableMetadata", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RemovePrimaryReferenceMarkedForExclusion", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ReferenceTable+LogExclusionReason"), $.Boolean, 
          $.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Reference")]), 
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Tasks.Reference")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveReferencesMarkedForExclusion", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveAssemblyFilenames", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveAssemblyNameConflict", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyNameReference"), $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyNameReference")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveConflicts", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.DependentAssembly")])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyNameReference")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveConflictsBetweenReferences", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveReference", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String, 
          $asm01.TypeRef("Microsoft.Build.Tasks.Reference")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetItemMetadata", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), [
          $asm07.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Collections.ArrayList"), 
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.Reference"), 
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Shared.FileExists")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPrimaryAssemblyReferenceItem", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPrimaryFileItem", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPrimaryItems", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryConvertToAssemblyName", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGatherAssemblyNameEssentials", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetAssemblyNameComponent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnifyAssemblyNameVersions", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Version")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.UnificationReason")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Nullable`1", [$.Boolean])]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyArchitectureOfImplementationDll", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "TargetFrameworkVersion_40", $asm07.TypeRef("System.Version"));

    $.Field({Static:true , Public:false}, "monikerToHighestRedistList", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Tuple`2", [$asm01.TypeRef("Microsoft.Build.Tasks.RedistList"), $.String])]));

    $.Field({Static:false, Public:false}, "references", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Tasks.Reference")]));

    $.Field({Static:false, Public:false}, "remappedAssemblies", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.DependentAssembly")]));

    $.Field({Static:false, Public:false}, "findDependencies", $.Boolean);

    $.Field({Static:false, Public:false}, "ignoreVersionForFrameworkReferences", $.Boolean);

    $.Field({Static:false, Public:false}, "findSatellites", $.Boolean);

    $.Field({Static:false, Public:false}, "findSerializationAssemblies", $.Boolean);

    $.Field({Static:false, Public:false}, "findRelatedFiles", $.Boolean);

    $.Field({Static:false, Public:false}, "frameworkPaths", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "allowedAssemblyExtensions", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "relatedFileExtensions", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "resolvedSDKReferences", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "installedAssemblies", $asm01.TypeRef("Microsoft.Build.Tasks.InstalledAssemblies"));

    $.Field({Static:false, Public:false}, "targetProcessorArchitecture", $asm07.TypeRef("System.Reflection.ProcessorArchitecture"));

    $.Field({Static:false, Public:false}, "fileExists", $asm01.TypeRef("Microsoft.Build.Shared.FileExists"));

    $.Field({Static:false, Public:false}, "directoryExists", $asm01.TypeRef("Microsoft.Build.Shared.DirectoryExists"));

    $.Field({Static:false, Public:false}, "getDirectories", $asm01.TypeRef("Microsoft.Build.Tasks.GetDirectories"));

    $.Field({Static:false, Public:false}, "getAssemblyName", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"));

    $.Field({Static:false, Public:false}, "getAssemblyMetadata", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyMetadata"));

    $.Field({Static:false, Public:false}, "getRuntimeVersion", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"));

    $.Field({Static:false, Public:false}, "openBaseKey", $asm01.TypeRef("Microsoft.Build.Shared.OpenBaseKey"));

    $.Field({Static:false, Public:false}, "targetedRuntimeVersion", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "readMachineTypeFromPEHeader", $asm01.TypeRef("Microsoft.Build.Tasks.ReadMachineTypeFromPEHeader"));

    $.Field({Static:false, Public:false}, "isWinMDFile", $asm01.TypeRef("Microsoft.Build.Tasks.IsWinMDFile"));

    $.Field({Static:false, Public:false}, "projectTargetFramework", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "targetFrameworkMoniker", $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"));

    $.Field({Static:false, Public:false}, "compiledSearchPaths", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Resolver")]));

    $.Field({Static:false, Public:false}, "log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Field({Static:false, Public:false}, "latestTargetFrameworkDirectories", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "listOfExcludedAssemblies", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "copyLocalDependenciesWhenParentReferenceInGac", $.Boolean);

    $.Field({Static:false, Public:false}, "ignoreFrameworkAttributeVersionMismatch", $.Boolean);

    $.Field({Static:false, Public:false}, "checkIfAssemblyIsInGac", $asm01.TypeRef("Microsoft.Build.Tasks.CheckIfAssemblyInGac"));

    $.Field({Static:false, Public:false}, "buildEngine", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"));

    $.Field({Static:false, Public:false}, "warnOrErrorOnTargetArchitectureMismatch", $asm01.TypeRef("Microsoft.Build.Tasks.WarnOrErrorOnTargetArchitectureMismatchBehavior"));

    $.Constant({Static:true , Public:false}, "PEOFFSET", $.Int32, 60);

    $.Constant({Static:true , Public:false}, "PEHEADER", $.Int32, 17744);

    $.Property({Static:false, Public:false}, "Resolvers", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Resolver")]));

    $.Property({Static:false, Public:false}, "References", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Tasks.Reference")]));

    $.Property({Static:false, Public:false}, "ListOfExcludedAssemblies", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Build.Tasks.ReferenceTable+LogExclusionReason */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.ReferenceTable+LogExclusionReason", false, [], 
  new JSIL.MethodSignature(null, [
      $asm07.TypeRef("System.Boolean"), $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), 
      $asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), 
      $asm07.TypeRef("System.String")
    ]));

/* struct Microsoft.Build.Tasks.ReferenceTable+ReferenceAssemblyExtensionPair */ 

(function ReferenceAssemblyExtensionPair$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.ReferenceTable+ReferenceAssemblyExtensionPair", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Reference"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    );

    $.Field({Static:false, Public:false}, "assemblyKey", $asm01.TypeRef("Microsoft.Build.Tasks.Reference"));

    $.Field({Static:false, Public:false}, "assemblyValue", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Property({Static:false, Public:false}, "Key", $asm01.TypeRef("Microsoft.Build.Tasks.Reference"));

    $.Property({Static:false, Public:false}, "Value", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ReferenceTable+<>c__DisplayClass58_0 */ 

(function $l$gc__DisplayClass58_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ReferenceTable+<>c__DisplayClass58_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetUnifiedAssemblyMetadata$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.Field({Static:false, Public:true }, "remappedExtension", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.ReferenceTable+<GetUnifiedAssemblyNames>d__59 */ 

(function $lGetUnifiedAssemblyNames$gd__59$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ReferenceTable+<GetUnifiedAssemblyNames>d__59", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.Build.Tasks.UnifiedAssemblyName$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Build.Tasks.UnifiedAssemblyName")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Build.Tasks.UnifiedAssemblyName")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.Build.Tasks.UnifiedAssemblyName$g.get_Current", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.UnifiedAssemblyName"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Build.Tasks.UnifiedAssemblyName")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm01.TypeRef("Microsoft.Build.Tasks.UnifiedAssemblyName"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "preUnificationAssemblyNames", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]));

    $.Field({Static:false, Public:true }, "$l$g3__preUnificationAssemblyNames", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm01.TypeRef("Microsoft.Build.Tasks.ReferenceTable"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.Build.Tasks.UnifiedAssemblyName$g.Current", $asm01.TypeRef("Microsoft.Build.Tasks.UnifiedAssemblyName"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Build.Tasks.UnifiedAssemblyName")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Build.Tasks.UnifiedAssemblyName")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.ResolutionSearchLocation */ 

(function ResolutionSearchLocation$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ResolutionSearchLocation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AssemblyName", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileNameAttempted", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Reason", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.NoMatchReason"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SearchPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AssemblyName", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FileNameAttempted", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Reason", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.NoMatchReason"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SearchPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "fileNameAttempted", $.String);

    $.Field({Static:false, Public:false}, "searchPath", $.String);

    $.Field({Static:false, Public:false}, "assemblyName", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Field({Static:false, Public:false}, "reason", $asm01.TypeRef("Microsoft.Build.Tasks.NoMatchReason"));

    $.Property({Static:false, Public:false}, "FileNameAttempted", $.String);

    $.Property({Static:false, Public:false}, "SearchPath", $.String);

    $.Property({Static:false, Public:false}, "AssemblyName", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Property({Static:false, Public:false}, "Reason", $asm01.TypeRef("Microsoft.Build.Tasks.NoMatchReason"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.TaskExtension */ 

(function TaskExtension$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Build.Utilities.Task"), 
      Name: "Microsoft.Build.Tasks.TaskExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Log", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"))
    );

    $.Field({Static:false, Public:false}, "logExtension", $asm01.TypeRef("Microsoft.Build.Tasks.TaskLoggingHelperExtension"));

    $.Property({Static:false, Public:true }, "Log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveAssemblyReference */ 

(function ResolveAssemblyReference$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };


















































  function ResolveAssemblyReference_get_TargetFrameworkMonikerDisplayName () {
    return this.ResolveAssemblyReference$TargetFrameworkMonikerDisplayName$value;
  }; 




























































  function ResolveAssemblyReference_set_TargetFrameworkMonikerDisplayName (value) {
    this.ResolveAssemblyReference$TargetFrameworkMonikerDisplayName$value = value;
  }; 










  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.ResolveAssemblyReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForAssemblyInGac", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm07.TypeRef("System.Reflection.ProcessorArchitecture"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), $asm07.TypeRef("System.Version"), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChooseReferenceLoggingImportance", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"), [$asm01.TypeRef("Microsoft.Build.Tasks.Reference")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DumpTargetProfileLists", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyTableInfo")]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyTableInfo")]), 
          $asm01.TypeRef("Microsoft.Build.Tasks.ReferenceTable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $asm01.TypeRef("Microsoft.Build.Shared.DirectoryExists"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetDirectories"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyMetadata"), $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyNames"), 
          $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue"), $asm01.TypeRef("Microsoft.Build.Tasks.GetLastWriteTime"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), $asm01.TypeRef("Microsoft.Build.Shared.OpenBaseKey"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.CheckIfAssemblyInGac"), $asm01.TypeRef("Microsoft.Build.Tasks.IsWinMDFile"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.ReadMachineTypeFromPEHeader")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FilterBySubtypeAndTargetFramework", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FrameworkVersionFromString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateSubSetName", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowedAssemblyExtensions", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowedRelatedFileExtensions", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AppConfigFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AutoUnify", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CandidateAssemblyFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CopyLocalDependenciesWhenParentReferenceInGac", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CopyLocalFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FilesWritten", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FindDependencies", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FindRelatedFiles", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FindSatellites", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FindSerializationAssemblies", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FullFrameworkAssemblyTables", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FullFrameworkFolders", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FullTargetFrameworkSubsetNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreDefaultInstalledAssemblySubsetTables", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreDefaultInstalledAssemblyTables", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreTargetFrameworkAttributeVersionMismatch", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreVersionForFrameworkReferences", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InstalledAssemblySubsetTables", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InstalledAssemblyTables", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LatestTargetFrameworkDirectories", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProfileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RelatedFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResolvedDependencyFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResolvedFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResolvedSDKReferences", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SatelliteFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ScatterFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SearchPaths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SerializationAssemblyFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Silent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StateFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SuggestedRedirects", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetedRuntimeVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkDirectories", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkMoniker", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true }, "get_TargetFrameworkMonikerDisplayName", 
      JSIL.MethodSignature.Return($.String), 
      ResolveAssemblyReference_get_TargetFrameworkMonikerDisplayName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkSubsets", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetProcessorArchitecture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WarnOrErrorOnTargetArchitectureMismatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAssemblyRemappingsFromAppConfig", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.DependentAssembly")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInstalledAssemblyTableInfo", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyTableInfo")]), [
          $.Boolean, $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $asm01.TypeRef("Microsoft.Build.Tasks.ResolveAssemblyReference+GetListPath"), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleProfile", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyTableInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyTableInfo")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Hashtable")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.RedistList")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAvailableForTargetFramework", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogAssembliesConsideredAndRejected", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogAttribute", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogConflict", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogCopyLocalState", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogDependeeReference", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Reference"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LogDependees", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogFullName", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogImageRuntime", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogInputs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LogPrimaryOrDependency", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $.String, 
          $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogReference", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogReferenceDependenciesAndSourceItems", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Reference")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogReferenceErrors", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogRelatedFiles", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogResults", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ReferenceTable"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.DependentAssembly")]), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyNameReference")]), $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogSatellites", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogScatterFiles", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Reference"), $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateSuggestedRedirects", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.DependentAssembly")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessorArchitectureToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.ProcessorArchitecture")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadStateFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowedAssemblyExtensions", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowedRelatedFileExtensions", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AppConfigFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Assemblies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AutoUnify", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CandidateAssemblyFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CopyLocalDependenciesWhenParentReferenceInGac", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FilesWritten", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FindDependencies", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FindRelatedFiles", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FindSatellites", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FindSerializationAssemblies", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FullFrameworkAssemblyTables", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FullFrameworkFolders", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FullTargetFrameworkSubsetNames", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreDefaultInstalledAssemblySubsetTables", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreDefaultInstalledAssemblyTables", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreTargetFrameworkAttributeVersionMismatch", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreVersionForFrameworkReferences", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InstalledAssemblySubsetTables", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InstalledAssemblyTables", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LatestTargetFrameworkDirectories", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProfileName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResolvedSDKReferences", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SearchPaths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Silent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StateFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetedRuntimeVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkDirectories", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkMoniker", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:true }, "set_TargetFrameworkMonikerDisplayName", 
      JSIL.MethodSignature.Action($.String), 
      ResolveAssemblyReference_set_TargetFrameworkMonikerDisplayName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkSubsets", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetProcessorArchitecture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WarnOrErrorOnTargetArchitectureMismatch", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "SetTargetedRuntimeVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldUseSubsetBlackList", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "TargetProcessorArchitectureToEnumeration", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ProcessorArchitecture"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyInputConditions", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStateFile", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "cache", $asm01.TypeRef("Microsoft.Build.Tasks.SystemState"));

    $.Field({Static:false, Public:false}, "assemblyFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "assemblyNames", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "installedAssemblyTables", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "installedAssemblySubsetTables", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "fullFrameworkAssemblyTables", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "resolvedSDKReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "ignoreDefaultInstalledAssemblyTables", $.Boolean);

    $.Field({Static:false, Public:false}, "ignoreDefaultInstalledAssemblySubsetTables", $.Boolean);

    $.Field({Static:false, Public:false}, "candidateAssemblyFiles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "targetFrameworkDirectories", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "searchPaths", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "allowedAssemblyExtensions", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "relatedFileExtensions", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "appConfigFile", $.String);

    $.Field({Static:false, Public:false}, "autoUnify", $.Boolean);

    $.Field({Static:false, Public:false}, "ignoreVersionForFrameworkReferences", $.Boolean);

    $.Field({Static:false, Public:false}, "ignoreTargetFrameworkAttributeVersionMismatch", $.Boolean);

    $.Field({Static:false, Public:false}, "resolvedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "resolvedDependencyFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "relatedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "satelliteFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "serializationAssemblyFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "scatterFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "copyLocalFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "suggestedRedirects", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "targetFrameworkSubsets", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "fullTargetFrameworkSubsetNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "targetedFrameworkMoniker", $.String);

    $.Field({Static:false, Public:false}, "findDependencies", $.Boolean);

    $.Field({Static:false, Public:false}, "findSatellites", $.Boolean);

    $.Field({Static:false, Public:false}, "findSerializationAssemblies", $.Boolean);

    $.Field({Static:false, Public:false}, "findRelatedFiles", $.Boolean);

    $.Field({Static:false, Public:false}, "silent", $.Boolean);

    $.Field({Static:false, Public:false}, "projectTargetFrameworkAsString", $.String);

    $.Field({Static:false, Public:false}, "targetedRuntimeVersionRawValue", $.String);

    $.Field({Static:false, Public:false}, "projectTargetFramework", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "stateFile", $.String);

    $.Field({Static:false, Public:false}, "targetProcessorArchitecture", $.String);

    $.Field({Static:false, Public:false}, "profileName", $.String);

    $.Field({Static:false, Public:false}, "fullFrameworkFolders", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "latestTargetFrameworkDirectories", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "copyLocalDependenciesWhenParentReferenceInGac", $.Boolean);

    $.Field({Static:false, Public:false}, "showAssemblyFoldersExLocations", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")]));

    $.Field({Static:false, Public:false}, "logVerboseSearchResults", $.Boolean);

    $.Field({Static:false, Public:false}, "warnOrErrorOnTargetArchitectureMismatch", $asm01.TypeRef("Microsoft.Build.Tasks.WarnOrErrorOnTargetArchitectureMismatchBehavior"));

    $.Field({Static:false, Public:false}, "ResolveAssemblyReference$TargetFrameworkMonikerDisplayName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "filesWritten", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "WarnOrErrorOnTargetArchitectureMismatch", $.String);

    $.Property({Static:false, Public:true }, "AssemblyFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "LatestTargetFrameworkDirectories", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "IgnoreTargetFrameworkAttributeVersionMismatch", $.Boolean);

    $.Property({Static:false, Public:true }, "TargetFrameworkSubsets", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "Assemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "CandidateAssemblyFiles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "ResolvedSDKReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "TargetFrameworkDirectories", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "InstalledAssemblyTables", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "InstalledAssemblySubsetTables", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "FullFrameworkAssemblyTables", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "IgnoreDefaultInstalledAssemblyTables", $.Boolean);

    $.Property({Static:false, Public:true }, "IgnoreDefaultInstalledAssemblySubsetTables", $.Boolean);

    $.Property({Static:false, Public:true }, "IgnoreVersionForFrameworkReferences", $.Boolean);

    $.Property({Static:false, Public:true }, "TargetProcessorArchitecture", $.String);

    $.Property({Static:false, Public:true }, "TargetedRuntimeVersion", $.String);

    $.Property({Static:false, Public:true }, "SearchPaths", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "AllowedAssemblyExtensions", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "AllowedRelatedFileExtensions", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "AppConfigFile", $.String);

    $.Property({Static:false, Public:true }, "AutoUnify", $.Boolean);

    $.Property({Static:false, Public:true }, "CopyLocalDependenciesWhenParentReferenceInGac", $.Boolean);

    $.Property({Static:false, Public:true }, "StateFile", $.String);

    $.Property({Static:false, Public:true }, "FindDependencies", $.Boolean);

    $.Property({Static:false, Public:true }, "FindSatellites", $.Boolean);

    $.Property({Static:false, Public:true }, "FindSerializationAssemblies", $.Boolean);

    $.Property({Static:false, Public:true }, "FindRelatedFiles", $.Boolean);

    $.Property({Static:false, Public:true }, "Silent", $.Boolean);

    $.Property({Static:false, Public:true }, "TargetFrameworkVersion", $.String);

    $.Property({Static:false, Public:true }, "TargetFrameworkMoniker", $.String);

    $.Property({Static:false, Public:true }, "TargetFrameworkMonikerDisplayName", $.String);

    $.Property({Static:false, Public:true }, "FullTargetFrameworkSubsetNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "ProfileName", $.String);

    $.Property({Static:false, Public:true }, "FullFrameworkFolders", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "ResolvedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ResolvedDependencyFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "RelatedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "SatelliteFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "SerializationAssemblyFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ScatterFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "CopyLocalFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "SuggestedRedirects", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FilesWritten", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Build.Tasks.ResolveAssemblyReference+GetListPath */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.ResolveAssemblyReference+GetListPath", false, [], 
  new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.String")]), [$asm07.TypeRef("System.String")]));

/* class Microsoft.Build.Tasks.TaskItemSpecFilenameComparer */ 

(function TaskItemSpecFilenameComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.TaskItemSpecFilenameComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "comparer", $asm07.TypeRef("System.Collections.IComparer"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "genericComparer", $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer"), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.UnificationReason */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.UnificationReason", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DidntUnify: 0, 
    FrameworkRetarget: 1, 
    BecauseOfBindingRedirect: 2, 
  }
);

/* struct Microsoft.Build.Tasks.UnificationVersion */ 

(function UnificationVersion$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.UnificationVersion", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "referenceFullPath", $.String);

    $.Field({Static:false, Public:false}, "version", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "reason", $asm01.TypeRef("Microsoft.Build.Tasks.UnificationReason"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.UnifiedAssemblyName */ 

(function UnifiedAssemblyName$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.UnifiedAssemblyName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), 
          $.Boolean, $asm01.TypeRef("Microsoft.Build.Tasks.UnificationReason"), 
          $.Boolean, $asm07.TypeRef("System.Nullable`1", [$.Boolean]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPrerequisite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsRedistRoot", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsUnified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PostUnified", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreUnified", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RedistName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnificationReason", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.UnificationReason"))
    );

    $.Field({Static:false, Public:false}, "preUnified", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Field({Static:false, Public:false}, "postUnified", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Field({Static:false, Public:false}, "isUnified", $.Boolean);

    $.Field({Static:false, Public:false}, "isPrerequisite", $.Boolean);

    $.Field({Static:false, Public:false}, "isRedistRoot", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "redistName", $.String);

    $.Field({Static:false, Public:false}, "unificationReason", $asm01.TypeRef("Microsoft.Build.Tasks.UnificationReason"));

    $.Property({Static:false, Public:true }, "PreUnified", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Property({Static:false, Public:true }, "PostUnified", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Property({Static:false, Public:true }, "IsUnified", $.Boolean);

    $.Property({Static:false, Public:true }, "UnificationReason", $asm01.TypeRef("Microsoft.Build.Tasks.UnificationReason"));

    $.Property({Static:false, Public:true }, "IsPrerequisite", $.Boolean);

    $.Property({Static:false, Public:true }, "IsRedistRoot", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:true }, "RedistName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.WarnOrErrorOnTargetArchitectureMismatchBehavior */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.WarnOrErrorOnTargetArchitectureMismatchBehavior", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Error: 0, 
    Warning: 1, 
    None: 2, 
  }
);

/* class Microsoft.Build.Tasks.AssemblyFolder */ 

(function AssemblyFolder$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("Microsoft.Build.Tasks.AssemblyFolder", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AddFoldersFromRegistryKey", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Microsoft.Win32.RegistryKey"), $.String, 
          $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddFoldersFromRegistryKey", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAssemblyFolders", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAssemblyFolders", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ICollection"), [$.String])
    );

    $.Field({Static:true , Public:false}, "assemblyFolders", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "syncLock", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.StateFileBase */ 

(function StateFileBase$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.StateFileBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DeleteFile", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeserializeCache", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeCache", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssemblyRegistrationCache */ 

(function AssemblyRegistrationCache$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.StateFileBase"), 
      Name: "Microsoft.Build.Tasks.AssemblyRegistrationCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEntry", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEntry", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.Field({Static:false, Public:false}, "assemblies", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "typeLibraries", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssemblyRemapping */ 

(function AssemblyRemapping$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.AssemblyRemapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_From", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_To", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "from", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "to", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Property({Static:false, Public:true }, "From", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Property({Static:false, Public:true }, "To", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssignCulture */ 

(function AssignCulture$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.AssignCulture", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssignedFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssignedFilesWithCulture", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssignedFilesWithNoCulture", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CultureNeutralAssignedFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Files", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Files", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Field({Static:false, Public:false}, "files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "assignedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "assignedFilesWithCulture", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "assignedFilesWithNoCulture", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "cultureNeutralAssignedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "AssignedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "AssignedFilesWithCulture", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "AssignedFilesWithNoCulture", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "CultureNeutralAssignedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveProjectBase */ 

(function ResolveProjectBase$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.ResolveProjectBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSyntheticProjectReferences", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheProjectElementsFromXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProjectReferences", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProjectElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProjectItem", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProjectReferences", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyProjectReferenceItems", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyReferenceAttributes", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.Field({Static:false, Public:false}, "projectReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "cachedProjectReferencesByAbsolutePath", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]));

    $.Field({Static:false, Public:false}, "cachedProjectElements", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2F.TypeRef("System.Xml.XmlElement")]));

    $.Field({Static:false, Public:false}, "cachedProjectElementsByAbsolutePath", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm2F.TypeRef("System.Xml.XmlElement")]));

    $.Field({Static:false, Public:false}, "cachedProjectAbsolutePathsByGuid", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "cachedProjectGuidsByAbsolutePath", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "cachedDependencyProjectGuidsByDependingProjectGuid", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]));

    $.Constant({Static:true , Public:false}, "attributeProject", $.String, "Project");

    $.Constant({Static:true , Public:false}, "attributeAbsolutePath", $.String, "AbsolutePath");

    $.Property({Static:false, Public:true }, "ProjectReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssignProjectConfiguration */ 

(function AssignProjectConfiguration$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };




  function AssignProjectConfiguration_get_AddSyntheticProjectReferencesForSolutionDependencies () {
    return this.AssignProjectConfiguration$AddSyntheticProjectReferencesForSolutionDependencies$value;
  }; 


  function AssignProjectConfiguration_get_CurrentProject () {
    return this.AssignProjectConfiguration$CurrentProject$value;
  }; 













  function AssignProjectConfiguration_set_AddSyntheticProjectReferencesForSolutionDependencies (value) {
    this.AssignProjectConfiguration$AddSyntheticProjectReferencesForSolutionDependencies$value = value;
  }; 


  function AssignProjectConfiguration_set_CurrentProject (value) {
    this.AssignProjectConfiguration$CurrentProject$value = value;
  }; 













  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ResolveProjectBase"), 
      Name: "Microsoft.Build.Tasks.AssignProjectConfiguration", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_AddSyntheticProjectReferencesForSolutionDependencies", 
      JSIL.MethodSignature.Return($.Boolean), 
      AssignProjectConfiguration_get_AddSyntheticProjectReferencesForSolutionDependencies
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AssignedProjects", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Method({Static:false, Public:true }, "get_CurrentProject", 
      JSIL.MethodSignature.Return($.String), 
      AssignProjectConfiguration_get_CurrentProject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentProjectConfiguration", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentProjectPlatform", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultToVcxPlatformMapping", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResolveConfigurationPlatformUsingMappings", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ShouldUnsetParentConfigurationAndPlatform", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SolutionConfigurationContents", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnassignedProjects", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VcxToDefaultPlatformMapping", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateMappingDictionary", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveProject", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.Method({Static:false, Public:true }, "set_AddSyntheticProjectReferencesForSolutionDependencies", 
      JSIL.MethodSignature.Action($.Boolean), 
      AssignProjectConfiguration_set_AddSyntheticProjectReferencesForSolutionDependencies
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_AssignedProjects", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Method({Static:false, Public:true }, "set_CurrentProject", 
      JSIL.MethodSignature.Action($.String), 
      AssignProjectConfiguration_set_CurrentProject
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentProjectConfiguration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentProjectPlatform", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultToVcxPlatformMapping", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResolveConfigurationPlatformUsingMappings", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ShouldUnsetParentConfigurationAndPlatform", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SolutionConfigurationContents", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnassignedProjects", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_VcxToDefaultPlatformMapping", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "SetBuildInProjectAndReferenceOutputAssemblyMetadata", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), 
          $asm2F.TypeRef("System.Xml.XmlElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupDefaultPlatformMappings", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "solutionConfigurationContents", $.String);

    $.Field({Static:false, Public:false}, "AssignProjectConfiguration$AddSyntheticProjectReferencesForSolutionDependencies$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "defaultToVcxPlatformMapping", $.String);

    $.Field({Static:false, Public:false}, "vcxToDefaultPlatformMapping", $.String);

    $.Field({Static:false, Public:false}, "AssignProjectConfiguration$CurrentProject$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "currentProjectConfiguration", $.String);

    $.Field({Static:false, Public:false}, "onlyReferenceAndBuildProjectsEnabledInSolutionConfiguration", $.Boolean);

    $.Field({Static:false, Public:false}, "shouldUnsetParentConfigurationAndPlatform", $.Boolean);

    $.Field({Static:false, Public:false}, "outputType", $.String);

    $.Field({Static:false, Public:false}, "currentProjectPlatform", $.String);

    $.Field({Static:false, Public:false}, "resolveConfigurationPlatformUsingMappings", $.Boolean);

    $.Field({Static:false, Public:false}, "assignedProjects", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "unassignedProjects", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Constant({Static:true , Public:false}, "attrFullConfiguration", $.String, "FullConfiguration");

    $.Constant({Static:true , Public:false}, "buildReferenceMetadataName", $.String, "BuildReference");

    $.Constant({Static:true , Public:false}, "referenceOutputAssemblyMetadataName", $.String, "ReferenceOutputAssembly");

    $.Constant({Static:true , Public:false}, "buildProjectInSolutionAttribute", $.String, "BuildProjectInSolution");

    $.Constant({Static:true , Public:false}, "attrConfiguration", $.String, "Configuration");

    $.Constant({Static:true , Public:false}, "attrPlatform", $.String, "Platform");

    $.Constant({Static:true , Public:false}, "attrSetConfiguration", $.String, "SetConfiguration");

    $.Constant({Static:true , Public:false}, "attrSetPlatform", $.String, "SetPlatform");

    $.Field({Static:true , Public:false, ReadOnly:true }, "configPlatformSeparator", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "vcxToDefaultMap", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "defaultToVcxMap", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "mappingsPopulated", $.Boolean);

    $.Property({Static:false, Public:true }, "SolutionConfigurationContents", $.String);

    $.Property({Static:false, Public:true }, "AddSyntheticProjectReferencesForSolutionDependencies", $.Boolean);

    $.Property({Static:false, Public:true }, "DefaultToVcxPlatformMapping", $.String);

    $.Property({Static:false, Public:true }, "VcxToDefaultPlatformMapping", $.String);

    $.Property({Static:false, Public:true }, "CurrentProject", $.String);

    $.Property({Static:false, Public:true }, "CurrentProjectConfiguration", $.String);

    $.Property({Static:false, Public:true }, "CurrentProjectPlatform", $.String);

    $.Property({Static:false, Public:true }, "OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration", $.Boolean);

    $.Property({Static:false, Public:true }, "ShouldUnsetParentConfigurationAndPlatform", $.Boolean);

    $.Property({Static:false, Public:true }, "OutputType", $.String);

    $.Property({Static:false, Public:true }, "ResolveConfigurationPlatformUsingMappings", $.Boolean);

    $.Property({Static:false, Public:true }, "AssignedProjects", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "UnassignedProjects", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssignTargetPath */ 

(function AssignTargetPath$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.AssignTargetPath", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssignedFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Files", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RootFolder", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Files", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RootFolder", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "rootFolder", $.String);

    $.Field({Static:false, Public:false}, "files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "assignedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "RootFolder", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "Files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "AssignedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveComReference */ 

(function ResolveComReference$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm07.System.String))) ();
  };












  function ResolveComReference_get_EnvironmentVariables () {
    return this.ResolveComReference$EnvironmentVariables$value;
  }; 


































  function ResolveComReference_set_EnvironmentVariables (value) {
    this.ResolveComReference$EnvironmentVariables$value = value;
  }; 






















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.AppDomainIsolatedTaskExtension"), 
      Name: "Microsoft.Build.Tasks.ResolveComReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddMissingTlbReferences", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForConflictingReferences", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputePathToAxImp", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputePathToTlbImp", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertAttrReferencesToComReferenceInfo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertFileReferencesToComReferenceInfo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DelaySign", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_EnvironmentVariables", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String])), 
      ResolveComReference_get_EnvironmentVariables
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ExecuteAsTool", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeVersionInInteropName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyContainer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NoClassMembers", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResolvedAssemblyReferences", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResolvedFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResolvedModules", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SdkToolsPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Silent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StateFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetProcessorArchitecture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeLibFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeLibNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WrapperOutputDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPathToSDKFileWithCurrentlyTargetedArchitecture", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion"), 
          $asm02.TypeRef("Microsoft.Build.Utilities.VisualStudioVersion")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResolvedAssemblyReferenceItemSpecs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeDefaultMetadataForFileItem", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeDefaultMetadataForNameItem", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsExistingDependencyReference", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsExistingProjectReference", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Build.Tasks.IComReferenceResolver.ResolveComAssemblyReference", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    )
      .Overrides($asm01.TypeRef("Microsoft.Build.Tasks.IComReferenceResolver"), "ResolveComAssemblyReference");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Build.Tasks.IComReferenceResolver.ResolveComClassicReference", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo")])
        ])
    )
      .Overrides($asm01.TypeRef("Microsoft.Build.Tasks.IComReferenceResolver"), "ResolveComClassicReference");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Build.Tasks.IComReferenceResolver.ResolveNetAssemblyReference", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    )
      .Overrides($asm01.TypeRef("Microsoft.Build.Tasks.IComReferenceResolver"), "ResolveNetAssemblyReference");

    $.ExternalMethod({Static:false, Public:false}, "ResolveComClassicReference", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"), $.String, 
          $.String, $.String, 
          $.Boolean, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveComReferenceAx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"), $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveComReferencePia", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveComReferenceTlb", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"), $.String, 
          $.String, $.Boolean, 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveReference", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ComDependencyWalker"), $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"), 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveReferenceAndAddToList", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ComDependencyWalker"), $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"), 
          $asm07.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAndResolveAllDependencies", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), [$asm01.TypeRef("Microsoft.Build.Tasks.ComDependencyWalker"), $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DelaySign", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:true }, "set_EnvironmentVariables", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String])), 
      ResolveComReference_set_EnvironmentVariables
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ExecuteAsTool", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IncludeVersionInInteropName", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyContainer", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NoClassMembers", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResolvedAssemblyReferences", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResolvedFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResolvedModules", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SdkToolsPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Silent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StateFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetProcessorArchitecture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeLibFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeLibNames", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WrapperOutputDirectory", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCopyLocalToFalseOnGacOrNoPIAAssemblies", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ArrayList"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFrameworkVersionFromString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "TaskItemToTypeLibAttr", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR"), [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAndInitializeInputs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyReferenceMetadataForNameItem", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.Field({Static:false, Public:false}, "typeLibNames", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "ResolveComReference$EnvironmentVariables$value", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "typeLibFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "allProjectRefs", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo")]));

    $.Field({Static:false, Public:false}, "allDependencyRefs", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo")]));

    $.Field({Static:false, Public:false}, "wrapperOutputDirectory", $.String);

    $.Field({Static:false, Public:false}, "includeVersionInInteropName", $.Boolean);

    $.Field({Static:false, Public:false}, "resolvedAssemblyReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "keyContainer", $.String);

    $.Field({Static:false, Public:false}, "keyFile", $.String);

    $.Field({Static:false, Public:false}, "delaySign", $.Boolean);

    $.Field({Static:false, Public:false}, "noClassMembers", $.Boolean);

    $.Field({Static:false, Public:false}, "silent", $.Boolean);

    $.Field({Static:false, Public:false}, "targetProcessorArchitecture", $.String);

    $.Field({Static:false, Public:false}, "executeAsTool", $.Boolean);

    $.Field({Static:false, Public:false}, "resolvedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "resolvedModules", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "sdkToolsPath", $.String);

    $.Field({Static:false, Public:false}, "stateFile", $.String);

    $.Field({Static:false, Public:false}, "projectTargetFrameworkAsString", $.String);

    $.Field({Static:false, Public:false}, "projectTargetFramework", $asm07.TypeRef("System.Version"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "TargetFrameworkVersion_40", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "timestampCache", $asm01.TypeRef("Microsoft.Build.Tasks.ResolveComReferenceCache"));

    $.Field({Static:false, Public:false}, "cachePia", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "cacheTlb", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "cacheAx", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "aximpPath", $.String);

    $.Field({Static:false, Public:false}, "tlbimpPath", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "requiredMetadataForNameItem", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "TypeLibNames", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "TypeLibFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "EnvironmentVariables", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "WrapperOutputDirectory", $.String);

    $.Property({Static:false, Public:true }, "IncludeVersionInInteropName", $.Boolean);

    $.Property({Static:false, Public:true }, "ResolvedAssemblyReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "KeyContainer", $.String);

    $.Property({Static:false, Public:true }, "KeyFile", $.String);

    $.Property({Static:false, Public:true }, "DelaySign", $.Boolean);

    $.Property({Static:false, Public:true }, "NoClassMembers", $.Boolean);

    $.Property({Static:false, Public:true }, "Silent", $.Boolean);

    $.Property({Static:false, Public:true }, "TargetProcessorArchitecture", $.String);

    $.Property({Static:false, Public:true }, "ExecuteAsTool", $.Boolean);

    $.Property({Static:false, Public:true }, "ResolvedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ResolvedModules", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "SdkToolsPath", $.String);

    $.Property({Static:false, Public:true }, "StateFile", $.String);

    $.Property({Static:false, Public:true }, "TargetFrameworkVersion", $.String);

    $.ImplementInterfaces(
      /* 1 */ $asm01.TypeRef("Microsoft.Build.Tasks.IComReferenceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AxTlbBaseTask */ 

(function AxTlbBaseTask$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ToolTaskExtension"), 
      Name: "Microsoft.Build.Tasks.AxTlbBaseTask", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddCommandLineCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddStrongNameOptions", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateFullPathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DelaySign", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyContainer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SdkToolsPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DelaySign", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyContainer", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SdkToolsPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateStrongNameParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "delaySigningAndKeyFileOnlyContainsPublicKey", $.Boolean);

    $.Property({Static:false, Public:true }, "DelaySign", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyContainer", $.String);

    $.Property({Static:false, Public:true }, "KeyFile", $.String);

    $.Property({Static:false, Public:true }, "SdkToolsPath", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ToolName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveComReference+AxImp */ 

(function AxImp$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.AxTlbBaseTask"), 
      Name: "Microsoft.Build.Tasks.ResolveComReference+AxImp", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddCommandLineCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActiveXControlName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GenerateSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NoLogo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputAssembly", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RuntimeCallableWrapperAssembly", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Silent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Verbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ActiveXControlName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_GenerateSource", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NoLogo", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputAssembly", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RuntimeCallableWrapperAssembly", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Silent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Verbose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true }, "ActiveXControlName", $.String);

    $.Property({Static:false, Public:true }, "GenerateSource", $.Boolean);

    $.Property({Static:false, Public:true }, "NoLogo", $.Boolean);

    $.Property({Static:false, Public:true }, "OutputAssembly", $.String);

    $.Property({Static:false, Public:true }, "RuntimeCallableWrapperAssembly", $.String);

    $.Property({Static:false, Public:true }, "Silent", $.Boolean);

    $.Property({Static:false, Public:true }, "Verbose", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ToolName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.ResolveComReference+TlbImpTransformFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.ResolveComReference+TlbImpTransformFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    TransformDispRetVals: 1, 
    SerializableValueClasses: 2, 
  }
);

/* class Microsoft.Build.Tasks.ResolveComReference+TlbImp */ 

(function TlbImp$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.AxTlbBaseTask"), 
      Name: "Microsoft.Build.Tasks.ResolveComReference+TlbImp", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddCommandLineCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertTransformFlagsToCommandLineCommand", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveComReference+TlbImpTransformFlags")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Machine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NoLogo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputAssembly", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreventClassMembers", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferenceFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SafeArrayAsSystemArray", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Silent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Transform", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.ResolveComReference+TlbImpTransformFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeLibName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Verbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTlbImpTransformFlagsParameterWithDefault", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.ResolveComReference+TlbImpTransformFlags"), [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.ResolveComReference+TlbImpTransformFlags")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyVersion", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Machine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NoLogo", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputAssembly", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreventClassMembers", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReferenceFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SafeArrayAsSystemArray", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Silent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Transform", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.ResolveComReference+TlbImpTransformFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeLibName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Verbose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateTransformFlags", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true }, "TypeLibName", $.String);

    $.Property({Static:false, Public:true }, "AssemblyNamespace", $.String);

    $.Property({Static:false, Public:true }, "AssemblyVersion", $asm07.TypeRef("System.Version"));

    $.Property({Static:false, Public:true }, "Machine", $.String);

    $.Property({Static:false, Public:true }, "NoLogo", $.Boolean);

    $.Property({Static:false, Public:true }, "OutputAssembly", $.String);

    $.Property({Static:false, Public:true }, "PreventClassMembers", $.Boolean);

    $.Property({Static:false, Public:true }, "SafeArrayAsSystemArray", $.Boolean);

    $.Property({Static:false, Public:true }, "Silent", $.Boolean);

    $.Property({Static:false, Public:true }, "Transform", $asm01.TypeRef("Microsoft.Build.Tasks.ResolveComReference+TlbImpTransformFlags"));

    $.Property({Static:false, Public:true }, "Verbose", $.Boolean);

    $.Property({Static:false, Public:true }, "ReferenceFiles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "ToolName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveComReference+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ResolveComReference+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetResolvedAssemblyReferenceItemSpecs$gb__103_0", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__103_0", $asm07.TypeRef("System.Func`2", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.ComReference */ 

(function ComReference$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ComReference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.Boolean, 
          $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreTypeLibAttrEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR"), $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindExistingWrapper", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo")]), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Ado27ErrorMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Ado27Installed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ItemName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Log", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReferenceInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Silent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFuncDescForDescIndex", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeInfo"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.FUNCDESC")]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathOfTypeLib", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR")]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeAttrForTypeInfo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPEATTR")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeLibAttrForTypeLib", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeLib")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeLibNameForITypeLib", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.Boolean, 
          $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeLib"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeLibNameForTypeLibAttrs", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.Boolean, 
          $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR"), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetVarDescForVarIndex", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeInfo"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.VARDESC")]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemapAdoTypeLib", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "StripTypeLibNumberFromPath", 
      new JSIL.MethodSignature($.String, [$.String, $asm01.TypeRef("Microsoft.Build.Shared.FileExists")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UniqueKeyFromTypeLibAttr", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR")])
    );

    $.Field({Static:false, Public:false}, "referenceInfo", $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"));

    $.Field({Static:false, Public:false}, "itemName", $.String);

    $.Field({Static:false, Public:false}, "log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Field({Static:false, Public:false}, "silent", $.Boolean);

    $.Field({Static:true , Public:false}, "ado27PropertyInitialized", $.Boolean, false);

    $.Field({Static:true , Public:false}, "ado27Installed", $.Boolean);

    $.Field({Static:true , Public:false}, "ado27ErrorMessage", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "guidADO20", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "guidADO21", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "guidADO25", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "guidADO26", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "guidADO27", $asm07.TypeRef("System.Guid"));


    function ComReference__cctor () {
      $thisType.guidADO20 = new $asm07.System.Guid();
      $thisType.guidADO21 = new $asm07.System.Guid();
      $thisType.guidADO25 = new $asm07.System.Guid();
      $thisType.guidADO26 = new $asm07.System.Guid();
      $thisType.guidADO27 = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ComReference__cctor
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ReferenceInfo", $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "ItemName", $.String);

    $.Property({Static:false, Public:false}, "Log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Property({Static:false, Public:false}, "Silent", $.Boolean);

    $.Property({Static:true , Public:false}, "Ado27Installed", $.Boolean);

    $.Property({Static:true , Public:false}, "Ado27ErrorMessage", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AxTlbBaseReference */ 

(function AxTlbBaseReference$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.Microsoft.Build.Framework.IBuildEngine)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm07.System.String))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.String)) ();
  };




  function AxTlbBaseReference_get_BuildEngine () {
    return this.AxTlbBaseReference$BuildEngine$value;
  }; 

  function AxTlbBaseReference_get_DelaySign () {
    return this.AxTlbBaseReference$DelaySign$value;
  }; 

  function AxTlbBaseReference_get_EnvironmentVariables () {
    return this.AxTlbBaseReference$EnvironmentVariables$value;
  }; 

  function AxTlbBaseReference_get_ExecuteAsTool () {
    return this.AxTlbBaseReference$ExecuteAsTool$value;
  }; 


  function AxTlbBaseReference_get_KeyContainer () {
    return this.AxTlbBaseReference$KeyContainer$value;
  }; 

  function AxTlbBaseReference_get_KeyFile () {
    return this.AxTlbBaseReference$KeyFile$value;
  }; 



  function AxTlbBaseReference_get_ToolPath () {
    return this.AxTlbBaseReference$ToolPath$value;
  }; 







  function AxTlbBaseReference_set_BuildEngine (value) {
    this.AxTlbBaseReference$BuildEngine$value = value;
  }; 

  function AxTlbBaseReference_set_DelaySign (value) {
    this.AxTlbBaseReference$DelaySign$value = value;
  }; 

  function AxTlbBaseReference_set_EnvironmentVariables (value) {
    this.AxTlbBaseReference$EnvironmentVariables$value = value;
  }; 

  function AxTlbBaseReference_set_ExecuteAsTool (value) {
    this.AxTlbBaseReference$ExecuteAsTool$value = value;
  }; 


  function AxTlbBaseReference_set_KeyContainer (value) {
    this.AxTlbBaseReference$KeyContainer$value = value;
  }; 

  function AxTlbBaseReference_set_KeyFile (value) {
    this.AxTlbBaseReference$KeyFile$value = value;
  }; 

  function AxTlbBaseReference_set_ToolPath (value) {
    this.AxTlbBaseReference$ToolPath$value = value;
  }; 


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ComReference"), 
      Name: "Microsoft.Build.Tasks.AxTlbBaseReference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 14, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.Boolean, 
          $asm01.TypeRef("Microsoft.Build.Tasks.IComReferenceResolver"), $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"), 
          $.String, $.String, 
          $.Boolean, $.String, 
          $.String, $.Boolean, 
          $.Boolean, $.String, 
          $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindExistingWrapper", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo")]), $asm07.TypeRef("System.DateTime")])
    );

    $.Method({Static:false, Public:false}, "get_BuildEngine", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine")), 
      AxTlbBaseReference_get_BuildEngine
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_DelaySign", 
      JSIL.MethodSignature.Return($.Boolean), 
      AxTlbBaseReference_get_DelaySign
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_EnvironmentVariables", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String])), 
      AxTlbBaseReference_get_EnvironmentVariables
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_ExecuteAsTool", 
      JSIL.MethodSignature.Return($.Boolean), 
      AxTlbBaseReference_get_ExecuteAsTool
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IncludeTypeLibVersionInName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_KeyContainer", 
      JSIL.MethodSignature.Return($.String), 
      AxTlbBaseReference_get_KeyContainer
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_KeyFile", 
      JSIL.MethodSignature.Return($.String), 
      AxTlbBaseReference_get_KeyFile
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OutputDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResolverCallback", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.IComReferenceResolver"))
    );

    $.Method({Static:false, Public:false}, "get_ToolPath", 
      JSIL.MethodSignature.Return($.String), 
      AxTlbBaseReference_get_ToolPath
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetAndValidateStrongNameKey", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.StrongNameKeyPair")]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWrapperFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWrapperFileName", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.Boolean, $.Int16, 
          $.Int16
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWrapperFileNameInternal", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWrapperPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsWrapperUpToDate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo"), $asm07.TypeRef("System.DateTime")])
    );

    $.Method({Static:false, Public:false}, "set_BuildEngine", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine")), 
      AxTlbBaseReference_set_BuildEngine
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_DelaySign", 
      JSIL.MethodSignature.Action($.Boolean), 
      AxTlbBaseReference_set_DelaySign
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_EnvironmentVariables", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String])), 
      AxTlbBaseReference_set_EnvironmentVariables
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ExecuteAsTool", 
      JSIL.MethodSignature.Action($.Boolean), 
      AxTlbBaseReference_set_ExecuteAsTool
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IncludeTypeLibVersionInName", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:false}, "set_KeyContainer", 
      JSIL.MethodSignature.Action($.String), 
      AxTlbBaseReference_set_KeyContainer
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_KeyFile", 
      JSIL.MethodSignature.Action($.String), 
      AxTlbBaseReference_set_KeyFile
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ToolPath", 
      JSIL.MethodSignature.Action($.String), 
      AxTlbBaseReference_set_ToolPath
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SigningRequirementsMatchExistingWrapper", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo")])
    );

    $.Field({Static:false, Public:false}, "outputDirectory", $.String);

    $.Field({Static:false, Public:false}, "resolverCallback", $asm01.TypeRef("Microsoft.Build.Tasks.IComReferenceResolver"));

    $.Field({Static:false, Public:false}, "AxTlbBaseReference$KeyContainer$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AxTlbBaseReference$KeyFile$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AxTlbBaseReference$DelaySign$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AxTlbBaseReference$ExecuteAsTool$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AxTlbBaseReference$BuildEngine$value", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AxTlbBaseReference$EnvironmentVariables$value", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "AxTlbBaseReference$ToolPath$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "includeTypeLibVersionInName", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OutputDirectory", $.String);

    $.Property({Static:false, Public:false}, "ResolverCallback", $asm01.TypeRef("Microsoft.Build.Tasks.IComReferenceResolver"));

    $.Property({Static:false, Public:false}, "KeyContainer", $.String);

    $.Property({Static:false, Public:false}, "KeyFile", $.String);

    $.Property({Static:false, Public:false}, "DelaySign", $.Boolean);

    $.Property({Static:false, Public:false}, "ExecuteAsTool", $.Boolean);

    $.Property({Static:false, Public:false}, "BuildEngine", $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"));

    $.Property({Static:false, Public:false}, "EnvironmentVariables", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "ToolPath", $.String);

    $.Property({Static:false, Public:false}, "IncludeTypeLibVersionInName", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AxReference */ 

(function AxReference$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.AxTlbBaseReference"), 
      Name: "Microsoft.Build.Tasks.AxReference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 13, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.Boolean, 
          $asm01.TypeRef("Microsoft.Build.Tasks.IComReferenceResolver"), $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"), 
          $.String, $.String, 
          $.Boolean, $.String, 
          $.String, $.Boolean, 
          $.String, $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateWrapper", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWrapperFileNameInternal", 
      new JSIL.MethodSignature($.String, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.CallTarget */ 

(function CallTarget$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.CallTarget", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RunEachTargetSeparately", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetOutputs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Targets", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseResultsCache", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RunEachTargetSeparately", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Targets", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseResultsCache", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "targets", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "targetOutputs", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "runEachTargetSeparately", $.Boolean);

    $.Field({Static:false, Public:false}, "useResultsCache", $.Boolean);

    $.Property({Static:false, Public:true }, "Targets", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "TargetOutputs", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "RunEachTargetSeparately", $.Boolean);

    $.Property({Static:false, Public:true }, "UseResultsCache", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RunInMTAAttribute"));

})();

/* class Microsoft.Build.Tasks.CodeTaskFactory */ 

(function CodeTaskFactory$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };



















  function CodeTaskFactory_get_TaskType () {
    return this.CodeTaskFactory$TaskType$value;
  }; 




  function CodeTaskFactory_set_TaskType (value) {
    this.CodeTaskFactory$TaskType$value = value;
  }; 


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.CodeTaskFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReferenceAssemblyToReferenceList", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CleanupTask", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITask"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CombineReferencedAssemblies", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CombineUsingNamespaces", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileInMemoryAssembly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateExecuteMethodFromFragment", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateProperty", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), $.String, 
          $asm07.TypeRef("System.Type"), $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateProperty", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm00.TypeRef("Microsoft.Build.Framework.TaskPropertyInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateTask", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Build.Framework.ITask"), [$asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateTaskBody", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTaskClass", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTaskProperties", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExtractReferencedAssemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExtractTaskContent", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExtractUsingNamespaces", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FactoryName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_TaskType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      CodeTaskFactory_get_TaskType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTaskParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.TaskPropertyInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasInvalidChildNodes", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode"), $jsilcore.TypeRef("System.Array", [$asm2F.TypeRef("System.Xml.XmlNodeType")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm00.TypeRef("Microsoft.Build.Framework.TaskPropertyInfo")]), 
          $.String, $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine")
        ])
    );

    $.Method({Static:false, Public:false}, "set_TaskType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      CodeTaskFactory_set_TaskType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ValidateTaskNode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "defaultReferencedAssemblies", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "defaultUsingNamespaces", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "compiledTaskCache", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm01.TypeRef("Microsoft.Build.Tasks.CodeTaskFactory+FullTaskSpecification"), $asm07.TypeRef("System.Reflection.Assembly")]));

    $.Field({Static:false, Public:false}, "referencedAssemblies", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "usingNamespaces", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "type", $.String);

    $.Field({Static:false, Public:false}, "typeIsFragment", $.Boolean);

    $.Field({Static:false, Public:false}, "typeIsMethod", $.Boolean);

    $.Field({Static:false, Public:false}, "language", $.String);

    $.Field({Static:false, Public:false}, "sourceCode", $.String);

    $.Field({Static:false, Public:false}, "nameOfTask", $.String);

    $.Field({Static:false, Public:false}, "sourcePath", $.String);

    $.Field({Static:false, Public:false}, "taskNode", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "compiledAssembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:false, Public:false}, "log", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Field({Static:false, Public:false}, "taskParameterTypeInfo", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm00.TypeRef("Microsoft.Build.Framework.TaskPropertyInfo")]));

    $.Field({Static:false, Public:false}, "CodeTaskFactory$TaskType$value", $asm07.TypeRef("System.Type"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "FactoryName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TaskType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Build.Framework.ITaskFactory")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.CodeTaskFactory+FullTaskSpecification */ 

(function FullTaskSpecification$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.CodeTaskFactory+FullTaskSpecification", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IComparable$lMicrosoft.Build.Tasks.CodeTaskFactory.FullTaskSpecification$g.CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    )
      .Overrides($asm07.TypeRef("System.IComparable`1", [$asm01.TypeRef("Microsoft.Build.Tasks.CodeTaskFactory+FullTaskSpecification")]), "CompareTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IEquatable$lMicrosoft.Build.Tasks.CodeTaskFactory.FullTaskSpecification$g.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    )
      .Overrides($asm07.TypeRef("System.IEquatable`1", [$asm01.TypeRef("Microsoft.Build.Tasks.CodeTaskFactory+FullTaskSpecification")]), "Equals");

    $.Field({Static:false, Public:false}, "referenceAssemblies", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "fullCode", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable`1", [$.Type]), 
      /* 1 */ $asm07.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.CombinePath */ 

(function CombinePath$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.CombinePath", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BasePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CombinedPaths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Paths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BasePath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CombinedPaths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Paths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Field({Static:false, Public:false}, "basePath", $.String);

    $.Field({Static:false, Public:false}, "paths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "combinedPaths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "BasePath", $.String);

    $.Property({Static:false, Public:true }, "Paths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "CombinedPaths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.CommandLineBuilderExtension */ 

(function CommandLineBuilderExtension$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Build.Utilities.CommandLineBuilder"), 
      Name: "Microsoft.Build.Tasks.CommandLineBuilderExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendByChoiceSwitch", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Collections.Hashtable"), 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendNestedSwitch", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendPlusOrMinusSwitch", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Collections.Hashtable"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSwitchAliased", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSwitchIfNotNull", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSwitchIfNotNull", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSwitchWithInteger", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Collections.Hashtable"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSwitchWithSplitting", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Char])
        ])
    )
      .Parameter(3, "splitOn", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "AppendWhenTrue", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Collections.Hashtable"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQuotedText", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsParameterEmpty", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("System.Array", [$.Char])])
    )
      .Parameter(1, "splitOn", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Build.Tasks.MarshalReleaseComObject */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.MarshalReleaseComObject", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.Object")]));

/* class Microsoft.Build.Tasks.ComDependencyWalker */ 

(function ComDependencyWalker$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ComDependencyWalker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.MarshalReleaseComObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AnalyzeElement", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeInfo"), $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ELEMDESC")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AnalyzeTypeInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AnalyzeTypeLibrary", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeLib"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CanSkipType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeInfo"), $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeLib"), 
          $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPEATTR"), $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearAnalyzedTypeCache", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearDependencyList", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncounteredProblems", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Exception")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAnalyzedTypeNames", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDependencies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanDefinedFunctions", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeInfo"), $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPEATTR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanDefinedVariables", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeInfo"), $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPEATTR")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanImplementedTypes", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeInfo"), $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPEATTR")])
    );

    $.Field({Static:false, Public:false}, "dependencies", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "analyzedTypes", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Field({Static:false, Public:false}, "marshalReleaseComObject", $asm01.TypeRef("Microsoft.Build.Tasks.MarshalReleaseComObject"));

    $.Field({Static:false, Public:false}, "encounteredProblems", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Exception")]));

    $.Property({Static:false, Public:false}, "EncounteredProblems", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Exception")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ComReferenceInfo */ 

(function ComReferenceInfo$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ComReferenceInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SourceItemSpec", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeLibId", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeWithPath", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.Boolean, 
          $.String, $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeWithTypeLibAttrs", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.Boolean, 
          $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseTypeLibPtr", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "typeLibPointer", $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeLib"));

    $.Field({Static:false, Public:false}, "attr", $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR"));

    $.Field({Static:false, Public:false}, "typeLibName", $.String);

    $.Field({Static:false, Public:false}, "strippedTypeLibPath", $.String);

    $.Field({Static:false, Public:false}, "fullTypeLibPath", $.String);

    $.Field({Static:false, Public:false}, "taskItem", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "primaryOfAxImpRef", $.Type);

    $.Field({Static:false, Public:false}, "resolvedWrapper", $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo"));

    $.Field({Static:false, Public:false}, "dependentWrapperPaths", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "referencePathItem", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:false}, "SourceItemSpec", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ComReferenceItemMetadataNames */ 

(function ComReferenceItemMetadataNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.Build.Tasks.ComReferenceItemMetadataNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "guid", $.String, "Guid");

    $.Constant({Static:true , Public:false}, "versionMinor", $.String, "VersionMinor");

    $.Constant({Static:true , Public:false}, "versionMajor", $.String, "VersionMajor");

    $.Constant({Static:true , Public:false}, "lcid", $.String, "Lcid");

    $.Constant({Static:true , Public:false}, "privatized", $.String, "Private");

    $.Constant({Static:true , Public:false}, "wrapperTool", $.String, "WrapperTool");

    $.Constant({Static:true , Public:false}, "tlbReferenceName", $.String, "TlbReferenceName");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ComReferenceResolutionException */ 

(function ComReferenceResolutionException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Build.Tasks.ComReferenceResolutionException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ComReferenceTypes */ 

(function ComReferenceTypes$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("Microsoft.Build.Tasks.ComReferenceTypes", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "IsAxImp", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPia", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPiaOrTlbImp", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTlbImp", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Constant({Static:true , Public:false}, "tlbimp", $.String, "tlbimp");

    $.Constant({Static:true , Public:false}, "aximp", $.String, "aximp");

    $.Constant({Static:true , Public:false}, "primary", $.String, "primary");

    $.Constant({Static:true , Public:false}, "primaryortlbimp", $.String, "primaryortlbimp");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ComReferenceWrapperInfo */ 

(function ComReferenceWrapperInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ComReferenceWrapperInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "path", $.String);

    $.Field({Static:false, Public:false}, "assembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:false, Public:false}, "originalPiaName", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ConvertToAbsolutePath */ 

(function ConvertToAbsolutePath$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.ConvertToAbsolutePath", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AbsolutePaths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Paths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AbsolutePaths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Paths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Field({Static:false, Public:false}, "paths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "absolutePaths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Paths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "AbsolutePaths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.BuildCacheDisposeWrapper */ 

(function BuildCacheDisposeWrapper$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.BuildCacheDisposeWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.BuildCacheDisposeWrapper+CallDuringDispose"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "callDuringDispose", $asm01.TypeRef("Microsoft.Build.Tasks.BuildCacheDisposeWrapper+CallDuringDispose"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Build.Tasks.BuildCacheDisposeWrapper+CallDuringDispose */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.BuildCacheDisposeWrapper+CallDuringDispose", false, [], 
  JSIL.MethodSignature.Void);

/* delegate Microsoft.Build.Tasks.CopyFileWithState */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.CopyFileWithState", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.Boolean")]), [$asm01.TypeRef("Microsoft.Build.Tasks.FileState"), $asm01.TypeRef("Microsoft.Build.Tasks.FileState")]));

/* class Microsoft.Build.Tasks.FileState */ 

(function FileState$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.FileState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsurePopulated", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DirectoryExists", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileExists", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDirectory", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastWriteTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastWriteTimeUtcFast", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "filename", $.String);

    $.Field({Static:false, Public:false}, "data", $asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+WIN32_FILE_ATTRIBUTE_DATA"));

    $.Field({Static:false, Public:false}, "dataIsGood", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "fileOrDirectoryExists", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "FileExists", $.Boolean);

    $.Property({Static:false, Public:false}, "DirectoryExists", $.Boolean);

    $.Property({Static:false, Public:false}, "LastWriteTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "LastWriteTimeUtcFast", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "Length", $.Int64);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "IsDirectory", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Copy */ 

(function Copy$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };














  function Copy_get_RetryDelayMilliseconds () {
    return this.Copy$RetryDelayMilliseconds$value;
  }; 



  function Copy_get_UseHardlinksIfPossible () {
    return this.Copy$UseHardlinksIfPossible$value;
  }; 










  function Copy_set_RetryDelayMilliseconds (value) {
    this.Copy$RetryDelayMilliseconds$value = (value | 0);
  }; 



  function Copy_set_UseHardlinksIfPossible (value) {
    this.Copy$UseHardlinksIfPossible$value = value;
  }; 


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.Copy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Cancel", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFileWithLogging", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$.Boolean]), [$asm01.TypeRef("Microsoft.Build.Tasks.FileState"), $asm01.TypeRef("Microsoft.Build.Tasks.FileState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoCopyIfNecessary", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Tasks.FileState"), $asm01.TypeRef("Microsoft.Build.Tasks.FileState"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.CopyFileWithState")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoCopyWithRetries", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Tasks.FileState"), $asm01.TypeRef("Microsoft.Build.Tasks.FileState"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.CopyFileWithState")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.CopyFileWithState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CopiedFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DestinationFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DestinationFolder", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OverwriteReadOnlyFiles", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Retries", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Method({Static:false, Public:true }, "get_RetryDelayMilliseconds", 
      JSIL.MethodSignature.Return($.Int32), 
      Copy_get_RetryDelayMilliseconds
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SkipUnchangedFiles", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Method({Static:false, Public:true }, "get_UseHardlinksIfPossible", 
      JSIL.MethodSignature.Return($.Boolean), 
      Copy_get_UseHardlinksIfPossible
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "InitializeDestinationFiles", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMatchingSizeAndTimeStamp", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.FileState"), $asm01.TypeRef("Microsoft.Build.Tasks.FileState")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogDiagnostic", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "MakeFileWriteable", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.FileState"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "PathsAreIdentical", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DestinationFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DestinationFolder", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OverwriteReadOnlyFiles", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Retries", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Method({Static:false, Public:true }, "set_RetryDelayMilliseconds", 
      JSIL.MethodSignature.Action($.Int32), 
      Copy_set_RetryDelayMilliseconds
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_SkipUnchangedFiles", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SourceFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Method({Static:false, Public:true }, "set_UseHardlinksIfPossible", 
      JSIL.MethodSignature.Action($.Boolean), 
      Copy_set_UseHardlinksIfPossible
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ValidateInputs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "sourceFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "destinationFolder", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "destinationFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "skipUnchangedFiles", $.Boolean);

    $.Field({Static:false, Public:false}, "copiedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "canceling", $.Boolean);

    $.Field({Static:false, Public:false}, "overwriteReadOnlyFiles", $.Boolean);

    $.Field({Static:false, Public:false}, "directoriesKnownToExist", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]));

    $.Field({Static:true , Public:false}, "alwaysRetryCopy", $.Boolean);

    $.Field({Static:false, Public:false}, "retries", $.Int32);

    $.Constant({Static:true , Public:false}, "RetryDelayMillisecondsDefault", $.Int32, 1000);

    $.Field({Static:false, Public:false}, "Copy$RetryDelayMilliseconds$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Copy$UseHardlinksIfPossible$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "SourceFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "DestinationFolder", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "Retries", $.Int32);

    $.Property({Static:false, Public:true }, "RetryDelayMilliseconds", $.Int32);

    $.Property({Static:false, Public:true }, "UseHardlinksIfPossible", $.Boolean);

    $.Property({Static:false, Public:true }, "SkipUnchangedFiles", $.Boolean);

    $.Property({Static:false, Public:true }, "DestinationFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "CopiedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "OverwriteReadOnlyFiles", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("Microsoft.Build.Framework.ICancelableTask")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.CreateManifestResourceName */ 

(function CreateManifestResourceName$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.CreateManifestResourceName", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateFileStreamOverNewFileStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [
          $.String, $asm07.TypeRef("System.IO.FileMode"), 
          $asm07.TypeRef("System.IO.FileAccess")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateManifestName", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.CreateFileStream")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ManifestResourceNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrependCultureAsDirectory", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResourceFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResourceFilesWithManifestResourceNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RootNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsSourceFile", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidEverettIdChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidEverettIdFirstChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeValidEverettFolderIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeValidEverettIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeValidEverettSubFolderIdentifier", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PrependCultureAsDirectory", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResourceFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResourceFilesWithManifestResourceNames", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RootNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "resourceFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "rootNamespace", $.String);

    $.Field({Static:false, Public:false}, "manifestResourceNames", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "resourceFilesWithManifestResourceNames", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "prependCultureAsDirectory", $.Boolean);

    $.Field({Static:false, Public:false}, "itemSpecToTaskitem", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "PrependCultureAsDirectory", $.Boolean);

    $.Property({Static:false, Public:true }, "ResourceFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "RootNamespace", $.String);

    $.Property({Static:false, Public:true }, "ManifestResourceNames", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ResourceFilesWithManifestResourceNames", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.CreateCSharpManifestResourceName */ 

(function CreateCSharpManifestResourceName$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.CreateManifestResourceName"), 
      Name: "Microsoft.Build.Tasks.CreateCSharpManifestResourceName", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateManifestName", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateManifestNameImpl", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.Boolean, $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.IO.Stream"), $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsSourceFile", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.CreateItem */ 

(function CreateItem$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.CreateItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateOutputItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Collections.Hashtable"), $asm07.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpandWildcards", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AdditionalMetadata", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Exclude", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Include", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreserveExistingMetadata", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUniqueItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Hashtable"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AdditionalMetadata", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Exclude", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Include", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreserveExistingMetadata", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "include", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "exclude", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "additionalMetadata", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "preserveExistingMetadata", $.Boolean);

    $.Property({Static:false, Public:true }, "Include", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "Exclude", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "PreserveExistingMetadata", $.Boolean);

    $.Property({Static:false, Public:true }, "AdditionalMetadata", $jsilcore.TypeRef("System.Array", [$.String]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.CreateProperty */ 

(function CreateProperty$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.CreateProperty", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValueSetByTask", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.Field({Static:false, Public:false}, "prop", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "Value", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ValueSetByTask", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.CreateVisualBasicManifestResourceName */ 

(function CreateVisualBasicManifestResourceName$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.CreateManifestResourceName"), 
      Name: "Microsoft.Build.Tasks.CreateVisualBasicManifestResourceName", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateManifestName", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateManifestNameImpl", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.Boolean, $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.IO.Stream"), $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsSourceFile", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ManagedCompiler */ 

(function ManagedCompiler$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };






































  function ManagedCompiler_get_UsedCommandLineTool () {
    return this.ManagedCompiler$UsedCommandLineTool$value;
  }; 





































  function ManagedCompiler_set_UsedCommandLineTool (value) {
    this.ManagedCompiler$UsedCommandLineTool$value = value;
  }; 







  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ToolTaskExtension"), 
      Name: "Microsoft.Build.Tasks.ManagedCompiler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddCommandLineCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddResponseFileCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAllReferencesExistOnDisk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckHostObjectSupport", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConfigureDebugProperties", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AdditionalLibPaths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AddModules", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CodePage", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefineConstants", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DelaySign", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EmitDebugInformation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileAlignment", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HighEntropyVA", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HostCompilerSupportsAllParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyContainer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinkResources", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MainEntryPoint", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NoConfig", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NoLogo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NoWin32Manifest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Optimize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputAssembly", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Platform", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PlatformWith32BitPreference", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefer32Bit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_References", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResponseFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sources", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_StandardOutputEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubsystemVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TreatWarningsAsErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_UsedCommandLineTool", 
      JSIL.MethodSignature.Return($.Boolean), 
      ManagedCompiler_get_UsedCommandLineTool
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Utf8Output", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Win32Icon", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Win32Manifest", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Win32Resource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWin32ManifestSwitch", 
      new JSIL.MethodSignature($.String, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HandleTaskExecutionErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ListHasNoDuplicateItems", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ListHasNoDuplicateItems", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AdditionalLibPaths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AddModules", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CodePage", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DebugType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefineConstants", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DelaySign", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EmitDebugInformation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FileAlignment", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HighEntropyVA", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HostCompilerSupportsAllParameters", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyContainer", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LinkResources", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MainEntryPoint", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NoConfig", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NoLogo", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NoWin32Manifest", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Optimize", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputAssembly", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Platform", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefer32Bit", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_References", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Resources", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResponseFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Sources", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SubsystemVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TreatWarningsAsErrors", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:false}, "set_UsedCommandLineTool", 
      JSIL.MethodSignature.Action($.Boolean), 
      ManagedCompiler_set_UsedCommandLineTool
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Utf8Output", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Win32Icon", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Win32Manifest", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Win32Resource", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UseAlternateCommandLineToolToExecute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "ManagedCompiler$UsedCommandLineTool$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "hostCompilerSupportsAllParameters", $.Boolean);

    $.Property({Static:false, Public:true }, "AdditionalLibPaths", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "AddModules", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "CodePage", $.Int32);

    $.Property({Static:false, Public:true }, "DebugType", $.String);

    $.Property({Static:false, Public:true }, "DefineConstants", $.String);

    $.Property({Static:false, Public:true }, "DelaySign", $.Boolean);

    $.Property({Static:false, Public:true }, "EmitDebugInformation", $.Boolean);

    $.Property({Static:false, Public:true }, "FileAlignment", $.Int32);

    $.Property({Static:false, Public:true }, "HighEntropyVA", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyContainer", $.String);

    $.Property({Static:false, Public:true }, "KeyFile", $.String);

    $.Property({Static:false, Public:true }, "LinkResources", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "MainEntryPoint", $.String);

    $.Property({Static:false, Public:true }, "NoConfig", $.Boolean);

    $.Property({Static:false, Public:true }, "NoLogo", $.Boolean);

    $.Property({Static:false, Public:true }, "NoWin32Manifest", $.Boolean);

    $.Property({Static:false, Public:true }, "Optimize", $.Boolean);

    $.Property({Static:false, Public:true }, "OutputAssembly", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "Platform", $.String);

    $.Property({Static:false, Public:true }, "Prefer32Bit", $.Boolean);

    $.Property({Static:false, Public:true }, "References", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Resources", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "ResponseFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Sources", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "SubsystemVersion", $.String);

    $.Property({Static:false, Public:true }, "TargetType", $.String);

    $.Property({Static:false, Public:true }, "TreatWarningsAsErrors", $.Boolean);

    $.Property({Static:false, Public:true }, "Utf8Output", $.Boolean);

    $.Property({Static:false, Public:true }, "Win32Icon", $.String);

    $.Property({Static:false, Public:true }, "Win32Manifest", $.String);

    $.Property({Static:false, Public:true }, "Win32Resource", $.String);

    $.Property({Static:false, Public:false}, "PlatformWith32BitPreference", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "StandardOutputEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false}, "UsedCommandLineTool", $.Boolean);

    $.Property({Static:false, Public:false}, "HostCompilerSupportsAllParameters", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Csc */ 

(function Csc$Members () {
  var $, $thisType;















































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ManagedCompiler"), 
      Name: "Microsoft.Build.Tasks.Csc", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReferencesToCommandLine", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddResponseFileCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CallHostObjectToExecute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateFullPathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowUnsafeBlocks", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationConfiguration", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CheckForOverflowUnderflow", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisabledWarnings", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DocumentationFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorEndLocation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorReport", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GenerateFullPaths", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LangVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ModuleAssemblyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NoStandardLib", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PdbFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreferredUILang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseHostCompilerIfAvailable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WarningLevel", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WarningsAsErrors", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WarningsNotAsErrors", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefineConstantsSwitch", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeHostCompiler", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Hosting.ICscHostObject")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeHostObject", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Build.Utilities.HostObjectInitializationStatus"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLegalIdentifier", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowUnsafeBlocks", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApplicationConfiguration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseAddress", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CheckForOverflowUnderflow", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisabledWarnings", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DocumentationFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ErrorEndLocation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ErrorReport", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_GenerateFullPaths", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LangVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ModuleAssemblyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NoStandardLib", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PdbFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreferredUILang", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseHostCompilerIfAvailable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WarningLevel", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WarningsAsErrors", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WarningsNotAsErrors", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "useHostCompilerIfAvailable", $.Boolean);

    $.Property({Static:false, Public:true }, "AllowUnsafeBlocks", $.Boolean);

    $.Property({Static:false, Public:true }, "ApplicationConfiguration", $.String);

    $.Property({Static:false, Public:true }, "BaseAddress", $.String);

    $.Property({Static:false, Public:true }, "CheckForOverflowUnderflow", $.Boolean);

    $.Property({Static:false, Public:true }, "DocumentationFile", $.String);

    $.Property({Static:false, Public:true }, "DisabledWarnings", $.String);

    $.Property({Static:false, Public:true }, "ErrorEndLocation", $.Boolean);

    $.Property({Static:false, Public:true }, "ErrorReport", $.String);

    $.Property({Static:false, Public:true }, "GenerateFullPaths", $.Boolean);

    $.Property({Static:false, Public:true }, "LangVersion", $.String);

    $.Property({Static:false, Public:true }, "ModuleAssemblyName", $.String);

    $.Property({Static:false, Public:true }, "NoStandardLib", $.Boolean);

    $.Property({Static:false, Public:true }, "PdbFile", $.String);

    $.Property({Static:false, Public:true }, "PreferredUILang", $.String);

    $.Property({Static:false, Public:true }, "UseHostCompilerIfAvailable", $.Boolean);

    $.Property({Static:false, Public:true }, "WarningLevel", $.Int32);

    $.Property({Static:false, Public:true }, "WarningsAsErrors", $.String);

    $.Property({Static:false, Public:true }, "WarningsNotAsErrors", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ToolName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.CSharpParserUtilities */ 

(function CSharpParserUtilities$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Build.Tasks.CSharpParserUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Extract", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.ExtractedClassName"), [$asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.CSharpTokenizer")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFirstClassNameFullyQualified", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.ExtractedClassName"), [$asm07.TypeRef("System.IO.Stream")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Culture */ 

(function Culture$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Culture", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetItemCultureInfo", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Culture+ItemCultureInfo"), [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Tasks.Culture+ItemCultureInfo */ 

(function ItemCultureInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.Culture+ItemCultureInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "culture", $.String);

    $.Field({Static:false, Public:false}, "cultureNeutralFilename", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.CultureStringUtilities */ 

(function CultureStringUtilities$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Build.Tasks.CultureStringUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "IsValidCultureString", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "PopulateCultureInfoArray", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "cultureInfoStrings", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Build.Tasks.GetAttributes */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.GetAttributes", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.IO.FileAttributes"), [$asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Tasks.SetAttributes */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.SetAttributes", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.IO.FileAttributes")]));

/* delegate Microsoft.Build.Tasks.SetLastAccessTime */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.SetLastAccessTime", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.DateTime")]));

/* delegate Microsoft.Build.Tasks.SetLastWriteTime */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.SetLastWriteTime", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.DateTime")]));

/* delegate Microsoft.Build.Tasks.GetDirectories */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.GetDirectories", false, [], 
  new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.String")]), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Tasks.CopyFile */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.CopyFile", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Tasks.GetAssemblyName */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.GetAssemblyName", false, [], 
  new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), [$asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Tasks.GetAssemblyRuntimeVersion */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.String"), [$asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Tasks.GetGacEnumerator */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.GetGacEnumerator", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]), [$asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Tasks.GetPathFromFusionName */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.GetPathFromFusionName", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.String"), [$asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Tasks.GetAssemblyMetadata */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.GetAssemblyMetadata", false, [], 
  new JSIL.MethodSignature(null, [
      $asm07.TypeRef("System.String"), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])]), 
      $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.String")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
    ]));

/* delegate Microsoft.Build.Tasks.ReadMachineTypeFromPEHeader */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.ReadMachineTypeFromPEHeader", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.UInt16"), [$asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Tasks.CheckIfAssemblyInGac */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.CheckIfAssemblyInGac", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [
      $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm07.TypeRef("System.Reflection.ProcessorArchitecture"), 
      $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), $asm07.TypeRef("System.Version"), 
      $asm01.TypeRef("Microsoft.Build.Shared.FileExists")
    ]));

/* delegate Microsoft.Build.Tasks.IsWinMDFile */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.IsWinMDFile", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [
      $asm07.TypeRef("System.String"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
      $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.String")]), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Boolean")])
    ]));

/* delegate Microsoft.Build.Tasks.CreateFileStream */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.CreateFileStream", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [
      $asm07.TypeRef("System.String"), $asm07.TypeRef("System.IO.FileMode"), 
      $asm07.TypeRef("System.IO.FileAccess")
    ]));

/* delegate Microsoft.Build.Tasks.GetLastWriteTime */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.GetLastWriteTime", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm07.TypeRef("System.String")]));

/* class Microsoft.Build.Tasks.Delete */ 

(function Delete$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.Delete", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Cancel", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeletedFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Files", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TreatErrorsAsWarnings", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "LogError", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DeletedFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Files", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TreatErrorsAsWarnings", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "canceling", $.Boolean);

    $.Field({Static:false, Public:false}, "treatErrorsAsWarnings", $.Boolean);

    $.Field({Static:false, Public:false}, "deletedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "TreatErrorsAsWarnings", $.Boolean);

    $.Property({Static:false, Public:true }, "DeletedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("Microsoft.Build.Framework.ICancelableTask")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Dependencies */ 

(function Dependencies$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Dependencies", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDependencyFile", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.DependencyFile")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDependencyFile", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.DependencyFile"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependencyFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "dependencies", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.DependencyFile */ 

(function DependencyFile$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.DependencyFile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Exists", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastModified", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasFileChanged", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "filename", $.String);

    $.Field({Static:false, Public:false}, "lastModified", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "exists", $.Boolean);

    $.Property({Static:false, Public:false}, "FileName", $.String);

    $.Property({Static:false, Public:false}, "LastModified", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "Exists", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Error */ 

(function Error$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.Error", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Code", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_File", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HelpKeyword", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Text", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Code", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_File", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HelpKeyword", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Text", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "text", $.String);

    $.Field({Static:false, Public:false}, "code", $.String);

    $.Field({Static:false, Public:false}, "file", $.String);

    $.Field({Static:false, Public:false}, "helpKeyword", $.String);

    $.Property({Static:false, Public:true }, "Text", $.String);

    $.Property({Static:false, Public:true }, "Code", $.String);

    $.Property({Static:false, Public:true }, "File", $.String);

    $.Property({Static:false, Public:true }, "HelpKeyword", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Exec */ 

(function Exec$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ToolTaskExtension"), 
      Name: "Microsoft.Build.Tasks.Exec", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddCommandLineCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTemporaryBatchFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteTool", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateFullPathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Command", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConsoleOutput", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConsoleToMSBuild", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CustomErrorRegularExpression", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CustomWarningRegularExpression", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreExitCode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreStandardErrorWarningFormat", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Outputs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_StandardErrorEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_StandardErrorLoggingImportance", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_StandardOutputEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_StandardOutputLoggingImportance", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StdErrEncoding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StdOutEncoding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WorkingDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWorkingDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWorkingDirectoryAccessor", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HandleTaskExecutionErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LogEventsFromTextOutput", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LogPathToTool", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LogToolCommand", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputMatchesRegex", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Command", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConsoleOutput", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConsoleToMSBuild", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CustomErrorRegularExpression", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CustomWarningRegularExpression", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreExitCode", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreStandardErrorWarningFormat", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Outputs", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StdErrEncoding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StdOutEncoding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WorkingDirectory", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateParametersAccessor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "encodingParametersValid", $.Boolean);

    $.Field({Static:false, Public:false}, "command", $.String);

    $.Field({Static:false, Public:false}, "userSpecifiedWorkingDirectory", $.String);

    $.Field({Static:false, Public:false}, "workingDirectory", $.String);

    $.Field({Static:false, Public:false}, "ignoreExitCode", $.Boolean);

    $.Field({Static:false, Public:false}, "consoleToMSBuild", $.Boolean);

    $.Field({Static:false, Public:false}, "outputs", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "workingDirectoryIsUNC", $.Boolean);

    $.Field({Static:false, Public:false}, "batchFile", $.String);

    $.Field({Static:false, Public:false}, "customErrorRegex", $.String);

    $.Field({Static:false, Public:false}, "customWarningRegex", $.String);

    $.Field({Static:false, Public:false}, "ignoreStandardErrorWarningFormat", $.Boolean);

    $.Field({Static:false, Public:false}, "nonEmptyOutput", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "standardOutputEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "standardErrorEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true }, "Command", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "WorkingDirectory", $.String);

    $.Property({Static:false, Public:true }, "IgnoreExitCode", $.Boolean);

    $.Property({Static:false, Public:true }, "ConsoleToMSBuild", $.Boolean);

    $.Property({Static:false, Public:true }, "CustomErrorRegularExpression", $.String);

    $.Property({Static:false, Public:true }, "CustomWarningRegularExpression", $.String);

    $.Property({Static:false, Public:true }, "IgnoreStandardErrorWarningFormat", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "StandardOutputEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false, Virtual:true }, "StandardErrorEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true }, "StdOutEncoding", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "StdErrEncoding", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "Outputs", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ConsoleOutput", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "ToolName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "StandardErrorLoggingImportance", $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"));

    $.Property({Static:false, Public:false, Virtual:true }, "StandardOutputLoggingImportance", $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Tasks.ExtractedClassName */ 

(function ExtractedClassName$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.ExtractedClassName", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_IsInsideConditionalBlock", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsInsideConditionalBlock", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "isInsideConditionalBlock", $.Boolean);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "IsInsideConditionalBlock", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ReadLinesFromFile */ 

(function ReadLinesFromFile$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.ReadLinesFromFile", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_File", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Lines", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LogError", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm07.TypeRef("System.Exception"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_File", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Lines", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Field({Static:false, Public:false}, "file", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "lines", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "File", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "Lines", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.WriteLinesToFile */ 

(function WriteLinesToFile$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.WriteLinesToFile", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_File", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Lines", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Overwrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "LogError", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm07.TypeRef("System.Exception"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_File", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Lines", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Overwrite", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "file", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "lines", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "overwrite", $.Boolean);

    $.Field({Static:false, Public:false}, "encoding", $.String);

    $.Property({Static:false, Public:true }, "File", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "Lines", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Overwrite", $.Boolean);

    $.Property({Static:false, Public:true }, "Encoding", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.FindAppConfigFile */ 

(function FindAppConfigFile$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.FindAppConfigFile", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConsultLists", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AppConfigFile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PrimaryList", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecondaryList", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMatchingItem", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AppConfigFile", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PrimaryList", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecondaryList", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "primaryList", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "secondaryList", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "targetPath", $.String);

    $.Field({Static:false, Public:false}, "appConfigFileFound", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Constant({Static:true , Public:false}, "appConfigFile", $.String, "app.config");

    $.Property({Static:false, Public:true }, "PrimaryList", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "SecondaryList", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "TargetPath", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "AppConfigFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.FindInList */ 

(function FindInList$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.FindInList", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CaseSensitive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FindLastMatch", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemFound", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemSpecToFind", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_List", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MatchFileNameOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMatchingItem", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.StringComparison"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CaseSensitive", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FindLastMatch", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ItemFound", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ItemSpecToFind", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_List", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MatchFileNameOnly", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "list", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "matchFileNameOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "itemFound", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "itemSpecToFind", $.String);

    $.Field({Static:false, Public:false}, "caseSensitive", $.Boolean);

    $.Field({Static:false, Public:false}, "findLastMatch", $.Boolean);

    $.Property({Static:false, Public:true }, "List", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "MatchFileNameOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "ItemFound", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ItemSpecToFind", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "CaseSensitive", $.Boolean);

    $.Property({Static:false, Public:true }, "FindLastMatch", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.FormatUrl */ 

(function FormatUrl$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.FormatUrl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InputUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InputUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "inputUrl", $.String);

    $.Field({Static:false, Public:false}, "outputUrl", $.String);

    $.Property({Static:false, Public:true }, "InputUrl", $.String);

    $.Property({Static:false, Public:true }, "OutputUrl", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.FormatVersion */ 

(function FormatVersion$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.FormatVersion", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FormatType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Revision", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FormatType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Revision", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateInputs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "formatType", $asm01.TypeRef("Microsoft.Build.Tasks.FormatVersion+_FormatType"));

    $.Field({Static:false, Public:false}, "outputVersion", $.String);

    $.Field({Static:false, Public:false}, "revision", $.Int32);

    $.Field({Static:false, Public:false}, "version", $.String);

    $.Field({Static:false, Public:false}, "specifiedFormatType", $.String);

    $.Property({Static:false, Public:true }, "OutputVersion", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FormatType", $.String);

    $.Property({Static:false, Public:true }, "Revision", $.Int32);

    $.Property({Static:false, Public:true }, "Version", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.FormatVersion+_FormatType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.FormatVersion+_FormatType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Version: 0, 
    Path: 1, 
  }
);

/* class Microsoft.Build.Tasks.GenerateManifestBase */ 

(function GenerateManifestBase$Members () {
  var $, $thisType;















































  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Build.Utilities.Task"), 
      Name: "Microsoft.Build.Tasks.GenerateManifestBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAssemblyFromItem", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"), [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAssemblyNameFromItem", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"), [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReferenceType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEntryPointFromItem", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"), [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReferenceType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddFileFromItem", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference"), [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildManifest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAssemblyIdentity", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"), [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FindFileFromItem", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference"), [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EntryPoint", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InputManifest", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxTargetPath", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputManifest", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Platform", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetCulture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkMoniker", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetItemAssemblyType", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.GenerateManifestBase+AssemblyType"), [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetItemDependencyType", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.GenerateManifestBase+DependencyType"), [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutputPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeManifest", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEmbedInteropEnabledForAssembly", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnManifestLoaded", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnManifestResolved", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveFiles", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveIdentity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EntryPoint", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InputManifest", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxTargetPath", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputManifest", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Platform", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetCulture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkMoniker", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetItemAttributes", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.BaseReference")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateInputs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateOutput", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteManifest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "assemblyName", $.String);

    $.Field({Static:false, Public:false}, "assemblyVersion", $.String);

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "entryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "inputManifest", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "maxTargetPath", $.Int32);

    $.Field({Static:false, Public:false}, "outputManifest", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "platform", $.String);

    $.Field({Static:false, Public:false}, "processorArchitecture", $.String);

    $.Field({Static:false, Public:false}, "startTime", $.Int32);

    $.Field({Static:false, Public:false}, "targetCulture", $.String);

    $.Field({Static:false, Public:false}, "targetFrameworkVersion", $.String);

    $.Field({Static:false, Public:false}, "targetFrameworkMoniker", $.String);

    $.Field({Static:false, Public:false}, "manifest", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"));

    $.Property({Static:false, Public:true }, "AssemblyName", $.String);

    $.Property({Static:false, Public:true }, "AssemblyVersion", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "EntryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "InputManifest", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "MaxTargetPath", $.Int32);

    $.Property({Static:false, Public:true }, "OutputManifest", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "Platform", $.String);

    $.Property({Static:false, Public:true }, "TargetCulture", $.String);

    $.Property({Static:false, Public:true }, "TargetFrameworkVersion", $.String);

    $.Property({Static:false, Public:true }, "TargetFrameworkMoniker", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.GenerateManifestBase+AssemblyType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.GenerateManifestBase+AssemblyType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unspecified: 0, 
    Managed: 1, 
    Native: 2, 
    Satellite: 3, 
  }
);

/* enum Microsoft.Build.Tasks.GenerateManifestBase+DependencyType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.GenerateManifestBase+DependencyType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Install: 0, 
    Prerequisite: 1, 
  }
);

/* class Microsoft.Build.Tasks.GenerateApplicationManifest */ 

(function GenerateApplicationManifest$Members () {
  var $, $thisType;






















































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.GenerateManifestBase"), 
      Name: "Microsoft.Build.Tasks.GenerateApplicationManifest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddClickOnceFileAssociations", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ApplicationManifest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddClickOnceFiles", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ApplicationManifest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIsolatedComReferences", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ApplicationManifest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildApplicationManifest", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ApplicationManifest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildResolvedSettings", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ApplicationManifest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAssemblyIdentity", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"), [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureAssemblyReferenceExists", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ApplicationManifest"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClrVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConfigFile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Dependencies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorReportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileAssociations", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Files", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostInBrowser", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IconFile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsolatedComReferences", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ManifestType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OSVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Product", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Publisher", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequiresMinimumFramework35SP1", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SuiteName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkProfile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkSubset", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustInfoFile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseApplicationTrust", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRequestedExecutionLevel", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnManifestLoaded", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnManifestResolved", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ClrVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConfigFile", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Dependencies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ErrorReportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FileAssociations", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Files", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HostInBrowser", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IconFile", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsolatedComReferences", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ManifestType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OSVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Product", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Publisher", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequiresMinimumFramework35SP1", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SuiteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SupportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkProfile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkSubset", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrustInfoFile", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseApplicationTrust", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateInputs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "clrVersion", $.String);

    $.Field({Static:false, Public:false}, "configFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "dependencies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "errorReportUrl", $.String);

    $.Field({Static:false, Public:false}, "files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "iconFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "isolatedComReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "manifestType", $asm01.TypeRef("Microsoft.Build.Tasks.GenerateApplicationManifest+_ManifestType"));

    $.Field({Static:false, Public:false}, "osVersion", $.String);

    $.Field({Static:false, Public:false}, "trustInfoFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "fileAssociations", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "hostInBrowser", $.Boolean);

    $.Field({Static:false, Public:false}, "useApplicationTrust", $.Boolean);

    $.Field({Static:false, Public:false}, "product", $.String);

    $.Field({Static:false, Public:false}, "publisher", $.String);

    $.Field({Static:false, Public:false}, "suiteName", $.String);

    $.Field({Static:false, Public:false}, "supportUrl", $.String);

    $.Field({Static:false, Public:false}, "specifiedManifestType", $.String);

    $.Field({Static:false, Public:false}, "targetFrameworkSubset", $.String);

    $.Field({Static:false, Public:false}, "targetFrameworkProfile", $.String);

    $.Field({Static:false, Public:false}, "requiresMinimumFramework35SP1", $.Boolean);

    $.Property({Static:false, Public:true }, "ClrVersion", $.String);

    $.Property({Static:false, Public:true }, "ConfigFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "Dependencies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "ErrorReportUrl", $.String);

    $.Property({Static:false, Public:true }, "FileAssociations", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "HostInBrowser", $.Boolean);

    $.Property({Static:false, Public:true }, "IconFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "IsolatedComReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "ManifestType", $.String);

    $.Property({Static:false, Public:true }, "OSVersion", $.String);

    $.Property({Static:false, Public:true }, "Product", $.String);

    $.Property({Static:false, Public:true }, "Publisher", $.String);

    $.Property({Static:false, Public:true }, "RequiresMinimumFramework35SP1", $.Boolean);

    $.Property({Static:false, Public:true }, "SuiteName", $.String);

    $.Property({Static:false, Public:true }, "SupportUrl", $.String);

    $.Property({Static:false, Public:true }, "TargetFrameworkSubset", $.String);

    $.Property({Static:false, Public:true }, "TargetFrameworkProfile", $.String);

    $.Property({Static:false, Public:true }, "TrustInfoFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "UseApplicationTrust", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.GenerateApplicationManifest+_ManifestType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.GenerateApplicationManifest+_ManifestType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Native: 0, 
    ClickOnce: 1, 
  }
);

/* class Microsoft.Build.Tasks.GenerateBootstrapper */ 

(function GenerateBootstrapper$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.GenerateBootstrapper", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertStringToComponentsLocation", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ComponentsLocation"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationRequiresElevation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BootstrapperComponentFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BootstrapperItems", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BootstrapperKeyFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ComponentsLocation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ComponentsUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CopyComponents", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Culture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FallbackCulture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Validate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VisualStudioVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApplicationFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApplicationName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApplicationRequiresElevation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApplicationUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BootstrapperComponentFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BootstrapperItems", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BootstrapperKeyFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ComponentsLocation", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ComponentsUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CopyComponents", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Culture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FallbackCulture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Path", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SupportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Validate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_VisualStudioVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "applicationFile", $.String);

    $.Field({Static:false, Public:false}, "applicationName", $.String);

    $.Field({Static:false, Public:false}, "applicationRequiresElevation", $.Boolean);

    $.Field({Static:false, Public:false}, "applicationUrl", $.String);

    $.Field({Static:false, Public:false}, "bootstrapperItems", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "componentsLocation", $.String);

    $.Field({Static:false, Public:false}, "componentsUrl", $.String);

    $.Field({Static:false, Public:false}, "copyComponents", $.Boolean);

    $.Field({Static:false, Public:false}, "culture", $.String);

    $.Field({Static:false, Public:false}, "fallbackCulture", $.String);

    $.Field({Static:false, Public:false}, "outputPath", $.String);

    $.Field({Static:false, Public:false}, "path", $.String);

    $.Field({Static:false, Public:false}, "supportUrl", $.String);

    $.Field({Static:false, Public:false}, "validate", $.Boolean);

    $.Field({Static:false, Public:false}, "bootstrapperComponentFiles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "bootstrapperKeyFile", $.String);

    $.Field({Static:false, Public:false}, "visualStudioVersion", $.String);

    $.Property({Static:false, Public:true }, "ApplicationName", $.String);

    $.Property({Static:false, Public:true }, "ApplicationFile", $.String);

    $.Property({Static:false, Public:true }, "ApplicationRequiresElevation", $.Boolean);

    $.Property({Static:false, Public:true }, "ApplicationUrl", $.String);

    $.Property({Static:false, Public:true }, "BootstrapperItems", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "ComponentsLocation", $.String);

    $.Property({Static:false, Public:true }, "ComponentsUrl", $.String);

    $.Property({Static:false, Public:true }, "CopyComponents", $.Boolean);

    $.Property({Static:false, Public:true }, "Culture", $.String);

    $.Property({Static:false, Public:true }, "FallbackCulture", $.String);

    $.Property({Static:false, Public:true }, "OutputPath", $.String);

    $.Property({Static:false, Public:true }, "Path", $.String);

    $.Property({Static:false, Public:true }, "SupportUrl", $.String);

    $.Property({Static:false, Public:true }, "VisualStudioVersion", $.String);

    $.Property({Static:false, Public:true }, "Validate", $.Boolean);

    $.Property({Static:false, Public:true }, "BootstrapperKeyFile", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "BootstrapperComponentFiles", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GenerateDeploymentManifest */ 

(function GenerateDeploymentManifest$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.GenerateManifestBase"), 
      Name: "Microsoft.Build.Tasks.GenerateDeploymentManifest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildDeployManifest", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.DeployManifest")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildResolvedSettings", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.DeployManifest")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreateDesktopShortcut", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeploymentUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisallowUrlActivation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorReportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Install", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MapFileExtensions", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinimumRequiredVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Product", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Publisher", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SuiteName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustUrlParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateInterval", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateMode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateUnit", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnManifestLoaded", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnManifestResolved", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CreateDesktopShortcut", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DeploymentUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisallowUrlActivation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ErrorReportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Install", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MapFileExtensions", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinimumRequiredVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Product", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Publisher", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SuiteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SupportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrustUrlParameters", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateEnabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateInterval", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateMode", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateUnit", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateInputs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "createDesktopShortcut", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "deploymentUrl", $.String);

    $.Field({Static:false, Public:false}, "disallowUrlActivation", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "errorReportUrl", $.String);

    $.Field({Static:false, Public:false}, "install", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "mapFileExtensions", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "minimumRequiredVersion", $.String);

    $.Field({Static:false, Public:false}, "product", $.String);

    $.Field({Static:false, Public:false}, "publisher", $.String);

    $.Field({Static:false, Public:false}, "suiteName", $.String);

    $.Field({Static:false, Public:false}, "supportUrl", $.String);

    $.Field({Static:false, Public:false}, "trustUrlParameters", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "updateEnabled", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "updateInterval", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "updateMode", $asm07.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.UpdateMode")]));

    $.Field({Static:false, Public:false}, "updateUnit", $asm07.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.UpdateUnit")]));

    $.Field({Static:false, Public:false}, "specifiedUpdateMode", $.String);

    $.Field({Static:false, Public:false}, "specifiedUpdateUnit", $.String);

    $.Property({Static:false, Public:true }, "CreateDesktopShortcut", $.Boolean);

    $.Property({Static:false, Public:true }, "DeploymentUrl", $.String);

    $.Property({Static:false, Public:true }, "DisallowUrlActivation", $.Boolean);

    $.Property({Static:false, Public:true }, "ErrorReportUrl", $.String);

    $.Property({Static:false, Public:true }, "Install", $.Boolean);

    $.Property({Static:false, Public:true }, "MinimumRequiredVersion", $.String);

    $.Property({Static:false, Public:true }, "MapFileExtensions", $.Boolean);

    $.Property({Static:false, Public:true }, "Product", $.String);

    $.Property({Static:false, Public:true }, "Publisher", $.String);

    $.Property({Static:false, Public:true }, "SuiteName", $.String);

    $.Property({Static:false, Public:true }, "SupportUrl", $.String);

    $.Property({Static:false, Public:true }, "TrustUrlParameters", $.Boolean);

    $.Property({Static:false, Public:true }, "UpdateEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "UpdateInterval", $.Int32);

    $.Property({Static:false, Public:true }, "UpdateMode", $.String);

    $.Property({Static:false, Public:true }, "UpdateUnit", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GenerateTrustInfo */ 

(function GenerateTrustInfo$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.GenerateTrustInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationDependencies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseManifest", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExcludedPermissions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkMoniker", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetZone", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustInfoFile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApplicationDependencies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseManifest", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExcludedPermissions", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkMoniker", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetZone", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrustInfoFile", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToIdentityList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.Field({Static:false, Public:false}, "baseManifest", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "excludedPermissions", $.String);

    $.Field({Static:false, Public:false}, "targetFrameworkMoniker", $.String);

    $.Field({Static:false, Public:false}, "targetZone", $.String);

    $.Field({Static:false, Public:false}, "trustInfoFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "applicationDependencies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Constant({Static:true , Public:false}, "Custom", $.String, "Custom");

    $.Property({Static:false, Public:true }, "BaseManifest", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "ExcludedPermissions", $.String);

    $.Property({Static:false, Public:true }, "TargetFrameworkMoniker", $.String);

    $.Property({Static:false, Public:true }, "TargetZone", $.String);

    $.Property({Static:false, Public:true }, "ApplicationDependencies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "TrustInfoFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GenerateResource */ 

(function GenerateResource$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm07.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.String)) ();
  };

















  function GenerateResource_get_EnvironmentVariables () {
    return this.GenerateResource$EnvironmentVariables$value;
  }; 



  function GenerateResource_get_ExtractResWFiles () {
    return this.GenerateResource$ExtractResWFiles$value;
  }; 




  function GenerateResource_get_OutputDirectory () {
    return this.GenerateResource$OutputDirectory$value;
  }; 
































  function GenerateResource_set_EnvironmentVariables (value) {
    this.GenerateResource$EnvironmentVariables$value = value;
  }; 



  function GenerateResource_set_ExtractResWFiles (value) {
    this.GenerateResource$ExtractResWFiles$value = value;
  }; 



  function GenerateResource_set_OutputDirectory (value) {
    this.GenerateResource$OutputDirectory$value = value;
  }; 






















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.GenerateResource", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendCachedOutputTaskItems", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.ResGenDependencies+PortableLibraryFile"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ByteArrayFromBase64WrappedString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateResourceBatchSize", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneValuesInThisAppDomain", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputePathToResGen", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsDuplicates", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateOutputResourcesNames", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateResGenTaskWithDefaultParameters", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.GenerateResource+ResGen"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DetermineWhetherSerializedObjectLoads", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateResGenCommandLineWithoutResources", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateResourcesUsingResGen", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateStronglyTypedResourceUsingResGen", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AdditionalInputs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Method({Static:false, Public:true }, "get_EnvironmentVariables", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String])), 
      GenerateResource_get_EnvironmentVariables
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ExcludedInputPaths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExecuteAsTool", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_ExtractResWFiles", 
      JSIL.MethodSignature.Return($.Boolean), 
      GenerateResource_get_ExtractResWFiles
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_FilesWritten", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinimalRebuildFromTracking", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NeverLockTypeAssemblies", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_OutputDirectory", 
      JSIL.MethodSignature.Return($.String), 
      GenerateResource_get_OutputDirectory
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_OutputResources", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicClass", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_References", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SdkToolsPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sources", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StateFile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StronglyTypedClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StronglyTypedFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StronglyTypedLanguage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StronglyTypedManifestPrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StronglyTypedNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TLogReadFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TLogWriteFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ToolArchitecture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrackerFrameworkPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrackerLogDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrackerSdkPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrackFileAccess", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseSourcePath", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNewestUncorrelatedInputWriteTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResourcesToProcess", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStronglyTypedResourceToProcess", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogResgenCommandLine", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "NeedSeparateAppDomain", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "NeedSeparateAppDomainBasedOnSerializedType", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlTextReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NeedToRebuildSourceFile", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.IO.FileInfo"), $asm07.TypeRef("System.IO.FileInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadStateFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordFilesWritten", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordItemsForDisconnectIfNecessary", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveUnsuccessfullyCreatedResourcesFromOutputResources", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AdditionalInputs", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Method({Static:false, Public:true }, "set_EnvironmentVariables", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String])), 
      GenerateResource_set_EnvironmentVariables
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ExcludedInputPaths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExecuteAsTool", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:true }, "set_ExtractResWFiles", 
      JSIL.MethodSignature.Action($.Boolean), 
      GenerateResource_set_ExtractResWFiles
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MinimalRebuildFromTracking", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NeverLockTypeAssemblies", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:true }, "set_OutputDirectory", 
      JSIL.MethodSignature.Action($.String), 
      GenerateResource_set_OutputDirectory
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_OutputResources", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PublicClass", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_References", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SdkToolsPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Sources", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StateFile", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StronglyTypedClassName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StronglyTypedFileName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StronglyTypedLanguage", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StronglyTypedManifestPrefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StronglyTypedNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ToolArchitecture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrackerFrameworkPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrackerLogDirectory", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrackerSdkPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrackFileAccess", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseSourcePath", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldRebuildResgenOutputFile", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "TransformResourceFilesUsingResGen", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStateFile", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "cache", $asm01.TypeRef("Microsoft.Build.Tasks.ResGenDependencies"));

    $.Field({Static:false, Public:false}, "sources", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "useSourcePath", $.Boolean);

    $.Field({Static:false, Public:false}, "references", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "additionalInputs", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "stateFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "outputResources", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "unsuccessfullyCreatedOutFiles", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "filesWritten", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "stronglyTypedLanguage", $.String);

    $.Field({Static:false, Public:false}, "stronglyTypedNamespace", $.String);

    $.Field({Static:false, Public:false}, "stronglyTypedManifestPrefix", $.String);

    $.Field({Static:false, Public:false}, "stronglyTypedClassName", $.String);

    $.Field({Static:false, Public:false}, "stronglyTypedFileName", $.String);

    $.Field({Static:false, Public:false}, "publicClass", $.Boolean);

    $.Field({Static:false, Public:false}, "stronglyTypedResourceSuccessfullyCreated", $.Boolean);

    $.Field({Static:false, Public:false}, "neverLockTypeAssemblies", $.Boolean);

    $.Field({Static:false, Public:false}, "foundNewestUncorrelatedInputWriteTime", $.Boolean);

    $.Field({Static:false, Public:false}, "newestUncorrelatedInputWriteTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "sdkToolsPath", $.String);

    $.Field({Static:false, Public:false}, "executeAsTool", $.Boolean);

    $.Field({Static:false, Public:false}, "resgenPath", $.String);

    $.Field({Static:false, Public:false}, "typeTable", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Type")]));

    $.Field({Static:true , Public:false}, "MaximumCommandLength", $.Int32, 28000);

    $.Field({Static:false, Public:false}, "excludedInputPaths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "remotedTaskItems", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "GenerateResource$ExtractResWFiles$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GenerateResource$EnvironmentVariables$value", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GenerateResource$OutputDirectory$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SpecialChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:true }, "Sources", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "UseSourcePath", $.Boolean);

    $.Property({Static:false, Public:true }, "References", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "AdditionalInputs", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "StateFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "OutputResources", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FilesWritten", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "StronglyTypedLanguage", $.String);

    $.Property({Static:false, Public:true }, "StronglyTypedNamespace", $.String);

    $.Property({Static:false, Public:true }, "StronglyTypedManifestPrefix", $.String);

    $.Property({Static:false, Public:true }, "StronglyTypedClassName", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "StronglyTypedFileName", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "PublicClass", $.Boolean);

    $.Property({Static:false, Public:true }, "ExtractResWFiles", $.Boolean);

    $.Property({Static:false, Public:true }, "NeverLockTypeAssemblies", $.Boolean);

    $.Property({Static:false, Public:true }, "SdkToolsPath", $.String);

    $.Property({Static:false, Public:true }, "ExecuteAsTool", $.Boolean);

    $.Property({Static:false, Public:true }, "EnvironmentVariables", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "ExcludedInputPaths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "MinimalRebuildFromTracking", $.Boolean);

    $.Property({Static:false, Public:true }, "TrackFileAccess", $.Boolean);

    $.Property({Static:false, Public:true }, "TLogReadFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "TLogWriteFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "TrackerLogDirectory", $.String);

    $.Property({Static:false, Public:true }, "ToolArchitecture", $.String);

    $.Property({Static:false, Public:true }, "TrackerFrameworkPath", $.String);

    $.Property({Static:false, Public:true }, "TrackerSdkPath", $.String);

    $.Property({Static:false, Public:true }, "OutputDirectory", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredRuntimeAttribute"), function () { return ["v2.0"]; });

})();

/* class Microsoft.Build.Tasks.GenerateResource+ResGen */ 

(function ResGen$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ToolTaskExtension"), 
      Name: "Microsoft.Build.Tasks.GenerateResource+ResGen", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddCommandLineCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddResponseFileCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateFullPathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateOutputFileNames", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateResGenCommands", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateResGenFullPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InputFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicClass", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_References", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ResponseFileEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SdkToolsPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StronglyTypedClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StronglyTypedFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StronglyTypedLanguage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StronglyTypedNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseSourcePath", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullOrEmpty", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InputFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PublicClass", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_References", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SdkToolsPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StronglyTypedClassName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StronglyTypedFileName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StronglyTypedLanguage", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StronglyTypedNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseSourcePath", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true }, "InputFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "OutputFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "PublicClass", $.Boolean);

    $.Property({Static:false, Public:true }, "References", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "SdkToolsPath", $.String);

    $.Property({Static:false, Public:true }, "StronglyTypedLanguage", $.String);

    $.Property({Static:false, Public:true }, "StronglyTypedNamespace", $.String);

    $.Property({Static:false, Public:true }, "StronglyTypedClassName", $.String);

    $.Property({Static:false, Public:true }, "StronglyTypedFileName", $.String);

    $.Property({Static:false, Public:true }, "UseSourcePath", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ToolName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ResponseFileEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ProcessResourceFiles */ 

(function ProcessResourceFiles$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "Microsoft.Build.Tasks.ProcessResourceFiles", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddResource", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ProcessResourceFiles+ReaderInfo"), $.String, 
          $.Object, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddResource", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ProcessResourceFiles+ReaderInfo"), $.String, 
          $.Object, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAssemblyCultureInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Resources.NeutralResourcesLanguageAttribute"), [
          $.String, $asm07.TypeRef("System.Reflection.AssemblyName"), 
          $asm07.TypeRef("System.Globalization.CultureInfo"), $asm07.TypeRef("System.Reflection.Assembly"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsProperlyNamedResourcesFiles", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.Assembly"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateStronglyTypedResources", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ProcessResourceFiles+ReaderInfo"), $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsurePathIsShortEnough", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateDefaultStronglyTypedFilename", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExtractedResWFiles", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PortableLibraryCacheInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.ResGenDependencies+PortableLibraryFile")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StronglyTypedClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StronglyTypedFilename", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StronglyTypedResourceSuccessfullyCreated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnsuccessfullyCreatedOutFiles", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFormat", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.ProcessResourceFiles+Format"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessFile", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAssemblyResources", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadResources", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadResources", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ProcessResourceFiles+ReaderInfo"), $asm07.TypeRef("System.Resources.IResourceReader"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTextResources", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.ProcessResourceFiles+ReaderInfo"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveCorruptedFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveAssembly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$.Object, $asm07.TypeRef("System.ResolveEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Run", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $.Boolean, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCreateCodeDomProvider", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteResources", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.ProcessResourceFiles+ReaderInfo"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteResources", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.ProcessResourceFiles+ReaderInfo"), $asm07.TypeRef("System.Resources.IResourceWriter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTextResources", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.ProcessResourceFiles+ReaderInfo"), $.String])
    );

    $.Field({Static:false, Public:false}, "readers", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.ProcessResourceFiles+ReaderInfo")]));

    $.Field({Static:false, Public:false}, "logger", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Field({Static:false, Public:false}, "stronglyTypedLanguage", $.String);

    $.Field({Static:false, Public:false}, "stronglyTypedFilename", $.String);

    $.Field({Static:false, Public:false}, "stronglyTypedNamespace", $.String);

    $.Field({Static:false, Public:false}, "stronglyTypedResourcesNamespace", $.String);

    $.Field({Static:false, Public:false}, "stronglyTypedClassName", $.String);

    $.Field({Static:false, Public:false}, "stronglyTypedClassIsPublic", $.Boolean);

    $.Field({Static:false, Public:false}, "typeResolver", $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyNamesTypeResolutionService"));

    $.Field({Static:false, Public:false}, "eventHandler", $asm07.TypeRef("System.ResolveEventHandler"));

    $.Field({Static:false, Public:false}, "assemblyFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "assemblyNames", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]));

    $.Field({Static:false, Public:false}, "inFiles", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "outFiles", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "extractResWFiles", $.Boolean);

    $.Field({Static:false, Public:false}, "resWOutputDirectory", $.String);

    $.Field({Static:false, Public:false}, "extractedResWFiles", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "portableLibraryCacheInfo", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.ResGenDependencies+PortableLibraryFile")]));

    $.Field({Static:false, Public:false}, "unsuccessfullyCreatedOutFiles", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "stronglyTypedResourceSuccessfullyCreated", $.Boolean);

    $.Field({Static:false, Public:false}, "useSourcePath", $.Boolean);

    $.Property({Static:false, Public:false}, "StronglyTypedFilename", $.String);

    $.Property({Static:false, Public:false}, "StronglyTypedClassName", $.String);

    $.Property({Static:false, Public:false}, "ExtractedResWFiles", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:false}, "PortableLibraryCacheInfo", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.ResGenDependencies+PortableLibraryFile")]));

    $.Property({Static:false, Public:false}, "UnsuccessfullyCreatedOutFiles", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "StronglyTypedResourceSuccessfullyCreated", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.ProcessResourceFiles+Format */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.ProcessResourceFiles+Format", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Text: 0, 
    XML: 1, 
    Binary: 2, 
    Assembly: 3, 
    Error: 4, 
  }
);

/* class Microsoft.Build.Tasks.ProcessResourceFiles+ReaderInfo */ 

(function ReaderInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ProcessResourceFiles+ReaderInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "outputFileName", $.String);

    $.Field({Static:false, Public:true }, "cultureName", $.String);

    $.Field({Static:false, Public:true }, "resources", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:true }, "resourcesHashTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:true }, "assemblySimpleName", $.String);

    $.Field({Static:false, Public:true }, "fromNeutralResources", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ProcessResourceFiles+LineNumberStreamReader */ 

(function LineNumberStreamReader$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.StreamReader"), 
      Name: "Microsoft.Build.Tasks.ProcessResourceFiles+LineNumberStreamReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadLine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToEnd", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "_col", $.Int32);

    $.Property({Static:false, Public:false}, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "LinePosition", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ProcessResourceFiles+TextFileException */ 

(function TextFileException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Build.Tasks.ProcessResourceFiles+TextFileException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "_fileName", $.String);

    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "_column", $.Int32);

    $.Property({Static:false, Public:false}, "FileName", $.String);

    $.Property({Static:false, Public:false}, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "LinePosition", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ProcessResourceFiles+Entry */ 

(function Entry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ProcessResourceFiles+Entry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.Field({Static:false, Public:true }, "$name", $.String);

    $.Field({Static:false, Public:true }, "value", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssemblyNamesTypeResolutionService */ 

(function AssemblyNamesTypeResolutionService$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.AssemblyNamesTypeResolutionService", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAssembly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$asm07.TypeRef("System.Reflection.AssemblyName")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAssembly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$asm07.TypeRef("System.Reflection.AssemblyName"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAssemblyByPath", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPathOfAssembly", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.AssemblyName")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReferenceAssembly", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.AssemblyName"))
    );

    $.Field({Static:false, Public:false}, "cachedAssemblies", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "referencePaths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "cachedTypes", $asm07.TypeRef("System.Collections.Hashtable"));

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("System.ComponentModel.Design.ITypeResolutionService")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GetAssemblyIdentity */ 

(function GetAssemblyIdentity$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.GetAssemblyIdentity", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ByteArrayToHex", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Assemblies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Field({Static:false, Public:false}, "assemblyFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "assemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "AssemblyFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "Assemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GetFrameworkPath */ 

(function GetFrameworkPath$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.GetFrameworkPath", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FrameworkVersion11Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FrameworkVersion20Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FrameworkVersion30Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FrameworkVersion35Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FrameworkVersion40Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FrameworkVersion45Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Path", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false}, "path", $.String);

    $.Field({Static:true , Public:false}, "version11Path", $.String);

    $.Field({Static:true , Public:false}, "version20Path", $.String);

    $.Field({Static:true , Public:false}, "version30Path", $.String);

    $.Field({Static:true , Public:false}, "version35Path", $.String);

    $.Field({Static:true , Public:false}, "version40Path", $.String);

    $.Field({Static:true , Public:false}, "version45Path", $.String);

    $.Property({Static:false, Public:true }, "Path", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FrameworkVersion11Path", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FrameworkVersion20Path", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FrameworkVersion30Path", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FrameworkVersion35Path", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FrameworkVersion40Path", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FrameworkVersion45Path", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GetFrameworkSdkPath */ 

(function GetFrameworkSdkPath$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.GetFrameworkSdkPath", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FrameworkSdkVersion20Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FrameworkSdkVersion35Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FrameworkSdkVersion40Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FrameworkSdkVersion45Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Path", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false}, "path", $.String);

    $.Field({Static:true , Public:false}, "version20Path", $.String);

    $.Field({Static:true , Public:false}, "version35Path", $.String);

    $.Field({Static:true , Public:false}, "version40Path", $.String);

    $.Field({Static:true , Public:false}, "version45Path", $.String);

    $.Property({Static:false, Public:true }, "Path", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FrameworkSdkVersion20Path", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FrameworkSdkVersion35Path", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FrameworkSdkVersion40Path", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FrameworkSdkVersion45Path", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GetInstalledSDKLocations */ 

(function GetInstalledSDKLocations$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Build.Framework.ITaskItem))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm07.System.String))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.String)) ();
  };




  function GetInstalledSDKLocations_get_InstalledSDKs () {
    return this.GetInstalledSDKLocations$InstalledSDKs$value;
  }; 

  function GetInstalledSDKLocations_get_SDKDirectoryRoots () {
    return this.GetInstalledSDKLocations$SDKDirectoryRoots$value;
  }; 

  function GetInstalledSDKLocations_get_SDKRegistryRoot () {
    return this.GetInstalledSDKLocations$SDKRegistryRoot$value;
  }; 



  function GetInstalledSDKLocations_set_InstalledSDKs (value) {
    this.GetInstalledSDKLocations$InstalledSDKs$value = value;
  }; 

  function GetInstalledSDKLocations_set_SDKDirectoryRoots (value) {
    this.GetInstalledSDKLocations$SDKDirectoryRoots$value = value;
  }; 

  function GetInstalledSDKLocations_set_SDKRegistryRoot (value) {
    this.GetInstalledSDKLocations$SDKRegistryRoot$value = value;
  }; 



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.GetInstalledSDKLocations", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_InstalledSDKs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])), 
      GetInstalledSDKLocations_get_InstalledSDKs
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SDKDirectoryRoots", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String])), 
      GetInstalledSDKLocations_get_SDKDirectoryRoots
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SDKRegistryRoot", 
      JSIL.MethodSignature.Return($.String), 
      GetInstalledSDKLocations_get_SDKRegistryRoot
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TargetPlatformIdentifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetPlatformVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true }, "set_InstalledSDKs", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])), 
      GetInstalledSDKLocations_set_InstalledSDKs
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SDKDirectoryRoots", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String])), 
      GetInstalledSDKLocations_set_SDKDirectoryRoots
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SDKRegistryRoot", 
      JSIL.MethodSignature.Action($.String), 
      GetInstalledSDKLocations_set_SDKRegistryRoot
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_TargetPlatformIdentifier", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetPlatformVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "StaticSDKCacheKey", $.String, "StaticToolLocationHelperSDKCacheDisposer");

    $.Field({Static:false, Public:false}, "targetPlatformVersion", $.String);

    $.Field({Static:false, Public:false}, "targetPlatformIdentifier", $.String);

    $.Field({Static:false, Public:false}, "GetInstalledSDKLocations$SDKRegistryRoot$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GetInstalledSDKLocations$SDKDirectoryRoots$value", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GetInstalledSDKLocations$InstalledSDKs$value", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "TargetPlatformVersion", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "TargetPlatformIdentifier", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "SDKRegistryRoot", $.String);

    $.Property({Static:false, Public:true }, "SDKDirectoryRoots", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "InstalledSDKs", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GetReferenceAssemblyPaths */ 

(function GetReferenceAssemblyPaths$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };









  function GetReferenceAssemblyPaths_get_TargetFrameworkMonikerDisplayName () {
    return this.GetReferenceAssemblyPaths$TargetFrameworkMonikerDisplayName$value;
  }; 





  function GetReferenceAssemblyPaths_set_TargetFrameworkMonikerDisplayName (value) {
    this.GetReferenceAssemblyPaths$TargetFrameworkMonikerDisplayName$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.GetReferenceAssemblyPaths", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BypassFrameworkInstallChecks", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FullFrameworkReferenceAssemblyPaths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferenceAssemblyPaths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RootPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkMoniker", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true }, "get_TargetFrameworkMonikerDisplayName", 
      JSIL.MethodSignature.Return($.String), 
      GetReferenceAssemblyPaths_get_TargetFrameworkMonikerDisplayName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetPaths", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$.String, $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BypassFrameworkInstallChecks", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RootPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkMoniker", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:true }, "set_TargetFrameworkMonikerDisplayName", 
      JSIL.MethodSignature.Action($.String), 
      GetReferenceAssemblyPaths_set_TargetFrameworkMonikerDisplayName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NET35SP1SentinelAssemblyName", $.String, "System.Data.Entity, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL");

    $.Field({Static:true , Public:false}, "net35SP1SentinelAssemblyFound", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "tfmPaths", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]));

    $.Field({Static:false, Public:false}, "tfmPathsNoProfile", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]));

    $.Field({Static:false, Public:false}, "targetFrameworkMoniker", $.String);

    $.Field({Static:false, Public:false}, "rootPath", $.String);

    $.Field({Static:false, Public:false}, "bypassFrameworkInstallChecks", $.Boolean);

    $.Field({Static:false, Public:false}, "GetReferenceAssemblyPaths$TargetFrameworkMonikerDisplayName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));


    function GetReferenceAssemblyPaths__cctor () {
      $thisType.net35SP1SentinelAssemblyFound = null;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      GetReferenceAssemblyPaths__cctor
    );

    $.Property({Static:false, Public:true }, "ReferenceAssemblyPaths", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "FullFrameworkReferenceAssemblyPaths", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "TargetFrameworkMoniker", $.String);

    $.Property({Static:false, Public:true }, "RootPath", $.String);

    $.Property({Static:false, Public:true }, "BypassFrameworkInstallChecks", $.Boolean);

    $.Property({Static:false, Public:true }, "TargetFrameworkMonikerDisplayName", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GetReferenceAssemblyPaths+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.GetReferenceAssemblyPaths+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lExecute$gb__24_0", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__24_0", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.GetSDKReferenceFiles */ 

(function GetSDKReferenceFiles$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };












  function GetSDKReferenceFiles_get_LogCacheFileExceptions () {
    return this.GetSDKReferenceFiles$LogCacheFileExceptions$value;
  }; 

  function GetSDKReferenceFiles_get_LogRedistConflictBetweenSDKsAsWarning () {
    return this.GetSDKReferenceFiles$LogRedistConflictBetweenSDKsAsWarning$value;
  }; 

  function GetSDKReferenceFiles_get_LogRedistConflictWithinSDKAsWarning () {
    return this.GetSDKReferenceFiles$LogRedistConflictWithinSDKAsWarning$value;
  }; 

  function GetSDKReferenceFiles_get_LogRedistFilesList () {
    return this.GetSDKReferenceFiles$LogRedistFilesList$value;
  }; 

  function GetSDKReferenceFiles_get_LogReferenceConflictBetweenSDKsAsWarning () {
    return this.GetSDKReferenceFiles$LogReferenceConflictBetweenSDKsAsWarning$value;
  }; 

  function GetSDKReferenceFiles_get_LogReferenceConflictWithinSDKAsWarning () {
    return this.GetSDKReferenceFiles$LogReferenceConflictWithinSDKAsWarning$value;
  }; 

  function GetSDKReferenceFiles_get_LogReferencesList () {
    return this.GetSDKReferenceFiles$LogReferencesList$value;
  }; 







  function GetSDKReferenceFiles_set_LogCacheFileExceptions (value) {
    this.GetSDKReferenceFiles$LogCacheFileExceptions$value = value;
  }; 

  function GetSDKReferenceFiles_set_LogRedistConflictBetweenSDKsAsWarning (value) {
    this.GetSDKReferenceFiles$LogRedistConflictBetweenSDKsAsWarning$value = value;
  }; 

  function GetSDKReferenceFiles_set_LogRedistConflictWithinSDKAsWarning (value) {
    this.GetSDKReferenceFiles$LogRedistConflictWithinSDKAsWarning$value = value;
  }; 

  function GetSDKReferenceFiles_set_LogRedistFilesList (value) {
    this.GetSDKReferenceFiles$LogRedistFilesList$value = value;
  }; 

  function GetSDKReferenceFiles_set_LogReferenceConflictBetweenSDKsAsWarning (value) {
    this.GetSDKReferenceFiles$LogReferenceConflictBetweenSDKsAsWarning$value = value;
  }; 

  function GetSDKReferenceFiles_set_LogReferenceConflictWithinSDKAsWarning (value) {
    this.GetSDKReferenceFiles$LogReferenceConflictWithinSDKAsWarning$value = value;
  }; 

  function GetSDKReferenceFiles_set_LogReferencesList (value) {
    this.GetSDKReferenceFiles$LogReferencesList$value = value;
  }; 



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.GetSDKReferenceFiles", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindRedistFiles", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindReferences", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String, 
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GatherRedistFiles", 
      new JSIL.MethodSignature(null, [
          $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedRedistFile")]), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), 
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GatherReferenceAssemblies", 
      new JSIL.MethodSignature(null, [
          $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedReferenceAssembly")]), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), 
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateOutputItems", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CacheFileFolderPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CopyLocalFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Method({Static:false, Public:true }, "get_LogCacheFileExceptions", 
      JSIL.MethodSignature.Return($.Boolean), 
      GetSDKReferenceFiles_get_LogCacheFileExceptions
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LogRedistConflictBetweenSDKsAsWarning", 
      JSIL.MethodSignature.Return($.Boolean), 
      GetSDKReferenceFiles_get_LogRedistConflictBetweenSDKsAsWarning
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LogRedistConflictWithinSDKAsWarning", 
      JSIL.MethodSignature.Return($.Boolean), 
      GetSDKReferenceFiles_get_LogRedistConflictWithinSDKAsWarning
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LogRedistFilesList", 
      JSIL.MethodSignature.Return($.Boolean), 
      GetSDKReferenceFiles_get_LogRedistFilesList
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LogReferenceConflictBetweenSDKsAsWarning", 
      JSIL.MethodSignature.Return($.Boolean), 
      GetSDKReferenceFiles_get_LogReferenceConflictBetweenSDKsAsWarning
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LogReferenceConflictWithinSDKAsWarning", 
      JSIL.MethodSignature.Return($.Boolean), 
      GetSDKReferenceFiles_get_LogReferenceConflictWithinSDKAsWarning
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_LogReferencesList", 
      JSIL.MethodSignature.Return($.Boolean), 
      GetSDKReferenceFiles_get_LogReferencesList
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_RedistFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferenceExtensions", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_References", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResolvedSDKReferences", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateReferencesForSDK", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CacheFileFolderPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:true }, "set_LogCacheFileExceptions", 
      JSIL.MethodSignature.Action($.Boolean), 
      GetSDKReferenceFiles_set_LogCacheFileExceptions
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LogRedistConflictBetweenSDKsAsWarning", 
      JSIL.MethodSignature.Action($.Boolean), 
      GetSDKReferenceFiles_set_LogRedistConflictBetweenSDKsAsWarning
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LogRedistConflictWithinSDKAsWarning", 
      JSIL.MethodSignature.Action($.Boolean), 
      GetSDKReferenceFiles_set_LogRedistConflictWithinSDKAsWarning
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LogRedistFilesList", 
      JSIL.MethodSignature.Action($.Boolean), 
      GetSDKReferenceFiles_set_LogRedistFilesList
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LogReferenceConflictBetweenSDKsAsWarning", 
      JSIL.MethodSignature.Action($.Boolean), 
      GetSDKReferenceFiles_set_LogReferenceConflictBetweenSDKsAsWarning
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LogReferenceConflictWithinSDKAsWarning", 
      JSIL.MethodSignature.Action($.Boolean), 
      GetSDKReferenceFiles_set_LogReferenceConflictWithinSDKAsWarning
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_LogReferencesList", 
      JSIL.MethodSignature.Action($.Boolean), 
      GetSDKReferenceFiles_set_LogReferencesList
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ReferenceExtensions", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResolvedSDKReferences", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Field({Static:false, Public:false}, "resolvedSDKReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "sdkRedistFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "references", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "redistFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "resolvedReferences", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedReferenceAssembly")]));

    $.Field({Static:false, Public:false}, "resolveRedistFiles", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedRedistFile")]));

    $.Field({Static:false, Public:false}, "copyLocalFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "referenceExtensions", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "cacheFileForSDKs", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKInfo")]));

    $.Field({Static:false, Public:false}, "exceptions", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentQueue`1", [$.String]));

    $.Field({Static:false, Public:false}, "getAssemblyName", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"));

    $.Field({Static:false, Public:false}, "getRuntimeVersion", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"));

    $.Field({Static:false, Public:false}, "fileExists", $asm01.TypeRef("Microsoft.Build.Shared.FileExists"));

    $.Field({Static:false, Public:false}, "cacheFilePath", $.String);

    $.Field({Static:false, Public:false}, "GetSDKReferenceFiles$LogReferencesList$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GetSDKReferenceFiles$LogRedistFilesList$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GetSDKReferenceFiles$LogRedistConflictWithinSDKAsWarning$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GetSDKReferenceFiles$LogRedistConflictBetweenSDKsAsWarning$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GetSDKReferenceFiles$LogReferenceConflictWithinSDKAsWarning$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GetSDKReferenceFiles$LogReferenceConflictBetweenSDKsAsWarning$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "GetSDKReferenceFiles$LogCacheFileExceptions$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "CacheFileFolderPath", $.String);

    $.Property({Static:false, Public:true }, "ResolvedSDKReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "ReferenceExtensions", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "LogReferencesList", $.Boolean);

    $.Property({Static:false, Public:true }, "LogRedistFilesList", $.Boolean);

    $.Property({Static:false, Public:true }, "References", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "RedistFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "CopyLocalFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "LogRedistConflictWithinSDKAsWarning", $.Boolean);

    $.Property({Static:false, Public:true }, "LogRedistConflictBetweenSDKsAsWarning", $.Boolean);

    $.Property({Static:false, Public:true }, "LogReferenceConflictWithinSDKAsWarning", $.Boolean);

    $.Property({Static:false, Public:true }, "LogReferenceConflictBetweenSDKsAsWarning", $.Boolean);

    $.Property({Static:false, Public:true }, "LogCacheFileExceptions", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedReferenceAssembly */ 

(function ResolvedReferenceAssembly$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Build.Framework.ITaskItem)) ();
  };





  function ResolvedReferenceAssembly_get_AssemblyLocation () {
    return this.ResolvedReferenceAssembly$AssemblyLocation$value;
  }; 


  function ResolvedReferenceAssembly_get_FileName () {
    return this.ResolvedReferenceAssembly$FileName$value;
  }; 

  function ResolvedReferenceAssembly_get_SDKReferenceItem () {
    return this.ResolvedReferenceAssembly$SDKReferenceItem$value;
  }; 


  function ResolvedReferenceAssembly_set_AssemblyLocation (value) {
    this.ResolvedReferenceAssembly$AssemblyLocation$value = value;
  }; 

  function ResolvedReferenceAssembly_set_FileName (value) {
    this.ResolvedReferenceAssembly$FileName$value = value;
  }; 

  function ResolvedReferenceAssembly_set_SDKReferenceItem (value) {
    this.ResolvedReferenceAssembly$SDKReferenceItem$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedReferenceAssembly", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.Method({Static:false, Public:true }, "get_AssemblyLocation", 
      JSIL.MethodSignature.Return($.String), 
      ResolvedReferenceAssembly_get_AssemblyLocation
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CopyLocal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_FileName", 
      JSIL.MethodSignature.Return($.String), 
      ResolvedReferenceAssembly_get_FileName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SDKReferenceItem", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      ResolvedReferenceAssembly_get_SDKReferenceItem
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Method({Static:false, Public:false}, "set_AssemblyLocation", 
      JSIL.MethodSignature.Action($.String), 
      ResolvedReferenceAssembly_set_AssemblyLocation
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_FileName", 
      JSIL.MethodSignature.Action($.String), 
      ResolvedReferenceAssembly_set_FileName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_SDKReferenceItem", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      ResolvedReferenceAssembly_set_SDKReferenceItem
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "copyLocal", $.Boolean);

    $.Field({Static:false, Public:false}, "ResolvedReferenceAssembly$FileName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ResolvedReferenceAssembly$AssemblyLocation$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ResolvedReferenceAssembly$SDKReferenceItem$value", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "FileName", $.String);

    $.Property({Static:false, Public:true }, "AssemblyLocation", $.String);

    $.Property({Static:false, Public:true }, "CopyLocal", $.Boolean);

    $.Property({Static:false, Public:true }, "SDKReferenceItem", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedRedistFile */ 

(function ResolvedRedistFile$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Build.Framework.ITaskItem)) ();
  };





  function ResolvedRedistFile_get_RedistFile () {
    return this.ResolvedRedistFile$RedistFile$value;
  }; 

  function ResolvedRedistFile_get_SDKReferenceItem () {
    return this.ResolvedRedistFile$SDKReferenceItem$value;
  }; 

  function ResolvedRedistFile_get_TargetPath () {
    return this.ResolvedRedistFile$TargetPath$value;
  }; 

  function ResolvedRedistFile_get_TargetRoot () {
    return this.ResolvedRedistFile$TargetRoot$value;
  }; 


  function ResolvedRedistFile_set_RedistFile (value) {
    this.ResolvedRedistFile$RedistFile$value = value;
  }; 

  function ResolvedRedistFile_set_SDKReferenceItem (value) {
    this.ResolvedRedistFile$SDKReferenceItem$value = value;
  }; 

  function ResolvedRedistFile_set_TargetPath (value) {
    this.ResolvedRedistFile$TargetPath$value = value;
  }; 

  function ResolvedRedistFile_set_TargetRoot (value) {
    this.ResolvedRedistFile$TargetRoot$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedRedistFile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.Method({Static:false, Public:true }, "get_RedistFile", 
      JSIL.MethodSignature.Return($.String), 
      ResolvedRedistFile_get_RedistFile
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SDKReferenceItem", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      ResolvedRedistFile_get_SDKReferenceItem
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TargetPath", 
      JSIL.MethodSignature.Return($.String), 
      ResolvedRedistFile_get_TargetPath
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TargetRoot", 
      JSIL.MethodSignature.Return($.String), 
      ResolvedRedistFile_get_TargetRoot
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Method({Static:false, Public:false}, "set_RedistFile", 
      JSIL.MethodSignature.Action($.String), 
      ResolvedRedistFile_set_RedistFile
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_SDKReferenceItem", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      ResolvedRedistFile_set_SDKReferenceItem
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TargetPath", 
      JSIL.MethodSignature.Action($.String), 
      ResolvedRedistFile_set_TargetPath
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TargetRoot", 
      JSIL.MethodSignature.Action($.String), 
      ResolvedRedistFile_set_TargetRoot
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ResolvedRedistFile$RedistFile$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ResolvedRedistFile$TargetPath$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ResolvedRedistFile$TargetRoot$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ResolvedRedistFile$SDKReferenceItem$value", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "RedistFile", $.String);

    $.Property({Static:false, Public:true }, "TargetPath", $.String);

    $.Property({Static:false, Public:true }, "TargetRoot", $.String);

    $.Property({Static:false, Public:true }, "SDKReferenceItem", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKFilesCache */ 

(function SDKFilesCache$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKFilesCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Concurrent.ConcurrentQueue`1", [$.String]), $.String, 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAllRedistDirectories", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAllReferenceDirectories", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCacheFileInfoFromSDK", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKInfo"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSDKReferenceInfo", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SdkReferenceInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAssemblyListCacheFileUpToDate", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadAssemblyListFromCacheFile", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateRedistDictionaryFromPaths", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateReferencesDictionaryFromPaths", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]), $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SdkReferenceInfo")]), 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveAssemblyListToCacheFile", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "exceptionMessages", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentQueue`1", [$.String]));

    $.Field({Static:false, Public:false}, "getAssemblyName", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"));

    $.Field({Static:false, Public:false}, "getRuntimeVersion", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"));

    $.Field({Static:false, Public:false}, "fileExists", $asm01.TypeRef("Microsoft.Build.Shared.FileExists"));

    $.Field({Static:false, Public:false}, "cacheFileDirectory", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKFilesCache+<>c__DisplayClass9_0 */ 

(function $l$gc__DisplayClass9_0$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKFilesCache+<>c__DisplayClass9_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPopulateReferencesDictionaryFromPaths$gb__0", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPopulateReferencesDictionaryFromPaths$gb__1", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:true }, "referencesByDirectory", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]));

    $.Field({Static:false, Public:true }, "references", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SdkReferenceInfo")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKFilesCache"));

    $.Field({Static:false, Public:true }, "$l$g9__1", $asm07.TypeRef("System.Action`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKFilesCache+<>c__DisplayClass10_0 */ 

(function $l$gc__DisplayClass10_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKFilesCache+<>c__DisplayClass10_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPopulateRedistDictionaryFromPaths$gb__0", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:true }, "redistFilesByDirectory", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.GetSDKReferenceFiles+SdkReferenceInfo */ 

(function SdkReferenceInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };



  function SdkReferenceInfo_get_FusionName () {
    return this.SdkReferenceInfo$FusionName$value;
  }; 

  function SdkReferenceInfo_get_ImageRuntime () {
    return this.SdkReferenceInfo$ImageRuntime$value;
  }; 

  function SdkReferenceInfo_get_IsManagedWinmd () {
    return this.SdkReferenceInfo$IsManagedWinmd$value;
  }; 

  function SdkReferenceInfo_get_IsWinMD () {
    return this.SdkReferenceInfo$IsWinMD$value;
  }; 

  function SdkReferenceInfo_set_FusionName (value) {
    this.SdkReferenceInfo$FusionName$value = value;
  }; 

  function SdkReferenceInfo_set_ImageRuntime (value) {
    this.SdkReferenceInfo$ImageRuntime$value = value;
  }; 

  function SdkReferenceInfo_set_IsManagedWinmd (value) {
    this.SdkReferenceInfo$IsManagedWinmd$value = value;
  }; 

  function SdkReferenceInfo_set_IsWinMD (value) {
    this.SdkReferenceInfo$IsWinMD$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.GetSDKReferenceFiles+SdkReferenceInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.Method({Static:false, Public:true }, "get_FusionName", 
      JSIL.MethodSignature.Return($.String), 
      SdkReferenceInfo_get_FusionName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ImageRuntime", 
      JSIL.MethodSignature.Return($.String), 
      SdkReferenceInfo_get_ImageRuntime
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsManagedWinmd", 
      JSIL.MethodSignature.Return($.Boolean), 
      SdkReferenceInfo_get_IsManagedWinmd
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_IsWinMD", 
      JSIL.MethodSignature.Return($.Boolean), 
      SdkReferenceInfo_get_IsWinMD
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_FusionName", 
      JSIL.MethodSignature.Action($.String), 
      SdkReferenceInfo_set_FusionName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ImageRuntime", 
      JSIL.MethodSignature.Action($.String), 
      SdkReferenceInfo_set_ImageRuntime
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsManagedWinmd", 
      JSIL.MethodSignature.Action($.Boolean), 
      SdkReferenceInfo_set_IsManagedWinmd
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsWinMD", 
      JSIL.MethodSignature.Action($.Boolean), 
      SdkReferenceInfo_set_IsWinMD
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SdkReferenceInfo$FusionName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SdkReferenceInfo$IsWinMD$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SdkReferenceInfo$IsManagedWinmd$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SdkReferenceInfo$ImageRuntime$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "FusionName", $.String);

    $.Property({Static:false, Public:true }, "IsWinMD", $.Boolean);

    $.Property({Static:false, Public:true }, "IsManagedWinmd", $.Boolean);

    $.Property({Static:false, Public:true }, "ImageRuntime", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKInfo */ 

(function SDKInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.Concurrent.ConcurrentDictionary$b2.Of($asm07.System.String, $asm07.System.Collections.Generic.List$b1.Of($asm07.System.String)))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Collections.Concurrent.ConcurrentDictionary$b2.Of($asm07.System.String, $asm01.Microsoft.Build.Tasks.GetSDKReferenceFiles_SdkReferenceInfo))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.String)) ();
  };



  function SDKInfo_get_DirectoryToFileList () {
    return this.SDKInfo$DirectoryToFileList$value;
  }; 

  function SDKInfo_get_Hash () {
    return this.SDKInfo$Hash$value;
  }; 

  function SDKInfo_get_PathToReferenceMetadata () {
    return this.SDKInfo$PathToReferenceMetadata$value;
  }; 

  function SDKInfo_get_Suffix () {
    return this.SDKInfo$Suffix$value;
  }; 

  function SDKInfo_set_DirectoryToFileList (value) {
    this.SDKInfo$DirectoryToFileList$value = value;
  }; 

  function SDKInfo_set_Hash (value) {
    this.SDKInfo$Hash$value = (value | 0);
  }; 

  function SDKInfo_set_PathToReferenceMetadata (value) {
    this.SDKInfo$PathToReferenceMetadata$value = value;
  }; 

  function SDKInfo_set_Suffix (value) {
    this.SDKInfo$Suffix$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SdkReferenceInfo")]), $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]), 
          $.String, $.Int32
        ])
    );

    $.Method({Static:false, Public:true }, "get_DirectoryToFileList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])])), 
      SDKInfo_get_DirectoryToFileList
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Hash", 
      JSIL.MethodSignature.Return($.Int32), 
      SDKInfo_get_Hash
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_PathToReferenceMetadata", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SdkReferenceInfo")])), 
      SDKInfo_get_PathToReferenceMetadata
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Suffix", 
      JSIL.MethodSignature.Return($.String), 
      SDKInfo_get_Suffix
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_DirectoryToFileList", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])])), 
      SDKInfo_set_DirectoryToFileList
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Hash", 
      JSIL.MethodSignature.Action($.Int32), 
      SDKInfo_set_Hash
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_PathToReferenceMetadata", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SdkReferenceInfo")])), 
      SDKInfo_set_PathToReferenceMetadata
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Suffix", 
      JSIL.MethodSignature.Action($.String), 
      SDKInfo_set_Suffix
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKInfo$PathToReferenceMetadata$value", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SdkReferenceInfo")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKInfo$DirectoryToFileList$value", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKInfo$Suffix$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKInfo$Hash$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "PathToReferenceMetadata", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SdkReferenceInfo")]));

    $.Property({Static:false, Public:true }, "DirectoryToFileList", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]));

    $.Property({Static:false, Public:true }, "Suffix", $.String);

    $.Property({Static:false, Public:true }, "Hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GetSDKReferenceFiles+SaveContext */ 

(function SaveContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Build.Tasks.GetSDKReferenceFiles_SDKInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };



  function SaveContext_get_Assemblies () {
    return this.SaveContext$Assemblies$value;
  }; 

  function SaveContext_get_SdkIdentity () {
    return this.SaveContext$SdkIdentity$value;
  }; 

  function SaveContext_set_Assemblies (value) {
    this.SaveContext$Assemblies$value = value;
  }; 

  function SaveContext_set_SdkIdentity (value) {
    this.SaveContext$SdkIdentity$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.GetSDKReferenceFiles+SaveContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKInfo")])
    );

    $.Method({Static:false, Public:true }, "get_Assemblies", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKInfo")), 
      SaveContext_get_Assemblies
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SdkIdentity", 
      JSIL.MethodSignature.Return($.String), 
      SaveContext_get_SdkIdentity
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Assemblies", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKInfo")), 
      SaveContext_set_Assemblies
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_SdkIdentity", 
      JSIL.MethodSignature.Action($.String), 
      SaveContext_set_SdkIdentity
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SaveContext$SdkIdentity$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SaveContext$Assemblies$value", $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKInfo"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "SdkIdentity", $.String);

    $.Property({Static:false, Public:true }, "Assemblies", $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+SDKInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.GetSDKReferenceFiles+<>c__DisplayClass60_0 */ 

(function $l$gc__DisplayClass60_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.GetSDKReferenceFiles+<>c__DisplayClass60_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindRedistFiles$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedRedistFile")])
    );

    $.Field({Static:false, Public:true }, "redist", $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedRedistFile"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.GetSDKReferenceFiles+<>c__DisplayClass61_0 */ 

(function $l$gc__DisplayClass61_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.GetSDKReferenceFiles+<>c__DisplayClass61_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lFindReferences$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedReferenceAssembly")])
    );

    $.Field({Static:false, Public:true }, "reference", $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedReferenceAssembly"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.GetSDKReferenceFiles+<>c__DisplayClass63_0 */ 

(function $l$gc__DisplayClass63_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.GetSDKReferenceFiles+<>c__DisplayClass63_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGatherReferenceAssemblies$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedReferenceAssembly")])
    );

    $.Field({Static:false, Public:true }, "resolvedReference", $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedReferenceAssembly"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.GetSDKReferenceFiles+<>c__DisplayClass64_0 */ 

(function $l$gc__DisplayClass64_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.GetSDKReferenceFiles+<>c__DisplayClass64_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGatherRedistFiles$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedRedistFile")])
    );

    $.Field({Static:false, Public:true }, "redistFile", $asm01.TypeRef("Microsoft.Build.Tasks.GetSDKReferenceFiles+ResolvedRedistFile"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* interface Microsoft.Build.Tasks.IComReferenceResolver */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.IComReferenceResolver", false, [], function ($) {
    $.Method({}, "ResolveComClassicReference", new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPELIBATTR"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo")])
        ]));
    $.Method({}, "ResolveNetAssemblyReference", new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])]));
    $.Method({}, "ResolveComAssemblyReference", new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])]));
  }, []);

/* class Microsoft.Build.Tasks.InstalledSDKResolver */ 

(function InstalledSDKResolver$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Resolver"), 
      Name: "Microsoft.Build.Tasks.InstalledSDKResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.String, 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), $asm07.TypeRef("System.Version")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Resolve", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $.String, 
          $.String, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.Field({Static:false, Public:false}, "resolvedSDKs", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.InvalidParameterValueException */ 

(function InvalidParameterValueException$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Build.Tasks.InvalidParameterValueException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActualValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParamName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ActualValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParamName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "paramName", $.String);

    $.Field({Static:false, Public:false}, "actualValue", $.String);

    $.Property({Static:false, Public:true }, "ParamName", $.String);

    $.Property({Static:false, Public:true }, "ActualValue", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.LC */ 

(function LC$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ToolTaskExtension"), 
      Name: "Microsoft.Build.Tasks.LC", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddCommandLineCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateFullPathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LicenseTarget", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NoLogo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputLicense", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferencedAssemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SdkToolsPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sources", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LicenseTarget", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NoLogo", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputDirectory", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputLicense", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReferencedAssemblies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SdkToolsPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Sources", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true }, "Sources", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "OutputLicense", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "LicenseTarget", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "OutputDirectory", $.String);

    $.Property({Static:false, Public:true }, "ReferencedAssemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "NoLogo", $.Boolean);

    $.Property({Static:false, Public:true }, "SdkToolsPath", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ToolName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.FindUnderPath */ 

(function FindUnderPath$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.FindUnderPath", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Files", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InPath", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutOfPath", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Path", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateToAbsolutePaths", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Files", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InPath", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutOfPath", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Path", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateToAbsolutePaths", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "updateToAbsolutePaths", $.Boolean);

    $.Field({Static:false, Public:false}, "path", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "inPath", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "outOfPath", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Path", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "Files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "UpdateToAbsolutePaths", $.Boolean);

    $.Property({Static:false, Public:true }, "InPath", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "OutOfPath", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.RemoveDuplicates */ 

(function RemoveDuplicates$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.RemoveDuplicates", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Filtered", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Inputs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Filtered", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Inputs", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Field({Static:false, Public:false}, "inputs", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "filtered", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Inputs", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Filtered", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.MakeDir */ 

(function MakeDir$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.MakeDir", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Directories", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DirectoriesCreated", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Directories", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Field({Static:false, Public:false}, "directories", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "directoriesCreated", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Directories", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "DirectoriesCreated", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Move */ 

(function Move$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Build.Framework.ITaskItem))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Build.Framework.ITaskItem)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Boolean)) ();
  };





  function Move_get_DestinationFiles () {
    return this.Move$DestinationFiles$value;
  }; 

  function Move_get_DestinationFolder () {
    return this.Move$DestinationFolder$value;
  }; 


  function Move_get_OverwriteReadOnlyFiles () {
    return this.Move$OverwriteReadOnlyFiles$value;
  }; 

  function Move_get_SourceFiles () {
    return this.Move$SourceFiles$value;
  }; 



  function Move_set_DestinationFiles (value) {
    this.Move$DestinationFiles$value = value;
  }; 

  function Move_set_DestinationFolder (value) {
    this.Move$DestinationFolder$value = value;
  }; 

  function Move_set_OverwriteReadOnlyFiles (value) {
    this.Move$OverwriteReadOnlyFiles$value = value;
  }; 

  function Move_set_SourceFiles (value) {
    this.Move$SourceFiles$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.Move", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Cancel", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_DestinationFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])), 
      Move_get_DestinationFiles
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DestinationFolder", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      Move_get_DestinationFolder
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MovedFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Method({Static:false, Public:true }, "get_OverwriteReadOnlyFiles", 
      JSIL.MethodSignature.Return($.Boolean), 
      Move_get_OverwriteReadOnlyFiles
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SourceFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])), 
      Move_get_SourceFiles
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MakeWriteableIfReadOnly", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveFileWithLogging", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.Method({Static:false, Public:true }, "set_DestinationFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])), 
      Move_set_DestinationFiles
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DestinationFolder", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      Move_set_DestinationFolder
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_OverwriteReadOnlyFiles", 
      JSIL.MethodSignature.Action($.Boolean), 
      Move_set_OverwriteReadOnlyFiles
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SourceFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])), 
      Move_set_SourceFiles
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Constant({Static:true , Public:false}, "Flags", $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+MoveFileFlags"), 11);

    $.Field({Static:false, Public:false}, "movedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "canceling", $.Boolean);

    $.Field({Static:false, Public:false}, "Move$SourceFiles$value", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Move$DestinationFolder$value", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Move$OverwriteReadOnlyFiles$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "Move$DestinationFiles$value", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "SourceFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "DestinationFolder", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "OverwriteReadOnlyFiles", $.Boolean);

    $.Property({Static:false, Public:true }, "DestinationFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "MovedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("Microsoft.Build.Framework.ICancelableTask")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Message */ 

(function Message$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.Message", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Code", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_File", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HelpKeyword", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Importance", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCritical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Text", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Code", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_File", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HelpKeyword", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Importance", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsCritical", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Text", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "text", $.String);

    $.Field({Static:false, Public:false}, "importance", $.String);

    $.Field({Static:false, Public:false}, "code", $.String);

    $.Field({Static:false, Public:false}, "file", $.String);

    $.Field({Static:false, Public:false}, "helpKeyword", $.String);

    $.Field({Static:false, Public:false}, "isCritical", $.Boolean);

    $.Property({Static:false, Public:true }, "Text", $.String);

    $.Property({Static:false, Public:true }, "Importance", $.String);

    $.Property({Static:false, Public:true }, "Code", $.String);

    $.Property({Static:false, Public:true }, "File", $.String);

    $.Property({Static:false, Public:true }, "HelpKeyword", $.String);

    $.Property({Static:false, Public:true }, "IsCritical", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.MSBuild */ 

(function MSBuild$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.MSBuild", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildProjectsInParallel", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Collections.Hashtable"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("System.Collections.ArrayList"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateTargetLists", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ArrayList"), [$jsilcore.TypeRef("System.Array", [$.String]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ExecuteTargets", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $asm07.TypeRef("System.Collections.Hashtable"), 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm07.TypeRef("System.Collections.ArrayList"), 
          $.Boolean, $.Boolean, 
          $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine3"), $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), 
          $asm07.TypeRef("System.Collections.ArrayList"), $.Boolean, 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandAllTargetsAndProperties", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BuildInParallel", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Projects", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RebaseOutputs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemoveProperties", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RunEachTargetSeparately", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SkipNonexistentProjects", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StopOnFirstFailure", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetAndPropertyListSeparators", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetOutputs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Targets", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ToolsVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnloadProjectsOnCompletion", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseResultsCache", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BuildInParallel", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Projects", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Properties", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RebaseOutputs", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RemoveProperties", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RunEachTargetSeparately", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SkipNonexistentProjects", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StopOnFirstFailure", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetAndPropertyListSeparators", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Targets", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ToolsVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnloadProjectsOnCompletion", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseResultsCache", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "projects", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "targets", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "properties", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "undefineProperties", $.String);

    $.Field({Static:false, Public:false}, "targetOutputs", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "rebaseOutputs", $.Boolean);

    $.Field({Static:false, Public:false}, "stopOnFirstFailure", $.Boolean);

    $.Field({Static:false, Public:false}, "runEachTargetSeparately", $.Boolean);

    $.Field({Static:false, Public:false}, "buildInParallel", $.Boolean);

    $.Field({Static:false, Public:false}, "unloadProjectsOnCompletion", $.Boolean);

    $.Field({Static:false, Public:false}, "useResultsCache", $.Boolean);

    $.Field({Static:false, Public:false}, "skipNonexistentProjects", $asm01.TypeRef("Microsoft.Build.Tasks.MSBuild+SkipNonexistentProjectsBehavior"));

    $.Field({Static:false, Public:false}, "toolsVersion", $.String);

    $.Field({Static:false, Public:false}, "targetAndPropertyListSeparators", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "Properties", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "RemoveProperties", $.String);

    $.Property({Static:false, Public:true }, "Targets", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "Projects", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "TargetOutputs", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "RebaseOutputs", $.Boolean);

    $.Property({Static:false, Public:true }, "StopOnFirstFailure", $.Boolean);

    $.Property({Static:false, Public:true }, "RunEachTargetSeparately", $.Boolean);

    $.Property({Static:false, Public:true }, "ToolsVersion", $.String);

    $.Property({Static:false, Public:true }, "BuildInParallel", $.Boolean);

    $.Property({Static:false, Public:true }, "UnloadProjectsOnCompletion", $.Boolean);

    $.Property({Static:false, Public:true }, "UseResultsCache", $.Boolean);

    $.Property({Static:false, Public:true }, "SkipNonexistentProjects", $.String);

    $.Property({Static:false, Public:true }, "TargetAndPropertyListSeparators", $jsilcore.TypeRef("System.Array", [$.String]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RunInMTAAttribute"));

})();

/* enum Microsoft.Build.Tasks.MSBuild+SkipNonexistentProjectsBehavior */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.MSBuild+SkipNonexistentProjectsBehavior", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Skip: 0, 
    Error: 1, 
    Build: 2, 
  }
);

/* interface Microsoft.Build.Tasks.IFixedTypeInfo */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.IFixedTypeInfo", true, [], function ($) {
    $.Method({}, "GetTypeAttr", JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])));
    $.Method({}, "GetTypeComp", JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeComp")])));
    $.Method({}, "GetFuncDesc", new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]));
    $.Method({}, "GetVarDesc", new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]));
    $.Method({}, "GetNames", new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetRefTypeOfImplType", new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]));
    $.Method({}, "GetImplTypeFlags", new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS")])]));
    $.Method({}, "GetIDsOfNames", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.String]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]));
    $.Method({}, "Invoke", new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Int16, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.DISPPARAMS")]), 
          $.IntPtr, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetDocumentation", new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ]));
    $.Method({}, "GetDllEntry", new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.INVOKEKIND"), 
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ]));
    $.Method({}, "GetRefTypeInfo", new JSIL.MethodSignature(null, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Type])]));
    $.Method({}, "AddressOfMember", new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.INVOKEKIND"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
    $.Method({}, "CreateInstance", new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]));
    $.Method({}, "GetMops", new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.String])]));
    $.Method({}, "GetContainingTypeLib", new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.ITypeLib")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]));
    $.Method({}, "ReleaseTypeAttr", JSIL.MethodSignature.Action($.IntPtr));
    $.Method({}, "ReleaseFuncDesc", JSIL.MethodSignature.Action($.IntPtr));
    $.Method({}, "ReleaseVarDesc", JSIL.MethodSignature.Action($.IntPtr));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["00020401-0000-0000-C000-000000000046"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* interface Microsoft.Build.Tasks.UCOMICreateITypeLib */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.UCOMICreateITypeLib", false, [], function ($) {
    $.Method({}, "CreateTypeInfo", JSIL.MethodSignature.Void);
    $.Method({}, "SetName", JSIL.MethodSignature.Void);
    $.Method({}, "SetVersion", JSIL.MethodSignature.Void);
    $.Method({}, "SetGuid", JSIL.MethodSignature.Void);
    $.Method({}, "SetDocString", JSIL.MethodSignature.Void);
    $.Method({}, "SetHelpFileName", JSIL.MethodSignature.Void);
    $.Method({}, "SetHelpContext", JSIL.MethodSignature.Void);
    $.Method({}, "SetLcid", JSIL.MethodSignature.Void);
    $.Method({}, "SetLibFlags", JSIL.MethodSignature.Void);
    $.Method({}, "SaveAllChanges", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["00020406-0000-0000-C000-000000000046"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* class Microsoft.Build.Tasks.CorMetaDataDispenser */ 

(function CorMetaDataDispenser$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.CorMetaDataDispenser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["E5CB7A31-7512-11d2-89CE-0080C792E5D8"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.TypeLibTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ClassInterfaceAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ClassInterfaceType.None]; });

})();

/* interface Microsoft.Build.Tasks.IMetaDataDispenser */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.IMetaDataDispenser", false, [], function ($) {
    $.Method({}, "DefineScope", new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")])
        ]));
    $.Method({}, "OpenScope", new JSIL.MethodSignature($.Object, [
          $.String, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")])
        ]));
    $.Method({}, "OpenScopeOnMemory", new JSIL.MethodSignature($.Object, [
          $.IntPtr, $.UInt32, 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["809c652e-7396-11d2-9771-00a0c9b4d50c"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.TypeLibTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted]; });

/* interface Microsoft.Build.Tasks.IMetaDataImport */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.IMetaDataImport", false, [], function ($) {
    $.Method({}, "CloseEnum", JSIL.MethodSignature.Void);
    $.Method({}, "CountEnum", new JSIL.MethodSignature(null, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]));
    $.Method({}, "ResetEnum", JSIL.MethodSignature.Void);
    $.Method({}, "EnumTypeDefs", JSIL.MethodSignature.Void);
    $.Method({}, "EnumInterfaceImpls", JSIL.MethodSignature.Void);
    $.Method({}, "EnumTypeRefs", JSIL.MethodSignature.Void);
    $.Method({}, "FindTypeDefByName", JSIL.MethodSignature.Void);
    $.Method({}, "GetScopeProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetModuleFromScope", JSIL.MethodSignature.Void);
    $.Method({}, "GetTypeDefProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetInterfaceImplProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetTypeRefProps", JSIL.MethodSignature.Void);
    $.Method({}, "ResolveTypeRef", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMembers", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMembersWithName", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMethods", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMethodsWithName", JSIL.MethodSignature.Void);
    $.Method({}, "EnumFields", JSIL.MethodSignature.Void);
    $.Method({}, "EnumFieldsWithName", JSIL.MethodSignature.Void);
    $.Method({}, "EnumParams", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMemberRefs", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMethodImpls", JSIL.MethodSignature.Void);
    $.Method({}, "EnumPermissionSets", JSIL.MethodSignature.Void);
    $.Method({}, "FindMember", JSIL.MethodSignature.Void);
    $.Method({}, "FindMethod", JSIL.MethodSignature.Void);
    $.Method({}, "FindField", JSIL.MethodSignature.Void);
    $.Method({}, "FindMemberRef", JSIL.MethodSignature.Void);
    $.Method({}, "GetMethodProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetMemberRefProps", JSIL.MethodSignature.Void);
    $.Method({}, "EnumProperties", JSIL.MethodSignature.Void);
    $.Method({}, "EnumEvents", JSIL.MethodSignature.Void);
    $.Method({}, "GetEventProps", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMethodSemantics", JSIL.MethodSignature.Void);
    $.Method({}, "GetMethodSemantics", JSIL.MethodSignature.Void);
    $.Method({}, "GetClassLayout", JSIL.MethodSignature.Void);
    $.Method({}, "GetFieldMarshal", JSIL.MethodSignature.Void);
    $.Method({}, "GetRVA", JSIL.MethodSignature.Void);
    $.Method({}, "GetPermissionSetProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetSigFromToken", JSIL.MethodSignature.Void);
    $.Method({}, "GetModuleRefProps", JSIL.MethodSignature.Void);
    $.Method({}, "EnumModuleRefs", JSIL.MethodSignature.Void);
    $.Method({}, "GetTypeSpecFromToken", JSIL.MethodSignature.Void);
    $.Method({}, "GetNameFromToken", JSIL.MethodSignature.Void);
    $.Method({}, "EnumUnresolvedMethods", JSIL.MethodSignature.Void);
    $.Method({}, "GetUserString", JSIL.MethodSignature.Void);
    $.Method({}, "GetPinvokeMap", JSIL.MethodSignature.Void);
    $.Method({}, "EnumSignatures", JSIL.MethodSignature.Void);
    $.Method({}, "EnumTypeSpecs", JSIL.MethodSignature.Void);
    $.Method({}, "EnumUserStrings", JSIL.MethodSignature.Void);
    $.Method({}, "GetParamForMethodIndex", JSIL.MethodSignature.Void);
    $.Method({}, "EnumCustomAttributes", JSIL.MethodSignature.Void);
    $.Method({}, "GetCustomAttributeProps", JSIL.MethodSignature.Void);
    $.Method({}, "FindTypeRef", JSIL.MethodSignature.Void);
    $.Method({}, "GetMemberProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetFieldProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetPropertyProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetParamProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetCustomAttributeByName", JSIL.MethodSignature.Void);
    $.Method({}, "IsValidToken", JSIL.MethodSignature.Void);
    $.Method({}, "GetNestedClassProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetNativeCallConvFromSig", JSIL.MethodSignature.Void);
    $.Method({}, "IsGlobal", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["7DAC8207-D3AE-4c75-9B67-92801A497D44"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* interface Microsoft.Build.Tasks.IMetaDataImport2 */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.IMetaDataImport2", false, [], function ($) {
    $.Method({}, "CloseEnum", JSIL.MethodSignature.Void);
    $.Method({}, "CountEnum", JSIL.MethodSignature.Void);
    $.Method({}, "ResetEnum", JSIL.MethodSignature.Void);
    $.Method({}, "EnumTypeDefs", JSIL.MethodSignature.Void);
    $.Method({}, "EnumInterfaceImpls", JSIL.MethodSignature.Void);
    $.Method({}, "EnumTypeRefs", JSIL.MethodSignature.Void);
    $.Method({}, "FindTypeDefByName", JSIL.MethodSignature.Void);
    $.Method({}, "GetScopeProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetModuleFromScope", JSIL.MethodSignature.Void);
    $.Method({}, "GetTypeDefProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetInterfaceImplProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetTypeRefProps", JSIL.MethodSignature.Void);
    $.Method({}, "ResolveTypeRef", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMembers", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMembersWithName", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMethods", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMethodsWithName", JSIL.MethodSignature.Void);
    $.Method({}, "EnumFields", JSIL.MethodSignature.Void);
    $.Method({}, "EnumFieldsWithName", JSIL.MethodSignature.Void);
    $.Method({}, "EnumParams", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMemberRefs", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMethodImpls", JSIL.MethodSignature.Void);
    $.Method({}, "EnumPermissionSets", JSIL.MethodSignature.Void);
    $.Method({}, "FindMember", JSIL.MethodSignature.Void);
    $.Method({}, "FindMethod", JSIL.MethodSignature.Void);
    $.Method({}, "FindField", JSIL.MethodSignature.Void);
    $.Method({}, "FindMemberRef", JSIL.MethodSignature.Void);
    $.Method({}, "GetMethodProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetMemberRefProps", JSIL.MethodSignature.Void);
    $.Method({}, "EnumProperties", JSIL.MethodSignature.Void);
    $.Method({}, "EnumEvents", JSIL.MethodSignature.Void);
    $.Method({}, "GetEventProps", JSIL.MethodSignature.Void);
    $.Method({}, "EnumMethodSemantics", JSIL.MethodSignature.Void);
    $.Method({}, "GetMethodSemantics", JSIL.MethodSignature.Void);
    $.Method({}, "GetClassLayout", JSIL.MethodSignature.Void);
    $.Method({}, "GetFieldMarshal", JSIL.MethodSignature.Void);
    $.Method({}, "GetRVA", JSIL.MethodSignature.Void);
    $.Method({}, "GetPermissionSetProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetSigFromToken", JSIL.MethodSignature.Void);
    $.Method({}, "GetModuleRefProps", JSIL.MethodSignature.Void);
    $.Method({}, "EnumModuleRefs", JSIL.MethodSignature.Void);
    $.Method({}, "GetTypeSpecFromToken", JSIL.MethodSignature.Void);
    $.Method({}, "GetNameFromToken", JSIL.MethodSignature.Void);
    $.Method({}, "EnumUnresolvedMethods", JSIL.MethodSignature.Void);
    $.Method({}, "GetUserString", JSIL.MethodSignature.Void);
    $.Method({}, "GetPinvokeMap", JSIL.MethodSignature.Void);
    $.Method({}, "EnumSignatures", JSIL.MethodSignature.Void);
    $.Method({}, "EnumTypeSpecs", JSIL.MethodSignature.Void);
    $.Method({}, "EnumUserStrings", JSIL.MethodSignature.Void);
    $.Method({}, "GetParamForMethodIndex", JSIL.MethodSignature.Void);
    $.Method({}, "EnumCustomAttributes", JSIL.MethodSignature.Void);
    $.Method({}, "GetCustomAttributeProps", JSIL.MethodSignature.Void);
    $.Method({}, "FindTypeRef", JSIL.MethodSignature.Void);
    $.Method({}, "GetMemberProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetFieldProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetPropertyProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetParamProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetCustomAttributeByName", new JSIL.MethodSignature($.Int32, [
          $.UInt32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]));
    $.Method({}, "IsValidToken", JSIL.MethodSignature.Void);
    $.Method({}, "GetNestedClassProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetNativeCallConvFromSig", JSIL.MethodSignature.Void);
    $.Method({}, "IsGlobal", JSIL.MethodSignature.Void);
    $.Method({}, "EnumGenericParams", JSIL.MethodSignature.Void);
    $.Method({}, "GetGenericParamProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetMethodSpecProps", JSIL.MethodSignature.Void);
    $.Method({}, "EnumGenericParamConstraints", JSIL.MethodSignature.Void);
    $.Method({}, "GetGenericParamConstraintProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetPEKind", new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]));
    $.Method({}, "GetVersionString", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["FCE5EFA0-8BBA-4f8e-A036-8F2022B08466"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* enum Microsoft.Build.Tasks.CorOpenFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.CorOpenFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ofRead: 0, 
    ofWrite: 1, 
    ofCopyMemory: 2, 
    ofCacheImage: 4, 
    ofNoTypeLib: 128, 
  }
);

/* interface Microsoft.Build.Tasks.IMetaDataAssemblyImport */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.IMetaDataAssemblyImport", false, [], function ($) {
    $.Method({}, "GetAssemblyProps", new JSIL.MethodSignature(null, [
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]));
    $.Method({}, "GetAssemblyRefProps", new JSIL.MethodSignature(null, [
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]));
    $.Method({}, "GetFileProps", new JSIL.MethodSignature(null, [
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]));
    $.Method({}, "GetExportedTypeProps", JSIL.MethodSignature.Void);
    $.Method({}, "GetManifestResourceProps", JSIL.MethodSignature.Void);
    $.Method({}, "EnumAssemblyRefs", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]));
    $.Method({}, "EnumFiles", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]));
    $.Method({}, "EnumExportedTypes", JSIL.MethodSignature.Void);
    $.Method({}, "EnumManifestResources", JSIL.MethodSignature.Void);
    $.Method({}, "GetAssemblyFromScope", JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.UInt32])));
    $.Method({}, "FindExportedTypeByName", JSIL.MethodSignature.Void);
    $.Method({}, "FindManifestResourceByName", JSIL.MethodSignature.Void);
    $.Method({}, "CloseEnum", JSIL.MethodSignature.Action($.IntPtr));
    $.Method({}, "FindAssembliesByName", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["EE62470B-E94B-424e-9B7C-2F00C9249F93"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* interface Microsoft.Build.Tasks.IClassFactory */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.IClassFactory", false, [], function ($) {
    $.Method({}, "CreateInstance", new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]));
    $.Method({}, "LockServer", JSIL.MethodSignature.Action($.Boolean));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["00000001-0000-0000-c000-000000000046"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* enum Microsoft.Build.Tasks.CorAssemblyFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.CorAssemblyFlags", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    afPublicKey: 1, 
    afRetargetable: 256, 
  }
);

/* struct Microsoft.Build.Tasks.ASSEMBLYMETADATA */ 

(function ASSEMBLYMETADATA$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.ASSEMBLYMETADATA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "usMajorVersion", $.UInt16);

    $.Field({Static:false, Public:true }, "usMinorVersion", $.UInt16);

    $.Field({Static:false, Public:true }, "usBuildNumber", $.UInt16);

    $.Field({Static:false, Public:true }, "usRevisionNumber", $.UInt16);

    $.Field({Static:false, Public:true }, "rpLocale", $.IntPtr);

    $.Field({Static:false, Public:true }, "cchLocale", $.UInt32);

    $.Field({Static:false, Public:true }, "rpProcessors", $.IntPtr);

    $.Field({Static:false, Public:true }, "cProcessors", $.UInt32);

    $.Field({Static:false, Public:true }, "rOses", $.IntPtr);

    $.Field({Static:false, Public:true }, "cOses", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.ASSEMBLYINFO_FLAG */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.ASSEMBLYINFO_FLAG", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    VALIDATE: 1, 
    GETSIZE: 2, 
  }
);

/* struct Microsoft.Build.Tasks.ASSEMBLY_INFO */ 

(function ASSEMBLY_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.ASSEMBLY_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbAssemblyInfo", $.UInt32);

    $.Field({Static:false, Public:true }, "dwAssemblyFlags", $.UInt32);

    $.Field({Static:false, Public:true }, "uliAssemblySizeInKB", $.UInt64);

    $.Field({Static:false, Public:true }, "pszCurrentAssemblyPathBuf", $.String);

    $.Field({Static:false, Public:true }, "cchBuf", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Build.Tasks.IAssemblyCache */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.IAssemblyCache", false, [], function ($) {
    $.Method({}, "UninstallAssembly", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "QueryAssemblyInfo", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ASSEMBLY_INFO")])
        ]));
    $.Method({}, "CreateAssemblyCacheItem", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "CreateAssemblyScavenger", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "InstallAssembly", JSIL.MethodSignature.Return($.Int32));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["E707DCDE-D1CD-11D2-BAB9-00C04F8ECEAE"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* enum Microsoft.Build.Tasks.AssemblyCacheFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.AssemblyCacheFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    ZAP: 1, 
    GAC: 2, 
    DOWNLOAD: 4, 
  }
);

/* interface Microsoft.Build.Tasks.IAssemblyName */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.IAssemblyName", false, [], function ($) {
    $.Method({}, "SetProperty", new JSIL.MethodSignature($.Int32, [
          $.Int32, $.IntPtr, 
          $.Int32
        ]));
    $.Method({}, "GetProperty", new JSIL.MethodSignature($.Int32, [
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "Finalize", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "GetDisplayName", new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ]));
    $.Method({}, "Reserved", new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $.Object, 
          $.Object, $.String, 
          $.Int64, $.IntPtr, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
    $.Method({}, "GetName", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm07.TypeRef("System.Text.StringBuilder")]));
    $.Method({}, "GetVersion", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]));
    $.Method({}, "IsEqual", new JSIL.MethodSignature($.Int32, [$.Type, $.Int32]));
    $.Method({}, "Clone", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Type])]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["CD193BC0-B4BC-11d2-9833-00C04FC31D2E"]; });

/* interface Microsoft.Build.Tasks.IAssemblyEnum */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.IAssemblyEnum", false, [], function ($) {
    $.Method({}, "GetNextAssembly", new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.IAssemblyName")]), 
          $.Int32
        ]));
    $.Method({}, "Reset", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "Clone", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Type])]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["21b8916c-f28e-11d2-a473-00c04f8ef448"]; });

/* enum Microsoft.Build.Tasks.CreateAssemblyNameObjectFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.CreateAssemblyNameObjectFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    CANOF_DEFAULT: 0, 
    CANOF_PARSE_DISPLAY_NAME: 1, 
  }
);

/* enum Microsoft.Build.Tasks.AssemblyNameDisplayFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.AssemblyNameDisplayFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    VERSION: 1, 
    CULTURE: 2, 
    PUBLIC_KEY_TOKEN: 4, 
    PROCESSORARCHITECTURE: 32, 
    RETARGETABLE: 128, 
    ALL: 167, 
  }
);

/* class Microsoft.Build.Tasks.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;

































  JSIL.MakeStaticClass("Microsoft.Build.Tasks.NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "CertCloseStore", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+CertStoreClose")]), 
      {
        Module: "crypt32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertEnumCertificatesInStore", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.IntPtr]), 
      {
        Module: "crypt32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertFreeCertificateContext", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "crypt32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CloseHandle", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CompareAssemblyIdentity", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Boolean, 
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+AssemblyComparisonResult")])
        ]), 
      {
        Module: "fusion.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Boolean"
          }, null
          , 
          {
            NativeType: "Boolean"
          }, 
          {
            NativeType: "Boolean", 
            Out: true
          }, null

        ]
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "CorSigUncompressData", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateAssemblyCache", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.IAssemblyCache")]), $.UInt32]), 
      {
        Module: "fusion.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateAssemblyEnum", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.IAssemblyEnum")]), $.IntPtr, 
          $asm01.TypeRef("Microsoft.Build.Tasks.IAssemblyName"), $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyCacheFlags"), 
          $.IntPtr
        ]), 
      {
        Module: "fusion.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateAssemblyNameObject", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.IAssemblyName")]), $.String, 
          $asm01.TypeRef("Microsoft.Build.Tasks.CreateAssemblyNameObjectFlags"), $.IntPtr
        ]), 
      {
        Module: "fusion.dll", 
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateFile", 
      new JSIL.MethodSignature($.IntPtr, [
          $.String, $.UInt32, 
          $asm07.TypeRef("System.IO.FileShare"), $.IntPtr, 
          $asm07.TypeRef("System.IO.FileMode"), $.UInt32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateFileMapping", 
      new JSIL.MethodSignature($.IntPtr, [
          $.IntPtr, $.IntPtr, 
          $.UInt32, $.UInt32, 
          $.UInt32, $.String
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateHardLink", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptAcquireCertificatePrivateKey", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.UInt32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+KeySpec")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]), 
      {
        Module: "crypt32.dll", 
        Parameters: [
          {
            NativeType: "Boolean", 
            Out: true
          }
        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptDestroyKey", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptExportKey", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.IntPtr, 
          $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+BlobType"), $.UInt32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptGetUserKey", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+KeySpec"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptReleaseContext", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $.UInt32]), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetCachePath", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyCacheFlags"), $asm07.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "fusion.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetFileType", 
      new JSIL.MethodSignature($.UInt32, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetFileVersion", 
      new JSIL.MethodSignature($.UInt32, [
          $.String, $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "mscoree.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ImageNtHeader", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "dbghelp.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ImageRvaToVa", 
      new JSIL.MethodSignature($.IntPtr, [
          $.IntPtr, $.IntPtr, 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "dbghelp.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LoadRegTypeLib", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $.Int16, 
          $.Int16, $.Int32
        ]), 
      {
        Module: "oleaut32", 
        Result: {
          NativeType: "IntF"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LoadTypeLibEx", 
      new JSIL.MethodSignature($.Object, [$.String, $.Int32]), 
      {
        Module: "oleaut32", 
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null

        ]
        , Result: {
          NativeType: "IntF"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "MapViewOfFile", 
      new JSIL.MethodSignature($.IntPtr, [
          $.IntPtr, $.UInt32, 
          $.UInt32, $.UInt32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "MoveFileEx", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+MoveFileFlags")
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "PFXImportCertStore", 
      new JSIL.MethodSignature($.IntPtr, [
          $.IntPtr, $.String, 
          $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+CryptFlags")
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "QueryPathOfRegTypeLib", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $.Int16, 
          $.Int16, $.Int32
        ]), 
      {
        Module: "oleaut32", 
        Result: {
          NativeType: "BStr"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "RegisterTypeLib", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $.String
        ]), 
      {
        Module: "oleaut32", 
        Parameters: [
          {
            NativeType: "IntF"
          }, 
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }
        ]
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "TryReadMetadataString", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.IntPtr, 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "UnmapViewOfFile", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "UnregisterTypeLib", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $.Int16, 
          $.Int16, $.Int32, 
          $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.SYSKIND")
        ]), 
      {
        Module: "oleaut32", 
        EntryPoint: "UnRegisterTypeLib", 
      }
    );

    $.Field({Static:true , Public:false}, "InvalidIntPtr", $.IntPtr);

    $.Constant({Static:true , Public:false}, "TYPE_E_REGISTRYACCESS", $.Int32, -2147319780);

    $.Constant({Static:true , Public:false}, "TYPE_E_CANTLOADLIBRARY", $.Int32, -2147312566);

    $.Constant({Static:true , Public:false}, "HRESULT_E_CLASSNOTREGISTERED", $.Int32, -2147221164);

    $.Constant({Static:true , Public:false}, "ERROR_ACCESS_DENIED", $.Int32, -2147024891);

    $.Constant({Static:true , Public:false}, "ERROR_SHARING_VIOLATION", $.Int32, -2147024864);

    $.Field({Static:true , Public:false}, "GUID_TYPELIB_NAMESPACE", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "GUID_ExportedFromComPlus", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_IUnknown", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_IDispatch", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_ITypeInfo", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_IEnumVariant", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_IDispatchEx", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "IID_StdOle", $asm07.TypeRef("System.Guid"));

    $.Constant({Static:true , Public:false}, "IMAGE_FILE_MACHINE_UNKNOWN", $.UInt16, 0);

    $.Constant({Static:true , Public:false}, "IMAGE_FILE_MACHINE_INVALID", $.UInt16, 65535);

    $.Constant({Static:true , Public:false}, "IMAGE_FILE_MACHINE_AMD64", $.UInt16, 34404);

    $.Constant({Static:true , Public:false}, "IMAGE_FILE_MACHINE_ARM", $.UInt16, 448);

    $.Constant({Static:true , Public:false}, "IMAGE_FILE_MACHINE_ARMV7", $.UInt16, 452);

    $.Constant({Static:true , Public:false}, "IMAGE_FILE_MACHINE_I386", $.UInt16, 332);

    $.Constant({Static:true , Public:false}, "IMAGE_FILE_MACHINE_IA64", $.UInt16, 512);

    $.Constant({Static:true , Public:false}, "IMAGE_FILE_MACHINE_R4000", $.UInt16, 358);

    $.Constant({Static:true , Public:false}, "GENERIC_READ", $.UInt32, 2147483648);

    $.Constant({Static:true , Public:false}, "PAGE_READONLY", $.UInt32, 2);

    $.Constant({Static:true , Public:false}, "FILE_MAP_READ", $.UInt32, 4);

    $.Constant({Static:true , Public:false}, "FILE_TYPE_DISK", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "SE_ERR_ACCESSDENIED", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "IMAGE_NT_OPTIONAL_HDR32_MAGIC", $.UInt32, 267);

    $.Constant({Static:true , Public:false}, "IMAGE_NT_OPTIONAL_HDR64_MAGIC", $.UInt32, 523);

    $.Constant({Static:true , Public:false}, "IMAGE_DIRECTORY_ENTRY_COMHEADER", $.UInt32, 14);

    $.Constant({Static:true , Public:false}, "COMIMAGE_FLAGS_STRONGNAMESIGNED", $.UInt32, 8);

    $.Constant({Static:true , Public:false}, "Crypt32DLL", $.String, "crypt32.dll");

    $.Constant({Static:true , Public:false}, "Advapi32DLL", $.String, "advapi32.dll");

    $.Constant({Static:true , Public:false}, "MscoreeDLL", $.String, "mscoree.dll");


    function NativeMethods__cctor () {
      $thisType.InvalidIntPtr = new $asm07.System.IntPtr();
      $thisType.GUID_TYPELIB_NAMESPACE = new $asm07.System.Guid();
      $thisType.GUID_ExportedFromComPlus = new $asm07.System.Guid();
      $thisType.IID_IUnknown = new $asm07.System.Guid();
      $thisType.IID_IDispatch = new $asm07.System.Guid();
      $thisType.IID_ITypeInfo = new $asm07.System.Guid();
      $thisType.IID_IEnumVariant = new $asm07.System.Guid();
      $thisType.IID_IDispatchEx = new $asm07.System.Guid();
      $thisType.IID_StdOle = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      NativeMethods__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.NativeMethods+REGKIND */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.NativeMethods+REGKIND", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    REGKIND_DEFAULT: 0, 
    REGKIND_REGISTER: 1, 
    REGKIND_NONE: 2, 
    REGKIND_LOAD_TLB_AS_32BIT: 32, 
    REGKIND_LOAD_TLB_AS_64BIT: 64, 
  }
);

/* enum Microsoft.Build.Tasks.NativeMethods+CryptFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.NativeMethods+CryptFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Exportable: 1, 
    UserProtected: 2, 
    MachineKeySet: 32, 
    UserKeySet: 4096, 
  }
);

/* enum Microsoft.Build.Tasks.NativeMethods+KeySpec */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.NativeMethods+KeySpec", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    AT_KEYEXCHANGE: 1, 
    AT_SIGNATURE: 2, 
  }
);

/* enum Microsoft.Build.Tasks.NativeMethods+BlobType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.NativeMethods+BlobType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SIMPLEBLOB: 1, 
    PUBLICKEYBLOB: 6, 
    PRIVATEKEYBLOB: 7, 
    PLAINTEXTKEYBLOB: 8, 
    OPAQUEKEYBLOB: 9, 
    PUBLICKEYBLOBEX: 10, 
    SYMMETRICWRAPKEYBLOB: 11, 
  }
);

/* enum Microsoft.Build.Tasks.NativeMethods+CertStoreClose */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.NativeMethods+CertStoreClose", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    CERT_CLOSE_STORE_FORCE_FLAG: 1, 
    CERT_CLOSE_STORE_CHECK_FLAG: 2, 
  }
);

/* enum Microsoft.Build.Tasks.NativeMethods+MoveFileFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.NativeMethods+MoveFileFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    MOVEFILE_REPLACE_EXISTING: 1, 
    MOVEFILE_COPY_ALLOWED: 2, 
    MOVEFILE_DELAY_UNTIL_REBOOT: 4, 
    MOVEFILE_WRITE_THROUGH: 8, 
    MOVEFILE_CREATE_HARDLINK: 16, 
    MOVEFILE_FAIL_IF_NOT_TRACKABLE: 32, 
  }
);

/* struct Microsoft.Build.Tasks.NativeMethods+IMAGE_FILE_HEADER */ 

(function IMAGE_FILE_HEADER$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.NativeMethods+IMAGE_FILE_HEADER", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Machine", $.UInt16);

    $.Field({Static:false, Public:false}, "NumberOfSections", $.UInt16);

    $.Field({Static:false, Public:false}, "TimeDateStamp", $.UInt32);

    $.Field({Static:false, Public:false}, "PointerToSymbolTable", $.UInt32);

    $.Field({Static:false, Public:false}, "NumberOfSymbols", $.UInt32);

    $.Field({Static:false, Public:false}, "SizeOfOptionalHeader", $.UInt16);

    $.Field({Static:false, Public:false}, "Characteristics", $.UInt16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Tasks.NativeMethods+IMAGE_DATA_DIRECTORY */ 

(function IMAGE_DATA_DIRECTORY$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.NativeMethods+IMAGE_DATA_DIRECTORY", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "VirtualAddress", $.UInt32);

    $.Field({Static:false, Public:false}, "Size", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Tasks.NativeMethods+IMAGE_OPTIONAL_HEADER32 */ 

(function IMAGE_OPTIONAL_HEADER32$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.NativeMethods+IMAGE_OPTIONAL_HEADER32", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Magic", $.UInt16);

    $.Field({Static:false, Public:false}, "MajorLinkerVersion", $.Byte);

    $.Field({Static:false, Public:false}, "MinorLinkerVersion", $.Byte);

    $.Field({Static:false, Public:false}, "SizeOfCode", $.UInt32);

    $.Field({Static:false, Public:false}, "SizeOfInitializedData", $.UInt32);

    $.Field({Static:false, Public:false}, "SizeOfUninitializedData", $.UInt32);

    $.Field({Static:false, Public:false}, "AddressOfEntryPoint", $.UInt32);

    $.Field({Static:false, Public:false}, "BaseOfCode", $.UInt32);

    $.Field({Static:false, Public:false}, "BaseOfData", $.UInt32);

    $.Field({Static:false, Public:false}, "ImageBase", $.UInt32);

    $.Field({Static:false, Public:false}, "SectionAlignment", $.UInt32);

    $.Field({Static:false, Public:false}, "FileAlignment", $.UInt32);

    $.Field({Static:false, Public:false}, "MajorOperatingSystemVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "MinorOperatingSystemVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "MajorImageVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "MinorImageVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "MajorSubsystemVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "MinorSubsystemVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "Win32VersionValue", $.UInt32);

    $.Field({Static:false, Public:false}, "SizeOfImage", $.UInt32);

    $.Field({Static:false, Public:false}, "SizeOfHeaders", $.UInt32);

    $.Field({Static:false, Public:false}, "CheckSum", $.UInt32);

    $.Field({Static:false, Public:false}, "Subsystem", $.UInt16);

    $.Field({Static:false, Public:false}, "DllCharacteristics", $.UInt16);

    $.Field({Static:false, Public:false}, "SizeOfStackReserve", $.UInt32);

    $.Field({Static:false, Public:false}, "SizeOfStackCommit", $.UInt32);

    $.Field({Static:false, Public:false}, "SizeOfHeapReserve", $.UInt32);

    $.Field({Static:false, Public:false}, "SizeOfHeapCommit", $.UInt32);

    $.Field({Static:false, Public:false}, "LoaderFlags", $.UInt32);

    $.Field({Static:false, Public:false}, "NumberOfRvaAndSizes", $.UInt32);

    $.Field({Static:false, Public:false}, "DataDirectory", $jsilcore.TypeRef("System.Array", [$.UInt64]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Tasks.NativeMethods+IMAGE_OPTIONAL_HEADER64 */ 

(function IMAGE_OPTIONAL_HEADER64$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.NativeMethods+IMAGE_OPTIONAL_HEADER64", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Magic", $.UInt16);

    $.Field({Static:false, Public:false}, "MajorLinkerVersion", $.Byte);

    $.Field({Static:false, Public:false}, "MinorLinkerVersion", $.Byte);

    $.Field({Static:false, Public:false}, "SizeOfCode", $.UInt32);

    $.Field({Static:false, Public:false}, "SizeOfInitializedData", $.UInt32);

    $.Field({Static:false, Public:false}, "SizeOfUninitializedData", $.UInt32);

    $.Field({Static:false, Public:false}, "AddressOfEntryPoint", $.UInt32);

    $.Field({Static:false, Public:false}, "BaseOfCode", $.UInt32);

    $.Field({Static:false, Public:false}, "ImageBase", $.UInt64);

    $.Field({Static:false, Public:false}, "SectionAlignment", $.UInt32);

    $.Field({Static:false, Public:false}, "FileAlignment", $.UInt32);

    $.Field({Static:false, Public:false}, "MajorOperatingSystemVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "MinorOperatingSystemVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "MajorImageVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "MinorImageVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "MajorSubsystemVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "MinorSubsystemVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "Win32VersionValue", $.UInt32);

    $.Field({Static:false, Public:false}, "SizeOfImage", $.UInt32);

    $.Field({Static:false, Public:false}, "SizeOfHeaders", $.UInt32);

    $.Field({Static:false, Public:false}, "CheckSum", $.UInt32);

    $.Field({Static:false, Public:false}, "Subsystem", $.UInt16);

    $.Field({Static:false, Public:false}, "DllCharacteristics", $.UInt16);

    $.Field({Static:false, Public:false}, "SizeOfStackReserve", $.UInt64);

    $.Field({Static:false, Public:false}, "SizeOfStackCommit", $.UInt64);

    $.Field({Static:false, Public:false}, "SizeOfHeapReserve", $.UInt64);

    $.Field({Static:false, Public:false}, "SizeOfHeapCommit", $.UInt64);

    $.Field({Static:false, Public:false}, "LoaderFlags", $.UInt32);

    $.Field({Static:false, Public:false}, "NumberOfRvaAndSizes", $.UInt32);

    $.Field({Static:false, Public:false}, "DataDirectory", $jsilcore.TypeRef("System.Array", [$.UInt64]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Tasks.NativeMethods+IMAGE_NT_HEADERS32 */ 

(function IMAGE_NT_HEADERS32$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.NativeMethods+IMAGE_NT_HEADERS32", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "signature", $.UInt32);

    $.Field({Static:false, Public:false}, "fileHeader", $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+IMAGE_FILE_HEADER"));

    $.Field({Static:false, Public:false}, "optionalHeader", $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+IMAGE_OPTIONAL_HEADER32"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Tasks.NativeMethods+IMAGE_NT_HEADERS64 */ 

(function IMAGE_NT_HEADERS64$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.NativeMethods+IMAGE_NT_HEADERS64", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "signature", $.UInt32);

    $.Field({Static:false, Public:false}, "fileHeader", $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+IMAGE_FILE_HEADER"));

    $.Field({Static:false, Public:false}, "optionalHeader", $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+IMAGE_OPTIONAL_HEADER64"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Tasks.NativeMethods+IMAGE_COR20_HEADER */ 

(function IMAGE_COR20_HEADER$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.NativeMethods+IMAGE_COR20_HEADER", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cb", $.UInt32);

    $.Field({Static:false, Public:false}, "MajorRuntimeVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "MinorRuntimeVersion", $.UInt16);

    $.Field({Static:false, Public:false}, "MetaData", $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+IMAGE_DATA_DIRECTORY"));

    $.Field({Static:false, Public:false}, "Flags", $.UInt32);

    $.Field({Static:false, Public:false}, "EntryPointTokenOrEntryPointRVA", $.UInt32);

    $.Field({Static:false, Public:false}, "Resources", $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+IMAGE_DATA_DIRECTORY"));

    $.Field({Static:false, Public:false}, "StrongNameSignature", $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+IMAGE_DATA_DIRECTORY"));

    $.Field({Static:false, Public:false}, "CodeManagerTable", $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+IMAGE_DATA_DIRECTORY"));

    $.Field({Static:false, Public:false}, "VTableFixups", $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+IMAGE_DATA_DIRECTORY"));

    $.Field({Static:false, Public:false}, "ExportAddressTableJumps", $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+IMAGE_DATA_DIRECTORY"));

    $.Field({Static:false, Public:false}, "ManagedNativeHeader", $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+IMAGE_DATA_DIRECTORY"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Tasks.NativeMethods+CRYPTOAPI_BLOB */ 

(function CRYPTOAPI_BLOB$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Tasks.NativeMethods+CRYPTOAPI_BLOB", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cbData", $.UInt32);

    $.Field({Static:false, Public:false}, "pbData", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.NativeMethods+AssemblyComparisonResult */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.NativeMethods+AssemblyComparisonResult", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ACR_Unknown: 0, 
    ACR_EquivalentFullMatch: 1, 
    ACR_EquivalentWeakNamed: 2, 
    ACR_EquivalentFXUnified: 3, 
    ACR_EquivalentUnified: 4, 
    ACR_NonEquivalentVersion: 5, 
    ACR_NonEquivalent: 6, 
    ACR_EquivalentPartialMatch: 7, 
    ACR_EquivalentPartialWeakNamed: 8, 
    ACR_EquivalentPartialUnified: 9, 
    ACR_EquivalentPartialFXUnified: 10, 
    ACR_NonEquivalentPartialVersion: 11, 
  }
);

/* class Microsoft.Build.Tasks.NativeMethods+AssemblyCacheEnum */ 

(function AssemblyCacheEnum$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.NativeMethods+AssemblyCacheEnum", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm01.Microsoft.Build.Tasks.NativeMethods_AssemblyCacheEnum_$lGetEnumerator$gd__4.__Type__]; });

    $.ExternalMethod({Static:true , Public:false}, "GetFullName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("Microsoft.Build.Tasks.IAssemblyName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeEnum", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "assemblyEnum", $asm01.TypeRef("Microsoft.Build.Tasks.IAssemblyEnum"));

    $.Field({Static:false, Public:false}, "done", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.NativeMethods+AssemblyCacheEnum+<GetEnumerator>d__4 */ 

(function $lGetEnumerator$gd__4$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.NativeMethods+AssemblyCacheEnum+<GetEnumerator>d__4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.Build.Shared.AssemblyNameExtension$g.get_Current", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm01.TypeRef("Microsoft.Build.Tasks.NativeMethods+AssemblyCacheEnum"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lMicrosoft.Build.Shared.AssemblyNameExtension$g.Current", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.ParseState */ 

(function ParseState$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ParseState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseConditionalDirective", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ComposeQualifiedClassName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InsideConditionalDirective", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResolvingClass", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResolvingNamespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenConditionalDirective", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PopNamespacePart", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "PushNamespacePart", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResolvingClass", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResolvingNamespace", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "resolvingNamespace", $.Boolean);

    $.Field({Static:false, Public:false}, "resolvingClass", $.Boolean);

    $.Field({Static:false, Public:false}, "openConditionalDirectives", $.Int32);

    $.Field({Static:false, Public:false}, "namespaceName", $.String);

    $.Field({Static:false, Public:false}, "namespaceStack", $asm07.TypeRef("System.Collections.Stack"));

    $.Property({Static:false, Public:false}, "ResolvingNamespace", $.Boolean);

    $.Property({Static:false, Public:false}, "ResolvingClass", $.Boolean);

    $.Property({Static:false, Public:false}, "InsideConditionalDirective", $.Boolean);

    $.Property({Static:false, Public:false}, "Namespace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.PiaReference */ 

(function PiaReference$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ComReference"), 
      Name: "Microsoft.Build.Tasks.PiaReference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.Boolean, 
          $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindExistingWrapper", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo")]), $asm07.TypeRef("System.DateTime")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.RedistList */ 

(function RedistList$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.RedistList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyTableInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAssemblyNameFromSimpleName", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyEntry")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FrameworkAssemblyEntryInRedist", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBlackList", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Hashtable"), [
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyTableInfo")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Exception")]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorFileNames", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Errors", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Exception")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFrameworkList20", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFrameworkList30", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFrameworkList35", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFrameworkListFromReferenceAssembliesPath", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("Microsoft.Build.Utilities.TargetDotNetFrameworkVersion")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetRedistList", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyTableInfo")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetRedistListFromPath", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetRedistListPathsFromDisk", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSimpleName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnifiedAssemblyEntry", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.AssemblyEntry"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUnifiedAssemblyName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsFrameworkAssembly", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsPrerequisiteAssembly", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRedistRoot", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$.Boolean]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseFileListSection", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyTableInfo"), $.String, 
          $.String, $asm2F.TypeRef("System.Xml.XmlTextReader"), 
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyEntry")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyRemapping")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseRemapSection", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyTableInfo"), $.String, 
          $.String, $asm2F.TypeRef("System.Xml.XmlTextReader"), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyRemapping")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadFile", 
      new JSIL.MethodSignature($.String, [
          $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyTableInfo"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyEntry")]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Exception")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyRemapping")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadFileListEntry", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.AssemblyEntry"), [
          $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyTableInfo"), $.String, 
          $.String, $asm2F.TypeRef("System.Xml.XmlTextReader"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RedistName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemapAssembly", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "cachedRedistList", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "redistListPathCache", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $jsilcore.TypeRef("System.Array", [$.String])]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "locker", $.Object);

    $.Field({Static:false, Public:false}, "assemblyNameInRedist", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Shared.NGen`1", [$.Boolean])]));

    $.Field({Static:false, Public:false}, "assemblyNameToUnifiedAssemblyName", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyEntry")]));

    $.Field({Static:false, Public:false}, "remappingCache", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]));

    $.Field({Static:false, Public:false}, "cachedBlackList", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm07.TypeRef("System.Collections.Hashtable")]));

    $.Field({Static:false, Public:false}, "errors", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Exception")]));

    $.Field({Static:false, Public:false}, "errorFilenames", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "assemblyList", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyEntry")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "simpleNameMap", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyDictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "remapEntries", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyRemapping")]));

    $.Constant({Static:true , Public:false}, "MatchPattern", $.String, "*.xml");

    $.Constant({Static:true , Public:false}, "RedistListFolder", $.String, "RedistList");

    $.Field({Static:true , Public:false, ReadOnly:true }, "sortByVersionDescending", $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyEntry")]));

    $.Property({Static:false, Public:false}, "Errors", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Exception")]));

    $.Property({Static:false, Public:false}, "ErrorFileNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.RedistList+SortByVersionDescending */ 

(function SortByVersionDescending$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.RedistList+SortByVersionDescending", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyEntry"), $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyEntry")])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer"), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyEntry")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.RedistList+<>c__DisplayClass40_0 */ 

(function $l$gc__DisplayClass40_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.RedistList+<>c__DisplayClass40_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lParseRemapSection$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyRemapping")])
    );

    $.Field({Static:false, Public:true }, "pair", $asm01.TypeRef("Microsoft.Build.Tasks.AssemblyRemapping"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.AssemblyTableInfo */ 

(function AssemblyTableInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.AssemblyTableInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Descriptor", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FrameworkDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "path", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "frameworkDirectory", $.String);

    $.Field({Static:false, Public:false}, "descriptor", $.String);

    $.Property({Static:false, Public:false}, "Path", $.String);

    $.Property({Static:false, Public:false}, "FrameworkDirectory", $.String);

    $.Property({Static:false, Public:false}, "Descriptor", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.SubsetListFinder */ 

(function SubsetListFinder$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.SubsetListFinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SubsetListFolder", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSubsetListPathsFromDisk", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.Field({Static:true , Public:false}, "subsetListPathCache", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $jsilcore.TypeRef("System.Array", [$.String])]));

    $.Field({Static:true , Public:false}, "subsetListPathCacheLock", $.Object);

    $.Constant({Static:true , Public:false}, "subsetListFolder", $.String, "SubsetList");

    $.Field({Static:false, Public:false}, "subsetToSearchFor", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:true , Public:true }, "SubsetListFolder", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.AssemblyEntry */ 

(function AssemblyEntry$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.AssemblyEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $asm07.TypeRef("System.Nullable`1", [$.Boolean]), 
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyNameExtension", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FrameworkDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InGAC", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsRedistRoot", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RedistName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Retargetable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SimpleName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "fullName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "inGAC", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "isRedistRoot", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "redistName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "simpleName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "frameworkDirectory", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "retargetable", $.Boolean);

    $.Field({Static:false, Public:false}, "assemblyName", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Property({Static:false, Public:true }, "FullName", $.String);

    $.Property({Static:false, Public:true }, "InGAC", $.Boolean);

    $.Property({Static:false, Public:true }, "IsRedistRoot", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:true }, "RedistName", $.String);

    $.Property({Static:false, Public:true }, "SimpleName", $.String);

    $.Property({Static:false, Public:true }, "FrameworkDirectory", $.String);

    $.Property({Static:false, Public:true }, "Retargetable", $.Boolean);

    $.Property({Static:false, Public:true }, "AssemblyNameExtension", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.RegisterAssembly */ 

(function RegisterAssembly$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.AppDomainIsolatedTaskExtension"), 
      Name: "Microsoft.Build.Tasks.RegisterAssembly", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportTypeLib", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.Assembly"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyListFile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreateCodeBase", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeLibFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Register", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReportEvent", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.InteropServices.ExporterEventKind"), $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveRef", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Assemblies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyListFile", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CreateCodeBase", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeLibFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Field({Static:false, Public:false}, "assemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "typeLibFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "createCodeBase", $.Boolean);

    $.Field({Static:false, Public:false}, "assemblyListFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "typeLibExportFailed", $.Boolean);

    $.Property({Static:false, Public:true }, "Assemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "TypeLibFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "CreateCodeBase", $.Boolean);

    $.Property({Static:false, Public:true }, "AssemblyListFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Runtime.InteropServices.ITypeLibExporterNotifySink")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.RemoveDir */ 

(function RemoveDir$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.RemoveDir", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Directories", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemovedDirectories", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDirectory", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveReadOnlyAttributeRecursively", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.IO.DirectoryInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Directories", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RemovedDirectories", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Field({Static:false, Public:false}, "directories", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "removedDirectories", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Directories", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "RemovedDirectories", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResGenDependencies */ 

(function ResGenDependencies$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.StateFileBase"), 
      Name: "Microsoft.Build.Tasks.ResGenDependencies", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddResxFile", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.ResGenDependencies+ResXFile"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeserializeCache", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Boolean, 
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseLinkedFileDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDirty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResXFileInfo", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.ResGenDependencies+ResXFile"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeCache", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseLinkedFileDirectory", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_UseSourcePath", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetPortableLibraryInfo", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.ResGenDependencies+PortableLibraryFile"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatePortableLibrary", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.ResGenDependencies+PortableLibraryFile"))
    );

    $.Field({Static:false, Public:false}, "resXFiles", $asm01.TypeRef("Microsoft.Build.Tasks.Dependencies"));

    $.Field({Static:false, Public:false}, "portableLibraries", $asm01.TypeRef("Microsoft.Build.Tasks.Dependencies"));

    $.Field({Static:false, Public:false}, "isDirty", $.Boolean);

    $.Field({Static:false, Public:false}, "baseLinkedFileDirectory", $.String);

    $.Property({Static:false, Public:false}, "BaseLinkedFileDirectory", $.String);

    $.Property({Static:false, Public:false}, "UseSourcePath", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDirty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResGenDependencies+ResXFile */ 

(function ResXFile$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.DependencyFile"), 
      Name: "Microsoft.Build.Tasks.ResGenDependencies+ResXFile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinkedFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLinkedFiles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "linkedFiles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "LinkedFiles", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResGenDependencies+PortableLibraryFile */ 

(function PortableLibraryFile$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.DependencyFile"), 
      Name: "Microsoft.Build.Tasks.ResGenDependencies+PortableLibraryFile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AllOutputFilesAreUpToDate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AssemblySimpleName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NeutralResourceLanguage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OutputFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AssemblySimpleName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NeutralResourceLanguage", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_OutputFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.Field({Static:false, Public:false}, "outputFiles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "neutralResourceLanguage", $.String);

    $.Field({Static:false, Public:false}, "assemblySimpleName", $.String);

    $.Property({Static:false, Public:false}, "OutputFiles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "NeutralResourceLanguage", $.String);

    $.Property({Static:false, Public:false}, "AssemblySimpleName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveComReferenceCache */ 

(function ResolveComReferenceCache$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.StateFileBase"), 
      Name: "Microsoft.Build.Tasks.ResolveComReferenceCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Dirty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToolPathsMatchCachePaths", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "componentTimestamps", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "tlbImpLocation", $.String);

    $.Field({Static:false, Public:false}, "axImpLocation", $.String);

    $.Field({Static:false, Public:false}, "dirty", $.Boolean);

    $.Property({Static:false, Public:false}, "Dirty", $.Boolean);

    $.Property({Static:false, Public:false}, "Item", $asm07.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Build.Tasks.ResolveKeySource */ 

(function ResolveKeySource$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.ResolveKeySource", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AutoClosePasswordPromptShow", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AutoClosePasswordPromptTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateThumbprint", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResolvedKeyContainer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResolvedKeyFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResolvedThumbprint", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ShowImportDialogDespitePreviousFailures", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SuppressAutoClosePasswordPrompt", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "HashFromBlob", 
      new JSIL.MethodSignature($.UInt64, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveAssemblyKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveManifestKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AutoClosePasswordPromptShow", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AutoClosePasswordPromptTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateThumbprint", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResolvedKeyContainer", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResolvedKeyFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResolvedThumbprint", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ShowImportDialogDespitePreviousFailures", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SuppressAutoClosePasswordPrompt", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "keyFile", $.String);

    $.Field({Static:false, Public:false}, "certificateThumbprint", $.String);

    $.Field({Static:false, Public:false}, "certificateFile", $.String);

    $.Field({Static:false, Public:false}, "resolvedKeyContainer", $.String);

    $.Field({Static:false, Public:false}, "resolvedKeyFile", $.String);

    $.Field({Static:false, Public:false}, "resolvedThumbprint", $.String);

    $.Constant({Static:true , Public:false}, "pfxFileExtension", $.String, ".pfx");

    $.Constant({Static:true , Public:false}, "pfxFileContainerPrefix", $.String, "VS_KEY_");

    $.Field({Static:false, Public:false}, "suppressAutoClosePasswordPrompt", $.Boolean);

    $.Field({Static:false, Public:false}, "showImportDialogDespitePreviousFailures", $.Boolean);

    $.Field({Static:false, Public:false}, "autoClosePasswordPromptTimeout", $.Int32);

    $.Field({Static:false, Public:false}, "autoClosePasswordPromptShow", $.Int32);

    $.Field({Static:true , Public:false}, "pfxKeysToIgnore", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "KeyFile", $.String);

    $.Property({Static:false, Public:true }, "CertificateThumbprint", $.String);

    $.Property({Static:false, Public:true }, "CertificateFile", $.String);

    $.Property({Static:false, Public:true }, "SuppressAutoClosePasswordPrompt", $.Boolean);

    $.Property({Static:false, Public:true }, "ShowImportDialogDespitePreviousFailures", $.Boolean);

    $.Property({Static:false, Public:true }, "AutoClosePasswordPromptTimeout", $.Int32);

    $.Property({Static:false, Public:true }, "AutoClosePasswordPromptShow", $.Int32);

    $.Property({Static:false, Public:true }, "ResolvedThumbprint", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ResolvedKeyContainer", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ResolvedKeyFile", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveManifestFiles */ 

(function ResolveManifestFiles$Members () {
  var $, $thisType;


















































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.ResolveManifestFiles", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareFrameworkVersions", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertFrameworkVersionToString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAssemblyItem", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), [
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFileItem", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), [
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String, 
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePrerequisiteItem", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeploymentManifestEntryPoint", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EntryPoint", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExtraFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Files", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ManagedAssemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NativeAssemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputAssemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputDeploymentManifestEntryPoint", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputEntryPoint", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublishFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SatelliteAssemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningManifests", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetCulture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetItemCopyLocal", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetItemCulture", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Globalization.CultureInfo"), [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetItemTargetPath", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutputAssemblies", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutputAssembliesAndSatellites", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishInfo")]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutputEntryPoint", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutputFiles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutputSatellites", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPublishInfo", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishInfo")])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishInfo")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishInfo")])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishInfo")])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFiltered", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DeploymentManifestEntryPoint", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EntryPoint", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExtraFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Files", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ManagedAssemblies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NativeAssemblies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputAssemblies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputDeploymentManifestEntryPoint", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputEntryPoint", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PublishFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SatelliteAssemblies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SigningManifests", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetCulture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToPublishState", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishState"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateInputs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "deploymentManifestEntryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "entryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "extraFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "managedAssemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "nativeAssemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "outputAssemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "outputDeploymentManifestEntryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "outputEntryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "outputFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "publishFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "satelliteAssemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "specifiedTargetCulture", $.String);

    $.Field({Static:false, Public:false}, "targetCulture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:false, Public:false}, "includeAllSatellites", $.Boolean);

    $.Field({Static:false, Public:false}, "signingManifests", $.Boolean);

    $.Field({Static:false, Public:false}, "targetFrameworkVersion", $.String);

    $.Field({Static:false, Public:false}, "canPublish", $.Boolean);

    $.Property({Static:false, Public:true }, "DeploymentManifestEntryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "EntryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "ExtraFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "ManagedAssemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "NativeAssemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "OutputAssemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "OutputDeploymentManifestEntryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "OutputEntryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "OutputFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "PublishFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "SatelliteAssemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "TargetCulture", $.String);

    $.Property({Static:false, Public:true }, "SigningManifests", $.Boolean);

    $.Property({Static:false, Public:true }, "TargetFrameworkVersion", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveManifestFiles+PublishInfo */ 

(function PublishInfo$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ResolveManifestFiles+PublishInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "key", $.String);

    $.Field({Static:false, Public:true , ReadOnly:true }, "group", $.String);

    $.Field({Static:false, Public:true , ReadOnly:true }, "targetPath", $.String);

    $.Field({Static:false, Public:true , ReadOnly:true }, "includeHash", $.String);

    $.Field({Static:false, Public:true }, "state", $asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishState"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveManifestFiles+MapEntry */ 

(function MapEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ResolveManifestFiles+MapEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.Boolean])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "item", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "includedByDefault", $.Boolean);

    $.Field({Static:false, Public:true }, "publishInfo", $asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveManifestFiles+AssemblyMap */ 

(function AssemblyMap$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ResolveManifestFiles+AssemblyMap", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+MapEntry"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "dictionary", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+MapEntry")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "simpleNameDictionary", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+MapEntry")]));

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+MapEntry"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Build.Tasks.ResolveManifestFiles+FileMap */ 

(function FileMap$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ResolveManifestFiles+FileMap", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+MapEntry"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "dictionary", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+MapEntry")]));

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+MapEntry"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum Microsoft.Build.Tasks.ResolveManifestFiles+PublishState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.ResolveManifestFiles+PublishState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Auto: 0, 
    Include: 1, 
    Exclude: 2, 
    DataFile: 3, 
    Prerequisite: 4, 
  }
);

/* class Microsoft.Build.Tasks.ResolveManifestFiles+PublishFlags */ 

(function PublishFlags$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ResolveManifestFiles+PublishFlags", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDataFile", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPrerequisite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPublished", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAssemblyFlags", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishState"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFileFlags", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishState"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSatelliteFlags", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("Microsoft.Build.Tasks.ResolveManifestFiles+PublishState"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $asm07.TypeRef("System.Globalization.CultureInfo"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSatelliteIncludedByDefault", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Globalization.CultureInfo"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "isDataFile", $.Boolean);

    $.Field({Static:false, Public:false}, "isPrerequisite", $.Boolean);

    $.Field({Static:false, Public:false}, "isPublished", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDataFile", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPrerequisite", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPublished", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveNativeReference */ 

(function ResolveNativeReference$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.ResolveNativeReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExtractFromManifest", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String, 
          $asm07.TypeRef("System.Collections.Hashtable"), $asm07.TypeRef("System.Collections.Hashtable"), 
          $asm07.TypeRef("System.Collections.Hashtable"), $asm07.TypeRef("System.Collections.Hashtable"), 
          $asm07.TypeRef("System.Collections.Hashtable"), $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AdditionalSearchPaths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContainedComComponents", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContainedLooseEtcFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContainedLooseTlbFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContainedPrerequisiteAssemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContainedTypeLibraries", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContainingReferenceFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NativeReferences", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AdditionalSearchPaths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContainedComComponents", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContainedLooseEtcFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContainedLooseTlbFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContainedPrerequisiteAssemblies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContainedTypeLibraries", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContainingReferenceFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NativeReferences", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Field({Static:false, Public:false}, "nativeReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "containingReferenceFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "containedPrerequisiteAssemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "containedComComponents", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "containedTypeLibraries", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "containedLooseTlbFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "containedLooseEtcFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "additionalSearchPaths", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "NativeReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "AdditionalSearchPaths", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "ContainingReferenceFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ContainedPrerequisiteAssemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ContainedComComponents", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ContainedTypeLibraries", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ContainedLooseTlbFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "ContainedLooseEtcFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveNativeReference+ItemSpecComparerClass */ 

(function ItemSpecComparerClass$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ResolveNativeReference+ItemSpecComparerClass", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IComparer.Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IComparer"), "Compare");

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput */ 

(function ResolveNonMSBuildProjectOutput$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput_GetAssemblyNameDelegate)) ();
  };




  function ResolveNonMSBuildProjectOutput_get_GetAssemblyName () {
    return this.ResolveNonMSBuildProjectOutput$GetAssemblyName$value;
  }; 





  function ResolveNonMSBuildProjectOutput_set_GetAssemblyName (value) {
    this.ResolveNonMSBuildProjectOutput$GetAssemblyName$value = value;
  }; 




  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ResolveProjectBase"), 
      Name: "Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:false}, "get_GetAssemblyName", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput+GetAssemblyNameDelegate")), 
      ResolveNonMSBuildProjectOutput_get_GetAssemblyName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_PreresolvedProjectOutputs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResolvedOutputPaths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnresolvedProjectReferences", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveProject", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.Method({Static:false, Public:false}, "set_GetAssemblyName", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput+GetAssemblyNameDelegate")), 
      ResolveNonMSBuildProjectOutput_set_GetAssemblyName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_PreresolvedProjectOutputs", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResolvedOutputPaths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnresolvedProjectReferences", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Field({Static:false, Public:false}, "preresolvedProjectOutputs", $.String);

    $.Field({Static:false, Public:false}, "resolvedOutputPaths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "unresolvedProjectReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "ResolveNonMSBuildProjectOutput$GetAssemblyName$value", $asm01.TypeRef("Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput+GetAssemblyNameDelegate"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "PreresolvedProjectOutputs", $.String);

    $.Property({Static:false, Public:true }, "ResolvedOutputPaths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "UnresolvedProjectReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:false}, "GetAssemblyName", $asm01.TypeRef("Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput+GetAssemblyNameDelegate"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput+GetAssemblyNameDelegate */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput+GetAssemblyNameDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.AssemblyName"), [$asm07.TypeRef("System.String")]));

/* enum Microsoft.Build.Tasks.MultipleVersionSupport */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.MultipleVersionSupport", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Allow: 0, 
    Warning: 1, 
    Error: 2, 
  }
);

/* class Microsoft.Build.Tasks.ResolveSDKReference */ 

(function ResolveSDKReference$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Build.Framework.ITaskItem))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };







  function ResolveSDKReference_get_References () {
    return this.ResolveSDKReference$References$value;
  }; 

  function ResolveSDKReference_get_ResolvedSDKReferences () {
    return this.ResolveSDKReference$ResolvedSDKReferences$value;
  }; 


  function ResolveSDKReference_get_TargetedSDKArchitecture () {
    return this.ResolveSDKReference$TargetedSDKArchitecture$value;
  }; 

  function ResolveSDKReference_get_TargetedSDKConfiguration () {
    return this.ResolveSDKReference$TargetedSDKConfiguration$value;
  }; 










  function ResolveSDKReference_set_References (value) {
    this.ResolveSDKReference$References$value = value;
  }; 

  function ResolveSDKReference_set_ResolvedSDKReferences (value) {
    this.ResolveSDKReference$ResolvedSDKReferences$value = value;
  }; 


  function ResolveSDKReference_set_TargetedSDKArchitecture (value) {
    this.ResolveSDKReference$TargetedSDKArchitecture$value = value;
  }; 

  function ResolveSDKReference_set_TargetedSDKConfiguration (value) {
    this.ResolveSDKReference$TargetedSDKConfiguration$value = value;
  }; 


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.ResolveSDKReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InstalledSDKs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogResolutionErrorsAsWarnings", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefer32Bit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_References", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])), 
      ResolveSDKReference_get_References
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ResolvedSDKReferences", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])), 
      ResolveSDKReference_get_ResolvedSDKReferences
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SDKReferences", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Method({Static:false, Public:true }, "get_TargetedSDKArchitecture", 
      JSIL.MethodSignature.Return($.String), 
      ResolveSDKReference_get_TargetedSDKArchitecture
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TargetedSDKConfiguration", 
      JSIL.MethodSignature.Return($.String), 
      ResolveSDKReference_get_TargetedSDKConfiguration
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetUnresolvedDependentSDKs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm10.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveSDKReference+SDKReference")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogErrorOrWarning", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Tuple`2", [$.String, $jsilcore.TypeRef("System.Array", [$.Object])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "LogResolution", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.ResolveSDKReference+SDKReference"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseDependsOnSDK", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSDKReference", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.ResolveSDKReference+SDKReference"), [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseSDKReference", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InstalledSDKs", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LogResolutionErrorsAsWarnings", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefer32Bit", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:true }, "set_References", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])), 
      ResolveSDKReference_set_References
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ResolvedSDKReferences", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])), 
      ResolveSDKReference_set_ResolvedSDKReferences
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_SDKReferences", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.Method({Static:false, Public:true }, "set_TargetedSDKArchitecture", 
      JSIL.MethodSignature.Action($.String), 
      ResolveSDKReference_set_TargetedSDKArchitecture
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TargetedSDKConfiguration", 
      JSIL.MethodSignature.Action($.String), 
      ResolveSDKReference_set_TargetedSDKConfiguration
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "VerifySDKDependsOn", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveSDKReference+SDKReference")])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "sdkReferenceFormat", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SDKsimpleNameGroup", $.String, "SDKSIMPLENAME");

    $.Field({Static:true , Public:false, ReadOnly:true }, "SDKVersionGroup", $.String, "SDKVERSION");

    $.Constant({Static:true , Public:false}, "CommaSpaceDelimiter", $.String, ", ");

    $.Field({Static:true , Public:false, ReadOnly:true }, "AppxSplitChar", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Constant({Static:true , Public:false}, "SDKName", $.String, "SDKName");

    $.Field({Static:true , Public:false, ReadOnly:true }, "SemicolonSplitChar", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "sdkReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "installedSDKs", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "logResolutionErrorsAsWarnings", $.Boolean);

    $.Field({Static:false, Public:false}, "prefer32Bit", $.Boolean);

    $.Field({Static:false, Public:false}, "ResolveSDKReference$References$value", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ResolveSDKReference$TargetedSDKConfiguration$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ResolveSDKReference$TargetedSDKArchitecture$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ResolveSDKReference$ResolvedSDKReferences$value", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "SDKReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "InstalledSDKs", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "References", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "TargetedSDKConfiguration", $.String);

    $.Property({Static:false, Public:true }, "TargetedSDKArchitecture", $.String);

    $.Property({Static:false, Public:true }, "LogResolutionErrorsAsWarnings", $.Boolean);

    $.Property({Static:false, Public:true }, "Prefer32Bit", $.Boolean);

    $.Property({Static:false, Public:true }, "ResolvedSDKReferences", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveSDKReference+SDKReference */ 

(function SDKReference$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.String, $asm07.System.String))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Build.Framework.ITaskItem)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm07.System.Tuple$b2.Of($asm07.System.String, System.Array.Of($asm07.System.Object))))) ();
  };









  function SDKReference_get_AppxLocation () {
    return this.SDKReference$AppxLocation$value;
  }; 

  function SDKReference_get_AppxLocationsFromManifest () {
    return this.SDKReference$AppxLocationsFromManifest$value;
  }; 

  function SDKReference_get_CopyRedistToSubDirectory () {
    return this.SDKReference$CopyRedistToSubDirectory$value;
  }; 

  function SDKReference_get_DependsOnSDK () {
    return this.SDKReference$DependsOnSDK$value;
  }; 

  function SDKReference_get_DisplayName () {
    return this.SDKReference$DisplayName$value;
  }; 

  function SDKReference_get_FrameworkIdentitiesFromManifest () {
    return this.SDKReference$FrameworkIdentitiesFromManifest$value;
  }; 

  function SDKReference_get_FrameworkIdentity () {
    return this.SDKReference$FrameworkIdentity$value;
  }; 

  function SDKReference_get_PlatformIdentity () {
    return this.SDKReference$PlatformIdentity$value;
  }; 

  function SDKReference_get_ProductFamilyName () {
    return this.SDKReference$ProductFamilyName$value;
  }; 

  function SDKReference_get_ReferenceItem () {
    return this.SDKReference$ReferenceItem$value;
  }; 

  function SDKReference_get_ResolutionErrorsOrWarnings () {
    return this.SDKReference$ResolutionErrorsOrWarnings$value;
  }; 


  function SDKReference_get_ResolvedItem () {
    return this.SDKReference$ResolvedItem$value;
  }; 

  function SDKReference_get_ResolvedPath () {
    return this.SDKReference$ResolvedPath$value;
  }; 

  function SDKReference_get_SDKName () {
    return this.SDKReference$SDKName$value;
  }; 

  function SDKReference_get_SDKType () {
    return this.SDKReference$SDKType$value;
  }; 

  function SDKReference_get_SimpleName () {
    return this.SDKReference$SimpleName$value;
  }; 

  function SDKReference_get_StatusMessages () {
    return this.SDKReference$StatusMessages$value;
  }; 

  function SDKReference_get_SupportedArchitectures () {
    return this.SDKReference$SupportedArchitectures$value;
  }; 

  function SDKReference_get_SupportPrefer32Bit () {
    return this.SDKReference$SupportPrefer32Bit$value;
  }; 


  function SDKReference_get_Version () {
    return this.SDKReference$Version$value;
  }; 






  function SDKReference_set_AppxLocation (value) {
    this.SDKReference$AppxLocation$value = value;
  }; 

  function SDKReference_set_AppxLocationsFromManifest (value) {
    this.SDKReference$AppxLocationsFromManifest$value = value;
  }; 

  function SDKReference_set_CopyRedistToSubDirectory (value) {
    this.SDKReference$CopyRedistToSubDirectory$value = value;
  }; 

  function SDKReference_set_DependsOnSDK (value) {
    this.SDKReference$DependsOnSDK$value = value;
  }; 

  function SDKReference_set_DisplayName (value) {
    this.SDKReference$DisplayName$value = value;
  }; 

  function SDKReference_set_FrameworkIdentitiesFromManifest (value) {
    this.SDKReference$FrameworkIdentitiesFromManifest$value = value;
  }; 

  function SDKReference_set_FrameworkIdentity (value) {
    this.SDKReference$FrameworkIdentity$value = value;
  }; 

  function SDKReference_set_PlatformIdentity (value) {
    this.SDKReference$PlatformIdentity$value = value;
  }; 

  function SDKReference_set_ProductFamilyName (value) {
    this.SDKReference$ProductFamilyName$value = value;
  }; 

  function SDKReference_set_ReferenceItem (value) {
    this.SDKReference$ReferenceItem$value = value;
  }; 

  function SDKReference_set_ResolutionErrorsOrWarnings (value) {
    this.SDKReference$ResolutionErrorsOrWarnings$value = value;
  }; 

  function SDKReference_set_ResolvedItem (value) {
    this.SDKReference$ResolvedItem$value = value;
  }; 

  function SDKReference_set_ResolvedPath (value) {
    this.SDKReference$ResolvedPath$value = value;
  }; 

  function SDKReference_set_SDKName (value) {
    this.SDKReference$SDKName$value = value;
  }; 

  function SDKReference_set_SDKType (value) {
    this.SDKReference$SDKType$value = value;
  }; 

  function SDKReference_set_SimpleName (value) {
    this.SDKReference$SimpleName$value = value;
  }; 

  function SDKReference_set_StatusMessages (value) {
    this.SDKReference$StatusMessages$value = value;
  }; 

  function SDKReference_set_SupportedArchitectures (value) {
    this.SDKReference$SupportedArchitectures$value = value;
  }; 

  function SDKReference_set_SupportPrefer32Bit (value) {
    this.SDKReference$SupportPrefer32Bit$value = value;
  }; 


  function SDKReference_set_Version (value) {
    this.SDKReference$Version$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ResolveSDKReference+SDKReference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddResolutionErrorOrWarning", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "AddStatusMessage", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "CreateResolvedReferenceItem", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindFrameworkIdentity", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Method({Static:false, Public:false}, "get_AppxLocation", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_AppxLocation
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_AppxLocationsFromManifest", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])), 
      SDKReference_get_AppxLocationsFromManifest
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_CopyRedistToSubDirectory", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_CopyRedistToSubDirectory
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DependsOnSDK", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_DependsOnSDK
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_DisplayName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_FrameworkIdentitiesFromManifest", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])), 
      SDKReference_get_FrameworkIdentitiesFromManifest
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_FrameworkIdentity", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_FrameworkIdentity
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_PlatformIdentity", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_PlatformIdentity
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ProductFamilyName", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_ProductFamilyName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ReferenceItem", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      SDKReference_get_ReferenceItem
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ResolutionErrorsOrWarnings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])])), 
      SDKReference_get_ResolutionErrorsOrWarnings
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Resolved", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_ResolvedItem", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      SDKReference_get_ResolvedItem
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ResolvedPath", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_ResolvedPath
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SDKName", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_SDKName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SDKType", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_SDKType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SimpleName", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_SimpleName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_StatusMessages", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])])), 
      SDKReference_get_StatusMessages
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SupportedArchitectures", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_SupportedArchitectures
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SupportPrefer32Bit", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_SupportPrefer32Bit
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SupportsMultipleVersions", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.MultipleVersionSupport"))
    );

    $.Method({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String), 
      SDKReference_get_Version
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetItemMetadataTrimmed", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSDKManifestAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSupportMultipleVersions", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Resolve", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]), $.String, 
          $.String, $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]), 
          $.Boolean, $.Boolean
        ])
    );

    $.Method({Static:false, Public:false}, "set_AppxLocation", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_AppxLocation
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_AppxLocationsFromManifest", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])), 
      SDKReference_set_AppxLocationsFromManifest
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CopyRedistToSubDirectory", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_CopyRedistToSubDirectory
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DependsOnSDK", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_DependsOnSDK
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_DisplayName", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_DisplayName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_FrameworkIdentitiesFromManifest", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])), 
      SDKReference_set_FrameworkIdentitiesFromManifest
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_FrameworkIdentity", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_FrameworkIdentity
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_PlatformIdentity", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_PlatformIdentity
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ProductFamilyName", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_ProductFamilyName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ReferenceItem", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      SDKReference_set_ReferenceItem
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ResolutionErrorsOrWarnings", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])])), 
      SDKReference_set_ResolutionErrorsOrWarnings
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ResolvedItem", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      SDKReference_set_ResolvedItem
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ResolvedPath", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_ResolvedPath
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_SDKName", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_SDKName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SDKType", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_SDKType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_SimpleName", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_SimpleName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_StatusMessages", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])])), 
      SDKReference_set_StatusMessages
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SupportedArchitectures", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_SupportedArchitectures
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SupportPrefer32Bit", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_SupportPrefer32Bit
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_SupportsMultipleVersions", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.MultipleVersionSupport"))
    );

    $.Method({Static:false, Public:false}, "set_Version", 
      JSIL.MethodSignature.Action($.String), 
      SDKReference_set_Version
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "supportedArchitecturesSplitChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Constant({Static:true , Public:false}, "SupportedArchitectureJoinDelimiter", $.String, ", ");

    $.Constant({Static:true , Public:false}, "NeutralArch", $.String, "Neutral");

    $.Constant({Static:true , Public:false}, "X64Arch", $.String, "X64");

    $.Constant({Static:true , Public:false}, "X86Arch", $.String, "X86");

    $.Constant({Static:true , Public:false}, "ARMArch", $.String, "ARM");

    $.Constant({Static:true , Public:false}, "AnyCPUArch", $.String, "Any CPU");

    $.Constant({Static:true , Public:false}, "FrameworkIdentityAttribute", $.String, "FrameworkIdentity");

    $.Constant({Static:true , Public:false}, "SupportedArchitecturesAttribute", $.String, "SupportedArchitectures");

    $.Constant({Static:true , Public:false}, "SupportPrefer32BitAttribute", $.String, "SupportPrefer32Bit");

    $.Constant({Static:true , Public:false}, "AppxLocationAttribute", $.String, "AppxLocation");

    $.Constant({Static:true , Public:false}, "APPXAttribute", $.String, "APPX");

    $.Constant({Static:true , Public:false}, "PlatformIdentityAttribute", $.String, "PlatformIdentity");

    $.Constant({Static:true , Public:false}, "SDKTypeAttribute", $.String, "SDKType");

    $.Constant({Static:true , Public:false}, "DisplayNameAttribute", $.String, "DisplayName");

    $.Constant({Static:true , Public:false}, "CopyRedistToSubDirectoryAttribute", $.String, "CopyRedistToSubDirectory");

    $.Constant({Static:true , Public:false}, "ProductFamilyNameAttribute", $.String, "ProductFamilyName");

    $.Constant({Static:true , Public:false}, "SupportsMultipleVersionsAttribute", $.String, "SupportsMultipleVersions");

    $.Constant({Static:true , Public:false}, "TargetedSDKArchitecture", $.String, "TargetedSDKArchitecture");

    $.Constant({Static:true , Public:false}, "TargetedSDKConfiguration", $.String, "TargetedSDKConfiguration");

    $.Constant({Static:true , Public:false}, "ExpandReferenceAssembliesAttribute", $.String, "ExpandReferenceAssemblies");

    $.Constant({Static:true , Public:false}, "DependsOnSDKAttribute", $.String, "DependsOn");

    $.Constant({Static:true , Public:false}, "CopyRedistAttribute", $.String, "CopyRedist");

    $.Constant({Static:true , Public:false}, "CopyLocalExpandedReferenceAssembliesAttribute", $.String, "CopyLocalExpandedReferenceAssemblies");

    $.Constant({Static:true , Public:false}, "Retail", $.String, "Retail");

    $.Constant({Static:true , Public:false}, "Debug", $.String, "Debug");

    $.Field({Static:false, Public:false}, "sdkManifestPath", $.String);

    $.Field({Static:false, Public:false}, "supportsMultipleVersions", $asm01.TypeRef("Microsoft.Build.Tasks.MultipleVersionSupport"));

    $.Field({Static:false, Public:false}, "prefer32BitFromProject", $.Boolean);

    $.Field({Static:false, Public:false}, "SDKReference$ReferenceItem$value", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$SimpleName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$Version$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$ResolvedPath$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$ResolutionErrorsOrWarnings$value", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$StatusMessages$value", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$SDKName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$ResolvedItem$value", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$SDKType$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$DisplayName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$SupportPrefer32Bit$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$CopyRedistToSubDirectory$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$ProductFamilyName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$SupportedArchitectures$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$DependsOnSDK$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$FrameworkIdentitiesFromManifest$value", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$FrameworkIdentity$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$PlatformIdentity$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$AppxLocationsFromManifest$value", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "SDKReference$AppxLocation$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "ReferenceItem", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "SimpleName", $.String);

    $.Property({Static:false, Public:true }, "Version", $.String);

    $.Property({Static:false, Public:true }, "ResolvedPath", $.String);

    $.Property({Static:false, Public:true }, "Resolved", $.Boolean);

    $.Property({Static:false, Public:true }, "ResolutionErrorsOrWarnings", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])]));

    $.Property({Static:false, Public:true }, "StatusMessages", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])]));

    $.Property({Static:false, Public:true }, "SDKName", $.String);

    $.Property({Static:false, Public:true }, "ResolvedItem", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "SDKType", $.String);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "SupportPrefer32Bit", $.String);

    $.Property({Static:false, Public:true }, "CopyRedistToSubDirectory", $.String);

    $.Property({Static:false, Public:true }, "ProductFamilyName", $.String);

    $.Property({Static:false, Public:true }, "SupportsMultipleVersions", $asm01.TypeRef("Microsoft.Build.Tasks.MultipleVersionSupport"));

    $.Property({Static:false, Public:true }, "SupportedArchitectures", $.String);

    $.Property({Static:false, Public:true }, "DependsOnSDK", $.String);

    $.Property({Static:false, Public:false}, "FrameworkIdentitiesFromManifest", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:false}, "FrameworkIdentity", $.String);

    $.Property({Static:false, Public:false}, "PlatformIdentity", $.String);

    $.Property({Static:false, Public:false}, "AppxLocationsFromManifest", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:false}, "AppxLocation", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.ResolveSDKReference+SDKReference+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ResolveSDKReference+SDKReference+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateResolvedReferenceItem$gb__123_0", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__123_0", $asm07.TypeRef("System.Func`2", [$.String, $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.ResolveSDKReference+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ResolveSDKReference+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lExecute$gb__39_0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveSDKReference+SDKReference")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lExecute$gb__39_1", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveSDKReference+SDKReference")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetUnresolvedDependentSDKs$gb__41_2", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lParseDependsOnSDK$gb__42_0", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lParseDependsOnSDK$gb__42_1", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__39_0", $asm07.TypeRef("System.Func`2", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveSDKReference+SDKReference"), $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__39_1", $asm07.TypeRef("System.Func`2", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveSDKReference+SDKReference"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:true , Public:true }, "$l$g9__41_2", $asm07.TypeRef("System.Func`2", [$.String, $.String]));

    $.Field({Static:true , Public:true }, "$l$g9__42_0", $asm07.TypeRef("System.Func`2", [$.String, $.String]));

    $.Field({Static:true , Public:true }, "$l$g9__42_1", $asm07.TypeRef("System.Func`2", [$.String, $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.ResolveSDKReference+<>c__DisplayClass41_0 */ 

(function $l$gc__DisplayClass41_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ResolveSDKReference+<>c__DisplayClass41_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetUnresolvedDependentSDKs$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:true }, "sdkReferenceItems", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveSDKReference+SDKReference")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.ResolveSDKReference+<>c__DisplayClass41_1 */ 

(function $l$gc__DisplayClass41_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.ResolveSDKReference+<>c__DisplayClass41_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetUnresolvedDependentSDKs$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.ResolveSDKReference+SDKReference")])
    );

    $.Field({Static:false, Public:true }, "simpleName", $.String);

    $.Field({Static:false, Public:true }, "sdkVersion", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.SdkToolsPathUtility */ 

(function SdkToolsPathUtility$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("Microsoft.Build.Tasks.SdkToolsPathUtility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FileExists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSDKToolUsingToolsLocationHelper", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GeneratePathToTool", 
      new JSIL.MethodSignature($.String, [
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $.String, 
          $.String, $.String, 
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FileInfoExists", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.FileExists"))
    );

    $.Field({Static:true , Public:false}, "fileInfoExists", $asm01.TypeRef("Microsoft.Build.Shared.FileExists"));

    $.Property({Static:true , Public:false}, "FileInfoExists", $asm01.TypeRef("Microsoft.Build.Shared.FileExists"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.RequiresFramework35SP1Assembly */ 

(function RequiresFramework35SP1Assembly$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.RequiresFramework35SP1Assembly", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareFrameworkVersions", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertFrameworkVersionToString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExcludeReferenceFromHashing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreateDesktopShortcut", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeploymentManifestEntryPoint", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EntryPoint", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorReportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Files", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferencedAssemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequiresMinimumFramework35SP1", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningManifests", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SuiteName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "HasCreatedShortcut", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "HasErrorUrl", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "HasExcludedFileOrSP1File", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasSuiteName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsExcludedFileOrSP1File", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Assemblies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CreateDesktopShortcut", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DeploymentManifestEntryPoint", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EntryPoint", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ErrorReportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Files", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReferencedAssemblies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequiresMinimumFramework35SP1", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SigningManifests", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SuiteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "UncheckedSigning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "errorReportUrl", $.String);

    $.Field({Static:false, Public:false}, "targetFrameworkVersion", $.String);

    $.Field({Static:false, Public:false}, "createDesktopShortcut", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "signingManifests", $.Boolean);

    $.Field({Static:false, Public:false}, "outputRequiresMinimumFramework35SP1", $.Boolean);

    $.Field({Static:false, Public:false}, "referencedAssemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "assemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "deploymentManifestEntryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "entryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "suiteName", $.String);

    $.Property({Static:false, Public:true }, "ErrorReportUrl", $.String);

    $.Property({Static:false, Public:true }, "TargetFrameworkVersion", $.String);

    $.Property({Static:false, Public:true }, "CreateDesktopShortcut", $.Boolean);

    $.Property({Static:false, Public:true }, "SigningManifests", $.Boolean);

    $.Property({Static:false, Public:true }, "ReferencedAssemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "Assemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "DeploymentManifestEntryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "EntryPoint", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "Files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "SuiteName", $.String);

    $.Property({Static:false, Public:true }, "RequiresMinimumFramework35SP1", $.Boolean)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.SGen */ 

(function SGen$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ToolTaskExtension"), 
      Name: "Microsoft.Build.Tasks.SGen", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateCommandLineCommands", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateFullPathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AssemblyFullPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BuildAssemblyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BuildAssemblyPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DelaySign", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyContainer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Platform", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_References", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SdkToolsPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SerializationAssembly", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SerializationAssemblyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationAssemblyPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ShouldGenerateSerializer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Types", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseProxyTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BuildAssemblyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BuildAssemblyPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DelaySign", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyContainer", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Platform", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_References", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SdkToolsPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SerializationAssembly", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ShouldGenerateSerializer", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Types", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseProxyTypes", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SkipTaskExecution", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "buildAssemblyPath", $.String);

    $.Property({Static:false, Public:true }, "BuildAssemblyName", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "BuildAssemblyPath", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "ShouldGenerateSerializer", $.Boolean)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "UseProxyTypes", $.Boolean)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "References", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "KeyContainer", $.String);

    $.Property({Static:false, Public:true }, "KeyFile", $.String);

    $.Property({Static:false, Public:true }, "DelaySign", $.Boolean);

    $.Property({Static:false, Public:true }, "SerializationAssembly", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "SerializationAssemblyName", $.String);

    $.Property({Static:false, Public:false}, "SerializationAssemblyPath", $.String);

    $.Property({Static:false, Public:false}, "AssemblyFullPath", $.String);

    $.Property({Static:false, Public:true }, "SdkToolsPath", $.String);

    $.Property({Static:false, Public:true }, "Platform", $.String);

    $.Property({Static:false, Public:true }, "Types", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "ToolName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.SignFile */ 

(function SignFile$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Build.Utilities.Task"), 
      Name: "Microsoft.Build.Tasks.SignFile", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateThumbprint", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningTarget", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TimestampUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateThumbprint", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SigningTarget", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TimestampUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "certificateThumbprint", $.String);

    $.Field({Static:false, Public:false}, "sigingTarget", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "timestampUrl", $.String);

    $.Property({Static:false, Public:true }, "CertificateThumbprint", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "SigningTarget", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "TimestampUrl", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.StronglyTypedResourceBuilder */ 

(function StronglyTypedResourceBuilder$Members () {
  var $, $thisType;













  JSIL.MakeStaticClass("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AddGeneratedCodeAttributeforMember", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeMember"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeCompileUnit"), [
          $asm07.TypeRef("System.Collections.IDictionary"), $.String, 
          $.String, $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.String])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeCompileUnit"), [
          $asm07.TypeRef("System.Collections.IDictionary"), $.String, 
          $.String, $.String, 
          $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.String])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeCompileUnit"), [
          $.String, $.String, 
          $.String, $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.String])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeCompileUnit"), [
          $.String, $.String, 
          $.String, $.String, 
          $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.String])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DefineResourceFetchingProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $asm01.TypeRef("Microsoft.Build.Tasks.StronglyTypedResourceBuilder+ResourceData"), $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitBasicClassMembers", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), $.String, 
          $.String, $.String, 
          $.Boolean, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalCreate", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeCompileUnit"), [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.StronglyTypedResourceBuilder+ResourceData")]), $.String, 
          $.String, $.String, 
          $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.String])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TruncateAndFormatCommentStringForOutput", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyResourceName", 
      new JSIL.MethodSignature($.String, [$.String, $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyResourceName", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyResourceNames", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.SortedList"), [
          $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.StronglyTypedResourceBuilder+ResourceData")]), $asm0A.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), 
          $asm07.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Hashtable")])
        ])
    );

    $.Constant({Static:true , Public:false}, "ResMgrFieldName", $.String, "resourceMan");

    $.Constant({Static:true , Public:false}, "ResMgrPropertyName", $.String, "ResourceManager");

    $.Constant({Static:true , Public:false}, "CultureInfoFieldName", $.String, "resourceCulture");

    $.Constant({Static:true , Public:false}, "CultureInfoPropertyName", $.String, "Culture");

    $.Field({Static:true , Public:false, ReadOnly:true }, "CharsToReplace", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Constant({Static:true , Public:false}, "ReplacementChar", $.Char, "_");

    $.Constant({Static:true , Public:false}, "DocCommentSummaryStart", $.String, "<summary>");

    $.Constant({Static:true , Public:false}, "DocCommentSummaryEnd", $.String, "</summary>");

    $.Constant({Static:true , Public:false}, "DocCommentLengthThreshold", $.Int32, 512);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.StronglyTypedResourceBuilder+ResourceData */ 

(function ResourceData$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.StronglyTypedResourceBuilder+ResourceData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_valueAsString", $.String);

    $.Property({Static:false, Public:false}, "Type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ValueAsString", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.StrongNameException */ 

(function StrongNameException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Build.Tasks.StrongNameException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.StrongNameLevel */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.StrongNameLevel", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    DelaySigned: 1, 
    FullySigned: 2, 
    Unknown: 3, 
  }
);

/* class Microsoft.Build.Tasks.StrongNameUtils */ 

(function StrongNameUtils$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("Microsoft.Build.Tasks.StrongNameUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetAssemblyStrongNameLevel", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.StrongNameLevel"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCor20HeaderRva", 
      new JSIL.MethodSignature($.UInt32, [$.IntPtr])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStrongNameKey", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.StrongNameKeyPair")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadKeyFile", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.StrongNameKeyPair")]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.SystemState */ 

(function SystemState$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.StateFileBase"), 
      Name: "Microsoft.Build.Tasks.SystemState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"), [$asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyMetadata"), [$asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.FileExists"), [$asm01.TypeRef("Microsoft.Build.Shared.FileExists")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.GetDirectories"), [$asm01.TypeRef("Microsoft.Build.Tasks.GetDirectories")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"), [$asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FileExists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDirty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAssemblyMetadata", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.String])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAssemblyName", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDirectories", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFileState", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.SystemState+FileState"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRuntimeVersion", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetGetLastWriteTime", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.GetLastWriteTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetInstalledAssemblyInformation", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.AssemblyTableInfo")]))
    );

    $.Field({Static:false, Public:false}, "instanceLocalFileStateCache", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "instanceLocalFileExists", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "instanceLocalDirectories", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "processWideFileStateCache", $asm07.TypeRef("System.Collections.Concurrent.ConcurrentDictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.SystemState+FileState")]));

    $.Field({Static:false, Public:false}, "redistList", $asm01.TypeRef("Microsoft.Build.Tasks.RedistList"));

    $.Field({Static:false, Public:false}, "isDirty", $.Boolean);

    $.Field({Static:false, Public:false}, "getLastWriteTime", $asm01.TypeRef("Microsoft.Build.Tasks.GetLastWriteTime"));

    $.Field({Static:false, Public:false}, "getAssemblyName", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyName"));

    $.Field({Static:false, Public:false}, "getAssemblyMetadata", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyMetadata"));

    $.Field({Static:false, Public:false}, "fileExists", $asm01.TypeRef("Microsoft.Build.Shared.FileExists"));

    $.Field({Static:false, Public:false}, "getDirectories", $asm01.TypeRef("Microsoft.Build.Tasks.GetDirectories"));

    $.Field({Static:false, Public:false}, "getAssemblyRuntimeVersion", $asm01.TypeRef("Microsoft.Build.Tasks.GetAssemblyRuntimeVersion"));

    $.Property({Static:false, Public:false}, "IsDirty", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.SystemState+FileState */ 

(function FileState$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.SystemState+FileState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Assembly", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FrameworkNameAttribute", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastModified", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RuntimeVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Assembly", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FrameworkNameAttribute", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LastModified", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RuntimeVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "lastModified", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "assemblyName", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Field({Static:false, Public:false}, "dependencies", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]));

    $.Field({Static:false, Public:false}, "scatterFiles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "frameworkName", $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"));

    $.Field({Static:false, Public:false}, "runtimeVersion", $.String);

    $.Property({Static:false, Public:false}, "LastModified", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "Assembly", $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"));

    $.Property({Static:false, Public:false}, "RuntimeVersion", $.String);

    $.Property({Static:false, Public:false}, "FrameworkNameAttribute", $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.TlbReference */ 

(function TlbReference$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.AxTlbBaseReference"), 
      Name: "Microsoft.Build.Tasks.TlbReference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 18, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"), $.Boolean, 
          $asm01.TypeRef("Microsoft.Build.Tasks.IComReferenceResolver"), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), 
          $asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceInfo"), $.String, 
          $.String, $.Boolean, 
          $.Boolean, $.String, 
          $.String, $.Boolean, 
          $.String, $.Boolean, 
          $.Boolean, $.String, 
          $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine"), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindExistingWrapper", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo")]), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateWrapper", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.ComReferenceWrapperInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasTemporaryWrapper", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OutputDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWrapperFileName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWrapperFileName", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Boolean, 
          $.Int16, $.Int16
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWrapperFileNameInternal", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.InteropServices.ITypeLibImporterNotifySink.ReportEvent", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.InteropServices.ImporterEventKind"), $.Int32, 
          $.String
        ])
    )
      .Overrides($asm07.TypeRef("System.Runtime.InteropServices.ITypeLibImporterNotifySink"), "ReportEvent");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.InteropServices.ITypeLibImporterNotifySink.ResolveRef", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Runtime.InteropServices.ITypeLibImporterNotifySink"), "ResolveRef");

    $.ExternalMethod({Static:false, Public:false}, "WriteWrapperToDisk", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.AssemblyBuilder"), $.String])
    );

    $.Field({Static:false, Public:false}, "hasTemporaryWrapper", $.Boolean);

    $.Field({Static:false, Public:false}, "noClassMembers", $.Boolean);

    $.Field({Static:false, Public:false}, "targetProcessorArchitecture", $.String);

    $.Field({Static:false, Public:false}, "referenceFiles", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:false}, "HasTemporaryWrapper", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OutputDirectory", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.InteropServices.ITypeLibImporterNotifySink")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.TlbReference+<>c__DisplayClass13_0 */ 

(function $l$gc__DisplayClass13_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.TlbReference+<>c__DisplayClass13_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGenerateWrapper$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:true }, "fullPathToOutput", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.Touch */ 

(function Touch$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.Touch", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateFile", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm01.TypeRef("Microsoft.Build.Shared.FileCreate")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteImpl", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $asm01.TypeRef("Microsoft.Build.Shared.FileCreate"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAttributes"), $asm01.TypeRef("Microsoft.Build.Tasks.SetAttributes"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.SetLastAccessTime"), $asm01.TypeRef("Microsoft.Build.Tasks.SetLastWriteTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AlwaysCreate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Files", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ForceTouch", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Time", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TouchedFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTouchDateTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AlwaysCreate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Files", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ForceTouch", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Time", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TouchedFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "TouchFile", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm07.TypeRef("System.DateTime"), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileExists"), $asm01.TypeRef("Microsoft.Build.Shared.FileCreate"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.GetAttributes"), $asm01.TypeRef("Microsoft.Build.Tasks.SetAttributes"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.SetLastAccessTime"), $asm01.TypeRef("Microsoft.Build.Tasks.SetLastWriteTime")
        ])
    );

    $.Field({Static:false, Public:false}, "forceTouch", $.Boolean);

    $.Field({Static:false, Public:false}, "alwaysCreate", $.Boolean);

    $.Field({Static:false, Public:false}, "specificTime", $.String);

    $.Field({Static:false, Public:false}, "files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "touchedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "ForceTouch", $.Boolean);

    $.Property({Static:false, Public:true }, "AlwaysCreate", $.Boolean);

    $.Property({Static:false, Public:true }, "Time", $.String);

    $.Property({Static:false, Public:true }, "Files", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "TouchedFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.UnregisterAssembly */ 

(function UnregisterAssembly$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.AppDomainIsolatedTaskExtension"), 
      Name: "Microsoft.Build.Tasks.UnregisterAssembly", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assemblies", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyListFile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeLibFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Assemblies", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyListFile", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeLibFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Unregister", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "assemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "typeLibFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "assemblyListFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:true , Public:false}, "unregisteringLock", $asm07.TypeRef("System.Threading.Mutex"));

    $.Constant({Static:true , Public:false}, "unregisteringLockName", $.String, "MSBUILD_V_3_5_UNREGISTER_LOCK");

    $.Property({Static:false, Public:true }, "Assemblies", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "TypeLibFiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "AssemblyListFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.UpdateManifest */ 

(function UpdateManifest$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Build.Utilities.Task"), 
      Name: "Microsoft.Build.Tasks.UpdateManifest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationManifest", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InputManifest", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputManifest", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApplicationManifest", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ApplicationPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InputManifest", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputManifest", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "applicationPath", $.String);

    $.Field({Static:false, Public:false}, "targetFrameworkVersion", $.String);

    $.Field({Static:false, Public:false}, "applicationManifest", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "inputManifest", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "outputManifest", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "ApplicationPath", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "TargetFrameworkVersion", $.String);

    $.Property({Static:false, Public:true }, "ApplicationManifest", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "InputManifest", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "OutputManifest", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Vbc */ 

(function Vbc$Members () {
  var $, $thisType;






































































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ManagedCompiler"), 
      Name: "Microsoft.Build.Tasks.Vbc", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReferencesToCommandLine", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddResponseFileCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CallHostObjectToExecute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateFullPathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisabledWarnings", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DocumentationFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorReport", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GenerateDocumentation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Imports", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LangVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ModuleAssemblyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NoStandardLib", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NoVBRuntimeReference", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NoWarnings", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OptionCompare", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OptionExplicit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OptionInfer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OptionStrict", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OptionStrictType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PdbFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemoveIntegerChecks", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RootNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SdkPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetCompactFramework", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseHostCompilerIfAvailable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VBRuntime", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VBRuntimePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Verbosity", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WarningsAsErrors", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WarningsNotAsErrors", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBaseAddressInHex", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefineConstantsSwitch", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeHostCompiler", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Hosting.IVbcHostObject")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeHostObject", 
      JSIL.MethodSignature.Return($asm02.TypeRef("Microsoft.Build.Utilities.HostObjectInitializationStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LogEventsFromTextOutput", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MovePdbFileIfNecessary", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseVBErrorOrWarning", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseAddress", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisabledWarnings", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DocumentationFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ErrorReport", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_GenerateDocumentation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Imports", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LangVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ModuleAssemblyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NoStandardLib", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NoVBRuntimeReference", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NoWarnings", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OptionCompare", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OptionExplicit", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OptionInfer", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OptionStrict", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OptionStrictType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PdbFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RemoveIntegerChecks", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RootNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SdkPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetCompactFramework", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseHostCompilerIfAvailable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_VBRuntime", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_VBRuntimePath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Verbosity", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WarningsAsErrors", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WarningsNotAsErrors", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "useHostCompilerIfAvailable", $.Boolean);

    $.Field({Static:false, Public:false}, "vbErrorLines", $asm0A.TypeRef("System.Collections.Generic.Queue`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Vbc+VBError")]));

    $.Field({Static:false, Public:false}, "isDoneOutputtingErrorMessage", $.Boolean);

    $.Field({Static:false, Public:false}, "numberOfLinesInErrorMessage", $.Int32);

    $.Property({Static:false, Public:true }, "BaseAddress", $.String);

    $.Property({Static:false, Public:true }, "DisabledWarnings", $.String);

    $.Property({Static:false, Public:true }, "DocumentationFile", $.String);

    $.Property({Static:false, Public:true }, "ErrorReport", $.String);

    $.Property({Static:false, Public:true }, "GenerateDocumentation", $.Boolean);

    $.Property({Static:false, Public:true }, "Imports", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "LangVersion", $.String);

    $.Property({Static:false, Public:true }, "ModuleAssemblyName", $.String);

    $.Property({Static:false, Public:true }, "NoStandardLib", $.Boolean);

    $.Property({Static:false, Public:true }, "NoVBRuntimeReference", $.Boolean);

    $.Property({Static:false, Public:true }, "NoWarnings", $.Boolean);

    $.Property({Static:false, Public:true }, "OptionCompare", $.String);

    $.Property({Static:false, Public:true }, "OptionExplicit", $.Boolean);

    $.Property({Static:false, Public:true }, "OptionStrict", $.Boolean);

    $.Property({Static:false, Public:true }, "OptionInfer", $.Boolean);

    $.Property({Static:false, Public:true }, "OptionStrictType", $.String);

    $.Property({Static:false, Public:true }, "RemoveIntegerChecks", $.Boolean);

    $.Property({Static:false, Public:true }, "RootNamespace", $.String);

    $.Property({Static:false, Public:true }, "SdkPath", $.String);

    $.Property({Static:false, Public:true }, "TargetCompactFramework", $.Boolean);

    $.Property({Static:false, Public:true }, "UseHostCompilerIfAvailable", $.Boolean);

    $.Property({Static:false, Public:true }, "VBRuntimePath", $.String);

    $.Property({Static:false, Public:true }, "Verbosity", $.String);

    $.Property({Static:false, Public:true }, "WarningsAsErrors", $.String);

    $.Property({Static:false, Public:true }, "WarningsNotAsErrors", $.String);

    $.Property({Static:false, Public:true }, "VBRuntime", $.String);

    $.Property({Static:false, Public:true }, "PdbFile", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ToolName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Vbc+VBError */ 

(function VBError$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.Microsoft.Build.Framework.MessageImportance)) ();
  };



  function VBError_get_Message () {
    return this.VBError$Message$value;
  }; 

  function VBError_get_MessageImportance () {
    return this.VBError$MessageImportance$value;
  }; 

  function VBError_set_Message (value) {
    this.VBError$Message$value = value;
  }; 

  function VBError_set_MessageImportance (value) {
    this.VBError$MessageImportance$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Vbc+VBError", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")])
    );

    $.Method({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String), 
      VBError_get_Message
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_MessageImportance", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")), 
      VBError_get_MessageImportance
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Message", 
      JSIL.MethodSignature.Action($.String), 
      VBError_set_Message
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_MessageImportance", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.MessageImportance")), 
      VBError_set_MessageImportance
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "VBError$Message$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "VBError$MessageImportance$value", $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Message", $.String);

    $.Property({Static:false, Public:true }, "MessageImportance", $asm00.TypeRef("Microsoft.Build.Framework.MessageImportance"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.VisualBasicParserUtilities */ 

(function VisualBasicParserUtilities$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Build.Tasks.VisualBasicParserUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Extract", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.ExtractedClassName"), [$asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.VisualBasicTokenizer")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFirstClassNameFullyQualified", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.ExtractedClassName"), [$asm07.TypeRef("System.IO.Stream")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.WinMDExp */ 

(function WinMDExp$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.ToolTaskExtension"), 
      Name: "Microsoft.Build.Tasks.WinMDExp", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddCommandLineCommands", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.CommandLineBuilderExtension"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateFullPathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisabledWarnings", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InputDocumentationFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InputPDBFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputDocumentationFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputPDBFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputWindowsMetadataFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_References", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SdkToolsPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_StandardErrorEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_StandardOutputEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TreatWarningsAsErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UTF8Output", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WinMDModule", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsFileUpdated", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisabledWarnings", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InputDocumentationFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InputPDBFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputDocumentationFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputPDBFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputWindowsMetadataFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_References", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SdkToolsPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TreatWarningsAsErrors", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UTF8Output", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WinMDModule", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SkipTaskExecution", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true }, "References", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "DisabledWarnings", $.String);

    $.Property({Static:false, Public:true }, "InputDocumentationFile", $.String);

    $.Property({Static:false, Public:true }, "OutputDocumentationFile", $.String);

    $.Property({Static:false, Public:true }, "InputPDBFile", $.String);

    $.Property({Static:false, Public:true }, "OutputPDBFile", $.String);

    $.Property({Static:false, Public:true }, "WinMDModule", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "OutputWindowsMetadataFile", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "SdkToolsPath", $.String);

    $.Property({Static:false, Public:true }, "UTF8Output", $.Boolean);

    $.Property({Static:false, Public:true }, "TreatWarningsAsErrors", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ToolName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "StandardOutputEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false, Virtual:true }, "StandardErrorEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.WriteCodeFragment */ 

(function WriteCodeFragment$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm00.Microsoft.Build.Framework.ITaskItem))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.Microsoft.Build.Framework.ITaskItem)) ();
  };





  function WriteCodeFragment_get_AssemblyAttributes () {
    return this.WriteCodeFragment$AssemblyAttributes$value;
  }; 

  function WriteCodeFragment_get_Language () {
    return this.WriteCodeFragment$Language$value;
  }; 

  function WriteCodeFragment_get_OutputDirectory () {
    return this.WriteCodeFragment$OutputDirectory$value;
  }; 

  function WriteCodeFragment_get_OutputFile () {
    return this.WriteCodeFragment$OutputFile$value;
  }; 

  function WriteCodeFragment_set_AssemblyAttributes (value) {
    this.WriteCodeFragment$AssemblyAttributes$value = value;
  }; 

  function WriteCodeFragment_set_Language (value) {
    this.WriteCodeFragment$Language$value = value;
  }; 

  function WriteCodeFragment_set_OutputDirectory (value) {
    this.WriteCodeFragment$OutputDirectory$value = value;
  }; 

  function WriteCodeFragment_set_OutputFile (value) {
    this.WriteCodeFragment$OutputFile$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.WriteCodeFragment", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCode", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.Method({Static:false, Public:true }, "get_AssemblyAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])), 
      WriteCodeFragment_get_AssemblyAttributes
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Language", 
      JSIL.MethodSignature.Return($.String), 
      WriteCodeFragment_get_Language
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_OutputDirectory", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      WriteCodeFragment_get_OutputDirectory
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_OutputFile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      WriteCodeFragment_get_OutputFile
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_AssemblyAttributes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])), 
      WriteCodeFragment_set_AssemblyAttributes
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Language", 
      JSIL.MethodSignature.Action($.String), 
      WriteCodeFragment_set_Language
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_OutputDirectory", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      WriteCodeFragment_set_OutputDirectory
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_OutputFile", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")), 
      WriteCodeFragment_set_OutputFile
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WriteCodeFragment$Language$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WriteCodeFragment$AssemblyAttributes$value", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WriteCodeFragment$OutputDirectory$value", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WriteCodeFragment$OutputFile$value", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Language", $.String)
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "AssemblyAttributes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "OutputDirectory", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "OutputFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.XamlTaskFactory */ 

(function XamlTaskFactory$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };






  function XamlTaskFactory_get_TaskElementContents () {
    return this.XamlTaskFactory$TaskElementContents$value;
  }; 

  function XamlTaskFactory_get_TaskName () {
    return this.XamlTaskFactory$TaskName$value;
  }; 

  function XamlTaskFactory_get_TaskNamespace () {
    return this.XamlTaskFactory$TaskNamespace$value;
  }; 




  function XamlTaskFactory_set_TaskElementContents (value) {
    this.XamlTaskFactory$TaskElementContents$value = value;
  }; 

  function XamlTaskFactory_set_TaskName (value) {
    this.XamlTaskFactory$TaskName$value = value;
  }; 

  function XamlTaskFactory_set_TaskNamespace (value) {
    this.XamlTaskFactory$TaskNamespace$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.XamlTaskFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CleanupTask", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITask"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateTask", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Build.Framework.ITask"), [$asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FactoryName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true }, "get_TaskElementContents", 
      JSIL.MethodSignature.Return($.String), 
      XamlTaskFactory_get_TaskElementContents
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TaskName", 
      JSIL.MethodSignature.Return($.String), 
      XamlTaskFactory_get_TaskName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TaskNamespace", 
      JSIL.MethodSignature.Return($.String), 
      XamlTaskFactory_get_TaskNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TaskType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTaskParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.TaskPropertyInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm00.TypeRef("Microsoft.Build.Framework.TaskPropertyInfo")]), 
          $.String, $asm00.TypeRef("Microsoft.Build.Framework.IBuildEngine")
        ])
    );

    $.Method({Static:false, Public:false}, "set_TaskElementContents", 
      JSIL.MethodSignature.Action($.String), 
      XamlTaskFactory_set_TaskElementContents
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TaskName", 
      JSIL.MethodSignature.Action($.String), 
      XamlTaskFactory_set_TaskName
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TaskNamespace", 
      JSIL.MethodSignature.Action($.String), 
      XamlTaskFactory_set_TaskNamespace
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Constant({Static:true , Public:false}, "XamlTaskNamespace", $.String, "XamlTaskNamespace");

    $.Field({Static:false, Public:false}, "taskAssembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:false, Public:false}, "taskType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "XamlTaskFactory$TaskName$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlTaskFactory$TaskNamespace$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlTaskFactory$TaskElementContents$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "TaskName", $.String);

    $.Property({Static:false, Public:true }, "TaskNamespace", $.String);

    $.Property({Static:false, Public:true }, "TaskElementContents", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "FactoryName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TaskType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("Microsoft.Build.Framework.ITaskFactory")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.XmlPeek */ 

(function XmlPeek$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.XmlPeek", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Query", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlContent", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlInputPath", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadNamespaces", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm2F.TypeRef("System.Xml.XmlNamespaceManager")]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Query", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlContent", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlInputPath", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.Field({Static:false, Public:false}, "xmlInputPath", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "xmlContent", $.String);

    $.Field({Static:false, Public:false}, "query", $.String);

    $.Field({Static:false, Public:false}, "result", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "namespaces", $.String);

    $.Property({Static:false, Public:true }, "XmlInputPath", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "XmlContent", $.String);

    $.Property({Static:false, Public:true }, "Query", $.String);

    $.Property({Static:false, Public:true }, "Result", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.OutputAttribute"));

    $.Property({Static:false, Public:true }, "Namespaces", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.XmlPeek+XmlInput */ 

(function XmlInput$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.XmlPeek+XmlInput", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CloseReader", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateReader", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlMode", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.XmlPeek+XmlInput+XmlModes"))
    );

    $.Field({Static:false, Public:false}, "xmlMode", $asm01.TypeRef("Microsoft.Build.Tasks.XmlPeek+XmlInput+XmlModes"));

    $.Field({Static:false, Public:false}, "data", $.String);

    $.Field({Static:false, Public:false}, "fs", $asm07.TypeRef("System.IO.FileStream"));

    $.Property({Static:false, Public:true }, "XmlMode", $asm01.TypeRef("Microsoft.Build.Tasks.XmlPeek+XmlInput+XmlModes"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.XmlPeek+XmlInput+XmlModes */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.XmlPeek+XmlInput+XmlModes", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    XmlFile: 0, 
    Xml: 1, 
  }
);

/* class Microsoft.Build.Tasks.XmlPoke */ 

(function XmlPoke$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.XmlPoke", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Query", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlInputPath", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadNamespaces", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm2F.TypeRef("System.Xml.XmlNamespaceManager")]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Query", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlInputPath", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.Field({Static:false, Public:false}, "xmlInputPath", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "query", $.String);

    $.Field({Static:false, Public:false}, "value", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "namespaces", $.String);

    $.Property({Static:false, Public:true }, "XmlInputPath", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "Query", $.String);

    $.Property({Static:false, Public:true }, "Value", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "Namespaces", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.XslTransformation */ 

(function XslTransformation$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.XslTransformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputPaths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlContent", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlInputPaths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XslCompiledDllPath", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XslContent", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XslInputPath", 
      JSIL.MethodSignature.Return($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessXsltArguments", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.Xsl.XsltArgumentList"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OutputPaths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Parameters", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlContent", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlInputPaths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XslCompiledDllPath", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XslContent", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XslInputPath", 
      JSIL.MethodSignature.Action($asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"))
    );

    $.Field({Static:false, Public:false}, "xmlInputPaths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "xmlString", $.String);

    $.Field({Static:false, Public:false}, "xsltFile", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "xsltString", $.String);

    $.Field({Static:false, Public:false}, "xsltCompiledDll", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Field({Static:false, Public:false}, "outputPaths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "parameters", $.String);

    $.Property({Static:false, Public:true }, "XmlInputPaths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Property({Static:false, Public:true }, "XmlContent", $.String);

    $.Property({Static:false, Public:true }, "XslInputPath", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "XslContent", $.String);

    $.Property({Static:false, Public:true }, "XslCompiledDllPath", $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"));

    $.Property({Static:false, Public:true }, "OutputPaths", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
      .Attribute($asm00.TypeRef("Microsoft.Build.Framework.RequiredAttribute"));

    $.Property({Static:false, Public:true }, "Parameters", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.XslTransformation+XmlInput */ 

(function XmlInput$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.XslTransformation+XmlInput", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateReader", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlReader"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlMode", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.XslTransformation+XmlInput+XmlModes"))
    );

    $.Field({Static:false, Public:false}, "xmlMode", $asm01.TypeRef("Microsoft.Build.Tasks.XslTransformation+XmlInput+XmlModes"));

    $.Field({Static:false, Public:false}, "data", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "XmlMode", $asm01.TypeRef("Microsoft.Build.Tasks.XslTransformation+XmlInput+XmlModes"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.XslTransformation+XmlInput+XmlModes */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.XslTransformation+XmlInput+XmlModes", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    XmlFile: 0, 
    Xml: 1, 
  }
);

/* class Microsoft.Build.Tasks.XslTransformation+XsltInput */ 

(function XsltInput$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.XslTransformation+XsltInput", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String, 
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "LoadXslt", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.Xsl.XslCompiledTransform"))
    );

    $.Field({Static:false, Public:false}, "xslMode", $asm01.TypeRef("Microsoft.Build.Tasks.XslTransformation+XsltInput+XslModes"));

    $.Field({Static:false, Public:false}, "data", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.XslTransformation+XsltInput+XslModes */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.XslTransformation+XsltInput+XslModes", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    XsltFile: 0, 
    Xslt: 1, 
    XsltCompiledDll: 2, 
  }
);

/* class Microsoft.Build.Tasks.Warning */ 

(function Warning$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };





  function Warning_get_File () {
    return this.Warning$File$value;
  }; 




  function Warning_set_File (value) {
    this.Warning$File$value = value;
  }; 



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.TaskExtension"), 
      Name: "Microsoft.Build.Tasks.Warning", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Code", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true }, "get_File", 
      JSIL.MethodSignature.Return($.String), 
      Warning_get_File
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_HelpKeyword", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Text", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Code", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:true }, "set_File", 
      JSIL.MethodSignature.Action($.String), 
      Warning_set_File
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_HelpKeyword", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Text", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "text", $.String);

    $.Field({Static:false, Public:false}, "code", $.String);

    $.Field({Static:false, Public:false}, "Warning$File$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "helpKeyword", $.String);

    $.Property({Static:false, Public:true }, "Text", $.String);

    $.Property({Static:false, Public:true }, "Code", $.String);

    $.Property({Static:false, Public:true }, "File", $.String);

    $.Property({Static:false, Public:true }, "HelpKeyword", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "Microsoft.Build.Tasks.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class Microsoft.Build.Tasks.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "Microsoft.Build.Tasks.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class Microsoft.Build.Tasks.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "ClassDocComment", $.String, "ClassDocComment");

    $.Constant({Static:true , Public:false}, "ClassComments1", $.String, "ClassComments1");

    $.Constant({Static:true , Public:false}, "ClassComments3", $.String, "ClassComments3");

    $.Constant({Static:true , Public:false}, "StringPropertyComment", $.String, "StringPropertyComment");

    $.Constant({Static:true , Public:false}, "StringPropertyTruncatedComment", $.String, "StringPropertyTruncatedComment");

    $.Constant({Static:true , Public:false}, "NonStringPropertyComment", $.String, "NonStringPropertyComment");

    $.Constant({Static:true , Public:false}, "NonStringPropertyDetailedComment", $.String, "NonStringPropertyDetailedComment");

    $.Constant({Static:true , Public:false}, "CulturePropertyComment1", $.String, "CulturePropertyComment1");

    $.Constant({Static:true , Public:false}, "CulturePropertyComment2", $.String, "CulturePropertyComment2");

    $.Constant({Static:true , Public:false}, "ResMgrPropertyComment", $.String, "ResMgrPropertyComment");

    $.Constant({Static:true , Public:false}, "MismatchedResourceName", $.String, "MismatchedResourceName");

    $.Constant({Static:true , Public:false}, "InvalidIdentifier", $.String, "InvalidIdentifier");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Build.Tasks.Xaml");
/* class Microsoft.Build.Tasks.Xaml.CommandLineGenerator */ 

(function CommandLineGenerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };

















  function CommandLineGenerator_get_AlwaysAppend () {
    return this.CommandLineGenerator$AlwaysAppend$value;
  }; 

  function CommandLineGenerator_get_CommandLineTemplate () {
    return this.CommandLineGenerator$CommandLineTemplate$value;
  }; 






  function CommandLineGenerator_set_AlwaysAppend (value) {
    this.CommandLineGenerator$AlwaysAppend$value = value;
  }; 

  function CommandLineGenerator_set_CommandLineTemplate (value) {
    this.CommandLineGenerator$CommandLineTemplate$value = value;
  }; 



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Xaml.CommandLineGenerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Build.Framework.XamlTypes.Rule"), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")]), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildAdditionalArgs", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Build.Utilities.CommandLineBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBooleanSwitch", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Build.Utilities.CommandLineBuilder"), $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitIntegerSwitch", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Build.Utilities.CommandLineBuilder"), $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitReversibleBooleanSwitch", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Build.Utilities.CommandLineBuilder"), $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitStringArraySwitch", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Build.Utilities.CommandLineBuilder"), $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitStringSwitch", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Build.Utilities.CommandLineBuilder"), $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitTaskItemArraySwitch", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Build.Utilities.CommandLineBuilder"), $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GatherArguments", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $.Boolean])]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateCommandLine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCommandsAccordingToType", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Build.Utilities.CommandLineBuilder"), $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateStandardCommandLine", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Build.Utilities.CommandLineBuilder"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTemplatedCommandLine", 
      JSIL.MethodSignature.Action($asm02.TypeRef("Microsoft.Build.Utilities.CommandLineBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AdditionalOptions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true }, "get_AlwaysAppend", 
      JSIL.MethodSignature.Return($.String), 
      CommandLineGenerator_get_AlwaysAppend
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_CommandLineTemplate", 
      JSIL.MethodSignature.Return($.String), 
      CommandLineGenerator_get_CommandLineTemplate
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "HasSwitch", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsPropertySet", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PerformSwitchValueSubstition", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("Microsoft.Build.Utilities.CommandLineBuilder"), $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyExists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AdditionalOptions", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:true }, "set_AlwaysAppend", 
      JSIL.MethodSignature.Action($.String), 
      CommandLineGenerator_set_AlwaysAppend
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CommandLineTemplate", 
      JSIL.MethodSignature.Action($.String), 
      CommandLineGenerator_set_CommandLineTemplate
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "VerifyDependenciesArePresent", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyRequiredArgumentsArePresent", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "switchOrderList", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Field({Static:false, Public:false}, "activeCommandLineToolSwitches", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")]));

    $.Field({Static:false, Public:false}, "additionalOptions", $.String);

    $.Field({Static:false, Public:false}, "CommandLineGenerator$CommandLineTemplate$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "CommandLineGenerator$AlwaysAppend$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "AdditionalOptions", $.String);

    $.Property({Static:false, Public:true }, "CommandLineTemplate", $.String);

    $.Property({Static:false, Public:true }, "AlwaysAppend", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.Xaml.CommandLineToolSwitchType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.Xaml.CommandLineToolSwitchType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Boolean: 0, 
    Integer: 1, 
    String: 2, 
    StringArray: 3, 
    ITaskItemArray: 4, 
  }
);

/* class Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch */ 

(function CommandLineToolSwitch$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };





  function CommandLineToolSwitch_get_ArgumentRequired () {
    return this.CommandLineToolSwitch$ArgumentRequired$value;
  }; 
























  function CommandLineToolSwitch_set_ArgumentRequired (value) {
    this.CommandLineToolSwitch$ArgumentRequired$value = value;
  }; 





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitchType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowMultipleValues", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_ArgumentRequired", 
      JSIL.MethodSignature.Return($.Boolean), 
      CommandLineToolSwitch_get_ArgumentRequired
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $.Boolean])]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BooleanValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FallbackArgumentParameter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FalseSuffix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeInCommandLine", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsValid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Number", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Overrides", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parents", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Required", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReverseSwitchValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reversible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Separator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StringList", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TaskItemArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrueSuffix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitchType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowMultipleValues", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:true }, "set_ArgumentRequired", 
      JSIL.MethodSignature.Action($.Boolean), 
      CommandLineToolSwitch_set_ArgumentRequired
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Arguments", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $.Boolean])]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BooleanValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisplayName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FallbackArgumentParameter", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FalseSuffix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IncludeInCommandLine", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsValid", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Number", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Required", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReverseSwitchValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Reversible", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Separator", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_StringList", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SwitchValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TaskItemArray", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrueSuffix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitchType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "TypeBoolean", $.String, "CommandLineToolSwitchType.Boolean");

    $.Constant({Static:true , Public:false}, "TypeInteger", $.String, "CommandLineToolSwitchType.Integer");

    $.Constant({Static:true , Public:false}, "TypeITaskItem", $.String, "CommandLineToolSwitchType.ITaskItem");

    $.Constant({Static:true , Public:false}, "TypeITaskItemArray", $.String, "CommandLineToolSwitchType.ITaskItemArray");

    $.Constant({Static:true , Public:false}, "TypeStringArray", $.String, "CommandLineToolSwitchType.StringArray");

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitchType"));

    $.Field({Static:false, Public:false}, "includeInCommandLine", $.Boolean);

    $.Field({Static:false, Public:false}, "falseSuffix", $.String);

    $.Field({Static:false, Public:false}, "trueSuffix", $.String);

    $.Field({Static:false, Public:false}, "separator", $.String);

    $.Field({Static:false, Public:false}, "fallback", $.String);

    $.Field({Static:false, Public:false}, "required", $.Boolean);

    $.Field({Static:false, Public:false}, "parents", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]));

    $.Field({Static:false, Public:false}, "overrides", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]));

    $.Field({Static:false, Public:false}, "isValid", $.Boolean);

    $.Field({Static:false, Public:false}, "reversible", $.Boolean);

    $.Field({Static:false, Public:false}, "allowMultipleValues", $.Boolean);

    $.Field({Static:false, Public:false}, "booleanValue", $.Boolean);

    $.Field({Static:false, Public:false}, "number", $.Int32);

    $.Field({Static:false, Public:false}, "stringList", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "taskItemArray", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Field({Static:false, Public:false}, "switchValue", $.String);

    $.Field({Static:false, Public:false}, "reverseSwitchValue", $.String);

    $.Field({Static:false, Public:false}, "$arguments", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $.Boolean])]));

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "CommandLineToolSwitch$ArgumentRequired$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IncludeInCommandLine", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "IsValid", $.Boolean);

    $.Property({Static:false, Public:true }, "SwitchValue", $.String);

    $.Property({Static:false, Public:true }, "ReverseSwitchValue", $.String);

    $.Property({Static:false, Public:true }, "Arguments", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $.Boolean])]));

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitchType"));

    $.Property({Static:false, Public:true }, "Reversible", $.Boolean);

    $.Property({Static:false, Public:true }, "AllowMultipleValues", $.Boolean);

    $.Property({Static:false, Public:true }, "FalseSuffix", $.String);

    $.Property({Static:false, Public:true }, "TrueSuffix", $.String);

    $.Property({Static:false, Public:true }, "Separator", $.String);

    $.Property({Static:false, Public:true }, "FallbackArgumentParameter", $.String);

    $.Property({Static:false, Public:true }, "ArgumentRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "Required", $.Boolean);

    $.Property({Static:false, Public:true }, "Parents", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]));

    $.Property({Static:false, Public:true }, "Overrides", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]));

    $.Property({Static:false, Public:true }, "BooleanValue", $.Boolean);

    $.Property({Static:false, Public:true }, "Number", $.Int32);

    $.Property({Static:false, Public:true }, "StringList", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "TaskItemArray", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Xaml.PropertyRelation */ 

(function PropertyRelation$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };




  function PropertyRelation_get_Argument () {
    return this.PropertyRelation$Argument$value;
  }; 

  function PropertyRelation_get_Required () {
    return this.PropertyRelation$Required$value;
  }; 

  function PropertyRelation_get_Value () {
    return this.PropertyRelation$Value$value;
  }; 

  function PropertyRelation_set_Argument (value) {
    this.PropertyRelation$Argument$value = value;
  }; 

  function PropertyRelation_set_Required (value) {
    this.PropertyRelation$Required$value = value;
  }; 

  function PropertyRelation_set_Value (value) {
    this.PropertyRelation$Value$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Xaml.PropertyRelation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.Method({Static:false, Public:true }, "get_Argument", 
      JSIL.MethodSignature.Return($.String), 
      PropertyRelation_get_Argument
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Required", 
      JSIL.MethodSignature.Return($.Boolean), 
      PropertyRelation_get_Required
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String), 
      PropertyRelation_get_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Argument", 
      JSIL.MethodSignature.Action($.String), 
      PropertyRelation_set_Argument
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Required", 
      JSIL.MethodSignature.Action($.Boolean), 
      PropertyRelation_set_Required
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String), 
      PropertyRelation_set_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PropertyRelation$Argument$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PropertyRelation$Value$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "PropertyRelation$Required$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Argument", $.String);

    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "Required", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Xaml.CommandLineArgumentRelation */ 

(function CommandLineArgumentRelation$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };



  function CommandLineArgumentRelation_get_Separator () {
    return this.CommandLineArgumentRelation$Separator$value;
  }; 

  function CommandLineArgumentRelation_set_Separator (value) {
    this.CommandLineArgumentRelation$Separator$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.PropertyRelation"), 
      Name: "Microsoft.Build.Tasks.Xaml.CommandLineArgumentRelation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean, $.String
        ])
    );

    $.Method({Static:false, Public:true }, "get_Separator", 
      JSIL.MethodSignature.Return($.String), 
      CommandLineArgumentRelation_get_Separator
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Separator", 
      JSIL.MethodSignature.Action($.String), 
      CommandLineArgumentRelation_set_Separator
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "CommandLineArgumentRelation$Separator$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Separator", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Xaml.SwitchRelations */ 

(function SwitchRelations$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Xaml.SwitchRelations", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Conflicts", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExcludedPlatforms", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExternalConflicts", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExternalOverrides", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExternalRequires", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludedPlatforms", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Overrides", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Requires", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Conflicts", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExcludedPlatforms", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExternalConflicts", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExternalOverrides", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExternalRequires", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IncludedPlatforms", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Overrides", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Requires", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Status", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SwitchValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "switchValue", $.String);

    $.Field({Static:false, Public:false}, "status", $.String);

    $.Field({Static:false, Public:false}, "includedPlatforms", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "excludedPlatforms", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "conflicts", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "overrides", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "requires", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "externalOverrides", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]));

    $.Field({Static:false, Public:false}, "externalConflicts", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]));

    $.Field({Static:false, Public:false}, "externalRequires", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]));

    $.Property({Static:false, Public:true }, "SwitchValue", $.String);

    $.Property({Static:false, Public:true }, "Status", $.String);

    $.Property({Static:false, Public:true }, "Conflicts", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Property({Static:false, Public:true }, "IncludedPlatforms", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Property({Static:false, Public:true }, "ExcludedPlatforms", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Property({Static:false, Public:true }, "Overrides", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Property({Static:false, Public:true }, "Requires", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Property({Static:false, Public:true }, "ExternalOverrides", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]));

    $.Property({Static:false, Public:true }, "ExternalConflicts", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]));

    $.Property({Static:false, Public:true }, "ExternalRequires", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Xaml.RelationsParser */ 

(function RelationsParser$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Xaml.RelationsParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseClass", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultPrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultSet", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorLog", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FallbackSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GeneratedTaskName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResourceNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchRelationsList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.SwitchRelations")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsXmlRootElement", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadFile", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlDocument"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadXml", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlDocument"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogError", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "ObtainAttributes", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Xaml.SwitchRelations"), [$asm2F.TypeRef("System.Xml.XmlNode"), $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.SwitchRelations")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseImportOption", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSwitch", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.SwitchRelations")]), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.SwitchRelations")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSwitchGroupOrSwitch", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.SwitchRelations")]), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.SwitchRelations")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ParseXmlDocument", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseXmlDocument", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_GeneratedTaskName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyAttributeExists", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyNodeName", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "toolName", $.String);

    $.Field({Static:false, Public:false}, "baseClass", $.String);

    $.Field({Static:false, Public:false}, "namespaceValue", $.String);

    $.Field({Static:false, Public:false}, "resourceNamespaceValue", $.String);

    $.Field({Static:false, Public:false}, "defaultPrefix", $.String);

    $.Field({Static:false, Public:false}, "properties", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]));

    $.Field({Static:false, Public:false}, "switchRelationsList", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.SwitchRelations")]));

    $.Field({Static:false, Public:false}, "defaultSet", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]));

    $.Field({Static:false, Public:false}, "fallbackSet", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "isImport", $.Boolean);

    $.Field({Static:false, Public:false}, "errorCount", $.Int32);

    $.Field({Static:false, Public:false}, "errorLog", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]));

    $.Constant({Static:true , Public:false}, "xmlNamespace", $.String, "http://schemas.microsoft.com/developer/msbuild/tasks/2005");

    $.Constant({Static:true , Public:false}, "toolNameString", $.String, "TOOLNAME");

    $.Constant({Static:true , Public:false}, "prefixString", $.String, "PREFIX");

    $.Constant({Static:true , Public:false}, "baseClassAttribute", $.String, "BASECLASS");

    $.Constant({Static:true , Public:false}, "namespaceAttribute", $.String, "NAMESPACE");

    $.Constant({Static:true , Public:false}, "resourceNamespaceAttribute", $.String, "RESOURCENAMESPACE");

    $.Constant({Static:true , Public:false}, "importType", $.String, "IMPORT");

    $.Constant({Static:true , Public:false}, "tasksAttribute", $.String, "TASKS");

    $.Constant({Static:true , Public:false}, "parameterType", $.String, "PARAMETER");

    $.Constant({Static:true , Public:false}, "parameterGroupType", $.String, "PARAMETERGROUP");

    $.Constant({Static:true , Public:false}, "enumType", $.String, "VALUE");

    $.Constant({Static:true , Public:false}, "task", $.String, "TASK");

    $.Constant({Static:true , Public:false}, "nameProperty", $.String, "NAME");

    $.Constant({Static:true , Public:false}, "status", $.String, "STATUS");

    $.Constant({Static:true , Public:false}, "switchName", $.String, "SWITCH");

    $.Constant({Static:true , Public:false}, "reverseSwitchName", $.String, "REVERSESWITCH");

    $.Constant({Static:true , Public:false}, "oldName", $.String, "OLDNAME");

    $.Constant({Static:true , Public:false}, "argumentType", $.String, "ARGUMENT");

    $.Constant({Static:true , Public:false}, "argumentValueName", $.String, "ARGUMENTVALUE");

    $.Constant({Static:true , Public:false}, "relations", $.String, "RELATIONS");

    $.Constant({Static:true , Public:false}, "switchGroupType", $.String, "SWITCHGROUP");

    $.Constant({Static:true , Public:false}, "switchType", $.String, "SWITCH");

    $.Constant({Static:true , Public:false}, "includedPlatformType", $.String, "INCLUDEDPLATFORM");

    $.Constant({Static:true , Public:false}, "excludedPlatformType", $.String, "EXCLUDEDPLATFORM");

    $.Constant({Static:true , Public:false}, "overridesType", $.String, "OVERRIDES");

    $.Constant({Static:true , Public:false}, "conflictsType", $.String, "CONFLICTS");

    $.Constant({Static:true , Public:false}, "requiresType", $.String, "REQUIRES");

    $.Constant({Static:true , Public:false}, "externalOverridesType", $.String, "EXTERNALOVERRIDES");

    $.Constant({Static:true , Public:false}, "externalConflictsType", $.String, "EXTERNALCONFLICTS");

    $.Constant({Static:true , Public:false}, "externalRequiresType", $.String, "EXTERNALREQUIRES");

    $.Constant({Static:true , Public:false}, "toolAttribute", $.String, "TOOL");

    $.Constant({Static:true , Public:false}, "switchAttribute", $.String, "SWITCH");

    $.Constant({Static:true , Public:false}, "typeProperty", $.String, "TYPE");

    $.Constant({Static:true , Public:false}, "typeAlways", $.String, "ALWAYS");

    $.Constant({Static:true , Public:false}, "trueProperty", $.String, "TRUE");

    $.Constant({Static:true , Public:false}, "falseProperty", $.String, "FALSE");

    $.Constant({Static:true , Public:false}, "minProperty", $.String, "MIN");

    $.Constant({Static:true , Public:false}, "maxProperty", $.String, "MAX");

    $.Constant({Static:true , Public:false}, "separatorProperty", $.String, "SEPARATOR");

    $.Constant({Static:true , Public:false}, "defaultProperty", $.String, "DEFAULT");

    $.Constant({Static:true , Public:false}, "fallbackProperty", $.String, "FALLBACKARGUMENTPARAMETER");

    $.Constant({Static:true , Public:false}, "outputProperty", $.String, "OUTPUT");

    $.Constant({Static:true , Public:false}, "argumentProperty", $.String, "ARGUMENTPARAMETER");

    $.Constant({Static:true , Public:false}, "argumentRequiredProperty", $.String, "REQUIRED");

    $.Constant({Static:true , Public:false}, "propertyRequiredProperty", $.String, "REQUIRED");

    $.Constant({Static:true , Public:false}, "reversibleProperty", $.String, "REVERSIBLE");

    $.Constant({Static:true , Public:false}, "categoryProperty", $.String, "CATEGORY");

    $.Constant({Static:true , Public:false}, "displayNameProperty", $.String, "DISPLAYNAME");

    $.Constant({Static:true , Public:false}, "descriptionProperty", $.String, "DESCRIPTION");

    $.Property({Static:false, Public:true }, "GeneratedTaskName", $.String);

    $.Property({Static:false, Public:true }, "BaseClass", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "ResourceNamespace", $.String);

    $.Property({Static:false, Public:true }, "ToolName", $.String);

    $.Property({Static:false, Public:true }, "DefaultPrefix", $.String);

    $.Property({Static:false, Public:true }, "Properties", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]));

    $.Property({Static:false, Public:true }, "DefaultSet", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]));

    $.Property({Static:false, Public:true }, "FallbackSet", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:true }, "ErrorCount", $.Int32);

    $.Property({Static:false, Public:true }, "ErrorLog", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]));

    $.Property({Static:false, Public:true }, "SwitchRelationsList", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.SwitchRelations")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.Xaml.PropertyType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.Xaml.PropertyType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Boolean: 1, 
    String: 2, 
    Integer: 3, 
    StringArray: 4, 
    ItemArray: 5, 
  }
);

/* class Microsoft.Build.Tasks.Xaml.Property */ 

(function Property$Members () {
  var $, $thisType;
















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Xaml.Property", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Argument", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Argument")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Category", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DependentArgumentProperties", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fallback", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FalseSuffix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeInCommandLine", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Max", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Min", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Output", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parents", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Required", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReverseSwitchName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reversible", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Separator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrueSuffix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Xaml.PropertyType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Value")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Argument", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Arguments", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Argument")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Category", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisplayName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Fallback", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FalseSuffix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IncludeInCommandLine", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Max", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Min", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Output", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Required", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReverseSwitchName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Reversible", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Separator", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SwitchName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrueSuffix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Xaml.PropertyType"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.PropertyType"));

    $.Field({Static:false, Public:false}, "includeInCommandLine", $.Boolean);

    $.Field({Static:false, Public:false}, "reversible", $.String);

    $.Field({Static:false, Public:false}, "switchName", $.String);

    $.Field({Static:false, Public:false}, "reverseSwitchName", $.String);

    $.Field({Static:false, Public:false}, "falseSuffix", $.String);

    $.Field({Static:false, Public:false}, "trueSuffix", $.String);

    $.Field({Static:false, Public:false}, "max", $.String);

    $.Field({Static:false, Public:false}, "min", $.String);

    $.Field({Static:false, Public:false}, "separator", $.String);

    $.Field({Static:false, Public:false}, "defaultValue", $.String);

    $.Field({Static:false, Public:false}, "argument", $.String);

    $.Field({Static:false, Public:false}, "fallback", $.String);

    $.Field({Static:false, Public:false}, "required", $.String);

    $.Field({Static:false, Public:false}, "output", $.Boolean);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "category", $.String);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "parents", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]));

    $.Field({Static:false, Public:false}, "dependencies", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.Type]));

    $.Field({Static:false, Public:false}, "values", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Value")]));

    $.Field({Static:false, Public:false}, "$arguments", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Argument")]));

    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.PropertyType"));

    $.Property({Static:false, Public:true }, "IncludeInCommandLine", $.Boolean);

    $.Property({Static:false, Public:true }, "Reversible", $.String);

    $.Property({Static:false, Public:true }, "SwitchName", $.String);

    $.Property({Static:false, Public:true }, "ReverseSwitchName", $.String);

    $.Property({Static:false, Public:true }, "FalseSuffix", $.String);

    $.Property({Static:false, Public:true }, "TrueSuffix", $.String);

    $.Property({Static:false, Public:true }, "Max", $.String);

    $.Property({Static:false, Public:true }, "Min", $.String);

    $.Property({Static:false, Public:true }, "Separator", $.String);

    $.Property({Static:false, Public:true }, "DefaultValue", $.String);

    $.Property({Static:false, Public:true }, "Argument", $.String);

    $.Property({Static:false, Public:true }, "Fallback", $.String);

    $.Property({Static:false, Public:true }, "Required", $.String);

    $.Property({Static:false, Public:true }, "Output", $.Boolean);

    $.Property({Static:false, Public:true }, "Parents", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "DependentArgumentProperties", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.Type]));

    $.Property({Static:false, Public:true }, "Values", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Value")]));

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Category", $.String);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "Arguments", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Argument")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Xaml.Value */ 

(function Value$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Xaml.Value", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Argument")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReverseSwitchName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Arguments", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Argument")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisplayName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReverseSwitchName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SwitchName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "switchName", $.String);

    $.Field({Static:false, Public:false}, "reverseSwitchName", $.String);

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "$arguments", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Argument")]));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "SwitchName", $.String);

    $.Property({Static:false, Public:true }, "ReverseSwitchName", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Arguments", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Argument")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Xaml.Argument */ 

(function Argument$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Xaml.Argument", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Required", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Separator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Parameter", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Required", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Separator", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "parameter", $.String);

    $.Field({Static:false, Public:false}, "separator", $.String);

    $.Field({Static:false, Public:false}, "required", $.Boolean);

    $.Property({Static:false, Public:true }, "Parameter", $.String);

    $.Property({Static:false, Public:true }, "Separator", $.String);

    $.Property({Static:false, Public:true }, "Required", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Xaml.TaskGenerator */ 

(function TaskGenerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };



























  function TaskGenerator_get_GenerateComments () {
    return this.TaskGenerator$GenerateComments$value;
  }; 




  function TaskGenerator_set_GenerateComments (value) {
    this.TaskGenerator$GenerateComments$value = value;
  }; 


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Xaml.TaskGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Xaml.TaskParser"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsCurrentPlatform", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsCurrentPlatform", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateAssignPropertyToString", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.CodeDom.CodeMemberProperty"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateAssignPropertyToValue", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.CodeDom.CodeMemberProperty"), $.String, 
          $asm0A.TypeRef("System.CodeDom.CodeExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateAssignToolSwitch", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.CodeDom.CodeMemberProperty"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBooleans", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property"), $asm0A.TypeRef("System.CodeDom.CodeMemberProperty")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCode", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeCompileUnit"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCommon", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property"), $asm0A.TypeRef("System.CodeDom.CodeMemberProperty"), 
          $.String, $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCommonSetStatements", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property"), $asm0A.TypeRef("System.CodeDom.CodeMemberProperty"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConstructor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateDefaultSetProperties", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateFallbacks", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateImports", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeNamespace"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateIntegers", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property"), $asm0A.TypeRef("System.CodeDom.CodeMemberProperty")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateITaskItemArray", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property"), $asm0A.TypeRef("System.CodeDom.CodeMemberProperty")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateOverrides", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property"), $asm0A.TypeRef("System.CodeDom.CodeMemberProperty")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateProperties", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateRelations", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateStringArrays", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property"), $asm0A.TypeRef("System.CodeDom.CodeMemberProperty")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateStrings", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property"), $asm0A.TypeRef("System.CodeDom.CodeMemberProperty")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateToolNameProperty", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorLog", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]))
    );

    $.Method({Static:false, Public:true }, "get_GenerateComments", 
      JSIL.MethodSignature.Return($.Boolean), 
      TaskGenerator_get_GenerateComments
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Platform", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "LogError", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "messageArgs", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "RemovePropertiesWithIgnoredTypes", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]))
    );

    $.Method({Static:false, Public:true }, "set_GenerateComments", 
      JSIL.MethodSignature.Action($.Boolean), 
      TaskGenerator_set_GenerateComments
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SurroundWithQuotes", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "BaseClass", $.String, "DataDrivenToolTask");

    $.Constant({Static:true , Public:false}, "NamespaceOfGeneratedTask", $.String, "MyDataDrivenTasks");

    $.Constant({Static:true , Public:false}, "ToolNamePropertyName", $.String, "ToolName");

    $.Constant({Static:true , Public:false}, "ToolExePropertyName", $.String, "ToolExe");

    $.Constant({Static:true , Public:false}, "ToolExeFieldName", $.String, "toolExe");

    $.Constant({Static:true , Public:false}, "IsOn", $.String, "true");

    $.Constant({Static:true , Public:false}, "IsOff", $.String, "false");

    $.Constant({Static:true , Public:false}, "AlwaysType", $.String, "always");

    $.Constant({Static:true , Public:false}, "ValueAttribute", $.String, "value");

    $.Constant({Static:true , Public:false}, "TypeAlways", $.String, "always");

    $.Constant({Static:true , Public:false}, "TypeBoolean", $.String, "Boolean");

    $.Constant({Static:true , Public:false}, "TypeInteger", $.String, "Integer");

    $.Constant({Static:true , Public:false}, "TypeString", $.String, "String");

    $.Constant({Static:true , Public:false}, "TypeStringArray", $.String, "StringArray");

    $.Constant({Static:true , Public:false}, "TypeFile", $.String, "File");

    $.Constant({Static:true , Public:false}, "TypeDirectory", $.String, "Directory");

    $.Constant({Static:true , Public:false}, "TypeITaskItem", $.String, "ITaskItem");

    $.Constant({Static:true , Public:false}, "TypeITaskItemArray", $.String, "ITaskItemArray");

    $.Constant({Static:true , Public:false}, "TypeKeyValuePairStrings", $.String, "KeyValuePair<string,string>");

    $.Constant({Static:true , Public:false}, "ImportType", $.String, "import");

    $.Constant({Static:true , Public:false}, "TypeToolSwitch", $.String, "CommandLineToolSwitch");

    $.Constant({Static:true , Public:false}, "TypeToolSwitchType", $.String, "CommandLineToolSwitchType");

    $.Constant({Static:true , Public:false}, "TypeAlwaysAppend", $.String, "AlwaysAppend");

    $.Constant({Static:true , Public:false}, "TypeArgumentRelation", $.String, "CommandLineArgumentRelation");

    $.Constant({Static:true , Public:false}, "SwitchToAdd", $.String, "switchToAdd");

    $.Constant({Static:true , Public:false}, "DictionaryOfSwitches", $.String, "ActiveToolSwitches");

    $.Constant({Static:true , Public:false}, "DictionaryOfSwitchesValues", $.String, "ActiveToolSwitchesValues");

    $.Constant({Static:true , Public:false}, "SwitchMap", $.String, "switchMap");

    $.Constant({Static:true , Public:false}, "MultiValues", $.String, "AllowMultipleValues");

    $.Constant({Static:true , Public:false}, "Relation", $.String, "relation");

    $.Constant({Static:true , Public:false}, "AddMethod", $.String, "Add");

    $.Constant({Static:true , Public:false}, "AddLastMethod", $.String, "AddLast");

    $.Constant({Static:true , Public:false}, "AppendAlwaysMethod", $.String, "AlwaysAppend");

    $.Constant({Static:true , Public:false}, "ValidateIntegerMethod", $.String, "ValidateInteger");

    $.Constant({Static:true , Public:false}, "ReadSwitchMapMethod", $.String, "ReadSwitchMap2");

    $.Constant({Static:true , Public:false}, "RemoveMethod", $.String, "Remove");

    $.Constant({Static:true , Public:false}, "IsPropertySetMethod", $.String, "IsPropertySet");

    $.Constant({Static:true , Public:false}, "IsSwitchValueSetMethod", $.String, "IsSwitchValueSet");

    $.Constant({Static:true , Public:false}, "EnsureTrailingSlashMethod", $.String, "EnsureTrailingSlash");

    $.Constant({Static:true , Public:false}, "AddDefaultsToActiveSwitchList", $.String, "AddDefaultsToActiveSwitchList");

    $.Constant({Static:true , Public:false}, "AddFallbacksToActiveSwitchList", $.String, "AddFallbacksToActiveSwitchList");

    $.Constant({Static:true , Public:false}, "ValidateRelationsMethod", $.String, "ValidateRelations");

    $.Constant({Static:true , Public:false}, "ReplaceToolSwitchMethod", $.String, "ReplaceToolSwitch");

    $.Constant({Static:true , Public:false}, "AddActiveSwitchToolValueMethod", $.String, "AddActiveSwitchToolValue");

    $.Constant({Static:true , Public:false}, "Overrides", $.String, "Overrides");

    $.Constant({Static:true , Public:false}, "NameProperty", $.String, "Name");

    $.Constant({Static:true , Public:false}, "BooleanValueProperty", $.String, "BooleanValue");

    $.Constant({Static:true , Public:false}, "FileNameProperty", $.String, "Value");

    $.Constant({Static:true , Public:false}, "TaskItemProperty", $.String, "TaskItem");

    $.Constant({Static:true , Public:false}, "TaskItemArrayProperty", $.String, "TaskItemArray");

    $.Constant({Static:true , Public:false}, "StringListProperty", $.String, "StringList");

    $.Constant({Static:true , Public:false}, "NumberProperty", $.String, "Number");

    $.Constant({Static:true , Public:false}, "FalseSuffixProperty", $.String, "FalseSuffix");

    $.Constant({Static:true , Public:false}, "TrueSuffixProperty", $.String, "TrueSuffix");

    $.Constant({Static:true , Public:false}, "SeparatorProperty", $.String, "Separator");

    $.Constant({Static:true , Public:false}, "FallbackProperty", $.String, "FallbackArgumentParameter");

    $.Constant({Static:true , Public:false}, "OutputProperty", $.String, "Output");

    $.Constant({Static:true , Public:false}, "ArgumentProperty", $.String, "ArgumentParameter");

    $.Constant({Static:true , Public:false}, "ArgumentRequiredProperty", $.String, "ArgumentRequired");

    $.Constant({Static:true , Public:false}, "PropertyRequiredProperty", $.String, "Required");

    $.Constant({Static:true , Public:false}, "ParentProperty", $.String, "Parents");

    $.Constant({Static:true , Public:false}, "ReversibleProperty", $.String, "Reversible");

    $.Constant({Static:true , Public:false}, "SwitchValueProperty", $.String, "SwitchValue");

    $.Constant({Static:true , Public:false}, "ValueProperty", $.String, "Value");

    $.Constant({Static:true , Public:false}, "RequiredProperty", $.String, "Required");

    $.Constant({Static:true , Public:false}, "ArgumentRelationList", $.String, "ArgumentRelationList");

    $.Constant({Static:true , Public:false}, "DisplayNameProperty", $.String, "DisplayName");

    $.Constant({Static:true , Public:false}, "DescriptionProperty", $.String, "Description");

    $.Constant({Static:true , Public:false}, "ReverseSwitchValueProperty", $.String, "ReverseSwitchValue");

    $.Constant({Static:true , Public:false}, "IsValidProperty", $.String, "IsValid");

    $.Constant({Static:true , Public:false}, "TypeProperty", $.String, "Type");

    $.Field({Static:false, Public:false}, "propertiesTypesToIgnore", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "platform", $.String);

    $.Field({Static:false, Public:false}, "errorCount", $.Int32);

    $.Field({Static:false, Public:false}, "errorLog", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]));

    $.Field({Static:false, Public:false}, "taskParser", $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.TaskParser"));

    $.Field({Static:false, Public:false}, "relationsParser", $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.RelationsParser"));

    $.Field({Static:false, Public:false}, "TaskGenerator$GenerateComments$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "GenerateComments", $.Boolean);

    $.Property({Static:false, Public:false}, "Platform", $.String);

    $.Property({Static:false, Public:false}, "ErrorCount", $.Int32);

    $.Property({Static:false, Public:false}, "ErrorLog", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Xaml.TaskParser */ 

(function TaskParser$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Xaml.TaskParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseClass", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultPrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultSet", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorLog", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FallbackSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GeneratedTaskName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResourceNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchOrderList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ObtainAttributes", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property"), [$asm00.TypeRef("Microsoft.Build.Framework.XamlTypes.BaseProperty"), $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Parse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseParameter", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.Build.Framework.XamlTypes.BaseProperty"), $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property"), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseParameterGroupOrParameter", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.Build.Framework.XamlTypes.BaseProperty"), $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property"), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseXamlDocument", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.IO.TextReader"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseXamlDocument", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.XamlTypes.Rule")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_GeneratedTaskName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "toolName", $.String);

    $.Field({Static:false, Public:false}, "baseClass", $.String);

    $.Field({Static:false, Public:false}, "namespaceValue", $.String);

    $.Field({Static:false, Public:false}, "resourceNamespaceValue", $.String);

    $.Field({Static:false, Public:false}, "defaultPrefix", $.String);

    $.Field({Static:false, Public:false}, "properties", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]));

    $.Field({Static:false, Public:false}, "defaultSet", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]));

    $.Field({Static:false, Public:false}, "fallbackSet", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "switchesAdded", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]));

    $.Field({Static:false, Public:false}, "switchOrderList", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "errorLog", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]));

    $.Property({Static:false, Public:true }, "GeneratedTaskName", $.String);

    $.Property({Static:false, Public:true }, "BaseClass", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "ResourceNamespace", $.String);

    $.Property({Static:false, Public:true }, "ToolName", $.String);

    $.Property({Static:false, Public:true }, "DefaultPrefix", $.String);

    $.Property({Static:false, Public:true }, "Properties", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]));

    $.Property({Static:false, Public:true }, "DefaultSet", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Xaml.Property")]));

    $.Property({Static:false, Public:true }, "FallbackSet", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:true }, "SwitchOrderList", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true }, "ErrorLog", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Xaml.XamlDataDrivenToolTask */ 

(function XamlDataDrivenToolTask$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };















  function XamlDataDrivenToolTask_get_CommandLineTemplate () {
    return this.XamlDataDrivenToolTask$CommandLineTemplate$value;
  }; 

















  function XamlDataDrivenToolTask_set_CommandLineTemplate (value) {
    this.XamlDataDrivenToolTask$CommandLineTemplate$value = value;
  }; 





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Build.Utilities.ToolTask"), 
      Name: "Microsoft.Build.Tasks.Xaml.XamlDataDrivenToolTask", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $asm07.TypeRef("System.Resources.ResourceManager")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddActiveSwitchToolValue", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSwitchValue", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Tuple`2", [$.String, $.Boolean])])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateCommandLineCommands", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCommands", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateFullPathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateResponseFileCommands", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AcceptableNonZeroExitCodes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ActiveToolSwitches", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActiveToolSwitchesValues", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AdditionalOptions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CommandLine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true }, "get_CommandLineTemplate", 
      JSIL.MethodSignature.Return($.String), 
      XamlDataDrivenToolTask_get_CommandLineTemplate
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ResponseFileEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_SwitchOrderList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCommandLine_ForUnitTestsOnly", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HandleTaskExecutionErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "HasSwitch", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeLogger", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAcceptableReturnValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsPropertySet", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PostProcessSwitchList", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadSwitchMap", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.String])]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadSwitchMap2", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Tuple`3", [
                $.String, $.String, 
                $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Tuple`2", [$.String, $.Boolean])])
              ])]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReplaceToolSwitch", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_AcceptableNonZeroExitCodes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ActiveToolSwitchesValues", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AdditionalOptions", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CommandLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:true }, "set_CommandLineTemplate", 
      JSIL.MethodSignature.Action($.String), 
      XamlDataDrivenToolTask_set_CommandLineTemplate
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ValidateInteger", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateOverrides", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateRelations", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "switchOrderList", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Field({Static:false, Public:false}, "activeToolSwitches", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")]));

    $.Field({Static:false, Public:false}, "values", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])]));

    $.Field({Static:false, Public:false}, "additionalOptions", $.String);

    $.Field({Static:false, Public:false}, "skipResponseFileCommandGeneration", $.Boolean);

    $.Field({Static:false, Public:false}, "logPrivate", $asm02.TypeRef("Microsoft.Build.Utilities.TaskLoggingHelper"));

    $.Field({Static:false, Public:false}, "activeToolSwitchesValues", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")]));

    $.Field({Static:false, Public:false}, "acceptableNonZeroExitCodes", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "commandLine", $.String);

    $.Field({Static:false, Public:false}, "XamlDataDrivenToolTask$CommandLineTemplate$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "CommandLineTemplate", $.String);

    $.Property({Static:false, Public:true }, "AdditionalOptions", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AcceptableNonZeroExitCodes", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "ActiveToolSwitchesValues", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")]));

    $.Property({Static:false, Public:false, Virtual:true }, "SwitchOrderList", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:false}, "ActiveToolSwitches", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Xaml.CommandLineToolSwitch")]));

    $.Property({Static:false, Public:false, Virtual:true }, "ResponseFileEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false}, "CommandLine", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Build.Tasks.InteropUtilities");
/* class Microsoft.Build.Tasks.InteropUtilities.RCWForCurrentContext`1 */ 

(function RCWForCurrentContext$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.InteropUtilities.RCWForCurrentContext`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupComObject", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true }, "get_RCW", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.Field({Static:false, Public:false}, "rcwForCurrentCtx", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "shouldReleaseRCW", $.Boolean);

    $.Property({Static:false, Public:true }, "RCW", $.GenericParameter("T"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Build.Tasks.Hosting");
/* interface Microsoft.Build.Tasks.Hosting.ICscHostObject */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Hosting.ICscHostObject", true, [], function ($) {
    $.Method({}, "IsDesignTime", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "Compile", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "BeginInitialization", JSIL.MethodSignature.Void);
    $.Method({}, "EndInitialization", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]));
    $.Method({}, "SetAdditionalLibPaths", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.String])]));
    $.Method({}, "SetAddModules", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.String])]));
    $.Method({}, "SetAllowUnsafeBlocks", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetBaseAddress", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetCheckForOverflowUnderflow", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetCodePage", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Method({}, "SetDebugType", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetDefineConstants", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetDelaySign", new JSIL.MethodSignature($.Boolean, [$.Boolean, $.Boolean]));
    $.Method({}, "SetDisabledWarnings", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetDocumentationFile", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetEmitDebugInformation", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetErrorReport", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetFileAlignment", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Method({}, "SetGenerateFullPaths", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetKeyContainer", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetKeyFile", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetLangVersion", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetLinkResources", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]));
    $.Method({}, "SetMainEntryPoint", new JSIL.MethodSignature($.Boolean, [$.String, $.String]));
    $.Method({}, "SetModuleAssemblyName", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetNoConfig", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetNoStandardLib", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetOptimize", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetOutputAssembly", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetPlatform", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetPdbFile", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetReferences", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]));
    $.Method({}, "SetResources", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]));
    $.Method({}, "SetResponseFiles", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]));
    $.Method({}, "SetSources", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]));
    $.Method({}, "SetTargetType", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetTreatWarningsAsErrors", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetWarningLevel", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Method({}, "SetWarningsAsErrors", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetWarningsNotAsErrors", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetWin32Icon", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetWin32Resource", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "IsUpToDate", JSIL.MethodSignature.Return($.Boolean));
  }, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskHost")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["8520CC4D-64DC-4855-BE3F-4C28CCE048EE"]; });

/* interface Microsoft.Build.Tasks.Hosting.ICscHostObject2 */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Hosting.ICscHostObject2", true, [], function ($) {
    $.Method({}, "SetWin32Manifest", new JSIL.MethodSignature($.Boolean, [$.String]));
  }, [$asm01.TypeRef("Microsoft.Build.Tasks.Hosting.ICscHostObject"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskHost")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["D6D4E228-259A-4076-B5D0-0627338BCC10"]; });

/* interface Microsoft.Build.Tasks.Hosting.ICscHostObject3 */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Hosting.ICscHostObject3", true, [], function ($) {
    $.Method({}, "SetApplicationConfiguration", new JSIL.MethodSignature($.Boolean, [$.String]));
  }, [$asm01.TypeRef("Microsoft.Build.Tasks.Hosting.ICscHostObject2"), $asm01.TypeRef("Microsoft.Build.Tasks.Hosting.ICscHostObject"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskHost")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["F9353662-F1ED-4a23-A323-5F5047E85F5D"]; });

/* interface Microsoft.Build.Tasks.Hosting.ICscHostObject4 */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Hosting.ICscHostObject4", true, [], function ($) {
    $.Method({}, "SetPlatformWith32BitPreference", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetHighEntropyVA", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetSubsystemVersion", new JSIL.MethodSignature($.Boolean, [$.String]));
  }, [$asm01.TypeRef("Microsoft.Build.Tasks.Hosting.ICscHostObject3"), $asm01.TypeRef("Microsoft.Build.Tasks.Hosting.ICscHostObject2"), $asm01.TypeRef("Microsoft.Build.Tasks.Hosting.ICscHostObject"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskHost")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0DDB496F-C93C-492C-87F1-90B6FDBAA833"]; });

/* interface Microsoft.Build.Tasks.Hosting.IVbcHostObject */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Hosting.IVbcHostObject", true, [], function ($) {
    $.Method({}, "BeginInitialization", JSIL.MethodSignature.Void);
    $.Method({}, "EndInitialization", JSIL.MethodSignature.Void);
    $.Method({}, "IsDesignTime", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "Compile", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "SetAdditionalLibPaths", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.String])]));
    $.Method({}, "SetAddModules", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.String])]));
    $.Method({}, "SetBaseAddress", new JSIL.MethodSignature($.Boolean, [$.String, $.String]));
    $.Method({}, "SetCodePage", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Method({}, "SetDebugType", new JSIL.MethodSignature($.Boolean, [$.Boolean, $.String]));
    $.Method({}, "SetDefineConstants", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetDelaySign", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetDisabledWarnings", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetDocumentationFile", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetErrorReport", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetFileAlignment", new JSIL.MethodSignature($.Boolean, [$.Int32]));
    $.Method({}, "SetGenerateDocumentation", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetImports", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]));
    $.Method({}, "SetKeyContainer", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetKeyFile", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetLinkResources", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]));
    $.Method({}, "SetMainEntryPoint", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetNoConfig", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetNoStandardLib", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetNoWarnings", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetOptimize", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetOptionCompare", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetOptionExplicit", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetOptionStrict", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetOptionStrictType", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetOutputAssembly", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetPlatform", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetReferences", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]));
    $.Method({}, "SetRemoveIntegerChecks", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetResources", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]));
    $.Method({}, "SetResponseFiles", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]));
    $.Method({}, "SetRootNamespace", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetSdkPath", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetSources", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])]));
    $.Method({}, "SetTargetCompactFramework", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetTargetType", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetTreatWarningsAsErrors", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetWarningsAsErrors", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetWarningsNotAsErrors", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetWin32Icon", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetWin32Resource", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "IsUpToDate", JSIL.MethodSignature.Return($.Boolean));
  }, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskHost")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["7D7AC3BE-253A-40e8-A3FF-357D0DA7C47A"]; });

/* interface Microsoft.Build.Tasks.Hosting.IVbcHostObject2 */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Hosting.IVbcHostObject2", true, [], function ($) {
    $.Method({}, "SetOptionInfer", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetModuleAssemblyName", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetWin32Manifest", new JSIL.MethodSignature($.Boolean, [$.String]));
  }, [$asm01.TypeRef("Microsoft.Build.Tasks.Hosting.IVbcHostObject"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskHost")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["f59afc84-d102-48b1-a090-1b90c79d3e09"]; });

/* interface Microsoft.Build.Tasks.Hosting.IVbcHostObject3 */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Hosting.IVbcHostObject3", true, [], function ($) {
    $.Method({}, "SetLanguageVersion", new JSIL.MethodSignature($.Boolean, [$.String]));
  }, [$asm01.TypeRef("Microsoft.Build.Tasks.Hosting.IVbcHostObject2"), $asm01.TypeRef("Microsoft.Build.Tasks.Hosting.IVbcHostObject"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskHost")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["1186fe8f-8aba-48d6-8ce3-32ca42f53728"]; });

/* interface Microsoft.Build.Tasks.Hosting.IVbcHostObject4 */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Hosting.IVbcHostObject4", true, [], function ($) {
    $.Method({}, "SetVBRuntime", new JSIL.MethodSignature($.Boolean, [$.String]));
  }, [$asm01.TypeRef("Microsoft.Build.Tasks.Hosting.IVbcHostObject3"), $asm01.TypeRef("Microsoft.Build.Tasks.Hosting.IVbcHostObject2"), $asm01.TypeRef("Microsoft.Build.Tasks.Hosting.IVbcHostObject"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskHost")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["2AE3233C-8AB3-48A0-9ED9-6E3545B3C566"]; });

/* interface Microsoft.Build.Tasks.Hosting.IVbcHostObject5 */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Hosting.IVbcHostObject5", true, [], function ($) {
    $.Method({}, "GetFreeThreadedHostObject", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Hosting.IVbcHostObjectFreeThreaded")));
    $.Method({}, "CompileAsync", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]));
    $.Method({}, "EndCompile", new JSIL.MethodSignature($.Int32, [$.Boolean]));
    $.Method({}, "SetPlatformWith32BitPreference", new JSIL.MethodSignature($.Boolean, [$.String]));
    $.Method({}, "SetHighEntropyVA", new JSIL.MethodSignature($.Boolean, [$.Boolean]));
    $.Method({}, "SetSubsystemVersion", new JSIL.MethodSignature($.Boolean, [$.String]));
  }, [$asm01.TypeRef("Microsoft.Build.Tasks.Hosting.IVbcHostObject4"), $asm01.TypeRef("Microsoft.Build.Tasks.Hosting.IVbcHostObject3"), $asm01.TypeRef("Microsoft.Build.Tasks.Hosting.IVbcHostObject2"), $asm01.TypeRef("Microsoft.Build.Tasks.Hosting.IVbcHostObject"), $asm00.TypeRef("Microsoft.Build.Framework.ITaskHost")])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["5ACF41FF-6F2B-4623-8146-740C89212B21"]; });

/* interface Microsoft.Build.Tasks.Hosting.IVbcHostObjectFreeThreaded */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Hosting.IVbcHostObjectFreeThreaded", true, [], function ($) {
    $.Method({}, "Compile", JSIL.MethodSignature.Return($.Boolean));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["ECCF972F-8C2D-4F51-9746-9288661DE2CB"]; });

JSIL.DeclareNamespace("Microsoft.Build.Tasks.Deployment");
JSIL.DeclareNamespace("Microsoft.Build.Tasks.Deployment.ManifestUtilities");
/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.ApplicationIdentity */ 

(function ApplicationIdentity$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.ApplicationIdentity", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "applicationManifestIdentity", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "deployManifestIdentity", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "url", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest */ 

(function Manifest$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CollectionToArray", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyIdentity", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyReferences", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReferenceCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EntryPoint", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileReferences", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReferenceCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InputStream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputMessages", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourcePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TreatUnfoundNativeAssembliesAsPrerequisites", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlAssemblyIdentity", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlAssemblyReferences", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlDescription", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlFileReferences", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSchema", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMismatchedPlatform", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAfterLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeforeSave", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveAssembly", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveFile", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.BaseReference"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResolveFiles", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ResolveFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveFiles_1", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveFiles_2", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolvePath", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyIdentity", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_EntryPoint", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InputStream", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReadOnly", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SourcePath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TreatUnfoundNativeAssembliesAsPrerequisites", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlAssemblyIdentity", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlAssemblyReferences", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlDescription", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlFileReferences", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSchema", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SortFiles", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateAssemblyReference", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEntryPoint", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "UpdateFileInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "UpdateFileInfo", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateFileInfoImpl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateFileReference", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.BaseReference"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidatePlatform", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateReferences", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "assemblyIdentity", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"));

    $.Field({Static:false, Public:false}, "assemblyReferences", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference")]));

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "fileReferences", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference")]));

    $.Field({Static:false, Public:false}, "sourcePath", $.String);

    $.Field({Static:false, Public:false}, "inputStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "fileReferenceList", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReferenceCollection"));

    $.Field({Static:false, Public:false}, "assemblyReferenceList", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReferenceCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "outputMessages", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageCollection"));

    $.Field({Static:false, Public:false}, "treatUnfoundNativeAssembliesAsPrerequisites", $.Boolean);

    $.Field({Static:false, Public:false}, "readOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "AssemblyIdentity", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "AssemblyReferences", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReferenceCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Description", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "EntryPoint", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "FileReferences", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReferenceCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "InputStream", $asm07.TypeRef("System.IO.Stream"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "OutputMessages", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ReadOnly", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "SourcePath", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "TreatUnfoundNativeAssembliesAsPrerequisites", $.Boolean);

    $.Property({Static:false, Public:true }, "XmlAssemblyIdentity", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["AssemblyIdentity"]; });

    $.Property({Static:false, Public:true }, "XmlAssemblyReferences", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference")]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), function () { return ["AssemblyReferences"]; });

    $.Property({Static:false, Public:true }, "XmlDescription", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Description"]; });

    $.Property({Static:false, Public:true }, "XmlFileReferences", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference")]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), function () { return ["FileReferences"]; });

    $.Property({Static:false, Public:true }, "XmlSchema", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Schema"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest+ReferenceComparer */ 

(function ReferenceComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest+ReferenceComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyManifest */ 

(function AssemblyManifest$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyManifest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExternalProxyStubs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlExternalProxyStubs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlExternalProxyStubs", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub")]))
    );

    $.Field({Static:false, Public:false}, "externalProxyStubs", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub")]));

    $.Property({Static:false, Public:true }, "ExternalProxyStubs", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub")]))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "XmlExternalProxyStubs", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub")]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), function () { return ["ExternalProxyStubs"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["AssemblyManifest"]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.ApplicationManifest */ 

(function ApplicationManifest$Members () {
  var $, $thisType;



























































































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyManifest"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.ApplicationManifest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupClrVersion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupEntryPoint", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConfigFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EntryPoint", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorReportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileAssociations", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociationCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostInBrowser", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IconFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsClickOnceManifest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxTargetPath", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OSDescription", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OSSupportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OSVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Product", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Publisher", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SuiteName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TrustInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseApplicationTrust", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WinXPRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlConfigFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlEntryPointIdentity", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlEntryPointParameters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlEntryPointPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlErrorReportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlFileAssociations", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociation")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlHostInBrowser", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlIconFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlIsClickOnceManifest", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlOSBuild", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlOSDescription", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlOSMajor", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlOSMinor", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlOSRevision", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlOSSupportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlProduct", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlPublisher", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSuiteName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSupportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlUseApplicationTrust", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeforeSave", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConfigFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_EntryPoint", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ErrorReportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HostInBrowser", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IconFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsClickOnceManifest", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxTargetPath", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OSDescription", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OSSupportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OSVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Product", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Publisher", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SuiteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SupportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrustInfo", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TrustInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseApplicationTrust", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlConfigFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlEntryPointIdentity", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlEntryPointParameters", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlEntryPointPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlErrorReportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlFileAssociations", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociation")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlHostInBrowser", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlIconFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlIsClickOnceManifest", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlOSBuild", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlOSDescription", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlOSMajor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlOSMinor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlOSRevision", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlOSSupportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlProduct", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlPublisher", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSuiteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSupportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlUseApplicationTrust", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateEntryPoint", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateCom", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateConfig", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEntryPoint", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateFileAssociations", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateReferenceForPartialTrust", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TrustInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateReferencesForClickOnceApplication", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateReferencesForNativeApplication", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "configFile", $.String);

    $.Field({Static:false, Public:false}, "entryPointIdentity", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"));

    $.Field({Static:false, Public:false}, "entryPoint", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"));

    $.Field({Static:false, Public:false}, "entryPointParameters", $.String);

    $.Field({Static:false, Public:false}, "entryPointPath", $.String);

    $.Field({Static:false, Public:false}, "errorReportUrl", $.String);

    $.Field({Static:false, Public:false}, "iconFile", $.String);

    $.Field({Static:false, Public:false}, "isClickOnceManifest", $.Boolean);

    $.Field({Static:false, Public:false}, "oSMajor", $.String);

    $.Field({Static:false, Public:false}, "oSMinor", $.String);

    $.Field({Static:false, Public:false}, "oSBuild", $.String);

    $.Field({Static:false, Public:false}, "oSRevision", $.String);

    $.Field({Static:false, Public:false}, "oSSupportUrl", $.String);

    $.Field({Static:false, Public:false}, "oSDescription", $.String);

    $.Field({Static:false, Public:false}, "trustInfo", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TrustInfo"));

    $.Field({Static:false, Public:false}, "maxTargetPath", $.Int32);

    $.Field({Static:false, Public:false}, "hostInBrowser", $.Boolean);

    $.Field({Static:false, Public:false}, "useApplicationTrust", $.Boolean);

    $.Field({Static:false, Public:false}, "product", $.String);

    $.Field({Static:false, Public:false}, "publisher", $.String);

    $.Field({Static:false, Public:false}, "suiteName", $.String);

    $.Field({Static:false, Public:false}, "supportUrl", $.String);

    $.Field({Static:false, Public:false}, "fileAssociations", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociation")]));

    $.Field({Static:false, Public:false}, "fileAssociationList", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociationCollection"));

    $.Field({Static:false, Public:false}, "targetFrameworkVersion", $.String);

    $.Property({Static:false, Public:true }, "ConfigFile", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "EntryPoint", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "TargetFrameworkVersion", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ErrorReportUrl", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "WinXPRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "FileAssociations", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociationCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "HostInBrowser", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "IconFile", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "IsClickOnceManifest", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "MaxTargetPath", $.Int32)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "OSDescription", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "OSSupportUrl", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "OSVersion", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Product", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Publisher", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "SuiteName", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "SupportUrl", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "TrustInfo", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TrustInfo"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "UseApplicationTrust", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "XmlConfigFile", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ConfigFile"]; });

    $.Property({Static:false, Public:true }, "XmlEntryPointIdentity", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["EntryPointIdentity"]; });

    $.Property({Static:false, Public:true }, "XmlEntryPointParameters", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["EntryPointParameters"]; });

    $.Property({Static:false, Public:true }, "XmlEntryPointPath", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["EntryPointPath"]; });

    $.Property({Static:false, Public:true }, "XmlErrorReportUrl", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ErrorReportUrl"]; });

    $.Property({Static:false, Public:true }, "XmlFileAssociations", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociation")]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), function () { return ["FileAssociations"]; });

    $.Property({Static:false, Public:true }, "XmlHostInBrowser", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["HostInBrowser"]; });

    $.Property({Static:false, Public:true }, "XmlIconFile", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["IconFile"]; });

    $.Property({Static:false, Public:true }, "XmlIsClickOnceManifest", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["IsClickOnceManifest"]; });

    $.Property({Static:false, Public:true }, "XmlOSMajor", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["OSMajor"]; });

    $.Property({Static:false, Public:true }, "XmlOSMinor", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["OSMinor"]; });

    $.Property({Static:false, Public:true }, "XmlOSBuild", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["OSBuild"]; });

    $.Property({Static:false, Public:true }, "XmlOSRevision", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["OSRevision"]; });

    $.Property({Static:false, Public:true }, "XmlOSSupportUrl", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["OSSupportUrl"]; });

    $.Property({Static:false, Public:true }, "XmlOSDescription", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["OSDescription"]; });

    $.Property({Static:false, Public:true }, "XmlProduct", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Product"]; });

    $.Property({Static:false, Public:true }, "XmlPublisher", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Publisher"]; });

    $.Property({Static:false, Public:true }, "XmlSuiteName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["SuiteName"]; });

    $.Property({Static:false, Public:true }, "XmlSupportUrl", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["SupportUrl"]; });

    $.Property({Static:false, Public:true }, "XmlUseApplicationTrust", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["UseApplicationTrust"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["ApplicationManifest"]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.ApplicationManifest+AssemblyAttributeFlags */ 

(function AssemblyAttributeFlags$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.ApplicationManifest+AssemblyAttributeFlags", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "IsSigned", $.Boolean);

    $.Field({Static:false, Public:true , ReadOnly:true }, "HasAllowPartiallyTrustedCallersAttribute", $.Boolean);

    $.Field({Static:false, Public:true , ReadOnly:true }, "HasPrimaryInteropAssemblyAttribute", $.Boolean);

    $.Field({Static:false, Public:true , ReadOnly:true }, "HasImportedFromTypeLibAttribute", $.Boolean);

    $.Field({Static:false, Public:true , ReadOnly:true }, "HasSecurityTransparentAttribute", $.Boolean);

    $.Field({Static:false, Public:true , ReadOnly:true }, "HasSecurityRulesAttribute", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity */ 

(function AssemblyIdentity$Members () {
  var $, $thisType;
















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "FromAssemblyName", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromFile", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromManagedAssembly", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromManifest", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromManifest", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromManifest", 
      new JSIL.MethodSignature($.Type, [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromNativeAssembly", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Culture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsFrameworkAssembly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNeutralPlatform", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsStrongName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProcessorArchitecture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicKeyToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlCulture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlProcessorArchitecture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlPublicKeyToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFullName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity+FullNameFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resolve", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resolve", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.String]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Culture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProcessorArchitecture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PublicKeyToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlCulture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlProcessorArchitecture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlPublicKeyToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "version", $.String);

    $.Field({Static:false, Public:false}, "publicKeyToken", $.String);

    $.Field({Static:false, Public:false}, "culture", $.String);

    $.Field({Static:false, Public:false}, "processorArchitecture", $.String);

    $.Field({Static:false, Public:false}, "type", $.String);

    $.Property({Static:false, Public:true }, "IsFrameworkAssembly", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Culture", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "IsNeutralPlatform", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "IsStrongName", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ProcessorArchitecture", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "PublicKeyToken", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Version", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "XmlName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Name"]; });

    $.Property({Static:false, Public:true }, "XmlVersion", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Version"]; });

    $.Property({Static:false, Public:true }, "XmlPublicKeyToken", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["PublicKeyToken"]; });

    $.Property({Static:false, Public:true }, "XmlCulture", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Culture"]; });

    $.Property({Static:false, Public:true }, "XmlProcessorArchitecture", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ProcessorArchitecture"]; });

    $.Property({Static:false, Public:true }, "XmlType", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Type"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["AssemblyIdentity"]; });

})();

/* enum Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity+FullNameFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity+FullNameFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Default: 0, 
    ProcessorArchitecture: 1, 
    Type: 2, 
    All: 3, 
  }
);

/* enum Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReferenceType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReferenceType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unspecified: 0, 
    ClickOnceManifest: 1, 
    ManagedAssembly: 2, 
    NativeAssembly: 3, 
  }
);

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.BaseReference */ 

(function BaseReference$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.BaseReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Group", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Hash", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IncludeHash", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsOptional", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResolvedPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_SortName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourcePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlGroup", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlHash", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlHashAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlIsOptional", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSize", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultTargetPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Group", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Hash", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IncludeHash", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsOptional", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResolvedPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Size", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SourcePath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlGroup", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlHash", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlHashAlgorithm", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlIsOptional", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSize", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "includeHash", $.Boolean);

    $.Field({Static:false, Public:false}, "group", $.String);

    $.Field({Static:false, Public:false}, "hash", $.String);

    $.Field({Static:false, Public:false}, "hashAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "isOptional", $.String);

    $.Field({Static:false, Public:false}, "resolvedPath", $.String);

    $.Field({Static:false, Public:false}, "size", $.String);

    $.Field({Static:false, Public:false}, "sourcePath", $.String);

    $.Field({Static:false, Public:false}, "targetPath", $.String);

    $.Property({Static:false, Public:false}, "IncludeHash", $.Boolean);

    $.Property({Static:false, Public:true }, "Group", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Hash", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "IsOptional", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ResolvedPath", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Size", $.Int64)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "SortName", $.String);

    $.Property({Static:false, Public:true }, "SourcePath", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "TargetPath", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "XmlGroup", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Group"]; });

    $.Property({Static:false, Public:true }, "XmlHash", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Hash"]; });

    $.Property({Static:false, Public:true }, "XmlHashAlgorithm", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["HashAlg"]; });

    $.Property({Static:false, Public:true }, "XmlIsOptional", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["IsOptional"]; });

    $.Property({Static:false, Public:true }, "XmlPath", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Path"]; });

    $.Property({Static:false, Public:true }, "XmlSize", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Size"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference */ 

(function AssemblyReference$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.BaseReference"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyIdentity", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPrerequisite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrimary", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsVirtual", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferenceType", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReferenceType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_SortName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlAssemblyIdentity", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlIsNative", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlIsPrerequisite", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyIdentity", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsPrerequisite", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsPrimary", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReferenceType", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReferenceType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlAssemblyIdentity", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlIsNative", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlIsPrerequisite", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "assemblyIdentity", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"));

    $.Field({Static:false, Public:false}, "isPrerequisite", $.Boolean);

    $.Field({Static:false, Public:false}, "referenceType", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReferenceType"));

    $.Field({Static:false, Public:false}, "isPrimary", $.Boolean);

    $.Property({Static:false, Public:true }, "AssemblyIdentity", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "IsPrerequisite", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IsVirtual", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ReferenceType", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReferenceType"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IsPrimary", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "SortName", $.String);

    $.Property({Static:false, Public:true }, "XmlAssemblyIdentity", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["AssemblyIdentity"]; });

    $.Property({Static:false, Public:true }, "XmlIsNative", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["IsNative"]; });

    $.Property({Static:false, Public:true }, "XmlIsPrerequisite", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["IsPrerequisite"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReferenceCollection */ 

(function AssemblyReferenceCollection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReferenceCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"), [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"), [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyIdentity")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindTargetPath", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference")]))
    );

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComImporter */ 

(function ComImporter$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComImporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageCollection"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForUnknownSubKeys", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Microsoft.Win32.RegistryKey"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForUnknownSubKeys", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("Microsoft.Win32.RegistryKey"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForUnknownValues", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Microsoft.Win32.RegistryKey"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForUnknownValues", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("Microsoft.Win32.RegistryKey"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ComClasses", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComClass")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Success", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeLib", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TypeLib"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRegisteredClassInfo", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComImporter+ClassInfo"), [$asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRegisteredClassInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.RegistryKey"), $asm07.TypeRef("System.Guid"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComImporter+ClassInfo")])
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "typeLib", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TypeLib"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "comClasses", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComClass")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "outputMessages", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "outputDisplayName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:false, Public:false}, "success", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "emptyArray", $jsilcore.TypeRef("System.Array", [$.String]), function ($pi) {
        return JSIL.Array.New($asm07.System.String, 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "knownImplementedCategories", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "knownSubKeys", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "Success", $.Boolean);

    $.Property({Static:false, Public:true }, "ComClasses", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComClass")]));

    $.Property({Static:false, Public:true }, "TypeLib", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TypeLib"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComImporter+ClassInfo */ 

(function ClassInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComImporter+ClassInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Progid", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "RegisteredPath", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ThreadingModel", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework */ 

(function CompatibleFramework$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Profile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportedRuntime", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlProfile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSupportedRuntime", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Profile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SupportedRuntime", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlProfile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSupportedRuntime", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "version", $.String);

    $.Field({Static:false, Public:false}, "profile", $.String);

    $.Field({Static:false, Public:false}, "supportedRuntime", $.String);

    $.Property({Static:false, Public:true }, "Version", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Profile", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "SupportedRuntime", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "XmlVersion", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Version"]; });

    $.Property({Static:false, Public:true }, "XmlProfile", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Profile"]; });

    $.Property({Static:false, Public:true }, "XmlSupportedRuntime", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["SupportedRuntime"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFrameworkCollection */ 

(function CompatibleFrameworkCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFrameworkCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework")]))
    );

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework")]));

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.ConvertUtil */ 

(function ConvertUtil$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ConvertUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.Deployment.ManifestUtilities.UpdateMode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.UpdateMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Background: 0, 
    Foreground: 1, 
  }
);

/* enum Microsoft.Build.Tasks.Deployment.ManifestUtilities.UpdateUnit */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.UpdateUnit", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Hours: 0, 
    Days: 1, 
    Weeks: 2, 
  }
);

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.DeployManifest */ 

(function DeployManifest$Members () {
  var $, $thisType;

























































































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.DeployManifest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "DiscoverCompatFrameworks", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "DiscoverCompatibleFrameworks", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompatibleFrameworks", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFrameworkCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreateDesktopShortcut", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeploymentUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisallowUrlActivation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EntryPoint", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorReportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Install", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MapFileExtensions", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinimumRequiredVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Product", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Publisher", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SuiteName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetFrameworkMoniker", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustUrlParameters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateInterval", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateMode", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.UpdateMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpdateUnit", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.UpdateUnit"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlCompatibleFrameworks", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlCreateDesktopShortcut", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlDeploymentUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlDisallowUrlActivation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlErrorReportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlInstall", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlMapFileExtensions", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlMinimumRequiredVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlProduct", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlPublisher", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSuiteName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSupportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlTrustUrlParameters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlUpdateEnabled", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlUpdateInterval", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlUpdateMode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlUpdateUnit", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFullCompatFramework", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework"), [$asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInstallableFramework", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInstallableFrameworkName", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Runtime.Versioning.FrameworkName"), [$asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPathToReferenceAssemblies", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]), [$asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRedistListFilePath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSubsetCompatFramework", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework"), [$asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAfterLoad", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeforeSave", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PatchCLRVersion", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CreateDesktopShortcut", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DeploymentUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisallowUrlActivation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_EntryPoint", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ErrorReportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Install", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MapFileExtensions", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinimumRequiredVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Product", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Publisher", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SuiteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SupportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetFrameworkMoniker", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrustUrlParameters", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateEnabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateInterval", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateMode", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.UpdateMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UpdateUnit", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.UpdateUnit"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlCompatibleFrameworks", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlCreateDesktopShortcut", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlDeploymentUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlDisallowUrlActivation", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlErrorReportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlInstall", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlMapFileExtensions", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlMinimumRequiredVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlProduct", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlPublisher", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSuiteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSupportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlTrustUrlParameters", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlUpdateEnabled", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlUpdateInterval", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlUpdateMode", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlUpdateUnit", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateDeploymentProvider", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEntryPoint", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateMinimumRequiredVersion", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "createDesktopShortcut", $.String);

    $.Field({Static:false, Public:false}, "deploymentUrl", $.String);

    $.Field({Static:false, Public:false}, "disallowUrlActivation", $.String);

    $.Field({Static:false, Public:false}, "entryPoint", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"));

    $.Field({Static:false, Public:false}, "errorReportUrl", $.String);

    $.Field({Static:false, Public:false}, "install", $.String);

    $.Field({Static:false, Public:false}, "mapFileExtensions", $.String);

    $.Field({Static:false, Public:false}, "minimumRequiredVersion", $.String);

    $.Field({Static:false, Public:false}, "product", $.String);

    $.Field({Static:false, Public:false}, "publisher", $.String);

    $.Field({Static:false, Public:false}, "suiteName", $.String);

    $.Field({Static:false, Public:false}, "supportUrl", $.String);

    $.Field({Static:false, Public:false}, "trustUrlParameters", $.String);

    $.Field({Static:false, Public:false}, "updateEnabled", $.String);

    $.Field({Static:false, Public:false}, "updateInterval", $.String);

    $.Field({Static:false, Public:false}, "updateMode", $.String);

    $.Field({Static:false, Public:false}, "updateUnit", $.String);

    $.Field({Static:false, Public:false}, "compatibleFrameworkList", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFrameworkCollection"));

    $.Field({Static:false, Public:false}, "compatibleFrameworks", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework")]));

    $.Field({Static:false, Public:false}, "targetFrameworkMoniker", $.String);

    $.Constant({Static:true , Public:false}, "_redistListFolder", $.String, "RedistList");

    $.Constant({Static:true , Public:false}, "_redistListFile", $.String, "FrameworkList.xml");

    $.Property({Static:false, Public:true }, "CreateDesktopShortcut", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "TargetFrameworkMoniker", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "CompatibleFrameworks", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFrameworkCollection"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "DeploymentUrl", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "DisallowUrlActivation", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "EntryPoint", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.AssemblyReference"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ErrorReportUrl", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Install", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "MapFileExtensions", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "MinimumRequiredVersion", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Product", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Publisher", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "SuiteName", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "SupportUrl", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "TrustUrlParameters", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "UpdateEnabled", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "UpdateInterval", $.Int32)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "UpdateMode", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.UpdateMode"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "UpdateUnit", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.UpdateUnit"))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "XmlCreateDesktopShortcut", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["CreateDesktopShortcut"]; });

    $.Property({Static:false, Public:true }, "XmlCompatibleFrameworks", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.CompatibleFramework")]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), function () { return ["CompatibleFrameworks"]; });

    $.Property({Static:false, Public:true }, "XmlDeploymentUrl", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["DeploymentUrl"]; });

    $.Property({Static:false, Public:true }, "XmlDisallowUrlActivation", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["DisallowUrlActivation"]; });

    $.Property({Static:false, Public:true }, "XmlErrorReportUrl", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ErrorReportUrl"]; });

    $.Property({Static:false, Public:true }, "XmlInstall", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Install"]; });

    $.Property({Static:false, Public:true }, "XmlMapFileExtensions", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["MapFileExtensions"]; });

    $.Property({Static:false, Public:true }, "XmlMinimumRequiredVersion", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["MinimumRequiredVersion"]; });

    $.Property({Static:false, Public:true }, "XmlProduct", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Product"]; });

    $.Property({Static:false, Public:true }, "XmlPublisher", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Publisher"]; });

    $.Property({Static:false, Public:true }, "XmlSuiteName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["SuiteName"]; });

    $.Property({Static:false, Public:true }, "XmlSupportUrl", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["SupportUrl"]; });

    $.Property({Static:false, Public:true }, "XmlTrustUrlParameters", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["TrustUrlParameters"]; });

    $.Property({Static:false, Public:true }, "XmlUpdateEnabled", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["UpdateEnabled"]; });

    $.Property({Static:false, Public:true }, "XmlUpdateInterval", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["UpdateInterval"]; });

    $.Property({Static:false, Public:true }, "XmlUpdateMode", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["UpdateMode"]; });

    $.Property({Static:false, Public:true }, "XmlUpdateUnit", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["UpdateUnit"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["DeployManifest"]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.EmbeddedManifestReader */ 

(function EmbeddedManifestReader$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.EmbeddedManifestReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnumResNameCallback", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "id1", $.IntPtr);

    $.Field({Static:false, Public:false}, "manifest", $asm07.TypeRef("System.IO.Stream"));


    function EmbeddedManifestReader__cctor () {
      $thisType.id1 = new $asm07.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      EmbeddedManifestReader__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociation */ 

(function FileAssociation$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultIcon", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Extension", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProgId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlDefaultIcon", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlDescription", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlExtension", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlProgId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultIcon", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Extension", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProgId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlDefaultIcon", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlDescription", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlExtension", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlProgId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "defaultIcon", $.String);

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "extension", $.String);

    $.Field({Static:false, Public:false}, "progid", $.String);

    $.Property({Static:false, Public:true }, "DefaultIcon", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Description", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Extension", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ProgId", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "XmlDefaultIcon", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["DefaultIcon"]; });

    $.Property({Static:false, Public:true }, "XmlDescription", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Description"]; });

    $.Property({Static:false, Public:true }, "XmlExtension", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Extension"]; });

    $.Property({Static:false, Public:true }, "XmlProgId", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Progid"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociationCollection */ 

(function FileAssociationCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociationCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociation")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociation"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociation")]))
    );

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociation")]));

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileAssociation"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference */ 

(function FileReference$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.BaseReference"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ComClasses", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComClass")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDataFile", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProxyStubs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_SortName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeLibs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TypeLib")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlComClasses", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComClass")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlProxyStubs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlTypeLibs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TypeLib")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlWriteableType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportComComponent", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageCollection"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsDataFile", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlComClasses", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComClass")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlProxyStubs", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlTypeLibs", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TypeLib")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlWriteableType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "comClasses", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComClass")]));

    $.Field({Static:false, Public:false}, "writeableType", $.String);

    $.Field({Static:false, Public:false}, "proxyStubs", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub")]));

    $.Field({Static:false, Public:false}, "typeLibs", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TypeLib")]));

    $.Property({Static:false, Public:true }, "ComClasses", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComClass")]))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "IsDataFile", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ProxyStubs", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub")]))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "SortName", $.String);

    $.Property({Static:false, Public:true }, "TypeLibs", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TypeLib")]))
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "XmlComClasses", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComClass")]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), function () { return ["ComClasses"]; });

    $.Property({Static:false, Public:true }, "XmlProxyStubs", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub")]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), function () { return ["ProxyStubs"]; });

    $.Property({Static:false, Public:true }, "XmlTypeLibs", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.TypeLib")]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), function () { return ["TypeLibs"]; });

    $.Property({Static:false, Public:true }, "XmlWriteableType", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["WriteableType"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComClass */ 

(function ComClass$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComClass", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $asm07.TypeRef("System.Guid"), 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClsId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProgId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ThreadingModel", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TlbId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlClsId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlDescription", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlProgId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlThreadingModel", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlTlbId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlClsId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlDescription", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlProgId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlThreadingModel", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlTlbId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "clsid", $.String);

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "progid", $.String);

    $.Field({Static:false, Public:false}, "threadingModel", $.String);

    $.Field({Static:false, Public:false}, "tlbid", $.String);

    $.Property({Static:false, Public:true }, "ClsId", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Description", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ProgId", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ThreadingModel", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "TlbId", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "XmlClsId", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Clsid"]; });

    $.Property({Static:false, Public:true }, "XmlDescription", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Description"]; });

    $.Property({Static:false, Public:true }, "XmlProgId", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Progid"]; });

    $.Property({Static:false, Public:true }, "XmlThreadingModel", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ThreadingModel"]; });

    $.Property({Static:false, Public:true }, "XmlTlbId", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Tlbid"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.TypeLib */ 

(function TypeLib$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.TypeLib", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $asm07.TypeRef("System.Version"), 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FlagsFromInt", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Flags", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HelpDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResourceId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TlbId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlFlags", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlHelpDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlResourceId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlTlbId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlFlags", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlHelpDirectory", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResourceId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlTlbId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "flags", $.String);

    $.Field({Static:false, Public:false}, "helpDirectory", $.String);

    $.Field({Static:false, Public:false}, "resourceid", $.String);

    $.Field({Static:false, Public:false}, "tlbid", $.String);

    $.Field({Static:false, Public:false}, "version", $.String);

    $.Property({Static:false, Public:true }, "Flags", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "HelpDirectory", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ResourceId", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "TlbId", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Version", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "XmlFlags", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Flags"]; });

    $.Property({Static:false, Public:true }, "XmlHelpDirectory", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["HelpDir"]; });

    $.Property({Static:false, Public:true }, "XmlResourceId", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ResourceId"]; });

    $.Property({Static:false, Public:true }, "XmlTlbId", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Tlbid"]; });

    $.Property({Static:false, Public:true }, "XmlVersion", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Version"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.WindowClass */ 

(function WindowClass$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.WindowClass", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Versioned", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlVersioned", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlVersioned", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "versioned", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Versioned", $.Boolean)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "XmlName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Name"]; });

    $.Property({Static:false, Public:true }, "XmlVersioned", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Versioned"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub */ 

(function ProxyStub$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.ProxyStub", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseInterface", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IID", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NumMethods", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TlbId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlBaseInterface", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlIID", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlNumMethods", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlTlbId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlBaseInterface", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlIID", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlNumMethods", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlTlbId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "baseInterface", $.String);

    $.Field({Static:false, Public:false}, "iid", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "numMethods", $.String);

    $.Field({Static:false, Public:false}, "tlbid", $.String);

    $.Property({Static:false, Public:true }, "BaseInterface", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "IID", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "NumMethods", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "TlbId", $.String)
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "XmlBaseInterface", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["BaseInterface"]; });

    $.Property({Static:false, Public:true }, "XmlIID", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Iid"]; });

    $.Property({Static:false, Public:true }, "XmlName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Name"]; });

    $.Property({Static:false, Public:true }, "XmlNumMethods", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["NumMethods"]; });

    $.Property({Static:false, Public:true }, "XmlTlbId", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm2F.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["Tlbid"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReferenceCollection */ 

(function FileReferenceCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReferenceCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference"), [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "FindTargetPath", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference")]))
    );

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.FileReference"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.ManifestFormatter */ 

(function ManifestFormatter$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ManifestFormatter", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Format", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$asm07.TypeRef("System.IO.Stream")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.ManifestReader */ 

(function ManifestReader$Members () {
  var $, $thisType;










  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ManifestReader", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Deserialize", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Deserialize", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"), [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetComInfo", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComInfo")]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlDocument", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlDocument"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadEmbeddedManifest", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadManifest", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadManifest", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"), [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadManifest", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"), [$asm07.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadManifest", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"), [
          $.String, $asm07.TypeRef("System.IO.Stream"), 
          $.Boolean
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComInfo */ 

(function ComInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.ComInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClsId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ComponentFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ManifestFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TlbId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "componentFileName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "clsid", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "manifestFileName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "tlbid", $.String);

    $.Property({Static:false, Public:true }, "ComponentFileName", $.String);

    $.Property({Static:false, Public:true }, "ClsId", $.String);

    $.Property({Static:false, Public:true }, "ManifestFileName", $.String);

    $.Property({Static:false, Public:true }, "TlbId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.ManifestWriter */ 

(function ManifestWriter$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.ManifestUtilities.ManifestWriter", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Serialize", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteManifest", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"))
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteManifest", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteManifest", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteManifest", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteManifest", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Manifest"), $asm07.TypeRef("System.IO.Stream"), 
          $.String
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.MetadataReader */ 

(function MetadataReader$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.MetadataReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Attributes", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Specialized.StringDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Culture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProcessorArchitecture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicKeyToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGuidOfType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasAssemblyAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_path", $.String);

    $.Field({Static:false, Public:false}, "_attributes", $asm0A.TypeRef("System.Collections.Specialized.StringDictionary"));

    $.Field({Static:false, Public:false}, "_metaDispenser", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.MetadataReader+IMetaDataDispenser"));

    $.Field({Static:false, Public:false}, "_assemblyImport", $asm01.TypeRef("Microsoft.Build.Tasks.IMetaDataAssemblyImport"));

    $.Field({Static:true , Public:false}, "_importerGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "_refidGuid", $asm07.TypeRef("System.Guid"));


    function MetadataReader__cctor () {
      $thisType._importerGuid = new $asm07.System.Guid();
      $thisType._refidGuid = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      MetadataReader__cctor
    );

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Version", $.String);

    $.Property({Static:false, Public:true }, "PublicKeyToken", $.String);

    $.Property({Static:false, Public:true }, "Culture", $.String);

    $.Property({Static:false, Public:true }, "ProcessorArchitecture", $.String);

    $.Property({Static:false, Public:false}, "Attributes", $asm0A.TypeRef("System.Collections.Specialized.StringDictionary"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.Build.Tasks.Deployment.ManifestUtilities.MetadataReader+IReferenceIdentity */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Deployment.ManifestUtilities.MetadataReader+IReferenceIdentity", false, [], function ($) {
    $.Method({}, "GetAttribute", new JSIL.MethodSignature($.String, [$.String, $.String]));
    $.Method({}, "SetAttribute", JSIL.MethodSignature.Void);
    $.Method({}, "EnumAttributes", JSIL.MethodSignature.Void);
    $.Method({}, "Clone", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["6eaf5ace-7917-4f3c-b129-e046a9704766"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* interface Microsoft.Build.Tasks.Deployment.ManifestUtilities.MetadataReader+IMetaDataDispenser */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Deployment.ManifestUtilities.MetadataReader+IMetaDataDispenser", false, [], function ($) {
    $.Method({}, "DefineScope", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "OpenScope", new JSIL.MethodSignature($.Int32, [
          $.String, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]));
    $.Method({}, "OpenScopeOnMemory", JSIL.MethodSignature.Return($.Int32));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["809c652e-7396-11d2-9771-00a0c9b4d50c"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.TypeLibTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted]; });

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;











  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.ManifestUtilities.NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "EnumResourceNames", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.IntPtr, 
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.NativeMethods+EnumResNameProc"), $.IntPtr
        ]), 
      {
        Module: "Kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "FindResource", 
      new JSIL.MethodSignature($.IntPtr, [
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "Kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "FreeLibrary", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "Kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetAssemblyIdentityFromFile", 
      new JSIL.MethodSignature($.Object, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")])]), 
      {
        Module: "mscorwks.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null

        ]
        , Result: {
          NativeType: "IUnknown"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LoadLibraryExW", 
      new JSIL.MethodSignature($.IntPtr, [
          $.String, $.IntPtr, 
          $.UInt32
        ]), 
      {
        Module: "Kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LoadResource", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.IntPtr]), 
      {
        Module: "Kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LoadTypeLibEx", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.NativeMethods+RegKind"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      {
        Module: "oleaut32.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "IntF", 
            Out: true
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LockResource", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "Kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SfcIsFileProtected", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $.String]), 
      {
        Module: "sfc.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SizeofResource", 
      new JSIL.MethodSignature($.UInt32, [$.IntPtr, $.IntPtr]), 
      {
        Module: "Kernel32.dll", 
      }
    );

    $.Constant({Static:true , Public:true }, "LOAD_LIBRARY_AS_DATAFILE", $.UInt32, 2);

    $.Field({Static:true , Public:true , ReadOnly:true }, "RT_MANIFEST", $.IntPtr);


    function NativeMethods__cctor () {
      $thisType.RT_MANIFEST = new $asm07.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      NativeMethods__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Build.Tasks.Deployment.ManifestUtilities.NativeMethods+EnumResNameProc */ 

JSIL.MakeDelegate("Microsoft.Build.Tasks.Deployment.ManifestUtilities.NativeMethods+EnumResNameProc", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr"), 
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr")
    ]));

/* enum Microsoft.Build.Tasks.Deployment.ManifestUtilities.NativeMethods+RegKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.NativeMethods+RegKind", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    RegKind_Default: 0, 
    RegKind_Register: 1, 
    RegKind_None: 2, 
  }
);

/* enum Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Info: 0, 
    Warning: 1, 
    Error: 2, 
  }
);

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessage */ 

(function OutputMessage$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageType"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(3, "arguments", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Text", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetArguments", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "$arguments", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "text", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageType"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Text", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageType"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageCollection */ 

(function OutputMessageCollection$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessageCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddErrorMessage", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "AddWarningMessage", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessage"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WarningCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LogTaskMessages", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("Microsoft.Build.Utilities.Task")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "taskResources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "list", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessage")]));

    $.Field({Static:false, Public:false}, "errorCount", $.Int32);

    $.Field({Static:false, Public:false}, "warningCount", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.OutputMessage"));

    $.Property({Static:false, Public:true }, "ErrorCount", $.Int32);

    $.Property({Static:false, Public:true }, "WarningCount", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.PathUtil */ 

(function PathUtil$Members () {
  var $, $thisType;
















  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.ManifestUtilities.PathUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CanonicalizePath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CanonicalizeUrl", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Format", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPathSegments", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsAssembly", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsDataFile", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsEqualPath", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsLocalPath", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsManagedAssembly", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsNativeAssembly", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsPEFile", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsProgramFile", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsUncPath", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsUrl", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Resolve", 
      new JSIL.MethodSignature($.String, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities */ 

(function SecurityUtilities$Members () {
  var $, $thisType;





























  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ComputeZonePermissionSet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.PermissionSet"), [
          $.String, $asm07.TypeRef("System.Security.PermissionSet"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeZonePermissionSetHelper", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.PermissionSet"), [
          $.String, $asm07.TypeRef("System.Security.PermissionSet"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateXmlDocV2", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlDocument"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateXmlDocV3", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlDocument"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCert", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCommandLineParameters", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm0A.TypeRef("System.Uri"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentCLRPermissions", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamedPermissionSet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.PermissionSet"), [
          $.String, $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamedPermissionSetFromZone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.PermissionSet"), [
          $.String, $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathToTool", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRegistryPermissionSetByName", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$.String, $asm0A.TypeRef("System.Runtime.Versioning.FrameworkName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "IdentityListToPermissionSet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.PermissionSet"), [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCertInStore", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseElementForAssemblyIdentification", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Security.SecurityElement"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PermissionSetToIdentityList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm07.TypeRef("System.Security.PermissionSet")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PermissionSetToXml", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlDocument"), [$asm07.TypeRef("System.Security.PermissionSet")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveNonReferencedPermissions", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.PermissionSet"), [$jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "SignFile", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0A.TypeRef("System.Uri"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SignFile", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Security.SecureString"), 
          $asm0A.TypeRef("System.Uri"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SignFile", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm0A.TypeRef("System.Uri"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SignPEFile", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm0A.TypeRef("System.Uri"), 
          $.String, $asm07.TypeRef("System.Resources.ResourceManager"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToolName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "UseSha256Algorithm", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "XmlElementToSecurityElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.SecurityElement"), [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "XmlToIdentityList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:true , Public:true }, "XmlToPermissionSet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.PermissionSet"), [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.Constant({Static:true , Public:false}, "PermissionSetsFolder", $.String, "PermissionSets");

    $.Constant({Static:true , Public:false}, "Everything", $.String, "Everything");

    $.Constant({Static:true , Public:false}, "LocalIntranet", $.String, "LocalIntranet");

    $.Constant({Static:true , Public:false}, "Internet", $.String, "Internet");

    $.Constant({Static:true , Public:false}, "Custom", $.String, "Custom");

    $.Constant({Static:true , Public:false}, "Fx2MajorVersion", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "Fx3MajorVersion", $.Int32, 3);

    $.Field({Static:true , Public:false, ReadOnly:true }, "dotNet40Version", $asm07.TypeRef("System.Version"));

    $.Constant({Static:true , Public:false}, "InternetPermissionSetXml", $.String, "<PermissionSet class=\"System.Security.PermissionSet\" version=\"1\" ID=\"Custom\" SameSite=\"site\">\n<IPermission class=\"System.Security.Permissions.FileDialogPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Access=\"Open\" />\n<IPermission class=\"System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Allowed=\"ApplicationIsolationByUser\" UserQuota=\"512000\" />\n<IPermission class=\"System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Flags=\"Execution\" />\n<IPermission class=\"System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Window=\"SafeTopLevelWindows\" Clipboard=\"OwnClipboard\" />\n<IPermission class=\"System.Drawing.Printing.PrintingPermission, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" version=\"1\" Level=\"SafePrinting\" />\n</PermissionSet>");

    $.Constant({Static:true , Public:false}, "LocalIntranetPermissionSetXml", $.String, "<PermissionSet class=\"System.Security.PermissionSet\" version=\"1\" ID=\"Custom\" SameSite=\"site\">\n<IPermission class=\"System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Read=\"USERNAME\" />\n<IPermission class=\"System.Security.Permissions.FileDialogPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Unrestricted=\"true\" />\n<IPermission class=\"System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Allowed=\"AssemblyIsolationByUser\" UserQuota=\"9223372036854775807\" Expiry=\"9223372036854775807\" Permanent=\"True\" />\n<IPermission class=\"System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Flags=\"ReflectionEmit\" />\n<IPermission class=\"System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Flags=\"Assertion, Execution, BindingRedirects\" />\n<IPermission class=\"System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Unrestricted=\"true\" />\n<IPermission class=\"System.Net.DnsPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Unrestricted=\"true\" />\n<IPermission class=\"System.Drawing.Printing.PrintingPermission, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" version=\"1\" Level=\"DefaultPrinting\" />\n</PermissionSet>");

    $.Constant({Static:true , Public:false}, "InternetPermissionSetWithWPFXml", $.String, "<PermissionSet class=\"System.Security.PermissionSet\" version=\"1\" ID=\"Custom\" SameSite=\"site\">\n<IPermission class=\"System.Security.Permissions.FileDialogPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Access=\"Open\" />\n<IPermission class=\"System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Allowed=\"ApplicationIsolationByUser\" UserQuota=\"512000\" />\n<IPermission class=\"System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Flags=\"Execution\" />\n<IPermission class=\"System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Window=\"SafeTopLevelWindows\" Clipboard=\"OwnClipboard\" />\n<IPermission class=\"System.Drawing.Printing.PrintingPermission, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" version=\"1\" Level=\"SafePrinting\" />\n<IPermission class=\"System.Security.Permissions.MediaPermission, WindowsBase, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" version=\"1\" Audio=\"SafeAudio\" Video=\"SafeVideo\" Image=\"SafeImage\" />\n<IPermission class=\"System.Security.Permissions.WebBrowserPermission, WindowsBase, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" version=\"1\" Level=\"Safe\" />\n</PermissionSet>");

    $.Constant({Static:true , Public:false}, "LocalIntranetPermissionSetWithWPFXml", $.String, "<PermissionSet class=\"System.Security.PermissionSet\" version=\"1\" ID=\"Custom\" SameSite=\"site\">\n<IPermission class=\"System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Read=\"USERNAME\" />\n<IPermission class=\"System.Security.Permissions.FileDialogPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Unrestricted=\"true\" />\n<IPermission class=\"System.Security.Permissions.IsolatedStorageFilePermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Allowed=\"AssemblyIsolationByUser\" UserQuota=\"9223372036854775807\" Expiry=\"9223372036854775807\" Permanent=\"True\" />\n<IPermission class=\"System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Flags=\"ReflectionEmit\" />\n<IPermission class=\"System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Flags=\"Assertion, Execution, BindingRedirects\" />\n<IPermission class=\"System.Security.Permissions.UIPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Unrestricted=\"true\" />\n<IPermission class=\"System.Net.DnsPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Unrestricted=\"true\" />\n<IPermission class=\"System.Drawing.Printing.PrintingPermission, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" version=\"1\" Level=\"DefaultPrinting\" />\n<IPermission class=\"System.Security.Permissions.MediaPermission, WindowsBase, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" version=\"1\" Audio=\"SafeAudio\" Video=\"SafeVideo\" Image=\"SafeImage\" />\n<IPermission class=\"System.Security.Permissions.WebBrowserPermission, WindowsBase, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" version=\"1\" Level=\"Safe\" />\n</PermissionSet>");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.TrustInfo */ 

(function TrustInfo$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.TrustInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSameSiteAttribute", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupPermissionSetElement", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasUnmanagedCodePermission", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsFullTrust", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PermissionSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.PermissionSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreserveFullTrustPermissionSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SameSiteAccess", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInputPermissionSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.PermissionSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInputPermissionSetElement", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInputRequestedPrivilegeElement", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutputPermissionSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.PermissionSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOutputPermissionSetDocument", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPermissionSetElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRequestedPrivilegeElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlElement"), $asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Read", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Read", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadManifest", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadManifest", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTrustInfo", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsFullTrust", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PermissionSet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.PermissionSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreserveFullTrustPermissionSet", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SameSiteAccess", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteManifest", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteManifest", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteManifest", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false}, "_inputPermissionSet", $asm07.TypeRef("System.Security.PermissionSet"));

    $.Field({Static:false, Public:false}, "_inputTrustInfoDocument", $asm2F.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "_isFullTrust", $.Boolean);

    $.Field({Static:false, Public:false}, "_outputPermissionSet", $asm07.TypeRef("System.Security.PermissionSet"));

    $.Field({Static:false, Public:false}, "_preserveFullTrustPermissionSet", $.Boolean);

    $.Field({Static:false, Public:false}, "sameSiteSetting", $.String);

    $.Field({Static:false, Public:false}, "sameSiteChanged", $.Boolean);

    $.Property({Static:false, Public:true }, "HasUnmanagedCodePermission", $.Boolean);

    $.Property({Static:false, Public:true }, "IsFullTrust", $.Boolean);

    $.Property({Static:false, Public:true }, "PermissionSet", $asm07.TypeRef("System.Security.PermissionSet"));

    $.Property({Static:false, Public:true }, "PreserveFullTrustPermissionSet", $.Boolean);

    $.Property({Static:false, Public:true }, "SameSiteAccess", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.Util */ 

(function Util$Members () {
  var $, $thisType;

































  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Util", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ByteArrayToHex", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ByteArrayToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompareFrameworkVersions", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertFrameworkVersionToString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CopyStream", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilterNonprintableChars", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAssemblyPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetClrVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetClrVersion", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetEmbeddedResourceStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetEmbeddedResourceString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFileInfo", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFileInfo", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileInfoImpl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLogPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetRegisteredOrganization", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "IsValidAssemblyName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsValidCulture", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsValidFileName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidFrameworkVersion", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsValidVersion", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "PlatformToProcessorArchitecture", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveDuplicateItems", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "SortItems", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")]), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteFile", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteFile", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLog", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLogFile", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLogFile", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLogFile", 
      new JSIL.MethodSignature(null, [$.String, $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteTempFile", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteTempFile", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Schema", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "logging", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "logPath", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "fileNameInvalidChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false}, "logFileWriter", $asm07.TypeRef("System.IO.StreamWriter"), null);

    $.Field({Static:true , Public:false}, "clrVersion2", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "platforms", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "processorArchitectures", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "itemComparer", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Util+ItemComparer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.Util+ItemComparer */ 

(function ItemComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.Util+ItemComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IComparer.Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IComparer"), "Compare");

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.XmlNamespaces */ 

(function XmlNamespaces$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.ManifestUtilities.XmlNamespaces", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "GetNamespaceManager", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNamespaceManager"), [$asm2F.TypeRef("System.Xml.XmlNameTable")])
    );

    $.Constant({Static:true , Public:true }, "asmv1", $.String, "urn:schemas-microsoft-com:asm.v1");

    $.Constant({Static:true , Public:true }, "asmv2", $.String, "urn:schemas-microsoft-com:asm.v2");

    $.Constant({Static:true , Public:true }, "asmv3", $.String, "urn:schemas-microsoft-com:asm.v3");

    $.Constant({Static:true , Public:true }, "dsig", $.String, "http://www.w3.org/2000/09/xmldsig#");

    $.Constant({Static:true , Public:true }, "xrml", $.String, "urn:mpeg:mpeg21:2003:01-REL-R-NS");

    $.Constant({Static:true , Public:true }, "xsi", $.String, "http://www.w3.org/2001/XMLSchema-instance");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.XmlUtil */ 

(function XmlUtil$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.ManifestUtilities.XmlUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CloneElementToDocument", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [
          $asm2F.TypeRef("System.Xml.XmlElement"), $asm2F.TypeRef("System.Xml.XmlDocument"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetQName", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlTextReader"), $asm2F.TypeRef("System.Xml.XmlNamespaceManager")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrimPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "XslTransform", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [
          $.String, $asm07.TypeRef("System.IO.Stream"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.DictionaryEntry")])
        ])
    )
      .Parameter(2, "entries", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:true , Public:false, ReadOnly:true }, "resolver", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.ManifestUtilities.XmlUtil+ResourceResolver"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.XmlUtil+ResourceResolver */ 

(function ResourceResolver$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.XmlUrlResolver"), 
      Name: "Microsoft.Build.Tasks.Deployment.ManifestUtilities.XmlUtil+ResourceResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEntity", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.Uri"), $.String, 
          $asm07.TypeRef("System.Type")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.XPaths */ 

(function XPaths$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.ManifestUtilities.XPaths", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "applicationRequestMinimumElement", $.String, "asmv2:applicationRequestMinimum");

    $.Constant({Static:true , Public:true }, "assemblyElement", $.String, "asmv1:assembly");

    $.Constant({Static:true , Public:true }, "assemblyIdentityPath", $.String, "/asmv1:assembly/asmv1:assemblyIdentity|/asmv1:assembly/asmv2:assemblyIdentity");

    $.Constant({Static:true , Public:true }, "clsidAttribute", $.String, "asmv1:comClass/@clsid");

    $.Constant({Static:true , Public:true }, "comFilesPath", $.String, "/asmv1:assembly/asmv1:file[asmv1:typelib or asmv1:comClass]");

    $.Constant({Static:true , Public:true }, "configBindingRedirect", $.String, "configuration/runtime/asmv1:assemblyBinding/asmv1:dependentAssembly/asmv1:bindingRedirect");

    $.Constant({Static:true , Public:true }, "defaultAssemblyRequestElement", $.String, "asmv2:defaultAssemblyRequest");

    $.Constant({Static:true , Public:true }, "dependencyPublicKeyTokenAttribute", $.String, "asmv2:assemblyIdentity/@publicKeyToken");

    $.Constant({Static:true , Public:true }, "fileNameAttribute", $.String, "@name");

    $.Constant({Static:true , Public:true }, "fileSizeAttribute", $.String, "asmv2:size");

    $.Constant({Static:true , Public:true }, "hashElement", $.String, "asmv2:hash/dsig:DigestValue");

    $.Constant({Static:true , Public:true }, "idAttribute", $.String, "asmv2:ID");

    $.Constant({Static:true , Public:true }, "languageAttribute1", $.String, "asmv1:assemblyIdentity/@language");

    $.Constant({Static:true , Public:true }, "languageAttribute2", $.String, "asmv2:assemblyIdentity/@language");

    $.Constant({Static:true , Public:true }, "manifestTrustInfoPath", $.String, "/asmv1:assembly/asmv2:trustInfo");

    $.Constant({Static:true , Public:true }, "permissionIdentityQuery", $.String, "asmv2:IPermission[@class='{0}']");

    $.Constant({Static:true , Public:true }, "permissionClassAttributeQuery", $.String, "asmv2:IPermission/@class");

    $.Constant({Static:true , Public:true }, "permissionSetElement", $.String, "asmv2:PermissionSet");

    $.Constant({Static:true , Public:true }, "permissionSetReferenceAttribute", $.String, "asmv2:permissionSetReference");

    $.Constant({Static:true , Public:true }, "publicKeyTokenAttribute", $.String, "asmv2:publicKeyToken");

    $.Constant({Static:true , Public:true }, "requestedExecutionLevelPath", $.String, "/asmv1:assembly/asmv2:trustInfo/asmv2:security/asmv3:requestedPrivileges/asmv3:requestedExecutionLevel");

    $.Constant({Static:true , Public:true }, "requestedPrivilegeElement", $.String, "asmv3:requestedPrivileges");

    $.Constant({Static:true , Public:true }, "requestedExecutionLevelElement", $.String, "asmv3:requestedExecutionLevel");

    $.Constant({Static:true , Public:true }, "sameSiteAttribute", $.String, "asmv2:SameSite");

    $.Constant({Static:true , Public:true }, "securityElement", $.String, "asmv2:security");

    $.Constant({Static:true , Public:true }, "signaturePath", $.String, "/asmv1:assembly/dsig:Signature");

    $.Constant({Static:true , Public:true }, "tlbidAttribute", $.String, "asmv1:typelib/@tlbid");

    $.Constant({Static:true , Public:true }, "trustInfoElement", $.String, "asmv2:trustInfo");

    $.Constant({Static:true , Public:true }, "trustInfoPath", $.String, "/asmv2:trustInfo");

    $.Constant({Static:true , Public:true }, "unrestrictedAttribute", $.String, "asmv2:Unrestricted");

    $.Field({Static:true , Public:true , ReadOnly:true }, "codebasePaths", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "emptyAttributeList", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.ManifestUtilities.Constants */ 

(function Constants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.ManifestUtilities.Constants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "CLRPlatformAssemblyName", $.String, "Microsoft.Windows.CommonLanguageRuntime");

    $.Constant({Static:true , Public:true }, "DeployFileExtension", $.String, ".deploy");

    $.Constant({Static:true , Public:true }, "OSVersion_Win9X", $.String, "4.10.0.0");

    $.Constant({Static:true , Public:true }, "OSVersion_WinXP", $.String, "5.1.2600.0");

    $.Field({Static:true , Public:true , ReadOnly:true }, "EntryPointMinimumImageVersion", $asm07.TypeRef("System.Version"));

    $.Constant({Static:true , Public:true }, "TargetFrameworkVersion20", $.String, "v2.0");

    $.Constant({Static:true , Public:true }, "TargetFrameworkVersion30", $.String, "v3.0");

    $.Constant({Static:true , Public:true }, "TargetFrameworkVersion35", $.String, "v3.5");

    $.Constant({Static:true , Public:true }, "TargetFrameworkVersion40", $.String, "v4.0");

    $.Field({Static:true , Public:true , ReadOnly:true }, "NET30AssemblyIdentity", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "NET35AssemblyIdentity", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "NET35SP1AssemblyIdentity", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:true , ReadOnly:true }, "NET35ClientAssemblyIdentity", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Constant({Static:true , Public:true }, "UACAsInvoker", $.String, "asInvoker");

    $.Constant({Static:true , Public:true }, "UACUIAccess", $.String, "false");

    $.Constant({Static:true , Public:true }, "MaxFileAssociationsCount", $.Int32, 8);

    $.Constant({Static:true , Public:true }, "MaxFileAssociationExtensionLength", $.Int32, 24);

    $.Constant({Static:true , Public:true }, "ClientFrameworkSubset", $.String, "Client");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Build.Tasks.Deployment.Bootstrapper");
/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.BootstrapperBuilder */ 

(function BootstrapperBuilder$Members () {
  var $, $thisType;








































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.BootstrapperBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddBuiltProducts", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDependencies", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"), $asm07.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIncludedProducts", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIncludes", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"), $asm07.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddProduct", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")]), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddStringResourceForUrl", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ResourceUpdater"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddVerificationInformation", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilder"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildSettings"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildResults")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendNode", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $.String, 
          $asm2F.TypeRef("System.Xml.XmlElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Build", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildResults"), [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildPackages", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildSettings"), $asm2F.TypeRef("System.Xml.XmlElement"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ResourceUpdater"), $asm07.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildResources", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildSettings"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ResourceUpdater")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ByteArrayToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearReadOnlyAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CombineElements", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $asm2F.TypeRef("System.Xml.XmlElement"), 
          $.String, $.String, 
          $asm2F.TypeRef("System.Xml.XmlElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsCulture", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertChildsNodeToAttributes", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopySetupToOutputDirectory", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildSettings"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CorrectPackageFiles", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateApplicationElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlElement"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreatePackage", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Package"), [$asm2F.TypeRef("System.Xml.XmlNode"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateProduct", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateProductNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DumpStringToFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DumpXmlToFile", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureFolderExists", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ExploreDirectory", 
      new JSIL.MethodSignature(null, [$.String, $asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BootstrapperPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Cultures", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PackagePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Products", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Validate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAssemblyPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCodePage", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEmbeddedResourceStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFileHash", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIncludedProducts", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")]), [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLogPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOutputFolders", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $jsilcore.TypeRef("System.Array", [$.String]), $.String, 
          $.String, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ComponentsLocation")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPackageForSettings", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Package"), [
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildSettings"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilder"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildResults")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPackageForSettings_Helper", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Package"), [
          $asm07.TypeRef("System.Globalization.CultureInfo"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilder"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildResults"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPublicKeyOfFile", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResourcesNodeForSettings", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildSettings"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildResults"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResourcesNodeForSettings_Helper", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [
          $asm07.TypeRef("System.Globalization.CultureInfo"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildResults"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadAndValidateXmlDocument", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlDocument"), [
          $.String, $.Boolean, 
          $.String, $.String, 
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.XmlValidationResults")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MapLCIDToCultureName", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Merge", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")]), $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeAttribute", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm2F.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OrderProducts", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Hashtable"), $asm07.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "QueryForSubNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNode"), [
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttribute", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlNode"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Refresh", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RefreshProducts", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RefreshResources", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDependency", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Hashtable"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceAttribute", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceAttributes", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceAttributeString", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String, 
          $asm2F.TypeRef("System.Xml.XmlNode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplacePackageFileAttributes", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String, 
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceStrings", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SelectEitherProducts", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlNodeList"), [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SelectRelatedProducts", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Path", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Validate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatePackageFileNodes", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyHomeSiteInformation", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilder"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildSettings"), $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildResults")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "XmlToConfigurationFile", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "logging", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "logPath", $.String);

    $.Field({Static:false, Public:false}, "path", $.String);

    $.Field({Static:false, Public:false}, "document", $asm2F.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "xmlNamespaceManager", $asm2F.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "products", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductCollection"));

    $.Field({Static:false, Public:false}, "cultures", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "validationResults", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "results", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildResults"));

    $.Field({Static:false, Public:false}, "loopDependenciesWarnings", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildResults"));

    $.Field({Static:false, Public:false}, "fValidate", $.Boolean);

    $.Field({Static:false, Public:false}, "fInitialized", $.Boolean);

    $.Constant({Static:true , Public:false}, "SETUP_EXE", $.String, "setup.exe");

    $.Constant({Static:true , Public:false}, "SETUP_BIN", $.String, "setup.bin");

    $.Constant({Static:true , Public:false}, "SETUP_RESOURCES_FILE", $.String, "setup.xml");

    $.Constant({Static:true , Public:false}, "ENGINE_PATH", $.String, "Engine");

    $.Constant({Static:true , Public:false}, "SCHEMA_PATH", $.String, "Schemas");

    $.Constant({Static:true , Public:false}, "PACKAGE_PATH", $.String, "Packages");

    $.Constant({Static:true , Public:false}, "RESOURCES_PATH", $.String, "");

    $.Constant({Static:true , Public:false}, "BOOTSTRAPPER_NAMESPACE", $.String, "http://schemas.microsoft.com/developer/2004/01/bootstrapper");

    $.Constant({Static:true , Public:false}, "BOOTSTRAPPER_PREFIX", $.String, "bootstrapper");

    $.Constant({Static:true , Public:false}, "ROOT_MANIFEST_FILE", $.String, "product.xml");

    $.Constant({Static:true , Public:false}, "CHILD_MANIFEST_FILE", $.String, "package.xml");

    $.Constant({Static:true , Public:false}, "MANIFEST_FILE_SCHEMA", $.String, "package.xsd");

    $.Constant({Static:true , Public:false}, "CONFIG_TRANSFORM", $.String, "xmltoconfig.xsl");

    $.Constant({Static:true , Public:false}, "EULA_ATTRIBUTE", $.String, "LicenseAgreement");

    $.Constant({Static:true , Public:false}, "HOMESITE_ATTRIBUTE", $.String, "HomeSite");

    $.Constant({Static:true , Public:false}, "PUBLICKEY_ATTRIBUTE", $.String, "PublicKey");

    $.Constant({Static:true , Public:false}, "URLNAME_ATTRIBUTE", $.String, "UrlName");

    $.Constant({Static:true , Public:false}, "HASH_ATTRIBUTE", $.String, "Hash");

    $.Constant({Static:true , Public:false}, "MESSAGE_TABLE", $.Int32, 43);

    $.Constant({Static:true , Public:false}, "RESOURCE_TABLE", $.Int32, 45);

    $.Property({Static:false, Public:true , Virtual:true }, "Path", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Products", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductCollection"));

    $.Property({Static:false, Public:false}, "Cultures", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "Validate", $.Boolean);

    $.Property({Static:false, Public:false}, "BootstrapperPath", $.String);

    $.Property({Static:false, Public:false}, "PackagePath", $.String);

    $.Property({Static:false, Public:false}, "SchemaPath", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.IBootstrapperBuilder")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["1D9FE38A-0226-4b95-9C6B-6DFFA2236270"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ClassInterfaceAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ClassInterfaceType.None]; });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.BootstrapperBuilder+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.BootstrapperBuilder+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOrderProducts$gb__65_0", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRemoveDependency$gb__66_1", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")])])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__65_0", $asm07.TypeRef("System.Predicate`1", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")])]));

    $.Field({Static:true , Public:true }, "$l$g9__66_1", $asm07.TypeRef("System.Predicate`1", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.BootstrapperBuilder+<>c__DisplayClass66_0 */ 

(function $l$gc__DisplayClass66_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.BootstrapperBuilder+<>c__DisplayClass66_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lRemoveDependency$gb__0", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")])
    );

    $.Field({Static:false, Public:true }, "product", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"));

    $.Field({Static:false, Public:true }, "$l$g9__0", $asm07.TypeRef("System.Predicate`1", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessage */ 

(function BuildMessage$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessageSeverity"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMessage", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessageSeverity"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "get_HelpCode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HelpId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HelpKeyword", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Severity", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessageSeverity"))
    );

    $.Field({Static:false, Public:false}, "severity", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessageSeverity"));

    $.Field({Static:false, Public:false}, "message", $.String);

    $.Field({Static:false, Public:false}, "helpKeyword", $.String);

    $.Field({Static:false, Public:false}, "helpCode", $.String);

    $.Field({Static:false, Public:false}, "helpId", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "msbuildMessageCodePattern", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Property({Static:false, Public:true , Virtual:true }, "Severity", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessageSeverity"));

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HelpKeyword", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HelpId", $.Int32);

    $.Property({Static:false, Public:false}, "HelpCode", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.IBuildMessage")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildResults */ 

(function BuildResults$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildResults", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddComponentFiles", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddMessage", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessage"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSucceeded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ComponentFiles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Messages", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessage")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Succeeded", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetKeyFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "succeeded", $.Boolean);

    $.Field({Static:false, Public:false}, "keyFile", $.String);

    $.Field({Static:false, Public:false}, "componentFiles", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "messages", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true , Virtual:true }, "Succeeded", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "KeyFile", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ComponentFiles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Messages", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessage")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.IBuildResults")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["FAD7BA7C-CA00-41e0-A5EF-2DA9A74E58E6"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ClassInterfaceAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ClassInterfaceType.None]; });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildSettings */ 

(function BuildSettings$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ApplicationFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ApplicationName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ApplicationRequiresElevation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ApplicationUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ComponentsLocation", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ComponentsLocation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ComponentsUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CopyComponents", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FallbackCulture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FallbackLCID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LCID", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutputPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProductBuilders", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilderCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Validate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ApplicationFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ApplicationName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ApplicationRequiresElevation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ApplicationUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ComponentsLocation", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ComponentsLocation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ComponentsUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_CopyComponents", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FallbackCulture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_FallbackLCID", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_LCID", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_OutputPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SupportUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Validate", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "applicationName", $.String);

    $.Field({Static:false, Public:false}, "applicationFile", $.String);

    $.Field({Static:false, Public:false}, "applicationRequiresElevation", $.Boolean);

    $.Field({Static:false, Public:false}, "applicationUrl", $.String);

    $.Field({Static:false, Public:false}, "componentsLocation", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ComponentsLocation"));

    $.Field({Static:false, Public:false}, "componentsUrl", $.String);

    $.Field({Static:false, Public:false}, "fCopyComponents", $.Boolean);

    $.Field({Static:false, Public:false}, "lcid", $.Int32);

    $.Field({Static:false, Public:false}, "fallbackLCID", $.Int32);

    $.Field({Static:false, Public:false}, "outputPath", $.String);

    $.Field({Static:false, Public:false}, "supportUrl", $.String);

    $.Field({Static:false, Public:false}, "productBuilders", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilderCollection"));

    $.Field({Static:false, Public:false}, "fValidate", $.Boolean);

    $.Field({Static:false, Public:false}, "culture", $.String);

    $.Field({Static:false, Public:false}, "fallbackCulture", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ApplicationName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ApplicationFile", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ApplicationRequiresElevation", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ApplicationUrl", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ComponentsLocation", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ComponentsLocation"));

    $.Property({Static:false, Public:true , Virtual:true }, "ComponentsUrl", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CopyComponents", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LCID", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "FallbackLCID", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OutputPath", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProductBuilders", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilderCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "SupportUrl", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Validate", $.Boolean);

    $.Property({Static:false, Public:false}, "Culture", $.String);

    $.Property({Static:false, Public:false}, "FallbackCulture", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.IBuildSettings")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["5D13802C-C830-4b41-8E7A-F69D9DD6A095"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ClassInterfaceAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ClassInterfaceType.None]; });

})();

/* interface Microsoft.Build.Tasks.Deployment.Bootstrapper.IBootstrapperBuilder */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Deployment.Bootstrapper.IBootstrapperBuilder", true, [], function ($) {
    $.Method({}, "get_Path", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_Path", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_Products", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductCollection")));
    $.Method({}, "Build", new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildResults"), [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildSettings")]));
    $.Property({}, "Path");
    $.Property({}, "Products");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["1D202366-5EEA-4379-9255-6F8CDB8587C9"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface Microsoft.Build.Tasks.Deployment.Bootstrapper.IBuildSettings */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Deployment.Bootstrapper.IBuildSettings", true, [], function ($) {
    $.Method({}, "get_ApplicationName", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_ApplicationName", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_ApplicationFile", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_ApplicationFile", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_ApplicationUrl", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_ApplicationUrl", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_ComponentsUrl", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_ComponentsUrl", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_CopyComponents", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_CopyComponents", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_LCID", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_LCID", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_FallbackLCID", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_FallbackLCID", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_OutputPath", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_OutputPath", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_ProductBuilders", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilderCollection")));
    $.Method({}, "get_Validate", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_Validate", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_ComponentsLocation", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ComponentsLocation")));
    $.Method({}, "set_ComponentsLocation", JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ComponentsLocation")));
    $.Method({}, "get_SupportUrl", JSIL.MethodSignature.Return($.String));
    $.Method({}, "set_SupportUrl", JSIL.MethodSignature.Action($.String));
    $.Method({}, "get_ApplicationRequiresElevation", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_ApplicationRequiresElevation", JSIL.MethodSignature.Action($.Boolean));
    $.Property({}, "ApplicationName");
    $.Property({}, "ApplicationFile");
    $.Property({}, "ApplicationUrl");
    $.Property({}, "ComponentsUrl");
    $.Property({}, "CopyComponents");
    $.Property({}, "LCID");
    $.Property({}, "FallbackLCID");
    $.Property({}, "OutputPath");
    $.Property({}, "ProductBuilders");
    $.Property({}, "Validate");
    $.Property({}, "ComponentsLocation");
    $.Property({}, "SupportUrl");
    $.Property({}, "ApplicationRequiresElevation");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["87EEBC69-0948-4ce6-A2DE-819162B87CC6"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface Microsoft.Build.Tasks.Deployment.Bootstrapper.IProduct */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Deployment.Bootstrapper.IProduct", true, [], function ($) {
    $.Method({}, "get_ProductBuilder", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilder")));
    $.Method({}, "get_Name", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_ProductCode", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_Includes", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductCollection")));
    $.Property({}, "ProductBuilder");
    $.Property({}, "Name");
    $.Property({}, "ProductCode");
    $.Property({}, "Includes");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["9E81BE3D-530F-4a10-8349-5D5947BA59AD"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface Microsoft.Build.Tasks.Deployment.Bootstrapper.IProductCollection */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Deployment.Bootstrapper.IProductCollection", true, [], function ($) {
    $.Method({}, "get_Count", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "Item", new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"), [$.Int32]));
    $.Method({}, "Product", new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"), [$.String]));
    $.Property({}, "Count");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["63F63663-8503-4875-814C-09168E595367"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface Microsoft.Build.Tasks.Deployment.Bootstrapper.IProductBuilder */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Deployment.Bootstrapper.IProductBuilder", true, [], function ($) {
    $.Method({}, "get_Product", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product")));
    $.Property({}, "Product");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0777432F-A60D-48b3-83DB-90326FE8C96E"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface Microsoft.Build.Tasks.Deployment.Bootstrapper.IProductBuilderCollection */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Deployment.Bootstrapper.IProductBuilderCollection", true, [], function ($) {
    $.Method({}, "Add", JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilder")));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0D593FC0-E3F1-4dad-A674-7EA4D327F79B"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface Microsoft.Build.Tasks.Deployment.Bootstrapper.IBuildResults */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Deployment.Bootstrapper.IBuildResults", true, [], function ($) {
    $.Method({}, "get_Succeeded", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_KeyFile", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_ComponentFiles", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String])));
    $.Method({}, "get_Messages", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessage")])));
    $.Property({}, "Succeeded");
    $.Property({}, "KeyFile");
    $.Property({}, "ComponentFiles");
    $.Property({}, "Messages");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["586B842C-D9C7-43b8-84E4-9CFC3AF9F13B"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* interface Microsoft.Build.Tasks.Deployment.Bootstrapper.IBuildMessage */ 

JSIL.MakeInterface(
  "Microsoft.Build.Tasks.Deployment.Bootstrapper.IBuildMessage", true, [], function ($) {
    $.Method({}, "get_Severity", JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessageSeverity")));
    $.Method({}, "get_Message", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_HelpKeyword", JSIL.MethodSignature.Return($.String));
    $.Method({}, "get_HelpId", JSIL.MethodSignature.Return($.Int32));
    $.Property({}, "Severity");
    $.Property({}, "Message");
    $.Property({}, "HelpKeyword");
    $.Property({}, "HelpId");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["E3C981EA-99E6-4f48-8955-1AAFDFB5ACE4"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual]; });

/* enum Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessageSeverity */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildMessageSeverity", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Info: 0, 
    Warning: 1, 
    Error: 2, 
  }
);

/* enum Microsoft.Build.Tasks.Deployment.Bootstrapper.ComponentsLocation */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.Deployment.Bootstrapper.ComponentsLocation", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    HomeSite: 0, 
    Relative: 1, 
    Absolute: 2, 
  }
);

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.Bootstrapper.NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "BeginUpdateResourceW", 
      new JSIL.MethodSignature($.IntPtr, [$.String, $.Boolean]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EndUpdateResource", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $.Boolean]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "UpdateResourceW", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.IntPtr, 
          $.String, $.Int16, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.Package */ 

(function Package$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.Package", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"), $asm2F.TypeRef("System.Xml.XmlNode"), 
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.XmlValidationResults"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Culture", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Node", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Product", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValidationPassed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValidationResults", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.XmlValidationResults"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "culture", $.String);

    $.Field({Static:false, Public:false}, "product", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"));

    $.Field({Static:false, Public:false}, "node", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "validationResults", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.XmlValidationResults"));

    $.Property({Static:false, Public:false}, "Node", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Culture", $.String);

    $.Property({Static:false, Public:true }, "Product", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"));

    $.Property({Static:false, Public:false}, "ValidationPassed", $.Boolean);

    $.Property({Static:false, Public:false}, "ValidationResults", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.XmlValidationResults"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.PackageCollection */ 

(function PackageCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.PackageCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Package"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Package"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Package", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Package"), [$.String])
    );

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "cultures", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Tasks.Deployment.Bootstrapper.CopyAllFilesType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Tasks.Deployment.Bootstrapper.CopyAllFilesType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    CopyAllFilesFalse: 0, 
    CopyAllFilesTrue: 1, 
    CopyAllFilesIfNotHomeSite: 2, 
  }
);

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.Product */ 

(function Product$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.Product", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlNode"), $.String, 
          $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductValidationResults"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDependentProduct", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIncludedProduct", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddMissingDependency", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPackage", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Package"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsCulture", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsDependencies", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.List`1", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CopyAllPackageFiles", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.CopyAllFilesType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Dependencies", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.List`1", [$.Type])]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Includes", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MissingDependencies", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Node", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Packages", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.PackageCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProductBuilder", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProductCode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValidationPassed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValidationResults", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductValidationResults"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPackageValidationResults", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.XmlValidationResults"), [$.String])
    );

    $.Field({Static:false, Public:false}, "node", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "productCode", $.String);

    $.Field({Static:false, Public:false}, "packages", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.PackageCollection"));

    $.Field({Static:false, Public:false}, "includes", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductCollection"));

    $.Field({Static:false, Public:false}, "dependencies", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.List`1", [$.Type])]));

    $.Field({Static:false, Public:false}, "missingDependencies", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "cultures", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "copyAllPackageFiles", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.CopyAllFilesType"));

    $.Field({Static:false, Public:false}, "validationResults", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductValidationResults"));

    $.Property({Static:false, Public:false}, "Node", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:false}, "CopyAllPackageFiles", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.CopyAllFilesType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ProductBuilder", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilder"));

    $.Property({Static:false, Public:true , Virtual:true }, "ProductCode", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Includes", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductCollection"));

    $.Property({Static:false, Public:false}, "Dependencies", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.List`1", [$.Type])]));

    $.Property({Static:false, Public:false}, "MissingDependencies", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "Packages", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.PackageCollection"));

    $.Property({Static:false, Public:false}, "ValidationPassed", $.Boolean);

    $.Property({Static:false, Public:false}, "ValidationResults", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductValidationResults"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.IProduct")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["532BF563-A85D-4088-8048-41F51AC5239F"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ClassInterfaceAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ClassInterfaceType.None]; });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilder */ 

(function ProductBuilder$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Product", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProductCode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "product", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"));

    $.Field({Static:false, Public:false}, "culture", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Product", $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "ProductCode", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.IProductBuilder")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilderCollection */ 

(function ProductBuilderCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilderCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductBuilder"), [$.Int32])
    );

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.IProductBuilderCollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["D25C0741-99CA-49f7-9460-95E5F25EEF43"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ClassInterfaceAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ClassInterfaceType.None]; });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductCollection */ 

(function ProductCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Product", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.Product"), [$.String])
    );

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "table", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.IProductCollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["EFFA164B-3E87-4195-88DB-8AC004DDFE2A"]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ClassInterfaceAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ClassInterfaceType.None]; });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.XmlValidationResults */ 

(function XmlValidationResults$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.XmlValidationResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationErrors", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationPassed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationWarnings", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "SchemaValidationEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm2F.TypeRef("System.Xml.Schema.ValidationEventArgs")])
    );

    $.Field({Static:false, Public:false}, "filePath", $.String);

    $.Field({Static:false, Public:false}, "validationErrors", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "validationWarnings", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "FilePath", $.String);

    $.Property({Static:false, Public:true }, "ValidationErrors", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "ValidationPassed", $.Boolean);

    $.Property({Static:false, Public:true }, "ValidationWarnings", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductValidationResults */ 

(function ProductValidationResults$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.XmlValidationResults"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.ProductValidationResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddPackageResults", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.XmlValidationResults")])
    );

    $.ExternalMethod({Static:false, Public:true }, "PackageResults", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.XmlValidationResults"), [$.String])
    );

    $.Field({Static:false, Public:false}, "packageValidationResults", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.ResourceUpdater */ 

(function ResourceUpdater$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.ResourceUpdater", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddFileResource", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddStringResource", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StringToByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "UpdateResources", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm01.TypeRef("Microsoft.Build.Tasks.Deployment.Bootstrapper.BuildResults")])
    );

    $.Constant({Static:true , Public:false}, "ERROR_SHARING_VIOLATION", $.Int32, -2147024864);

    $.Field({Static:false, Public:false}, "stringResources", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "fileResources", $asm07.TypeRef("System.Collections.ArrayList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.ResourceUpdater+StringResource */ 

(function StringResource$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.ResourceUpdater+StringResource", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String
        ])
    );

    $.Field({Static:false, Public:true }, "Type", $.Int32);

    $.Field({Static:false, Public:true }, "Name", $.String);

    $.Field({Static:false, Public:true }, "Data", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.ResourceUpdater+FileResource */ 

(function FileResource$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Tasks.Deployment.Bootstrapper.ResourceUpdater+FileResource", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:true }, "Filename", $.String);

    $.Field({Static:false, Public:true }, "Key", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Tasks.Deployment.Bootstrapper.Util */ 

(function Util$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("Microsoft.Build.Tasks.Deployment.Bootstrapper.Util", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "AddTrailingChar", 
      new JSIL.MethodSignature($.String, [$.String, $.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultCultureInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCultureInfoFromString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Globalization.CultureInfo"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDefaultPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsUncPath", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsWebUrl", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadRegistryString", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("Microsoft.Win32.RegistryKey"), $.String, 
          $.String
        ])
    );

    $.Constant({Static:true , Public:false}, "BOOTSTRAPPER_REGISTRY_PATH_BASE", $.String, "Software\\Microsoft\\GenericBootstrapper\\");

    $.Constant({Static:true , Public:false}, "BOOTSTRAPPER_WOW64_REGISTRY_PATH_BASE", $.String, "Software\\Wow6432Node\\Microsoft\\GenericBootstrapper\\");

    $.Constant({Static:true , Public:false}, "BOOTSTRAPPER_REGISTRY_PATH_VERSION_VS2010", $.String, "4.0");

    $.Constant({Static:true , Public:false}, "REGISTRY_DEFAULTPATH", $.String, "Path");

    $.Field({Static:true , Public:false}, "defaultPath", $.String);

    $.Property({Static:true , Public:true }, "DefaultCultureInfo", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "DefaultPath", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Build.Collections");
/* class Microsoft.Build.Collections.CopyOnWriteDictionary`2 */ 

(function CopyOnWriteDictionary$b2$Members () {
  var $, $thisType;














































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.CopyOnWriteDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("K")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("K")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Comparer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("K")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Dummy", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDummy", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("V"), [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("K")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadOperation", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
            $.GenericParameter("K"), $.GenericParameter("V"), 
            $.GenericParameter("K"), $.GenericParameter("V")
          ]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("V")]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteOperation", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
            $.GenericParameter("K"), $.GenericParameter("V"), 
            $.GenericParameter("K"), $.GenericParameter("V")
          ]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "HasSameBacking", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_IsFixedSize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Values");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionaryEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("V")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "keyComparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("K")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "capacity", $.Int32);

    $.Field({Static:true , Public:false}, "dummy", $asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]));

    $.Field({Static:false, Public:false}, "backing", $asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
          $.GenericParameter("K"), $.GenericParameter("V"), 
          $.GenericParameter("K"), $.GenericParameter("V")
        ]));

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("K")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("V")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.GenericProperty({Static:true , Public:false}, "Dummy", $asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]));

    $.Property({Static:false, Public:false}, "IsDummy", $.Boolean);

    $.Property({Static:false, Public:false}, "Comparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("K")]));

    $.Property({Static:false, Public:false}, "ReadOperation", $asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
          $.GenericParameter("K"), $.GenericParameter("V"), 
          $.GenericParameter("K"), $.GenericParameter("V")
        ]));

    $.Property({Static:false, Public:false}, "WriteOperation", $asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
          $.GenericParameter("K"), $.GenericParameter("V"), 
          $.GenericParameter("K"), $.GenericParameter("V")
        ]));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("V"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), 
      /* 3 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IDictionary"), 
      /* 5 */ $asm07.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Build.Collections.HybridDictionary`2 */ 

(function HybridDictionary$b2$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.HybridDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Collections.HybridDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToOrUpdateList", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), $.GenericParameter("TKey"), 
          $.GenericParameter("TValue"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Comparer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Values");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionaryEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "MaxListSize", $.Int32);

    $.Field({Static:false, Public:false}, "store", $.Object);

    $.Field({Static:false, Public:false}, "comparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:true }, "Comparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TValue")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 3 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IDictionary"), 
      /* 5 */ $asm07.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct Microsoft.Build.Collections.HybridDictionary`2+SingleEnumerator */ 

(function SingleEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Collections.HybridDictionary`2+SingleEnumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.Field({Static:false, Public:false}, "value", $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Field({Static:false, Public:false}, "enumerationComplete", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Collections.HybridDictionary`2+SingleDictionaryEntryEnumerator */ 

(function SingleDictionaryEntryEnumerator$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Collections.HybridDictionary`2+SingleDictionaryEntryEnumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.DictionaryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Entry", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.DictionaryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "value", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.Field({Static:false, Public:false}, "enumerationComplete", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Entry", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IDictionaryEnumerator"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Collections.HybridDictionary`2+ListDictionaryEntryEnumerator`2 */ 

(function ListDictionaryEntryEnumerator$b2$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Collections.HybridDictionary`2+ListDictionaryEntryEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue", "KK", "VV"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("KK"), $.GenericParameter("VV")])])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Entry", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.DictionaryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "enumerator", $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("KK"), $.GenericParameter("VV")])]));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Entry", $asm07.TypeRef("System.Collections.DictionaryEntry"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IDictionaryEnumerator"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2 */ 

(function CopyOnWriteBackingDictionary$b2$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Collections.HybridDictionary`2", [new JSIL.GenericParameter("K1", "Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2"), new JSIL.GenericParameter("V1", "Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2")]), 
      Name: "Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V", "K1", "V1"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("K1")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
            $.GenericParameter("K"), $.GenericParameter("V"), 
            $.GenericParameter("K1"), $.GenericParameter("V1")
          ])])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRef", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "CloneForWriteIfNecessary", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
            $.GenericParameter("K"), $.GenericParameter("V"), 
            $.GenericParameter("K1"), $.GenericParameter("V1")
          ]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasNoClones", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ReadOnlyEmptyInstance", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
            $.GenericParameter("K"), $.GenericParameter("V"), 
            $.GenericParameter("K1"), $.GenericParameter("V1")
          ]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDeserialized", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.Serialization.StreamingContext"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.Serialization.OnDeserializedAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "readOnlyEmptyDictionary", $asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
          $.GenericParameter("K"), $.GenericParameter("V"), 
          $.GenericParameter("K1"), $.GenericParameter("V1")
        ]));

    $.Field({Static:false, Public:false}, "refCount", $.Int32);

    $.GenericProperty({Static:true , Public:true }, "ReadOnlyEmptyInstance", $asm01.TypeRef("Microsoft.Build.Collections.CopyOnWriteDictionary`2+CopyOnWriteBackingDictionary`2", [
          $.GenericParameter("K"), $.GenericParameter("V"), 
          $.GenericParameter("K1"), $.GenericParameter("V1")
        ]));

    $.Property({Static:false, Public:true }, "HasNoClones", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Collections.ReadOnlyEmptyCollection`1 */ 

(function ReadOnlyEmptyCollection$b1$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.ReadOnlyEmptyCollection`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyCollection`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm01.Microsoft.Build.Collections.ReadOnlyEmptyCollection$b1_$lGetEnumerator$gd__17.__Type__]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:true , Public:false}, "instance", $asm01.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyCollection`1", [$.GenericParameter("T")]));

    $.GenericProperty({Static:true , Public:true }, "Instance", $asm01.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyCollection`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm07.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Collections.ReadOnlyEmptyCollection`1+<GetEnumerator>d__17 */ 

(function $lGetEnumerator$gd__17$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.ReadOnlyEmptyCollection`1+<GetEnumerator>d__17", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Build.Collections.ReadOnlyCollection`1 */ 

(function ReadOnlyCollection$b1$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.ReadOnlyCollection`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BackingCollection", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "backing", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false}, "BackingCollection", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm07.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Collections.ReadOnlyEmptyDictionary`2 */ 

(function ReadOnlyEmptyDictionary$b2$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.ReadOnlyEmptyDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("V"), [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("K")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("V")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.GenericParameter("K"), $.GenericParameter("V")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "get_Values");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionaryEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IDictionary"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("K"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("V")])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "backing", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]));

    $.Field({Static:true , Public:false}, "instance", $asm01.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]));

    $.GenericProperty({Static:true , Public:true }, "Instance", $asm01.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("K")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("V")]));

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Keys", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("V"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])]), 
      /* 3 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IDictionary"), 
      /* 5 */ $asm07.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Build.Collections.ReadOnlyEmptyList`1 */ 

(function ReadOnlyEmptyList$b1$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.ReadOnlyEmptyList`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyList`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm01.Microsoft.Build.Collections.ReadOnlyEmptyList$b1_$lGetEnumerator$gd__17.__Type__]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:true , Public:false}, "instance", $asm01.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyList`1", [$.GenericParameter("T")]));

    $.GenericProperty({Static:true , Public:true }, "Instance", $asm01.TypeRef("Microsoft.Build.Collections.ReadOnlyEmptyList`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("T"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = 0"]; });

})();

/* class Microsoft.Build.Collections.ReadOnlyEmptyList`1+<GetEnumerator>d__17 */ 

(function $lGetEnumerator$gd__17$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Collections.ReadOnlyEmptyList`1+<GetEnumerator>d__17", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("Microsoft.Build.Shared");
/* class Microsoft.Build.Shared.AssemblyFoldersEx */ 

(function AssemblyFoldersEx$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.AssemblyFoldersEx", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyNames"), 
          $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue"), $asm07.TypeRef("System.Reflection.ProcessorArchitecture"), 
          $asm01.TypeRef("Microsoft.Build.Shared.OpenBaseKey")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddCandidateVersion", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Collections.Generic.SortedDictionary`2", [$asm07.TypeRef("System.Version"), $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]), $.String, 
          $asm07.TypeRef("System.Version")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDirectories", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("Microsoft.Win32.RegistryView"), $asm07.TypeRef("Microsoft.Win32.RegistryHive"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyNames"), 
          $asm01.TypeRef("Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue"), $asm01.TypeRef("Microsoft.Build.Shared.OpenBaseKey")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GatherVersionStrings", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Build.Shared.ExtensionFoldersRegistryKey")]), [$.String, $asm07.TypeRef("System.Collections.IEnumerable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsVersionInsideRange", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Version"), $asm07.TypeRef("Microsoft.Win32.RegistryKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchingPlatformExists", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lMicrosoft.Build.Utilities.AssemblyFoldersExInfo$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm02.TypeRef("Microsoft.Build.Utilities.AssemblyFoldersExInfo")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("Microsoft.Build.Utilities.AssemblyFoldersExInfo")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "directoryNames", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Microsoft.Build.Utilities.AssemblyFoldersExInfo")]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("Microsoft.Build.Utilities.AssemblyFoldersExInfo")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.AssemblyNameComparer */ 

(function AssemblyNameComparer$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.AssemblyNameComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Comparer", $asm07.TypeRef("System.Collections.IComparer"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComparerConsiderRetargetable", $asm07.TypeRef("System.Collections.IComparer"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "GenericComparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]), function ($pi) {
        return $asm07.System.Collections.Generic.IEqualityComparer$b1.Of($asm01.Microsoft.Build.Shared.AssemblyNameExtension).$As($pi.Comparer);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "GenericComparerConsiderRetargetable", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]), function ($pi) {
        return $asm07.System.Collections.Generic.IEqualityComparer$b1.Of($asm01.Microsoft.Build.Shared.AssemblyNameExtension).$As($pi.ComparerConsiderRetargetable);
      });

    $.Field({Static:false, Public:false}, "considerRetargetableFlag", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEqualityComparer"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.AssemblyNameReverseVersionComparer */ 

(function AssemblyNameReverseVersionComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.AssemblyNameReverseVersionComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension"), $asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "GenericComparer", $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm01.TypeRef("Microsoft.Build.Shared.AssemblyNameExtension")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.CanonicalError */ 

(function CanonicalError$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Build.Shared.CanonicalError", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ConvertToIntWithDefault", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Parse", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.CanonicalError+Parts"), [$.String])
    );

    $.Field({Static:true , Public:false}, "originCategoryCodeTextExpression", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "filenameLocationFromOrigin", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "lineFromLocation", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "lineLineFromLocation", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "lineColFromLocation", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "lineColColFromLocation", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "lineColLineColFromLocation", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.CanonicalError+Parts */ 

(function Parts$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.CanonicalError+Parts", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "numberNotSpecified", $.Int32, 0);

    $.Field({Static:false, Public:false}, "origin", $.String);

    $.Field({Static:false, Public:false}, "line", $.Int32);

    $.Field({Static:false, Public:false}, "column", $.Int32);

    $.Field({Static:false, Public:false}, "endLine", $.Int32);

    $.Field({Static:false, Public:false}, "endColumn", $.Int32);

    $.Field({Static:false, Public:false}, "category", $asm01.TypeRef("Microsoft.Build.Shared.CanonicalError+Parts+Category"));

    $.Field({Static:false, Public:false}, "subcategory", $.String);

    $.Field({Static:false, Public:false}, "code", $.String);

    $.Field({Static:false, Public:false}, "text", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Shared.CanonicalError+Parts+Category */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Shared.CanonicalError+Parts+Category", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Warning: 0, 
    Error: 1, 
  }
);

/* class Microsoft.Build.Shared.ItemMetadataNames */ 

(function ItemMetadataNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.Build.Shared.ItemMetadataNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "fusionName", $.String, "FusionName");

    $.Constant({Static:true , Public:false}, "hintPath", $.String, "HintPath");

    $.Constant({Static:true , Public:false}, "assemblyFolderKey", $.String, "AssemblyFolderKey");

    $.Constant({Static:true , Public:false}, "alias", $.String, "Alias");

    $.Constant({Static:true , Public:false}, "aliases", $.String, "Aliases");

    $.Constant({Static:true , Public:false}, "parentFile", $.String, "ParentFile");

    $.Constant({Static:true , Public:false}, "privateMetadata", $.String, "Private");

    $.Constant({Static:true , Public:false}, "copyLocal", $.String, "CopyLocal");

    $.Constant({Static:true , Public:false}, "isRedistRoot", $.String, "IsRedistRoot");

    $.Constant({Static:true , Public:false}, "redist", $.String, "Redist");

    $.Constant({Static:true , Public:false}, "resolvedFrom", $.String, "ResolvedFrom");

    $.Constant({Static:true , Public:false}, "destinationSubDirectory", $.String, "DestinationSubDirectory");

    $.Constant({Static:true , Public:false}, "specificVersion", $.String, "SpecificVersion");

    $.Constant({Static:true , Public:false}, "link", $.String, "Link");

    $.Constant({Static:true , Public:false}, "subType", $.String, "SubType");

    $.Constant({Static:true , Public:false}, "executableExtension", $.String, "ExecutableExtension");

    $.Constant({Static:true , Public:false}, "embedInteropTypes", $.String, "EmbedInteropTypes");

    $.Constant({Static:true , Public:false}, "targetPath", $.String, "TargetPath");

    $.Constant({Static:true , Public:false}, "dependentUpon", $.String, "DependentUpon");

    $.Constant({Static:true , Public:false}, "msbuildSourceProjectFile", $.String, "MSBuildSourceProjectFile");

    $.Constant({Static:true , Public:false}, "msbuildSourceTargetName", $.String, "MSBuildSourceTargetName");

    $.Constant({Static:true , Public:false}, "isPrimary", $.String, "IsPrimary");

    $.Constant({Static:true , Public:false}, "targetFramework", $.String, "RequiredTargetFramework");

    $.Constant({Static:true , Public:false}, "frameworkDirectory", $.String, "FrameworkDirectory");

    $.Constant({Static:true , Public:false}, "version", $.String, "Version");

    $.Constant({Static:true , Public:false}, "imageRuntime", $.String, "ImageRuntime");

    $.Constant({Static:true , Public:false}, "winMDFile", $.String, "WinMDFile");

    $.Constant({Static:true , Public:false}, "winMDFileType", $.String, "WinMDFileType");

    $.Constant({Static:true , Public:false}, "msbuildReferenceSourceTarget", $.String, "ReferenceSourceTarget");

    $.Constant({Static:true , Public:false}, "msbuildReferenceGrouping", $.String, "ReferenceGrouping");

    $.Constant({Static:true , Public:false}, "msbuildReferenceGroupingDisplayName", $.String, "ReferenceGroupingDisplayName");

    $.Constant({Static:true , Public:false}, "msbuildReferenceFromSDK", $.String, "ReferenceFromSDK");

    $.Constant({Static:true , Public:false}, "winmdImplmentationFile", $.String, "Implementation");

    $.Constant({Static:true , Public:false}, "projectReferenceOriginalItemSpec", $.String, "ProjectReferenceOriginalItemSpec");

    $.Constant({Static:true , Public:false}, "IgnoreVersionForFrameworkReference", $.String, "IgnoreVersionForFrameworkReference");

    $.Constant({Static:true , Public:false}, "frameworkFile", $.String, "FrameworkFile");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.ExtensionFoldersRegistryKey */ 

(function ExtensionFoldersRegistryKey$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Version)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };




  function ExtensionFoldersRegistryKey_get_ComponentVersion () {
    return this.ExtensionFoldersRegistryKey$ComponentVersion$value;
  }; 

  function ExtensionFoldersRegistryKey_get_RegistryKey () {
    return this.ExtensionFoldersRegistryKey$RegistryKey$value;
  }; 

  function ExtensionFoldersRegistryKey_get_TargetFrameworkVersion () {
    return this.ExtensionFoldersRegistryKey$TargetFrameworkVersion$value;
  }; 

  function ExtensionFoldersRegistryKey_set_ComponentVersion (value) {
    this.ExtensionFoldersRegistryKey$ComponentVersion$value = value;
  }; 

  function ExtensionFoldersRegistryKey_set_RegistryKey (value) {
    this.ExtensionFoldersRegistryKey$RegistryKey$value = value;
  }; 

  function ExtensionFoldersRegistryKey_set_TargetFrameworkVersion (value) {
    this.ExtensionFoldersRegistryKey$TargetFrameworkVersion$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.ExtensionFoldersRegistryKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Version")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Version"), 
          $asm07.TypeRef("System.Version")
        ])
    );

    $.Method({Static:false, Public:false}, "get_ComponentVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version")), 
      ExtensionFoldersRegistryKey_get_ComponentVersion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_RegistryKey", 
      JSIL.MethodSignature.Return($.String), 
      ExtensionFoldersRegistryKey_get_RegistryKey
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_TargetFrameworkVersion", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version")), 
      ExtensionFoldersRegistryKey_get_TargetFrameworkVersion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ComponentVersion", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version")), 
      ExtensionFoldersRegistryKey_set_ComponentVersion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RegistryKey", 
      JSIL.MethodSignature.Action($.String), 
      ExtensionFoldersRegistryKey_set_RegistryKey
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TargetFrameworkVersion", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version")), 
      ExtensionFoldersRegistryKey_set_TargetFrameworkVersion
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ExtensionFoldersRegistryKey$RegistryKey$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ExtensionFoldersRegistryKey$ComponentVersion$value", $asm07.TypeRef("System.Version"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ExtensionFoldersRegistryKey$TargetFrameworkVersion$value", $asm07.TypeRef("System.Version"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "RegistryKey", $.String);

    $.Property({Static:false, Public:false}, "ComponentVersion", $asm07.TypeRef("System.Version"));

    $.Property({Static:false, Public:false}, "TargetFrameworkVersion", $asm07.TypeRef("System.Version"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Build.Shared.DirectoryGetFiles */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.DirectoryGetFiles", false, [], 
  new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.String")]), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Shared.GetDirectories */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.GetDirectories", false, [], 
  new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.String")]), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Shared.DirectoryExists */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.DirectoryExists", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Shared.FileExists */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.FileExists", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Shared.FileCopy */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.FileCopy", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Shared.FileDelete */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.FileDelete", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.String")));

/* delegate Microsoft.Build.Shared.FileCreate */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.FileCreate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.IO.FileStream"), [$asm07.TypeRef("System.String")]));

/* struct Microsoft.Build.Shared.NGen`1 */ 

(function NGen$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Shared.NGen`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm01.TypeRef("Microsoft.Build.Shared.NGen`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.NGen`1", [$.GenericParameter("T")]), [$.GenericParameter("T")])
    );

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Build.Shared.OpenBaseKey */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.OpenBaseKey", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.RegistryKey"), [$asm07.TypeRef("Microsoft.Win32.RegistryHive"), $asm07.TypeRef("Microsoft.Win32.RegistryView")]));

/* delegate Microsoft.Build.Shared.GetRegistrySubKeyNames */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.GetRegistrySubKeyNames", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.String")]), [$asm07.TypeRef("Microsoft.Win32.RegistryKey"), $asm07.TypeRef("System.String")]));

/* delegate Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.String"), [$asm07.TypeRef("Microsoft.Win32.RegistryKey"), $asm07.TypeRef("System.String")]));

/* class Microsoft.Build.Shared.RegistryHelper */ 

(function RegistryHelper$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Build.Shared.RegistryHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultValue", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("Microsoft.Win32.RegistryKey"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSubKeyNames", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [$asm07.TypeRef("Microsoft.Win32.RegistryKey"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenBaseKey", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.RegistryKey"), [$asm07.TypeRef("Microsoft.Win32.RegistryHive"), $asm07.TypeRef("Microsoft.Win32.RegistryView")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.FileUtilities */ 

(function FileUtilities$Members () {
  var $, $thisType;






































  JSIL.MakeStaticClass("Microsoft.Build.Shared.FileUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AttemptToShortenPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClearCacheDirectory", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateUriFromPath", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Uri"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeleteDirectoryNoThrow", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeleteNoThrow", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "DirectoryExistsNoThrow", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EndsWithSlash", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureNoLeadingSlash", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureNoTrailingSlash", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureTrailingSlash", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FileExistsNoThrow", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FileOrDirectoryExistsNoThrow", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentExecutableConfigurationFilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentExecutableDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentExecutableName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentExecutablePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExecutingAssemblyPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCacheDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDirectory", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDirectoryNameOfFullPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileInfoNoThrow", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.FileInfo"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFullPath", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFullPathNoThrow", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHexHash", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPathsHash", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTemporaryFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTemporaryFile", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTemporaryFile", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasExtension", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMetaprojectFilename", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRootedNoThrow", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSlash", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSolutionFilename", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsVCProjFilename", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeRelative", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NormalizePath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TrimAndStripAnyQuotes", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "MaxPath", $.Int32, 260);

    $.Field({Static:true , Public:false}, "cacheDirectory", $.String, null);

    $.Field({Static:true , Public:false}, "lastBufferSizeNeeded", $.Int32, function ($pi) {
        return $asm01.Microsoft.Build.Shared.NativeMethodsShared.MAX_PATH;
      });

    $.Constant({Static:true , Public:false}, "FileTimeFormat", $.String, "yyyy'-'MM'-'dd HH':'mm':'ss'.'fffffff");

    $.Field({Static:true , Public:false}, "executablePath", $.String);

    $.Property({Static:true , Public:false}, "ExecutingAssemblyPath", $.String);

    $.Property({Static:true , Public:false}, "CurrentExecutableName", $.String);

    $.Property({Static:true , Public:false}, "CurrentExecutablePath", $.String);

    $.Property({Static:true , Public:false}, "CurrentExecutableDirectory", $.String);

    $.Property({Static:true , Public:false}, "CurrentExecutableConfigurationFilePath", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.FileUtilities+ItemSpecModifiers */ 

(function ItemSpecModifiers$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.Build.Shared.FileUtilities+ItemSpecModifiers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetItemSpecModifier", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetItemSpecModifier", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDerivableItemSpecModifier", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsItemSpecModifier", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowForUrl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.Constant({Static:true , Public:false}, "FullPath", $.String, "FullPath");

    $.Constant({Static:true , Public:false}, "RootDir", $.String, "RootDir");

    $.Constant({Static:true , Public:false}, "Filename", $.String, "Filename");

    $.Constant({Static:true , Public:false}, "Extension", $.String, "Extension");

    $.Constant({Static:true , Public:false}, "RelativeDir", $.String, "RelativeDir");

    $.Constant({Static:true , Public:false}, "Directory", $.String, "Directory");

    $.Constant({Static:true , Public:false}, "RecursiveDir", $.String, "RecursiveDir");

    $.Constant({Static:true , Public:false}, "Identity", $.String, "Identity");

    $.Constant({Static:true , Public:false}, "ModifiedTime", $.String, "ModifiedTime");

    $.Constant({Static:true , Public:false}, "CreatedTime", $.String, "CreatedTime");

    $.Constant({Static:true , Public:false}, "AccessedTime", $.String, "AccessedTime");

    $.Field({Static:true , Public:false, ReadOnly:true }, "All", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "tableOfItemSpecModifiers", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.MetadataConversionUtilities */ 

(function MetadataConversionUtilities$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("Microsoft.Build.Shared.MetadataConversionUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "TryConvertItemMetadataToBool", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryConvertItemMetadataToBool", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("Microsoft.Build.Framework.ITaskItem"), $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.ExceptionHandling */ 

(function ExceptionHandling$Members () {
  var $, $thisType;













  JSIL.MakeStaticClass("Microsoft.Build.Shared.ExceptionHandling", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DumpExceptionToFile", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlLineAndColumn", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.ExceptionHandling+LineAndColumn"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCriticalException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIoRelatedException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsXmlException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotExpectedException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotExpectedFunctionException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotExpectedIoOrXmlException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotExpectedReflectionException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotExpectedRegistryException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotExpectedSerializationException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExceptionHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.UnhandledExceptionEventArgs")])
    );

    $.Field({Static:true , Public:false}, "dumpFileName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Shared.ExceptionHandling+LineAndColumn */ 

(function LineAndColumn$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };


  function LineAndColumn_get_Column () {
    return this.LineAndColumn$Column$value;
  }; 

  function LineAndColumn_get_Line () {
    return this.LineAndColumn$Line$value;
  }; 

  function LineAndColumn_set_Column (value) {
    this.LineAndColumn$Column$value = (value | 0);
  }; 

  function LineAndColumn_set_Line (value) {
    this.LineAndColumn$Line$value = (value | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Shared.ExceptionHandling+LineAndColumn", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, "get_Column", 
      JSIL.MethodSignature.Return($.Int32), 
      LineAndColumn_get_Column
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Line", 
      JSIL.MethodSignature.Return($.Int32), 
      LineAndColumn_get_Line
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Column", 
      JSIL.MethodSignature.Action($.Int32), 
      LineAndColumn_set_Column
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Line", 
      JSIL.MethodSignature.Action($.Int32), 
      LineAndColumn_set_Line
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "LineAndColumn$Line$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "LineAndColumn$Column$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "Line", $.Int32);

    $.Property({Static:false, Public:false}, "Column", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.EscapingUtilities */ 

(function EscapingUtilities$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("Microsoft.Build.Shared.EscapingUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ContainsEscapedWildcards", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsReservedCharacters", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Escape", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnescapeAll", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnescapeAll", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Field({Static:true , Public:false}, "charsToEscape", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.FileMatcher */ 

(function FileMatcher$Members () {
  var $, $thisType;





















  JSIL.MakeStaticClass("Microsoft.Build.Shared.FileMatcher", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FileMatch", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.FileMatcher+Result"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAccessibleDirectories", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAccessibleFiles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAccessibleFilesAndDirectories", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAccessibleFileSystemEntries", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $asm01.TypeRef("Microsoft.Build.Shared.FileMatcher+FileSystemEntity"), $.String, 
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFiles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFiles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $.String, $.String, 
          $asm01.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries"), $asm01.TypeRef("Microsoft.Build.Shared.DirectoryExists")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileSpecInfo", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Text.RegularExpressions.Regex")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileSpecInfo", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $asm01.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFilesRecursive", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.IList"), $.String, 
          $.String, $.String, 
          $.Int32, $asm0A.TypeRef("System.Text.RegularExpressions.Regex"), 
          $.Boolean, $.String, 
          $.Boolean, $asm01.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLongPathName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLongPathName", 
      new JSIL.MethodSignature($.String, [$.String, $asm01.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasWildcards", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasWildcardsSemicolonItemOrPropertyReferences", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDirectorySeparator", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "PreprocessFileSpecForSplitting", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RegularExpressionFromFileSpec", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveInitialDotSlash", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveProjectDirectory", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SplitFileSpec", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $asm01.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries")
        ])
    );

    $.Constant({Static:true , Public:false}, "recursiveDirectoryMatch", $.String, "**");

    $.Constant({Static:true , Public:false}, "dotdot", $.String, "..");

    $.Field({Static:true , Public:false, ReadOnly:true }, "directorySeparator", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "altDirectorySeparator", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "wildcardCharacters", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "wildcardAndSemicolonCharacters", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "directorySeparatorCharacters", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultGetFileSystemEntries", $asm01.TypeRef("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries"), function ($pi) {
        return $asm01.Microsoft.Build.Shared.FileMatcher_GetFileSystemEntries.New(null, null, new JSIL.MethodPointerInfo($thisType, "GetAccessibleFileSystemEntries", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
                $asm01.TypeRef("Microsoft.Build.Shared.FileMatcher+FileSystemEntity"), $.String, 
                $.String, $.String, 
                $.Boolean
              ]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultDirectoryExists", $asm01.TypeRef("Microsoft.Build.Shared.DirectoryExists"), function ($pi) {
        return $asm01.Microsoft.Build.Shared.DirectoryExists.New(null, null, new JSIL.MethodPointerInfo($asm07.System.IO.Directory, "Exists", new JSIL.MethodSignature($.Boolean, [$.String]), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "invalidPathChars", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Shared.FileMatcher+FileSystemEntity */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Shared.FileMatcher+FileSystemEntity", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Files: 0, 
    Directories: 1, 
    FilesAndDirectories: 2, 
  }
);

/* delegate Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries */ 

JSIL.MakeDelegate("Microsoft.Build.Shared.FileMatcher+GetFileSystemEntries", false, [], 
  new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.String")]), [
      $asm01.TypeRef("Microsoft.Build.Shared.FileMatcher+FileSystemEntity"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.String"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.Boolean")
    ]));

/* class Microsoft.Build.Shared.FileMatcher+Result */ 

(function Result$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.FileMatcher+Result", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "isLegalFileSpec", $.Boolean);

    $.Field({Static:false, Public:false}, "isMatch", $.Boolean);

    $.Field({Static:false, Public:false}, "isFileSpecRecursive", $.Boolean);

    $.Field({Static:false, Public:false}, "fixedDirectoryPart", $.String);

    $.Field({Static:false, Public:false}, "wildcardDirectoryPart", $.String);

    $.Field({Static:false, Public:false}, "filenamePart", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.VersionUtilities */ 

(function VersionUtilities$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Build.Shared.VersionUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ConvertToVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToVersion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Version"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GatherVersionStrings", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Collections.Generic.SortedDictionary`2", [$asm07.TypeRef("System.Version"), $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])]), [$asm07.TypeRef("System.Version"), $asm07.TypeRef("System.Collections.IEnumerable")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.ReverseStringGenericComparer */ 

(function ReverseStringGenericComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.ReverseStringGenericComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IComparer$lSystem.String$g.Compare", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.String")]), "Compare");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Comparer", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.ReverseVersionGenericComparer */ 

(function ReverseVersionGenericComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.ReverseVersionGenericComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IComparer$lSystem.Version$g.Compare", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Version"), $asm07.TypeRef("System.Version")])
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.Version")]), "Compare");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Comparer", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("System.Version")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.VisualStudioConstants */ 

(function VisualStudioConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.Build.Shared.VisualStudioConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "CurrentVisualStudioSolutionFileVersion", $.Int32, 12);

    $.Constant({Static:true , Public:false}, "CurrentVisualStudioVersion", $.String, "10.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.AssemblyResources */ 

(function AssemblyResources$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("Microsoft.Build.Shared.AssemblyResources", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_PrimaryResources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SharedResources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "sharedResources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "PrimaryResources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "SharedResources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Build.Shared.PartialComparisonFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Shared.PartialComparisonFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    SimpleName: 1, 
    Version: 2, 
    Culture: 4, 
    PublicKeyToken: 8, 
    Default: 15, 
  }
);

/* class Microsoft.Build.Shared.AssemblyNameExtension */ 

(function AssemblyNameExtension$Members () {
  var $, $thisType;

















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.AssemblyNameExtension", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.AssemblyName"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRemappedAssemblyName", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneImmutable", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareBaseNamesStringWise", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareBaseNameTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareBaseNameToImpl", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareCulture", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComparePublicKeyToken", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComparePublicKeyTokens", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAssemblyName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateFullName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "EqualsIgnoreVersion", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "EqualsImpl", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeDisplayNameCharacters", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AssemblyName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.AssemblyName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CultureInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasProcessorArchitectureInFusionName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Immutable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSimpleName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnnamedAssembly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessorArchitecture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.ProcessorArchitecture"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RemappedFromEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Retargetable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnnamedAssembly", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Version", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAssemblyNameEx", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAssemblyNameFromDisplayName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.AssemblyName"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPublicKeyToken", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeRemappedFrom", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkImmutable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PartialNameCompare", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "PartialNameCompare", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "PartialNameCompare", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm01.TypeRef("Microsoft.Build.Shared.PartialComparisonFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PartialNameCompare", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $asm01.TypeRef("Microsoft.Build.Shared.PartialComparisonFlags"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceVersion", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRemappedFromDefaultAfterSerialization", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.Serialization.StreamingContext"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.Serialization.OnDeserializedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "asAssemblyName", $asm07.TypeRef("System.Reflection.AssemblyName"));

    $.Field({Static:false, Public:false}, "asString", $.String);

    $.Field({Static:false, Public:false}, "isSimpleName", $.Boolean);

    $.Field({Static:false, Public:false}, "hasProcessorArchitectureInFusionName", $.Boolean);

    $.Field({Static:false, Public:false}, "immutable", $.Boolean);

    $.Field({Static:false, Public:false}, "remappedFrom", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.Type]));

    $.Field({Static:true , Public:false}, "unnamedAssembly", $.Type);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "ProcessorArchitecture", $asm07.TypeRef("System.Reflection.ProcessorArchitecture"));

    $.Property({Static:false, Public:false}, "Version", $asm07.TypeRef("System.Version"));

    $.Property({Static:false, Public:false}, "IsSimpleName", $.Boolean);

    $.Property({Static:false, Public:false}, "HasProcessorArchitectureInFusionName", $.Boolean);

    $.Property({Static:false, Public:false}, "CultureInfo", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:false}, "Retargetable", $.Boolean);

    $.Property({Static:false, Public:false}, "RemappedFromEnumerator", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]));

    $.Property({Static:false, Public:false}, "AssemblyName", $asm07.TypeRef("System.Reflection.AssemblyName"));

    $.Property({Static:false, Public:false}, "FullName", $.String);

    $.Property({Static:true , Public:false}, "UnnamedAssembly", $.Type);

    $.Property({Static:false, Public:true }, "Immutable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUnnamedAssembly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.EncodingUtilities */ 

(function EncodingUtilities$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("Microsoft.Build.Shared.EncodingUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentSystemOemEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.Field({Static:true , Public:false}, "currentOemEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:true , Public:false}, "CurrentSystemOemEncoding", $asm07.TypeRef("System.Text.Encoding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.ErrorUtilities */ 

(function ErrorUtilities$Members () {
  var $, $thisType;







































  JSIL.MakeStaticClass("Microsoft.Build.Shared.ErrorUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "DebugTraceMessage", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "parameters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "ThrowArgument", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "ThrowArgument", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Exception"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "ThrowArgumentOutOfRange", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowIfTypeDoesNotImplementToString", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowInternalError", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "ThrowInternalError", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "ThrowInternalErrorUnreachable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidOperation", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrow", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrow", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrow", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrow", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrow", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Exception"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Exception"), 
          $.String, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Exception"), 
          $.String, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Exception"), 
          $.String, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgument", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Exception"), 
          $.String, $.Object, 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgumentArraysSameLength", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Array"), $asm07.TypeRef("System.Array"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgumentLength", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgumentLengthIfNotNull", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgumentNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgumentNull", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowArgumentOutOfRange", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInternalLength", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInternalLockHeld", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInternalNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInternalRooted", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInvalidOperation", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInvalidOperation", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInvalidOperation", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyThrowInvalidOperation", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "throwExceptions", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "enableMSBuildDebugTracing", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.ConversionUtilities */ 

(function ConversionUtilities$Members () {
  var $, $thisType;











  JSIL.MakeStaticClass("Microsoft.Build.Shared.ConversionUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CanConvertStringToBool", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertDecimalOrHexToDouble", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertDecimalToDouble", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertHexToDouble", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertStringToBool", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidBooleanFalse", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidBooleanTrue", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidDecimalNumber", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidDecimalOrHexNumber", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidHexNumber", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.FileUtilitiesRegex */ 

(function FileUtilitiesRegex$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("Microsoft.Build.Shared.FileUtilitiesRegex", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false, ReadOnly:true }, "DrivePattern", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "UNCPattern", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.InternalErrorException */ 

(function InternalErrorException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.Build.Shared.InternalErrorException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConsiderDebuggerLaunch", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.NativeMethodsShared */ 

(function NativeMethodsShared$Members () {
  var $, $thisType;












































  JSIL.MakeStaticClass("Microsoft.Build.Shared.NativeMethodsShared", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "CoWaitForMultipleHandles", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+COWAIT_FLAGS"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "ole32.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreatePipe", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle")]), 
          $asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+SecurityAttributes"), $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "FindOnPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.PInvokeMethod({Static:true , Public:false}, "FreeLibrary", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChildProcessIds", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int32, $asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+SafeProcessHandle")])]), [$.Int32, $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetCurrentDirectory", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $asm07.TypeRef("System.Text.StringBuilder")]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetFileAttributesEx", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+WIN32_FILE_ATTRIBUTE_DATA")])
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetFileType", 
      new JSIL.MethodSignature($.UInt32, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetFullPathName", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Text.StringBuilder"), $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLastWriteDirectoryUtcTime", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLastWriteFileUtcTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLongFilePath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetLongPathName", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMemoryStatus", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+MemoryStatus"))
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetModuleFileName", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetNativeSystemInfo", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+SYSTEM_INFO")])), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetOEMCP", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParentProcessId", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetProcAddress", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'ansi',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetRequestedRuntimeInfo", 
      new JSIL.MethodSignature($.UInt32, [
          $.String, $.String, 
          $.String, $.UInt32, 
          $.UInt32, $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $asm07.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "mscoree.dll", 
        CharSet: 'unicode',
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "GetShortFilePath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetShortPathName", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetStdHandle", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetSystemInfo", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+SYSTEM_INFO")])), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GlobalMemoryStatusEx", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+MemoryStatus")]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.ExternalMethod({Static:true , Public:true }, "HResultFailed", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "HResultSucceeded", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "KillTree", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.PInvokeMethod({Static:true , Public:false}, "LoadLibrary", 
      new JSIL.MethodSignature($.IntPtr, [$.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "MsgWaitOne", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.WaitHandle")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MsgWaitOne", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.WaitHandle"), $asm07.TypeRef("System.TimeSpan")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MsgWaitOne", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.WaitHandle"), $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "NtQueryInformationProcess", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+SafeProcessHandle"), $asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+PROCESSINFOCLASS"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+PROCESS_BASIC_INFORMATION")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "NTDLL.DLL", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "OpenProcess", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+SafeProcessHandle"), [
          $asm01.TypeRef("Microsoft.Build.Shared.NativeMethodsShared+eDesiredAccess"), $.Boolean, 
          $.Int32
        ]), 
      {
        Module: "KERNEL32.DLL", 
        Parameters: [
          {
            NativeType: "Boolean"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ReadFile", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SearchPath", 
      new JSIL.MethodSignature($.UInt32, [
          $.String, $.String, 
          $.String, $.Int32, 
          $asm07.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetCurrentDirectory", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "SetErrorMode", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetErrorMode_VistaAndOlder", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "kernel32.dll", 
        EntryPoint: "SetErrorMode", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetErrorMode_Win7AndNewer", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "kernel32.dll", 
        EntryPoint: "SetThreadErrorMode", 
      }
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowExceptionForErrorCode", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.PInvokeMethod({Static:true , Public:true }, "WaitForMultipleObjects", 
      new JSIL.MethodSignature($.Int32, [
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.IntPtr]), 
          $.Boolean, $.UInt32
        ]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.Constant({Static:true , Public:false}, "ERROR_INSUFFICIENT_BUFFER", $.UInt32, 2147942522);

    $.Constant({Static:true , Public:false}, "STARTUP_LOADER_SAFEMODE", $.UInt32, 16);

    $.Constant({Static:true , Public:false}, "S_OK", $.UInt32, 0);

    $.Constant({Static:true , Public:false}, "S_FALSE", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "ERROR_FILE_NOT_FOUND", $.UInt32, 2147942402);

    $.Constant({Static:true , Public:false}, "FUSION_E_PRIVATE_ASM_DISALLOWED", $.UInt32, 2148732996);

    $.Constant({Static:true , Public:false}, "RUNTIME_INFO_DONT_SHOW_ERROR_DIALOG", $.UInt32, 64);

    $.Constant({Static:true , Public:false}, "FILE_TYPE_CHAR", $.UInt32, 2);

    $.Constant({Static:true , Public:false}, "STD_OUTPUT_HANDLE", $.Int32, -11);

    $.Constant({Static:true , Public:false}, "RPC_S_CALLPENDING", $.UInt32, 2147549461);

    $.Constant({Static:true , Public:false}, "E_ABORT", $.UInt32, 2147500036);

    $.Constant({Static:true , Public:false}, "FILE_ATTRIBUTE_READONLY", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FILE_ATTRIBUTE_DIRECTORY", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "FILE_ATTRIBUTE_REPARSE_POINT", $.Int32, 1024);

    $.Constant({Static:true , Public:false}, "kernel32Dll", $.String, "kernel32.dll");

    $.Constant({Static:true , Public:false}, "mscoreeDLL", $.String, "mscoree.dll");

    $.Field({Static:true , Public:false}, "NullHandleRef", $asm07.TypeRef("System.Runtime.InteropServices.HandleRef"));

    $.Field({Static:true , Public:false}, "NullIntPtr", $.IntPtr);

    $.Constant({Static:true , Public:false}, "PROCESSOR_ARCHITECTURE_INTEL", $.UInt16, 0);

    $.Constant({Static:true , Public:false}, "PROCESSOR_ARCHITECTURE_ARM", $.UInt16, 5);

    $.Constant({Static:true , Public:false}, "PROCESSOR_ARCHITECTURE_IA64", $.UInt16, 6);

    $.Constant({Static:true , Public:false}, "PROCESSOR_ARCHITECTURE_AMD64", $.UInt16, 9);

    $.Constant({Static:true , Public:false}, "INFINITE", $.UInt32, 4294967295);

    $.Constant({Static:true , Public:false}, "WAIT_ABANDONED_0", $.UInt32, 128);

    $.Constant({Static:true , Public:false}, "WAIT_OBJECT_0", $.UInt32, 0);

    $.Constant({Static:true , Public:false}, "WAIT_TIMEOUT", $.UInt32, 258);

    $.Field({Static:true , Public:false}, "MAX_PATH", $.Int32, 260);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ThreadErrorModeMinOsVersion", $asm07.TypeRef("System.Version"));


    function NativeMethodsShared__cctor () {
      $thisType.NullHandleRef = new $asm07.System.Runtime.InteropServices.HandleRef();
      $thisType.NullIntPtr = new $asm07.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      NativeMethodsShared__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* enum Microsoft.Build.Shared.NativeMethodsShared+PROCESSINFOCLASS */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Shared.NativeMethodsShared+PROCESSINFOCLASS", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ProcessBasicInformation: 0, 
    ProcessQuotaLimits: 1, 
    ProcessIoCounters: 2, 
    ProcessVmCounters: 3, 
    ProcessTimes: 4, 
    ProcessBasePriority: 5, 
    ProcessRaisePriority: 6, 
    ProcessDebugPort: 7, 
    ProcessExceptionPort: 8, 
    ProcessAccessToken: 9, 
    ProcessLdtInformation: 10, 
    ProcessLdtSize: 11, 
    ProcessDefaultHardErrorMode: 12, 
    ProcessIoPortHandlers: 13, 
    ProcessPooledUsageAndLimits: 14, 
    ProcessWorkingSetWatch: 15, 
    ProcessUserModeIOPL: 16, 
    ProcessEnableAlignmentFaultFixup: 17, 
    ProcessPriorityClass: 18, 
    ProcessWx86Information: 19, 
    ProcessHandleCount: 20, 
    ProcessAffinityMask: 21, 
    ProcessPriorityBoost: 22, 
    MaxProcessInfoClass: 23, 
  }
);

/* enum Microsoft.Build.Shared.NativeMethodsShared+eDesiredAccess */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Shared.NativeMethodsShared+eDesiredAccess", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PROCESS_TERMINATE: 1, 
    PROCESS_CREATE_THREAD: 2, 
    PROCESS_SET_SESSIONID: 4, 
    PROCESS_VM_OPERATION: 8, 
    PROCESS_VM_READ: 16, 
    PROCESS_VM_WRITE: 32, 
    PROCESS_DUP_HANDLE: 64, 
    PROCESS_CREATE_PROCESS: 128, 
    PROCESS_SET_QUOTA: 256, 
    PROCESS_SET_INFORMATION: 512, 
    PROCESS_QUERY_INFORMATION: 1024, 
    DELETE: 65536, 
    READ_CONTROL: 131072, 
    WRITE_DAC: 262144, 
    WRITE_OWNER: 524288, 
    SYNCHRONIZE: 1048576, 
    PROCESS_ALL_ACCESS: 1052671, 
    STANDARD_RIGHTS_ALL: 2031616, 
  }
);

/* enum Microsoft.Build.Shared.NativeMethodsShared+COWAIT_FLAGS */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Build.Shared.NativeMethodsShared+COWAIT_FLAGS", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    COWAIT_NONE: 0, 
    COWAIT_WAITALL: 1, 
    COWAIT_ALERTABLE: 2, 
  }
);

/* struct Microsoft.Build.Shared.NativeMethodsShared+SYSTEM_INFO */ 

(function SYSTEM_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Shared.NativeMethodsShared+SYSTEM_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "wProcessorArchitecture", $.UInt16);

    $.Field({Static:false, Public:false}, "wReserved", $.UInt16);

    $.Field({Static:false, Public:false}, "dwPageSize", $.UInt32);

    $.Field({Static:false, Public:false}, "lpMinimumApplicationAddress", $.IntPtr);

    $.Field({Static:false, Public:false}, "lpMaximumApplicationAddress", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwActiveProcessorMask", $.IntPtr);

    $.Field({Static:false, Public:false}, "dwNumberOfProcessors", $.UInt32);

    $.Field({Static:false, Public:false}, "dwProcessorType", $.UInt32);

    $.Field({Static:false, Public:false}, "dwAllocationGranularity", $.UInt32);

    $.Field({Static:false, Public:false}, "wProcessorLevel", $.UInt16);

    $.Field({Static:false, Public:false}, "wProcessorRevision", $.UInt16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.NativeMethodsShared+SafeProcessHandle */ 

(function SafeProcessHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Build.Shared.NativeMethodsShared+SafeProcessHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CloseHandle", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "KERNEL32.DLL", 
      }
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.NativeMethodsShared+MemoryStatus */ 

(function MemoryStatus$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.NativeMethodsShared+MemoryStatus", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "Length", $.UInt32);

    $.Field({Static:false, Public:true }, "MemoryLoad", $.UInt32);

    $.Field({Static:false, Public:true }, "TotalPhysical", $.UInt64);

    $.Field({Static:false, Public:true }, "AvailablePhysical", $.UInt64);

    $.Field({Static:false, Public:true }, "TotalPageFile", $.UInt64);

    $.Field({Static:false, Public:true }, "AvailablePageFile", $.UInt64);

    $.Field({Static:false, Public:true }, "TotalVirtual", $.UInt64);

    $.Field({Static:false, Public:true }, "AvailableVirtual", $.UInt64);

    $.Field({Static:false, Public:true }, "AvailableExtendedVirtual", $.UInt64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Shared.NativeMethodsShared+PROCESS_BASIC_INFORMATION */ 

(function PROCESS_BASIC_INFORMATION$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Shared.NativeMethodsShared+PROCESS_BASIC_INFORMATION", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:true }, "ExitStatus", $.Int32);

    $.Field({Static:false, Public:true }, "PebBaseAddress", $.Int32);

    $.Field({Static:false, Public:true }, "AffinityMask", $.Int32);

    $.Field({Static:false, Public:true }, "BasePriority", $.Int32);

    $.Field({Static:false, Public:true }, "UniqueProcessId", $.Int32);

    $.Field({Static:false, Public:true }, "InheritedFromUniqueProcessId", $.Int32);

    $.Property({Static:false, Public:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Build.Shared.NativeMethodsShared+WIN32_FILE_ATTRIBUTE_DATA */ 

(function WIN32_FILE_ATTRIBUTE_DATA$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.Build.Shared.NativeMethodsShared+WIN32_FILE_ATTRIBUTE_DATA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "fileAttributes", $.Int32);

    $.Field({Static:false, Public:false}, "ftCreationTimeLow", $.UInt32);

    $.Field({Static:false, Public:false}, "ftCreationTimeHigh", $.UInt32);

    $.Field({Static:false, Public:false}, "ftLastAccessTimeLow", $.UInt32);

    $.Field({Static:false, Public:false}, "ftLastAccessTimeHigh", $.UInt32);

    $.Field({Static:false, Public:false}, "ftLastWriteTimeLow", $.UInt32);

    $.Field({Static:false, Public:false}, "ftLastWriteTimeHigh", $.UInt32);

    $.Field({Static:false, Public:false}, "fileSizeHigh", $.UInt32);

    $.Field({Static:false, Public:false}, "fileSizeLow", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.NativeMethodsShared+SecurityAttributes */ 

(function SecurityAttributes$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.NativeMethodsShared+SecurityAttributes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nLength", $.UInt32);

    $.Field({Static:false, Public:true }, "lpSecurityDescriptor", $.IntPtr);

    $.Field({Static:false, Public:true }, "bInheritHandle", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.ResourceUtilities */ 

(function ResourceUtilities$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("Microsoft.Build.Shared.ResourceUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ExtractMessageCode", 
      new JSIL.MethodSignature($.String, [
          $.Boolean, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatResourceString", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(3, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "FormatResourceString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "FormatString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetHelpKeyword", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetResourceString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyResourceStringExists", 
      JSIL.MethodSignature.Action($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Build.Shared.LanguageParser");
/* class Microsoft.Build.Shared.LanguageParser.StreamMappedString */ 

(function StreamMappedString$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.LanguageParser.StreamMappedString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.Boolean, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AbsoluteOffsetToPageOffset", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendCharacterToStream", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultPageSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PagesAllocated", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAt", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCharactersOnPage", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPage", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsPastEnd", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsZeroLengthStream", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "LastCharacterInStream", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "PageFromAbsoluteOffset", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBlockStripEOF", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNextPage", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "RestartReader", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Substring", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SwapPages", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "binaryStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "reader", $asm07.TypeRef("System.IO.StreamReader"));

    $.Field({Static:false, Public:false}, "forceANSI", $.Boolean);

    $.Field({Static:false, Public:false}, "currentPageNumber", $.Int32);

    $.Field({Static:false, Public:false}, "finalPageNumber", $.Int32);

    $.Field({Static:false, Public:false}, "charactersRead", $.Int32);

    $.Field({Static:false, Public:false}, "priorPage", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "currentPage", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "pagesAllocated", $.Int32);

    $.Field({Static:false, Public:false}, "pageSize", $.Int32);

    $.Property({Static:false, Public:true }, "PagesAllocated", $.Int32);

    $.Property({Static:true , Public:true }, "DefaultPageSize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.TokenCharReader */ 

(function TokenCharReader$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.LanguageParser.TokenCharReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentCharacter", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EndOfLines", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Position", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCurrentMatchedString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchNextIdentifierStart", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Position", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Sink", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Sink", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkCharacter", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkIdentifierPart", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkIdentifierStart", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkIgnoreCase", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkMultipleDecimalDigits", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkMultipleHexDigits", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkNewLine", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkToEndOfLine", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkUntil", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Skip", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "sources", $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.StreamMappedString"));

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Field({Static:false, Public:false}, "currentLine", $.Int32);

    $.Property({Static:false, Public:false}, "CurrentLine", $.Int32);

    $.Property({Static:false, Public:false}, "Position", $.Int32);

    $.Property({Static:false, Public:false}, "CurrentCharacter", $.Char);

    $.Property({Static:false, Public:false}, "EndOfLines", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.CSharpTokenCharReader */ 

(function CSharpTokenCharReader$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.TokenCharReader"), 
      Name: "Microsoft.Build.Shared.LanguageParser.CSharpTokenCharReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchRegularStringLiteral", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkLongIntegerSuffix", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkMultipleWhiteSpace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkOperatorOrPunctuator", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkStringEscape", 
      JSIL.MethodSignature.Return($.Boolean)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.TokenEnumerator */ 

(function TokenEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.LanguageParser.TokenEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindNextToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Reader", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.TokenCharReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "current", $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"));

    $.Property({Static:false, Public:false, Virtual:true }, "Reader", $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.TokenCharReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.CSharpTokenEnumerator */ 

(function CSharpTokenEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.TokenEnumerator"), 
      Name: "Microsoft.Build.Shared.LanguageParser.CSharpTokenEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindNextToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Reader", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.TokenCharReader"))
    );

    $.Field({Static:false, Public:false}, "reader", $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.CSharpTokenCharReader"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "keywordList", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "Reader", $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.TokenCharReader"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.CSharpTokenizer */ 

(function CSharpTokenizer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.LanguageParser.CSharpTokenizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.Field({Static:false, Public:false}, "binaryStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "forceANSI", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.Token */ 

(function Token$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.LanguageParser.Token", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EqualsIgnoreCase", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Line", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InnerText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Line", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "innerText", $.String);

    $.Field({Static:false, Public:false}, "line", $.Int32);

    $.Property({Static:false, Public:false}, "InnerText", $.String);

    $.Property({Static:false, Public:false}, "Line", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+CharLiteralToken */ 

(function CharLiteralToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+CharLiteralToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+NullLiteralToken */ 

(function NullLiteralToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+NullLiteralToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.SyntaxErrorToken */ 

(function SyntaxErrorToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.SyntaxErrorToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+UnrecognizedStringEscapeToken */ 

(function UnrecognizedStringEscapeToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.SyntaxErrorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+UnrecognizedStringEscapeToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+EndOfFileInsideStringToken */ 

(function EndOfFileInsideStringToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.SyntaxErrorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+EndOfFileInsideStringToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+NewlineInsideStringToken */ 

(function NewlineInsideStringToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.SyntaxErrorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+NewlineInsideStringToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+EndOfFileInsideCommentToken */ 

(function EndOfFileInsideCommentToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.SyntaxErrorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+EndOfFileInsideCommentToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.OperatorOrPunctuatorToken */ 

(function OperatorOrPunctuatorToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.OperatorOrPunctuatorToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+OpenScopeToken */ 

(function OpenScopeToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.OperatorOrPunctuatorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+OpenScopeToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+CloseScopeToken */ 

(function CloseScopeToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.OperatorOrPunctuatorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.CSharpTokenizer+CloseScopeToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.WhitespaceToken */ 

(function WhitespaceToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.WhitespaceToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.LiteralToken */ 

(function LiteralToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.LiteralToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.BooleanLiteralToken */ 

(function BooleanLiteralToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.BooleanLiteralToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.IntegerLiteralToken */ 

(function IntegerLiteralToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.IntegerLiteralToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.HexIntegerLiteralToken */ 

(function HexIntegerLiteralToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.IntegerLiteralToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.HexIntegerLiteralToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.DecimalIntegerLiteralToken */ 

(function DecimalIntegerLiteralToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.IntegerLiteralToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.DecimalIntegerLiteralToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.StringLiteralToken */ 

(function StringLiteralToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.StringLiteralToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.ExpectedIdentifierToken */ 

(function ExpectedIdentifierToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.SyntaxErrorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.ExpectedIdentifierToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.ExpectedValidHexDigitToken */ 

(function ExpectedValidHexDigitToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.SyntaxErrorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.ExpectedValidHexDigitToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.EndOfFileInsideStringToken */ 

(function EndOfFileInsideStringToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.SyntaxErrorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.EndOfFileInsideStringToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.UnrecognizedToken */ 

(function UnrecognizedToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.SyntaxErrorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.UnrecognizedToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.CommentToken */ 

(function CommentToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.CommentToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.IdentifierToken */ 

(function IdentifierToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.IdentifierToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.KeywordToken */ 

(function KeywordToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.KeywordToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.PreprocessorToken */ 

(function PreprocessorToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.PreprocessorToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.OpenConditionalDirectiveToken */ 

(function OpenConditionalDirectiveToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.PreprocessorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.OpenConditionalDirectiveToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.CloseConditionalDirectiveToken */ 

(function CloseConditionalDirectiveToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.PreprocessorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.CloseConditionalDirectiveToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.OperatorToken */ 

(function OperatorToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.OperatorOrPunctuatorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.OperatorToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.TokenChar */ 

(function TokenChar$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("Microsoft.Build.Shared.LanguageParser.TokenChar", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "IsCombining", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsConnecting", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDecimalDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFormatting", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsHexDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLetter", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNewLine", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOctalDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.VisualBasicTokenCharReader */ 

(function VisualBasicTokenCharReader$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.TokenCharReader"), 
      Name: "Microsoft.Build.Shared.LanguageParser.VisualBasicTokenCharReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkDecimalIntegerSuffix", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkHexIntegerPrefix", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkIntegerSuffix", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkLineCommentStart", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkLineContinuationCharacter", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkMultipleOctalDigits", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkOctalIntegerPrefix", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkOperator", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkSeparatorCharacter", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkTypeCharacter", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SinkWhiteSpace", 
      JSIL.MethodSignature.Return($.Boolean)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.VisualBasicTokenEnumerator */ 

(function VisualBasicTokenEnumerator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.TokenEnumerator"), 
      Name: "Microsoft.Build.Shared.LanguageParser.VisualBasicTokenEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindNextToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Reader", 
      JSIL.MethodSignature.Return($asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.TokenCharReader"))
    );

    $.Field({Static:false, Public:false}, "reader", $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.VisualBasicTokenCharReader"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "keywordList", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "Reader", $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.TokenCharReader"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.VisualBasicTokenizer */ 

(function VisualBasicTokenizer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.Build.Shared.LanguageParser.VisualBasicTokenizer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.Field({Static:false, Public:false}, "binaryStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "forceANSI", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.VisualBasicTokenizer+LineTerminatorToken */ 

(function LineTerminatorToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.VisualBasicTokenizer+LineTerminatorToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.VisualBasicTokenizer+SeparatorToken */ 

(function SeparatorToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.Token"), 
      Name: "Microsoft.Build.Shared.LanguageParser.VisualBasicTokenizer+SeparatorToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.VisualBasicTokenizer+LineContinuationToken */ 

(function LineContinuationToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.WhitespaceToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.VisualBasicTokenizer+LineContinuationToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.VisualBasicTokenizer+OctalIntegerLiteralToken */ 

(function OctalIntegerLiteralToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.IntegerLiteralToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.VisualBasicTokenizer+OctalIntegerLiteralToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Build.Shared.LanguageParser.VisualBasicTokenizer+ExpectedValidOctalDigitToken */ 

(function ExpectedValidOctalDigitToken$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Build.Shared.LanguageParser.SyntaxErrorToken"), 
      Name: "Microsoft.Build.Shared.LanguageParser.VisualBasicTokenizer+ExpectedValidOctalDigitToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Deployment");
JSIL.DeclareNamespace("System.Deployment.Internal");
JSIL.DeclareNamespace("System.Deployment.Internal.CodeSigning");
/* struct System.Deployment.Internal.CodeSigning.BLOBHEADER */ 

(function BLOBHEADER$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Deployment.Internal.CodeSigning.BLOBHEADER", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "bType", $.Byte);

    $.Field({Static:false, Public:false}, "bVersion", $.Byte);

    $.Field({Static:false, Public:false}, "reserved", $.Int16);

    $.Field({Static:false, Public:false}, "aiKeyAlg", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Deployment.Internal.CodeSigning.ManifestSignedXml2 */ 

(function ManifestSignedXml2$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm31.TypeRef("System.Security.Cryptography.Xml.SignedXml"), 
      Name: "System.Deployment.Internal.CodeSigning.ManifestSignedXml2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindIdElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlElement"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIdElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "init", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_verify", $.Boolean);

    $.Constant({Static:true , Public:false}, "Sha256SignatureMethodUri", $.String, "http://www.w3.org/2000/09/xmldsig#rsa-sha256");

    $.Constant({Static:true , Public:false}, "Sha256DigestMethod", $.String, "http://www.w3.org/2000/09/xmldsig#sha256");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Deployment.Internal.CodeSigning.SignedCmiManifest2 */ 

(function SignedCmiManifest2$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Deployment.Internal.CodeSigning.SignedCmiManifest2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "AuthenticodeSignLicenseDom", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSigner2"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BytesToHexString", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeHashFromManifest", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm2F.TypeRef("System.Xml.XmlDocument"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeHashFromManifest", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateLicenseDom", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlDocument"), [
          $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSigner2"), $asm2F.TypeRef("System.Xml.XmlElement"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExtractPrincipalFromManifest", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AuthenticodeSignerInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiAuthenticodeSignerInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StrongNameSignerInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiStrongNameSignerInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAuthenticodePolicies", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFixedRSACryptoServiceProvider", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.RSACryptoServiceProvider"), [$asm07.TypeRef("System.Security.Cryptography.RSACryptoServiceProvider"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLifetimeSigning", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetManifestInformation", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $asm2F.TypeRef("System.Xml.XmlNamespaceManager"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPublicKeyToken", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSigningCertificate", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.ManifestSignedXml2"), $asm2F.TypeRef("System.Xml.XmlNamespaceManager")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexStringToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexToByte", 
      new JSIL.MethodSignature($.Byte, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "InsertPublisherIdentity", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveExistingSignature", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReplacePublicKeyToken", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Sign", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSigner2"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Sign", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSigner2"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StrongNameSignManifestDom", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $asm2F.TypeRef("System.Xml.XmlDocument"), 
          $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSigner2"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimestampSignedLicenseDom", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Verify", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestVerifyFlags"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAssemblyIdentity", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyHash", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyLicense", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestVerifyFlags"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyLicenseNew", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestVerifyFlags"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyPublicKeyToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyPublisherIdentity", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifySignatureForm", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $.String, 
          $asm2F.TypeRef("System.Xml.XmlNamespaceManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifySignatureTimestamp", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $asm2F.TypeRef("System.Xml.XmlNamespaceManager"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")])
        ])
    );

    $.Field({Static:false, Public:false}, "m_manifestDom", $asm2F.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "m_strongNameSignerInfo", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiStrongNameSignerInfo"));

    $.Field({Static:false, Public:false}, "m_authenticodeSignerInfo", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiAuthenticodeSignerInfo"));

    $.Field({Static:false, Public:false}, "m_useSha256", $.Boolean);

    $.Constant({Static:true , Public:false}, "Sha256SignatureMethodUri", $.String, "http://www.w3.org/2000/09/xmldsig#rsa-sha256");

    $.Constant({Static:true , Public:false}, "Sha256DigestMethod", $.String, "http://www.w3.org/2000/09/xmldsig#sha256");

    $.Constant({Static:true , Public:false}, "wintrustPolicyFlagsRegPath", $.String, "Software\\Microsoft\\Windows\\CurrentVersion\\WinTrust\\Trust Providers\\Software Publishing");

    $.Constant({Static:true , Public:false}, "wintrustPolicyFlagsRegName", $.String, "State");

    $.Constant({Static:true , Public:false}, "AssemblyNamespaceUri", $.String, "urn:schemas-microsoft-com:asm.v1");

    $.Constant({Static:true , Public:false}, "AssemblyV2NamespaceUri", $.String, "urn:schemas-microsoft-com:asm.v2");

    $.Constant({Static:true , Public:false}, "MSRelNamespaceUri", $.String, "http://schemas.microsoft.com/windows/rel/2005/reldata");

    $.Constant({Static:true , Public:false}, "LicenseNamespaceUri", $.String, "urn:mpeg:mpeg21:2003:01-REL-R-NS");

    $.Constant({Static:true , Public:false}, "AuthenticodeNamespaceUri", $.String, "http://schemas.microsoft.com/windows/pki/2005/Authenticode");

    $.Constant({Static:true , Public:false}, "licenseTemplate", $.String, "<r:license xmlns:r=\"urn:mpeg:mpeg21:2003:01-REL-R-NS\" xmlns:as=\"http://schemas.microsoft.com/windows/pki/2005/Authenticode\"><r:grant><as:ManifestInformation><as:assemblyIdentity /></as:ManifestInformation><as:SignedBy/><as:AuthenticodePublisher><as:X509SubjectName>CN=dummy</as:X509SubjectName></as:AuthenticodePublisher></r:grant><r:issuer></r:issuer></r:license>");

    $.Field({Static:true , Public:false, ReadOnly:true }, "hexValues", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:false}, "StrongNameSignerInfo", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiStrongNameSignerInfo"));

    $.Property({Static:false, Public:false}, "AuthenticodeSignerInfo", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiAuthenticodeSignerInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Deployment.Internal.CodeSigning.CmiManifestSigner2 */ 

(function CmiManifestSigner2$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Deployment.Internal.CodeSigning.CmiManifestSigner2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Certificate", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DescriptionUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExtraStore", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Flag", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSignerFlag"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IncludeOption", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509IncludeOption"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StrongNameKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UseSha256", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DescriptionUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Flag", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSignerFlag"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IncludeOption", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509IncludeOption"))
    );

    $.Field({Static:false, Public:false}, "m_strongNameKey", $asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Field({Static:false, Public:false}, "m_certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Field({Static:false, Public:false}, "m_description", $.String);

    $.Field({Static:false, Public:false}, "m_url", $.String);

    $.Field({Static:false, Public:false}, "m_certificates", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"));

    $.Field({Static:false, Public:false}, "m_includeOption", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509IncludeOption"));

    $.Field({Static:false, Public:false}, "m_signerFlag", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSignerFlag"));

    $.Field({Static:false, Public:false}, "m_useSha256", $.Boolean);

    $.Constant({Static:true , Public:false}, "CimManifestSignerFlagMask", $.UInt32, 1);

    $.Property({Static:false, Public:false}, "UseSha256", $.Boolean);

    $.Property({Static:false, Public:false}, "StrongNameKey", $asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Property({Static:false, Public:false}, "Certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:false}, "Description", $.String);

    $.Property({Static:false, Public:false}, "DescriptionUrl", $.String);

    $.Property({Static:false, Public:false}, "ExtraStore", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"));

    $.Property({Static:false, Public:false}, "IncludeOption", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509IncludeOption"));

    $.Property({Static:false, Public:false}, "Flag", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSignerFlag"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Deployment.Internal.CodeSigning.RSAPKCS1SHA256SignatureDescription */ 

(function RSAPKCS1SHA256SignatureDescription$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.SignatureDescription"), 
      Name: "System.Deployment.Internal.CodeSigning.RSAPKCS1SHA256SignatureDescription", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDeformatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureDeformatter"), [$asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateFormatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureFormatter"), [$asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Deployment.Internal.CodeSigning.Win32 */ 

(function Win32$Members () {
  var $, $thisType;










  JSIL.MakeStaticClass("System.Deployment.Internal.CodeSigning.Win32", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "_AxlGetIssuerPublicKeyHash", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]), 
      {
        Module: "clr.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "_AxlPublicKeyBlobToPublicKeyToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.Win32+CRYPT_DATA_BLOB")]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]), 
      {
        Module: "clr.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "_AxlRSAKeyValueToPublicKeyToken", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.Win32+CRYPT_DATA_BLOB")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.Win32+CRYPT_DATA_BLOB")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "clr.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertFreeAuthenticodeSignerInfo", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.Win32+AXL_SIGNER_INFO")])]), 
      {
        Module: "clr.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertFreeAuthenticodeTimestamperInfo", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.Win32+AXL_TIMESTAMPER_INFO")])]), 
      {
        Module: "clr.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertTimestampAuthenticodeLicense", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.Win32+CRYPT_DATA_BLOB")]), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.Win32+CRYPT_DATA_BLOB")])
        ]), 
      {
        Module: "clr.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertVerifyAuthenticodeLicense", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.Win32+CRYPT_DATA_BLOB")]), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.Win32+AXL_SIGNER_INFO")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.Win32+AXL_TIMESTAMPER_INFO")])
        ]), 
      {
        Module: "clr.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetProcessHeap", 
      JSIL.MethodSignature.Return($.IntPtr), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "HeapFree", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.UInt32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.Constant({Static:true , Public:false}, "KERNEL32", $.String, "kernel32.dll");

    $.Constant({Static:true , Public:false}, "MSCORWKS", $.String, "clr.dll");

    $.Constant({Static:true , Public:false}, "S_OK", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "NTE_BAD_KEY", $.Int32, -2146893821);

    $.Constant({Static:true , Public:false}, "TRUST_E_SYSTEM_ERROR", $.Int32, -2146869247);

    $.Constant({Static:true , Public:false}, "TRUST_E_NO_SIGNER_CERT", $.Int32, -2146869246);

    $.Constant({Static:true , Public:false}, "TRUST_E_COUNTER_SIGNER", $.Int32, -2146869245);

    $.Constant({Static:true , Public:false}, "TRUST_E_CERT_SIGNATURE", $.Int32, -2146869244);

    $.Constant({Static:true , Public:false}, "TRUST_E_TIME_STAMP", $.Int32, -2146869243);

    $.Constant({Static:true , Public:false}, "TRUST_E_BAD_DIGEST", $.Int32, -2146869232);

    $.Constant({Static:true , Public:false}, "TRUST_E_BASIC_CONSTRAINTS", $.Int32, -2146869223);

    $.Constant({Static:true , Public:false}, "TRUST_E_FINANCIAL_CRITERIA", $.Int32, -2146869218);

    $.Constant({Static:true , Public:false}, "TRUST_E_PROVIDER_UNKNOWN", $.Int32, -2146762751);

    $.Constant({Static:true , Public:false}, "TRUST_E_ACTION_UNKNOWN", $.Int32, -2146762750);

    $.Constant({Static:true , Public:false}, "TRUST_E_SUBJECT_FORM_UNKNOWN", $.Int32, -2146762749);

    $.Constant({Static:true , Public:false}, "TRUST_E_SUBJECT_NOT_TRUSTED", $.Int32, -2146762748);

    $.Constant({Static:true , Public:false}, "TRUST_E_NOSIGNATURE", $.Int32, -2146762496);

    $.Constant({Static:true , Public:false}, "CERT_E_UNTRUSTEDROOT", $.Int32, -2146762487);

    $.Constant({Static:true , Public:false}, "TRUST_E_FAIL", $.Int32, -2146762485);

    $.Constant({Static:true , Public:false}, "TRUST_E_EXPLICIT_DISTRUST", $.Int32, -2146762479);

    $.Constant({Static:true , Public:false}, "CERT_E_CHAINING", $.Int32, -2146762486);

    $.Constant({Static:true , Public:false}, "AXL_REVOCATION_NO_CHECK", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "AXL_REVOCATION_CHECK_END_CERT_ONLY", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "AXL_REVOCATION_CHECK_ENTIRE_CHAIN", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "AXL_URL_CACHE_ONLY_RETRIEVAL", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "AXL_LIFETIME_SIGNING", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "AXL_TRUST_MICROSOFT_ROOT_ONLY", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "WTPF_IGNOREREVOKATION", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "szOID_KP_LIFETIME_SIGNING", $.String, "1.3.6.1.4.1.311.10.3.13");

    $.Constant({Static:true , Public:false}, "szOID_RSA_signingTime", $.String, "1.2.840.113549.1.9.5");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Deployment.Internal.CodeSigning.Win32+CRYPT_DATA_BLOB */ 

(function CRYPT_DATA_BLOB$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Deployment.Internal.CodeSigning.Win32+CRYPT_DATA_BLOB", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cbData", $.UInt32);

    $.Field({Static:false, Public:false}, "pbData", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Deployment.Internal.CodeSigning.Win32+AXL_SIGNER_INFO */ 

(function AXL_SIGNER_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Deployment.Internal.CodeSigning.Win32+AXL_SIGNER_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "dwError", $.UInt32);

    $.Field({Static:false, Public:false}, "algHash", $.UInt32);

    $.Field({Static:false, Public:false}, "pwszHash", $.IntPtr);

    $.Field({Static:false, Public:false}, "pwszDescription", $.IntPtr);

    $.Field({Static:false, Public:false}, "pwszDescriptionUrl", $.IntPtr);

    $.Field({Static:false, Public:false}, "pChainContext", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Deployment.Internal.CodeSigning.Win32+AXL_TIMESTAMPER_INFO */ 

(function AXL_TIMESTAMPER_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Deployment.Internal.CodeSigning.Win32+AXL_TIMESTAMPER_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "dwError", $.UInt32);

    $.Field({Static:false, Public:false}, "algHash", $.UInt32);

    $.Field({Static:false, Public:false}, "ftTimestamp", $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME"));

    $.Field({Static:false, Public:false}, "pChainContext", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Deployment.Internal.CodeSigning.ManifestSignedXml */ 

(function ManifestSignedXml$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm31.TypeRef("System.Security.Cryptography.Xml.SignedXml"), 
      Name: "System.Deployment.Internal.CodeSigning.ManifestSignedXml", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindIdElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlElement"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIdElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument"), $.String])
    );

    $.Field({Static:false, Public:false}, "m_verify", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Deployment.Internal.CodeSigning.SignedCmiManifest */ 

(function SignedCmiManifest$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Deployment.Internal.CodeSigning.SignedCmiManifest", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AuthenticodeSignLicenseDom", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSigner"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BytesToHexString", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeHashFromManifest", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeHashFromManifest", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm2F.TypeRef("System.Xml.XmlDocument"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateLicenseDom", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlDocument"), [
          $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSigner"), $asm2F.TypeRef("System.Xml.XmlElement"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExtractPrincipalFromManifest", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AuthenticodeSignerInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiAuthenticodeSignerInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StrongNameSignerInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiStrongNameSignerInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPublicKeyToken", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexStringToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexToByte", 
      new JSIL.MethodSignature($.Byte, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "InsertPublisherIdentity", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveExistingSignature", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReplacePublicKeyToken", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Sign", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSigner"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Sign", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSigner"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StrongNameSignManifestDom", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $asm2F.TypeRef("System.Xml.XmlDocument"), 
          $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSigner")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimestampSignedLicenseDom", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlDocument"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Verify", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestVerifyFlags"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAssemblyIdentity", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyHash", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyLicense", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestVerifyFlags"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyPublicKeyToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyPublisherIdentity", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.Field({Static:false, Public:false}, "m_manifestDom", $asm2F.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "m_strongNameSignerInfo", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiStrongNameSignerInfo"));

    $.Field({Static:false, Public:false}, "m_authenticodeSignerInfo", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiAuthenticodeSignerInfo"));

    $.Constant({Static:true , Public:false}, "AssemblyNamespaceUri", $.String, "urn:schemas-microsoft-com:asm.v1");

    $.Constant({Static:true , Public:false}, "AssemblyV2NamespaceUri", $.String, "urn:schemas-microsoft-com:asm.v2");

    $.Constant({Static:true , Public:false}, "MSRelNamespaceUri", $.String, "http://schemas.microsoft.com/windows/rel/2005/reldata");

    $.Constant({Static:true , Public:false}, "LicenseNamespaceUri", $.String, "urn:mpeg:mpeg21:2003:01-REL-R-NS");

    $.Constant({Static:true , Public:false}, "AuthenticodeNamespaceUri", $.String, "http://schemas.microsoft.com/windows/pki/2005/Authenticode");

    $.Constant({Static:true , Public:false}, "licenseTemplate", $.String, "<r:license xmlns:r=\"urn:mpeg:mpeg21:2003:01-REL-R-NS\" xmlns:as=\"http://schemas.microsoft.com/windows/pki/2005/Authenticode\"><r:grant><as:ManifestInformation><as:assemblyIdentity /></as:ManifestInformation><as:SignedBy/><as:AuthenticodePublisher><as:X509SubjectName>CN=dummy</as:X509SubjectName></as:AuthenticodePublisher></r:grant><r:issuer></r:issuer></r:license>");

    $.Field({Static:true , Public:false, ReadOnly:true }, "hexValues", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:false}, "StrongNameSignerInfo", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiStrongNameSignerInfo"));

    $.Property({Static:false, Public:false}, "AuthenticodeSignerInfo", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiAuthenticodeSignerInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Deployment.Internal.CodeSigning.CmiManifestSignerFlag */ 

JSIL.MakeEnum(
  {
    FullName: "System.Deployment.Internal.CodeSigning.CmiManifestSignerFlag", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    DontReplacePublicKeyToken: 1, 
  }
);

/* enum System.Deployment.Internal.CodeSigning.CmiManifestVerifyFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Deployment.Internal.CodeSigning.CmiManifestVerifyFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    RevocationNoCheck: 1, 
    RevocationCheckEndCertOnly: 2, 
    RevocationCheckEntireChain: 4, 
    UrlCacheOnlyRetrieval: 8, 
    LifetimeSigning: 16, 
    TrustMicrosoftRootOnly: 32, 
    StrongNameOnly: 65536, 
  }
);

/* class System.Deployment.Internal.CodeSigning.CmiManifestSigner */ 

(function CmiManifestSigner$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Deployment.Internal.CodeSigning.CmiManifestSigner", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Certificate", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DescriptionUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExtraStore", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Flag", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSignerFlag"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IncludeOption", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509IncludeOption"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StrongNameKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DescriptionUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Flag", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSignerFlag"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IncludeOption", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509IncludeOption"))
    );

    $.Field({Static:false, Public:false}, "m_strongNameKey", $asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Field({Static:false, Public:false}, "m_certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Field({Static:false, Public:false}, "m_description", $.String);

    $.Field({Static:false, Public:false}, "m_url", $.String);

    $.Field({Static:false, Public:false}, "m_certificates", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"));

    $.Field({Static:false, Public:false}, "m_includeOption", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509IncludeOption"));

    $.Field({Static:false, Public:false}, "m_signerFlag", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSignerFlag"));

    $.Constant({Static:true , Public:false}, "CimManifestSignerFlagMask", $.UInt32, 1);

    $.Property({Static:false, Public:false}, "StrongNameKey", $asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Property({Static:false, Public:false}, "Certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:false}, "Description", $.String);

    $.Property({Static:false, Public:false}, "DescriptionUrl", $.String);

    $.Property({Static:false, Public:false}, "ExtraStore", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"));

    $.Property({Static:false, Public:false}, "IncludeOption", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509IncludeOption"));

    $.Property({Static:false, Public:false}, "Flag", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiManifestSignerFlag"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Deployment.Internal.CodeSigning.CmiStrongNameSignerInfo */ 

(function CmiStrongNameSignerInfo$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Deployment.Internal.CodeSigning.CmiStrongNameSignerInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PublicKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PublicKeyToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ErrorCode", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PublicKey", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PublicKeyToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "m_error", $.Int32);

    $.Field({Static:false, Public:false}, "m_publicKeyToken", $.String);

    $.Field({Static:false, Public:false}, "m_snKey", $asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Property({Static:false, Public:false}, "ErrorCode", $.Int32);

    $.Property({Static:false, Public:false}, "PublicKeyToken", $.String);

    $.Property({Static:false, Public:false}, "PublicKey", $asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Deployment.Internal.CodeSigning.CmiAuthenticodeSignerInfo */ 

(function CmiAuthenticodeSignerInfo$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Deployment.Internal.CodeSigning.CmiAuthenticodeSignerInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Deployment.Internal.CodeSigning.Win32+AXL_SIGNER_INFO"), $asm01.TypeRef("System.Deployment.Internal.CodeSigning.Win32+AXL_TIMESTAMPER_INFO")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DescriptionUrl", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Hash", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HashAlgId", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SignerChain", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TimestamperInfo", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiAuthenticodeTimestamperInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DescriptionUrl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ErrorCode", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Hash", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HashAlgId", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SignerChain", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"))
    );

    $.Field({Static:false, Public:false}, "m_error", $.Int32);

    $.Field({Static:false, Public:false}, "m_signerChain", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Field({Static:false, Public:false}, "m_algHash", $.UInt32);

    $.Field({Static:false, Public:false}, "m_hash", $.String);

    $.Field({Static:false, Public:false}, "m_description", $.String);

    $.Field({Static:false, Public:false}, "m_descriptionUrl", $.String);

    $.Field({Static:false, Public:false}, "m_timestamperInfo", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiAuthenticodeTimestamperInfo"));

    $.Property({Static:false, Public:false}, "ErrorCode", $.Int32);

    $.Property({Static:false, Public:false}, "HashAlgId", $.UInt32);

    $.Property({Static:false, Public:false}, "Hash", $.String);

    $.Property({Static:false, Public:false}, "Description", $.String);

    $.Property({Static:false, Public:false}, "DescriptionUrl", $.String);

    $.Property({Static:false, Public:false}, "TimestamperInfo", $asm01.TypeRef("System.Deployment.Internal.CodeSigning.CmiAuthenticodeTimestamperInfo"));

    $.Property({Static:false, Public:false}, "SignerChain", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Deployment.Internal.CodeSigning.CmiAuthenticodeTimestamperInfo */ 

(function CmiAuthenticodeTimestamperInfo$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Deployment.Internal.CodeSigning.CmiAuthenticodeTimestamperInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Deployment.Internal.CodeSigning.Win32+AXL_TIMESTAMPER_INFO"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HashAlgId", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TimestamperChain", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TimestampTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.Field({Static:false, Public:false}, "m_error", $.Int32);

    $.Field({Static:false, Public:false}, "m_timestamperChain", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Field({Static:false, Public:false}, "m_timestampTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_algHash", $.UInt32);

    $.Property({Static:false, Public:false}, "ErrorCode", $.Int32);

    $.Property({Static:false, Public:false}, "HashAlgId", $.UInt32);

    $.Property({Static:false, Public:false}, "TimestampTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "TimestamperChain", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Security");
JSIL.DeclareNamespace("System.Security.Cryptography");
/* class System.Security.Cryptography.CngLightup */ 

(function CngLightup$Members () {
  var $, $thisType;




















  JSIL.MakeStaticClass("System.Security.Cryptography.CngLightup", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "BindCoreDelegate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Func`2", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), "!!0"]), [$.String, $.Boolean], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindGetCapiPrivateKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Func`2", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), "!!0"]), [$.String, $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Cryptography.CspParameters"), "!!0"])], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindGetCapiPublicKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Func`2", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), "!!0"]), [$.String], ["T", "TCryptoServiceProvider"])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindRsaCryptMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CopyCspParameters", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.CspParameters"), [$asm07.TypeRef("System.Security.Cryptography.ICspAsymmetricAlgorithm")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DetectRsaCngSupport", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDSAPrivateKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.DSA"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDSAPublicKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.DSA"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetECDsaPrivateKey", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Security.Cryptography.ECDsa"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetECDsaPublicKey", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Security.Cryptography.ECDsa"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRSAPrivateKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.RSA"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRSAPublicKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.RSA"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSystemCoreType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "OaepSha1Decrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "OaepSha1Encrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "Pkcs1Decrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "Pkcs1Encrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "Pkcs1SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Pkcs1VerifyData", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String
        ])
    );

    $.Constant({Static:true , Public:false}, "DsaOid", $.String, "1.2.840.10040.4.1");

    $.Constant({Static:true , Public:false}, "RsaOid", $.String, "1.2.840.113549.1.1.1");

    $.Constant({Static:true , Public:false}, "HashAlgorithmNameTypeName", $.String, "System.Security.Cryptography.HashAlgorithmName");

    $.Constant({Static:true , Public:false}, "RSASignaturePaddingTypeName", $.String, "System.Security.Cryptography.RSASignaturePadding");

    $.Constant({Static:true , Public:false}, "RSAEncryptionPaddingTypeName", $.String, "System.Security.Cryptography.RSAEncryptionPadding");

    $.Constant({Static:true , Public:false}, "RSACngTypeName", $.String, "System.Security.Cryptography.RSACng");

    $.Constant({Static:true , Public:false}, "DSACngTypeName", $.String, "System.Security.Cryptography.DSACng");

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_hashAlgorithmNameType", $asm07.TypeRef("System.Type"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_rsaSignaturePaddingType", $asm07.TypeRef("System.Type"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_rsaEncryptionPaddingType", $asm07.TypeRef("System.Type"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_pkcs1SignaturePadding", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_pkcs1EncryptionPadding", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_oaepSha1EncryptionPadding", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_preferRsaCng", $asm07.TypeRef("System.Lazy`1", [$.Boolean]));

    $.Field({Static:true , Public:false}, "s_getDsaPublicKey", $asm07.TypeRef("System.Func`2"));

    $.Field({Static:true , Public:false}, "s_getDsaPrivateKey", $asm07.TypeRef("System.Func`2"));

    $.Field({Static:true , Public:false}, "s_getRsaPublicKey", $asm07.TypeRef("System.Func`2"));

    $.Field({Static:true , Public:false}, "s_getRsaPrivateKey", $asm07.TypeRef("System.Func`2"));

    $.Field({Static:true , Public:false}, "s_rsaPkcs1SignMethod", $asm07.TypeRef("System.Func`4"));

    $.Field({Static:true , Public:false}, "s_rsaPkcs1VerifyMethod", $asm07.TypeRef("System.Func`5"));

    $.Field({Static:true , Public:false}, "s_rsaPkcs1EncryptMethod", $asm07.TypeRef("System.Func`3"));

    $.Field({Static:true , Public:false}, "s_rsaPkcs1DecryptMethod", $asm07.TypeRef("System.Func`3"));

    $.Field({Static:true , Public:false}, "s_rsaOaepSha1EncryptMethod", $asm07.TypeRef("System.Func`3"));

    $.Field({Static:true , Public:false}, "s_rsaOaepSha1DecryptMethod", $asm07.TypeRef("System.Func`3"));

    $.Field({Static:true , Public:false}, "s_getECDsaPublicKey", $asm07.TypeRef("System.Func`2"));

    $.Field({Static:true , Public:false}, "s_getECDsaPrivateKey", $asm07.TypeRef("System.Func`2"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngLightup+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetDSAPrivateKey$gb__29_0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.DSA"), [$asm07.TypeRef("System.Security.Cryptography.CspParameters")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetECDsaPrivateKey$gb__31_0", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Security.Cryptography.ECDsa"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetECDsaPublicKey$gb__30_0", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Security.Cryptography.ECDsa"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetRSAPrivateKey$gb__27_0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.RSA"), [$asm07.TypeRef("System.Security.Cryptography.CspParameters")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetRSAPrivateKey$gb__27_1", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.RSA"), [$asm07.TypeRef("System.Security.Cryptography.CspParameters")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__27_0", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Cryptography.CspParameters"), $asm07.TypeRef("System.Security.Cryptography.RSA")]));

    $.Field({Static:true , Public:true }, "$l$g9__27_1", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Cryptography.CspParameters"), $asm07.TypeRef("System.Security.Cryptography.RSA")]));

    $.Field({Static:true , Public:true }, "$l$g9__29_0", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Cryptography.CspParameters"), $asm07.TypeRef("System.Security.Cryptography.DSA")]));

    $.Field({Static:true , Public:true }, "$l$g9__30_0", $asm07.TypeRef("System.Func`2", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm10.TypeRef("System.Security.Cryptography.ECDsa")]));

    $.Field({Static:true , Public:true }, "$l$g9__31_0", $asm07.TypeRef("System.Func`2", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm10.TypeRef("System.Security.Cryptography.ECDsa")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass32_0 */ 

(function $l$gc__DisplayClass32_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass32_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPkcs1SignData$gb__0", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    );

    $.Field({Static:false, Public:true }, "openDelegate", $asm07.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass33_0 */ 

(function $l$gc__DisplayClass33_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass33_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPkcs1VerifyData$gb__0", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String
        ])
    );

    $.Field({Static:false, Public:true }, "openDelegate", $asm07.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass34_0 */ 

(function $l$gc__DisplayClass34_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass34_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPkcs1Encrypt$gb__0", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Field({Static:false, Public:true }, "openDelegate", $asm07.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass35_0 */ 

(function $l$gc__DisplayClass35_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass35_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPkcs1Decrypt$gb__0", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Field({Static:false, Public:true }, "openDelegate", $asm07.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass36_0 */ 

(function $l$gc__DisplayClass36_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass36_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOaepSha1Encrypt$gb__0", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Field({Static:false, Public:true }, "openDelegate", $asm07.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass37_0 */ 

(function $l$gc__DisplayClass37_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass37_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOaepSha1Decrypt$gb__0", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Field({Static:false, Public:true }, "openDelegate", $asm07.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass40_0`2 */ 

(function $l$gc__DisplayClass40_0$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass40_0`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T", "TCryptoServiceProvider"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindGetCapiPublicKey$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.Field({Static:false, Public:true }, "algorithmOid", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass41_0`1 */ 

(function $l$gc__DisplayClass41_0$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass41_0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindGetCapiPrivateKey$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.Field({Static:false, Public:true }, "algorithmOid", $.String);

    $.Field({Static:false, Public:true }, "instanceFactory", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Cryptography.CspParameters"), $.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:false, ReadOnly:true }, "5C85CEE5CDBA0494421281E8A19465B6BFB551B1", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

