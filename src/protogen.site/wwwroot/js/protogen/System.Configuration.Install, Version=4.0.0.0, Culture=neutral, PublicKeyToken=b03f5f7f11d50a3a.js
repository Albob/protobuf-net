/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm0F = JSIL.DeclareAssembly("System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "System.Configuration.Install.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "System.Configuration.Install.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "System.Configuration.Install.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "4.7.2046.0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", $.String, "30319");

    $.Constant({Static:true , Public:false}, "BuildRevisionStr", $.String, "0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 30319);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", $.String, "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB");

    $.Constant({Static:true , Public:false}, "PlatformPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "Mscorlib", $.String, "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemData", $.String, "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", $.String, "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "System", $.String, "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemCore", $.String, "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemNumerics", $.String, "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", $.String, "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemThreadingTasksDataflow", $.String, "System.Threading.Tasks.Dataflow, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWindowsForms", $.String, "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemXml", $.String, "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", $.String, "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", $.String, "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemConfiguration", $.String, "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", $.String, "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDeployment", $.String, "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDesign", $.String, "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", $.String, "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", $.String, "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawing", $.String, "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", $.String, "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemManagement", $.String, "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemMessaging", $.String, "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttp", $.String, "System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttpWebRequest", $.String, "System.Net.Http.WebRequest, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", $.String, "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntime", $.String, "System.Runtime.WindowsRuntime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntimeUIXaml", $.String, "System.Runtime.WindowsRuntimeUIXaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemSecurity", $.String, "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemServiceModelWeb", $.String, "System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemServiceProcess", $.String, "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWeb", $.String, "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", $.String, "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", $.String, "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", $.String, "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", $.String, "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWebExtensions", $.String, "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", $.String, "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebMobile", $.String, "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", $.String, "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRouting", $.String, "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebServices", $.String, "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "WindowsBase", $.String, "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", $.String, "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", $.String, "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", $.String, "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", $.String, "b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", $.String, "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", $.String, "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", $.String, "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", $.String, "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", $.String, "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftJScript", $.String, "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
/* class System.ExternDll */ 

(function ExternDll$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.ExternDll", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Activeds", $.String, "activeds.dll");

    $.Constant({Static:true , Public:true }, "Advapi32", $.String, "advapi32.dll");

    $.Constant({Static:true , Public:true }, "Comctl32", $.String, "comctl32.dll");

    $.Constant({Static:true , Public:true }, "Comdlg32", $.String, "comdlg32.dll");

    $.Constant({Static:true , Public:true }, "Gdi32", $.String, "gdi32.dll");

    $.Constant({Static:true , Public:true }, "Gdiplus", $.String, "gdiplus.dll");

    $.Constant({Static:true , Public:true }, "Hhctrl", $.String, "hhctrl.ocx");

    $.Constant({Static:true , Public:true }, "Imm32", $.String, "imm32.dll");

    $.Constant({Static:true , Public:true }, "Kernel32", $.String, "kernel32.dll");

    $.Constant({Static:true , Public:true }, "Loadperf", $.String, "Loadperf.dll");

    $.Constant({Static:true , Public:true }, "Mscoree", $.String, "mscoree.dll");

    $.Constant({Static:true , Public:true }, "Clr", $.String, "clr.dll");

    $.Constant({Static:true , Public:true }, "Msi", $.String, "msi.dll");

    $.Constant({Static:true , Public:true }, "Mqrt", $.String, "mqrt.dll");

    $.Constant({Static:true , Public:true }, "Ntdll", $.String, "ntdll.dll");

    $.Constant({Static:true , Public:true }, "Ole32", $.String, "ole32.dll");

    $.Constant({Static:true , Public:true }, "Oleacc", $.String, "oleacc.dll");

    $.Constant({Static:true , Public:true }, "Oleaut32", $.String, "oleaut32.dll");

    $.Constant({Static:true , Public:true }, "Olepro32", $.String, "olepro32.dll");

    $.Constant({Static:true , Public:true }, "PerfCounter", $.String, "perfcounter.dll");

    $.Constant({Static:true , Public:true }, "Powrprof", $.String, "Powrprof.dll");

    $.Constant({Static:true , Public:true }, "Psapi", $.String, "psapi.dll");

    $.Constant({Static:true , Public:true }, "Shell32", $.String, "shell32.dll");

    $.Constant({Static:true , Public:true }, "User32", $.String, "user32.dll");

    $.Constant({Static:true , Public:true }, "Uxtheme", $.String, "uxtheme.dll");

    $.Constant({Static:true , Public:true }, "WinMM", $.String, "winmm.dll");

    $.Constant({Static:true , Public:true }, "Winspool", $.String, "winspool.drv");

    $.Constant({Static:true , Public:true }, "Wtsapi32", $.String, "wtsapi32.dll");

    $.Constant({Static:true , Public:true }, "Version", $.String, "version.dll");

    $.Constant({Static:true , Public:true }, "Vsassert", $.String, "vsassert.dll");

    $.Constant({Static:true , Public:true }, "Fxassert", $.String, "Fxassert.dll");

    $.Constant({Static:true , Public:true }, "Shlwapi", $.String, "shlwapi.dll");

    $.Constant({Static:true , Public:true }, "Crypt32", $.String, "crypt32.dll");

    $.Constant({Static:true , Public:true }, "ShCore", $.String, "SHCore.dll");

    $.Constant({Static:true , Public:false}, "Odbc32", $.String, "odbc32.dll");

    $.Constant({Static:true , Public:false}, "SNI", $.String, "System.Data.dll");

    $.Constant({Static:true , Public:false}, "OciDll", $.String, "oci.dll");

    $.Constant({Static:true , Public:false}, "OraMtsDll", $.String, "oramts.dll");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.HResults */ 

(function HResults$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.HResults", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Configuration", $.Int32, -2146232062);

    $.Constant({Static:true , Public:false}, "Xml", $.Int32, -2146232000);

    $.Constant({Static:true , Public:false}, "XmlSchema", $.Int32, -2146231999);

    $.Constant({Static:true , Public:false}, "XmlXslt", $.Int32, -2146231998);

    $.Constant({Static:true , Public:false}, "XmlXPath", $.Int32, -2146231997);

    $.Constant({Static:true , Public:false}, "Data", $.Int32, -2146232032);

    $.Constant({Static:true , Public:false}, "DataDeletedRowInaccessible", $.Int32, -2146232031);

    $.Constant({Static:true , Public:false}, "DataDuplicateName", $.Int32, -2146232030);

    $.Constant({Static:true , Public:false}, "DataInRowChangingEvent", $.Int32, -2146232029);

    $.Constant({Static:true , Public:false}, "DataInvalidConstraint", $.Int32, -2146232028);

    $.Constant({Static:true , Public:false}, "DataMissingPrimaryKey", $.Int32, -2146232027);

    $.Constant({Static:true , Public:false}, "DataNoNullAllowed", $.Int32, -2146232026);

    $.Constant({Static:true , Public:false}, "DataReadOnly", $.Int32, -2146232025);

    $.Constant({Static:true , Public:false}, "DataRowNotInTable", $.Int32, -2146232024);

    $.Constant({Static:true , Public:false}, "DataVersionNotFound", $.Int32, -2146232023);

    $.Constant({Static:true , Public:false}, "DataConstraint", $.Int32, -2146232022);

    $.Constant({Static:true , Public:false}, "StrongTyping", $.Int32, -2146232021);

    $.Constant({Static:true , Public:false}, "SqlType", $.Int32, -2146232016);

    $.Constant({Static:true , Public:false}, "SqlNullValue", $.Int32, -2146232015);

    $.Constant({Static:true , Public:false}, "SqlTruncate", $.Int32, -2146232014);

    $.Constant({Static:true , Public:false}, "AdapterMapping", $.Int32, -2146232013);

    $.Constant({Static:true , Public:false}, "DataAdapter", $.Int32, -2146232012);

    $.Constant({Static:true , Public:false}, "DBConcurrency", $.Int32, -2146232011);

    $.Constant({Static:true , Public:false}, "OperationAborted", $.Int32, -2146232010);

    $.Constant({Static:true , Public:false}, "InvalidUdt", $.Int32, -2146232009);

    $.Constant({Static:true , Public:false}, "Metadata", $.Int32, -2146232007);

    $.Constant({Static:true , Public:false}, "InvalidQuery", $.Int32, -2146232006);

    $.Constant({Static:true , Public:false}, "CommandCompilation", $.Int32, -2146232005);

    $.Constant({Static:true , Public:false}, "CommandExecution", $.Int32, -2146232004);

    $.Constant({Static:true , Public:false}, "SqlException", $.Int32, -2146232060);

    $.Constant({Static:true , Public:false}, "OdbcException", $.Int32, -2146232009);

    $.Constant({Static:true , Public:false}, "OracleException", $.Int32, -2146232008);

    $.Constant({Static:true , Public:false}, "ConnectionPlanException", $.Int32, -2146232003);

    $.Constant({Static:true , Public:false}, "NteBadKeySet", $.Int32, -2146893802);

    $.Constant({Static:true , Public:false}, "Win32AccessDenied", $.Int32, -2147024891);

    $.Constant({Static:true , Public:false}, "Win32InvalidHandle", $.Int32, -2147024890);

    $.Constant({Static:true , Public:false}, "License", $.Int32, -2146232063);

    $.Constant({Static:true , Public:false}, "InternalBufferOverflow", $.Int32, -2146232059);

    $.Constant({Static:true , Public:false}, "ServiceControllerTimeout", $.Int32, -2146232058);

    $.Constant({Static:true , Public:false}, "Install", $.Int32, -2146232057);

    $.Constant({Static:true , Public:false}, "EFail", $.Int32, -2147467259);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics");
JSIL.DeclareNamespace("System.Configuration");
JSIL.DeclareNamespace("System.Configuration.Install");
/* class System.Configuration.Install.Installer */ 

(function Installer$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.Component"), 
      Name: "System.Configuration.Install.Installer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "add_AfterInstall", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_AfterRollback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_AfterUninstall", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_BeforeInstall", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_BeforeRollback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_BeforeUninstall", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Committed", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Committing", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Configuration.Install.InstallContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HelpText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Installers", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Configuration.Install.InstallerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parent", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Install", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InstallerTreeContains", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsWrappedException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogException", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Exception"), $asm0F.TypeRef("System.Configuration.Install.InstallContext")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAfterInstall", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAfterRollback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAfterUninstall", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeforeInstall", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeforeRollback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeforeUninstall", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnCommitted", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnCommitting", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_AfterInstall", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_AfterRollback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_AfterUninstall", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_BeforeInstall", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_BeforeRollback", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_BeforeUninstall", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Committed", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Committing", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Context", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.InstallContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Parent", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Uninstall", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEventHandlerError", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.Field({Static:false, Public:false}, "installers", $asm0F.TypeRef("System.Configuration.Install.InstallerCollection"));

    $.Field({Static:false, Public:false}, "context", $asm0F.TypeRef("System.Configuration.Install.InstallContext"));

    $.Field({Static:false, Public:false}, "parent", $.Type);

    $.Field({Static:false, Public:false}, "afterCommitHandler", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Field({Static:false, Public:false}, "afterInstallHandler", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Field({Static:false, Public:false}, "afterRollbackHandler", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Field({Static:false, Public:false}, "afterUninstallHandler", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Field({Static:false, Public:false}, "beforeCommitHandler", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Field({Static:false, Public:false}, "beforeInstallHandler", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Field({Static:false, Public:false}, "beforeRollbackHandler", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Field({Static:false, Public:false}, "beforeUninstallHandler", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Constant({Static:true , Public:false}, "wrappedExceptionSource", $.String, "WrappedExceptionSource");

    $.Property({Static:false, Public:true }, "Context", $asm0F.TypeRef("System.Configuration.Install.InstallContext"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; });

    $.Property({Static:false, Public:true , Virtual:true }, "HelpText", $.String)
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["Desc_Installer_HelpText"]; });

    $.Property({Static:false, Public:true }, "Installers", $asm0F.TypeRef("System.Configuration.Install.InstallerCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [false]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; });

    $.Property({Static:false, Public:true }, "Parent", $.Type)
      .Attribute($asm0A.TypeRef("System.ComponentModel.BrowsableAttribute"), function () { return [true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Hidden]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0F.System.Configuration.Install.InstallerParentConverter.__Type__]; })
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["Desc_Installer_Parent"]; });

    $.Event({Static:false, Public:true }, "Committed", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Event({Static:false, Public:true }, "AfterInstall", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Event({Static:false, Public:true }, "AfterRollback", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Event({Static:false, Public:true }, "AfterUninstall", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Event({Static:false, Public:true }, "Committing", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Event({Static:false, Public:true }, "BeforeInstall", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Event({Static:false, Public:true }, "BeforeRollback", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.Event({Static:false, Public:true }, "BeforeUninstall", $asm0F.TypeRef("System.Configuration.Install.InstallEventHandler"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultEventAttribute"), function () { return ["AfterInstall"]; });

})();

/* class System.Configuration.Install.ComponentInstaller */ 

(function ComponentInstaller$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Configuration.Install.Installer"), 
      Name: "System.Configuration.Install.ComponentInstaller", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyFromComponent", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.IComponent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsEquivalentInstaller", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.EventLogInstaller */ 

(function EventLogInstaller$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Configuration.Install.ComponentInstaller"), 
      Name: "System.Diagnostics.EventLogInstaller", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyFromComponent", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.IComponent"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CategoryCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CategoryResourceFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Log", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MessageResourceFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterResourceFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UninstallAction", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Configuration.Install.UninstallAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Install", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsEquivalentInstaller", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Configuration.Install.ComponentInstaller")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CategoryCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CategoryResourceFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Log", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MessageResourceFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParameterResourceFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Source", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UninstallAction", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.UninstallAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Uninstall", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.Field({Static:false, Public:false}, "sourceData", $asm0A.TypeRef("System.Diagnostics.EventSourceCreationData"));

    $.Field({Static:false, Public:false}, "uninstallAction", $asm0F.TypeRef("System.Configuration.Install.UninstallAction"));

    $.Property({Static:false, Public:true }, "CategoryResourceFile", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["Desc_CategoryResourceFile"]; });

    $.Property({Static:false, Public:true }, "CategoryCount", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["Desc_CategoryCount"]; });

    $.Property({Static:false, Public:true }, "Log", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["Desc_Log"]; });

    $.Property({Static:false, Public:true }, "MessageResourceFile", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["Desc_MessageResourceFile"]; });

    $.Property({Static:false, Public:true }, "ParameterResourceFile", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorAttribute"), function () { return ["System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["Desc_ParameterResourceFile"]; });

    $.Property({Static:false, Public:true }, "Source", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; })
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["Desc_Source"]; });

    $.Property({Static:false, Public:true }, "UninstallAction", $asm0F.TypeRef("System.Configuration.Install.UninstallAction"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0F.System.Configuration.Install.UninstallAction.Remove]; })
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["Desc_UninstallAction"]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerformanceCounterInstaller */ 

(function PerformanceCounterInstaller$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Configuration.Install.ComponentInstaller"), 
      Name: "System.Diagnostics.PerformanceCounterInstaller", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckValidCategory", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckValidId", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyFromComponent", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.ComponentModel.IComponent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DoRollback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CategoryHelp", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CategoryName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CategoryType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Diagnostics.PerformanceCounterCategoryType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Counters", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Diagnostics.CounterCreationDataCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UninstallAction", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Configuration.Install.UninstallAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Install", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CategoryHelp", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CategoryName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CategoryType", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Diagnostics.PerformanceCounterCategoryType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UninstallAction", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.UninstallAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Uninstall", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.Constant({Static:true , Public:false}, "ServicePath", $.String, "SYSTEM\\CurrentControlSet\\Services");

    $.Constant({Static:true , Public:false}, "PerfShimName", $.String, "netfxperf.dll");

    $.Constant({Static:true , Public:false}, "PerfShimFullNameSuffix", $.String, "\\netfxperf.dll");

    $.Field({Static:false, Public:false}, "categoryName", $.String);

    $.Field({Static:false, Public:false}, "counters", $asm0A.TypeRef("System.Diagnostics.CounterCreationDataCollection"));

    $.Field({Static:false, Public:false}, "categoryHelp", $.String);

    $.Field({Static:false, Public:false}, "uninstallAction", $asm0F.TypeRef("System.Configuration.Install.UninstallAction"));

    $.Field({Static:false, Public:false}, "categoryType", $asm0A.TypeRef("System.Diagnostics.PerformanceCounterCategoryType"));

    $.Property({Static:false, Public:true }, "CategoryName", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["PCCategoryName"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return ["System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"]; });

    $.Property({Static:false, Public:true }, "CategoryHelp", $.String)
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["PCI_CategoryHelp"]; });

    $.Property({Static:false, Public:true }, "CategoryType", $asm0A.TypeRef("System.Diagnostics.PerformanceCounterCategoryType"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0A.System.Diagnostics.PerformanceCounterCategoryType.Unknown]; })
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["PCI_IsMultiInstance"]; })
      .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Counters", $asm0A.TypeRef("System.Diagnostics.CounterCreationDataCollection"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DesignerSerializationVisibilityAttribute"), function () { return [$asm0A.System.ComponentModel.DesignerSerializationVisibility.Content]; })
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["PCI_Counters"]; });

    $.Property({Static:false, Public:true }, "UninstallAction", $asm0F.TypeRef("System.Configuration.Install.UninstallAction"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm0F.System.Configuration.Install.UninstallAction.Remove]; })
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["PCI_UninstallAction"]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.SerializableRegistryKey */ 

(function SerializableRegistryKey$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Diagnostics.SerializableRegistryKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Microsoft.Win32.RegistryKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyFromRegistry", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Microsoft.Win32.RegistryKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyToRegistry", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Microsoft.Win32.RegistryKey"))
    );

    $.Field({Static:false, Public:true }, "ValueNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:true }, "Values", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:true }, "ValueKinds", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("Microsoft.Win32.RegistryValueKind")]))
      .Attribute($asm07.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Field({Static:false, Public:true }, "KeyNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:true }, "Keys", $jsilcore.TypeRef("System.Array", [$.Type]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.Install.AssemblyInstaller */ 

(function AssemblyInstaller$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Configuration.Install.Installer"), 
      Name: "System.Configuration.Install.AssemblyInstaller", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Assembly"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckIfInstallable", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAssemblyContext", 
      JSIL.MethodSignature.Return($asm0F.TypeRef("System.Configuration.Install.InstallContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assembly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CommandLine", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HelpText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseNewContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInstallerTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), [$asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInstallStatePath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeFromAssembly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Install", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PrintStartText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Assembly", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CommandLine", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Path", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseNewContext", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Uninstall", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.Field({Static:false, Public:false}, "assembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:false, Public:false}, "commandLine", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "useNewContext", $.Boolean);

    $.Field({Static:true , Public:false}, "helpPrinted", $.Boolean);

    $.Field({Static:false, Public:false}, "initialized", $.Boolean);

    $.Property({Static:false, Public:true }, "Assembly", $asm07.TypeRef("System.Reflection.Assembly"))
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["Desc_AssemblyInstaller_Assembly"]; });

    $.Property({Static:false, Public:true }, "CommandLine", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["Desc_AssemblyInstaller_CommandLine"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "HelpText", $.String);

    $.Property({Static:false, Public:true }, "Path", $.String)
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["Desc_AssemblyInstaller_Path"]; });

    $.Property({Static:false, Public:true }, "UseNewContext", $.Boolean)
      .Attribute($asm0F.TypeRef("System.Configuration.Install.ResDescriptionAttribute"), function () { return ["Desc_AssemblyInstaller_UseNewContext"]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Configuration.Install.IManagedInstaller */ 

JSIL.MakeInterface(
  "System.Configuration.Install.IManagedInstaller", true, [], function ($) {
    $.Method({}, "ManagedInstall", new JSIL.MethodSignature($.Int32, [$.String, $.Int32]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["1E233FE7-C16D-4512-8C3B-2E9988F08D38"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* class System.Configuration.Install.InstallContext */ 

(function InstallContext$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Configuration.Install.InstallContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Specialized.StringDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsParameterTrue", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogMessage", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "LogMessageHelper", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseCommandLine", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Collections.Specialized.StringDictionary"), [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.Field({Static:false, Public:false}, "parameters", $asm0A.TypeRef("System.Collections.Specialized.StringDictionary"));

    $.Property({Static:false, Public:true }, "Parameters", $asm0A.TypeRef("System.Collections.Specialized.StringDictionary"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.Install.InstallerParentConverter */ 

(function InstallerParentConverter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.ReferenceConverter"), 
      Name: "System.Configuration.Install.InstallerParentConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStandardValues", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.TypeConverter+StandardValuesCollection"), [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.Install.InstallerCollection */ 

(function InstallerCollection$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Configuration.Install.InstallerCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.Installer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Configuration.Install.Installer")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Configuration.Install.Installer")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0F.TypeRef("System.Configuration.Install.Installer")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0F.TypeRef("System.Configuration.Install.Installer")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm0F.TypeRef("System.Configuration.Install.Installer"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm0F.TypeRef("System.Configuration.Install.Installer")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0F.TypeRef("System.Configuration.Install.Installer")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemove", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm0F.TypeRef("System.Configuration.Install.Installer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0F.TypeRef("System.Configuration.Install.Installer")])
    );

    $.Field({Static:false, Public:false}, "owner", $asm0F.TypeRef("System.Configuration.Install.Installer"));

    $.Property({Static:false, Public:true }, "Item", $asm0F.TypeRef("System.Configuration.Install.Installer"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Configuration.Install.InstallEventArgs */ 

(function InstallEventArgs$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Configuration.Install.InstallEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SavedState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.Field({Static:false, Public:false}, "savedState", $asm07.TypeRef("System.Collections.IDictionary"));

    $.Property({Static:false, Public:true }, "SavedState", $asm07.TypeRef("System.Collections.IDictionary"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Configuration.Install.InstallEventHandler */ 

JSIL.MakeDelegate("System.Configuration.Install.InstallEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm0F.TypeRef("System.Configuration.Install.InstallEventArgs")]));

/* class System.Configuration.Install.InstallException */ 

(function InstallException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.SystemException"), 
      Name: "System.Configuration.Install.InstallException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.Install.ManagedInstallerClass */ 

(function ManagedInstallerClass$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Configuration.Install.ManagedInstallerClass", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHelp", 
      new JSIL.MethodSignature($.String, [$asm0F.TypeRef("System.Configuration.Install.Installer")])
    );

    $.ExternalMethod({Static:true , Public:true }, "InstallHelper", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToArgs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Install.IManagedInstaller.ManagedInstall", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    )
      .Overrides($asm0F.TypeRef("System.Configuration.Install.IManagedInstaller"), "ManagedInstall");

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.Configuration.Install.IManagedInstaller")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["42EB0342-0393-448f-84AA-D4BEB0283595"]; });

})();

/* class System.Configuration.Install.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Configuration.Install.NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "MsiCreateRecord", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "msi.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "MsiProcessMessage", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "msi.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "MsiRecordSetInteger", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "msi.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "MsiRecordSetStringW", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.String
        ]), 
      {
        Module: "msi.dll", 
        CharSet: 'unicode',
      }
    );

    $.Constant({Static:true , Public:true }, "INSTALLMESSAGE_ERROR", $.Int32, 16777216);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Configuration.Install.TransactedInstaller */ 

(function TransactedInstaller$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.Configuration.Install.Installer"), 
      Name: "System.Configuration.Install.TransactedInstaller", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Install", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Uninstall", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Configuration.Install.UninstallAction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Configuration.Install.UninstallAction", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Remove: 0, 
    NoAction: 1, 
  }
);

/* class System.Configuration.Install.ResDescriptionAttribute */ 

(function ResDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Configuration.Install.ResDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.Configuration.Install.ResCategoryAttribute */ 

(function ResCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Configuration.Install.ResCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.Configuration.Install.Res */ 

(function Res$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Configuration.Install.Res", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "InstallAbort", $.String, "InstallAbort");

    $.Constant({Static:true , Public:false}, "InstallException", $.String, "InstallException");

    $.Constant({Static:true , Public:false}, "InstallLogContent", $.String, "InstallLogContent");

    $.Constant({Static:true , Public:false}, "InstallFileLocation", $.String, "InstallFileLocation");

    $.Constant({Static:true , Public:false}, "InstallLogParameters", $.String, "InstallLogParameters");

    $.Constant({Static:true , Public:false}, "InstallLogNone", $.String, "InstallLogNone");

    $.Constant({Static:true , Public:false}, "InstallNoPublicInstallers", $.String, "InstallNoPublicInstallers");

    $.Constant({Static:true , Public:false}, "InstallFileNotFound", $.String, "InstallFileNotFound");

    $.Constant({Static:true , Public:false}, "InstallNoInstallerTypes", $.String, "InstallNoInstallerTypes");

    $.Constant({Static:true , Public:false}, "InstallCannotCreateInstance", $.String, "InstallCannotCreateInstance");

    $.Constant({Static:true , Public:false}, "InstallBadParent", $.String, "InstallBadParent");

    $.Constant({Static:true , Public:false}, "InstallRecursiveParent", $.String, "InstallRecursiveParent");

    $.Constant({Static:true , Public:false}, "InstallNullParameter", $.String, "InstallNullParameter");

    $.Constant({Static:true , Public:false}, "InstallDictionaryMissingValues", $.String, "InstallDictionaryMissingValues");

    $.Constant({Static:true , Public:false}, "InstallDictionaryCorrupted", $.String, "InstallDictionaryCorrupted");

    $.Constant({Static:true , Public:false}, "InstallCommitException", $.String, "InstallCommitException");

    $.Constant({Static:true , Public:false}, "InstallRollbackException", $.String, "InstallRollbackException");

    $.Constant({Static:true , Public:false}, "InstallUninstallException", $.String, "InstallUninstallException");

    $.Constant({Static:true , Public:false}, "InstallEventException", $.String, "InstallEventException");

    $.Constant({Static:true , Public:false}, "InstallInstallerNotFound", $.String, "InstallInstallerNotFound");

    $.Constant({Static:true , Public:false}, "InstallSeverityError", $.String, "InstallSeverityError");

    $.Constant({Static:true , Public:false}, "InstallSeverityWarning", $.String, "InstallSeverityWarning");

    $.Constant({Static:true , Public:false}, "InstallLogInner", $.String, "InstallLogInner");

    $.Constant({Static:true , Public:false}, "InstallLogError", $.String, "InstallLogError");

    $.Constant({Static:true , Public:false}, "InstallLogCommitException", $.String, "InstallLogCommitException");

    $.Constant({Static:true , Public:false}, "InstallLogRollbackException", $.String, "InstallLogRollbackException");

    $.Constant({Static:true , Public:false}, "InstallLogUninstallException", $.String, "InstallLogUninstallException");

    $.Constant({Static:true , Public:false}, "InstallRollback", $.String, "InstallRollback");

    $.Constant({Static:true , Public:false}, "InstallAssemblyHelp", $.String, "InstallAssemblyHelp");

    $.Constant({Static:true , Public:false}, "InstallActivityRollingBack", $.String, "InstallActivityRollingBack");

    $.Constant({Static:true , Public:false}, "InstallActivityUninstalling", $.String, "InstallActivityUninstalling");

    $.Constant({Static:true , Public:false}, "InstallActivityCommitting", $.String, "InstallActivityCommitting");

    $.Constant({Static:true , Public:false}, "InstallActivityInstalling", $.String, "InstallActivityInstalling");

    $.Constant({Static:true , Public:false}, "InstallInfoTransacted", $.String, "InstallInfoTransacted");

    $.Constant({Static:true , Public:false}, "InstallInfoBeginInstall", $.String, "InstallInfoBeginInstall");

    $.Constant({Static:true , Public:false}, "InstallInfoException", $.String, "InstallInfoException");

    $.Constant({Static:true , Public:false}, "InstallInfoBeginRollback", $.String, "InstallInfoBeginRollback");

    $.Constant({Static:true , Public:false}, "InstallInfoRollbackDone", $.String, "InstallInfoRollbackDone");

    $.Constant({Static:true , Public:false}, "InstallInfoBeginCommit", $.String, "InstallInfoBeginCommit");

    $.Constant({Static:true , Public:false}, "InstallInfoCommitDone", $.String, "InstallInfoCommitDone");

    $.Constant({Static:true , Public:false}, "InstallInfoTransactedDone", $.String, "InstallInfoTransactedDone");

    $.Constant({Static:true , Public:false}, "InstallInfoBeginUninstall", $.String, "InstallInfoBeginUninstall");

    $.Constant({Static:true , Public:false}, "InstallInfoUninstallDone", $.String, "InstallInfoUninstallDone");

    $.Constant({Static:true , Public:false}, "InstallSavedStateFileCorruptedWarning", $.String, "InstallSavedStateFileCorruptedWarning");

    $.Constant({Static:true , Public:false}, "IncompleteEventLog", $.String, "IncompleteEventLog");

    $.Constant({Static:true , Public:false}, "IncompletePerformanceCounter", $.String, "IncompletePerformanceCounter");

    $.Constant({Static:true , Public:false}, "PerfInvalidCategoryName", $.String, "PerfInvalidCategoryName");

    $.Constant({Static:true , Public:false}, "NotCustomPerformanceCategory", $.String, "NotCustomPerformanceCategory");

    $.Constant({Static:true , Public:false}, "RemovingInstallState", $.String, "RemovingInstallState");

    $.Constant({Static:true , Public:false}, "InstallUnableDeleteFile", $.String, "InstallUnableDeleteFile");

    $.Constant({Static:true , Public:false}, "InstallInitializeException", $.String, "InstallInitializeException");

    $.Constant({Static:true , Public:false}, "InstallFileDoesntExist", $.String, "InstallFileDoesntExist");

    $.Constant({Static:true , Public:false}, "InstallFileDoesntExistCommandLine", $.String, "InstallFileDoesntExistCommandLine");

    $.Constant({Static:true , Public:false}, "WinNTRequired", $.String, "WinNTRequired");

    $.Constant({Static:true , Public:false}, "WrappedExceptionSource", $.String, "WrappedExceptionSource");

    $.Constant({Static:true , Public:false}, "InvalidProperty", $.String, "InvalidProperty");

    $.Constant({Static:true , Public:false}, "InstallRollbackNtRun", $.String, "InstallRollbackNtRun");

    $.Constant({Static:true , Public:false}, "InstallCommitNtRun", $.String, "InstallCommitNtRun");

    $.Constant({Static:true , Public:false}, "InstallUninstallNtRun", $.String, "InstallUninstallNtRun");

    $.Constant({Static:true , Public:false}, "InstallInstallNtRun", $.String, "InstallInstallNtRun");

    $.Constant({Static:true , Public:false}, "InstallHelpMessageStart", $.String, "InstallHelpMessageStart");

    $.Constant({Static:true , Public:false}, "InstallHelpMessageEnd", $.String, "InstallHelpMessageEnd");

    $.Constant({Static:true , Public:false}, "CantAddSelf", $.String, "CantAddSelf");

    $.Constant({Static:true , Public:false}, "Desc_Installer_HelpText", $.String, "Desc_Installer_HelpText");

    $.Constant({Static:true , Public:false}, "Desc_Installer_Parent", $.String, "Desc_Installer_Parent");

    $.Constant({Static:true , Public:false}, "Desc_AssemblyInstaller_Assembly", $.String, "Desc_AssemblyInstaller_Assembly");

    $.Constant({Static:true , Public:false}, "Desc_AssemblyInstaller_CommandLine", $.String, "Desc_AssemblyInstaller_CommandLine");

    $.Constant({Static:true , Public:false}, "Desc_AssemblyInstaller_Path", $.String, "Desc_AssemblyInstaller_Path");

    $.Constant({Static:true , Public:false}, "Desc_AssemblyInstaller_UseNewContext", $.String, "Desc_AssemblyInstaller_UseNewContext");

    $.Constant({Static:true , Public:false}, "NotAnEventLog", $.String, "NotAnEventLog");

    $.Constant({Static:true , Public:false}, "CreatingEventLog", $.String, "CreatingEventLog");

    $.Constant({Static:true , Public:false}, "RestoringEventLog", $.String, "RestoringEventLog");

    $.Constant({Static:true , Public:false}, "RemovingEventLog", $.String, "RemovingEventLog");

    $.Constant({Static:true , Public:false}, "DeletingEventLog", $.String, "DeletingEventLog");

    $.Constant({Static:true , Public:false}, "LocalSourceNotRegisteredWarning", $.String, "LocalSourceNotRegisteredWarning");

    $.Constant({Static:true , Public:false}, "Desc_CategoryResourceFile", $.String, "Desc_CategoryResourceFile");

    $.Constant({Static:true , Public:false}, "Desc_CategoryCount", $.String, "Desc_CategoryCount");

    $.Constant({Static:true , Public:false}, "Desc_Log", $.String, "Desc_Log");

    $.Constant({Static:true , Public:false}, "Desc_MessageResourceFile", $.String, "Desc_MessageResourceFile");

    $.Constant({Static:true , Public:false}, "Desc_ParameterResourceFile", $.String, "Desc_ParameterResourceFile");

    $.Constant({Static:true , Public:false}, "Desc_Source", $.String, "Desc_Source");

    $.Constant({Static:true , Public:false}, "Desc_UninstallAction", $.String, "Desc_UninstallAction");

    $.Constant({Static:true , Public:false}, "NotAPerformanceCounter", $.String, "NotAPerformanceCounter");

    $.Constant({Static:true , Public:false}, "NewCategory", $.String, "NewCategory");

    $.Constant({Static:true , Public:false}, "RestoringPerformanceCounter", $.String, "RestoringPerformanceCounter");

    $.Constant({Static:true , Public:false}, "CreatingPerformanceCounter", $.String, "CreatingPerformanceCounter");

    $.Constant({Static:true , Public:false}, "RemovingPerformanceCounter", $.String, "RemovingPerformanceCounter");

    $.Constant({Static:true , Public:false}, "PCCategoryName", $.String, "PCCategoryName");

    $.Constant({Static:true , Public:false}, "PCCounterName", $.String, "PCCounterName");

    $.Constant({Static:true , Public:false}, "PCInstanceName", $.String, "PCInstanceName");

    $.Constant({Static:true , Public:false}, "PCMachineName", $.String, "PCMachineName");

    $.Constant({Static:true , Public:false}, "PCI_CategoryHelp", $.String, "PCI_CategoryHelp");

    $.Constant({Static:true , Public:false}, "PCI_Counters", $.String, "PCI_Counters");

    $.Constant({Static:true , Public:false}, "PCI_IsMultiInstance", $.String, "PCI_IsMultiInstance");

    $.Constant({Static:true , Public:false}, "PCI_UninstallAction", $.String, "PCI_UninstallAction");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.ComponentModel");
/* class System.ComponentModel.CompModSwitches */ 

(function CompModSwitches$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.ComponentModel.CompModSwitches", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_InstallerDesign", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Diagnostics.TraceSwitch"))
    );

    $.Field({Static:true , Public:false}, "installerDesign", $asm0A.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Property({Static:true , Public:true }, "InstallerDesign", $asm0A.TypeRef("System.Diagnostics.TraceSwitch"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

