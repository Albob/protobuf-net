/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm23 = JSIL.DeclareAssembly("System.ServiceModel.Activation, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.ServiceModel");
/* class System.ServiceModel.ServiceHostingEnvironment */ 

(function ServiceHostingEnvironment$Members () {
  var $, $thisType;





































  JSIL.MakeStaticClass("System.ServiceModel.ServiceHostingEnvironment", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DecrementRequestCount", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"))
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureAllReferencedAssemblyLoaded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "EnsureInitialized", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "EnsureServiceAvailable", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureServiceAvailableFast", 
      new JSIL.MethodSignature(null, [$.String, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity")])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureWorkflowService", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ApplicationVirtualPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AspNetCompatibilityEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentVirtualPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FullVirtualPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsConfigurationBased", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsHosted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsRecycling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsSimpleApplicationHost", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MultipleSiteBindingsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PrefixFilters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ServiceActivationElementPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SiteName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ThisLock", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XamlFileBaseLocation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBaseAddressPrefixFilters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIsSimpleApplicationHost", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetServiceType", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.ServiceHostingEnvironment+ServiceType"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "HookADUnhandledExceptionEvent", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IncrementRequestCount", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity")]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAspNetCompatibilityEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsConfigurationBasedService", 
      new JSIL.MethodSignature($.Boolean, [$asm28.TypeRef("System.Web.HttpApplication")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsConfigurationBasedService", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsConfigurationBasedService", 
      new JSIL.MethodSignature($.Boolean, [$asm28.TypeRef("System.Web.HttpApplication"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMultipleSiteBindingsEnabledEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "LogServiceActivationException", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.ServiceActivationException"), $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "NormalizeVirtualPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnEnsureInitialized", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "OnUnhandledException", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.UnhandledExceptionEventArgs")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SafeEnsureInitialized", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeTryGetHtmlErrorMessage", 
      new JSIL.MethodSignature($.String, [$asm28.TypeRef("System.Web.HttpException")])
    );

    $.Field({Static:true , Public:false}, "syncRoot", $.Object);

    $.Field({Static:true , Public:false}, "hostingManager", $asm23.TypeRef("System.ServiceModel.ServiceHostingEnvironment+HostingManager"));

    $.Field({Static:true , Public:false}, "isHosted", $.Boolean);

    $.Field({Static:true , Public:false}, "isSimpleApplicationHost", $.Boolean);

    $.Field({Static:true , Public:false}, "requestCount", $.Int64);

    $.Field({Static:true , Public:false}, "canGetHtmlErrorMessage", $.Boolean, true);

    $.Field({Static:true , Public:false}, "siteName", $.String);

    $.Field({Static:true , Public:false}, "applicationVirtualPath", $.String);

    $.Field({Static:true , Public:false}, "serviceActivationElementPath", $.String);

    $.Field({Static:true , Public:false}, "insufficientMemoryLogCount", $.Int32);

    $.Field({Static:true , Public:false}, "insufficientMemoryLogStartInterval", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "InsufficientMemoryLogIntervalDuration", $asm07.TypeRef("System.TimeSpan"));

    $.Constant({Static:true , Public:false}, "VerbPost", $.String, "POST");

    $.Constant({Static:true , Public:false}, "ISAPIApplicationIdPrefix", $.String, "/LM/W3SVC/");

    $.Constant({Static:true , Public:false}, "RelativeVirtualPathPrefix", $.String, "~");

    $.Constant({Static:true , Public:false}, "ServiceParserDelimiter", $.String, "|");

    $.Constant({Static:true , Public:false}, "RootVirtualPath", $.String, "~/");

    $.Constant({Static:true , Public:false}, "PathSeparatorString", $.String, "/");

    $.Constant({Static:true , Public:false}, "FileExtensionSeparator", $.Char, ".");

    $.Constant({Static:true , Public:false}, "UriSchemeSeparator", $.Char, ":");

    $.Constant({Static:true , Public:false}, "PathSeparator", $.Char, "/");

    $.Constant({Static:true , Public:false}, "SystemWebComma", $.String, "System.Web,");

    $.Constant({Static:true , Public:false}, "MaxInsufficientMemoryLogCount", $.Int32, 10);


    function ServiceHostingEnvironment__cctor () {
      $thisType.insufficientMemoryLogStartInterval = new $asm07.System.DateTime();
      $thisType.InsufficientMemoryLogIntervalDuration = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ServiceHostingEnvironment__cctor
    );

    $.Property({Static:true , Public:true }, "AspNetCompatibilityEnabled", $.Boolean);

    $.Property({Static:true , Public:true }, "MultipleSiteBindingsEnabled", $.Boolean);

    $.Property({Static:true , Public:false}, "PrefixFilters", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]));

    $.Property({Static:true , Public:false}, "CurrentVirtualPath", $.String);

    $.Property({Static:true , Public:false}, "ServiceActivationElementPath", $.String);

    $.Property({Static:true , Public:false}, "SiteName", $.String);

    $.Property({Static:true , Public:false}, "ApplicationVirtualPath", $.String);

    $.Property({Static:true , Public:false}, "FullVirtualPath", $.String);

    $.Property({Static:true , Public:false}, "XamlFileBaseLocation", $.String);

    $.Property({Static:true , Public:false}, "IsConfigurationBased", $.Boolean);

    $.Property({Static:true , Public:false}, "IsRecycling", $.Boolean);

    $.Property({Static:true , Public:false}, "ThisLock", $.Object);

    $.Property({Static:true , Public:false}, "IsHosted", $.Boolean);

    $.Property({Static:true , Public:false}, "IsSimpleApplicationHost", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* enum System.ServiceModel.ServiceHostingEnvironment+ServiceType */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceModel.ServiceHostingEnvironment+ServiceType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    WCF: 1, 
    Workflow: 2, 
  }
);

/* class System.ServiceModel.ServiceHostingEnvironment+HostingManager */ 

(function HostingManager$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.ServiceHostingEnvironment+HostingManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ActivateService", 
      new JSIL.MethodSignature(null, [$asm23.TypeRef("System.ServiceModel.ServiceHostingEnvironment+HostingManager+ServiceActivationInfo"), $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMemoryCloseIdleServices", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMemoryGates", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt64])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateService", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.ServiceHostBase"), [$.String, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateWorkflowServiceHostFactory", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Activation.ServiceHostFactoryBase"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureServiceAvailable", 
      new JSIL.MethodSignature(null, [$.String, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FailActivationIfRecyling", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "FilterBaseAddressList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]), [$jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ActivationLock", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AspNetCompatibilityEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseAddressPrefixFilters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentVirtualPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FullVirtualPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsConfigurationBased", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRecycling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MultipleSiteBindingsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XamlFileBaseLocation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCompiledCustomString", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetCompiledType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetServiceType", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.ServiceHostingEnvironment+ServiceType"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsConfigurationBasedServiceVirtualPath", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadConfigParameters", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "LogServiceCloseError", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "NormalizedRelativeAddress", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "NotifyAllRequestDone", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnServiceBusyCountIncremented", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.ServiceHostingEnvironment+HostingManager+ServiceActivationInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnServiceClosed", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.ServiceHostingEnvironment+HostingManager+ServiceActivationInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnServiceFaulted", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.ServiceHostBase"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterObject", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Stop", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "TryDebugPrint", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "TryGetCompiledCustomStringFromCBA", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnregisterObject", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WaitAndCloseCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "directory", $asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2", [$.String, $asm22.TypeRef("System.ServiceModel.ServiceHostBase")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "extensions", $asm23.TypeRef("System.ServiceModel.ServiceHostingEnvironment+HostingManager+ExtensionHelper"));

    $.Field({Static:false, Public:false}, "aspNetCompatibilityEnabled", $.Boolean);

    $.Field({Static:false, Public:false}, "multipleSiteBindingsEnabled", $.Boolean);

    $.Field({Static:false, Public:false}, "isUnregistered", $.Boolean);

    $.Field({Static:false, Public:false}, "isRecycling", $.Boolean);

    $.Field({Static:false, Public:false}, "isStopStarted", $.Boolean);

    $.Field({Static:true , Public:false}, "canDebugPrint", $.Boolean, true);

    $.Field({Static:false, Public:false}, "activationLock", $.Object);

    $.Field({Static:false, Public:false}, "baseAddressPrefixFilters", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]));

    $.Field({Static:false, Public:false}, "serviceActivations", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "isRegistered", $.Boolean);

    $.Field({Static:false, Public:false}, "allRequestDoneInStop", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "minFreeMemoryPercentageToActivateService", $.Int32)
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "closeIdleServicesAtLowMemory", $.Boolean);

    $.Field({Static:true , Public:false}, "currentVirtualPath", $.String)
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.Field({Static:true , Public:false}, "fullVirtualPath", $.String)
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.Field({Static:true , Public:false}, "xamlFileBaseLocation", $.String)
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.Field({Static:true , Public:false}, "isConfigurationBased", $.Boolean)
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.Field({Static:true , Public:false}, "isAspNetRoutedRequest", $.Boolean)
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.Property({Static:false, Public:false}, "AspNetCompatibilityEnabled", $.Boolean);

    $.Property({Static:false, Public:false}, "MultipleSiteBindingsEnabled", $.Boolean);

    $.Property({Static:false, Public:false}, "BaseAddressPrefixFilters", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]));

    $.Property({Static:true , Public:false}, "CurrentVirtualPath", $.String);

    $.Property({Static:true , Public:false}, "FullVirtualPath", $.String);

    $.Property({Static:true , Public:false}, "XamlFileBaseLocation", $.String);

    $.Property({Static:true , Public:false}, "IsConfigurationBased", $.Boolean);

    $.Property({Static:false, Public:false}, "ActivationLock", $.Object);

    $.Property({Static:false, Public:false}, "IsRecycling", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.Hosting.IRegisteredObject")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.ServiceHostingEnvironment+HostingManager+ExtensionHelper */ 

(function ExtensionHelper$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.ServiceHostingEnvironment+HostingManager+ExtensionHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetServiceType", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.ServiceHostingEnvironment+ServiceType"), [$.String])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "buildProviders", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm23.TypeRef("System.ServiceModel.ServiceHostingEnvironment+BuildProviderInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.ServiceModel.Activation");
/* class System.ServiceModel.Activation.CollectibleLRUCache`2 */ 

(function CollectibleLRUCache$b2$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.CollectibleLRUCache`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AbortExistingBatch", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateWriterLockScope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IDisposable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "EndBatchCollect", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetCountersAndToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "Touch", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnsafeAdd", 
      new JSIL.MethodSignature(null, [$asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnsafeBeginBatchCollect", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "UnsafeBeginBatchCollect", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnsafeGet", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnsafeRemove", 
      new JSIL.MethodSignature(null, [$asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "collectPercentageInOneBatch", $.Double);

    $.Field({Static:false, Public:false, ReadOnly:true }, "minSkipCountForWrites", $.Int32);

    $.Field({Static:false, Public:false}, "counter", $.Int32);

    $.Field({Static:false, Public:false}, "rwLock", $asm10.TypeRef("System.Threading.ReaderWriterLockSlim"));

    $.Field({Static:false, Public:false}, "writeCounter", $.Int32);

    $.Field({Static:false, Public:false}, "directory", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]));

    $.Field({Static:false, Public:false}, "currentCollectibleBatch", $asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleBatch", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:true }, "Item", $asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]));

    $.Property({Static:false, Public:true }, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.ServiceModel.Activation.CollectibleLRUCache`2+WriterLockScope */ 

(function WriterLockScope$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.CollectibleLRUCache`2+WriterLockScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm10.TypeRef("System.Threading.ReaderWriterLockSlim"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "rwLock", $asm10.TypeRef("System.Threading.ReaderWriterLockSlim"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleBatch */ 

(function CollectibleBatch$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Generic.List`1", [$asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode", [new JSIL.GenericParameter("TKey", "System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleBatch"), new JSIL.GenericParameter("TValue", "System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleBatch")])]), 
      Name: "System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleBatch", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginCollect", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DecrementCollectCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleCollectibleNodeClosed", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnCollectibleNodeClosed", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WaitForRecyclingCompletion", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "recyclingCompletedWaitHandle", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "collectibleNodeClosedCallback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "totalCollectCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode */ 

(function CollectibleNode$Members () {
  var $, $thisType;







  function CollectibleNode_get_Value () {
    return this.CollectibleNode$Value$value;
  }; 


  function CollectibleNode_set_Value (value) {
    this.CollectibleNode$Value$value = JSIL.CloneParameter($thisType.TValue.get(this), value);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginClose", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanClose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "CounterLessThan", 
      new JSIL.MethodSignature($.Int32, [$asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode", [$.GenericParameter("TKey"), $.GenericParameter("TValue")]), $asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndClose", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.Method({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), null), 
      CollectibleNode_get_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetKey", 
      new JSIL.MethodSignature($.GenericParameter("TKey"), null)
    );

    $.Method({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TValue")]), 
      CollectibleNode_set_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:true }, "CounterComparison", $asm07.TypeRef("System.Comparison`1", [$asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]));

    $.Field({Static:false, Public:true }, "LastCounter", $.Int32);

    $.Field({Static:false, Public:false}, "CollectibleNode$Value$value", $.GenericParameter("TValue"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Value", $.GenericParameter("TValue"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.ServiceHostingEnvironment+HostingManager+ServiceActivationInfo */ 

(function ServiceActivationInfo$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.ServiceModel.Activation.CollectibleLRUCache`2+CollectibleNode", [$asm07.TypeRef("System.String"), $asm22.TypeRef("System.ServiceModel.ServiceHostBase")]), 
      Name: "System.ServiceModel.ServiceHostingEnvironment+HostingManager+ServiceActivationInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm23.TypeRef("System.ServiceModel.ServiceHostingEnvironment+HostingManager"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginClose", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanClose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndClose", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Initialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastException", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "OnServiceBusyCountIncremented", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnServiceClosed", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnServiceFaulted", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetInitialized", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "SetLastException", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetService", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.ServiceHostBase"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnregisterEvents", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.ServiceHostBase"))
    );

    $.Field({Static:false, Public:false}, "manager", $asm23.TypeRef("System.ServiceModel.ServiceHostingEnvironment+HostingManager"));

    $.Field({Static:false, Public:false}, "virtualPath", $.String);

    $.Field({Static:false, Public:false}, "serviceClosedHandler", $asm07.TypeRef("System.EventHandler"));

    $.Field({Static:false, Public:false}, "serviceFaultedHandler", $asm07.TypeRef("System.EventHandler"));

    $.Field({Static:false, Public:false}, "initialized", $.Boolean);

    $.Field({Static:false, Public:false}, "lastException", $asm07.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true }, "Initialized", $.Boolean);

    $.Property({Static:false, Public:true }, "LastException", $asm07.TypeRef("System.Exception"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.ServiceHostingEnvironment+BuildProviderInfo */ 

(function BuildProviderInfo$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.ServiceHostingEnvironment+BuildProviderInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.Configuration.BuildProvider"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ClearBuildProvider", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EnsureInitialized", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BuildProviderType", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsXamlBuildProvider", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "buildProvider", $asm28.TypeRef("System.Web.Configuration.BuildProvider"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "initialized", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "isSupported", $.Boolean);

    $.Field({Static:false, Public:false}, "isXamlBuildProvider", $.Boolean);

    $.Field({Static:false, Public:false}, "thisLock", $.Object);

    $.Property({Static:false, Public:false}, "BuildProviderType", $.String);

    $.Property({Static:false, Public:true }, "IsSupported", $.Boolean);

    $.Property({Static:false, Public:true }, "IsXamlBuildProvider", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.ServiceHostingEnvironment+PathCache */ 

(function PathCache$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.ServiceModel.ServiceHostingEnvironment+PathCache", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "EnsurePathInfo", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.ServiceHostingEnvironment+PathInfo"), [$.String])
    );

    $.Field({Static:true , Public:false}, "pathCache", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "writeLock", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.ServiceHostingEnvironment+PathInfo */ 

(function PathInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.ServiceHostingEnvironment+PathInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateServiceModelActivationHandler", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceModelActivationHandler", 
      JSIL.MethodSignature.Return($asm23.TypeRef("System.ServiceModel.Activation.IServiceModelActivationHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsConfiguredWithSMActivationHandler", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWorkflowService", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "path", $.String);

    $.Field({Static:false, Public:false}, "type", $asm23.TypeRef("System.ServiceModel.ServiceHostingEnvironment+PathInfo+PathType"));

    $.Field({Static:false, Public:false}, "writeLock", $.Object);

    $.Field({Static:false, Public:false}, "hostedXamlType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "serviceModelActivationHandlerType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "serviceModelActivationHandler", $asm23.TypeRef("System.ServiceModel.Activation.IServiceModelActivationHandler"));

    $.Property({Static:false, Public:true }, "ServiceModelActivationHandler", $asm23.TypeRef("System.ServiceModel.Activation.IServiceModelActivationHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.ServiceModel.ServiceHostingEnvironment+PathInfo+PathType */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceModel.ServiceHostingEnvironment+PathInfo+PathType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    WorkflowService: 1, 
    NotWorkflowService: 2, 
  }
);

/* class System.ServiceModel.ServiceHostingEnvironment+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.ServiceHostingEnvironment+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lEnsureInitialized$gb__65_0", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__65_0", $asm07.TypeRef("System.Func`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.ServiceModel.AspNetPartialTrustHelpers */ 

(function AspNetPartialTrustHelpers$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.ServiceModel.AspNetPartialTrustHelpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FailIfInPartialTrustOutsideAspNet", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_NeedPartialTrustInvoke", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetHttpRuntimeNamedPermissionSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.NamedPermissionSet"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsFullTrust", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.PermissionSet")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PartialTrustInvoke", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Threading.ContextCallback"), $.Object])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "aspNetSecurityContext", $asm07.TypeRef("System.Security.SecurityContext"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "isInitialized", $.Boolean)
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "isInPartialTrustOutsideAspNet", $.Boolean)
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "isInPartialTrustOutsideAspNetInitialized", $.Boolean)
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:true , Public:false}, "NeedPartialTrustInvoke", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.HostingEnvironmentWrapper */ 

(function HostingEnvironmentWrapper$Members () {
  var $, $thisType;
















  JSIL.MakeStaticClass("System.ServiceModel.HostingEnvironmentWrapper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "DecrementBusyCount", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ApplicationVirtualPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IsHosted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UnsafeApplicationID", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_VirtualPathProvider", 
      JSIL.MethodSignature.Return($asm28.TypeRef("System.Web.Hosting.VirtualPathProvider"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetServiceFile", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.Hosting.VirtualFile"), [$.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Impersonate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IDisposable"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Impersonate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IDisposable"), [$.IntPtr])
    );

    $.ExternalMethod({Static:true , Public:true }, "IncrementBusyCount", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "MapPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ServiceFileExists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "UnsafeImpersonate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IDisposable"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "UnsafeImpersonate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IDisposable"), [$.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "UnsafeRegisterObject", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.Hosting.IRegisteredObject"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "UnsafeUnregisterObject", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.Hosting.IRegisteredObject"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:true , Public:true }, "ApplicationVirtualPath", $.String);

    $.Property({Static:true , Public:true }, "IsHosted", $.Boolean);

    $.Property({Static:true , Public:true }, "VirtualPathProvider", $asm28.TypeRef("System.Web.Hosting.VirtualPathProvider"));

    $.Property({Static:true , Public:true }, "UnsafeApplicationID", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.ServiceModel.Activities");
JSIL.DeclareNamespace("System.ServiceModel.Activities.Activation");
/* class System.ServiceModel.Activities.Activation.WorkflowServiceHostFactory */ 

(function WorkflowServiceHostFactory$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Activation.ServiceHostFactoryBase"), 
      Name: "System.ServiceModel.Activities.Activation.WorkflowServiceHostFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSupportedVersions", 
      new JSIL.MethodSignature(null, [$asm24.TypeRef("System.ServiceModel.Activities.WorkflowServiceHost"), $asm24.TypeRef("System.ServiceModel.Activities.WorkflowService")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateServiceHost", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.ServiceHostBase"), [$.String, $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatetWorkflowService", 
      new JSIL.MethodSignature($asm24.TypeRef("System.ServiceModel.Activities.WorkflowService"), [$asm07.TypeRef("System.IO.Stream"), $asm30.TypeRef("System.Xml.Linq.XName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatetWorkflowServiceAndSetCompiledExpressionRoot", 
      new JSIL.MethodSignature($asm24.TypeRef("System.ServiceModel.Activities.WorkflowService"), [
          $.String, $asm07.TypeRef("System.IO.Stream"), 
          $asm30.TypeRef("System.Xml.Linq.XName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateWorkflowServiceHost", 
      new JSIL.MethodSignature($asm24.TypeRef("System.ServiceModel.Activities.WorkflowServiceHost"), [$asm0B.TypeRef("System.Activities.Activity"), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateWorkflowServiceHost", 
      new JSIL.MethodSignature($asm24.TypeRef("System.ServiceModel.Activities.WorkflowServiceHost"), [$asm24.TypeRef("System.ServiceModel.Activities.WorkflowService"), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetServiceFileStreamOrCompiledCustomString", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IO.Stream")]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetSupportedVersionGeneratedTypeName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSupportedVersionStreams", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Tuple`2", [$.String, $asm07.TypeRef("System.IO.Stream")])])])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetTypeFromAssembliesInCurrentDomain", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeFromCompileCustomString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadXaml", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryWrapSupportedVersionException", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Exception")])
        ])
    );

    $.Constant({Static:true , Public:false}, "SupportedVersionsGeneratedTypeNamePrefix", $.String, "SupportedVersionsGeneratedType_");

    $.Constant({Static:true , Public:false}, "SupportedVersionsFolder", $.String, "App_Code");

    $.Field({Static:false, Public:false}, "xamlVirtualFile", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HttpHandler */ 

(function HttpHandler$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HttpHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReusable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessRequest", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.HttpContext"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReusable", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.IHttpHandler"), 
      /* 1 */ $asm28.TypeRef("System.Web.SessionState.IRequiresSessionState")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activities.Activation.ServiceModelActivitiesActivationHandler */ 

(function ServiceModelActivitiesActivationHandler$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.ServiceModel.Activation.HttpHandler"), 
      Name: "System.ServiceModel.Activities.Activation.ServiceModelActivitiesActivationHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFactory", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Activation.ServiceHostFactoryBase"))
    );

    $.ImplementInterfaces(
      /* 2 */ $asm23.TypeRef("System.ServiceModel.Activation.IServiceModelActivationHandler")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.ServiceHttpHandlerFactory */ 

(function ServiceHttpHandlerFactory$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.ServiceHttpHandlerFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHandler", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.IHttpHandler"), [
          $asm28.TypeRef("System.Web.HttpContext"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReleaseHandler", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.IHttpHandler"))
    );

    $.Field({Static:false, Public:false}, "handler", $asm28.TypeRef("System.Web.IHttpHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.IHttpHandlerFactory")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.ServiceHttpHandlerFactory+ServiceHttpHandler */ 

(function ServiceHttpHandler$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.ServiceHttpHandlerFactory+ServiceHttpHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginProcessRequest", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm28.TypeRef("System.Web.HttpContext"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndProcessRequest", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReusable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessRequest", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.HttpContext"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReusable", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.IHttpAsyncHandler"), 
      /* 1 */ $asm28.TypeRef("System.Web.IHttpHandler"), 
      /* 2 */ $asm28.TypeRef("System.Web.SessionState.IRequiresSessionState")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activities.Activation.ServiceModelActivitiesActivationHandlerAsync */ 

(function ServiceModelActivitiesActivationHandlerAsync$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.ServiceModel.Activation.ServiceHttpHandlerFactory"), 
      Name: "System.ServiceModel.Activities.Activation.ServiceModelActivitiesActivationHandlerAsync", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetFactory", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Activation.ServiceHostFactoryBase"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetXamlBuildProviderExtension", 
      JSIL.MethodSignature.Return($asm2E.TypeRef("System.Xaml.Hosting.IXamlBuildProviderExtension"))
    );

    $.ImplementInterfaces(
      /* 1 */ $asm23.TypeRef("System.ServiceModel.Activation.IServiceModelActivationHandler"), 
      /* 2 */ $asm2E.TypeRef("System.Xaml.Hosting.IXamlBuildProviderExtensionFactory")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activities.Activation.XamlBuildProviderExtension */ 

(function XamlBuildProviderExtension$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activities.Activation.XamlBuildProviderExtension", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateCode", 
      new JSIL.MethodSignature(null, [
          $asm28.TypeRef("System.Web.Compilation.AssemblyBuilder"), $asm07.TypeRef("System.IO.Stream"), 
          $asm28.TypeRef("System.Web.Compilation.BuildProvider")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateExpressionRootFactory", 
      new JSIL.MethodSignature(null, [
          $asm28.TypeRef("System.Web.Compilation.AssemblyBuilder"), $asm28.TypeRef("System.Web.Compilation.BuildProvider"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateSource", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $asm28.TypeRef("System.Web.Compilation.AssemblyBuilder"), $asm24.TypeRef("System.ServiceModel.Activities.WorkflowService"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExpressionRoot", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Activities.XamlIntegration.ICompiledExpressionRoot"), [
          $.String, $asm24.TypeRef("System.ServiceModel.Activities.WorkflowService"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGeneratedType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm0A.TypeRef("System.CodeDom.Compiler.CompilerResults")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXamlVirtualPath", 
      new JSIL.MethodSignature($.String, [$asm28.TypeRef("System.Web.Compilation.BuildProvider")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGenerateSource", 
      new JSIL.MethodSignature($.Boolean, [
          $asm28.TypeRef("System.Web.Compilation.AssemblyBuilder"), $asm28.TypeRef("System.Web.Compilation.BuildProvider"), 
          $asm24.TypeRef("System.ServiceModel.Activities.WorkflowService"), $.Boolean, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCodeFile", 
      new JSIL.MethodSignature(null, [
          $asm28.TypeRef("System.Web.Compilation.AssemblyBuilder"), $asm28.TypeRef("System.Web.Compilation.BuildProvider"), 
          $.String
        ])
    );

    $.Constant({Static:true , Public:false}, "GeneratedNamespace", $.String, "GeneratedNamespace");

    $.Constant({Static:true , Public:false}, "ExpressionRootFactorySuffix", $.String, "_ExpressionRootFactory");

    $.Constant({Static:true , Public:false}, "CreateExpressionRootMethodName", $.String, "CreateExpressionRoot");

    $.Constant({Static:true , Public:false}, "ActivityParameterName", $.String, "activity");

    $.Field({Static:false, Public:false}, "generatedPrimaryTypeName", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm2E.TypeRef("System.Xaml.Hosting.IXamlBuildProviderExtension")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.ServiceModel.Channels");
/* class System.ServiceModel.Channels.MsmqHostedTransportManager */ 

(function MsmqHostedTransportManager$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.TransportManager"), 
      Name: "System.ServiceModel.Channels.MsmqHostedTransportManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $asm22.TypeRef("System.ServiceModel.Channels.MsmqUri+IAddressTranslator")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Scheme", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBaseAddresses", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClose", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnMessageReceived", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Register", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.TransportChannelListener"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Start", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Action"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Unregister", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.TransportChannelListener"))
    );

    $.Field({Static:false, Public:false}, "hosts", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "bindingMonitors", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm22.TypeRef("System.ServiceModel.Channels.MsmqBindingMonitor")]));

    $.Field({Static:false, Public:false}, "filter", $asm23.TypeRef("System.ServiceModel.Channels.MsmqHostedTransportManager+HostedBindingFilter"));

    $.Field({Static:false, Public:false}, "addressing", $asm22.TypeRef("System.ServiceModel.Channels.MsmqUri+IAddressTranslator"));

    $.Field({Static:false, Public:false}, "messageReceivedCallback", $asm07.TypeRef("System.Action"));

    $.Property({Static:false, Public:false, Virtual:true }, "Scheme", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Channels.MsmqHostedTransportManager+HostedBindingFilter */ 

(function HostedBindingFilter$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.MsmqBindingFilter"), 
      Name: "System.ServiceModel.Channels.MsmqHostedTransportManager+HostedBindingFilter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm22.TypeRef("System.ServiceModel.Channels.MsmqUri+IAddressTranslator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckServiceExists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateBaseQueue", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRelativeVirtualPath", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsPrivateMatch", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchFound", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchLost", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartService", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "privateMatches", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "thisLock", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.ServiceModel.Diagnostics");
/* class System.ServiceModel.Diagnostics.HttpRequestTraceRecord */ 

(function HttpRequestTraceRecord$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "System.ServiceModel.Diagnostics.HttpRequestTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.HttpRequest"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "request", $asm28.TypeRef("System.Web.HttpRequest"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.AspNetRouteServiceHttpHandler */ 

(function AspNetRouteServiceHttpHandler$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.AspNetRouteServiceHttpHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginProcessRequest", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm28.TypeRef("System.Web.HttpContext"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndProcessRequest", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReusable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessRequest", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.HttpContext"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "serviceVirtualPath", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReusable", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.IHttpAsyncHandler"), 
      /* 1 */ $asm28.TypeRef("System.Web.IHttpHandler"), 
      /* 2 */ $asm28.TypeRef("System.Web.SessionState.IRequiresSessionState")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.ApplyHostConfigurationBehavior */ 

(function ApplyHostConfigurationBehavior$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.ApplyHostConfigurationBehavior", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FailActivationIfEndpointsHaveAbsoluteAddress", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.ServiceHostBase"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSchemeHttpOrHttps", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetEndpointAddressFilterToIgnorePort", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.ServiceHostBase"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IServiceBehavior.AddBindingParameters", 
      new JSIL.MethodSignature(null, [
          $asm22.TypeRef("System.ServiceModel.Description.ServiceDescription"), $asm22.TypeRef("System.ServiceModel.ServiceHostBase"), 
          $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint")]), $asm22.TypeRef("System.ServiceModel.Channels.BindingParameterCollection")
        ])
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IServiceBehavior"), "AddBindingParameters");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.ServiceDescription"), $asm22.TypeRef("System.ServiceModel.ServiceHostBase")])
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IServiceBehavior"), "ApplyDispatchBehavior");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IServiceBehavior.Validate", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.ServiceDescription"), $asm22.TypeRef("System.ServiceModel.ServiceHostBase")])
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IServiceBehavior"), "Validate");

    $.ExternalMethod({Static:true , Public:false}, "ThrowIfAbsolute", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ImplementInterfaces(
      /* 0 */ $asm22.TypeRef("System.ServiceModel.Description.IServiceBehavior")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HttpModule */ 

(function HttpModule$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HttpModule", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Init", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.HttpApplication"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ProcessRequest", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "disabled", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.IHttpModule")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedAspNetEnvironment */ 

(function HostedAspNetEnvironment$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Activation.AspNetEnvironment"), 
      Name: "System.ServiceModel.Activation.HostedAspNetEnvironment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddHostingBehavior", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.ServiceHostBase"), $asm22.TypeRef("System.ServiceModel.Description.ServiceDescription")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddMetadataBindingParameters", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Uri"), $asm22.TypeRef("System.Collections.Generic.KeyedByTypeCollection`1", [$asm22.TypeRef("System.ServiceModel.Description.IServiceBehavior")]), 
          $asm22.TypeRef("System.ServiceModel.Channels.BindingParameterCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ApplyHostedContext", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.TransportChannelListener"), $asm22.TypeRef("System.ServiceModel.Channels.BindingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecrementBusyCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Enable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnsureAllReferencedAssemblyLoaded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnsureCompatibilityRequirements", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Description.ServiceDescription"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AspNetCompatibilityEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConfigurationPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentVirtualPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsConfigurationBased", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSimpleApplicationHost", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UsingIntegratedPipeline", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WebSocketVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XamlFileBaseLocation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAnnotationFromHost", 
      new JSIL.MethodSignature($.String, [$asm22.TypeRef("System.ServiceModel.ServiceHostBase")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAuthenticationSchemes", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.AuthenticationSchemes"), [$asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBaseUri", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.BaseUriWithWildcard"), [$.String, $asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetConfigurationSection", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHostingProperty", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Activation.IAspNetMessageProperty"), [$asm22.TypeRef("System.ServiceModel.Channels.Message")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHostingProperty", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Activation.IAspNetMessageProperty"), [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSectionFromWebConfigurationManager", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IncrementBusyCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsMetadataListener", 
      new JSIL.MethodSignature($.Boolean, [$asm22.TypeRef("System.ServiceModel.Channels.BindingParameterCollection")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsWebConfigAboveApplication", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsWindowsAuthenticationConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsWithinApp", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrepareMessageForDispatch", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessNotMatchedEndpointAddress", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Uri"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceDecrementBusyCount", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceDecrementBusyCountIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceIncrementBusyCount", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceIncrementBusyCountIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetFullVirtualPath", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrySetWebSocketVersion", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.HttpApplication"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnsafeGetConfigurationSection", 
      new JSIL.MethodSignature($.Object, [$.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnsafeGetSectionFromWebConfigurationManager", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateCompatibilityRequirements", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateHttpSettings", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Net.AuthenticationSchemes")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy")]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateHttpsSettings", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "WebSocketVersionServerProperty", $.String, "WEBSOCKET_VERSION");

    $.Field({Static:true , Public:false}, "isWebSocketVersionSet", $.Boolean);

    $.Field({Static:true , Public:false}, "webSocketVersion", $.String);

    $.Field({Static:true , Public:false}, "cachedServiceReference", $.String);

    $.Field({Static:false, Public:false}, "isWindowsAuthentication", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:true , Virtual:true }, "AspNetCompatibilityEnabled", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ConfigurationPath", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsConfigurationBased", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentVirtualPath", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XamlFileBaseLocation", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UsingIntegratedPipeline", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "WebSocketVersion", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSimpleApplicationHost", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedAspNetEnvironment+HostedMetadataBindingParameter */ 

(function HostedMetadataBindingParameter$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HostedAspNetEnvironment+HostedMetadataBindingParameter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedAspNetEnvironment+HostedMetadataExchangeEndpointBehavior */ 

(function HostedMetadataExchangeEndpointBehavior$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HostedAspNetEnvironment+HostedMetadataExchangeEndpointBehavior", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint"), $asm22.TypeRef("System.ServiceModel.Channels.BindingParameterCollection")])
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior"), "AddBindingParameters");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint"), $asm22.TypeRef("System.ServiceModel.Dispatcher.ClientRuntime")])
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior"), "ApplyClientBehavior");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint"), $asm22.TypeRef("System.ServiceModel.Dispatcher.EndpointDispatcher")])
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior"), "ApplyDispatchBehavior");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.Validate", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint"))
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior"), "Validate");

    $.ImplementInterfaces(
      /* 0 */ $asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedAspNetEnvironment+ReceiveContextBusyCountWrapper */ 

(function ReceiveContextBusyCountWrapper$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.ReceiveContext"), 
      Name: "System.ServiceModel.Activation.HostedAspNetEnvironment+ReceiveContextBusyCountWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.ReceiveContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DecrementBusyCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DecrementOnNoAmbientTransaction", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAbandon", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeginAbandon", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeginComplete", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnEndAbandon", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnEndComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnFaulted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnWrappedContextFaulted", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterForTransactionNotification", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.Field({Static:false, Public:false}, "wrappedContext", $asm22.TypeRef("System.ServiceModel.Channels.ReceiveContext"));

    $.Field({Static:false, Public:false}, "busyCount", $.Int32);

    $.Field({Static:false, Public:false}, "ambientTransactionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedAspNetEnvironment+ReceiveContextBusyCountWrapper+ReceiveContextEnlistmentNotification */ 

(function ReceiveContextEnlistmentNotification$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HostedAspNetEnvironment+ReceiveContextBusyCountWrapper+ReceiveContextEnlistmentNotification", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.HostedAspNetEnvironment+ReceiveContextBusyCountWrapper"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Enlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InDoubt", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Enlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.PreparingEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Enlistment"))
    );

    $.Field({Static:false, Public:false}, "context", $asm23.TypeRef("System.ServiceModel.Activation.HostedAspNetEnvironment+ReceiveContextBusyCountWrapper"));

    $.ImplementInterfaces(
      /* 0 */ $asm27.TypeRef("System.Transactions.IEnlistmentNotification")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedBindingBehavior */ 

(function HostedBindingBehavior$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HostedBindingBehavior", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Activation.VirtualPathExtension"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VirtualPathExtension", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Activation.VirtualPathExtension"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IServiceBehavior.AddBindingParameters", 
      new JSIL.MethodSignature(null, [
          $asm22.TypeRef("System.ServiceModel.Description.ServiceDescription"), $asm22.TypeRef("System.ServiceModel.ServiceHostBase"), 
          $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint")]), $asm22.TypeRef("System.ServiceModel.Channels.BindingParameterCollection")
        ])
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IServiceBehavior"), "AddBindingParameters");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.ServiceDescription"), $asm22.TypeRef("System.ServiceModel.ServiceHostBase")])
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IServiceBehavior"), "ApplyDispatchBehavior");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IServiceBehavior.Validate", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.ServiceDescription"), $asm22.TypeRef("System.ServiceModel.ServiceHostBase")])
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IServiceBehavior"), "Validate");

    $.Field({Static:false, Public:false}, "virtualPathExtension", $asm22.TypeRef("System.ServiceModel.Activation.VirtualPathExtension"));

    $.Property({Static:false, Public:true }, "VirtualPathExtension", $asm22.TypeRef("System.ServiceModel.Activation.VirtualPathExtension"));

    $.ImplementInterfaces(
      /* 0 */ $asm22.TypeRef("System.ServiceModel.Description.IServiceBehavior")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedHttpContext */ 

(function HostedHttpContext$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.HttpRequestContext"), 
      Name: "System.ServiceModel.Activation.HostedHttpContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.HttpChannelListener"), $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AcceptWebSocketCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm0A.TypeRef("System.Net.WebSockets.WebSocketContext")]), [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "AppendHeaderFromHttpResponseMessageToResponse", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage"), $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AppendHeaderToResponse", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"), $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeforeAcceptWebSocket", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpResponseMessage"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Cleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseHostedRequestContainer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteWithException", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishWebSocketWaitingTask", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HttpMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsWebSocketRequest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetHttpInput", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.HttpInput"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHttpOutput", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.HttpOutput"), [$asm22.TypeRef("System.ServiceModel.Channels.Message")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAbort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAcceptWebSocketSuccess", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.WebSockets.WebSocketContext"), $asm1D.TypeRef("System.Net.Http.HttpRequestMessage")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnBeginReply", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.TimeSpan"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClose", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnProcessAuthentication", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Security.SecurityMessageProperty"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnReply", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PostAcceptWebSocket", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm28.TypeRef("System.Web.WebSockets.AspNetWebSocketContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRequestContainer", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.HostedHttpContext+HostedRequestContainer"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateAuthentication", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.HttpStatusCode"))
    );

    $.Field({Static:false, Public:false}, "requestContainer", $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpContext+HostedRequestContainer"));

    $.Field({Static:false, Public:false}, "result", $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult"));

    $.Field({Static:false, Public:false}, "webSocketWaitingTask", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:false}, "remoteEndpointMessageProperty", $asm22.TypeRef("System.ServiceModel.Channels.RemoteEndpointMessageProperty"));

    $.Field({Static:false, Public:false}, "webSocketContextTaskSource", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm0A.TypeRef("System.Net.WebSockets.WebSocketContext")]));

    $.Field({Static:false, Public:false}, "impersonationReleased", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "HttpMethod", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsWebSocketRequest", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedHttpContext+HostedHttpInput */ 

(function HostedHttpInput$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.HttpInput"), 
      Name: "System.ServiceModel.Activation.HostedHttpContext+HostedHttpInput", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.HostedHttpContext"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddProperties", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.Message"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConfigureHttpRequestMessage", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpRequestMessage"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMessagePropertyFromHostedResult", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.HostingMessageProperty"), [$asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ChannelBinding", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ContentLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ContentTypeCore", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_SoapActionHeader", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInputStream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream"))
    );

    $.Field({Static:false, Public:false}, "contentLength", $.Int32);

    $.Field({Static:false, Public:false}, "contentType", $.String);

    $.Field({Static:false, Public:false}, "hostedHttpContext", $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpContext"));

    $.Field({Static:false, Public:false}, "preReadBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "ContentLength", $.Int64);

    $.Property({Static:false, Public:false, Virtual:true }, "ContentTypeCore", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "HasContent", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "SoapActionHeader", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ChannelBinding", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedHttpContext+HostedHttpInput+HostedInputStream */ 

(function HostedInputStream$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.HttpDelayedAcceptStream"), 
      Name: "System.ServiceModel.Activation.HostedHttpContext+HostedHttpInput+HostedInputStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.HostedHttpContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm23.TypeRef("System.ServiceModel.Activation.HostedHttpContext"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateCommunicationException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm28.TypeRef("System.Web.HttpException")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "result", $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedHttpContext+HostedRequestHttpOutput */ 

(function HostedRequestHttpOutput$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.HttpOutput"), 
      Name: "System.ServiceModel.Activation.HostedHttpContext+HostedRequestHttpOutput", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult"), $asm22.TypeRef("System.ServiceModel.Channels.IHttpTransportFactorySettings"), 
          $asm22.TypeRef("System.ServiceModel.Channels.Message"), $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddHeader", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddMimeVersion", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOutputStream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PrepareHttpSend", 
      new JSIL.MethodSignature($.Boolean, [$asm22.TypeRef("System.ServiceModel.Channels.Message")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PrepareHttpSendCore", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpResponseMessage"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetContentEncoding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetContentLength", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetContentType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStatusCode", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.HttpStatusCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStatusDescription", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "result", $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult"));

    $.Field({Static:false, Public:false}, "context", $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpContext"));

    $.Field({Static:false, Public:false}, "mimeVersion", $.String);

    $.Field({Static:false, Public:false}, "contentType", $.String);

    $.Field({Static:false, Public:false}, "statusCode", $.Int32);

    $.Field({Static:false, Public:false}, "isSettingMimeHeader", $.Boolean);

    $.Field({Static:false, Public:false}, "isSettingContentType", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedHttpContext+HostedRequestHttpOutput+HostedResponseOutputStream */ 

(function HostedResponseOutputStream$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.BytesReadPositionStream"), 
      Name: "System.ServiceModel.Activation.HostedHttpContext+HostedRequestHttpOutput+HostedResponseOutputStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult"), $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckWrapThrow", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "context", $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpContext"));

    $.Field({Static:false, Public:false}, "result", $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedHttpContext+HostedRequestContainer */ 

(function HostedRequestContainer$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HostedHttpContext+HostedRequestContainer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThisLock", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRemotePort", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IServiceProvider")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Channels.HttpRequestMessageProperty.IHttpHeaderProvider.CopyHeaders", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.WebHeaderCollection"))
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Channels.HttpRequestMessageProperty+IHttpHeaderProvider"), "CopyHeaders")
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Channels.RemoteEndpointMessageProperty.IRemoteEndpointProvider.GetAddress", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Channels.RemoteEndpointMessageProperty+IRemoteEndpointProvider"), "GetAddress")
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Channels.RemoteEndpointMessageProperty.IRemoteEndpointProvider.GetPort", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Channels.RemoteEndpointMessageProperty+IRemoteEndpointProvider"), "GetPort")
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "TryGetAddressAndPort", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "isClosed", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "result", $asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult"));

    $.Field({Static:false, Public:false}, "thisLock", $.Object);

    $.Property({Static:false, Public:false}, "ThisLock", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm22.TypeRef("System.ServiceModel.Channels.RemoteEndpointMessageProperty+IRemoteEndpointProvider"), 
      /* 1 */ $asm22.TypeRef("System.ServiceModel.Channels.HttpRequestMessageProperty+IHttpHeaderProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedHttpRequestAsyncResult */ 

(function HostedHttpRequestAsyncResult$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.System.Uri)) ();
  };
















  function HostedHttpRequestAsyncResult_get_AspNetRouteServiceVirtualPath () {
    return this.HostedHttpRequestAsyncResult$AspNetRouteServiceVirtualPath$value;
  }; 








  function HostedHttpRequestAsyncResult_get_OriginalRequestUri () {
    return this.HostedHttpRequestAsyncResult$OriginalRequestUri$value;
  }; 


  function HostedHttpRequestAsyncResult_get_RequestUri () {
    return this.HostedHttpRequestAsyncResult$RequestUri$value;
  }; 























  function HostedHttpRequestAsyncResult_set_AspNetRouteServiceVirtualPath (value) {
    this.HostedHttpRequestAsyncResult$AspNetRouteServiceVirtualPath$value = value;
  }; 

  function HostedHttpRequestAsyncResult_set_OriginalRequestUri (value) {
    this.HostedHttpRequestAsyncResult$OriginalRequestUri$value = value;
  }; 

  function HostedHttpRequestAsyncResult_set_RequestUri (value) {
    this.HostedHttpRequestAsyncResult$RequestUri$value = value;
  }; 












  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.ServiceModel.Activation.HostedHttpRequestAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm28.TypeRef("System.Web.HttpApplication"), $.Boolean, 
          $.Boolean, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm28.TypeRef("System.Web.HttpApplication"), $.String, 
          $.Boolean, $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Abort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRefForImpersonation", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AppendHeader", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BeginRequest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteAsynchronously", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteOperation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteRequest", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "End", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ExecuteSynchronous", 
      new JSIL.MethodSignature(null, [
          $asm28.TypeRef("System.Web.HttpApplication"), $.Boolean, 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ExecuteSynchronous", 
      new JSIL.MethodSignature(null, [
          $asm28.TypeRef("System.Web.HttpApplication"), $.String, 
          $.Boolean, $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_AnonymousIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Application", 
      JSIL.MethodSignature.Return($asm28.TypeRef("System.Web.HttpApplication"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Method({Static:false, Public:true }, "get_AspNetRouteServiceVirtualPath", 
      JSIL.MethodSignature.Return($.String), 
      HostedHttpRequestAsyncResult_get_AspNetRouteServiceVirtualPath
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ContextOnBeginRequest", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.ContextCallback"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_EventTraceActivity", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostedThreadData", 
      JSIL.MethodSignature.Return($asm23.TypeRef("System.ServiceModel.Activation.HostedThreadData"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IISSupportsExtendedProtection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ImpersonationContext", 
      JSIL.MethodSignature.Return($asm23.TypeRef("System.ServiceModel.Activation.HostedImpersonationContext"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsWebSocketRequest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogonUserIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    );

    $.Method({Static:false, Public:true }, "get_OriginalRequestUri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri")), 
      HostedHttpRequestAsyncResult_get_OriginalRequestUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ProcessRequestCompleteCallback", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.AsyncCallback"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Method({Static:false, Public:true }, "get_RequestUri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri")), 
      HostedHttpRequestAsyncResult_get_RequestUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WaitOnBeginRequest", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Action`1", [$.Object]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WaitOnBeginRequestWithFlow", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Action`1", [$.Object]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetAcceptEncoding", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetAppRelativeCurrentExecutionFilePath", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetChannelBinding", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetContentLength", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetContentType", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetContentTypeFast", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetHttpMethod", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetInputStream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetOutputStream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetPrereadBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetSoapAction", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetUrl", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "HandleRequest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IISSupportsExtendedProtectionInternal", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "LogServiceActivationException", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.ServiceActivationException"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OnBeginRequest", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "OnBeginRequestWithFlow", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "OnReplySent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessRequestComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseImpersonation", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Method({Static:false, Public:false}, "set_AspNetRouteServiceVirtualPath", 
      JSIL.MethodSignature.Action($.String), 
      HostedHttpRequestAsyncResult_set_AspNetRouteServiceVirtualPath
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_OriginalRequestUri", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri")), 
      HostedHttpRequestAsyncResult_set_OriginalRequestUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RequestUri", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri")), 
      HostedHttpRequestAsyncResult_set_RequestUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetConnectionClose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetContentEncoding", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetContentType", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetStatusCode", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetStatusDescription", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetStreamedReadFinished", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTransferModeToStreaming", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Channels.HttpChannelListener.IHttpAuthenticationContext.CreateTraceRecord", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"))
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Channels.HttpChannelListener+IHttpAuthenticationContext"), "CreateTraceRecord");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Channels.HttpChannelListener.IHttpAuthenticationContext.get_LogonUserIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Channels.HttpChannelListener+IHttpAuthenticationContext"), "get_LogonUserIdentity");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Channels.HttpChannelListener.IHttpAuthenticationContext.GetClientCertificate", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Channels.HttpChannelListener+IHttpAuthenticationContext"), "GetClientCertificate");

    $.ExternalMethod({Static:false, Public:false}, "TryStartStreamedRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "anonymousIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "waitOnBeginRequest", $asm07.TypeRef("System.Action`1", [$.Object]))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "waitOnBeginRequestWithFlow", $asm07.TypeRef("System.Action`1", [$.Object]))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "contextOnBeginRequest", $asm07.TypeRef("System.Threading.ContextCallback"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "processRequestCompleteCallback", $asm07.TypeRef("System.AsyncCallback"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "waitObject", $asm07.TypeRef("System.Threading.AutoResetEvent"))
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.Field({Static:true , Public:false}, "iisSupportsExtendedProtection", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "impersonationContext", $asm23.TypeRef("System.ServiceModel.Activation.HostedImpersonationContext"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "hostedThreadData", $asm23.TypeRef("System.ServiceModel.Activation.HostedThreadData"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "context", $asm28.TypeRef("System.Web.HttpApplication"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "state", $.Int32);

    $.Field({Static:false, Public:false}, "streamedReadState", $.Int32);

    $.Field({Static:false, Public:false}, "flowContext", $.Boolean)
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "ensureWFService", $.Boolean);

    $.Field({Static:false, Public:false}, "configurationBasedServiceVirtualPath", $.String);

    $.Field({Static:false, Public:false}, "eventTraceActivity", $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "isWebSocketRequest", $.Boolean);

    $.Field({Static:false, Public:false}, "HostedHttpRequestAsyncResult$OriginalRequestUri$value", $asm0A.TypeRef("System.Uri"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "HostedHttpRequestAsyncResult$RequestUri$value", $asm0A.TypeRef("System.Uri"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "HostedHttpRequestAsyncResult$AspNetRouteServiceVirtualPath$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));


    function HostedHttpRequestAsyncResult__cctor () {
      $thisType.iisSupportsExtendedProtection = null;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      HostedHttpRequestAsyncResult__cctor
    );

    $.Property({Static:true , Public:true }, "AnonymousIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Property({Static:true , Public:true }, "WaitOnBeginRequest", $asm07.TypeRef("System.Action`1", [$.Object]));

    $.Property({Static:true , Public:true }, "WaitOnBeginRequestWithFlow", $asm07.TypeRef("System.Action`1", [$.Object]));

    $.Property({Static:true , Public:true }, "ContextOnBeginRequest", $asm07.TypeRef("System.Threading.ContextCallback"));

    $.Property({Static:true , Public:true }, "ProcessRequestCompleteCallback", $asm07.TypeRef("System.AsyncCallback"));

    $.Property({Static:false, Public:true , Virtual:true }, "IISSupportsExtendedProtection", $.Boolean);

    $.Property({Static:false, Public:true }, "IsWebSocketRequest", $.Boolean);

    $.Property({Static:false, Public:true }, "LogonUserIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Channels.HttpChannelListener.IHttpAuthenticationContext.LogonUserIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Property({Static:false, Public:true }, "ImpersonationContext", $asm23.TypeRef("System.ServiceModel.Activation.HostedImpersonationContext"));

    $.Property({Static:false, Public:true }, "HostedThreadData", $asm23.TypeRef("System.ServiceModel.Activation.HostedThreadData"));

    $.Property({Static:false, Public:true }, "EventTraceActivity", $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"));

    $.Property({Static:false, Public:true }, "OriginalRequestUri", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "RequestUri", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "Application", $asm28.TypeRef("System.Web.HttpApplication"));

    $.Property({Static:false, Public:true }, "AspNetRouteServiceVirtualPath", $.String);

    $.ImplementInterfaces(
      /* 1 */ $asm22.TypeRef("System.ServiceModel.Channels.HttpChannelListener+IHttpAuthenticationContext")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedHttpRequestAsyncResult+State */ 

(function State$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.ServiceModel.Activation.HostedHttpRequestAsyncResult+State", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Running", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "Completed", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "Aborted", $.Int32, 2);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedHttpRequestAsyncResult+StreamedReadState */ 

(function StreamedReadState$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.ServiceModel.Activation.HostedHttpRequestAsyncResult+StreamedReadState", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "None", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "ReceiveStarted", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "ReceiveFinishedAfterAbortStarted", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "AbortStarted", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "Aborted", $.Int32, 4);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedHttpTransportManager */ 

(function HostedHttpTransportManager$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.HttpTransportManager"), 
      Name: "System.ServiceModel.Activation.HostedHttpTransportManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BaseUriWithWildcard"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateReceiveBytesActivity", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Diagnostics.ServiceModelActivity"), [$asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EndHttpContextReceived", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Host", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Port", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Scheme", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRequestTraceIdentifier", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm07.TypeRef("System.IServiceProvider")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "HttpContextReceived", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm22.TypeRef("System.ServiceModel.Channels.HttpChannelListener")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAbort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClose", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OnHttpContextReceived", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "TraceConnectionInformation", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult"))
    );

    $.Field({Static:false, Public:false}, "scheme", $.String);

    $.Field({Static:false, Public:false}, "port", $.Int32);

    $.Field({Static:false, Public:false}, "host", $.String);

    $.Field({Static:true , Public:false}, "onHttpContextReceived", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:true , Public:false}, "canTraceConnectionInformation", $.Boolean, true);

    $.Property({Static:false, Public:false, Virtual:true }, "Scheme", $.String);

    $.Property({Static:false, Public:false}, "Host", $.String);

    $.Property({Static:false, Public:false}, "Port", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedThreadData */ 

(function HostedThreadData$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HostedThreadData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateContext", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IDisposable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsafeApplyData", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false}, "cultureInfo", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:false, Public:false}, "uiCultureInfo", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:false, Public:false}, "httpContext", $asm28.TypeRef("System.Web.HttpContext"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm07.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.ServiceModel.Activation.HostedThreadData+HostedAspNetContext */ 

(function HostedAspNetContext$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HostedThreadData+HostedAspNetContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.HostedThreadData"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "oldData", $asm23.TypeRef("System.ServiceModel.Activation.HostedThreadData"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedImpersonationContext */ 

(function HostedImpersonationContext$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HostedImpersonationContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "AddRef", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CloseInvalidOutSafeHandleCritical", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsImpersonated", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Impersonate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IDisposable"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Release", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "tokenHandle", $asm23.TypeRef("System.ServiceModel.Activation.Interop.SafeCloseHandleCritical"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "refCount", $.Int32)
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "isImpersonated", $.Boolean)
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true }, "IsImpersonated", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedImpersonationContext+HostedInnerImpersonationContext */ 

(function HostedInnerImpersonationContext$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HostedImpersonationContext+HostedInnerImpersonationContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IDisposable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "UnsafeCreate", 
      new JSIL.MethodSignature($.Type, [$.IntPtr])
    );

    $.Field({Static:false, Public:false}, "impersonatedContext", $asm07.TypeRef("System.IDisposable"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm07.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.ServiceModel.Activation.HostedNamedPipeTransportManager */ 

(function HostedNamedPipeTransportManager$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.NamedPipeTransportManager"), 
      Name: "System.ServiceModel.Activation.HostedNamedPipeTransportManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BaseUriWithWildcard"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateConnectionDemuxer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm22.TypeRef("System.ServiceModel.Channels.NamedPipeChannelListener")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAbort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClose", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDuplicatedVia", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnOpenInternal", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSelecting", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.NamedPipeChannelListener"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnVia", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Start", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Guid"), 
          $asm07.TypeRef("System.Action")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Stop", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.Field({Static:false, Public:false}, "settingsApplied", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "onViaCallback", $asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")]));

    $.Field({Static:false, Public:false}, "listener", $asm22.TypeRef("System.ServiceModel.Channels.SharedConnectionListener"));

    $.Field({Static:false, Public:false}, "connectionDemuxer", $asm22.TypeRef("System.ServiceModel.Channels.ConnectionDemuxer"));

    $.Field({Static:false, Public:false}, "queueId", $.Int32);

    $.Field({Static:false, Public:false}, "token", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "onDuplicatedViaCallback", $asm07.TypeRef("System.Func`2", [$asm0A.TypeRef("System.Uri"), $.Int32]));

    $.Field({Static:false, Public:false}, "demuxerCreated", $asm07.TypeRef("System.Boolean"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedTcpTransportManager */ 

(function HostedTcpTransportManager$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Channels.SharedTcpTransportManager"), 
      Name: "System.ServiceModel.Activation.HostedTcpTransportManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.BaseUriWithWildcard"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOnViaCallback", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAbort", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClose", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSelecting", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.TcpChannelListener"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnVia", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Start", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Guid"), 
          $asm07.TypeRef("System.Action")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Stop", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.Field({Static:false, Public:false}, "settingsApplied", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "onViaCallback", $asm07.TypeRef("System.Action`1", [$asm0A.TypeRef("System.Uri")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedTransportConfiguration */ 

(function HostedTransportConfiguration$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HostedTransportConfiguration", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBaseAddresses", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]), [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* class System.ServiceModel.Activation.HostedTransportConfigurationBase */ 

(function HostedTransportConfigurationBase$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.ServiceModel.Activation.HostedTransportConfiguration"), 
      Name: "System.ServiceModel.Activation.HostedTransportConfigurationBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "FindBaseAddress", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.Channels.BaseUriWithWildcard"), [$asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ListenAddresses", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm22.TypeRef("System.ServiceModel.Channels.BaseUriWithWildcard")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scheme", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBaseAddresses", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]), [$.String])
    );

    $.Field({Static:false, Public:false}, "listenAddresses", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm22.TypeRef("System.ServiceModel.Channels.BaseUriWithWildcard")]));

    $.Field({Static:false, Public:false}, "scheme", $.String);

    $.Property({Static:false, Public:false}, "Scheme", $.String);

    $.Property({Static:false, Public:false}, "ListenAddresses", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm22.TypeRef("System.ServiceModel.Channels.BaseUriWithWildcard")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedTransportConfigurationManager */ 

(function HostedTransportConfigurationManager$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HostedTransportConfigurationManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.MetabaseSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddHostedTransportConfigurationIis7", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMetabaseSettings", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.MetabaseSettingsIis"), [$asm07.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateWasHostingMetabaseSettings", 
      JSIL.MethodSignature.Return($asm23.TypeRef("System.ServiceModel.Activation.MetabaseSettingsIis"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EnsureInitialized", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureInitializedForSimpleApplicationHost", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MetabaseSettings", 
      JSIL.MethodSignature.Return($asm23.TypeRef("System.ServiceModel.Activation.MetabaseSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThisLock", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBaseAddresses", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConfiguration", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.HostedTransportConfiguration"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetBaseAddresses", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetConfiguration", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.HostedTransportConfiguration"), [$.String])
    );

    $.Field({Static:false, Public:false}, "configurations", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm23.TypeRef("System.ServiceModel.Activation.HostedTransportConfiguration")]));

    $.Field({Static:false, Public:false}, "initialized", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "metabaseSettings", $asm23.TypeRef("System.ServiceModel.Activation.MetabaseSettings"));

    $.Field({Static:true , Public:false}, "singleton", $asm23.TypeRef("System.ServiceModel.Activation.HostedTransportConfigurationManager"));

    $.Field({Static:true , Public:false}, "syncRoot", $.Object);

    $.Constant({Static:true , Public:false}, "WasHostingAssemblyName", $.String, "System.ServiceModel.WasHosting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "MetabaseSettingsIis7FactoryTypeName", $.String, "System.ServiceModel.WasHosting.MetabaseSettingsIis7Factory, System.ServiceModel.WasHosting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "CreateMetabaseSettingsIis7MethodName", $.String, "CreateMetabaseSettings");

    $.Property({Static:true , Public:false}, "MetabaseSettings", $asm23.TypeRef("System.ServiceModel.Activation.MetabaseSettings"));

    $.Property({Static:false, Public:false}, "ThisLock", $.Object);

    $.Property({Static:true , Public:false}, "Value", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostingMessageProperty */ 

(function HostingMessageProperty$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.System.Uri)) ();
  };







  function HostingMessageProperty_get_OriginalRequestUri () {
    return this.HostingMessageProperty$OriginalRequestUri$value;
  }; 


  function HostingMessageProperty_set_OriginalRequestUri (value) {
    this.HostingMessageProperty$OriginalRequestUri$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HostingMessageProperty", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ApplyIntegrationContext", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IDisposable"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ImpersonationContext", 
      JSIL.MethodSignature.Return($asm23.TypeRef("System.ServiceModel.Activation.HostedImpersonationContext"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_OriginalRequestUri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri")), 
      HostingMessageProperty_get_OriginalRequestUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Impersonate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IDisposable"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Method({Static:false, Public:false}, "set_OriginalRequestUri", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri")), 
      HostingMessageProperty_set_OriginalRequestUri
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Constant({Static:true , Public:false}, "$name", $.String, "webhost");

    $.Field({Static:false, Public:false}, "impersonationContext", $asm23.TypeRef("System.ServiceModel.Activation.HostedImpersonationContext"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "currentThreadData", $asm23.TypeRef("System.ServiceModel.Activation.HostedThreadData"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "HostingMessageProperty$OriginalRequestUri$value", $asm0A.TypeRef("System.Uri"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "OriginalRequestUri", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:true , Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "ImpersonationContext", $asm23.TypeRef("System.ServiceModel.Activation.HostedImpersonationContext"));

    $.ImplementInterfaces(
      /* 0 */ $asm22.TypeRef("System.ServiceModel.Activation.IAspNetMessageProperty")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HttpHostedTransportConfiguration */ 

(function HttpHostedTransportConfiguration$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.ServiceModel.Activation.HostedTransportConfigurationBase"), 
      Name: "System.ServiceModel.Activation.HttpHostedTransportConfiguration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTransportManager", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.HostedHttpTransportManager"), [$asm22.TypeRef("System.ServiceModel.Channels.BaseUriWithWildcard")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTransportManagers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHttpTransportManager", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.HostedHttpTransportManager"), [$asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryDebugPrint", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:false, Public:false}, "transportManagerDirectory", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm23.TypeRef("System.ServiceModel.Activation.HostedHttpTransportManager")]));

    $.Field({Static:true , Public:false}, "canDebugPrint", $.Boolean, true);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HttpsHostedTransportConfiguration */ 

(function HttpsHostedTransportConfiguration$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.ServiceModel.Activation.HttpHostedTransportConfiguration"), 
      Name: "System.ServiceModel.Activation.HttpsHostedTransportConfiguration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.ServiceModel.Activation.IServiceModelActivationHandler */ 

JSIL.MakeInterface(
  "System.ServiceModel.Activation.IServiceModelActivationHandler", false, [], function ($) {
    $.Method({}, "GetFactory", JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Activation.ServiceHostFactoryBase")));
  }, []);

/* class System.ServiceModel.Activation.MsmqHostedTransportConfiguration */ 

(function MsmqHostedTransportConfiguration$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.ServiceModel.Activation.HostedTransportConfigurationBase"), 
      Name: "System.ServiceModel.Activation.MsmqHostedTransportConfiguration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Channels.MsmqUri+IAddressTranslator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransportManager", 
      JSIL.MethodSignature.Return($asm23.TypeRef("System.ServiceModel.Channels.MsmqHostedTransportManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBaseAddresses", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]), [$.String])
    );

    $.Field({Static:false, Public:false}, "uniqueManager", $asm23.TypeRef("System.ServiceModel.Channels.MsmqHostedTransportManager"));

    $.Property({Static:false, Public:false}, "TransportManager", $asm23.TypeRef("System.ServiceModel.Channels.MsmqHostedTransportManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.MsmqIntegrationHostedTransportConfiguration */ 

(function MsmqIntegrationHostedTransportConfiguration$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.ServiceModel.Activation.MsmqHostedTransportConfiguration"), 
      Name: "System.ServiceModel.Activation.MsmqIntegrationHostedTransportConfiguration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.NamedPipeHostedTransportConfiguration */ 

(function NamedPipeHostedTransportConfiguration$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.ServiceModel.Activation.HostedTransportConfigurationBase"), 
      Name: "System.ServiceModel.Activation.NamedPipeHostedTransportConfiguration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransportManager", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.NamedPipeTransportManager"))
    );

    $.Field({Static:false, Public:false}, "uniqueManager", $asm23.TypeRef("System.ServiceModel.Activation.HostedNamedPipeTransportManager"));

    $.Property({Static:false, Public:false}, "TransportManager", $asm22.TypeRef("System.ServiceModel.Channels.NamedPipeTransportManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.ServiceModel.Activation.MetabasePropertyType */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceModel.Activation.MetabasePropertyType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ServerBindings: 1023, 
    SecureBindings: 2021, 
    AuthFlags: 6000, 
    Realm: 6001, 
    AnonymousUserName: 6020, 
    AnonymousPassword: 6021, 
    AccessSslFlags: 6030, 
    AuthPersistence: 6031, 
    AuthProviders: 6032, 
  }
);

/* class System.ServiceModel.Activation.MetabaseReader */ 

(function MetabaseReader$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.MetabaseReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ConvertData", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EnsureRecordBuffer", 
      JSIL.MethodSignature.Action($.UInt32)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature($.Object, [$.String, $asm23.TypeRef("System.ServiceModel.Activation.MetabasePropertyType")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetData", 
      new JSIL.MethodSignature($.Object, [$.String, $.UInt32])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "RecordToStringArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "LMPath", $.String, "/LM");

    $.Constant({Static:true , Public:false}, "E_INSUFFICIENT_BUFFER", $.UInt32, 2147942522);

    $.Constant({Static:true , Public:false}, "E_PATH_NOT_FOUND", $.UInt32, 2147942403);

    $.Constant({Static:true , Public:false}, "E_DATA_NOT_FOUND", $.UInt32, 2148321281);

    $.Field({Static:true , Public:false}, "adminBase", $asm23.TypeRef("System.ServiceModel.Activation.IMSAdminBase"));

    $.Field({Static:true , Public:false}, "syncRoot", $.Object);

    $.Field({Static:false, Public:false}, "mdHandle", $.Int32);

    $.Field({Static:false, Public:false}, "record", $asm23.TypeRef("System.ServiceModel.Activation.METADATA_RECORD"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "bufferHandle", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "currentBufferSize", $.UInt32);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm07.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.ServiceModel.Activation.MetabaseSettings */ 

(function MetabaseSettings$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.MetabaseSettings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildExtendedProtectionPolicy", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"), [
          $asm23.TypeRef("System.ServiceModel.Activation.ExtendedProtectionTokenChecking"), $asm23.TypeRef("System.ServiceModel.Activation.ExtendedProtectionFlags"), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Bindings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $jsilcore.TypeRef("System.Array", [$.String])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Protocols", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetAccessSslFlags", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.HttpAccessSslFlags"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAllowSslOnly", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetAuthenticationSchemes", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.AuthenticationSchemes"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBindings", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExtendedProtectionPolicy", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProtocols", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRealm", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsWithinApp", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Bindings", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $jsilcore.TypeRef("System.Array", [$.String])]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Protocols", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.Constant({Static:true , Public:false}, "AboPathDelimiter", $.Char, "/");

    $.Constant({Static:true , Public:false}, "DotDelimiter", $.String, ".");

    $.Constant({Static:true , Public:false}, "LocalMachine", $.String, "localhost");

    $.Field({Static:false, Public:false}, "enabledProtocols", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "bindingsTable", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $jsilcore.TypeRef("System.Array", [$.String])]));

    $.Property({Static:false, Public:false}, "Protocols", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Property({Static:false, Public:false}, "Bindings", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $jsilcore.TypeRef("System.Array", [$.String])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.MetabaseSettingsCassini */ 

(function MetabaseSettingsCassini$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.ServiceModel.Activation.MetabaseSettings"), 
      Name: "System.ServiceModel.Activation.MetabaseSettingsCassini", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.HostedHttpRequestAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetAccessSslFlags", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.HttpAccessSslFlags"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetAuthenticationSchemes", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.AuthenticationSchemes"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExtendedProtectionPolicy", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRealm", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsWithinApp", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.MetabaseSettingsIis */ 

(function MetabaseSettingsIis$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.ServiceModel.Activation.MetabaseSettings"), 
      Name: "System.ServiceModel.Activation.MetabaseSettingsIis", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateTransportSettings", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.HostedServiceTransportSettings"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindLongestMatchingAppPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThisLock", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetAccessSslFlags", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.HttpAccessSslFlags"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetAuthenticationSchemes", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.AuthenticationSchemes"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExtendedProtectionPolicy", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRealm", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSiteApplicationPaths", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTransportSettings", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.HostedServiceTransportSettings"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsWithinApp", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemapAuthenticationSchemes", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.AuthenticationSchemes"), [$asm23.TypeRef("System.ServiceModel.Activation.AuthFlags"), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.Field({Static:false, Public:false}, "transportSettingsTable", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $asm23.TypeRef("System.ServiceModel.Activation.HostedServiceTransportSettings")]));

    $.Constant({Static:true , Public:false}, "NegotiateAuthProvider", $.String, "negotiate");

    $.Constant({Static:true , Public:false}, "NtlmAuthProvider", $.String, "ntlm");

    $.Field({Static:true , Public:false}, "DefaultAuthProviders", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "ThisLock", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.MetabaseSettingsIis6 */ 

(function MetabaseSettingsIis6$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.ServiceModel.Activation.MetabaseSettingsIis"), 
      Name: "System.ServiceModel.Activation.MetabaseSettingsIis6", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateTransportSettings", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.HostedServiceTransportSettings"), [$.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "FindHierarchicalProperty", 
      new JSIL.MethodSignature($.Object, [
          $asm23.TypeRef("System.ServiceModel.Activation.MetabaseReader"), $asm23.TypeRef("System.ServiceModel.Activation.MetabasePropertyType"), 
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "FindPropertyUnderAppRoot", 
      new JSIL.MethodSignature($.Object, [
          $asm23.TypeRef("System.ServiceModel.Activation.MetabaseReader"), $asm23.TypeRef("System.ServiceModel.Activation.MetabasePropertyType"), 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "FindPropertyUnderAppRoot", 
      new JSIL.MethodSignature($.Object, [
          $asm23.TypeRef("System.ServiceModel.Activation.MetabaseReader"), $asm23.TypeRef("System.ServiceModel.Activation.MetabasePropertyType"), 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetAccessSslFlags", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.HttpAccessSslFlags"), [$asm23.TypeRef("System.ServiceModel.Activation.MetabaseReader"), $.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetAuthFlags", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.AuthFlags"), [$asm23.TypeRef("System.ServiceModel.Activation.MetabaseReader"), $.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetAuthProviders", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm23.TypeRef("System.ServiceModel.Activation.MetabaseReader"), $.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetExtendedProtectionPolicy", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetRealm", 
      new JSIL.MethodSignature($.String, [$asm23.TypeRef("System.ServiceModel.Activation.MetabaseReader"), $.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSiteApplicationPaths", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateApplicationProperties", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.MetabaseReader"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "PopulateSiteProperties", 
      JSIL.MethodSignature.Action($asm23.TypeRef("System.ServiceModel.Activation.MetabaseReader"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetApplicationInfo", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "siteAboPath", $.String)
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "appAboPath", $.String)
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "appTransportSettings", $asm23.TypeRef("System.ServiceModel.Activation.HostedServiceTransportSettings"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.MetabaseSettingsIis6+IISConstants */ 

(function IISConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.ServiceModel.Activation.MetabaseSettingsIis6+IISConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "AboPathDelimiter", $.Char, "/");

    $.Constant({Static:true , Public:false}, "LMSegment", $.String, "/LM");

    $.Constant({Static:true , Public:false}, "RootSegment", $.String, "/Root");

    $.Field({Static:true , Public:false}, "CommaSeparator", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Constant({Static:true , Public:false}, "CBTRegistryHKLMPath", $.String, "System\\CurrentControlSet\\Services\\W3SVC\\Parameters\\ExtendedProtection");

    $.Constant({Static:true , Public:false}, "SpnAttributeName", $.String, "spns");

    $.Constant({Static:true , Public:false}, "ExtendedProtectionElementName", $.String, "extendedProtection");

    $.Constant({Static:true , Public:false}, "TokenCheckingAttributeName", $.String, "tokenChecking");

    $.Constant({Static:true , Public:false}, "FlagsAttributeName", $.String, "flags");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.HostedServiceTransportSettings */ 

(function HostedServiceTransportSettings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)) ();
  };



  function HostedServiceTransportSettings_get_IisExtendedProtectionPolicy () {
    return this.HostedServiceTransportSettings$IisExtendedProtectionPolicy$value;
  }; 

  function HostedServiceTransportSettings_set_IisExtendedProtectionPolicy (value) {
    this.HostedServiceTransportSettings$IisExtendedProtectionPolicy$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.HostedServiceTransportSettings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_IisExtendedProtectionPolicy", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy")), 
      HostedServiceTransportSettings_get_IisExtendedProtectionPolicy
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_IisExtendedProtectionPolicy", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy")), 
      HostedServiceTransportSettings_set_IisExtendedProtectionPolicy
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:true }, "Realm", $.String);

    $.Field({Static:false, Public:true }, "AccessSslFlags", $asm23.TypeRef("System.ServiceModel.Activation.HttpAccessSslFlags"));

    $.Field({Static:false, Public:true }, "AuthFlags", $asm23.TypeRef("System.ServiceModel.Activation.AuthFlags"));

    $.Field({Static:false, Public:true }, "AuthProviders", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "HostedServiceTransportSettings$IisExtendedProtectionPolicy$value", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "IisExtendedProtectionPolicy", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.ServiceModel.Activation.AuthFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceModel.Activation.AuthFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    AuthAnonymous: 1, 
    AuthBasic: 2, 
    AuthNTLM: 4, 
    AuthMD5: 16, 
    AuthPassport: 64, 
  }
);

/* enum System.ServiceModel.Activation.HttpAccessSslFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceModel.Activation.HttpAccessSslFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Ssl: 8, 
    SslNegotiateCert: 32, 
    SslRequireCert: 64, 
    SslMapCert: 128, 
    Ssl128: 256, 
  }
);

/* enum System.ServiceModel.Activation.ExtendedProtectionTokenChecking */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceModel.Activation.ExtendedProtectionTokenChecking", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Allow: 1, 
    Require: 2, 
  }
);

/* enum System.ServiceModel.Activation.ExtendedProtectionFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceModel.Activation.ExtendedProtectionFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Proxy: 1, 
    NoServiceNameCheck: 2, 
    AllowDotlessSpn: 4, 
    ProxyCohosting: 32, 
  }
);

/* struct System.ServiceModel.Activation.METADATA_RECORD */ 

(function METADATA_RECORD$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.ServiceModel.Activation.METADATA_RECORD", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "dwMDIdentifier", $.UInt32);

    $.Field({Static:false, Public:true }, "dwMDAttributes", $.UInt32);

    $.Field({Static:false, Public:true }, "dwMDUserType", $.UInt32);

    $.Field({Static:false, Public:true }, "dwMDDataType", $.UInt32);

    $.Field({Static:false, Public:true }, "dwMDDataLen", $.UInt32);

    $.Field({Static:false, Public:true }, "pbMDData", $.IntPtr)
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:true }, "dwMDDataTag", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.ServiceModel.Activation.METADATA_HANDLE_INFO */ 

(function METADATA_HANDLE_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.ServiceModel.Activation.METADATA_HANDLE_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "dwMDPermissions", $.UInt32);

    $.Field({Static:false, Public:true }, "dwMDSystemChangeNumber", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.MSAdminBase */ 

(function MSAdminBase$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.MSAdminBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "DEFAULT_METABASE_TIMEOUT", $.UInt32, 30000);

    $.Constant({Static:true , Public:false}, "METADATA_MASTER_ROOT_HANDLE", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "METADATA_PERMISSION_READ", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "METADATA_INHERIT", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "IIS_MD_UT_SERVER", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "ALL_METADATA", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "DWORD_METADATA", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "STRING_METADATA", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "BINARY_METADATA", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "EXPANDSZ_METADATA", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "MULTISZ_METADATA", $.Int32, 5);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["A9E69610-B80D-11D0-B9B9-00A0C922E750"]; })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* interface System.ServiceModel.Activation.IMSAdminBase */ 

JSIL.MakeInterface(
  "System.ServiceModel.Activation.IMSAdminBase", false, [], function ($) {
    $.Method({}, "AddKey", new JSIL.MethodSignature($.UInt32, [$.UInt32, $.String]));
    $.Method({}, "DeleteKey", new JSIL.MethodSignature($.UInt32, [$.UInt32, $.String]));
    $.Method({}, "DeleteChildKeys", new JSIL.MethodSignature($.UInt32, [$.UInt32, $.String]));
    $.Method({}, "EnumKeys", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.String, $.UInt32
        ]));
    $.Method({}, "CopyKey", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.UInt32, $.String, 
          $.Int32, $.Int32
        ]));
    $.Method({}, "RenameKey", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.String
        ]));
    $.Method({}, "SetData", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $asm23.TypeRef("System.ServiceModel.Activation.METADATA_RECORD")
        ]));
    $.Method({}, "GetData", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm23.TypeRef("System.ServiceModel.Activation.METADATA_RECORD")]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]));
    $.Method({}, "DeleteData", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.UInt32, $.UInt32
        ]));
    $.Method({}, "EnumData", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $asm23.TypeRef("System.ServiceModel.Activation.METADATA_RECORD"), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]));
    $.Method({}, "GetAllData", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.UInt32, $.UInt32, 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.IntPtr
        ]));
    $.Method({}, "DeleteAllData", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.UInt32, $.UInt32
        ]));
    $.Method({}, "CopyData", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.UInt32, $.String, 
          $.UInt32, $.UInt32, 
          $.UInt32, $.Int32
        ]));
    $.Method({}, "GetDataPaths", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.UInt32, $.UInt32, 
          $.UInt32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]));
    $.Method({}, "OpenKey", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]));
    $.Method({}, "CloseKey", new JSIL.MethodSignature($.UInt32, [$.UInt32]));
    $.Method({}, "ChangePermissions", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.UInt32, 
          $.UInt32
        ]));
    $.Method({}, "SaveData", JSIL.MethodSignature.Return($.UInt32));
    $.Method({}, "GetHandleInfo", new JSIL.MethodSignature($.UInt32, [$.UInt32, $asm23.TypeRef("System.ServiceModel.Activation.METADATA_HANDLE_INFO")]));
    $.Method({}, "GetSystemChangeNumber", new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]));
    $.Method({}, "GetDataSetNumber", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]));
    $.Method({}, "SetLastChangeTime", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME")]), $.Int32
        ]));
    $.Method({}, "GetLastChangeTime", new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME")]), $.Int32
        ]));
    $.Method({}, "KeyExchangePhase1", JSIL.MethodSignature.Return($.UInt32));
    $.Method({}, "KeyExchangePhase2", JSIL.MethodSignature.Return($.UInt32));
    $.Method({}, "Backup", new JSIL.MethodSignature($.UInt32, [
          $.String, $.UInt32, 
          $.UInt32
        ]));
    $.Method({}, "Restore", new JSIL.MethodSignature($.UInt32, [
          $.String, $.UInt32, 
          $.UInt32
        ]));
    $.Method({}, "EnumBackups", new JSIL.MethodSignature($.UInt32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME")]), $.UInt32
        ]));
    $.Method({}, "DeleteBackup", new JSIL.MethodSignature($.UInt32, [$.String, $.UInt32]));
    $.Method({}, "UnmarshalInterface", new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("JSIL.Reference", [$.Type])]));
    $.Method({}, "GetServerGuid", new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")])]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["70B51430-B6CA-11d0-B9B9-00A0C922E750"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

/* class System.ServiceModel.Activation.ServiceActivationBuildProviderAttribute */ 

(function ServiceActivationBuildProviderAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "System.ServiceModel.Activation.ServiceActivationBuildProviderAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class System.ServiceModel.Activation.ServiceBuildProvider */ 

(function ServiceBuildProvider$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm28.TypeRef("System.Web.Compilation.BuildProvider"), 
      Name: "System.ServiceModel.Activation.ServiceBuildProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureParsed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateCode", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.Compilation.AssemblyBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCodeCore", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.Compilation.AssemblyBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CodeCompilerType", 
      JSIL.MethodSignature.Return($asm28.TypeRef("System.Web.Compilation.CompilerType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_VirtualPathDependencies", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCodeCompilerType", 
      JSIL.MethodSignature.Return($asm28.TypeRef("System.Web.Compilation.CompilerType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetCodeCompileUnit", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.CodeDom.CodeCompileUnit"), [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.IDictionary")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomString", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.CodeDom.Compiler.CompilerResults")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCustomStringCore", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.CodeDom.Compiler.CompilerResults")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultCompilerTypeForLanguageInternal", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.Compilation.CompilerType"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultCompilerTypeInternal", 
      JSIL.MethodSignature.Return($asm28.TypeRef("System.Web.Compilation.CompilerType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultFlags", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.Compilation.BuildProviderResultFlags"), [$asm0A.TypeRef("System.CodeDom.Compiler.CompilerResults")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenReaderInternal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.TextReader"))
    );

    $.Field({Static:false, Public:false}, "parser", $asm23.TypeRef("System.ServiceModel.Activation.ServiceParser"));

    $.Property({Static:false, Public:true , Virtual:true }, "CodeCompilerType", $asm28.TypeRef("System.Web.Compilation.CompilerType"));

    $.Property({Static:false, Public:true , Virtual:true }, "VirtualPathDependencies", $asm07.TypeRef("System.Collections.ICollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm07.System.Security.SecurityCriticalScope.Everything]; })
    .Attribute($asm28.TypeRef("System.Web.Compilation.BuildProviderAppliesToAttribute"), function () { return [$asm28.System.Web.Compilation.BuildProviderAppliesTo.Web]; })
    .Attribute($asm23.TypeRef("System.ServiceModel.Activation.ServiceActivationBuildProviderAttribute"));

})();

/* class System.ServiceModel.Activation.ServiceDeploymentInfo */ 

(function ServiceDeploymentInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm22.System.ServiceModel.Activation.ServiceHostFactoryBase)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.String)) ();
  };



  function ServiceDeploymentInfo_get_MessageHandledByRoute () {
    return this.ServiceDeploymentInfo$MessageHandledByRoute$value;
  }; 

  function ServiceDeploymentInfo_get_ServiceHostFactory () {
    return this.ServiceDeploymentInfo$ServiceHostFactory$value;
  }; 

  function ServiceDeploymentInfo_get_ServiceType () {
    return this.ServiceDeploymentInfo$ServiceType$value;
  }; 

  function ServiceDeploymentInfo_get_VirtualPath () {
    return this.ServiceDeploymentInfo$VirtualPath$value;
  }; 

  function ServiceDeploymentInfo_set_MessageHandledByRoute (value) {
    this.ServiceDeploymentInfo$MessageHandledByRoute$value = value;
  }; 

  function ServiceDeploymentInfo_set_ServiceHostFactory (value) {
    this.ServiceDeploymentInfo$ServiceHostFactory$value = value;
  }; 

  function ServiceDeploymentInfo_set_ServiceType (value) {
    this.ServiceDeploymentInfo$ServiceType$value = value;
  }; 

  function ServiceDeploymentInfo_set_VirtualPath (value) {
    this.ServiceDeploymentInfo$VirtualPath$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.ServiceDeploymentInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm22.TypeRef("System.ServiceModel.Activation.ServiceHostFactoryBase"), 
          $.String
        ])
    );

    $.Method({Static:false, Public:true }, "get_MessageHandledByRoute", 
      JSIL.MethodSignature.Return($.Boolean), 
      ServiceDeploymentInfo_get_MessageHandledByRoute
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ServiceHostFactory", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Activation.ServiceHostFactoryBase")), 
      ServiceDeploymentInfo_get_ServiceHostFactory
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ServiceType", 
      JSIL.MethodSignature.Return($.String), 
      ServiceDeploymentInfo_get_ServiceType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_VirtualPath", 
      JSIL.MethodSignature.Return($.String), 
      ServiceDeploymentInfo_get_VirtualPath
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_MessageHandledByRoute", 
      JSIL.MethodSignature.Action($.Boolean), 
      ServiceDeploymentInfo_set_MessageHandledByRoute
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ServiceHostFactory", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Activation.ServiceHostFactoryBase")), 
      ServiceDeploymentInfo_set_ServiceHostFactory
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ServiceType", 
      JSIL.MethodSignature.Action($.String), 
      ServiceDeploymentInfo_set_ServiceType
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_VirtualPath", 
      JSIL.MethodSignature.Action($.String), 
      ServiceDeploymentInfo_set_VirtualPath
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ServiceDeploymentInfo$MessageHandledByRoute$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ServiceDeploymentInfo$VirtualPath$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ServiceDeploymentInfo$ServiceType$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ServiceDeploymentInfo$ServiceHostFactory$value", $asm22.TypeRef("System.ServiceModel.Activation.ServiceHostFactoryBase"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "MessageHandledByRoute", $.Boolean);

    $.Property({Static:false, Public:true }, "VirtualPath", $.String);

    $.Property({Static:false, Public:true }, "ServiceType", $.String);

    $.Property({Static:false, Public:true }, "ServiceHostFactory", $asm22.TypeRef("System.ServiceModel.Activation.ServiceHostFactoryBase"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.ServiceHostFactory */ 

(function ServiceHostFactory$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Activation.ServiceHostFactoryBase"), 
      Name: "System.ServiceModel.Activation.ServiceHostFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAssemblyReference", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateServiceHost", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.ServiceHostBase"), [$.String, $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateServiceHost", 
      new JSIL.MethodSignature($asm22.TypeRef("System.ServiceModel.ServiceHost"), [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])])
    );

    $.Field({Static:false, Public:false}, "referencedAssemblies", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* class System.ServiceModel.Activation.ServiceHttpModule */ 

(function ServiceHttpModule$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.ServiceHttpModule", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "BeginProcessRequest", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $.Object, $asm07.TypeRef("System.EventArgs"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "EndProcessRequest", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCompletedAsyncResult", 
      new JSIL.MethodSignature($asm25.TypeRef("System.Runtime.CompletedAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Init", 
      JSIL.MethodSignature.Action($asm28.TypeRef("System.Web.HttpApplication"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "beginEventHandler", $asm28.TypeRef("System.Web.BeginEventHandler"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "cachedAsyncResult", $asm25.TypeRef("System.Runtime.CompletedAsyncResult"));

    $.Field({Static:true , Public:false}, "endEventHandler", $asm28.TypeRef("System.Web.EndEventHandler"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "disabled", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.IHttpModule")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.ServiceMemoryGates */ 

(function ServiceMemoryGates$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.ServiceModel.Activation.ServiceMemoryGates", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Check", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetGlobalMemoryStatus", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm22.TypeRef("System.ServiceModel.Channels.UnsafeNativeMethods+MEMORYSTATUSEX")]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.ServiceParser */ 

(function ServiceParser$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.ServiceParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm23.TypeRef("System.ServiceModel.Activation.ServiceBuildProvider")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAssemblyDependency", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAssemblyDependency", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSourceDependency", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateParseException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateParseException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateParseException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Exception"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateParseString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AssemblyDependencies", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompilerType", 
      JSIL.MethodSignature.Return($asm28.TypeRef("System.Web.Compilation.CompilerType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasInlineCode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SourceDependencies", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCodeModel", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.CodeDom.CodeCompileUnit"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCompiledType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLinePragmasTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSourceFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Parse", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseServiceDirective", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseString", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAttributes", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Text.RegularExpressions.Match"), $asm07.TypeRef("System.Collections.IDictionary")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessCompilationParams", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.IDictionary"), $asm0A.TypeRef("System.CodeDom.Compiler.CompilerParameters")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessDirective", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Collections.IDictionary")])
    );

    $.Constant({Static:true , Public:false}, "Delimiter", $.String, "|");

    $.Constant({Static:true , Public:false}, "DefaultDirectiveName", $.String, "ServiceHost");

    $.Constant({Static:true , Public:false}, "FactoryAttributeName", $.String, "Factory");

    $.Constant({Static:true , Public:false}, "ServiceAttributeName", $.String, "Service");

    $.Field({Static:true , Public:false, ReadOnly:true }, "directiveRegex", $asm2A.TypeRef("System.Web.RegularExpressions.SimpleDirectiveRegex"));

    $.Field({Static:false, Public:false}, "buildProvider", $asm23.TypeRef("System.ServiceModel.Activation.ServiceBuildProvider"));

    $.Field({Static:false, Public:false}, "serviceText", $.String);

    $.Field({Static:false, Public:false}, "factoryAttributeValue", $.String);

    $.Field({Static:false, Public:false}, "serviceAttributeValue", $.String);

    $.Field({Static:false, Public:false}, "lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "startColumn", $.Int32);

    $.Field({Static:false, Public:false}, "foundMainDirective", $.Boolean);

    $.Field({Static:false, Public:false}, "compilerType", $asm28.TypeRef("System.Web.Compilation.CompilerType"));

    $.Field({Static:false, Public:false}, "sourceString", $.String);

    $.Field({Static:false, Public:false}, "linkedAssemblies", $asm0A.TypeRef("System.Collections.Specialized.HybridDictionary"));

    $.Field({Static:false, Public:false}, "referencedAssemblies", $asm07.TypeRef("System.Collections.ICollection"));

    $.Field({Static:true , Public:false}, "newlineChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "sourceDependencies", $asm0A.TypeRef("System.Collections.Specialized.HybridDictionary"));

    $.Field({Static:false, Public:false}, "virtualPath", $.String);

    $.Property({Static:false, Public:false}, "CompilerType", $asm28.TypeRef("System.Web.Compilation.CompilerType"));

    $.Property({Static:false, Public:false}, "AssemblyDependencies", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false}, "SourceDependencies", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false}, "HasInlineCode", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm07.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.ServiceModel.Activation.ServiceParser+ServiceParserUtilities */ 

(function ServiceParserUtilities$Members () {
  var $, $thisType;












  JSIL.MakeStaticClass("System.ServiceModel.Activation.ServiceParser+ServiceParserUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FirstDictionaryKey", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.IDictionary")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAndRemove", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.IDictionary"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAndRemoveBooleanAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Collections.IDictionary"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAndRemoveNonEmptyAttribute", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Collections.IDictionary"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAndRemoveNonEmptyAttribute", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.IDictionary"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAndRemoveNonNegativeIntegerAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Collections.IDictionary"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonNegativeIntegerAttribute", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeFromAssemblies", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [
          $asm07.TypeRef("System.Collections.ICollection"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhiteSpaceString", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LineCount", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNameIncludesAssembly", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.ServiceRoute */ 

(function ServiceRoute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm28.TypeRef("System.Web.Routing.Route"), 
      Name: "System.ServiceModel.Activation.ServiceRoute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm22.TypeRef("System.ServiceModel.Activation.ServiceHostFactoryBase"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckAndCreateRouteString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "LeftCurlyBracket", $.String, "{");

    $.Constant({Static:true , Public:false}, "RightCurlyBracket", $.String, "}");

    $.Constant({Static:true , Public:false}, "UnmatchedPathSegment", $.String, "{*pathInfo}");

    $.Constant({Static:true , Public:false}, "PathSeperator", $.Char, "/");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.ServiceRouteHandler */ 

(function ServiceRouteHandler$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.ServiceRouteHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm22.TypeRef("System.ServiceModel.Activation.ServiceHostFactoryBase"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddServiceInfo", 
      new JSIL.MethodSignature(null, [$.String, $asm23.TypeRef("System.ServiceModel.Activation.ServiceDeploymentInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHttpHandler", 
      new JSIL.MethodSignature($asm28.TypeRef("System.Web.IHttpHandler"), [$asm28.TypeRef("System.Web.Routing.RequestContext")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetServiceInfo", 
      new JSIL.MethodSignature($asm23.TypeRef("System.ServiceModel.Activation.ServiceDeploymentInfo"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsActiveAspNetRoute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MarkARouteAsInactive", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "MarkRouteAsActive", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "baseAddress", $.String);

    $.Field({Static:false, Public:false}, "handler", $asm28.TypeRef("System.Web.IHttpHandler"));

    $.Field({Static:false, Public:false}, "locker", $.Object);

    $.Field({Static:true , Public:false}, "routeServiceTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.ImplementInterfaces(
      /* 0 */ $asm28.TypeRef("System.Web.Routing.IRouteHandler")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.TcpHostedTransportConfiguration */ 

(function TcpHostedTransportConfiguration$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm23.TypeRef("System.ServiceModel.Activation.HostedTransportConfigurationBase"), 
      Name: "System.ServiceModel.Activation.TcpHostedTransportConfiguration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransportManager", 
      JSIL.MethodSignature.Return($asm22.TypeRef("System.ServiceModel.Channels.TcpTransportManager"))
    );

    $.Field({Static:false, Public:false}, "uniqueManager", $asm23.TypeRef("System.ServiceModel.Activation.HostedTcpTransportManager"));

    $.Property({Static:false, Public:false}, "TransportManager", $asm22.TypeRef("System.ServiceModel.Channels.TcpTransportManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.SR */ 

(function SR$Members () {
  var $, $thisType;



































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotResolveConstructorStringToWorkflowType", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExceptionLoadingSupportedVersion", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtendedProtectionPolicyEnforcementMismatch", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtendedProtectionPolicyScenarioMismatch", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BaseAddressesNotProvided", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotRunInPartialTrustOutsideAspNet", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultBusyCountSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExtendedProtectionNotSupported", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExtendedProtectionPolicyCustomChannelBindingMismatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_AuthSchemesRequireWindowsAuth", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_BuildProviderDirectiveNameMissing", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_BuildProviderMainAttributeMissing", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_ExtendedProtectionSPNListNotSubset", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_GetGlobalMemoryFailed", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_ImpersonationFailed", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_MaxRequestLengthExceeded", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_MemoryGatesCheckFailedUnderPartialTrust", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_MetabaseAccessError", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_RouteServiceRequiresCompatibilityMode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_ServiceCompatibilityNotAllowed", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_ServiceCompatibilityRequire", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_ServiceTypeNotProvided", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Hosting_UnrecognizedTokenCheckingValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PipeListenerProxyStopped", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RequestContextAborted", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ServiceTypeUnknown", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceCodeHttpChannelMessageReceiveFailed", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceCodeRequestContextAbort", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceCodeWebHostCompilation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceCodeWebHostDebugRequest", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceCodeWebHostNoCBTSupport", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceCodeWebHostProtocolMisconfigured", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceCodeWebHostServiceActivated", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceCodeWebHostServiceCloseFailed", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ValueMustBeNonNegative", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_WorkflowServiceHostFactoryConstructorStringNotProvided", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_AddressIsAbsoluteUri", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_AddressPointsOutsideTheVirtualDirectory", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_AuthSchemesRequireOtherAuth", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BadMetabaseSettingsIis7Type", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderAmbiguousType", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderAttributeEmpty", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderAttributeMissing", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderCouldNotCreateType", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderDirectiveEndBracketMissing", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderDirectiveMissing", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderDuplicateAttribute", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderDuplicateDirective", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderInvalidValueForBooleanAttribute", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderInvalidValueForNonNegativeIntegerAttribute", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderMutualExclusiveAttributes", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderRequiredAttributesMissing", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderUnknownAttribute", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_BuildProviderUnknownDirective", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_CompilationResultInvalid", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_CurlyBracketFoundInRoutePrefix", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_EnvironmentShuttingDown", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_ExtendedProtectionDotlessSpnNotEnabled", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_ExtendedProtectionFlagsNotSupport", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_ExtendedProtectionPoliciesMustMatch", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_ExtendedProtectionSpnFormatError", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_FactoryTypeNotResolved", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_InvalidHandlerForWorkflowService", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_IServiceHostNotImplemented", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_ListenerNotFoundForActivation", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_ListenerNotFoundForActivationInRecycling", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_MemoryGatesCheckFailed", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_MetabaseDataStringsTerminate", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_MetabaseDataTypeUnsupported", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_MetabaseSettingsIis7TypeNotFound", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_NoDefaultCtor", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_NonHTTPInCompatibilityMode", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_NoServiceAndFactorySpecifiedForFilelessService", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_NotLoggingInsufficientMemoryExceptionsOnActivationForNextTimeInterval", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_NotSupportedAuthScheme", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_NotSupportedProtocol", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_NoValidExtensionFoundForRegistedFilelessService", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_ProcessNotExecutingUnderHostedContext", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_ProtocolNoConfiguration", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_RelativeAddressExtensionNotSupportError", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_RelativeAddressFormatError", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_RelativeAddressHasBeenAdded", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_RouteHasAlreadyBeenAdded", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_ServiceCannotBeActivated", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_ServiceHostBaseIsNull", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_ServiceNotExist", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_ServiceTypeNotResolved", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_SharedEndpointRequiresRelativeEndpoint", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_SslSettingsMisconfigured", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hosting_TransportBindingNotFound", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCompiledString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PartialTrustNonHttpActivation", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNotActivity", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "XamlBuildProviderExtensionException", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.Field({Static:true , Public:false}, "resourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "ValueMustBeNonNegative", $.String);

    $.Property({Static:true , Public:false}, "RequestContextAborted", $.String);

    $.Property({Static:true , Public:false}, "PipeListenerProxyStopped", $.String);

    $.Property({Static:true , Public:false}, "Hosting_AuthSchemesRequireWindowsAuth", $.String);

    $.Property({Static:true , Public:false}, "Hosting_BuildProviderDirectiveNameMissing", $.String);

    $.Property({Static:true , Public:false}, "Hosting_BuildProviderMainAttributeMissing", $.String);

    $.Property({Static:true , Public:false}, "Hosting_UnrecognizedTokenCheckingValue", $.String);

    $.Property({Static:true , Public:false}, "Hosting_GetGlobalMemoryFailed", $.String);

    $.Property({Static:true , Public:false}, "Hosting_ImpersonationFailed", $.String);

    $.Property({Static:true , Public:false}, "Hosting_MemoryGatesCheckFailedUnderPartialTrust", $.String);

    $.Property({Static:true , Public:false}, "Hosting_MetabaseAccessError", $.String);

    $.Property({Static:true , Public:false}, "Hosting_ServiceCompatibilityNotAllowed", $.String);

    $.Property({Static:true , Public:false}, "Hosting_ServiceCompatibilityRequire", $.String);

    $.Property({Static:true , Public:false}, "Hosting_ServiceTypeNotProvided", $.String);

    $.Property({Static:true , Public:false}, "BaseAddressesNotProvided", $.String);

    $.Property({Static:true , Public:false}, "ExtendedProtectionNotSupported", $.String);

    $.Property({Static:true , Public:false}, "ExtendedProtectionPolicyCustomChannelBindingMismatch", $.String);

    $.Property({Static:true , Public:false}, "Hosting_ExtendedProtectionSPNListNotSubset", $.String);

    $.Property({Static:true , Public:false}, "Hosting_RouteServiceRequiresCompatibilityMode", $.String);

    $.Property({Static:true , Public:false}, "WorkflowServiceHostFactoryConstructorStringNotProvided", $.String);

    $.Property({Static:true , Public:false}, "TraceCodeWebHostDebugRequest", $.String);

    $.Property({Static:true , Public:false}, "TraceCodeWebHostProtocolMisconfigured", $.String);

    $.Property({Static:true , Public:false}, "TraceCodeWebHostCompilation", $.String);

    $.Property({Static:true , Public:false}, "TraceCodeWebHostServiceActivated", $.String);

    $.Property({Static:true , Public:false}, "TraceCodeWebHostServiceCloseFailed", $.String);

    $.Property({Static:true , Public:false}, "TraceCodeRequestContextAbort", $.String);

    $.Property({Static:true , Public:false}, "TraceCodeWebHostNoCBTSupport", $.String);

    $.Property({Static:true , Public:false}, "TraceCodeHttpChannelMessageReceiveFailed", $.String);

    $.Property({Static:true , Public:false}, "DefaultBusyCountSource", $.String);

    $.Property({Static:true , Public:false}, "ServiceTypeUnknown", $.String);

    $.Property({Static:true , Public:false}, "Hosting_MaxRequestLengthExceeded", $.String);

    $.Property({Static:true , Public:false}, "CannotRunInPartialTrustOutsideAspNet", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.TD */ 

(function TD$Members () {
  var $, $thisType;
































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.TD", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AspNetRoute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AspNetRouteIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "AspNetRoutingService", 
      new JSIL.MethodSignature(null, [$asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "AspNetRoutingServiceIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "CBAEntryRead", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CBAEntryReadIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "CBAMatchFound", 
      new JSIL.MethodSignature(null, [$asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CBAMatchFoundIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "CompilationStart", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CompilationStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "CompilationStop", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CompilationStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateEventDescriptors", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateServiceHostStart", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateServiceHostStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateServiceHostStop", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateServiceHostStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "DecrementBusyCount", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "DecrementBusyCountIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureEventDescriptors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "HostedTransportConfigurationManagerConfigInitStart", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "HostedTransportConfigurationManagerConfigInitStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "HostedTransportConfigurationManagerConfigInitStop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "HostedTransportConfigurationManagerConfigInitStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IdleServicesClosed", 
      new JSIL.MethodSignature(null, [
          $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IdleServicesClosedIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IncrementBusyCount", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "IncrementBusyCountIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEtwEventEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceActivationAvailableMemory", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceActivationAvailableMemoryIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceActivationException", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceActivationExceptionIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceActivationStart", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceActivationStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceActivationStop", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceActivationStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceHostFactoryCreationStart", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceHostFactoryCreationStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceHostFactoryCreationStop", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceHostFactoryCreationStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceHostStarted", 
      new JSIL.MethodSignature(null, [
          $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ServiceHostStartedIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WebHostRequestStart", 
      new JSIL.MethodSignature(null, [
          $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String, 
          $.String, $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WebHostRequestStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "WebHostRequestStop", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WebHostRequestStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.Int32, $.Int32, 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.UInt64, $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwTransferEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $asm07.TypeRef("System.Guid"), $.String, 
          $.String, $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteTraceSource", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $asm25.TypeRef("System.Runtime.TracePayload")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "XamlServicesLoadStart", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "XamlServicesLoadStartIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "XamlServicesLoadStop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "XamlServicesLoadStopIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "resourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:true , Public:false}, "eventDescriptors", $jsilcore.TypeRef("System.Array", [$asm25.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "syncLock", $.Object);

    $.Field({Static:true , Public:false}, "eventDescriptorsCreated", $asm07.TypeRef("System.Boolean"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.FxTrace */ 

(function FxTrace$Members () {
  var $, $thisType;























  JSIL.MakeStaticClass("System.ServiceModel.Activation.FxTrace", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EnsureEtwProviderInitialized", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EventLog", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.Diagnostics.EventLogger"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EventSourceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Exception", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.ExceptionTrace"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceCritical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceCriticalToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceErrorToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceInformation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceInformationToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceVerbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceVerboseToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceWarning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceWarningToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Trace", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TracingEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeTracing", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "IsEventEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEnabledEventsList", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "UpdateEventDefinitions", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm25.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $jsilcore.TypeRef("System.Array", [$.UInt16])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "baseEventSourceName", $.String, "System.ServiceModel.Activation");

    $.Constant({Static:true , Public:false}, "EventSourceVersion", $.String, "4.0.0.0");

    $.Field({Static:true , Public:false}, "etwProviderId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "eventSourceName", $.String);

    $.Field({Static:true , Public:false}, "exceptionTrace", $asm25.TypeRef("System.Runtime.ExceptionTrace"));

    $.Field({Static:true , Public:false}, "enabledEvents", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:true , Public:false}, "end2EndEvents", $asm0A.TypeRef("System.Collections.Generic.SortedSet`1", [$.UInt16]));

    $.Field({Static:true , Public:false}, "eventDescriptors", $jsilcore.TypeRef("System.Array", [$asm25.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "lockObject", $.Object);

    $.Field({Static:true , Public:false}, "tracingEnabled", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceVerbose", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceInformation", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceWarning", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceError", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceCritical", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceVerboseToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceInformationToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceWarningToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceErrorToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceCriticalToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "diagnosticTrace", $asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"));


    function FxTrace__cctor () {
      $thisType.etwProviderId = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      FxTrace__cctor
    );

    $.Property({Static:true , Public:true }, "ShouldTraceCritical", $.Boolean);

    $.Property({Static:true , Public:true }, "TracingEnabled", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceError", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceInformation", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceVerbose", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceWarning", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceCriticalToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceErrorToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceInformationToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceVerboseToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceWarningToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "Exception", $asm25.TypeRef("System.Runtime.ExceptionTrace"));

    $.Property({Static:true , Public:true }, "Trace", $asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"));

    $.Property({Static:true , Public:true }, "EventLog", $asm25.TypeRef("System.Runtime.Diagnostics.EventLogger"));

    $.Property({Static:true , Public:false}, "EventSourceName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.FxTrace+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Activation.FxTrace+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lInitializeTracing$gb__54_0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__54_0", $asm07.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("System.ServiceModel.Activation.Diagnostics");
/* class System.ServiceModel.Activation.Diagnostics.TraceUtility */ 

(function TraceUtility$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.ServiceModel.Activation.Diagnostics.TraceUtility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateSourceString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $.Object, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
          $.Object, $asm07.TypeRef("System.Exception")
        ])
    );

    $.Field({Static:true , Public:false}, "traceCodes", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Activation.Diagnostics.TraceCode */ 

(function TraceCode$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.ServiceModel.Activation.Diagnostics.TraceCode", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Activation", $.Int32, 589824);

    $.Constant({Static:true , Public:true }, "WebHostFailedToCompile", $.Int32, 589825);

    $.Constant({Static:true , Public:true }, "WebHostServiceActivated", $.Int32, 589826);

    $.Constant({Static:true , Public:true }, "WebHostFailedToActivateService", $.Int32, 589827);

    $.Constant({Static:true , Public:true }, "WebHostCompilation", $.Int32, 589828);

    $.Constant({Static:true , Public:true }, "WebHostDebugRequest", $.Int32, 589829);

    $.Constant({Static:true , Public:true }, "WebHostProtocolMisconfigured", $.Int32, 589830);

    $.Constant({Static:true , Public:true }, "WebHostServiceCloseFailed", $.Int32, 589831);

    $.Constant({Static:true , Public:true }, "WebHostNoCBTSupport", $.Int32, 589832);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.ServiceModel.Activation.Interop");
/* class System.ServiceModel.Activation.Interop.SafeCloseHandleCritical */ 

(function SafeCloseHandleCritical$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.ServiceModel.Activation.Interop.SafeCloseHandleCritical", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CloseHandle", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Constant({Static:true , Public:false}, "KERNEL32", $.String, "kernel32.dll");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm07.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.ServiceModel.Activation.Interop.SafeHGlobalHandleCritical */ 

(function SafeHGlobalHandleCritical$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.ServiceModel.Activation.Interop.SafeHGlobalHandleCritical", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:true }, "AllocHGlobal", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "AllocHGlobal", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "AllocHGlobal", 
      new JSIL.MethodSignature($.Type, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "AllocHGlobal", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:true , Public:true }, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm07.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.ServiceModel.Activation.Interop.SafeNativeMethods */ 

(function SafeNativeMethods$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.ServiceModel.Activation.Interop.SafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "GetCurrentThread", 
      JSIL.MethodSignature.Return($.IntPtr), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenCurrentThreadTokenCritical", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Security.Principal.TokenAccessLevels"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm23.TypeRef("System.ServiceModel.Activation.Interop.SafeCloseHandleCritical")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "OpenThreadTokenCritical", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $asm07.TypeRef("System.Security.Principal.TokenAccessLevels"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm23.TypeRef("System.ServiceModel.Activation.Interop.SafeCloseHandleCritical")])
        ]), 
      {
        Module: "advapi32.dll", 
        EntryPoint: "OpenThreadToken", 
      }
    );

    $.Constant({Static:true , Public:true }, "ERROR_NO_TOKEN", $.Int32, 1008);

    $.Constant({Static:true , Public:false}, "ADVAPI32", $.String, "advapi32.dll");

    $.Constant({Static:true , Public:false}, "KERNEL32", $.String, "kernel32.dll");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

JSIL.DeclareNamespace("System.ServiceModel.Activation.Configuration");
/* class System.ServiceModel.Activation.Configuration.AppSettings */ 

(function AppSettings$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.ServiceModel.Activation.Configuration.AppSettings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EnsureSettingsLoaded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UseClassicReadEntityMode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Constant({Static:true , Public:false}, "UseClassicReadEntityBodyModeString", $.String, "wcf:serviceHostingEnvironment:useClassicReadEntityBodyMode");

    $.Field({Static:true , Public:false}, "useClassicReadEntityBodyMode", $.Boolean, false);

    $.Field({Static:true , Public:false}, "settingsInitalized", $asm07.TypeRef("System.Boolean"), false);

    $.Field({Static:true , Public:false}, "appSettingsLock", $.Object);

    $.Property({Static:true , Public:false}, "UseClassicReadEntityMode", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

