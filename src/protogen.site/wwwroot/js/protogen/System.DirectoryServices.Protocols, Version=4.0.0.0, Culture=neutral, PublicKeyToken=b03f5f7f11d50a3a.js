/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm16 = JSIL.DeclareAssembly("System.DirectoryServices.Protocols, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

JSIL.DeclareNamespace("System");
/* class System.ExternDll */ 

(function ExternDll$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.ExternDll", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Activeds", $.String, "activeds.dll");

    $.Constant({Static:true , Public:true }, "Advapi32", $.String, "advapi32.dll");

    $.Constant({Static:true , Public:true }, "Comctl32", $.String, "comctl32.dll");

    $.Constant({Static:true , Public:true }, "Comdlg32", $.String, "comdlg32.dll");

    $.Constant({Static:true , Public:true }, "Gdi32", $.String, "gdi32.dll");

    $.Constant({Static:true , Public:true }, "Gdiplus", $.String, "gdiplus.dll");

    $.Constant({Static:true , Public:true }, "Hhctrl", $.String, "hhctrl.ocx");

    $.Constant({Static:true , Public:true }, "Imm32", $.String, "imm32.dll");

    $.Constant({Static:true , Public:true }, "Kernel32", $.String, "kernel32.dll");

    $.Constant({Static:true , Public:true }, "Loadperf", $.String, "Loadperf.dll");

    $.Constant({Static:true , Public:true }, "Mscoree", $.String, "mscoree.dll");

    $.Constant({Static:true , Public:true }, "Clr", $.String, "clr.dll");

    $.Constant({Static:true , Public:true }, "Msi", $.String, "msi.dll");

    $.Constant({Static:true , Public:true }, "Mqrt", $.String, "mqrt.dll");

    $.Constant({Static:true , Public:true }, "Ntdll", $.String, "ntdll.dll");

    $.Constant({Static:true , Public:true }, "Ole32", $.String, "ole32.dll");

    $.Constant({Static:true , Public:true }, "Oleacc", $.String, "oleacc.dll");

    $.Constant({Static:true , Public:true }, "Oleaut32", $.String, "oleaut32.dll");

    $.Constant({Static:true , Public:true }, "Olepro32", $.String, "olepro32.dll");

    $.Constant({Static:true , Public:true }, "PerfCounter", $.String, "perfcounter.dll");

    $.Constant({Static:true , Public:true }, "Powrprof", $.String, "Powrprof.dll");

    $.Constant({Static:true , Public:true }, "Psapi", $.String, "psapi.dll");

    $.Constant({Static:true , Public:true }, "Shell32", $.String, "shell32.dll");

    $.Constant({Static:true , Public:true }, "User32", $.String, "user32.dll");

    $.Constant({Static:true , Public:true }, "Uxtheme", $.String, "uxtheme.dll");

    $.Constant({Static:true , Public:true }, "WinMM", $.String, "winmm.dll");

    $.Constant({Static:true , Public:true }, "Winspool", $.String, "winspool.drv");

    $.Constant({Static:true , Public:true }, "Wtsapi32", $.String, "wtsapi32.dll");

    $.Constant({Static:true , Public:true }, "Version", $.String, "version.dll");

    $.Constant({Static:true , Public:true }, "Vsassert", $.String, "vsassert.dll");

    $.Constant({Static:true , Public:true }, "Fxassert", $.String, "Fxassert.dll");

    $.Constant({Static:true , Public:true }, "Shlwapi", $.String, "shlwapi.dll");

    $.Constant({Static:true , Public:true }, "Crypt32", $.String, "crypt32.dll");

    $.Constant({Static:true , Public:true }, "ShCore", $.String, "SHCore.dll");

    $.Constant({Static:true , Public:false}, "Odbc32", $.String, "odbc32.dll");

    $.Constant({Static:true , Public:false}, "SNI", $.String, "System.Data.dll");

    $.Constant({Static:true , Public:false}, "OciDll", $.String, "oci.dll");

    $.Constant({Static:true , Public:false}, "OraMtsDll", $.String, "oramts.dll");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.DirectoryServices");
JSIL.DeclareNamespace("System.DirectoryServices.Protocols");
/* enum System.DirectoryServices.Protocols.AuthType */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.AuthType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Anonymous: 0, 
    Basic: 1, 
    Negotiate: 2, 
    Ntlm: 3, 
    Digest: 4, 
    Sicily: 5, 
    Dpa: 6, 
    Msn: 7, 
    External: 8, 
    Kerberos: 9, 
  }
);

/* enum System.DirectoryServices.Protocols.PartialResultProcessing */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.PartialResultProcessing", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    NoPartialResultSupport: 0, 
    ReturnPartialResults: 1, 
    ReturnPartialResultsAndNotifyCallback: 2, 
  }
);

/* class System.DirectoryServices.Protocols.BerConverter */ 

(function BerConverter$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.BerConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Decode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecodingByteArrayHelper", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm16.TypeRef("System.DirectoryServices.Protocols.BerSafeHandle"), $.Char, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecodingMultiByteArrayHelper", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])]), [
          $asm16.TypeRef("System.DirectoryServices.Protocols.BerSafeHandle"), $.Char, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Encode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "value", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "EncodingByteArrayHelper", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.BerSafeHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Char
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodingMultiByteArrayHelper", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.BerSafeHandle"), $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])]), 
          $.Char
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryDecode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.Protocols.DereferenceAlias */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.DereferenceAlias", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Never: 0, 
    InSearching: 1, 
    FindingBaseObject: 2, 
    Always: 3, 
  }
);

/* class System.DirectoryServices.Protocols.DirectoryAttribute */ 

(function DirectoryAttribute$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.DirectoryServices.Protocols.DirectoryAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "values", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValues", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToXmlNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToXmlNodeCommon", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.Field({Static:false, Public:false}, "attributeName", $.String);

    $.Field({Static:false, Public:false}, "isSearchResult", $.Boolean);

    $.Field({Static:true , Public:false}, "utf8EncoderWithErrorDetection", $asm07.TypeRef("System.Text.UTF8Encoding"));

    $.Field({Static:true , Public:false}, "encoder", $asm07.TypeRef("System.Text.UTF8Encoding"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.Protocols.DirectoryAttributeModification */ 

(function DirectoryAttributeModification$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute"), 
      Name: "System.DirectoryServices.Protocols.DirectoryAttributeModification", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operation", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeOperation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Operation", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeOperation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToXmlNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.Field({Static:false, Public:false}, "attributeOperation", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeOperation"));

    $.Property({Static:false, Public:true }, "Operation", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeOperation"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.SearchResultAttributeCollection */ 

(function SearchResultAttributeCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.DictionaryBase"), 
      Name: "System.DirectoryServices.Protocols.SearchResultAttributeCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeNames", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ICollection"))
    );

    $.Property({Static:false, Public:true }, "Item", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute"));

    $.Property({Static:false, Public:true }, "AttributeNames", $asm07.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true }, "Values", $asm07.TypeRef("System.Collections.ICollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.Protocols.DirectoryAttributeCollection */ 

(function DirectoryAttributeCollection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.DirectoryServices.Protocols.DirectoryAttributeCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection */ 

(function DirectoryAttributeModificationCollection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModification")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModification")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModification")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModification")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModification"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModification")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModification")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModification"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModification")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModification"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.Protocols.DirectoryAttributeOperation */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.DirectoryAttributeOperation", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Add: 0, 
    Delete: 1, 
    Replace: 2, 
  }
);

/* class System.DirectoryServices.Protocols.DirectoryConnection */ 

(function DirectoryConnection$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.DirectoryConnection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClientCertificates", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Directory", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Timeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCredential", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.NetworkCredential"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SendRequest", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credential", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.NetworkCredential"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.Field({Static:false, Public:false}, "directoryCredential", $asm0A.TypeRef("System.Net.NetworkCredential"));

    $.Field({Static:false, Public:false}, "certificatesCollection", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"));

    $.Field({Static:false, Public:false}, "connectionTimeOut", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "directoryIdentifier", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryIdentifier"));

    $.Property({Static:false, Public:true , Virtual:true }, "Directory", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryIdentifier"));

    $.Property({Static:false, Public:true }, "ClientCertificates", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509CertificateCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Timeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true , Virtual:true }, "Credential", $asm0A.TypeRef("System.Net.NetworkCredential"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.Protocols.ExtendedDNFlag */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.ExtendedDNFlag", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    HexString: 0, 
    StandardString: 1, 
  }
);

/* enum System.DirectoryServices.Protocols.SecurityMasks */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.SecurityMasks", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Owner: 1, 
    Group: 2, 
    Dacl: 4, 
    Sacl: 8, 
  }
);

/* enum System.DirectoryServices.Protocols.DirectorySynchronizationOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.DirectorySynchronizationOptions", 
    BaseType: $asm07.TypeRef("System.Int64"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    ObjectSecurity: 1, 
    ParentsFirst: 2048, 
    PublicDataOnly: 8192, 
    IncrementalValues: 2147483648, 
  }
);

/* enum System.DirectoryServices.Protocols.SearchOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.SearchOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    DomainScope: 1, 
    PhantomRoot: 2, 
  }
);

/* class System.DirectoryServices.Protocols.UtilityHandle */ 

(function UtilityHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.UtilityHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "GetHandle", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"))
    );

    $.Field({Static:true , Public:false}, "handle", $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.SortKey */ 

(function SortKey$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.SortKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MatchingRule", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReverseOrder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttributeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MatchingRule", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReverseOrder", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "rule", $.String);

    $.Field({Static:false, Public:false}, "order", $.Boolean);

    $.Property({Static:false, Public:true }, "AttributeName", $.String);

    $.Property({Static:false, Public:true }, "MatchingRule", $.String);

    $.Property({Static:false, Public:true }, "ReverseOrder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DirectoryControl */ 

(function DirectoryControl$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.DirectoryControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCritical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServerSide", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsCritical", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServerSide", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToXmlNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TransformControls", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Type]))
    );

    $.Field({Static:false, Public:false}, "directoryControlValue", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "directoryControlType", $.String);

    $.Field({Static:false, Public:false}, "directoryControlCriticality", $.Boolean);

    $.Field({Static:false, Public:false}, "directoryControlServerSide", $.Boolean);

    $.Property({Static:false, Public:true }, "Type", $.String);

    $.Property({Static:false, Public:true }, "IsCritical", $.Boolean);

    $.Property({Static:false, Public:true }, "ServerSide", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.AsqRequestControl */ 

(function AsqRequestControl$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.AsqRequestControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttributeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "AttributeName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.AsqResponseControl */ 

(function AsqResponseControl$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.AsqResponseControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"))
    );

    $.Field({Static:false, Public:false}, "result", $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"));

    $.Property({Static:false, Public:true }, "Result", $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.CrossDomainMoveControl */ 

(function CrossDomainMoveControl$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.CrossDomainMoveControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetDomainController", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetDomainController", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "dcName", $.String);

    $.Property({Static:false, Public:true }, "TargetDomainController", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DomainScopeControl */ 

(function DomainScopeControl$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.DomainScopeControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ExtendedDNControl */ 

(function ExtendedDNControl$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.ExtendedDNControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.ExtendedDNFlag"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Flag", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.ExtendedDNFlag"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Flag", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.ExtendedDNFlag"))
    );

    $.Field({Static:false, Public:false}, "format", $asm16.TypeRef("System.DirectoryServices.Protocols.ExtendedDNFlag"));

    $.Property({Static:false, Public:true }, "Flag", $asm16.TypeRef("System.DirectoryServices.Protocols.ExtendedDNFlag"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.LazyCommitControl */ 

(function LazyCommitControl$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.LazyCommitControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DirectoryNotificationControl */ 

(function DirectoryNotificationControl$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.DirectoryNotificationControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.PermissiveModifyControl */ 

(function PermissiveModifyControl$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.PermissiveModifyControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.SecurityDescriptorFlagControl */ 

(function SecurityDescriptorFlagControl$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.SecurityDescriptorFlagControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.SecurityMasks"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityMasks", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.SecurityMasks"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityMasks", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.SecurityMasks"))
    );

    $.Field({Static:false, Public:false}, "flag", $asm16.TypeRef("System.DirectoryServices.Protocols.SecurityMasks"));

    $.Property({Static:false, Public:true }, "SecurityMasks", $asm16.TypeRef("System.DirectoryServices.Protocols.SecurityMasks"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.SearchOptionsControl */ 

(function SearchOptionsControl$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.SearchOptionsControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.SearchOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SearchOption", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.SearchOption"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SearchOption", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.SearchOption"))
    );

    $.Field({Static:false, Public:false}, "flag", $asm16.TypeRef("System.DirectoryServices.Protocols.SearchOption"));

    $.Property({Static:false, Public:true }, "SearchOption", $asm16.TypeRef("System.DirectoryServices.Protocols.SearchOption"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ShowDeletedControl */ 

(function ShowDeletedControl$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.ShowDeletedControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.TreeDeleteControl */ 

(function TreeDeleteControl$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.TreeDeleteControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.VerifyNameControl */ 

(function VerifyNameControl$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.VerifyNameControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Flag", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Flag", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServerName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "flag", $.Int32);

    $.Property({Static:false, Public:true }, "ServerName", $.String);

    $.Property({Static:false, Public:true }, "Flag", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DirSyncRequestControl */ 

(function DirSyncRequestControl$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.DirSyncRequestControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm16.TypeRef("System.DirectoryServices.Protocols.DirectorySynchronizationOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm16.TypeRef("System.DirectoryServices.Protocols.DirectorySynchronizationOptions"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Cookie", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Option", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DirectorySynchronizationOptions"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttributeCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Cookie", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Option", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DirectorySynchronizationOptions"))
    );

    $.Field({Static:false, Public:false}, "dirsyncCookie", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "flag", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectorySynchronizationOptions"));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Property({Static:false, Public:true }, "Cookie", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Option", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectorySynchronizationOptions"));

    $.Property({Static:false, Public:true }, "AttributeCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DirSyncResponseControl */ 

(function DirSyncResponseControl$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.DirSyncResponseControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean, 
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Cookie", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MoreData", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResultSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "dirsyncCookie", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "moreResult", $.Boolean);

    $.Field({Static:false, Public:false}, "size", $.Int32);

    $.Property({Static:false, Public:true }, "Cookie", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "MoreData", $.Boolean);

    $.Property({Static:false, Public:true }, "ResultSize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.PageResultRequestControl */ 

(function PageResultRequestControl$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.PageResultRequestControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Cookie", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PageSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Cookie", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PageSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "size", $.Int32);

    $.Field({Static:false, Public:false}, "pageCookie", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "PageSize", $.Int32);

    $.Property({Static:false, Public:true }, "Cookie", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.PageResultResponseControl */ 

(function PageResultResponseControl$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.PageResultResponseControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Cookie", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TotalCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "pageCookie", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Property({Static:false, Public:true }, "Cookie", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "TotalCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.SortRequestControl */ 

(function SortRequestControl$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.SortRequestControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.SortKey")]))
    )
      .Parameter(0, "sortKeys", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SortKeys", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.SortKey")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SortKeys", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.SortKey")]))
    );

    $.Field({Static:false, Public:false}, "keys", $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.SortKey")]));

    $.Property({Static:false, Public:true }, "SortKeys", $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.SortKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.SortResponseControl */ 

(function SortResponseControl$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.SortResponseControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"), $.String, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"))
    );

    $.Field({Static:false, Public:false}, "result", $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "Result", $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"));

    $.Property({Static:false, Public:true }, "AttributeName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.VlvRequestControl */ 

(function VlvRequestControl$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.VlvRequestControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AfterCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BeforeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextId", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EstimateCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Offset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AfterCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BeforeCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContextId", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EstimateCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Offset", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Target", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:false}, "before", $.Int32);

    $.Field({Static:false, Public:false}, "after", $.Int32);

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "estimateCount", $.Int32);

    $.Field({Static:false, Public:false}, "target", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "context", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "BeforeCount", $.Int32);

    $.Property({Static:false, Public:true }, "AfterCount", $.Int32);

    $.Property({Static:false, Public:true }, "Offset", $.Int32);

    $.Property({Static:false, Public:true }, "EstimateCount", $.Int32);

    $.Property({Static:false, Public:true }, "Target", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "ContextId", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.VlvResponseControl */ 

(function VlvResponseControl$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.VlvResponseControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"), 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextId", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "context", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "result", $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"));

    $.Property({Static:false, Public:true }, "TargetPosition", $.Int32);

    $.Property({Static:false, Public:true }, "ContentCount", $.Int32);

    $.Property({Static:false, Public:true }, "ContextId", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Result", $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.QuotaControl */ 

(function QuotaControl$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), 
      Name: "System.DirectoryServices.Protocols.QuotaControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Principal.SecurityIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QuerySid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.SecurityIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_QuerySid", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Principal.SecurityIdentifier"))
    );

    $.Field({Static:false, Public:false}, "sid", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "QuerySid", $asm07.TypeRef("System.Security.Principal.SecurityIdentifier"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DirectoryControlCollection */ 

(function DirectoryControlCollection$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.DirectoryServices.Protocols.DirectoryControlCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnValidate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.Protocols.DirectoryException */ 

(function DirectoryException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.DirectoryServices.Protocols.DirectoryException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DirectoryOperationException */ 

(function DirectoryOperationException$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryException"), 
      Name: "System.DirectoryServices.Protocols.DirectoryOperationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Response", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "response", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"));

    $.Property({Static:false, Public:true }, "Response", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.BerConversionException */ 

(function BerConversionException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryException"), 
      Name: "System.DirectoryServices.Protocols.BerConversionException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DirectoryIdentifier */ 

(function DirectoryIdentifier$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.DirectoryIdentifier", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DirectoryOperation */ 

(function DirectoryOperation$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.DirectoryOperation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "directoryRequestID", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DirectoryRequest */ 

(function DirectoryRequest$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryOperation"), 
      Name: "System.DirectoryServices.Protocols.DirectoryRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRequestElement", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [
          $asm2F.TypeRef("System.Xml.XmlDocument"), $.String, 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Controls", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControlCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToXmlNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToXmlNodeHelper", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.Field({Static:false, Public:false}, "directoryControlCollection", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControlCollection"));

    $.Property({Static:false, Public:true }, "RequestId", $.String);

    $.Property({Static:false, Public:true }, "Controls", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControlCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DeleteRequest */ 

(function DeleteRequest$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"), 
      Name: "System.DirectoryServices.Protocols.DeleteRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DistinguishedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DistinguishedName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToXmlNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.Field({Static:false, Public:false}, "dn", $.String);

    $.Property({Static:false, Public:true }, "DistinguishedName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.AddRequest */ 

(function AddRequest$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"), 
      Name: "System.DirectoryServices.Protocols.AddRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute")])])
    )
      .Parameter(1, "attributes", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DistinguishedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DistinguishedName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToXmlNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.Field({Static:false, Public:false}, "dn", $.String);

    $.Field({Static:false, Public:false}, "attributeList", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeCollection"));

    $.Property({Static:false, Public:true }, "DistinguishedName", $.String);

    $.Property({Static:false, Public:true }, "Attributes", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ModifyRequest */ 

(function ModifyRequest$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"), 
      Name: "System.DirectoryServices.Protocols.ModifyRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModification")])])
    )
      .Parameter(1, "modifications", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeOperation"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(3, "values", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "get_DistinguishedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Modifications", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DistinguishedName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToXmlNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.Field({Static:false, Public:false}, "dn", $.String);

    $.Field({Static:false, Public:false}, "attributeModificationList", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection"));

    $.Property({Static:false, Public:true }, "DistinguishedName", $.String);

    $.Property({Static:false, Public:true }, "Modifications", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttributeModificationCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.CompareRequest */ 

(function CompareRequest$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"), 
      Name: "System.DirectoryServices.Protocols.CompareRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0A.TypeRef("System.Uri")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareRequestHelper", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assertion", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DistinguishedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DistinguishedName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToXmlNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.Field({Static:false, Public:false}, "dn", $.String);

    $.Field({Static:false, Public:false}, "attribute", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute"));

    $.Property({Static:false, Public:true }, "DistinguishedName", $.String);

    $.Property({Static:false, Public:true }, "Assertion", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ModifyDNRequest */ 

(function ModifyDNRequest$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"), 
      Name: "System.DirectoryServices.Protocols.ModifyDNRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeleteOldRdn", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DistinguishedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewParentDistinguishedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DeleteOldRdn", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DistinguishedName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewParentDistinguishedName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToXmlNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.Field({Static:false, Public:false}, "dn", $.String);

    $.Field({Static:false, Public:false}, "newSuperior", $.String);

    $.Field({Static:false, Public:false}, "newRDN", $.String);

    $.Field({Static:false, Public:false}, "deleteOldRDN", $.Boolean);

    $.Property({Static:false, Public:true }, "DistinguishedName", $.String);

    $.Property({Static:false, Public:true }, "NewParentDistinguishedName", $.String);

    $.Property({Static:false, Public:true }, "NewName", $.String);

    $.Property({Static:false, Public:true }, "DeleteOldRdn", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ExtendedRequest */ 

(function ExtendedRequest$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"), 
      Name: "System.DirectoryServices.Protocols.ExtendedRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestValue", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToXmlNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.Field({Static:false, Public:false}, "requestName", $.String);

    $.Field({Static:false, Public:false}, "requestValue", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "RequestName", $.String);

    $.Property({Static:false, Public:true }, "RequestValue", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.SearchRequest */ 

(function SearchRequest$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"), 
      Name: "System.DirectoryServices.Protocols.SearchRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlDocument"), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.SearchScope"), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(3, "attributeList", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm16.TypeRef("System.DirectoryServices.Protocols.SearchScope"), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(3, "attributeList", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "CopyFilter", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm2F.TypeRef("System.Xml.XmlTextWriter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyXmlTree", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm2F.TypeRef("System.Xml.XmlTextWriter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Aliases", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DereferenceAlias"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DistinguishedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Scope", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.SearchScope"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SizeLimit", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TimeLimit", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypesOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Aliases", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DereferenceAlias"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DistinguishedName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Filter", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Scope", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.SearchScope"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SizeLimit", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TimeLimit", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypesOnly", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToXmlNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.Field({Static:false, Public:false}, "dn", $.String);

    $.Field({Static:false, Public:false}, "directoryAttributes", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Field({Static:false, Public:false}, "directoryFilter", $.Object);

    $.Field({Static:false, Public:false}, "directoryScope", $asm16.TypeRef("System.DirectoryServices.Protocols.SearchScope"));

    $.Field({Static:false, Public:false}, "directoryRefAlias", $asm16.TypeRef("System.DirectoryServices.Protocols.DereferenceAlias"));

    $.Field({Static:false, Public:false}, "directorySizeLimit", $.Int32);

    $.Field({Static:false, Public:false}, "directoryTimeLimit", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "directoryTypesOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "DistinguishedName", $.String);

    $.Property({Static:false, Public:true }, "Attributes", $asm0A.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Property({Static:false, Public:true }, "Filter", $.Object);

    $.Property({Static:false, Public:true }, "Scope", $asm16.TypeRef("System.DirectoryServices.Protocols.SearchScope"));

    $.Property({Static:false, Public:true }, "Aliases", $asm16.TypeRef("System.DirectoryServices.Protocols.DereferenceAlias"));

    $.Property({Static:false, Public:true }, "SizeLimit", $.Int32);

    $.Property({Static:false, Public:true }, "TimeLimit", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "TypesOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DsmlAuthRequest */ 

(function DsmlAuthRequest$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"), 
      Name: "System.DirectoryServices.Protocols.DsmlAuthRequest", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Principal", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Principal", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ToXmlNode", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlDocument")])
    );

    $.Field({Static:false, Public:false}, "directoryPrincipal", $.String);

    $.Property({Static:false, Public:true }, "Principal", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DirectoryResponse */ 

(function DirectoryResponse$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryOperation"), 
      Name: "System.DirectoryServices.Protocols.DirectoryResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ControlsHelper", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ErrorMessageHelper", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Controls", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ErrorMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MatchedDN", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Referral", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ResultCode", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchedDNHelper", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReferralHelper", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResultCodeHelper", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"), [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "dsmlNode", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "dsmlNS", $asm2F.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "dsmlRequest", $.Boolean);

    $.Field({Static:false, Public:false}, "dn", $.String);

    $.Field({Static:false, Public:false}, "directoryControls", $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]));

    $.Field({Static:false, Public:false}, "result", $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"));

    $.Field({Static:false, Public:false}, "directoryMessage", $.String);

    $.Field({Static:false, Public:false}, "directoryReferral", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]));

    $.Field({Static:false, Public:false}, "requestID", $.String);

    $.Property({Static:false, Public:true }, "RequestId", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "MatchedDN", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Controls", $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ResultCode", $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ErrorMessage", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Referral", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DeleteResponse */ 

(function DeleteResponse$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), 
      Name: "System.DirectoryServices.Protocols.DeleteResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.AddResponse */ 

(function AddResponse$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), 
      Name: "System.DirectoryServices.Protocols.AddResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ModifyResponse */ 

(function ModifyResponse$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), 
      Name: "System.DirectoryServices.Protocols.ModifyResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ModifyDNResponse */ 

(function ModifyDNResponse$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), 
      Name: "System.DirectoryServices.Protocols.ModifyDNResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.CompareResponse */ 

(function CompareResponse$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), 
      Name: "System.DirectoryServices.Protocols.CompareResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ExtendedResponse */ 

(function ExtendedResponse$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), 
      Name: "System.DirectoryServices.Protocols.ExtendedResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResponseName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResponseValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "ResponseName", $.String);

    $.Property({Static:false, Public:true }, "ResponseValue", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.SearchResponse */ 

(function SearchResponse$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), 
      Name: "System.DirectoryServices.Protocols.SearchResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EntryHelper", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultEntryCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Controls", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Entries", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultEntryCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ErrorMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MatchedDN", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_References", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultReferenceCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Referral", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ResultCode", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReferenceHelper", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultReferenceCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetEntries", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultEntryCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetReferences", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultReferenceCollection"))
    );

    $.Field({Static:false, Public:false}, "referenceCollection", $asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultReferenceCollection"));

    $.Field({Static:false, Public:false}, "entryCollection", $asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultEntryCollection"));

    $.Field({Static:false, Public:false}, "searchDone", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "MatchedDN", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Controls", $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ResultCode", $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ErrorMessage", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Referral", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]));

    $.Property({Static:false, Public:true }, "References", $asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultReferenceCollection"));

    $.Property({Static:false, Public:true }, "Entries", $asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultEntryCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DsmlErrorResponse */ 

(function DsmlErrorResponse$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), 
      Name: "System.DirectoryServices.Protocols.DsmlErrorResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Controls", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Detail", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ErrorMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MatchedDN", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Referral", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ResultCode", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.ErrorResponseCategory"))
    );

    $.Field({Static:false, Public:false}, "message", $.String);

    $.Field({Static:false, Public:false}, "detail", $.String);

    $.Field({Static:false, Public:false}, "category", $asm16.TypeRef("System.DirectoryServices.Protocols.ErrorResponseCategory"));

    $.Property({Static:false, Public:true }, "Message", $.String);

    $.Property({Static:false, Public:true }, "Detail", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm16.TypeRef("System.DirectoryServices.Protocols.ErrorResponseCategory"));

    $.Property({Static:false, Public:true , Virtual:true }, "MatchedDN", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Controls", $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ResultCode", $asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ErrorMessage", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Referral", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DsmlAuthResponse */ 

(function DsmlAuthResponse$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), 
      Name: "System.DirectoryServices.Protocols.DsmlAuthResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.PartialResultsCollection */ 

(function PartialResultsCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.Protocols.PartialResultsCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.Protocols.ReferralChasingOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.ReferralChasingOptions", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Subordinate: 32, 
    External: 64, 
    All: 96, 
  }
);

/* enum System.DirectoryServices.Protocols.ResultCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.ResultCode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Success: 0, 
    OperationsError: 1, 
    ProtocolError: 2, 
    TimeLimitExceeded: 3, 
    SizeLimitExceeded: 4, 
    CompareFalse: 5, 
    CompareTrue: 6, 
    AuthMethodNotSupported: 7, 
    StrongAuthRequired: 8, 
    ReferralV2: 9, 
    Referral: 10, 
    AdminLimitExceeded: 11, 
    UnavailableCriticalExtension: 12, 
    ConfidentialityRequired: 13, 
    SaslBindInProgress: 14, 
    NoSuchAttribute: 16, 
    UndefinedAttributeType: 17, 
    InappropriateMatching: 18, 
    ConstraintViolation: 19, 
    AttributeOrValueExists: 20, 
    InvalidAttributeSyntax: 21, 
    NoSuchObject: 32, 
    AliasProblem: 33, 
    InvalidDNSyntax: 34, 
    AliasDereferencingProblem: 36, 
    InappropriateAuthentication: 48, 
    InsufficientAccessRights: 50, 
    Busy: 51, 
    Unavailable: 52, 
    UnwillingToPerform: 53, 
    LoopDetect: 54, 
    SortControlMissing: 60, 
    OffsetRangeError: 61, 
    NamingViolation: 64, 
    ObjectClassViolation: 65, 
    NotAllowedOnNonLeaf: 66, 
    NotAllowedOnRdn: 67, 
    EntryAlreadyExists: 68, 
    ObjectClassModificationsProhibited: 69, 
    ResultsTooLarge: 70, 
    AffectsMultipleDsas: 71, 
    VirtualListViewError: 76, 
    Other: 80, 
  }
);

/* class System.DirectoryServices.Protocols.OperationErrorMappings */ 

(function OperationErrorMappings$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.OperationErrorMappings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "MapResultCode", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.Field({Static:true , Public:false}, "ResultCodeHash", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.Protocols.LdapOperation */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.LdapOperation", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LdapAdd: 0, 
    LdapModify: 1, 
    LdapSearch: 2, 
    LdapDelete: 3, 
    LdapModifyDn: 4, 
    LdapCompare: 5, 
    LdapExtendedRequest: 6, 
  }
);

/* class System.DirectoryServices.Protocols.SearchResultReference */ 

(function SearchResultReference$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.SearchResultReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ControlsHelper", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Controls", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reference", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "UriHelper", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]))
    );

    $.Field({Static:false, Public:false}, "dsmlNode", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "dsmlNS", $asm2F.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "dsmlRequest", $.Boolean);

    $.Field({Static:false, Public:false}, "resultReferences", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]));

    $.Field({Static:false, Public:false}, "resultControls", $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]));

    $.Property({Static:false, Public:true }, "Reference", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")]));

    $.Property({Static:false, Public:true }, "Controls", $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.SearchResultReferenceCollection */ 

(function SearchResultReferenceCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.Protocols.SearchResultReferenceCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultReference")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultReference")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultReference")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultReference"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultReference")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultReference"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.Protocols.SearchResultEntry */ 

(function SearchResultEntry$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.SearchResultEntry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultAttributeCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AttributesHelper", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultAttributeCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ControlsHelper", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "DNHelper", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultAttributeCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Controls", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DistinguishedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "dsmlNode", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "dsmlNS", $asm2F.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "dsmlRequest", $.Boolean);

    $.Field({Static:false, Public:false}, "distinguishedName", $.String);

    $.Field({Static:false, Public:false}, "attributes", $asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultAttributeCollection"));

    $.Field({Static:false, Public:false}, "resultControls", $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]));

    $.Property({Static:false, Public:true }, "DistinguishedName", $.String);

    $.Property({Static:false, Public:true }, "Attributes", $asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultAttributeCollection"));

    $.Property({Static:false, Public:true }, "Controls", $jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.SearchResultEntryCollection */ 

(function SearchResultEntryCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ReadOnlyCollectionBase"), 
      Name: "System.DirectoryServices.Protocols.SearchResultEntryCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultEntry")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultEntry")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultEntry")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultEntry"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultEntry")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultEntry"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.Protocols.SearchScope */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.SearchScope", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Base: 0, 
    OneLevel: 1, 
    Subtree: 2, 
  }
);

/* class System.DirectoryServices.Protocols.ADFilter */ 

(function ADFilter$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.ADFilter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Type", $asm16.TypeRef("System.DirectoryServices.Protocols.ADFilter+FilterType"));

    $.Field({Static:false, Public:true }, "Filter", $asm16.TypeRef("System.DirectoryServices.Protocols.ADFilter+FilterContent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.Protocols.ADFilter+FilterType */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.ADFilter+FilterType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    And: 0, 
    Or: 1, 
    Not: 2, 
    EqualityMatch: 3, 
    Substrings: 4, 
    GreaterOrEqual: 5, 
    LessOrEqual: 6, 
    Present: 7, 
    ApproxMatch: 8, 
    ExtensibleMatch: 9, 
  }
);

/* struct System.DirectoryServices.Protocols.ADFilter+FilterContent */ 

(function FilterContent$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Protocols.ADFilter+FilterContent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "And", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:true }, "Or", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:true }, "Not", $asm16.TypeRef("System.DirectoryServices.Protocols.ADFilter"));

    $.Field({Static:false, Public:true }, "EqualityMatch", $asm16.TypeRef("System.DirectoryServices.Protocols.ADAttribute"));

    $.Field({Static:false, Public:true }, "Substrings", $asm16.TypeRef("System.DirectoryServices.Protocols.ADSubstringFilter"));

    $.Field({Static:false, Public:true }, "GreaterOrEqual", $asm16.TypeRef("System.DirectoryServices.Protocols.ADAttribute"));

    $.Field({Static:false, Public:true }, "LessOrEqual", $asm16.TypeRef("System.DirectoryServices.Protocols.ADAttribute"));

    $.Field({Static:false, Public:true }, "Present", $.String);

    $.Field({Static:false, Public:true }, "ApproxMatch", $asm16.TypeRef("System.DirectoryServices.Protocols.ADAttribute"));

    $.Field({Static:false, Public:true }, "ExtensibleMatch", $asm16.TypeRef("System.DirectoryServices.Protocols.ADExtenMatchFilter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ADExtenMatchFilter */ 

(function ADExtenMatchFilter$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.ADExtenMatchFilter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Name", $.String);

    $.Field({Static:false, Public:true }, "Value", $asm16.TypeRef("System.DirectoryServices.Protocols.ADValue"));

    $.Field({Static:false, Public:true }, "DNAttributes", $.Boolean);

    $.Field({Static:false, Public:true }, "MatchingRule", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ADSubstringFilter */ 

(function ADSubstringFilter$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.ADSubstringFilter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Name", $.String);

    $.Field({Static:false, Public:true }, "Initial", $asm16.TypeRef("System.DirectoryServices.Protocols.ADValue"));

    $.Field({Static:false, Public:true }, "Final", $asm16.TypeRef("System.DirectoryServices.Protocols.ADValue"));

    $.Field({Static:false, Public:true }, "Any", $asm07.TypeRef("System.Collections.ArrayList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ADAttribute */ 

(function ADAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.ADAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:true }, "Name", $.String);

    $.Field({Static:false, Public:true }, "Values", $asm07.TypeRef("System.Collections.ArrayList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ADValue */ 

(function ADValue$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.ADValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "IsBinary", $.Boolean);

    $.Field({Static:false, Public:true }, "StringVal", $.String);

    $.Field({Static:false, Public:true }, "BinaryVal", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DsmlAsyncResult */ 

(function DsmlAsyncResult$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.DsmlAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_AsyncState", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.IAsyncResult"), "get_AsyncState");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.WaitHandle"))
    )
      .Overrides($asm07.TypeRef("System.IAsyncResult"), "get_AsyncWaitHandle");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_CompletedSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.IAsyncResult"), "get_CompletedSynchronously");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.IAsyncResult"), "get_IsCompleted");

    $.Field({Static:false, Public:false}, "asyncWaitHandle", $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlAsyncResult+DsmlAsyncWaitHandle"));

    $.Field({Static:false, Public:false}, "callback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "completed", $.Boolean);

    $.Field({Static:false, Public:false}, "completedSynchronously", $.Boolean);

    $.Field({Static:false, Public:false}, "manualResetEvent", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "stateObject", $.Object);

    $.Field({Static:false, Public:false}, "resultObject", $asm16.TypeRef("System.DirectoryServices.Protocols.RequestState"));

    $.Field({Static:false, Public:false}, "hasValidRequest", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.AsyncState", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.AsyncWaitHandle", $asm07.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.CompletedSynchronously", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.IsCompleted", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IAsyncResult")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DsmlAsyncResult+DsmlAsyncWaitHandle */ 

(function DsmlAsyncWaitHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Threading.WaitHandle"), 
      Name: "System.DirectoryServices.Protocols.DsmlAsyncResult+DsmlAsyncWaitHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.RequestState */ 

(function RequestState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.RequestState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:true }, "bufferSize", $.Int32, 1024);

    $.Field({Static:false, Public:true }, "responseString", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:true }, "requestString", $.String);

    $.Field({Static:false, Public:true }, "request", $asm0A.TypeRef("System.Net.HttpWebRequest"));

    $.Field({Static:false, Public:true }, "requestStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:true }, "responseStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:true }, "bufferRead", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "encoder", $asm07.TypeRef("System.Text.UTF8Encoding"));

    $.Field({Static:false, Public:true }, "dsmlAsync", $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlAsyncResult"));

    $.Field({Static:false, Public:false}, "abortCalled", $.Boolean);

    $.Field({Static:false, Public:false}, "exception", $asm07.TypeRef("System.Exception"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DsmlConstants */ 

(function DsmlConstants$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.DsmlConstants", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:true }, "DsmlUri", $.String, "urn:oasis:names:tc:DSML:2:0:core");

    $.Constant({Static:true , Public:true }, "XsiUri", $.String, "http://www.w3.org/2001/XMLSchema-instance");

    $.Constant({Static:true , Public:true }, "XsdUri", $.String, "http://www.w3.org/2001/XMLSchema");

    $.Constant({Static:true , Public:true }, "SoapUri", $.String, "http://schemas.xmlsoap.org/soap/envelope/");

    $.Constant({Static:true , Public:true }, "ADSessionUri", $.String, "urn:schema-microsoft-com:activedirectory:dsmlv2");

    $.Constant({Static:true , Public:true }, "DefaultSearchFilter", $.String, "<present name='objectClass' xmlns=\"urn:oasis:names:tc:DSML:2:0:core\"/>");

    $.Constant({Static:true , Public:true }, "HttpPostMethod", $.String, "POST");

    $.Constant({Static:true , Public:true }, "SOAPEnvelopeBegin", $.String, "<se:Envelope xmlns:se=\"http://schemas.xmlsoap.org/soap/envelope/\">");

    $.Constant({Static:true , Public:true }, "SOAPEnvelopeEnd", $.String, "</se:Envelope>");

    $.Constant({Static:true , Public:true }, "SOAPBodyBegin", $.String, "<se:Body xmlns=\"urn:oasis:names:tc:DSML:2:0:core\">");

    $.Constant({Static:true , Public:true }, "SOAPBodyEnd", $.String, "</se:Body>");

    $.Constant({Static:true , Public:true }, "SOAPHeaderBegin", $.String, "<se:Header>");

    $.Constant({Static:true , Public:true }, "SOAPHeaderEnd", $.String, "</se:Header>");

    $.Constant({Static:true , Public:true }, "SOAPSession1", $.String, "<ad:Session xmlns:ad=\"urn:schema-microsoft-com:activedirectory:dsmlv2\" ad:SessionID=\"");

    $.Constant({Static:true , Public:true }, "SOAPSession2", $.String, "\" se:mustUnderstand=\"1\"/>");

    $.Constant({Static:true , Public:true }, "SOAPBeginSession", $.String, "<ad:BeginSession xmlns:ad=\"urn:schema-microsoft-com:activedirectory:dsmlv2\" se:mustUnderstand=\"1\"/>");

    $.Constant({Static:true , Public:true }, "SOAPEndSession1", $.String, "<ad:EndSession xmlns:ad=\"urn:schema-microsoft-com:activedirectory:dsmlv2\" ad:SessionID=\"");

    $.Constant({Static:true , Public:true }, "SOAPEndSession2", $.String, "\" se:mustUnderstand=\"1\"/>");

    $.Constant({Static:true , Public:true }, "DsmlErrorResponse", $.String, "errorResponse");

    $.Constant({Static:true , Public:true }, "DsmlSearchResponse", $.String, "searchResponse");

    $.Constant({Static:true , Public:true }, "DsmlModifyResponse", $.String, "modifyResponse");

    $.Constant({Static:true , Public:true }, "DsmlAddResponse", $.String, "addResponse");

    $.Constant({Static:true , Public:true }, "DsmlDelResponse", $.String, "delResponse");

    $.Constant({Static:true , Public:true }, "DsmlModDNResponse", $.String, "modDNResponse");

    $.Constant({Static:true , Public:true }, "DsmlCompareResponse", $.String, "compareResponse");

    $.Constant({Static:true , Public:true }, "DsmlExtendedResponse", $.String, "extendedResponse");

    $.Constant({Static:true , Public:true }, "DsmlAuthResponse", $.String, "authResponse");

    $.Constant({Static:true , Public:true }, "AttrTypePrefixedName", $.String, "xsi:type");

    $.Constant({Static:true , Public:true }, "AttrBinaryTypePrefixedValue", $.String, "xsd:base64Binary");

    $.Constant({Static:true , Public:true }, "AttrDsmlAttrName", $.String, "name");

    $.Constant({Static:true , Public:true }, "ElementDsmlAttrValue", $.String, "value");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilter", $.String, "filter");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterAnd", $.String, "and");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterOr", $.String, "or");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterNot", $.String, "not");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterSubstr", $.String, "substrings");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterEqual", $.String, "equalityMatch");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterGrteq", $.String, "greaterOrEqual");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterLesseq", $.String, "lessOrEqual");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterApprox", $.String, "approxMatch");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterPresent", $.String, "present");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterExtenmatch", $.String, "extensibleMatch");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterExtenmatchValue", $.String, "value");

    $.Constant({Static:true , Public:true }, "AttrSearchReqFilterPresentName", $.String, "name");

    $.Constant({Static:true , Public:true }, "AttrSearchReqFilterExtenmatchName", $.String, "name");

    $.Constant({Static:true , Public:true }, "AttrSearchReqFilterExtenmatchMatchrule", $.String, "matchingRule");

    $.Constant({Static:true , Public:true }, "AttrSearchReqFilterExtenmatchDnattr", $.String, "dnAttributes");

    $.Constant({Static:true , Public:true }, "AttrSearchReqFilterSubstrName", $.String, "name");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterSubstrInit", $.String, "initial");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterSubstrAny", $.String, "any");

    $.Constant({Static:true , Public:true }, "ElementSearchReqFilterSubstrFinal", $.String, "final");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DsmlDirectoryIdentifier */ 

(function DsmlDirectoryIdentifier$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryIdentifier"), 
      Name: "System.DirectoryServices.Protocols.DsmlDirectoryIdentifier", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServerUri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:false}, "uri", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "ServerUri", $asm0A.TypeRef("System.Uri"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DsmlDocument */ 

(function DsmlDocument$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.DsmlDocument", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlDocument"))
    );

    $.Field({Static:false, Public:false}, "dsmlRequestID", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DsmlRequestDocument */ 

(function DsmlRequestDocument$Members () {
  var $, $thisType;











































  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlDocument"), 
      Name: "System.DirectoryServices.Protocols.DsmlRequestDocument", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DocumentProcessing", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DsmlDocumentProcessing"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorProcessing", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DsmlErrorProcessing"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResponseOrder", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DsmlResponseOrder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DocumentProcessing", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DsmlDocumentProcessing"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ErrorProcessing", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DsmlErrorProcessing"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResponseOrder", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DsmlResponseOrder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StartBatchRequest", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsFixedSize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "RemoveAt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "set_Item");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlDocument"))
    );

    $.Field({Static:false, Public:false}, "docProcessing", $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlDocumentProcessing"));

    $.Field({Static:false, Public:false}, "resOrder", $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlResponseOrder"));

    $.Field({Static:false, Public:false}, "errProcessing", $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlErrorProcessing"));

    $.Field({Static:false, Public:false}, "dsmlRequests", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "DocumentProcessing", $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlDocumentProcessing"));

    $.Property({Static:false, Public:true }, "ResponseOrder", $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlResponseOrder"));

    $.Property({Static:false, Public:true }, "ErrorProcessing", $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlErrorProcessing"));

    $.Property({Static:false, Public:true }, "RequestId", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false}, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false}, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IList"), 
      /* 1 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.DirectoryServices.Protocols.DsmlResponseDocument */ 

(function DsmlResponseDocument$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlDocument"), 
      Name: "System.DirectoryServices.Protocols.DsmlResponseDocument", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.HttpWebResponse"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructElement", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsErrorResponse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsOperationError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlDocument"))
    );

    $.Field({Static:false, Public:false}, "dsmlResponse", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "dsmlDocument", $asm2F.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "dsmlBatchResponse", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Field({Static:false, Public:false}, "dsmlNS", $asm2F.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:true }, "IsErrorResponse", $.Boolean);

    $.Property({Static:false, Public:true }, "IsOperationError", $.Boolean);

    $.Property({Static:false, Public:true }, "RequestId", $.String);

    $.Property({Static:false, Public:false}, "ResponseString", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false}, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false}, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.DirectoryServices.Protocols.DsmlDocumentProcessing */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.DsmlDocumentProcessing", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Sequential: 0, 
    Parallel: 1, 
  }
);

/* enum System.DirectoryServices.Protocols.DsmlResponseOrder */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.DsmlResponseOrder", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Sequential: 0, 
    Unordered: 1, 
  }
);

/* enum System.DirectoryServices.Protocols.DsmlErrorProcessing */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.DsmlErrorProcessing", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Resume: 0, 
    Exit: 1, 
  }
);

/* enum System.DirectoryServices.Protocols.ErrorResponseCategory */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.ErrorResponseCategory", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    NotAttempted: 0, 
    CouldNotConnect: 1, 
    ConnectionClosed: 2, 
    MalformedRequest: 3, 
    GatewayInternalError: 4, 
    AuthenticationFailed: 5, 
    UnresolvableUri: 6, 
    Other: 7, 
  }
);

/* class System.DirectoryServices.Protocols.DsmlInvalidDocumentException */ 

(function DsmlInvalidDocumentException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryException"), 
      Name: "System.DirectoryServices.Protocols.DsmlInvalidDocumentException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ErrorResponseException */ 

(function ErrorResponseException$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryException"), 
      Name: "System.DirectoryServices.Protocols.ErrorResponseException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DsmlErrorResponse"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm16.TypeRef("System.DirectoryServices.Protocols.DsmlErrorResponse"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlErrorResponse"), $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Response", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DsmlErrorResponse"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "errorResponse", $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlErrorResponse"));

    $.Property({Static:false, Public:true }, "Response", $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlErrorResponse"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DSMLFilterWriter */ 

(function DSMLFilterWriter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.DSMLFilterWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttrib", 
      new JSIL.MethodSignature(null, [
          $.String, $asm16.TypeRef("System.DirectoryServices.Protocols.ADAttribute"), 
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteFilter", 
      new JSIL.MethodSignature(null, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ADFilter"), $.Boolean, 
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      new JSIL.MethodSignature(null, [
          $.String, $asm16.TypeRef("System.DirectoryServices.Protocols.ADValue"), 
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DsmlSoapConnection */ 

(function DsmlSoapConnection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryConnection"), 
      Name: "System.DirectoryServices.Protocols.DsmlSoapConnection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginSession", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndSession", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SessionId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapRequestHeader", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapRequestHeader", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNode"))
    );

    $.Field({Static:false, Public:false}, "soapHeaders", $asm2F.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "SessionId", $.String);

    $.Property({Static:false, Public:true }, "SoapRequestHeader", $asm2F.TypeRef("System.Xml.XmlNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.DsmlSoapHttpConnection */ 

(function DsmlSoapHttpConnection$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlSoapConnection"), 
      Name: "System.DirectoryServices.Protocols.DsmlSoapHttpConnection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DsmlDirectoryIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm16.TypeRef("System.DirectoryServices.Protocols.DsmlDirectoryIdentifier"), $asm0A.TypeRef("System.Net.NetworkCredential")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlDirectoryIdentifier"), $asm0A.TypeRef("System.Net.NetworkCredential"), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.AuthType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Abort", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendRequest", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm16.TypeRef("System.DirectoryServices.Protocols.DsmlRequestDocument"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginSession", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginSOAPRequest", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Text.StringBuilder")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "EndSendRequest", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DsmlResponseDocument"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndSession", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndSOAPRequest", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Text.StringBuilder")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExtractSessionID", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Net.HttpWebResponse")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthType", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.AuthType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResponseString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SessionId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapActionHeader", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Timeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWebRequestStreamWriter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.StreamWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareHttpWebRequest", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.HttpWebRequest"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RequestStreamCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ResponseCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SendRequest", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendRequest", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DsmlResponseDocument"), [$asm16.TypeRef("System.DirectoryServices.Protocols.DsmlRequestDocument")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendRequestHelper", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DsmlResponseDocument"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AuthType", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.AuthType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapActionHeader", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WakeupRoutine", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.RequestState"))
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.Field({Static:false, Public:false}, "dsmlHttpConnection", $asm0A.TypeRef("System.Net.HttpWebRequest"));

    $.Field({Static:false, Public:false}, "dsmlSoapAction", $.String);

    $.Field({Static:false, Public:false}, "dsmlAuthType", $asm16.TypeRef("System.DirectoryServices.Protocols.AuthType"));

    $.Field({Static:false, Public:false}, "dsmlSessionID", $.String);

    $.Field({Static:false, Public:false}, "httpConnectionTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "debugResponse", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Timeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "SoapActionHeader", $.String);

    $.Property({Static:false, Public:true }, "AuthType", $asm16.TypeRef("System.DirectoryServices.Protocols.AuthType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SessionId", $.String);

    $.Property({Static:false, Public:false}, "ResponseString", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.FilterParser */ 

(function FilterParser$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.FilterParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseFilterString", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.ADFilter"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringFilterValueToADValue", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.ADValue"), [$.String])
    );

    $.Constant({Static:true , Public:false}, "mFilterTimeOutInSeconds", $.UInt32, 3);

    $.Field({Static:true , Public:false}, "mFilter", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Constant({Static:true , Public:false}, "mAttrRE", $.String, "(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*");

    $.Constant({Static:true , Public:false}, "mValueRE", $.String, "(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?");

    $.Constant({Static:true , Public:false}, "mExtenAttrRE", $.String, "(?<extenattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\s*");

    $.Constant({Static:true , Public:false}, "mExtenValueRE", $.String, "(?<extenvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?)\\s*");

    $.Constant({Static:true , Public:false}, "mDNAttrRE", $.String, "(?<dnattr>\\:dn){0,1}\\s*");

    $.Constant({Static:true , Public:false}, "mMatchRuleOptionalRE", $.String, "(\\:(?<matchrule>([a-zA-Z][a-zA-Z0-9]*)|([0-9]+(\\.[0-9]+)+))){0,1}\\s*");

    $.Constant({Static:true , Public:false}, "mMatchRuleRE", $.String, "(\\:(?<matchrule>([a-zA-Z][a-zA-Z0-9]*)|([0-9]+(\\.[0-9]+)+)))\\s*");

    $.Constant({Static:true , Public:false}, "mExtenRE", $.String, "(?<extensible>(((?<extenattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\s*(?<dnattr>\\:dn){0,1}\\s*(\\:(?<matchrule>([a-zA-Z][a-zA-Z0-9]*)|([0-9]+(\\.[0-9]+)+))){0,1}\\s*)|((?<dnattr>\\:dn){0,1}\\s*(\\:(?<matchrule>([a-zA-Z][a-zA-Z0-9]*)|([0-9]+(\\.[0-9]+)+)))\\s*))\\:\\=\\s*(?<extenvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?)\\s*)\\s*");

    $.Constant({Static:true , Public:false}, "mSubstrAttrRE", $.String, "(?<substrattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\s*");

    $.Constant({Static:true , Public:false}, "mInitialRE", $.String, "\\s*(?<initialvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?){0,1}\\s*");

    $.Constant({Static:true , Public:false}, "mFinalRE", $.String, "\\s*(?<finalvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?){0,1}\\s*");

    $.Constant({Static:true , Public:false}, "mAnyRE", $.String, "(\\*\\s*((?<anyvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?)\\*\\s*)*)");

    $.Constant({Static:true , Public:false}, "mSubstrRE", $.String, "(?<substr>(?<substrattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\s*\\=\\s*\\s*(?<initialvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?){0,1}\\s*(\\*\\s*((?<anyvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?)\\*\\s*)*)\\s*(?<finalvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?){0,1}\\s*)\\s*");

    $.Constant({Static:true , Public:false}, "mSimpleValueRE", $.String, "(?<simplevalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?)\\s*");

    $.Constant({Static:true , Public:false}, "mSimpleAttrRE", $.String, "(?<simpleattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\s*");

    $.Constant({Static:true , Public:false}, "mFiltertypeRE", $.String, "(?<filtertype>\\=|\\~\\=|\\>\\=|\\<\\=)\\s*");

    $.Constant({Static:true , Public:false}, "mSimpleRE", $.String, "(?<simple>(?<simpleattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\s*(?<filtertype>\\=|\\~\\=|\\>\\=|\\<\\=)\\s*(?<simplevalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?)\\s*)\\s*");

    $.Constant({Static:true , Public:false}, "mPresentRE", $.String, "(?<present>(?<presentattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\=\\*)\\s*");

    $.Constant({Static:true , Public:false}, "mItemRE", $.String, "(?<item>(?<simple>(?<simpleattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\s*(?<filtertype>\\=|\\~\\=|\\>\\=|\\<\\=)\\s*(?<simplevalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?)\\s*)\\s*|(?<present>(?<presentattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\=\\*)\\s*|(?<substr>(?<substrattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\s*\\=\\s*\\s*(?<initialvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?){0,1}\\s*(\\*\\s*((?<anyvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?)\\*\\s*)*)\\s*(?<finalvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?){0,1}\\s*)\\s*|(?<extensible>(((?<extenattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\s*(?<dnattr>\\:dn){0,1}\\s*(\\:(?<matchrule>([a-zA-Z][a-zA-Z0-9]*)|([0-9]+(\\.[0-9]+)+))){0,1}\\s*)|((?<dnattr>\\:dn){0,1}\\s*(\\:(?<matchrule>([a-zA-Z][a-zA-Z0-9]*)|([0-9]+(\\.[0-9]+)+)))\\s*))\\:\\=\\s*(?<extenvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?)\\s*)\\s*)\\s*");

    $.Constant({Static:true , Public:false}, "mFiltercompRE", $.String, "(?<filtercomp>\\!|\\&|\\|)\\s*");

    $.Constant({Static:true , Public:false}, "mFilterlistRE", $.String, "(?<filterlist>.+)\\s*");

    $.Constant({Static:true , Public:false}, "mFilterRE", $.String, "^\\s*\\(\\s*(((?<filtercomp>\\!|\\&|\\|)\\s*(?<filterlist>.+)\\s*)|((?<item>(?<simple>(?<simpleattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\s*(?<filtertype>\\=|\\~\\=|\\>\\=|\\<\\=)\\s*(?<simplevalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?)\\s*)\\s*|(?<present>(?<presentattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\=\\*)\\s*|(?<substr>(?<substrattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\s*\\=\\s*\\s*(?<initialvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?){0,1}\\s*(\\*\\s*((?<anyvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?)\\*\\s*)*)\\s*(?<finalvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?){0,1}\\s*)\\s*|(?<extensible>(((?<extenattr>(([0-2](\\.[0-9]+)+)|([a-zA-Z]+([a-zA-Z0-9]|[-])*))(;([a-zA-Z0-9]|[-])+)*)\\s*(?<dnattr>\\:dn){0,1}\\s*(\\:(?<matchrule>([a-zA-Z][a-zA-Z0-9]*)|([0-9]+(\\.[0-9]+)+))){0,1}\\s*)|((?<dnattr>\\:dn){0,1}\\s*(\\:(?<matchrule>([a-zA-Z][a-zA-Z0-9]*)|([0-9]+(\\.[0-9]+)+)))\\s*))\\:\\=\\s*(?<extenvalue>(([^\\*\\(\\)\\\\])|(\\\\[a-fA-F0-9][a-fA-F0-9]))+?)\\s*)\\s*)\\s*))\\)\\s*$");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.NamespaceUtils */ 

(function NamespaceUtils$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.NamespaceUtils", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDsmlNamespaceManager", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.Field({Static:true , Public:false}, "xmlNamespace", $asm2F.TypeRef("System.Xml.XmlNamespaceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.Utility */ 

(function Utility$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.Utility", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AllocHGlobalIntPtrArray", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckOSVersion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsWin2k3AboveOS", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsWin2kOS", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLdapError", 
      new JSIL.MethodSignature($.Boolean, [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapError")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsResultCode", 
      new JSIL.MethodSignature($.Boolean, [$asm16.TypeRef("System.DirectoryServices.Protocols.ResultCode")])
    );

    $.Field({Static:true , Public:false}, "platformSupported", $.Boolean, true);

    $.Field({Static:true , Public:false}, "isWin2kOS", $.Boolean, true);

    $.Field({Static:true , Public:false}, "isWin2k3Above", $.Boolean, true);

    $.Property({Static:true , Public:false}, "IsWin2kOS", $.Boolean);

    $.Property({Static:true , Public:false}, "IsWin2k3AboveOS", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.LdapAsyncResult */ 

(function LdapAsyncResult$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.LdapAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.AsyncCallback"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_AsyncState", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.IAsyncResult"), "get_AsyncState");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.WaitHandle"))
    )
      .Overrides($asm07.TypeRef("System.IAsyncResult"), "get_AsyncWaitHandle");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_CompletedSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.IAsyncResult"), "get_CompletedSynchronously");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.IAsyncResult"), "get_IsCompleted");

    $.Field({Static:false, Public:false}, "asyncWaitHandle", $asm16.TypeRef("System.DirectoryServices.Protocols.LdapAsyncResult+LdapAsyncWaitHandle"));

    $.Field({Static:false, Public:false}, "callback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "completed", $.Boolean);

    $.Field({Static:false, Public:false}, "completedSynchronously", $.Boolean);

    $.Field({Static:false, Public:false}, "manualResetEvent", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "stateObject", $.Object);

    $.Field({Static:false, Public:false}, "resultObject", $asm16.TypeRef("System.DirectoryServices.Protocols.LdapRequestState"));

    $.Field({Static:false, Public:false}, "partialResults", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.AsyncState", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.AsyncWaitHandle", $asm07.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.CompletedSynchronously", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.IsCompleted", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IAsyncResult")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.LdapAsyncResult+LdapAsyncWaitHandle */ 

(function LdapAsyncWaitHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Threading.WaitHandle"), 
      Name: "System.DirectoryServices.Protocols.LdapAsyncResult+LdapAsyncWaitHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.LdapRequestState */ 

(function LdapRequestState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.LdapRequestState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "response", $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"));

    $.Field({Static:false, Public:false}, "ldapAsync", $asm16.TypeRef("System.DirectoryServices.Protocols.LdapAsyncResult"));

    $.Field({Static:false, Public:false}, "exception", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "abortCalled", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.Protocols.ResultsStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.ResultsStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PartialResult: 0, 
    CompleteResult: 1, 
    Done: 2, 
  }
);

/* class System.DirectoryServices.Protocols.LdapPartialAsyncResult */ 

(function LdapPartialAsyncResult$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.LdapAsyncResult"), 
      Name: "System.DirectoryServices.Protocols.LdapPartialAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object, $.Boolean, 
          $asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"), $.Boolean, 
          $asm07.TypeRef("System.TimeSpan")
        ])
    );

    $.Field({Static:false, Public:false}, "con", $asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"));

    $.Field({Static:false, Public:false}, "messageID", $.Int32);

    $.Field({Static:false, Public:false}, "partialCallback", $.Boolean);

    $.Field({Static:false, Public:false}, "resultStatus", $asm16.TypeRef("System.DirectoryServices.Protocols.ResultsStatus"));

    $.Field({Static:false, Public:false}, "requestTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "response", $asm16.TypeRef("System.DirectoryServices.Protocols.SearchResponse"));

    $.Field({Static:false, Public:false}, "exception", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "startTime", $asm07.TypeRef("System.DateTime"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.DirectoryServices.Protocols.GetLdapResponseCallback */ 

JSIL.MakeDelegate("System.DirectoryServices.Protocols.GetLdapResponseCallback", false, [], 
  new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), [
      $asm07.TypeRef("System.Int32"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapOperation"), 
      $asm16.TypeRef("System.DirectoryServices.Protocols.ResultAll"), $asm07.TypeRef("System.TimeSpan"), 
      $asm07.TypeRef("System.Boolean")
    ]));

/* delegate System.DirectoryServices.Protocols.QUERYCLIENTCERT */ 

JSIL.MakeDelegate("System.DirectoryServices.Protocols.QUERYCLIENTCERT", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])
    ]));

/* class System.DirectoryServices.Protocols.LdapConnection */ 

(function LdapConnection$Members () {
  var $, $thisType;












































  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryConnection"), 
      Name: "System.DirectoryServices.Protocols.LdapConnection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.LdapDirectoryIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapDirectoryIdentifier"), $asm0A.TypeRef("System.Net.NetworkCredential")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.LdapDirectoryIdentifier"), $asm0A.TypeRef("System.Net.NetworkCredential"), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.AuthType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.LdapDirectoryIdentifier"), $asm0A.TypeRef("System.Net.NetworkCredential"), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.AuthType"), $.IntPtr
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Abort", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendRequest", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"), $asm16.TypeRef("System.DirectoryServices.Protocols.PartialResultProcessing"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginSendRequest", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"), $asm07.TypeRef("System.TimeSpan"), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.PartialResultProcessing"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Bind", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Bind", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.NetworkCredential"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BindHelper", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.NetworkCredential"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapMod")]), [$asm07.TypeRef("System.Collections.CollectionBase"), $asm07.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildControlArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapControl")]), [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControlCollection"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Connect", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructAttribute", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryAttribute"), [$.IntPtr, $.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructControl", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl"), [$.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructEntry", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultEntry"), [$.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructException", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryException"), [$.Int32, $asm16.TypeRef("System.DirectoryServices.Protocols.LdapOperation")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructParsedResult", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Uri")])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControl")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructReference", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.SearchResultReference"), [$.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructResponse", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), [
          $.Int32, $asm16.TypeRef("System.DirectoryServices.Protocols.LdapOperation"), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.ResultAll"), $asm07.TypeRef("System.TimeSpan"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "EndSendRequest", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true }, "get_AuthType", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.AuthType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AutoBind", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NeedDispose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SessionOptions", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.LdapSessionOptions"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Timeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPartialResults", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.PartialResultsCollection"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessClientCertificate", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResponseCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SameCredential", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Net.NetworkCredential"), $asm0A.TypeRef("System.Net.NetworkCredential")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SendRequest", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SendRequest", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"), $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendRequestHelper", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryRequest"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AuthType", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.AuthType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AutoBind", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credential", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.NetworkCredential"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NeedDispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.Constant({Static:true , Public:false}, "LDAP_MOD_BVALUES", $.Int32, 128);

    $.Field({Static:false, Public:false}, "connectionAuthType", $asm16.TypeRef("System.DirectoryServices.Protocols.AuthType"));

    $.Field({Static:false, Public:false}, "options", $asm16.TypeRef("System.DirectoryServices.Protocols.LdapSessionOptions"));

    $.Field({Static:false, Public:false}, "ldapHandle", $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "bounded", $.Boolean);

    $.Field({Static:false, Public:false}, "needRebind", $.Boolean);

    $.Field({Static:true , Public:false}, "handleTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "objectLock", $.Object);

    $.Field({Static:false, Public:false}, "fd", $asm16.TypeRef("System.DirectoryServices.Protocols.GetLdapResponseCallback"));

    $.Field({Static:true , Public:false}, "asyncResultTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "partialResultsProcessor", $asm16.TypeRef("System.DirectoryServices.Protocols.LdapPartialResultsProcessor"));

    $.Field({Static:true , Public:false}, "waitHandle", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:true , Public:false}, "retriever", $asm16.TypeRef("System.DirectoryServices.Protocols.PartialResultsRetriever"));

    $.Field({Static:false, Public:false}, "setFQDNDone", $.Boolean);

    $.Field({Static:false, Public:false}, "automaticBind", $.Boolean);

    $.Field({Static:false, Public:false}, "needDispose", $.Boolean);

    $.Field({Static:false, Public:false}, "connected", $.Boolean);

    $.Field({Static:false, Public:false}, "clientCertificateRoutine", $asm16.TypeRef("System.DirectoryServices.Protocols.QUERYCLIENTCERT"));

    $.Property({Static:false, Public:true , Virtual:true }, "Timeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "AuthType", $asm16.TypeRef("System.DirectoryServices.Protocols.AuthType"));

    $.Property({Static:false, Public:true }, "SessionOptions", $asm16.TypeRef("System.DirectoryServices.Protocols.LdapSessionOptions"));

    $.Property({Static:false, Public:true , Virtual:true }, "Credential", $asm0A.TypeRef("System.Net.NetworkCredential"));

    $.Property({Static:false, Public:true }, "AutoBind", $.Boolean);

    $.Property({Static:false, Public:false}, "NeedDispose", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.Protocols.LdapConnection+LdapResult */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.LdapConnection+LdapResult", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LDAP_RES_SEARCH_ENTRY: 100, 
    LDAP_RES_SEARCH_RESULT: 101, 
    LDAP_RES_MODIFY: 103, 
    LDAP_RES_ADD: 105, 
    LDAP_RES_DELETE: 107, 
    LDAP_RES_MODRDN: 109, 
    LDAP_RES_COMPARE: 111, 
    LDAP_RES_REFERRAL: 115, 
    LDAP_RES_EXTENDED: 120, 
  }
);

/* class System.DirectoryServices.Protocols.LdapDirectoryIdentifier */ 

(function LdapDirectoryIdentifier$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryIdentifier"), 
      Name: "System.DirectoryServices.Protocols.LdapDirectoryIdentifier", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.String]), $.Int32, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connectionless", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FullyQualifiedDnsHostName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PortNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Servers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.Field({Static:false, Public:false}, "servers", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "fullyQualifiedDnsHostName", $.Boolean);

    $.Field({Static:false, Public:false}, "connectionless", $.Boolean);

    $.Field({Static:false, Public:false}, "portNumber", $.Int32);

    $.Property({Static:false, Public:true }, "Servers", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "Connectionless", $.Boolean);

    $.Property({Static:false, Public:true }, "FullyQualifiedDnsHostName", $.Boolean);

    $.Property({Static:false, Public:true }, "PortNumber", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.Protocols.LdapError */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.LdapError", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    IsLeaf: 35, 
    InvalidCredentials: 49, 
    ServerDown: 81, 
    LocalError: 82, 
    EncodingError: 83, 
    DecodingError: 84, 
    TimeOut: 85, 
    AuthUnknown: 86, 
    FilterError: 87, 
    UserCancelled: 88, 
    ParameterError: 89, 
    NoMemory: 90, 
    ConnectError: 91, 
    NotSupported: 92, 
    ControlNotFound: 93, 
    NoResultsReturned: 94, 
    MoreResults: 95, 
    ClientLoop: 96, 
    ReferralLimitExceeded: 97, 
    SendTimeOut: 112, 
  }
);

/* class System.DirectoryServices.Protocols.LdapErrorMappings */ 

(function LdapErrorMappings$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.LdapErrorMappings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "MapResultCode", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.Field({Static:true , Public:false}, "ResultCodeHash", $asm07.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.LdapException */ 

(function LdapException$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryException"), 
      Name: "System.DirectoryServices.Protocols.LdapException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PartialResults", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.PartialResultsCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServerErrorMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "errorCode", $.Int32);

    $.Field({Static:false, Public:false}, "serverErrorMessage", $.String);

    $.Field({Static:false, Public:false}, "results", $asm16.TypeRef("System.DirectoryServices.Protocols.PartialResultsCollection"));

    $.Property({Static:false, Public:true }, "ErrorCode", $.Int32);

    $.Property({Static:false, Public:true }, "ServerErrorMessage", $.String);

    $.Property({Static:false, Public:true }, "PartialResults", $asm16.TypeRef("System.DirectoryServices.Protocols.PartialResultsCollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.TlsOperationException */ 

(function TlsOperationException$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryOperationException"), 
      Name: "System.DirectoryServices.Protocols.TlsOperationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ErrorChecking */ 

(function ErrorChecking$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.ErrorChecking", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckAndSetLdapError", 
      JSIL.MethodSignature.Action($.Int32)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.LdapPartialResultsProcessor */ 

(function LdapPartialResultsProcessor$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.LdapPartialResultsProcessor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.ManualResetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.LdapPartialAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddResult", 
      new JSIL.MethodSignature(null, [$asm16.TypeRef("System.DirectoryServices.Protocols.SearchResponse"), $asm16.TypeRef("System.DirectoryServices.Protocols.SearchResponse")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCompleteResult", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryResponse"), [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapPartialAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPartialResults", 
      new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.PartialResultsCollection"), [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapPartialAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResultsHelper", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.LdapPartialAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "NeedCompleteResult", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.LdapPartialAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.LdapPartialAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RetrievingSearchResults", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "resultList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "workThreadWaitHandle", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "workToDo", $.Boolean);

    $.Field({Static:false, Public:false}, "currentIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.PartialResultsRetriever */ 

(function PartialResultsRetriever$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.PartialResultsRetriever", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Threading.ManualResetEvent"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapPartialResultsProcessor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThreadRoutine", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "workThreadWaitHandle", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "oThread", $asm07.TypeRef("System.Threading.Thread"));

    $.Field({Static:false, Public:false}, "processor", $asm16.TypeRef("System.DirectoryServices.Protocols.LdapPartialResultsProcessor"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.DirectoryServices.Protocols.QueryForConnectionCallback */ 

JSIL.MakeDelegate("System.DirectoryServices.Protocols.QueryForConnectionCallback", true, [], 
  new JSIL.MethodSignature($asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"), [
      $asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"), 
      $asm07.TypeRef("System.String"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapDirectoryIdentifier"), 
      $asm0A.TypeRef("System.Net.NetworkCredential"), $asm07.TypeRef("System.Int64")
    ]));

/* delegate System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback */ 

JSIL.MakeDelegate("System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback", true, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [
      $asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"), 
      $asm07.TypeRef("System.String"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapDirectoryIdentifier"), 
      $asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"), $asm0A.TypeRef("System.Net.NetworkCredential"), 
      $asm07.TypeRef("System.Int64"), $asm07.TypeRef("System.Int32")
    ]));

/* delegate System.DirectoryServices.Protocols.DereferenceConnectionCallback */ 

JSIL.MakeDelegate("System.DirectoryServices.Protocols.DereferenceConnectionCallback", true, [], 
  new JSIL.MethodSignature(null, [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection")]));

/* delegate System.DirectoryServices.Protocols.QueryClientCertificateCallback */ 

JSIL.MakeDelegate("System.DirectoryServices.Protocols.QueryClientCertificateCallback", true, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate"), [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"), $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Byte")])])]));

/* delegate System.DirectoryServices.Protocols.VerifyServerCertificateCallback */ 

JSIL.MakeDelegate("System.DirectoryServices.Protocols.VerifyServerCertificateCallback", true, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"), $asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate")]));

/* delegate System.DirectoryServices.Protocols.QUERYFORCONNECTIONInternal */ 

JSIL.MakeDelegate("System.DirectoryServices.Protocols.QUERYFORCONNECTIONInternal", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr"), 
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.Int32"), $asm16.TypeRef("System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX"), 
      $asm16.TypeRef("System.DirectoryServices.Protocols.Luid"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IntPtr")])
    ]));

/* delegate System.DirectoryServices.Protocols.NOTIFYOFNEWCONNECTIONInternal */ 

JSIL.MakeDelegate("System.DirectoryServices.Protocols.NOTIFYOFNEWCONNECTIONInternal", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr"), 
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.String"), 
      $asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.Int32"), 
      $asm16.TypeRef("System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX"), $asm16.TypeRef("System.DirectoryServices.Protocols.Luid"), 
      $asm07.TypeRef("System.Int32")
    ]));

/* delegate System.DirectoryServices.Protocols.DEREFERENCECONNECTIONInternal */ 

JSIL.MakeDelegate("System.DirectoryServices.Protocols.DEREFERENCECONNECTIONInternal", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr")]));

/* delegate System.DirectoryServices.Protocols.VERIFYSERVERCERT */ 

JSIL.MakeDelegate("System.DirectoryServices.Protocols.VERIFYSERVERCERT", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.IntPtr"), $asm07.TypeRef("System.IntPtr")]));

/* enum System.DirectoryServices.Protocols.LocatorFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.LocatorFlags", 
    BaseType: $asm07.TypeRef("System.Int64"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    ForceRediscovery: 1, 
    DirectoryServicesRequired: 16, 
    DirectoryServicesPreferred: 32, 
    GCRequired: 64, 
    PdcRequired: 128, 
    IPRequired: 512, 
    KdcRequired: 1024, 
    TimeServerRequired: 2048, 
    WriteableRequired: 4096, 
    GoodTimeServerPreferred: 8192, 
    AvoidSelf: 16384, 
    OnlyLdapNeeded: 32768, 
    IsFlatName: 65536, 
    IsDnsName: 131072, 
    ReturnDnsName: 1073741824, 
    ReturnFlatName: 2147483648, 
  }
);

/* enum System.DirectoryServices.Protocols.SecurityProtocol */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.SecurityProtocol", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Pct1Server: 1, 
    Pct1Client: 2, 
    Ssl2Server: 4, 
    Ssl2Client: 8, 
    Ssl3Server: 16, 
    Ssl3Client: 32, 
    Tls1Server: 64, 
    Tls1Client: 128, 
  }
);

/* class System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation */ 

(function SecurityPackageContextConnectionInformation$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AlgorithmIdentifier", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Authentication.CipherAlgorithmType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CipherStrength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExchangeStrength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Hash", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Authentication.HashAlgorithmType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashStrength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyExchangeAlgorithm", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Protocol", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.SecurityProtocol"))
    );

    $.Field({Static:false, Public:false}, "securityProtocol", $asm16.TypeRef("System.DirectoryServices.Protocols.SecurityProtocol"));

    $.Field({Static:false, Public:false}, "identifier", $asm0A.TypeRef("System.Security.Authentication.CipherAlgorithmType"));

    $.Field({Static:false, Public:false}, "strength", $.Int32);

    $.Field({Static:false, Public:false}, "hashAlgorithm", $asm0A.TypeRef("System.Security.Authentication.HashAlgorithmType"));

    $.Field({Static:false, Public:false}, "hashStrength", $.Int32);

    $.Field({Static:false, Public:false}, "keyExchangeAlgorithm", $.Int32);

    $.Field({Static:false, Public:false}, "exchangeStrength", $.Int32);

    $.Property({Static:false, Public:true }, "Protocol", $asm16.TypeRef("System.DirectoryServices.Protocols.SecurityProtocol"));

    $.Property({Static:false, Public:true }, "AlgorithmIdentifier", $asm0A.TypeRef("System.Security.Authentication.CipherAlgorithmType"));

    $.Property({Static:false, Public:true }, "CipherStrength", $.Int32);

    $.Property({Static:false, Public:true }, "Hash", $asm0A.TypeRef("System.Security.Authentication.HashAlgorithmType"));

    $.Property({Static:false, Public:true }, "HashStrength", $.Int32);

    $.Property({Static:false, Public:true }, "KeyExchangeAlgorithm", $.Int32);

    $.Property({Static:false, Public:true }, "ExchangeStrength", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.ReferralCallback */ 

(function ReferralCallback$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.ReferralCallback", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DereferenceConnection", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DereferenceConnectionCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotifyNewConnection", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QueryForConnection", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.QueryForConnectionCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DereferenceConnection", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DereferenceConnectionCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NotifyNewConnection", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_QueryForConnection", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.QueryForConnectionCallback"))
    );

    $.Field({Static:false, Public:false}, "query", $asm16.TypeRef("System.DirectoryServices.Protocols.QueryForConnectionCallback"));

    $.Field({Static:false, Public:false}, "notify", $asm16.TypeRef("System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback"));

    $.Field({Static:false, Public:false}, "dereference", $asm16.TypeRef("System.DirectoryServices.Protocols.DereferenceConnectionCallback"));

    $.Property({Static:false, Public:true }, "QueryForConnection", $asm16.TypeRef("System.DirectoryServices.Protocols.QueryForConnectionCallback"));

    $.Property({Static:false, Public:true }, "NotifyNewConnection", $asm16.TypeRef("System.DirectoryServices.Protocols.NotifyOfNewConnectionCallback"));

    $.Property({Static:false, Public:true }, "DereferenceConnection", $asm16.TypeRef("System.DirectoryServices.Protocols.DereferenceConnectionCallback"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.DirectoryServices.Protocols.SecurityHandle */ 

(function SecurityHandle$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Protocols.SecurityHandle", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Lower", $.IntPtr);

    $.Field({Static:false, Public:true }, "Upper", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.LdapSessionOptions */ 

(function LdapSessionOptions$Members () {
  var $, $thisType;


































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.LdapSessionOptions", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddLdapHandleRef", 
      new JSIL.MethodSignature($.Boolean, [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "FastConcurrentBind", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AutoReconnect", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DerefAlias", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.DereferenceAlias"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DomainName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostReachable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocatorFlag", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.LocatorFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PingKeepAliveTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PingLimit", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PingWaitTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QueryClientCertificate", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.QueryClientCertificateCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferralCallback", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.ReferralCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferralChasing", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.ReferralChasingOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferralHopLimit", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RootDseCache", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SaslMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sealing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecureSocketLayer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityContext", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SendTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ServerErrorMessage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Signing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SslInformation", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SspiFlag", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TcpKeepAlive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerifyServerCertificate", 
      JSIL.MethodSignature.Return($asm16.TypeRef("System.DirectoryServices.Protocols.VerifyServerCertificateCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIntValueHelper", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapOption")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringValueHelper", 
      new JSIL.MethodSignature($.String, [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapOption"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessCallBackRoutine", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.ReferralCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessDereferenceConnection", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $.IntPtr])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessNotifyConnection", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.String, 
          $.IntPtr, $.Int32, 
          $asm16.TypeRef("System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX"), $asm16.TypeRef("System.DirectoryServices.Protocols.Luid"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessQueryConnection", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.String, 
          $.Int32, $asm16.TypeRef("System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX"), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.Luid"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessSecAuthIdentity", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.NetworkCredential"), [$asm16.TypeRef("System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessServerCertificate", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $.IntPtr])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReleaseLdapHandleRef", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AutoReconnect", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DerefAlias", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DereferenceAlias"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DomainName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FQDN", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HostName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LocatorFlag", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.LocatorFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PingKeepAliveTimeout", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PingLimit", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PingWaitTimeout", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProtocolVersion", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_QueryClientCertificate", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.QueryClientCertificateCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReferralCallback", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.ReferralCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReferralChasing", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.ReferralChasingOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReferralHopLimit", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RootDseCache", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SaslMethod", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Sealing", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecureSocketLayer", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SendTimeout", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Signing", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SspiFlag", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TcpKeepAlive", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_VerifyServerCertificate", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.VerifyServerCertificateCallback"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetIntValueHelper", 
      new JSIL.MethodSignature(null, [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapOption"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetStringValueHelper", 
      new JSIL.MethodSignature(null, [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapOption"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartTransportLayerSecurity", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.DirectoryControlCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "StopTransportLayerSecurity", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "connection", $asm16.TypeRef("System.DirectoryServices.Protocols.LdapConnection"));

    $.Field({Static:false, Public:false}, "callbackRoutine", $asm16.TypeRef("System.DirectoryServices.Protocols.ReferralCallback"));

    $.Field({Static:false, Public:false}, "clientCertificateDelegate", $asm16.TypeRef("System.DirectoryServices.Protocols.QueryClientCertificateCallback"));

    $.Field({Static:false, Public:false}, "serverCertificateDelegate", $asm16.TypeRef("System.DirectoryServices.Protocols.VerifyServerCertificateCallback"));

    $.Field({Static:false, Public:false}, "queryDelegate", $asm16.TypeRef("System.DirectoryServices.Protocols.QUERYFORCONNECTIONInternal"));

    $.Field({Static:false, Public:false}, "notifiyDelegate", $asm16.TypeRef("System.DirectoryServices.Protocols.NOTIFYOFNEWCONNECTIONInternal"));

    $.Field({Static:false, Public:false}, "dereferenceDelegate", $asm16.TypeRef("System.DirectoryServices.Protocols.DEREFERENCECONNECTIONInternal"));

    $.Field({Static:false, Public:false}, "serverCertificateRoutine", $asm16.TypeRef("System.DirectoryServices.Protocols.VERIFYSERVERCERT"));

    $.Property({Static:false, Public:true }, "ReferralChasing", $asm16.TypeRef("System.DirectoryServices.Protocols.ReferralChasingOptions"));

    $.Property({Static:false, Public:true }, "SecureSocketLayer", $.Boolean);

    $.Property({Static:false, Public:true }, "ReferralHopLimit", $.Int32);

    $.Property({Static:false, Public:true }, "ProtocolVersion", $.Int32);

    $.Property({Static:false, Public:true }, "HostName", $.String);

    $.Property({Static:false, Public:true }, "DomainName", $.String);

    $.Property({Static:false, Public:true }, "LocatorFlag", $asm16.TypeRef("System.DirectoryServices.Protocols.LocatorFlags"));

    $.Property({Static:false, Public:true }, "HostReachable", $.Boolean);

    $.Property({Static:false, Public:true }, "PingKeepAliveTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "PingLimit", $.Int32);

    $.Property({Static:false, Public:true }, "PingWaitTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "AutoReconnect", $.Boolean);

    $.Property({Static:false, Public:true }, "SspiFlag", $.Int32);

    $.Property({Static:false, Public:true }, "SslInformation", $asm16.TypeRef("System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation"));

    $.Property({Static:false, Public:true }, "SecurityContext", $.Object);

    $.Property({Static:false, Public:true }, "Signing", $.Boolean);

    $.Property({Static:false, Public:true }, "Sealing", $.Boolean);

    $.Property({Static:false, Public:true }, "SaslMethod", $.String);

    $.Property({Static:false, Public:true }, "RootDseCache", $.Boolean);

    $.Property({Static:false, Public:true }, "TcpKeepAlive", $.Boolean);

    $.Property({Static:false, Public:true }, "SendTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "ReferralCallback", $asm16.TypeRef("System.DirectoryServices.Protocols.ReferralCallback"));

    $.Property({Static:false, Public:true }, "QueryClientCertificate", $asm16.TypeRef("System.DirectoryServices.Protocols.QueryClientCertificateCallback"));

    $.Property({Static:false, Public:true }, "VerifyServerCertificate", $asm16.TypeRef("System.DirectoryServices.Protocols.VerifyServerCertificateCallback"));

    $.Property({Static:false, Public:false}, "ServerErrorMessage", $.String);

    $.Property({Static:false, Public:false}, "DerefAlias", $asm16.TypeRef("System.DirectoryServices.Protocols.DereferenceAlias"));

    $.Property({Static:false, Public:false}, "FQDN", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.BerSafeHandle */ 

(function BerSafeHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.DirectoryServices.Protocols.BerSafeHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm16.TypeRef("System.DirectoryServices.Protocols.berval"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.DirectoryServices.Protocols.HGlobalMemHandle */ 

(function HGlobalMemHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.DirectoryServices.Protocols.HGlobalMemHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.DirectoryServices.Protocols.ConnectionHandle */ 

(function ConnectionHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.DirectoryServices.Protocols.ConnectionHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "needDispose", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.DirectoryServices.Protocols.Luid */ 

(function Luid$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.Luid", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HighPart", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LowPart", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "lowPart", $.Int32);

    $.Field({Static:false, Public:false}, "highPart", $.Int32);

    $.Property({Static:false, Public:true }, "LowPart", $.Int32);

    $.Property({Static:false, Public:true }, "HighPart", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX */ 

(function SEC_WINNT_AUTH_IDENTITY_EX$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "version", $.Int32);

    $.Field({Static:false, Public:true }, "$length", $.Int32);

    $.Field({Static:false, Public:true }, "user", $.String);

    $.Field({Static:false, Public:true }, "userLength", $.Int32);

    $.Field({Static:false, Public:true }, "domain", $.String);

    $.Field({Static:false, Public:true }, "domainLength", $.Int32);

    $.Field({Static:false, Public:true }, "password", $.String);

    $.Field({Static:false, Public:true }, "passwordLength", $.Int32);

    $.Field({Static:false, Public:true }, "flags", $.Int32);

    $.Field({Static:false, Public:true }, "packageList", $.String);

    $.Field({Static:false, Public:true }, "packageListLength", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.DirectoryServices.Protocols.BindMethod */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.BindMethod", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LDAP_AUTH_SIMPLE: 128, 
    LDAP_AUTH_SASL: 131, 
    LDAP_AUTH_OTHERKIND: 134, 
    LDAP_AUTH_EXTERNAL: 166, 
    LDAP_AUTH_SICILY: 646, 
    LDAP_AUTH_SSPI: 1158, 
    LDAP_AUTH_NEGOTIATE: 1158, 
    LDAP_AUTH_MSN: 2182, 
    LDAP_AUTH_NTLM: 4230, 
    LDAP_AUTH_DPA: 8326, 
    LDAP_AUTH_DIGEST: 16518, 
  }
);

/* enum System.DirectoryServices.Protocols.LdapOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.LdapOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LDAP_OPT_DESC: 1, 
    LDAP_OPT_DEREF: 2, 
    LDAP_OPT_SIZELIMIT: 3, 
    LDAP_OPT_TIMELIMIT: 4, 
    LDAP_OPT_REFERRALS: 8, 
    LDAP_OPT_RESTART: 9, 
    LDAP_OPT_SSL: 10, 
    LDAP_OPT_REFERRAL_HOP_LIMIT: 16, 
    LDAP_OPT_VERSION: 17, 
    LDAP_OPT_API_FEATURE_INFO: 21, 
    LDAP_OPT_HOST_NAME: 48, 
    LDAP_OPT_ERROR_NUMBER: 49, 
    LDAP_OPT_ERROR_STRING: 50, 
    LDAP_OPT_SERVER_ERROR: 51, 
    LDAP_OPT_SERVER_EXT_ERROR: 52, 
    LDAP_OPT_PING_KEEP_ALIVE: 54, 
    LDAP_OPT_PING_WAIT_TIME: 55, 
    LDAP_OPT_PING_LIMIT: 56, 
    LDAP_OPT_DNSDOMAIN_NAME: 59, 
    LDAP_OPT_GETDSNAME_FLAGS: 61, 
    LDAP_OPT_HOST_REACHABLE: 62, 
    LDAP_OPT_PROMPT_CREDENTIALS: 63, 
    LDAP_OPT_TCP_KEEPALIVE: 64, 
    LDAP_OPT_FAST_CONCURRENT_BIND: 65, 
    LDAP_OPT_SEND_TIMEOUT: 66, 
    LDAP_OPT_REFERRAL_CALLBACK: 112, 
    LDAP_OPT_CLIENT_CERTIFICATE: 128, 
    LDAP_OPT_SERVER_CERTIFICATE: 129, 
    LDAP_OPT_AUTO_RECONNECT: 145, 
    LDAP_OPT_SSPI_FLAGS: 146, 
    LDAP_OPT_SSL_INFO: 147, 
    LDAP_OPT_SIGN: 149, 
    LDAP_OPT_ENCRYPT: 150, 
    LDAP_OPT_SASL_METHOD: 151, 
    LDAP_OPT_AREC_EXCLUSIVE: 152, 
    LDAP_OPT_SECURITY_CONTEXT: 153, 
    LDAP_OPT_ROOTDSE_CACHE: 154, 
  }
);

/* enum System.DirectoryServices.Protocols.ResultAll */ 

JSIL.MakeEnum(
  {
    FullName: "System.DirectoryServices.Protocols.ResultAll", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LDAP_MSG_ONE: 0, 
    LDAP_MSG_ALL: 1, 
    LDAP_MSG_RECEIVED: 2, 
    LDAP_MSG_POLLINGALL: 3, 
  }
);

/* class System.DirectoryServices.Protocols.LDAP_TIMEVAL */ 

(function LDAP_TIMEVAL$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.LDAP_TIMEVAL", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "tv_sec", $.Int32);

    $.Field({Static:false, Public:true }, "tv_usec", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.berval */ 

(function berval$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.berval", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "bv_len", $.Int32);

    $.Field({Static:false, Public:true }, "bv_val", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.SafeBerval */ 

(function SafeBerval$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.SafeBerval", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.Field({Static:false, Public:true }, "bv_len", $.Int32);

    $.Field({Static:false, Public:true }, "bv_val", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.LdapControl */ 

(function LdapControl$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.LdapControl", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "ldctl_oid", $.IntPtr);

    $.Field({Static:false, Public:true }, "ldctl_value", $asm16.TypeRef("System.DirectoryServices.Protocols.berval"));

    $.Field({Static:false, Public:true }, "ldctl_iscritical", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.DirectoryServices.Protocols.LdapReferralCallback */ 

(function LdapReferralCallback$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Protocols.LdapReferralCallback", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "sizeofcallback", $.Int32);

    $.Field({Static:false, Public:true }, "query", $asm16.TypeRef("System.DirectoryServices.Protocols.QUERYFORCONNECTIONInternal"));

    $.Field({Static:false, Public:true }, "notify", $asm16.TypeRef("System.DirectoryServices.Protocols.NOTIFYOFNEWCONNECTIONInternal"));

    $.Field({Static:false, Public:true }, "dereference", $asm16.TypeRef("System.DirectoryServices.Protocols.DEREFERENCECONNECTIONInternal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.DirectoryServices.Protocols.CRYPTOAPI_BLOB */ 

(function CRYPTOAPI_BLOB$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Protocols.CRYPTOAPI_BLOB", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbData", $.Int32);

    $.Field({Static:false, Public:true }, "pbData", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.DirectoryServices.Protocols.SecPkgContext_IssuerListInfoEx */ 

(function SecPkgContext_IssuerListInfoEx$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.DirectoryServices.Protocols.SecPkgContext_IssuerListInfoEx", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "aIssuers", $.IntPtr);

    $.Field({Static:false, Public:true }, "cIssuers", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.LdapMod */ 

(function LdapMod$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.LdapMod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.Field({Static:false, Public:true }, "type", $.Int32);

    $.Field({Static:false, Public:true }, "attribute", $.IntPtr);

    $.Field({Static:false, Public:true }, "values", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.LdapVlvInfo */ 

(function LdapVlvInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.LdapVlvInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.IntPtr, 
          $.IntPtr
        ])
    );

    $.Field({Static:false, Public:false}, "version", $.Int32);

    $.Field({Static:false, Public:false}, "beforeCount", $.Int32);

    $.Field({Static:false, Public:false}, "afterCount", $.Int32);

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "attrvalue", $.IntPtr);

    $.Field({Static:false, Public:false}, "context", $.IntPtr);

    $.Field({Static:false, Public:false}, "extraData", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.DirectoryServices.Protocols.Wldap32 */ 

(function Wldap32$Members () {
  var $, $thisType;
































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.Wldap32", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_alloc", 
      new JSIL.MethodSignature($.IntPtr, [$.Int32]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ber_alloc_t", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_bvecfree", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_bvfree", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_flatten", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.BerSafeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_free", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.Int32]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_init", 
      new JSIL.MethodSignature($.IntPtr, [$asm16.TypeRef("System.DirectoryServices.Protocols.berval")]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_printf_berarray", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.BerSafeHandle"), $.String, 
          $.IntPtr
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ber_printf", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_printf_bytearray", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.BerSafeHandle"), $.String, 
          $asm16.TypeRef("System.DirectoryServices.Protocols.HGlobalMemHandle"), $.Int32
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ber_printf", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_printf_emptyarg", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.BerSafeHandle"), $.String]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ber_printf", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_printf_int", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.BerSafeHandle"), $.String, 
          $.Int32
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ber_printf", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_scanf", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.BerSafeHandle"), $.String]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_scanf_bitstring", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.BerSafeHandle"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ber_scanf", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_scanf_int", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.BerSafeHandle"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ber_scanf", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ber_scanf_ptr", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.BerSafeHandle"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ber_scanf", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CertFreeCRLContext", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "Crypt32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "cldap_open", 
      new JSIL.MethodSignature($.IntPtr, [$.String, $.Int32]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "cldap_openW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_abandon", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.Int32]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_add", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_add_extW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_bind_s", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.String, 
          $asm16.TypeRef("System.DirectoryServices.Protocols.SEC_WINNT_AUTH_IDENTITY_EX"), $asm16.TypeRef("System.DirectoryServices.Protocols.BindMethod")
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_bind_sW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_compare", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.String, 
          $.String, $.String, 
          $asm16.TypeRef("System.DirectoryServices.Protocols.berval"), $.IntPtr, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_compare_extW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_connect", 
      new JSIL.MethodSignature($.Int32, [$asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $asm16.TypeRef("System.DirectoryServices.Protocols.LDAP_TIMEVAL")]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_control_free", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_control_freeW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_controls_free", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_controls_freeW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_create_sort_control", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr, 
          $.Byte, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_create_sort_controlW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_delete_ext", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.String, 
          $.IntPtr, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_delete_extW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_extended_operation", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.String, 
          $asm16.TypeRef("System.DirectoryServices.Protocols.berval"), $.IntPtr, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_extended_operationW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_first_attribute", 
      new JSIL.MethodSignature($.IntPtr, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_first_attributeW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_first_entry", 
      new JSIL.MethodSignature($.IntPtr, [$asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_first_reference", 
      new JSIL.MethodSignature($.IntPtr, [$asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_get_dn", 
      new JSIL.MethodSignature($.IntPtr, [$asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_get_dnW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_get_option_int", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapOption"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_get_optionW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_get_option_ptr", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapOption"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_get_optionW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_get_option_sechandle", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapOption"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm16.TypeRef("System.DirectoryServices.Protocols.SecurityHandle")])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_get_optionW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_get_option_secInfo", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapOption"), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.SecurityPackageContextConnectionInformation")
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_get_optionW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_get_values_len", 
      new JSIL.MethodSignature($.IntPtr, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr, 
          $.String
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_get_values_lenW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_init", 
      new JSIL.MethodSignature($.IntPtr, [$.String, $.Int32]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_initW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_memfree", 
      JSIL.MethodSignature.Action($.IntPtr), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_memfreeW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_modify", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.String, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_modify_extW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_msgfree", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_next_attribute", 
      new JSIL.MethodSignature($.IntPtr, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_next_attributeW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_next_entry", 
      new JSIL.MethodSignature($.IntPtr, [$asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_next_reference", 
      new JSIL.MethodSignature($.IntPtr, [$asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_parse_extended_result", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.Byte
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_parse_extended_resultW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_parse_reference", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_parse_referenceW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_parse_result", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.Byte
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_parse_resultW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_parse_result_referral", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $.IntPtr, $.Byte
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_parse_resultW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_rename", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.String, 
          $.String, $.String, 
          $.Int32, $.IntPtr, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_rename_extW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_result", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.Int32, 
          $.Int32, $asm16.TypeRef("System.DirectoryServices.Protocols.LDAP_TIMEVAL"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_result2error", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_search", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.String, 
          $.Int32, $.String, 
          $.IntPtr, $.Boolean, 
          $.IntPtr, $.IntPtr, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_search_extW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_set_option_clientcert", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapOption"), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.QUERYCLIENTCERT")
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_set_optionW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_set_option_int", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapOption"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_set_optionW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_set_option_ptr", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapOption"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_set_optionW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_set_option_referral", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapOption"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm16.TypeRef("System.DirectoryServices.Protocols.LdapReferralCallback")])
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_set_optionW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_set_option_servercert", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $asm16.TypeRef("System.DirectoryServices.Protocols.LdapOption"), 
          $asm16.TypeRef("System.DirectoryServices.Protocols.VERIFYSERVERCERT")
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_set_optionW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_simple_bind_s", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $.String, 
          $.String
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_simple_bind_sW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_start_tls", 
      new JSIL.MethodSignature($.Int32, [
          $asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_start_tls_sW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_stop_tls", 
      new JSIL.MethodSignature($.Byte, [$asm16.TypeRef("System.DirectoryServices.Protocols.ConnectionHandle")]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_stop_tls_s", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_unbind", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_value_free", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
        EntryPoint: "ldap_value_freeW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "ldap_value_free_len", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "wldap32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "LdapGetLastError", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "wldap32.dll", 
      }
    );

    $.Constant({Static:true , Public:true }, "SEC_WINNT_AUTH_IDENTITY_UNICODE", $.Int32, 2);

    $.Constant({Static:true , Public:true }, "SEC_WINNT_AUTH_IDENTITY_VERSION", $.Int32, 512);

    $.Constant({Static:true , Public:true }, "MICROSOFT_KERBEROS_NAME_W", $.String, "Kerberos");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.DirectoryServices.Protocols.ResDescriptionAttribute */ 

(function ResDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.DirectoryServices.Protocols.ResDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.DirectoryServices.Protocols.ResCategoryAttribute */ 

(function ResCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.DirectoryServices.Protocols.ResCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.DirectoryServices.Protocols.Res */ 

(function Res$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.DirectoryServices.Protocols.Res", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "DsmlNonHttpUri", $.String, "DsmlNonHttpUri");

    $.Constant({Static:true , Public:false}, "NoNegativeTime", $.String, "NoNegativeTime");

    $.Constant({Static:true , Public:false}, "NoNegativeSizeLimit", $.String, "NoNegativeSizeLimit");

    $.Constant({Static:true , Public:false}, "InvalidDocument", $.String, "InvalidDocument");

    $.Constant({Static:true , Public:false}, "MissingSessionId", $.String, "MissingSessionId");

    $.Constant({Static:true , Public:false}, "MissingResponse", $.String, "MissingResponse");

    $.Constant({Static:true , Public:false}, "ErrorResponse", $.String, "ErrorResponse");

    $.Constant({Static:true , Public:false}, "BadControl", $.String, "BadControl");

    $.Constant({Static:true , Public:false}, "NullDirectoryAttribute", $.String, "NullDirectoryAttribute");

    $.Constant({Static:true , Public:false}, "NullDirectoryAttributeCollection", $.String, "NullDirectoryAttributeCollection");

    $.Constant({Static:true , Public:false}, "WhiteSpaceServerName", $.String, "WhiteSpaceServerName");

    $.Constant({Static:true , Public:false}, "DirectoryAttributeConversion", $.String, "DirectoryAttributeConversion");

    $.Constant({Static:true , Public:false}, "WrongNumValuesCompare", $.String, "WrongNumValuesCompare");

    $.Constant({Static:true , Public:false}, "WrongAssertionCompare", $.String, "WrongAssertionCompare");

    $.Constant({Static:true , Public:false}, "DefaultOperationsError", $.String, "DefaultOperationsError");

    $.Constant({Static:true , Public:false}, "BadSearchLDAPFilter", $.String, "BadSearchLDAPFilter");

    $.Constant({Static:true , Public:false}, "ReadOnlyProperty", $.String, "ReadOnlyProperty");

    $.Constant({Static:true , Public:false}, "MissingOperationResponseResultCode", $.String, "MissingOperationResponseResultCode");

    $.Constant({Static:true , Public:false}, "MissingSearchResultEntryDN", $.String, "MissingSearchResultEntryDN");

    $.Constant({Static:true , Public:false}, "MissingSearchResultEntryAttributeName", $.String, "MissingSearchResultEntryAttributeName");

    $.Constant({Static:true , Public:false}, "BadOperationResponseResultCode", $.String, "BadOperationResponseResultCode");

    $.Constant({Static:true , Public:false}, "MissingErrorResponseType", $.String, "MissingErrorResponseType");

    $.Constant({Static:true , Public:false}, "ErrorResponseInvalidValue", $.String, "ErrorResponseInvalidValue");

    $.Constant({Static:true , Public:false}, "NotSupportOnDsmlErrRes", $.String, "NotSupportOnDsmlErrRes");

    $.Constant({Static:true , Public:false}, "BadBase64Value", $.String, "BadBase64Value");

    $.Constant({Static:true , Public:false}, "WrongAuthType", $.String, "WrongAuthType");

    $.Constant({Static:true , Public:false}, "SessionInUse", $.String, "SessionInUse");

    $.Constant({Static:true , Public:false}, "ReadOnlyDocument", $.String, "ReadOnlyDocument");

    $.Constant({Static:true , Public:false}, "NotWellFormedResponse", $.String, "NotWellFormedResponse");

    $.Constant({Static:true , Public:false}, "NoCurrentSession", $.String, "NoCurrentSession");

    $.Constant({Static:true , Public:false}, "UnknownResponseElement", $.String, "UnknownResponseElement");

    $.Constant({Static:true , Public:false}, "InvalidClientCertificates", $.String, "InvalidClientCertificates");

    $.Constant({Static:true , Public:false}, "InvalidAuthCredential", $.String, "InvalidAuthCredential");

    $.Constant({Static:true , Public:false}, "InvalidLdapSearchRequestFilter", $.String, "InvalidLdapSearchRequestFilter");

    $.Constant({Static:true , Public:false}, "PartialResultsNotSupported", $.String, "PartialResultsNotSupported");

    $.Constant({Static:true , Public:false}, "BerConverterNotMatch", $.String, "BerConverterNotMatch");

    $.Constant({Static:true , Public:false}, "BerConverterUndefineChar", $.String, "BerConverterUndefineChar");

    $.Constant({Static:true , Public:false}, "BerConversionError", $.String, "BerConversionError");

    $.Constant({Static:true , Public:false}, "TLSStopFailure", $.String, "TLSStopFailure");

    $.Constant({Static:true , Public:false}, "NoPartialResults", $.String, "NoPartialResults");

    $.Constant({Static:true , Public:false}, "DefaultLdapError", $.String, "DefaultLdapError");

    $.Constant({Static:true , Public:false}, "LDAP_PARTIAL_RESULTS", $.String, "LDAP_PARTIAL_RESULTS");

    $.Constant({Static:true , Public:false}, "LDAP_IS_LEAF", $.String, "LDAP_IS_LEAF");

    $.Constant({Static:true , Public:false}, "LDAP_SORT_CONTROL_MISSING", $.String, "LDAP_SORT_CONTROL_MISSING");

    $.Constant({Static:true , Public:false}, "LDAP_OFFSET_RANGE_ERROR", $.String, "LDAP_OFFSET_RANGE_ERROR");

    $.Constant({Static:true , Public:false}, "LDAP_RESULTS_TOO_LARGE", $.String, "LDAP_RESULTS_TOO_LARGE");

    $.Constant({Static:true , Public:false}, "LDAP_SERVER_DOWN", $.String, "LDAP_SERVER_DOWN");

    $.Constant({Static:true , Public:false}, "LDAP_LOCAL_ERROR", $.String, "LDAP_LOCAL_ERROR");

    $.Constant({Static:true , Public:false}, "LDAP_ENCODING_ERROR", $.String, "LDAP_ENCODING_ERROR");

    $.Constant({Static:true , Public:false}, "LDAP_DECODING_ERROR", $.String, "LDAP_DECODING_ERROR");

    $.Constant({Static:true , Public:false}, "LDAP_TIMEOUT", $.String, "LDAP_TIMEOUT");

    $.Constant({Static:true , Public:false}, "LDAP_AUTH_UNKNOWN", $.String, "LDAP_AUTH_UNKNOWN");

    $.Constant({Static:true , Public:false}, "LDAP_FILTER_ERROR", $.String, "LDAP_FILTER_ERROR");

    $.Constant({Static:true , Public:false}, "LDAP_USER_CANCELLED", $.String, "LDAP_USER_CANCELLED");

    $.Constant({Static:true , Public:false}, "LDAP_PARAM_ERROR", $.String, "LDAP_PARAM_ERROR");

    $.Constant({Static:true , Public:false}, "LDAP_NO_MEMORY", $.String, "LDAP_NO_MEMORY");

    $.Constant({Static:true , Public:false}, "LDAP_CONNECT_ERROR", $.String, "LDAP_CONNECT_ERROR");

    $.Constant({Static:true , Public:false}, "LDAP_NOT_SUPPORTED", $.String, "LDAP_NOT_SUPPORTED");

    $.Constant({Static:true , Public:false}, "LDAP_NO_RESULTS_RETURNED", $.String, "LDAP_NO_RESULTS_RETURNED");

    $.Constant({Static:true , Public:false}, "LDAP_CONTROL_NOT_FOUND", $.String, "LDAP_CONTROL_NOT_FOUND");

    $.Constant({Static:true , Public:false}, "LDAP_MORE_RESULTS_TO_RETURN", $.String, "LDAP_MORE_RESULTS_TO_RETURN");

    $.Constant({Static:true , Public:false}, "LDAP_CLIENT_LOOP", $.String, "LDAP_CLIENT_LOOP");

    $.Constant({Static:true , Public:false}, "LDAP_REFERRAL_LIMIT_EXCEEDED", $.String, "LDAP_REFERRAL_LIMIT_EXCEEDED");

    $.Constant({Static:true , Public:false}, "LDAP_INVALID_CREDENTIALS", $.String, "LDAP_INVALID_CREDENTIALS");

    $.Constant({Static:true , Public:false}, "LDAP_SUCCESS", $.String, "LDAP_SUCCESS");

    $.Constant({Static:true , Public:false}, "NoSessionIDReturned", $.String, "NoSessionIDReturned");

    $.Constant({Static:true , Public:false}, "LDAP_OPERATIONS_ERROR", $.String, "LDAP_OPERATIONS_ERROR");

    $.Constant({Static:true , Public:false}, "LDAP_PROTOCOL_ERROR", $.String, "LDAP_PROTOCOL_ERROR");

    $.Constant({Static:true , Public:false}, "LDAP_TIMELIMIT_EXCEEDED", $.String, "LDAP_TIMELIMIT_EXCEEDED");

    $.Constant({Static:true , Public:false}, "LDAP_SIZELIMIT_EXCEEDED", $.String, "LDAP_SIZELIMIT_EXCEEDED");

    $.Constant({Static:true , Public:false}, "LDAP_COMPARE_FALSE", $.String, "LDAP_COMPARE_FALSE");

    $.Constant({Static:true , Public:false}, "LDAP_COMPARE_TRUE", $.String, "LDAP_COMPARE_TRUE");

    $.Constant({Static:true , Public:false}, "LDAP_AUTH_METHOD_NOT_SUPPORTED", $.String, "LDAP_AUTH_METHOD_NOT_SUPPORTED");

    $.Constant({Static:true , Public:false}, "LDAP_STRONG_AUTH_REQUIRED", $.String, "LDAP_STRONG_AUTH_REQUIRED");

    $.Constant({Static:true , Public:false}, "LDAP_REFERRAL", $.String, "LDAP_REFERRAL");

    $.Constant({Static:true , Public:false}, "LDAP_ADMIN_LIMIT_EXCEEDED", $.String, "LDAP_ADMIN_LIMIT_EXCEEDED");

    $.Constant({Static:true , Public:false}, "LDAP_UNAVAILABLE_CRIT_EXTENSION", $.String, "LDAP_UNAVAILABLE_CRIT_EXTENSION");

    $.Constant({Static:true , Public:false}, "LDAP_CONFIDENTIALITY_REQUIRED", $.String, "LDAP_CONFIDENTIALITY_REQUIRED");

    $.Constant({Static:true , Public:false}, "LDAP_SASL_BIND_IN_PROGRESS", $.String, "LDAP_SASL_BIND_IN_PROGRESS");

    $.Constant({Static:true , Public:false}, "LDAP_NO_SUCH_ATTRIBUTE", $.String, "LDAP_NO_SUCH_ATTRIBUTE");

    $.Constant({Static:true , Public:false}, "LDAP_UNDEFINED_TYPE", $.String, "LDAP_UNDEFINED_TYPE");

    $.Constant({Static:true , Public:false}, "LDAP_INAPPROPRIATE_MATCHING", $.String, "LDAP_INAPPROPRIATE_MATCHING");

    $.Constant({Static:true , Public:false}, "LDAP_CONSTRAINT_VIOLATION", $.String, "LDAP_CONSTRAINT_VIOLATION");

    $.Constant({Static:true , Public:false}, "LDAP_ATTRIBUTE_OR_VALUE_EXISTS", $.String, "LDAP_ATTRIBUTE_OR_VALUE_EXISTS");

    $.Constant({Static:true , Public:false}, "LDAP_INVALID_SYNTAX", $.String, "LDAP_INVALID_SYNTAX");

    $.Constant({Static:true , Public:false}, "LDAP_NO_SUCH_OBJECT", $.String, "LDAP_NO_SUCH_OBJECT");

    $.Constant({Static:true , Public:false}, "LDAP_ALIAS_PROBLEM", $.String, "LDAP_ALIAS_PROBLEM");

    $.Constant({Static:true , Public:false}, "LDAP_INVALID_DN_SYNTAX", $.String, "LDAP_INVALID_DN_SYNTAX");

    $.Constant({Static:true , Public:false}, "LDAP_ALIAS_DEREF_PROBLEM", $.String, "LDAP_ALIAS_DEREF_PROBLEM");

    $.Constant({Static:true , Public:false}, "LDAP_INAPPROPRIATE_AUTH", $.String, "LDAP_INAPPROPRIATE_AUTH");

    $.Constant({Static:true , Public:false}, "LDAP_INSUFFICIENT_RIGHTS", $.String, "LDAP_INSUFFICIENT_RIGHTS");

    $.Constant({Static:true , Public:false}, "LDAP_BUSY", $.String, "LDAP_BUSY");

    $.Constant({Static:true , Public:false}, "LDAP_UNAVAILABLE", $.String, "LDAP_UNAVAILABLE");

    $.Constant({Static:true , Public:false}, "LDAP_UNWILLING_TO_PERFORM", $.String, "LDAP_UNWILLING_TO_PERFORM");

    $.Constant({Static:true , Public:false}, "LDAP_LOOP_DETECT", $.String, "LDAP_LOOP_DETECT");

    $.Constant({Static:true , Public:false}, "LDAP_NAMING_VIOLATION", $.String, "LDAP_NAMING_VIOLATION");

    $.Constant({Static:true , Public:false}, "LDAP_OBJECT_CLASS_VIOLATION", $.String, "LDAP_OBJECT_CLASS_VIOLATION");

    $.Constant({Static:true , Public:false}, "LDAP_NOT_ALLOWED_ON_NONLEAF", $.String, "LDAP_NOT_ALLOWED_ON_NONLEAF");

    $.Constant({Static:true , Public:false}, "LDAP_NOT_ALLOWED_ON_RDN", $.String, "LDAP_NOT_ALLOWED_ON_RDN");

    $.Constant({Static:true , Public:false}, "LDAP_ALREADY_EXISTS", $.String, "LDAP_ALREADY_EXISTS");

    $.Constant({Static:true , Public:false}, "LDAP_NO_OBJECT_CLASS_MODS", $.String, "LDAP_NO_OBJECT_CLASS_MODS");

    $.Constant({Static:true , Public:false}, "LDAP_AFFECTS_MULTIPLE_DSAS", $.String, "LDAP_AFFECTS_MULTIPLE_DSAS");

    $.Constant({Static:true , Public:false}, "LDAP_VIRTUAL_LIST_VIEW_ERROR", $.String, "LDAP_VIRTUAL_LIST_VIEW_ERROR");

    $.Constant({Static:true , Public:false}, "LDAP_OTHER", $.String, "LDAP_OTHER");

    $.Constant({Static:true , Public:false}, "LDAP_SEND_TIMEOUT", $.String, "LDAP_SEND_TIMEOUT");

    $.Constant({Static:true , Public:false}, "InvalidAsyncResult", $.String, "InvalidAsyncResult");

    $.Constant({Static:true , Public:false}, "ValidDirectoryAttributeType", $.String, "ValidDirectoryAttributeType");

    $.Constant({Static:true , Public:false}, "ValidFilterType", $.String, "ValidFilterType");

    $.Constant({Static:true , Public:false}, "ValidValuesType", $.String, "ValidValuesType");

    $.Constant({Static:true , Public:false}, "ValidValueType", $.String, "ValidValueType");

    $.Constant({Static:true , Public:false}, "SupportedPlatforms", $.String, "SupportedPlatforms");

    $.Constant({Static:true , Public:false}, "TLSNotSupported", $.String, "TLSNotSupported");

    $.Constant({Static:true , Public:false}, "InvalidValueType", $.String, "InvalidValueType");

    $.Constant({Static:true , Public:false}, "ValidValue", $.String, "ValidValue");

    $.Constant({Static:true , Public:false}, "ContainNullControl", $.String, "ContainNullControl");

    $.Constant({Static:true , Public:false}, "InvalidFilterType", $.String, "InvalidFilterType");

    $.Constant({Static:true , Public:false}, "NotReturnedAsyncResult", $.String, "NotReturnedAsyncResult");

    $.Constant({Static:true , Public:false}, "DsmlAuthRequestNotSupported", $.String, "DsmlAuthRequestNotSupported");

    $.Constant({Static:true , Public:false}, "CallBackIsNull", $.String, "CallBackIsNull");

    $.Constant({Static:true , Public:false}, "NullValueArray", $.String, "NullValueArray");

    $.Constant({Static:true , Public:false}, "NonCLSException", $.String, "NonCLSException");

    $.Constant({Static:true , Public:false}, "ConcurrentBindNotSupport", $.String, "ConcurrentBindNotSupport");

    $.Constant({Static:true , Public:false}, "TimespanExceedMax", $.String, "TimespanExceedMax");

    $.Constant({Static:true , Public:false}, "InvliadRequestType", $.String, "InvliadRequestType");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ComputeStringHash", 
      new JSIL.MethodSignature($.UInt32, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

