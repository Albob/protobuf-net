/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
var $asm08 = JSIL.DeclareAssembly("protobuf-net, Version=2.3.0.0, Culture=neutral, PublicKeyToken=257b51d87d2e4d67");

JSIL.DeclareNamespace("ProtoBuf");
/* enum ProtoBuf.TimeSpanScale */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.TimeSpanScale", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Days: 0, 
    Hours: 1, 
    Minutes: 2, 
    Seconds: 3, 
    Milliseconds: 4, 
    Ticks: 5, 
    MinMax: 15, 
  }
);

/* class ProtoBuf.BclHelpers */ 

(function BclHelpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.DateTime)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.DateTimeKind)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Runtime.Serialization.FormatterServices)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.SubItemToken)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Decimal)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm08.ProtoBuf.BclHelpers_NetObjectOptions)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm08.ProtoBuf.NetObjectCache)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.TimeSpan)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm08.ProtoBuf.TimeSpanScale)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm07.System.Int32))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.DateTime, [
        $asm07.System.Int32, $asm07.System.Int32, 
        $asm07.System.Int32, $asm07.System.Int32, 
        $asm07.System.Int32, $asm07.System.Int32, 
        $asm07.System.Int32, $asm07.System.DateTimeKind
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Decimal, [
        $asm07.System.Int32, $asm07.System.Int32, 
        $asm07.System.Int32, $asm07.System.Boolean, 
        $asm07.System.Byte
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Guid, [
        $asm07.System.Int32, $asm07.System.Int16, 
        $asm07.System.Int16, $asm07.System.Byte, 
        $asm07.System.Byte, $asm07.System.Byte, 
        $asm07.System.Byte, $asm07.System.Byte, 
        $asm07.System.Byte, $asm07.System.Byte, 
        $asm07.System.Byte
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.ProtoException, [$asm07.System.String]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.TimeSpan, [$asm07.System.DateTime, $asm07.System.DateTime]))) ();
  };


  function BclHelpers_GetUninitializedObject (type) {
    return $T03().GetUninitializedObject(type);
  }; 

  function BclHelpers_ReadDateTime (source) {
    var dateTimeKind = new JSIL.BoxedVariable($asm07.System.DateTimeKind.Unspecified);
    var num = $thisType.ReadTimeSpanTicks(source, /* ref */ dateTimeKind);
    if (!$T05().op_Inequality(num, $T05().Create(0, 0, 32768))) {
      return $T00().MinValue;
    }
    if (!$T05().op_Inequality(num, $T05().Create(16777215, 16777215, 32767))) {
      return $T00().MaxValue;
    }
    return ($thisType.EpochOrigin[(dateTimeKind.get()).valueOf()].MemberwiseClone()).AddTicks(num);
  }; 

  function BclHelpers_ReadDecimal (reader) {
    var num4 = 0;
    var num = $T07().Create(0, 0, 0);
    var num2 = 0;
    var num3 = 0;
    var token = $T04().StartSubItem(reader);

    while ((num4 = (reader.ReadFieldHeader() | 0)) > 0) {
      switch (num4) {
        case 1: 
          num = reader.ReadUInt64();
          break;

        case 2: 
          num2 = (reader.ReadUInt32() >>> 0);
          break;

        case 3: 
          num3 = (reader.ReadUInt32() >>> 0);
          break;

        default: 
          reader.SkipField();
          break;

      }
    }
    $T04().EndSubItem(token, reader);
    if (!($T07().op_Inequality(num, $T07().Create(0, 0, 0)) || (num2 !== 0))) {
      return $T0A().Zero;
    }
    var lo = (($T07().op_BitwiseAnd(num, $T07().FromNumber(-1))).ToNumber(4294967295, true) | 0);
    var mid = (($T07().op_BitwiseAnd(
        $T07().op_RightShift(num, (32 >>> 0)), 
        $T07().FromNumber(-1)
      )).ToNumber(4294967295, true) | 0);
    var hi = (num2 | 0);
    var isNegative = (num3 & 1) === 1;
    var scale = ((num3 & 510) >>> (1 >>> 0) & 0xFF);
    return $S01().Construct(lo, mid, hi, isNegative, scale);
  }; 

  function BclHelpers_ReadGuid (source) {
    var num3 = 0;
    var num = $T07().Create(0, 0, 0);
    var num2 = $T07().Create(0, 0, 0);
    var token = $T04().StartSubItem(source);

    while ((num3 = (source.ReadFieldHeader() | 0)) > 0) {
      if (num3 !== 1) {
        if (num3 !== 2) {
          source.SkipField();
        } else {
          num2 = source.ReadUInt64();
        }
      } else {
        num = source.ReadUInt64();
      }
    }
    $T04().EndSubItem(token, source);
    if (!($T07().op_Inequality(num, $T07().Create(0, 0, 0)) || $T07().op_Inequality(num2, $T07().Create(0, 0, 0)))) {
      return $T0D().Empty;
    }
    var num4 = (($T07().op_RightShift(num, (32 >>> 0))).ToNumber(4294967295, false) >>> 0);
    var a = (num.ToNumber(4294967295, false) >>> 0);
    var num5 = (($T07().op_RightShift(num2, (32 >>> 0))).ToNumber(4294967295, false) >>> 0);
    var num6 = (num2.ToNumber(4294967295, false) >>> 0);
    return $S02().Construct((a | 0), ((num4 + 0x8000 & 0xFFFF) - 0x8000), ((num4 >>> (16 >>> 0) + 0x8000 & 0xFFFF) - 0x8000), (num6 & 0xFF), (num6 >>> (8 >>> 0) & 0xFF), (num6 >>> (16 >>> 0) & 0xFF), (num6 >>> (24 >>> 0) & 0xFF), (num5 & 0xFF), (num5 >>> (8 >>> 0) & 0xFF), (num5 >>> (16 >>> 0) & 0xFF), (num5 >>> (24 >>> 0) & 0xFF));
  }; 

  function BclHelpers_ReadNetObject (value, source, key, $type, options) {
    var type = new JSIL.BoxedVariable($type);
    var num3 = 0;
    var token = $T04().StartSubItem(source);
    var num = -1;
    var num2 = -1;

    while ((num3 = (source.ReadFieldHeader() | 0)) > 0) {
      switch (num3) {
        case 1: 
          var key2 = (source.ReadInt32() | 0);
          value = (source.get_NetCache()).GetKeyedObject(key2);
          continue;

        case 2: 
          num = (source.ReadInt32() | 0);
          continue;

        case 3: 
          key2 = (source.ReadInt32() | 0);
          type.set($T02().$Cast((source.get_NetCache()).GetKeyedObject(key2)));
          key = (source.GetTypeKey(/* ref */ type) | 0);
          continue;

        case 4: 
          num2 = (source.ReadInt32() | 0);
          continue;

        case 8: 
          var text = source.ReadString();
          type.set(source.DeserializeType(text));
          if ($T02().op_Equality(type.get(), null)) {
            throw $S03().Construct(("Unable to resolve type: " + text + " (you can use the TypeModel.DynamicTypeFormatting event to provide a custom mapping)"));
          }
          if ($T02().op_Equality(type.get(), $T12().__Type__)) {
            key = -1;
            continue;
          }
          key = (source.GetTypeKey(/* ref */ type) | 0);
          if ((key | 0) < 0) {
            throw $S04().Construct(JSIL.ConcatString("Dynamic type is not a contract-type: ", (type.get()).get_Name()));
          }
          continue;

        case 10: 
          var flag = $T02().op_Equality(type.get(), $T12().__Type__);
          var flag2 = value === null;
          var flag3 = flag2 && 
          (flag || 
            ($T10().$Cast(options & $T10().LateSet) > $T10().None));
          if (!((num < 0) || flag3)) {
            if (value === null) {
              source.TrapNextObject(num);
            } else {
              (source.get_NetCache()).SetKeyedObject(num, value);
            }
            if (num2 >= 0) {
              (source.get_NetCache()).SetKeyedObject(num2, type.get());
            }
          }
          var obj = value;
          if (flag) {
            value = source.ReadString();
          } else {
            value = $T04().ReadTypedObject(obj, key, source, type.get());
          }
          if (num >= 0) {
            if (!(!flag2 || flag3)) {
              obj = (source.get_NetCache()).GetKeyedObject(num);
            }
            if (flag3) {
              (source.get_NetCache()).SetKeyedObject(num, value);
              if (num2 >= 0) {
                (source.get_NetCache()).SetKeyedObject(num2, type.get());
              }
            }
          }
          if (!((num < 0) || 
              flag3 || (obj === value))) {
            throw $S03().Construct("A reference-tracked object changed reference during deserialization");
          }
          if (!((num >= 0) || (num2 < 0))) {
            (source.get_NetCache()).SetKeyedObject(num2, type.get());
            continue;
          }
          continue;

      }
      source.SkipField();
    }
    if (!((num < 0) || ((($T10().$Cast(options & $T10().AsReference)).valueOf() | 0) !== 0))) {
      throw $S03().Construct("Object key in input stream, but reference-tracking was not expected");
    }
    $T04().EndSubItem(token, source);
    return value;
  }; 

  function BclHelpers_ReadTimeSpan (source) {
    var dateTimeKind = new JSIL.BoxedVariable($asm07.System.DateTimeKind.Unspecified);
    var num = $thisType.ReadTimeSpanTicks(source, /* ref */ dateTimeKind);
    if (!$T05().op_Inequality(num, $T05().Create(0, 0, 32768))) {
      return $T16().MinValue;
    }
    if (!$T05().op_Inequality(num, $T05().Create(16777215, 16777215, 32767))) {
      return $T16().MaxValue;
    }
    return $T16().FromTicks(num);
  }; 

  function BclHelpers_ReadTimeSpanTicks (source, /* ref */ kind) {
    var num2 = 0;
    kind.set($T01().Unspecified);
    var wireType = source.get_WireType();
    if (wireType === $T17().Fixed64) {
      return source.ReadInt64();
    }
    if ((((wireType - $T17().String) | 0) >>> 0) > (1 >>> 0)) {
      throw $S03().Construct(JSIL.ConcatString("Unexpected wire-type: ", (source.get_WireType()).toString()));
    }
    var token = $T04().StartSubItem(source);
    var timeSpanScale = $T18().Days;
    var num = $T05().Create(0, 0, 0);

    while ((num2 = (source.ReadFieldHeader() | 0)) > 0) {
      switch (num2) {
        case 1: 
          source.Assert($T17().SignedVariant);
          num = source.ReadInt64();
          break;

        case 2: 
          timeSpanScale = $T18().$Cast(source.ReadInt32());
          break;

        case 3: 
          kind.set($T01().$Cast(source.ReadInt32()));
          var dateTimeKind = kind.get();
          if (dateTimeKind > $T01().Local) {
            throw $S03().Construct(JSIL.ConcatString("Invalid date/time kind: ", (kind.get()).toString()));
          }
          break;

        default: 
          source.SkipField();
          break;

      }
    }
    $T04().EndSubItem(token, source);
    switch (timeSpanScale.valueOf()) {
      case 0: 
        return $T05().op_Multiplication(num, $T05().Create(6930432, 51498, 0));

      case 1: 
        return $T05().op_Multiplication(num, $T05().Create(12871680, 2145, 0));

      case 2: 
        return $T05().op_Multiplication(num, $T05().Create(12797440, 35, 0));

      case 3: 
        return $T05().op_Multiplication(num, $T05().Create(10000000, 0, 0));

      case 4: 
        return $T05().op_Multiplication(num, $T05().Create(10000, 0, 0));

      case 5: 
        return num;

      default: 
        if (timeSpanScale !== $T18().MinMax) {
          throw $S03().Construct(JSIL.ConcatString("Unknown timescale: ", timeSpanScale.toString()));
        }
        if ($T05().op_Equality(num, $T05().Create(16777215, 16777215, 65535))) {
          return $T05().Create(0, 0, 32768);
        }
        if (!$T05().op_Inequality(num, $T05().Create(1, 0, 0))) {
          return $T05().Create(16777215, 16777215, 32767);
        }
        throw $S03().Construct(JSIL.ConcatString("Unknown min/max value: ", (num).toString()));

    }
  }; 

  function BclHelpers_WriteDateTime (value, dest) {
    $thisType.WriteDateTimeImpl(value.MemberwiseClone(), dest, false);
  }; 

  function BclHelpers_WriteDateTimeImpl (value, dest, includeKind) {
    if (dest === null) {
      throw $S05().Construct("dest");
    }
    var wireType = dest.get_WireType();
    if ((((wireType - $T17().String) | 0) >>> 0) <= (1 >>> 0)) {
      if ($T00().op_Equality(value.MemberwiseClone(), $T00().MaxValue.MemberwiseClone())) {
        var timeSpan = $T16().MaxValue.MemberwiseClone();
        includeKind = false;
      } else if ($T00().op_Equality(value.MemberwiseClone(), $T00().MinValue.MemberwiseClone())) {
        timeSpan = $T16().MinValue.MemberwiseClone();
        includeKind = false;
      } else {
        timeSpan = $S06().CallStatic($T00(), "op_Subtraction", null, value, $thisType.EpochOrigin[0]).MemberwiseClone();
      }
    } else {
      timeSpan = $S06().CallStatic($T00(), "op_Subtraction", null, value, $thisType.EpochOrigin[0]).MemberwiseClone();
    }
    $thisType.WriteTimeSpanImpl(timeSpan.MemberwiseClone(), dest, (
        includeKind
           ? value.get_Kind()
           : $T01().Unspecified)
    );
  }; 

  function BclHelpers_WriteDateTimeWithKind (value, dest) {
    $thisType.WriteDateTimeImpl(value.MemberwiseClone(), dest, true);
  }; 

  function BclHelpers_WriteDecimal (value, writer) {
    var bits = $T0A().GetBits(value);
    var num = $T07().op_LeftShift(($T05().FromNumber(bits[1])).ToUInt64(), 32);
    var num2 = ($T05().op_BitwiseAnd(
        $T05().FromNumber(bits[0]), 
        ($T07().FromNumber(-1)).ToInt64()
      )).ToUInt64();
    var num3 = $T07().op_BitwiseOr(num, num2);
    var num4 = (bits[2] >>> 0);
    var num5 = ((((bits[3] | 0) >> 15) & 510) | (((bits[3] | 0) >> 31) & 1) >>> 0);
    var token = $T19().StartSubItem(null, writer);
    if ($T07().op_Inequality(num3, $T07().Create(0, 0, 0))) {
      $T19().WriteFieldHeader(1, $T17().Variant, writer);
      $T19().WriteUInt64(num3, writer);
    }
    if (num4 !== 0) {
      $T19().WriteFieldHeader(2, $T17().Variant, writer);
      $T19().WriteUInt32(num4, writer);
    }
    if (num5 !== 0) {
      $T19().WriteFieldHeader(3, $T17().Variant, writer);
      $T19().WriteUInt32(num5, writer);
    }
    $T19().EndSubItem(token, writer);
  }; 

  function BclHelpers_WriteGuid (value, dest) {
    var data = value.ToByteArray();
    var token = $T19().StartSubItem(null, dest);
    if ($T0D().op_Inequality(value.MemberwiseClone(), $T0D().Empty.MemberwiseClone())) {
      $T19().WriteFieldHeader(1, $T17().Fixed64, dest);
      $T19().WriteBytes(data, 0, 8, dest);
      $T19().WriteFieldHeader(2, $T17().Fixed64, dest);
      $T19().WriteBytes(data, 8, 8, dest);
    }
    $T19().EndSubItem(token, dest);
  }; 

  function BclHelpers_WriteNetObject (value, dest, key, options) {
    var flag4 = new JSIL.BoxedVariable(false);
    var flag5 = new JSIL.BoxedVariable(false);
    if (dest === null) {
      throw $S05().Construct("dest");
    }
    var wireType = dest.get_WireType();
    var token = $T19().StartSubItem(null, dest);
    var flag3 = true;
    if ($T10().$Cast(options & $T10().AsReference) > $T10().None) {
      var value2 = ((dest.get_NetCache()).AddObjectKey(value, /* ref */ flag4) | 0);
      $T19().WriteFieldHeader((
          flag4.get()
             ? 1
             : 2)
        , $T17().Variant, dest);
      $T19().WriteInt32(value2, dest);
      if (flag4.get()) {
        flag3 = false;
      }
    }
    var type = new JSIL.BoxedVariable(null);
    if (flag3) {
      if ($T10().$Cast(options & $T10().DynamicType) > $T10().None) {
        type.set(JSIL.GetType(value));
        if ($T12().$As(value) === null) {
          key = (dest.GetTypeKey(/* ref */ type) | 0);
          if ((key | 0) < 0) {
            throw $S04().Construct(JSIL.ConcatString("Dynamic type is not a contract-type: ", (type.get()).get_Name()));
          }
        }
        var value3 = ((dest.get_NetCache()).AddObjectKey(type.get(), /* ref */ flag5) | 0);
        $T19().WriteFieldHeader((
            flag5.get()
               ? 3
               : 4)
          , $T17().Variant, dest);
        $T19().WriteInt32(value3, dest);
        if (!flag5.get()) {
          $T19().WriteFieldHeader(8, $T17().String, dest);
          $T19().WriteString(dest.SerializeType(type.get()), dest);
        }
      }
      $T19().WriteFieldHeader(10, wireType, dest);
      if ($T12().$As(value) !== null) {
        $T19().WriteString($T12().$Cast(value), dest);
      } else {
        $T19().WriteObject(value, key, dest);
      }
    }
    $T19().EndSubItem(token, dest);
  }; 

  function BclHelpers_WriteTimeSpan (timeSpan, dest) {
    $thisType.WriteTimeSpanImpl(timeSpan.MemberwiseClone(), dest, $T01().Unspecified);
  }; 

  function BclHelpers_WriteTimeSpanImpl (timeSpan, dest, kind) {
    if (dest === null) {
      throw $S05().Construct("dest");
    }
    var wireType = dest.get_WireType();
    if (wireType === $T17().Fixed64) {
      $T19().WriteInt64(timeSpan.get_Ticks(), dest);
      return;
    }
    if ((((wireType - $T17().String) | 0) >>> 0) <= (1 >>> 0)) {
      var num = timeSpan.get_Ticks();
      if ($T16().op_Equality(timeSpan.MemberwiseClone(), $T16().MaxValue.MemberwiseClone())) {
        num = $T05().Create(1, 0, 0);
        var timeSpanScale = $T18().MinMax;
      } else if ($T16().op_Equality(timeSpan.MemberwiseClone(), $T16().MinValue.MemberwiseClone())) {
        num = $T05().Create(16777215, 16777215, 65535);
        timeSpanScale = $T18().MinMax;
      } else if (!$T05().op_Inequality(
          $T05().op_Modulus(num, $T05().Create(6930432, 51498, 0)), 
          $T05().Create(0, 0, 0)
        )) {
        timeSpanScale = $T18().Days;
        num = $T05().op_Division(num, $T05().Create(6930432, 51498, 0));
      } else if (!$T05().op_Inequality(
          $T05().op_Modulus(num, $T05().Create(12871680, 2145, 0)), 
          $T05().Create(0, 0, 0)
        )) {
        timeSpanScale = $T18().Hours;
        num = $T05().op_Division(num, $T05().Create(12871680, 2145, 0));
      } else if (!$T05().op_Inequality(
          $T05().op_Modulus(num, $T05().Create(12797440, 35, 0)), 
          $T05().Create(0, 0, 0)
        )) {
        timeSpanScale = $T18().Minutes;
        num = $T05().op_Division(num, $T05().Create(12797440, 35, 0));
      } else if (!$T05().op_Inequality(
          $T05().op_Modulus(num, $T05().Create(10000000, 0, 0)), 
          $T05().Create(0, 0, 0)
        )) {
        timeSpanScale = $T18().Seconds;
        num = $T05().op_Division(num, $T05().Create(10000000, 0, 0));
      } else if (!$T05().op_Inequality(
          $T05().op_Modulus(num, $T05().Create(10000, 0, 0)), 
          $T05().Create(0, 0, 0)
        )) {
        timeSpanScale = $T18().Milliseconds;
        num = $T05().op_Division(num, $T05().Create(10000, 0, 0));
      } else {
        timeSpanScale = $T18().Ticks;
      }
      var token = $T19().StartSubItem(null, dest);
      if ($T05().op_Inequality(num, $T05().Create(0, 0, 0))) {
        $T19().WriteFieldHeader(1, $T17().SignedVariant, dest);
        $T19().WriteInt64(num, dest);
      }
      if ((timeSpanScale.valueOf() | 0) !== 0) {
        $T19().WriteFieldHeader(2, $T17().Variant, dest);
        $T19().WriteInt32(timeSpanScale.valueOf(), dest);
      }
      if ((kind.valueOf() | 0) !== 0) {
        $T19().WriteFieldHeader(3, $T17().Variant, dest);
        $T19().WriteInt32(kind.valueOf(), dest);
      }
      $T19().EndSubItem(token, dest);
      return;
    }
    throw $S03().Construct(JSIL.ConcatString("Unexpected wire-type: ", (dest.get_WireType()).toString()));
  }; 

  JSIL.MakeStaticClass("ProtoBuf.BclHelpers", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "GetUninitializedObject", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")]), 
      BclHelpers_GetUninitializedObject
    );

    $.Method({Static:true , Public:true }, "ReadDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadDateTime
    );

    $.Method({Static:true , Public:true }, "ReadDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadDecimal
    );

    $.Method({Static:true , Public:true }, "ReadGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadGuid
    );

    $.Method({Static:true , Public:true }, "ReadNetObject", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm08.TypeRef("ProtoBuf.ProtoReader"), 
          $.Int32, $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.BclHelpers+NetObjectOptions")
        ]), 
      BclHelpers_ReadNetObject
    );

    $.Method({Static:true , Public:true }, "ReadTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      BclHelpers_ReadTimeSpan
    );

    $.Method({Static:true , Public:false}, "ReadTimeSpanTicks", 
      new JSIL.MethodSignature($.Int64, [$asm08.TypeRef("ProtoBuf.ProtoReader"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTimeKind")])]), 
      BclHelpers_ReadTimeSpanTicks
    );

    $.Method({Static:true , Public:true }, "WriteDateTime", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      BclHelpers_WriteDateTime
    );

    $.Method({Static:true , Public:false}, "WriteDateTimeImpl", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.DateTime"), $asm08.TypeRef("ProtoBuf.ProtoWriter"), 
          $.Boolean
        ]), 
      BclHelpers_WriteDateTimeImpl
    );

    $.Method({Static:true , Public:true }, "WriteDateTimeWithKind", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      BclHelpers_WriteDateTimeWithKind
    );

    $.Method({Static:true , Public:true }, "WriteDecimal", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Decimal"), $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      BclHelpers_WriteDecimal
    );

    $.Method({Static:true , Public:true }, "WriteGuid", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      BclHelpers_WriteGuid
    );

    $.Method({Static:true , Public:true }, "WriteNetObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.BclHelpers+NetObjectOptions")
        ]), 
      BclHelpers_WriteNetObject
    );

    $.Method({Static:true , Public:true }, "WriteTimeSpan", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.TimeSpan"), $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      BclHelpers_WriteTimeSpan
    );

    $.Method({Static:true , Public:false}, "WriteTimeSpanImpl", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.TimeSpan"), $asm08.TypeRef("ProtoBuf.ProtoWriter"), 
          $asm07.TypeRef("System.DateTimeKind")
        ]), 
      BclHelpers_WriteTimeSpanImpl
    );

    $.Constant({Static:true , Public:false}, "FieldTimeSpanValue", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FieldTimeSpanScale", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "FieldTimeSpanKind", $.Int32, 3);

    $.Field({Static:true , Public:false, ReadOnly:true }, "EpochOrigin", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.DateTime")]));

    $.Constant({Static:true , Public:false}, "FieldDecimalLow", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FieldDecimalHigh", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "FieldDecimalSignScale", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "FieldGuidLow", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FieldGuidHigh", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "FieldExistingObjectKey", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FieldNewObjectKey", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "FieldExistingTypeKey", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "FieldNewTypeKey", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "FieldTypeName", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "FieldObject", $.Int32, 10);


    function BclHelpers__cctor () {
      $thisType.EpochOrigin = JSIL.Array.New($T00(), [$S00().Construct(1970, 1, 1, 0, 0, 0, 0, $T01().Unspecified), $S00().Construct(1970, 1, 1, 0, 0, 0, 0, $T01().Utc), $S00().Construct(1970, 1, 1, 0, 0, 0, 0, $T01().Local)]);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BclHelpers__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.BclHelpers+NetObjectOptions */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.BclHelpers+NetObjectOptions", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    AsReference: 1, 
    DynamicType: 2, 
    UseConstructor: 4, 
    LateSet: 8, 
  }
);

/* class ProtoBuf.BufferExtension */ 

(function BufferExtension$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.IO.MemoryStream)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.IO.MemoryStream, null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.IO.MemoryStream, [System.Array.Of($asm07.System.Byte)]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };


  function BufferExtension__ctor () {
  }; 

  function BufferExtension_ProtoBuf_IExtension_BeginAppend () {
    return $S00().Construct();
  }; 

  function BufferExtension_ProtoBuf_IExtension_BeginQuery () {
    if (this.buffer !== null) {
      return $S01().Construct(this.buffer);
    }
    return $T02().Null;
  }; 

  function BufferExtension_ProtoBuf_IExtension_EndAppend (stream, commit) {
    var num = 0;
    try {
      if (!(!commit || ((num = ((stream.get_Length()).ToNumber(4294967295, true) | 0)) <= 0))) {
        var memoryStream = $T00().$Cast(stream);
        if (this.buffer === null) {
          this.buffer = memoryStream.ToArray();
        } else {
          var num2 = (this.buffer.length | 0);
          var to = JSIL.Array.New($T06(), ((num2 + num) | 0));
          $T07().BlockCopy(
            this.buffer, 
            0, 
            to, 
            0, 
            num2
          );
          $T07().BlockCopy(
            $T07().GetBuffer(memoryStream), 
            0, 
            to, 
            num2, 
            num
          );
          this.buffer = to;
        }
      }
    } finally {
      if (stream !== null) {
        $IM00().Call(stream, null);
      }
    }
  }; 

  function BufferExtension_ProtoBuf_IExtension_EndQuery (stream) {
    try {
    } finally {
      if (stream !== null) {
        $IM00().Call(stream, null);
      }
    }
  }; 

  function BufferExtension_ProtoBuf_IExtension_GetLength () {
    if (this.buffer !== null) {
      return this.buffer.length;
    }
    return 0;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.BufferExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BufferExtension__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.BeginAppend", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream")), 
      BufferExtension_ProtoBuf_IExtension_BeginAppend
    )
      .Overrides($asm08.TypeRef("ProtoBuf.IExtension"), "BeginAppend");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.BeginQuery", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream")), 
      BufferExtension_ProtoBuf_IExtension_BeginQuery
    )
      .Overrides($asm08.TypeRef("ProtoBuf.IExtension"), "BeginQuery");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.EndAppend", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean]), 
      BufferExtension_ProtoBuf_IExtension_EndAppend
    )
      .Overrides($asm08.TypeRef("ProtoBuf.IExtension"), "EndAppend");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.EndQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream")), 
      BufferExtension_ProtoBuf_IExtension_EndQuery
    )
      .Overrides($asm08.TypeRef("ProtoBuf.IExtension"), "EndQuery");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.GetLength", 
      JSIL.MethodSignature.Return($.Int32), 
      BufferExtension_ProtoBuf_IExtension_GetLength
    )
      .Overrides($asm08.TypeRef("ProtoBuf.IExtension"), "GetLength");

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.IExtension")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.BufferPool */ 

(function BufferPool$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Threading.Interlocked)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [JSIL.Reference.Of($asm07.System.Object), $asm07.System.Object]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        JSIL.Reference.Of($asm07.System.Object), $asm07.System.Object, 
        $asm07.System.Object
      ]))) ();
  };


  function BufferPool__ctor () {
  }; 

  function BufferPool_Flush () {

    for (var i = 0; i < ($thisType.pool.length | 0); i = ((i + 1) | 0)) {
      $S00().CallStatic($T03(), "Exchange", null, /* ref */ new JSIL.ArrayElementReference($thisType.pool, i), null);
    }
  }; 

  function BufferPool_GetBuffer () {
    var obj = null;

    for (var i = 0; i < ($thisType.pool.length | 0); i = ((i + 1) | 0)) {
      if ((obj = $S00().CallStatic($T03(), "Exchange", null, /* ref */ new JSIL.ArrayElementReference($thisType.pool, i), null)) !== null) {
        return $T04().$Cast(obj);
      }
    }
    return JSIL.Array.New($T05(), 1024);
  }; 

  function BufferPool_ReleaseBufferToPool (/* ref */ buffer) {
    if (buffer.get() === null) {
      return;
    }
    if ((buffer.get().length | 0) === 1024) {

      for (var num = 0; !((num >= ($thisType.pool.length | 0)) || ($S01().CallStatic($T03(), "CompareExchange", null, /* ref */ new JSIL.ArrayElementReference($thisType.pool, num), buffer.get(), null) === null)); num = ((num + 1) | 0)) {
      }
    }
    buffer.set(null);
  }; 

  function BufferPool_ResizeAndFlushLeft (/* ref */ buffer, toFitAtLeastBytes, copyFromIndex, copyBytes) {
    var num = Math.imul(buffer.get().length, 2);
    if (num < (toFitAtLeastBytes | 0)) {
      num = (toFitAtLeastBytes | 0);
    }
    var array = JSIL.Array.New($T05(), num);
    if ((copyBytes | 0) > 0) {
      $T06().BlockCopy(
        buffer.get(), 
        copyFromIndex, 
        array, 
        0, 
        copyBytes
      );
    }
    if ((buffer.get().length | 0) === 1024) {
      $thisType.ReleaseBufferToPool(/* ref */ buffer);
    }
    buffer.set(array);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.BufferPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      BufferPool__ctor
    );

    $.Method({Static:true , Public:false}, "Flush", 
      JSIL.MethodSignature.Void, 
      BufferPool_Flush
    );

    $.Method({Static:true , Public:false}, "GetBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])), 
      BufferPool_GetBuffer
    );

    $.Method({Static:true , Public:false}, "ReleaseBufferToPool", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])), 
      BufferPool_ReleaseBufferToPool
    );

    $.Method({Static:true , Public:false}, "ResizeAndFlushLeft", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $.Int32, 
          $.Int32, $.Int32
        ]), 
      BufferPool_ResizeAndFlushLeft
    );

    $.Constant({Static:true , Public:false}, "PoolSize", $.Int32, 20);

    $.Constant({Static:true , Public:false}, "BufferLength", $.Int32, 1024);

    $.Field({Static:true , Public:false, ReadOnly:true }, "pool", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm07.System.Object, 20);
      });


    function BufferPool__cctor () {
      $thisType.pool = JSIL.Array.New($T00(), 20);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BufferPool__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoBeforeSerializationAttribute */ 

(function ProtoBeforeSerializationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };


  function ProtoBeforeSerializationAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoBeforeSerializationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoBeforeSerializationAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ImmutableObjectAttribute"), function () { return [true]; });

})();

/* class ProtoBuf.ProtoAfterSerializationAttribute */ 

(function ProtoAfterSerializationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };


  function ProtoAfterSerializationAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoAfterSerializationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoAfterSerializationAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ImmutableObjectAttribute"), function () { return [true]; });

})();

/* class ProtoBuf.ProtoBeforeDeserializationAttribute */ 

(function ProtoBeforeDeserializationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };


  function ProtoBeforeDeserializationAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoBeforeDeserializationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoBeforeDeserializationAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ImmutableObjectAttribute"), function () { return [true]; });

})();

/* class ProtoBuf.ProtoAfterDeserializationAttribute */ 

(function ProtoAfterDeserializationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };


  function ProtoAfterDeserializationAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoAfterDeserializationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoAfterDeserializationAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.ImmutableObjectAttribute"), function () { return [true]; });

})();

/* enum ProtoBuf.DataFormat */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.DataFormat", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    ZigZag: 1, 
    TwosComplement: 2, 
    FixedSize: 3, 
    Group: 4, 
  }
);

/* struct ProtoBuf.DiscriminatedUnionObject */ 

(function DiscriminatedUnionObject$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Object)) ();
  };


  function DiscriminatedUnionObject__ctor (discriminator, value) {
    this._discriminator = (~discriminator | 0);
    this.Object = value;
  }; 

  function DiscriminatedUnionObject_Is (discriminator) {
    return ((this._discriminator | 0) === (~discriminator | 0));
  }; 

  function DiscriminatedUnionObject_Reset (/* ref */ value, discriminator) {
    if ((value.get()).Is(discriminator)) {
      value.set(new $thisType());
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.DiscriminatedUnionObject", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      DiscriminatedUnionObject__ctor
    );

    $.Method({Static:false, Public:true }, "Is", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      DiscriminatedUnionObject_Is
    );

    $.Method({Static:true , Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Int32]), 
      DiscriminatedUnionObject_Reset
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_discriminator", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "Object", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct ProtoBuf.DiscriminatedUnion64 */ 

(function DiscriminatedUnion64$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Boolean)) ();
  };


  function DiscriminatedUnion64__ctor$00 (discriminator) {
    JSIL.CopyMembers(new $thisType(), this);
    this._discriminator = (~discriminator | 0);
  }; 

  function DiscriminatedUnion64__ctor$01 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Int64 = value;
  }; 

  function DiscriminatedUnion64__ctor$02 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Int32 = (value | 0);
  }; 

  function DiscriminatedUnion64__ctor$03 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.UInt64 = value;
  }; 

  function DiscriminatedUnion64__ctor$04 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.UInt32 = (value >>> 0);
  }; 

  function DiscriminatedUnion64__ctor$05 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Single = +value;
  }; 

  function DiscriminatedUnion64__ctor$06 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Double = +value;
  }; 

  function DiscriminatedUnion64__ctor$07 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Boolean = value;
  }; 

  function DiscriminatedUnion64_Is (discriminator) {
    return ((this._discriminator | 0) === (~discriminator | 0));
  }; 

  function DiscriminatedUnion64_Reset (/* ref */ value, discriminator) {
    if ((value.get()).Is(discriminator)) {
      value.set(new $thisType());
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.DiscriminatedUnion64", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      DiscriminatedUnion64__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int64]), 
      DiscriminatedUnion64__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      DiscriminatedUnion64__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.UInt64]), 
      DiscriminatedUnion64__ctor$03
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.UInt32]), 
      DiscriminatedUnion64__ctor$04
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single]), 
      DiscriminatedUnion64__ctor$05
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Double]), 
      DiscriminatedUnion64__ctor$06
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean]), 
      DiscriminatedUnion64__ctor$07
    );

    $.Method({Static:false, Public:true }, "Is", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      DiscriminatedUnion64_Is
    );

    $.Method({Static:true , Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Int32]), 
      DiscriminatedUnion64_Reset
    );

    $.Field({Static:false, Public:false, ReadOnly:true , Offset: 0}, "_discriminator", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "Int64", $.Int64);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "UInt64", $.UInt64);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "Int32", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "UInt32", $.UInt32);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "Boolean", $.Boolean);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "Single", $.Single);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "Double", $.Double);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct ProtoBuf.DiscriminatedUnion64Object */ 

(function DiscriminatedUnion64Object$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Object)) ();
  };


  function DiscriminatedUnion64Object__ctor$00 (discriminator) {
    JSIL.CopyMembers(new $thisType(), this);
    this._discriminator = (~discriminator | 0);
  }; 

  function DiscriminatedUnion64Object__ctor$01 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Int64 = value;
  }; 

  function DiscriminatedUnion64Object__ctor$02 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Int32 = (value | 0);
  }; 

  function DiscriminatedUnion64Object__ctor$03 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.UInt64 = value;
  }; 

  function DiscriminatedUnion64Object__ctor$04 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.UInt32 = (value >>> 0);
  }; 

  function DiscriminatedUnion64Object__ctor$05 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Single = +value;
  }; 

  function DiscriminatedUnion64Object__ctor$06 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Double = +value;
  }; 

  function DiscriminatedUnion64Object__ctor$07 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Boolean = value;
  }; 

  function DiscriminatedUnion64Object__ctor$08 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Object = value;
  }; 

  function DiscriminatedUnion64Object_Is (discriminator) {
    return ((this._discriminator | 0) === (~discriminator | 0));
  }; 

  function DiscriminatedUnion64Object_Reset (/* ref */ value, discriminator) {
    if ((value.get()).Is(discriminator)) {
      value.set(new $thisType());
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.DiscriminatedUnion64Object", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      DiscriminatedUnion64Object__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int64]), 
      DiscriminatedUnion64Object__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      DiscriminatedUnion64Object__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.UInt64]), 
      DiscriminatedUnion64Object__ctor$03
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.UInt32]), 
      DiscriminatedUnion64Object__ctor$04
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single]), 
      DiscriminatedUnion64Object__ctor$05
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Double]), 
      DiscriminatedUnion64Object__ctor$06
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean]), 
      DiscriminatedUnion64Object__ctor$07
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      DiscriminatedUnion64Object__ctor$08
    );

    $.Method({Static:false, Public:true }, "Is", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      DiscriminatedUnion64Object_Is
    );

    $.Method({Static:true , Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Int32]), 
      DiscriminatedUnion64Object_Reset
    );

    $.Field({Static:false, Public:false, ReadOnly:true , Offset: 0}, "_discriminator", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "Int64", $.Int64);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "UInt64", $.UInt64);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "Int32", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "UInt32", $.UInt32);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "Boolean", $.Boolean);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "Single", $.Single);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "Double", $.Double);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 16}, "Object", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct ProtoBuf.DiscriminatedUnion32 */ 

(function DiscriminatedUnion32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };


  function DiscriminatedUnion32__ctor$00 (discriminator) {
    JSIL.CopyMembers(new $thisType(), this);
    this._discriminator = (~discriminator | 0);
  }; 

  function DiscriminatedUnion32__ctor$01 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Int32 = (value | 0);
  }; 

  function DiscriminatedUnion32__ctor$02 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.UInt32 = (value >>> 0);
  }; 

  function DiscriminatedUnion32__ctor$03 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Single = +value;
  }; 

  function DiscriminatedUnion32__ctor$04 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Boolean = value;
  }; 

  function DiscriminatedUnion32_Is (discriminator) {
    return ((this._discriminator | 0) === (~discriminator | 0));
  }; 

  function DiscriminatedUnion32_Reset (/* ref */ value, discriminator) {
    if ((value.get()).Is(discriminator)) {
      value.set(new $thisType());
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.DiscriminatedUnion32", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      DiscriminatedUnion32__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      DiscriminatedUnion32__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.UInt32]), 
      DiscriminatedUnion32__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single]), 
      DiscriminatedUnion32__ctor$03
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean]), 
      DiscriminatedUnion32__ctor$04
    );

    $.Method({Static:false, Public:true }, "Is", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      DiscriminatedUnion32_Is
    );

    $.Method({Static:true , Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Int32]), 
      DiscriminatedUnion32_Reset
    );

    $.Field({Static:false, Public:false, ReadOnly:true , Offset: 0}, "_discriminator", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 4}, "Int32", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 4}, "UInt32", $.UInt32);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 4}, "Boolean", $.Boolean);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 4}, "Single", $.Single);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct ProtoBuf.DiscriminatedUnion32Object */ 

(function DiscriminatedUnion32Object$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };


  function DiscriminatedUnion32Object__ctor$00 (discriminator) {
    JSIL.CopyMembers(new $thisType(), this);
    this._discriminator = (~discriminator | 0);
  }; 

  function DiscriminatedUnion32Object__ctor$01 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Int32 = (value | 0);
  }; 

  function DiscriminatedUnion32Object__ctor$02 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.UInt32 = (value >>> 0);
  }; 

  function DiscriminatedUnion32Object__ctor$03 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Single = +value;
  }; 

  function DiscriminatedUnion32Object__ctor$04 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Boolean = value;
  }; 

  function DiscriminatedUnion32Object__ctor$05 (discriminator, value) {
    (JSIL.CopyMembers(this.MemberwiseClone(), this), 
      $thisType.prototype._ctor.call(this, discriminator));
    this.Object = value;
  }; 

  function DiscriminatedUnion32Object_Is (discriminator) {
    return ((this._discriminator | 0) === (~discriminator | 0));
  }; 

  function DiscriminatedUnion32Object_Reset (/* ref */ value, discriminator) {
    if ((value.get()).Is(discriminator)) {
      value.set(new $thisType());
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.DiscriminatedUnion32Object", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      DiscriminatedUnion32Object__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32]), 
      DiscriminatedUnion32Object__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.UInt32]), 
      DiscriminatedUnion32Object__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single]), 
      DiscriminatedUnion32Object__ctor$03
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean]), 
      DiscriminatedUnion32Object__ctor$04
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      DiscriminatedUnion32Object__ctor$05
    );

    $.Method({Static:false, Public:true }, "Is", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      DiscriminatedUnion32Object_Is
    );

    $.Method({Static:true , Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Int32]), 
      DiscriminatedUnion32Object_Reset
    );

    $.Field({Static:false, Public:false, ReadOnly:true , Offset: 0}, "_discriminator", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 4}, "Int32", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 4}, "UInt32", $.UInt32);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 4}, "Boolean", $.Boolean);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 4}, "Single", $.Single);

    $.Field({Static:false, Public:true , ReadOnly:true , Offset: 8}, "Object", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Extensible */ 

(function Extensible$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.IExtensible)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.ExtensibleUtil)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.IExtension)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.BufferExtension)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Collections.IEnumerable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm08.ProtoBuf.IExtensible, $asm07.System.Int32, 
        $asm08.ProtoBuf.DataFormat, "!!0"
      ], ["TValue"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [
        $asm08.ProtoBuf.IExtensible, $asm07.System.Int32, 
        $asm08.ProtoBuf.DataFormat
      ], ["TValue"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [
        $asm08.ProtoBuf.IExtensible, $asm07.System.Int32, 
        $asm08.ProtoBuf.DataFormat, $jsilcore.TypeRef("JSIL.Reference", ["!!0"])
      ], ["TValue"]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [
        $asm08.ProtoBuf.IExtensible, $asm07.System.Int32, 
        $asm08.ProtoBuf.DataFormat, $asm07.System.Boolean, 
        $jsilcore.TypeRef("JSIL.Reference", ["!!0"])
      ], ["TValue"]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm07.System.Collections.IEnumerator.get_Current)) ();
  };


  function Extensible__ctor () {
  }; 

  function Extensible_AppendValue$b1$00 (TValue, instance, tag, value) {
    $S00().CallStatic($thisType, "AppendValue$b1", [TValue], instance, tag, $T03().Default, JSIL.CloneParameter(TValue, value));
  }; 

  function Extensible_AppendValue$b1$01 (TValue, instance, tag, format, value) {
    $T04().AppendExtendValue(
      $T05().get_Default(), 
      instance, 
      tag, 
      format, 
      JSIL.CloneParameter(TValue, value)
    );
  }; 

  function Extensible_AppendValue (model, instance, tag, format, value) {
    $T04().AppendExtendValue(
      model, 
      instance, 
      tag, 
      format, 
      value
    );
  }; 

  function Extensible_GetExtensionObject$02 (createIfMissing) {
    return $thisType.GetExtensionObject(/* ref */ new JSIL.MemberReference(this, "extensionObject"), createIfMissing);
  }; 

  function Extensible_GetExtensionObject$03 (/* ref */ extensionObject, createIfMissing) {
    if (!(!createIfMissing || (extensionObject.get() !== null))) {
      extensionObject.set(new ($T0A())());
    }
    return extensionObject.get();
  }; 

  function Extensible_GetValue$b1$04 (TValue, instance, tag) {
    return $S01().CallStatic($thisType, "GetValue$b1", [TValue], instance, tag, $T03().Default);
  }; 

  function Extensible_GetValue$b1$05 (TValue, instance, tag, format) {
    var result = new JSIL.BoxedVariable((
        TValue.IsValueType
           ? JSIL.CreateInstanceOfType(TValue)
           : null)
    );
    $S02().CallStatic($thisType, "TryGetValue$b1", [TValue], instance, tag, format, /* ref */ result);
    return result.get();
  }; 

  function Extensible_GetValues$b1$06 (TValue, instance, tag) {
    return $T04().GetExtendedValues$b1(TValue)(
      instance, 
      tag, 
      $T03().Default, 
      false, 
      false
    );
  }; 

  function Extensible_GetValues$b1$07 (TValue, instance, tag, format) {
    return $T04().GetExtendedValues$b1(TValue)(
      instance, 
      tag, 
      format, 
      false, 
      false
    );
  }; 

  function Extensible_GetValues (model, type, instance, tag, format) {
    return $T04().GetExtendedValues(
      model, 
      type, 
      instance, 
      tag, 
      format, 
      false, 
      false
    );
  }; 

  function Extensible_ProtoBuf_IExtensible_GetExtensionObject (createIfMissing) {
    return this.GetExtensionObject(createIfMissing);
  }; 

  function Extensible_TryGetValue$b1$08 (TValue, instance, tag, /* ref */ value) {
    return $S02().CallStatic($thisType, "TryGetValue$b1", [TValue], instance, tag, $T03().Default, /* ref */ value);
  }; 

  function Extensible_TryGetValue$b1$09 (TValue, instance, tag, format, /* ref */ value) {
    return $S03().CallStatic($thisType, "TryGetValue$b1", [TValue], 
      instance, 
      tag, 
      format, 
      false, 
      /* ref */ value
    );
  }; 

  function Extensible_TryGetValue$b1$0A (TValue, instance, tag, format, allowDefinedTag, /* ref */ value) {
    var $im00 = $asm07.System.Collections.Generic.IEnumerable$b1.Of(TValue).GetEnumerator;
    var $im01 = $asm07.System.Collections.Generic.IEnumerator$b1.Of(TValue).get_Current;
    value.set((
        TValue.IsValueType
           ? JSIL.CreateInstanceOfType(TValue)
           : null)
    );
    var result = false;
    var enumerator = $im00.Call($T04().GetExtendedValues$b1(TValue)(
        instance, 
        tag, 
        format, 
        true, 
        allowDefinedTag
      ), null);
    try {

      while ($IM00().Call(enumerator, null)) {
        var current = $im01.Call(enumerator, null);
        value.set(current);
        result = true;
      }
    } finally {
      if (enumerator !== null) {
        $IM01().Call(enumerator, null);
      }
    }
    return result;
  }; 

  function Extensible_TryGetValue (model, type, instance, tag, format, allowDefinedTag, /* ref */ value) {
    value.set(null);
    var result = false;
    var enumerator = $IM02().Call($T04().GetExtendedValues(
        model, 
        type, 
        instance, 
        tag, 
        format, 
        true, 
        allowDefinedTag
      ), null);
    try {

      while ($IM00().Call(enumerator, null)) {
        var current = $IM03().Call(enumerator, null);
        value.set(current);
        result = true;
      }
    } finally {
      var disposable = $T0C().$As(enumerator);
      if (disposable !== null) {
        $IM01().Call(disposable, null);
      }
    }
    return result;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Extensible", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Extensible__ctor
    );

    $.Method({Static:true , Public:true }, "AppendValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          "!!0"
        ], ["TValue"]), 
      Extensible_AppendValue$b1$00
    );

    $.Method({Static:true , Public:true }, "AppendValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.DataFormat"), "!!0"
        ], ["TValue"]), 
      Extensible_AppendValue$b1$01
    );

    $.Method({Static:true , Public:true }, "AppendValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm08.TypeRef("ProtoBuf.IExtensible"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.DataFormat"), 
          $.Object
        ]), 
      Extensible_AppendValue
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GetExtensionObject", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.IExtension"), [$.Boolean]), 
      Extensible_GetExtensionObject$02
    );

    $.Method({Static:true , Public:true }, "GetExtensionObject", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.IExtension"), [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("ProtoBuf.IExtension")]), $.Boolean]), 
      Extensible_GetExtensionObject$03
    );

    $.Method({Static:true , Public:true }, "GetValue", 
      new JSIL.MethodSignature("!!0", [$asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32], ["TValue"]), 
      Extensible_GetValue$b1$04
    );

    $.Method({Static:true , Public:true }, "GetValue", 
      new JSIL.MethodSignature("!!0", [
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.DataFormat")
        ], ["TValue"]), 
      Extensible_GetValue$b1$05
    );

    $.Method({Static:true , Public:true }, "GetValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32], ["TValue"]), 
      Extensible_GetValues$b1$06
    );

    $.Method({Static:true , Public:true }, "GetValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.DataFormat")
        ], ["TValue"]), 
      Extensible_GetValues$b1$07
    );

    $.Method({Static:true , Public:true }, "GetValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerable"), [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.DataFormat")
        ]), 
      Extensible_GetValues
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtensible.GetExtensionObject", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.IExtension"), [$.Boolean]), 
      Extensible_ProtoBuf_IExtensible_GetExtensionObject
    )
      .Overrides($asm08.TypeRef("ProtoBuf.IExtensible"), "GetExtensionObject");

    $.Method({Static:true , Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", ["!!0"])
        ], ["TValue"]), 
      Extensible_TryGetValue$b1$08
    );

    $.Method({Static:true , Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.DataFormat"), $jsilcore.TypeRef("JSIL.Reference", ["!!0"])
        ], ["TValue"]), 
      Extensible_TryGetValue$b1$09
    );

    $.Method({Static:true , Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.DataFormat"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", ["!!0"])
        ], ["TValue"]), 
      Extensible_TryGetValue$b1$0A
    );

    $.Method({Static:true , Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.DataFormat"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      Extensible_TryGetValue
    );

    $.Field({Static:false, Public:false}, "extensionObject", $asm08.TypeRef("ProtoBuf.IExtension"));

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.IExtensible")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ExtensibleUtil */ 

(function ExtensibleUtil$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.IExtensible)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.IExtension)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm08.ProtoBuf.ExtensibleUtil_$lGetExtendedValues$gd__1)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.IExtensible.GetExtensionObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.IExtension.BeginAppend)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.IExtension.EndAppend)) ();
  };


  function ExtensibleUtil_AppendExtendValue (model, instance, tag, format, value) {
    if (instance === null) {
      throw $S00().Construct("instance");
    }
    if (value === null) {
      throw $S00().Construct("value");
    }
    var extensionObject = $IM00().Call(instance, null, true);
    if (extensionObject === null) {
      throw $S01().Construct("No extension object available; appended data would be lost.");
    }
    var commit = false;
    var stream = $IM01().Call(extensionObject, null);
    try {
      var protoWriter = new ($T0A())(stream, model, null);
      try {
        model.TrySerializeAuxiliaryType(
          protoWriter, 
          null, 
          format, 
          tag, 
          value, 
          false
        );
        protoWriter.Close();
      } finally {
        if (protoWriter !== null) {
          $IM02().Call(protoWriter, null);
        }
      }
      commit = true;
    } finally {
      $IM03().Call(extensionObject, null, stream, commit);
    }
  }; 

  function ExtensibleUtil_GetExtendedValues$b1 (TValue, instance, tag, format, singleton, allowDefinedTag) {
    var expr_07 = new ($asm08.ProtoBuf.ExtensibleUtil_$lGetExtendedValues$gd__0$b1.Of(TValue)) (-2);
    expr_07.$l$g3__instance = instance;
    expr_07.$l$g3__tag = (tag | 0);
    expr_07.$l$g3__format = format;
    expr_07.$l$g3__singleton = singleton;
    expr_07.$l$g3__allowDefinedTag = allowDefinedTag;
    return expr_07;
  }; 

  function ExtensibleUtil_GetExtendedValues (model, type, instance, tag, format, singleton, allowDefinedTag) {
    var expr_07 = new ($T0D())(-2);
    expr_07.$l$g3__model = model;
    expr_07.$l$g3__type = type;
    expr_07.$l$g3__instance = instance;
    expr_07.$l$g3__tag = (tag | 0);
    expr_07.$l$g3__format = format;
    expr_07.$l$g3__singleton = singleton;
    return expr_07;
  }; 

  JSIL.MakeStaticClass("ProtoBuf.ExtensibleUtil", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "AppendExtendValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm08.TypeRef("ProtoBuf.IExtensible"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.DataFormat"), 
          $.Object
        ]), 
      ExtensibleUtil_AppendExtendValue
    );

    $.Method({Static:true , Public:false}, "GetExtendedValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.DataFormat"), $.Boolean, 
          $.Boolean
        ], ["TValue"]), 
      ExtensibleUtil_GetExtendedValues$b1
    );

    $.Method({Static:true , Public:false}, "GetExtendedValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerable"), [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.DataFormat"), $.Boolean, 
          $.Boolean
        ]), 
      ExtensibleUtil_GetExtendedValues
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ExtensibleUtil+<GetExtendedValues>d__0`1 */ 

(function $lGetExtendedValues$gd__0$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Collections.IEnumerable)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ExtensibleUtil)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm07.System.Collections.IEnumerator.get_Current)) ();
  };


  function $lGetExtendedValues$gd__0$b1__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetExtendedValues$gd__0$b1_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    var disposable = $T02().$As(this.$l$g7__wrap1);
    if (disposable !== null) {
      $IM00().Call(disposable, null);
    }
  }; 

  function $lGetExtendedValues$gd__0$b1_MoveNext ($exception) {
    try {
      var num = (this.$l$g1__state | 0);
      if (num !== 0) {
        if (num !== 1) {
          var result = false;
          return result;
        }
        this.$l$g1__state = -3;
      } else {
        this.$l$g1__state = -1;
        this.$l$g7__wrap1 = $IM01().Call($T06().GetExtendedValues(
            $T07().get_Default(), 
            $thisType.TValue.get(this), 
            this.instance, 
            this.tag, 
            this.format, 
            this.singleton, 
            this.allowDefinedTag
          ), null);
        this.$l$g1__state = -3;
      }
      if (!$IM02().Call(this.$l$g7__wrap1, null)) {
        this.$l$gm__Finally1();
        this.$l$g7__wrap1 = null;
        result = false;
      } else {
        var tValue = JSIL.CloneParameter($thisType.TValue.get(this), $thisType.TValue.get(this).$Cast($IM03().Call(this.$l$g7__wrap1, null)));
        this.$l$g2__current = JSIL.CloneParameter($thisType.TValue.get(this), tValue);
        this.$l$g1__state = 1;
        result = true;
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lGetExtendedValues$gd__0$b1_System_Collections_Generic_IEnumerable$lTValue$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetExtendedValues$gd__ = this;
    } else {
      $lGetExtendedValues$gd__ = new ($thisType.Of($thisType.TValue.get(this))) (0);
    }
    $lGetExtendedValues$gd__.instance = this.$l$g3__instance;
    $lGetExtendedValues$gd__.tag = (this.$l$g3__tag | 0);
    $lGetExtendedValues$gd__.format = this.$l$g3__format;
    $lGetExtendedValues$gd__.singleton = this.$l$g3__singleton;
    $lGetExtendedValues$gd__.allowDefinedTag = this.$l$g3__allowDefinedTag;
    return $lGetExtendedValues$gd__;
  }; 

  function $lGetExtendedValues$gd__0$b1_System_Collections_Generic_IEnumerator$lTValue$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetExtendedValues$gd__0$b1_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lTValue$g_GetEnumerator();
  }; 

  function $lGetExtendedValues$gd__0$b1_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetExtendedValues$gd__0$b1_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  function $lGetExtendedValues$gd__0$b1_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if (!((num !== -3) && (num !== 1))) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.ExtensibleUtil+<GetExtendedValues>d__0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetExtendedValues$gd__0$b1__ctor
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lGetExtendedValues$gd__0$b1_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetExtendedValues$gd__0$b1_MoveNext
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTValue$g.GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]), null), 
      $lGetExtendedValues$gd__0$b1_System_Collections_Generic_IEnumerable$lTValue$g_GetEnumerator
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TValue")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTValue$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TValue"), null), 
      $lGetExtendedValues$gd__0$b1_System_Collections_Generic_IEnumerator$lTValue$g_get_Current
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator")), 
      $lGetExtendedValues$gd__0$b1_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetExtendedValues$gd__0$b1_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetExtendedValues$gd__0$b1_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetExtendedValues$gd__0$b1_System_IDisposable_Dispose
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TValue"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "instance", $asm08.TypeRef("ProtoBuf.IExtensible"));

    $.Field({Static:false, Public:true }, "$l$g3__instance", $asm08.TypeRef("ProtoBuf.IExtensible"));

    $.Field({Static:false, Public:false}, "tag", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__tag", $.Int32);

    $.Field({Static:false, Public:false}, "format", $asm08.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:true }, "$l$g3__format", $asm08.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:false}, "singleton", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g3__singleton", $.Boolean);

    $.Field({Static:false, Public:false}, "allowDefinedTag", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g3__allowDefinedTag", $.Boolean);

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTValue$g.Current", $.GenericParameter("TValue"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TValue")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TValue")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class ProtoBuf.ExtensibleUtil+<GetExtendedValues>d__1 */ 

(function $lGetExtendedValues$gd__1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.IExtension)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.IExtensible)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm08.ProtoBuf.ProtoReader, [
        $asm07.System.IO.Stream, $asm08.ProtoBuf.Meta.TypeModel, 
        $asm08.ProtoBuf.SerializationContext, $asm07.System.Int64
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.IExtension.EndQuery)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.IExtensible.GetExtensionObject)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.IExtension.BeginQuery)) ();
  };


  function $lGetExtendedValues$gd__1__ctor ($l$g1__state) {
    this.$l$g1__state = ($l$g1__state | 0);
    this.$l$gl__initialThreadId = ($T01().get_CurrentThread().get_ManagedThreadId() | 0);
  }; 

  function $lGetExtendedValues$gd__1_$l$gm__Finally1 () {
    this.$l$g1__state = -1;
    $T02().Recycle(this.$lreader$g5__1);
    $IM00().Call(this.$lextn$g5__2, null, this.$lstream$g5__3);
  }; 

  function $lGetExtendedValues$gd__1_MoveNext ($exception) {
    var obj = new JSIL.BoxedVariable(null);
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$l$g1__state) {
              case 0: 
                this.$l$g1__state = -1;
                if (this.instance === null) {
                  throw $S00().Construct("instance");
                }
                if ((this.tag | 0) <= 0) {
                  throw $S01().Construct("tag");
                }
                this.$lextn$g5__2 = $IM01().Call(this.instance, null, false);
                if (this.$lextn$g5__2 === null) {
                  var result = false;
                  return result;
                }
                this.$lstream$g5__3 = $IM02().Call(this.$lextn$g5__2, null);
                obj.set(null);
                this.$lreader$g5__1 = null;
                this.$l$g1__state = -3;
                var context = new ($T0A())();
                this.$lreader$g5__1 = $S02().CallStatic($T02(), "Create", null, this.$lstream$g5__3, this.model, context, $T0B().Create(16777215, 16777215, 65535));
                break;

              case 1: 
                this.$l$g1__state = -3;
                obj.set(null);
                break;

              case 2: 
                this.$l$g1__state = -3;
                $label0 = 1 /* goto IL_12A */ ;
                continue $labelgroup0;

              default: 
                result = false;
                return result;

            }

            while ((this.model).TryDeserializeAuxiliaryType(
                this.$lreader$g5__1, 
                this.format, 
                this.tag, 
                this.type, 
                /* ref */ obj, 
                true, 
                false, 
                false, 
                false
              ) && (obj.get() !== null)) {
              if (!this.singleton) {
                this.$l$g2__current = obj.get();
                this.$l$g1__state = 1;
                result = true;
                return result;
              }
            }
            if (!(!this.singleton || (obj.get() === null))) {
              this.$l$g2__current = obj.get();
              this.$l$g1__state = 2;
              result = true;
              return result;
            }

            $label0 = 1 /* goto IL_12A */ ;
            continue $labelgroup0;
          case 1: /* IL_12A */ 
            this.$l$gm__Finally1();
            result = false;

            break $labelgroup0;
        }
      }
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  }; 

  function $lGetExtendedValues$gd__1_System_Collections_Generic_IEnumerable$lSystem_Object$g_GetEnumerator () {
    if (!(((this.$l$g1__state | 0) !== -2) || ((this.$l$gl__initialThreadId | 0) !== ($T01().get_CurrentThread().get_ManagedThreadId() | 0)))) {
      this.$l$g1__state = 0;
      var $lGetExtendedValues$gd__ = this;
    } else {
      $lGetExtendedValues$gd__ = new $thisType(0);
    }
    $lGetExtendedValues$gd__.model = this.$l$g3__model;
    $lGetExtendedValues$gd__.type = this.$l$g3__type;
    $lGetExtendedValues$gd__.instance = this.$l$g3__instance;
    $lGetExtendedValues$gd__.tag = (this.$l$g3__tag | 0);
    $lGetExtendedValues$gd__.format = this.$l$g3__format;
    $lGetExtendedValues$gd__.singleton = this.$l$g3__singleton;
    return $lGetExtendedValues$gd__;
  }; 

  function $lGetExtendedValues$gd__1_System_Collections_Generic_IEnumerator$lSystem_Object$g_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetExtendedValues$gd__1_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lSystem_Object$g_GetEnumerator();
  }; 

  function $lGetExtendedValues$gd__1_System_Collections_IEnumerator_get_Current () {
    return this.$l$g2__current;
  }; 

  function $lGetExtendedValues$gd__1_System_Collections_IEnumerator_Reset () {
    throw $S03().Construct();
  }; 

  function $lGetExtendedValues$gd__1_System_IDisposable_Dispose () {
    var num = (this.$l$g1__state | 0);
    if (!((num !== -3) && ((((num - 1) | 0) >>> 0) > (1 >>> 0)))) {
      try {
      } finally {
        this.$l$gm__Finally1();
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.ExtensibleUtil+<GetExtendedValues>d__1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      $lGetExtendedValues$gd__1__ctor
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void, 
      $lGetExtendedValues$gd__1_$l$gm__Finally1
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      $lGetExtendedValues$gd__1_MoveNext
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Object$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object])), 
      $lGetExtendedValues$gd__1_System_Collections_Generic_IEnumerable$lSystem_Object$g_GetEnumerator
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Object")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetExtendedValues$gd__1_System_Collections_Generic_IEnumerator$lSystem_Object$g_get_Current
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Object")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator")), 
      $lGetExtendedValues$gd__1_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      $lGetExtendedValues$gd__1_System_Collections_IEnumerator_get_Current
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      $lGetExtendedValues$gd__1_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      $lGetExtendedValues$gd__1_System_IDisposable_Dispose
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Object);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "instance", $asm08.TypeRef("ProtoBuf.IExtensible"));

    $.Field({Static:false, Public:true }, "$l$g3__instance", $asm08.TypeRef("ProtoBuf.IExtensible"));

    $.Field({Static:false, Public:false}, "tag", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__tag", $.Int32);

    $.Field({Static:false, Public:false}, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:true }, "$l$g3__model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:false}, "singleton", $.Boolean);

    $.Field({Static:false, Public:true }, "$l$g3__singleton", $.Boolean);

    $.Field({Static:false, Public:false}, "$lreader$g5__1", $asm08.TypeRef("ProtoBuf.ProtoReader"));

    $.Field({Static:false, Public:false}, "format", $asm08.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:true }, "$l$g3__format", $asm08.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:true }, "$l$g3__type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "$lextn$g5__2", $asm08.TypeRef("ProtoBuf.IExtension"));

    $.Field({Static:false, Public:false}, "$lstream$g5__3", $asm07.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class ProtoBuf.Helpers */ 

(function Helpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Text.StringBuilder)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Buffer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.IO.MemoryStream)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm07.System.Type))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Reflection.BindingFlags)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Reflection.PropertyInfo)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.PropertyInfo))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.FieldInfo))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.MemberInfo))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Array)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.Reflection.FieldInfo)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.System.Reflection.MemberTypes)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.TypeCode)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm08.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.TimeSpan)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0A.System.Uri)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.Nullable)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm07.System.Enum)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize(System.Array.Of($asm07.System.Int32))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Reflection.MethodInfo, [$asm07.System.String, $asm07.System.Reflection.BindingFlags]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Reflection.PropertyInfo, [$asm07.System.String, $asm07.System.Reflection.BindingFlags]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Type]))) ();
  };


  function Helpers__ctor () {
  }; 

  function Helpers_AppendLine (builder) {
    return builder.AppendLine();
  }; 

  function Helpers_BlockCopy (from, fromIndex, to, toIndex, count) {
    $T04().BlockCopy(
      from, 
      fromIndex, 
      to, 
      toIndex, 
      count
    );
  }; 

  function Helpers_DebugAssert$00 (condition, message) {
  }; 

  function Helpers_DebugAssert$01 (condition, message, args) {
  }; 

  function Helpers_DebugAssert$02 (condition) {
  }; 

  function Helpers_DebugWriteLine$03 (message, obj) {
  }; 

  function Helpers_DebugWriteLine$04 (message) {
  }; 

  function Helpers_GetAssembly (type) {
    return type.get_Assembly();
  }; 

  function Helpers_GetBuffer (ms) {
    return ms.GetBuffer();
  }; 

  function Helpers_GetConstructor (type, parameterTypes, nonPublic) {
    return type.GetConstructor((
        nonPublic
           ? $T0B().$Flags("Instance", "NonPublic", "Public")
           : $T0B().$Flags("Instance", "Public"))
      , null, parameterTypes, null);
  }; 

  function Helpers_GetConstructors (type, nonPublic) {
    return type.GetConstructors((
        nonPublic
           ? $T0B().$Flags("Instance", "NonPublic", "Public")
           : $T0B().$Flags("Instance", "Public"))
    );
  }; 

  function Helpers_GetGetMethod (property, nonPublic, allowInternal) {
    if ($T0C().op_Equality(property, null)) {
      return null;
    }
    var methodInfo = property.GetGetMethod(nonPublic);
    if (($T0D().op_Equality(methodInfo, null) && 
        !nonPublic) & allowInternal) {
      methodInfo = property.GetGetMethod(true);
      if (!(!$T0D().op_Equality(methodInfo, null) || 
          methodInfo.get_IsAssembly() || methodInfo.get_IsFamilyOrAssembly())) {
        methodInfo = null;
      }
    }
    return methodInfo;
  }; 

  function Helpers_GetInstanceFieldsAndProperties (type, publicOnly) {
    var bindingAttr = (
      publicOnly
         ? $T0B().$Flags("Instance", "Public")
         : $T0B().$Flags("Instance", "NonPublic", "Public"))
    ;
    var properties = type.GetProperties(bindingAttr);
    var fields = type.GetFields(bindingAttr);
    var array = JSIL.Array.New($T12(), (((fields.length | 0) + (properties.length | 0)) | 0));
    JSIL.Array.CopyTo(properties, array, 0);
    JSIL.Array.CopyTo(fields, array, properties.length);
    return array;
  }; 

  function Helpers_GetInstanceMethod$05 (declaringType, name) {
    return $S00().CallVirtual("GetMethod", null, declaringType, name, $T0B().$Flags("Instance", "NonPublic", "Public"));
  }; 

  function Helpers_GetInstanceMethod$06 (declaringType, name, types) {
    if (types === null) {
      types = $thisType.EmptyTypes;
    }
    return declaringType.GetMethod(
      name, 
      $T0B().$Flags("Instance", "NonPublic", "Public"), 
      null, 
      types, 
      null
    );
  }; 

  function Helpers_GetMemberType (member) {
    var memberType = member.get_MemberType();
    if (memberType === $T15().Field) {
      return ($T14().$Cast(member)).get_FieldType();
    }
    if (memberType !== $T15().Property) {
      return null;
    }
    return ($T0C().$Cast(member)).get_PropertyType();
  }; 

  function Helpers_GetProperty (type, name, nonPublic) {
    return $S01().CallVirtual("GetProperty", null, type, name, (
        nonPublic
           ? $T0B().$Flags("Instance", "NonPublic", "Public")
           : $T0B().$Flags("Instance", "Public"))
    );
  }; 

  function Helpers_GetSetMethod (property, nonPublic, allowInternal) {
    if ($T0C().op_Equality(property, null)) {
      return null;
    }
    var methodInfo = property.GetSetMethod(nonPublic);
    if (($T0D().op_Equality(methodInfo, null) && 
        !nonPublic) & allowInternal) {
      methodInfo = property.GetGetMethod(true);
      if (!(!$T0D().op_Equality(methodInfo, null) || 
          methodInfo.get_IsAssembly() || methodInfo.get_IsFamilyOrAssembly())) {
        methodInfo = null;
      }
    }
    return methodInfo;
  }; 

  function Helpers_GetStaticMethod$07 (declaringType, name) {
    return $S00().CallVirtual("GetMethod", null, declaringType, name, $T0B().$Flags("NonPublic", "Public", "Static"));
  }; 

  function Helpers_GetStaticMethod$08 (declaringType, name, parameterTypes) {
    return declaringType.GetMethod(
      name, 
      $T0B().$Flags("NonPublic", "Public", "Static"), 
      null, 
      parameterTypes, 
      null
    );
  }; 

  function Helpers_GetTypeCode (type) {
    var typeCode = $T00().GetTypeCode(type);
    switch (typeCode.valueOf()) {
      case 0: 
      case 3: 
      case 4: 
      case 5: 
      case 6: 
      case 7: 
      case 8: 
      case 9: 
      case 10: 
      case 11: 
      case 12: 
      case 13: 
      case 14: 
      case 15: 
      case 16: 
      case 18: 
        return $T17().$Cast(typeCode);

    }
    if ($T00().op_Equality(type, $T18().__Type__)) {
      return $T17().TimeSpan;
    }
    if ($T00().op_Equality(type, $T19().__Type__)) {
      return $T17().Guid;
    }
    if ($T00().op_Equality(type, $T1A().__Type__)) {
      return $T17().Uri;
    }
    if ($T00().op_Equality(type, $T02().__Type__)) {
      return $T17().ByteArray;
    }
    if ($T00().op_Equality(type, $T00().__Type__)) {
      return $T17().Type;
    }
    return $T17().Unknown;
  }; 

  function Helpers_GetUnderlyingType (type) {
    return $T1B().GetUnderlyingType(type);
  }; 

  function Helpers_IsAssignableFrom (target, type) {
    return $S02().CallVirtual("IsAssignableFrom", null, target, type);
  }; 

  function Helpers_IsClass (type) {
    return type.get_IsClass();
  }; 

  function Helpers_IsEnum (type) {
    return type.get_IsEnum();
  }; 

  function Helpers_IsInfinity$09 (value) {
    return $T1C().IsInfinity(value);
  }; 

  function Helpers_IsInfinity$0A (value) {
    return $T1D().IsInfinity(value);
  }; 

  function Helpers_IsNullOrEmpty (value) {
    return ((value === null) || ((value.length | 0) === 0));
  }; 

  function Helpers_IsSealed (type) {
    return type.get_IsSealed();
  }; 

  function Helpers_IsSubclassOf (type, baseClass) {
    return type.IsSubclassOf(baseClass);
  }; 

  function Helpers_IsValueType (type) {
    return type.get_IsValueType();
  }; 

  function Helpers_ParseEnum (type, value) {
    return $T1E().Parse(type, value, true);
  }; 

  function Helpers_Sort (keys, values) {

    do {
      var flag = false;

      for (var i = 1; i < (keys.length | 0); i = ((i + 1) | 0)) {
        if ((keys[((i - 1) | 0)] | 0) > (keys[i] | 0)) {
          var num = (keys[i] | 0);
          keys[i] = (keys[((i - 1) | 0)] | 0);
          keys[((i - 1) | 0)] = num;
          var obj = values[i];
          values[i] = values[((i - 1) | 0)];
          values[((i - 1) | 0)] = obj;
          flag = true;
        }
      }
    } while (flag);
  }; 

  function Helpers_TraceWriteLine (message) {
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Helpers", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Helpers__ctor
    );

    $.Method({Static:true , Public:true }, "AppendLine", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Text.StringBuilder"), [$asm07.TypeRef("System.Text.StringBuilder")]), 
      Helpers_AppendLine
    );

    $.Method({Static:true , Public:true }, "BlockCopy", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]), 
      Helpers_BlockCopy
    );

    $.Method({Static:true , Public:true }, "DebugAssert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String]), 
      Helpers_DebugAssert$00
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "DebugAssert", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ]), 
      Helpers_DebugAssert$01
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Parameter(2, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:true , Public:true }, "DebugAssert", 
      JSIL.MethodSignature.Action($.Boolean), 
      Helpers_DebugAssert$02
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "DebugWriteLine", 
      new JSIL.MethodSignature(null, [$.String, $.Object]), 
      Helpers_DebugWriteLine$03
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "DebugWriteLine", 
      JSIL.MethodSignature.Action($.String), 
      Helpers_DebugWriteLine$04
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:false}, "GetAssembly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Assembly"), [$asm07.TypeRef("System.Type")]), 
      Helpers_GetAssembly
    );

    $.Method({Static:true , Public:false}, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.IO.MemoryStream")]), 
      Helpers_GetBuffer
    );

    $.Method({Static:true , Public:false}, "GetConstructor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ConstructorInfo"), [
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $.Boolean
        ]), 
      Helpers_GetConstructor
    );

    $.Method({Static:true , Public:false}, "GetConstructors", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ConstructorInfo")]), [$asm07.TypeRef("System.Type"), $.Boolean]), 
      Helpers_GetConstructors
    );

    $.Method({Static:true , Public:false}, "GetGetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Reflection.PropertyInfo"), $.Boolean, 
          $.Boolean
        ]), 
      Helpers_GetGetMethod
    );

    $.Method({Static:true , Public:false}, "GetInstanceFieldsAndProperties", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Type"), $.Boolean]), 
      Helpers_GetInstanceFieldsAndProperties
    );

    $.Method({Static:true , Public:false}, "GetInstanceMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Type"), $.String]), 
      Helpers_GetInstanceMethod$05
    );

    $.Method({Static:true , Public:false}, "GetInstanceMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])
        ]), 
      Helpers_GetInstanceMethod$06
    );

    $.Method({Static:true , Public:false}, "GetMemberType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
      Helpers_GetMemberType
    );

    $.Method({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $.Boolean
        ]), 
      Helpers_GetProperty
    );

    $.Method({Static:true , Public:false}, "GetSetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Reflection.PropertyInfo"), $.Boolean, 
          $.Boolean
        ]), 
      Helpers_GetSetMethod
    );

    $.Method({Static:true , Public:false}, "GetStaticMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Type"), $.String]), 
      Helpers_GetStaticMethod$07
    );

    $.Method({Static:true , Public:false}, "GetStaticMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])
        ]), 
      Helpers_GetStaticMethod$08
    );

    $.Method({Static:true , Public:true }, "GetTypeCode", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.ProtoTypeCode"), [$asm07.TypeRef("System.Type")]), 
      Helpers_GetTypeCode
    );

    $.Method({Static:true , Public:false}, "GetUnderlyingType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")]), 
      Helpers_GetUnderlyingType
    );

    $.Method({Static:true , Public:false}, "IsAssignableFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")]), 
      Helpers_IsAssignableFrom
    );

    $.Method({Static:true , Public:false}, "IsClass", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")]), 
      Helpers_IsClass
    );

    $.Method({Static:true , Public:false}, "IsEnum", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")]), 
      Helpers_IsEnum
    );

    $.Method({Static:true , Public:true }, "IsInfinity", 
      new JSIL.MethodSignature($.Boolean, [$.Single]), 
      Helpers_IsInfinity$09
    );

    $.Method({Static:true , Public:true }, "IsInfinity", 
      new JSIL.MethodSignature($.Boolean, [$.Double]), 
      Helpers_IsInfinity$0A
    );

    $.Method({Static:true , Public:true }, "IsNullOrEmpty", 
      new JSIL.MethodSignature($.Boolean, [$.String]), 
      Helpers_IsNullOrEmpty
    );

    $.Method({Static:true , Public:false}, "IsSealed", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")]), 
      Helpers_IsSealed
    );

    $.Method({Static:true , Public:false}, "IsSubclassOf", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")]), 
      Helpers_IsSubclassOf
    );

    $.Method({Static:true , Public:false}, "IsValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")]), 
      Helpers_IsValueType
    );

    $.Method({Static:true , Public:false}, "ParseEnum", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $.String]), 
      Helpers_ParseEnum
    );

    $.Method({Static:true , Public:true }, "Sort", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Object])]), 
      Helpers_Sort
    );

    $.Method({Static:true , Public:true }, "TraceWriteLine", 
      JSIL.MethodSignature.Action($.String), 
      Helpers_TraceWriteLine
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["TRACE"]; });

    $.Field({Static:true , Public:true , ReadOnly:true }, "EmptyTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), function ($pi) {
        return $asm07.System.Type.EmptyTypes;
      });


    function Helpers__cctor () {
      $thisType.EmptyTypes = $T00().EmptyTypes;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Helpers__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.ProtoTypeCode */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.ProtoTypeCode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    Unknown: 1, 
    Boolean: 3, 
    Char: 4, 
    SByte: 5, 
    Byte: 6, 
    Int16: 7, 
    UInt16: 8, 
    Int32: 9, 
    UInt32: 10, 
    Int64: 11, 
    UInt64: 12, 
    Single: 13, 
    Double: 14, 
    Decimal: 15, 
    DateTime: 16, 
    String: 18, 
    TimeSpan: 100, 
    ByteArray: 101, 
    Guid: 102, 
    Uri: 103, 
    Type: 104, 
  }
);

/* interface ProtoBuf.IExtensible */ 

JSIL.MakeInterface(
  "ProtoBuf.IExtensible", true, [], function ($) {
    $.Method({}, "GetExtensionObject", new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.IExtension"), [$.Boolean]));
  }, []);

/* interface ProtoBuf.IExtension */ 

JSIL.MakeInterface(
  "ProtoBuf.IExtension", true, [], function ($) {
    $.Method({}, "BeginAppend", JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream")));
    $.Method({}, "EndAppend", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean]));
    $.Method({}, "BeginQuery", JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream")));
    $.Method({}, "EndQuery", JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream")));
    $.Method({}, "GetLength", JSIL.MethodSignature.Return($.Int32));
  }, []);

/* enum ProtoBuf.ImplicitFields */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.ImplicitFields", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    AllPublic: 1, 
    AllFields: 2, 
  }
);

/* class ProtoBuf.MapAttribute */ 

(function MapAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };


  function MapAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function MapAttribute_get_KeyFormat () {
    return this.MapAttribute$KeyFormat$value;
  }; 

  function MapAttribute_get_ValueFormat () {
    return this.MapAttribute$ValueFormat$value;
  }; 

  function MapAttribute_set_KeyFormat (value) {
    this.MapAttribute$KeyFormat$value = value;
  }; 

  function MapAttribute_set_ValueFormat (value) {
    this.MapAttribute$ValueFormat$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.MapAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MapAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_KeyFormat", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.DataFormat")), 
      MapAttribute_get_KeyFormat
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ValueFormat", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.DataFormat")), 
      MapAttribute_get_ValueFormat
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_KeyFormat", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.DataFormat")), 
      MapAttribute_set_KeyFormat
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_ValueFormat", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.DataFormat")), 
      MapAttribute_set_ValueFormat
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MapAttribute$KeyFormat$value", $asm08.TypeRef("ProtoBuf.DataFormat"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MapAttribute$ValueFormat$value", $asm08.TypeRef("ProtoBuf.DataFormat"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "KeyFormat", $asm08.TypeRef("ProtoBuf.DataFormat"));

    $.Property({Static:false, Public:true }, "ValueFormat", $asm08.TypeRef("ProtoBuf.DataFormat"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class ProtoBuf.NetObjectCache */ 

(function NetObjectCache$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.Object, $asm07.System.Int32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.NetObjectCache_ReferenceComparer)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.String, $asm07.System.Int32))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.Meta.MutableList)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.Object, $asm07.System.Int32), [$asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm07.TypeRef("System.Object")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.TypeRef("System.Object"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Int32")])]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.String, $asm07.System.Int32), null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.TypeRef("System.String"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Int32")])]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.ProtoException, [$asm07.System.String]))) ();
  };


  function NetObjectCache__ctor () {
  }; 

  function NetObjectCache_AddObjectKey (value, /* ref */ existing) {
    if (value === null) {
      throw $S00().Construct("value");
    }
    if (value === this.rootObject) {
      existing.set(true);
      return 0;
    }
    var text = $T03().$As(value);
    var list = this.get_List();
    var num = new JSIL.BoxedVariable(0);
    if (text === null) {
      if (this.objectKeys === null) {
        this.objectKeys = $S01().Construct($T07().Default);
        num.set(-1);
      } else if (!$S02().CallVirtual("TryGetValue", null, this.objectKeys, value, /* ref */ num)) {
        num.set(-1);
      }
    } else if (this.stringKeys === null) {
      this.stringKeys = $S03().Construct();
      num.set(-1);
    } else if (!$S04().CallVirtual("TryGetValue", null, this.stringKeys, text, /* ref */ num)) {
      num.set(-1);
    }
    if (!existing.set((num.get() | 0) >= 0)) {
      num.set(list.Add(value));
      if (text === null) {
        (this.objectKeys).Add(value, num.get());
      } else {
        (this.stringKeys).Add(text, num.get());
      }
    }
    return (((num.get() | 0) + 1) | 0);
  }; 

  function NetObjectCache_Clear () {
    this.trapStartIndex = 0;
    this.rootObject = null;
    if (this.underlyingList !== null) {
      (this.underlyingList).Clear();
    }
    if (this.stringKeys !== null) {
      (this.stringKeys).Clear();
    }
    if (this.objectKeys !== null) {
      (this.objectKeys).Clear();
    }
  }; 

  function NetObjectCache_get_List () {
    if (this.underlyingList === null) {
      this.underlyingList = new ($T09())();
    }
    return this.underlyingList;
  }; 

  function NetObjectCache_GetKeyedObject (key) {
    var $temp00;
    if ((($temp00 = (key | 0), 
        key = (((key | 0) - 1) | 0), 
        $temp00) | 0) === 0) {
      if (this.rootObject === null) {
        throw $S05().Construct("No root object assigned");
      }
      return this.rootObject;
    } else {
      var list = this.get_List();
      if (!(((key | 0) >= 0) && ((key | 0) < (list.get_Count() | 0)))) {
        throw $S05().Construct("Internal error; a missing key occurred");
      }
      var obj = list.get_Item(key);
      if (obj === null) {
        throw $S05().Construct("A deferred key does not have a value yet");
      }
      return obj;
    }
  }; 

  function NetObjectCache_RegisterTrappedObject (value) {
    if (this.rootObject === null) {
      this.rootObject = value;
      return;
    }
    if (this.underlyingList !== null) {

      for (var i = (this.trapStartIndex | 0); i < ((this.underlyingList).get_Count() | 0); i = ((i + 1) | 0)) {
        this.trapStartIndex = ((i + 1) | 0);
        if ((this.underlyingList).get_Item(i) === null) {
          (this.underlyingList).set_Item(i, value);
          return;
        }
      }
    }
  }; 

  function NetObjectCache_SetKeyedObject (key, value) {
    var $temp00;
    if ((($temp00 = (key | 0), 
        key = (((key | 0) - 1) | 0), 
        $temp00) | 0) !== 0) {
      var list = this.get_List();
      if ((key | 0) < (list.get_Count() | 0)) {
        var obj = list.get_Item(key);
        if (obj === null) {
          list.set_Item(key, value);
          return;
        }
        if (obj !== value) {
          throw $S05().Construct("Reference-tracked objects cannot change reference");
        }
      } else if ((key | 0) !== (list.Add(value) | 0)) {
        throw $S05().Construct("Internal error; a key mismatch occurred");
      }
      return;
    }
    if (value === null) {
      throw $S00().Construct("value");
    }
    if (!((this.rootObject === null) || (this.rootObject === value))) {
      throw $S05().Construct("The root object cannot be reassigned");
    }
    this.rootObject = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.NetObjectCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      NetObjectCache__ctor
    );

    $.Method({Static:false, Public:false}, "AddObjectKey", 
      new JSIL.MethodSignature($.Int32, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      NetObjectCache_AddObjectKey
    );

    $.Method({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void, 
      NetObjectCache_Clear
    );

    $.Method({Static:false, Public:false}, "get_List", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Meta.MutableList")), 
      NetObjectCache_get_List
    );

    $.Method({Static:false, Public:false}, "GetKeyedObject", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      NetObjectCache_GetKeyedObject
    );

    $.Method({Static:false, Public:false}, "RegisterTrappedObject", 
      JSIL.MethodSignature.Action($.Object), 
      NetObjectCache_RegisterTrappedObject
    );

    $.Method({Static:false, Public:false}, "SetKeyedObject", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      NetObjectCache_SetKeyedObject
    );

    $.Constant({Static:true , Public:false}, "Root", $.Int32, 0);

    $.Field({Static:false, Public:false}, "underlyingList", $asm08.TypeRef("ProtoBuf.Meta.MutableList"));

    $.Field({Static:false, Public:false}, "rootObject", $.Object);

    $.Field({Static:false, Public:false}, "trapStartIndex", $.Int32);

    $.Field({Static:false, Public:false}, "stringKeys", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false}, "objectKeys", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32]));

    $.Property({Static:false, Public:false}, "List", $asm08.TypeRef("ProtoBuf.Meta.MutableList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.NetObjectCache+ReferenceComparer */ 

(function ReferenceComparer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Runtime.CompilerServices.RuntimeHelpers)) ();
  };


  function ReferenceComparer__ctor () {
  }; 

  function ReferenceComparer_System_Collections_Generic_IEqualityComparer$lSystem_Object$g_Equals (x, y) {
    return (x === y);
  }; 

  function ReferenceComparer_System_Collections_Generic_IEqualityComparer$lSystem_Object$g_GetHashCode (obj) {
    return $T01().GetHashCode(obj);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.NetObjectCache+ReferenceComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      ReferenceComparer__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEqualityComparer$lSystem.Object$g.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object]), 
      ReferenceComparer_System_Collections_Generic_IEqualityComparer$lSystem_Object$g_Equals
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm07.TypeRef("System.Object")]), "Equals");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEqualityComparer$lSystem.Object$g.GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      ReferenceComparer_System_Collections_Generic_IEqualityComparer$lSystem_Object$g_GetHashCode
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm07.TypeRef("System.Object")]), "GetHashCode");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type);


    function ReferenceComparer__cctor () {
      $thisType.Default = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ReferenceComparer__cctor
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.PrefixStyle */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.PrefixStyle", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Base128: 1, 
    Fixed32: 2, 
    Fixed32BigEndian: 3, 
  }
);

/* class ProtoBuf.ProtoContractAttribute */ 

(function ProtoContractAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.ImplicitFields)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };


  function ProtoContractAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function ProtoContractAttribute_get_AsReferenceDefault () {
    return this.HasFlag(32);
  }; 

  function ProtoContractAttribute_get_DataMemberOffset () {
    return this.dataMemberOffset;
  }; 

  function ProtoContractAttribute_get_EnumPassthru () {
    return this.HasFlag(64);
  }; 

  function ProtoContractAttribute_get_EnumPassthruHasValue () {
    return this.HasFlag(128);
  }; 

  function ProtoContractAttribute_get_IgnoreListHandling () {
    return this.HasFlag(16);
  }; 

  function ProtoContractAttribute_get_ImplicitFields () {
    return this.implicitFields;
  }; 

  function ProtoContractAttribute_get_ImplicitFirstTag () {
    return this.implicitFirstTag;
  }; 

  function ProtoContractAttribute_get_InferTagFromName () {
    return this.HasFlag(1);
  }; 

  function ProtoContractAttribute_get_InferTagFromNameHasValue () {
    return this.HasFlag(2);
  }; 

  function ProtoContractAttribute_get_IsGroup () {
    return this.HasFlag(256);
  }; 

  function ProtoContractAttribute_get_Name () {
    return this.$name;
  }; 

  function ProtoContractAttribute_get_SkipConstructor () {
    return this.HasFlag(8);
  }; 

  function ProtoContractAttribute_get_UseProtoMembersOnly () {
    return this.HasFlag(4);
  }; 

  function ProtoContractAttribute_HasFlag (flag) {
    return (((this.flags | 0) & (flag | 0)) === (flag | 0));
  }; 

  function ProtoContractAttribute_set_AsReferenceDefault (value) {
    this.SetFlag(32, value);
  }; 

  function ProtoContractAttribute_set_DataMemberOffset (value) {
    this.dataMemberOffset = (value | 0);
  }; 

  function ProtoContractAttribute_set_EnumPassthru (value) {
    this.SetFlag(64, value);
    this.SetFlag(128, true);
  }; 

  function ProtoContractAttribute_set_IgnoreListHandling (value) {
    this.SetFlag(16, value);
  }; 

  function ProtoContractAttribute_set_ImplicitFields (value) {
    this.implicitFields = value;
  }; 

  function ProtoContractAttribute_set_ImplicitFirstTag (value) {
    if ((value | 0) < 1) {
      throw $S00().Construct("ImplicitFirstTag");
    }
    this.implicitFirstTag = (value | 0);
  }; 

  function ProtoContractAttribute_set_InferTagFromName (value) {
    this.SetFlag(1, value);
    this.SetFlag(2, true);
  }; 

  function ProtoContractAttribute_set_IsGroup (value) {
    this.SetFlag(256, value);
  }; 

  function ProtoContractAttribute_set_Name (value) {
    this.$name = value;
  }; 

  function ProtoContractAttribute_set_SkipConstructor (value) {
    this.SetFlag(8, value);
  }; 

  function ProtoContractAttribute_set_UseProtoMembersOnly (value) {
    this.SetFlag(4, value);
  }; 

  function ProtoContractAttribute_SetFlag (flag, value) {
    if (value) {
      this.flags = (this.flags | 0) | (flag | 0);
      return;
    }
    this.flags = (this.flags | 0) & (~flag & 0xFFFF);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoContractAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoContractAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_AsReferenceDefault", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_AsReferenceDefault
    );

    $.Method({Static:false, Public:true }, "get_DataMemberOffset", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoContractAttribute_get_DataMemberOffset
    );

    $.Method({Static:false, Public:true }, "get_EnumPassthru", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_EnumPassthru
    );

    $.Method({Static:false, Public:false}, "get_EnumPassthruHasValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_EnumPassthruHasValue
    );

    $.Method({Static:false, Public:true }, "get_IgnoreListHandling", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_IgnoreListHandling
    );

    $.Method({Static:false, Public:true }, "get_ImplicitFields", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.ImplicitFields")), 
      ProtoContractAttribute_get_ImplicitFields
    );

    $.Method({Static:false, Public:true }, "get_ImplicitFirstTag", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoContractAttribute_get_ImplicitFirstTag
    );

    $.Method({Static:false, Public:true }, "get_InferTagFromName", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_InferTagFromName
    );

    $.Method({Static:false, Public:false}, "get_InferTagFromNameHasValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_InferTagFromNameHasValue
    );

    $.Method({Static:false, Public:true }, "get_IsGroup", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_IsGroup
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      ProtoContractAttribute_get_Name
    );

    $.Method({Static:false, Public:true }, "get_SkipConstructor", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_SkipConstructor
    );

    $.Method({Static:false, Public:true }, "get_UseProtoMembersOnly", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoContractAttribute_get_UseProtoMembersOnly
    );

    $.Method({Static:false, Public:false}, "HasFlag", 
      new JSIL.MethodSignature($.Boolean, [$.UInt16]), 
      ProtoContractAttribute_HasFlag
    );

    $.Method({Static:false, Public:true }, "set_AsReferenceDefault", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoContractAttribute_set_AsReferenceDefault
    );

    $.Method({Static:false, Public:true }, "set_DataMemberOffset", 
      JSIL.MethodSignature.Action($.Int32), 
      ProtoContractAttribute_set_DataMemberOffset
    );

    $.Method({Static:false, Public:true }, "set_EnumPassthru", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoContractAttribute_set_EnumPassthru
    );

    $.Method({Static:false, Public:true }, "set_IgnoreListHandling", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoContractAttribute_set_IgnoreListHandling
    );

    $.Method({Static:false, Public:true }, "set_ImplicitFields", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.ImplicitFields")), 
      ProtoContractAttribute_set_ImplicitFields
    );

    $.Method({Static:false, Public:true }, "set_ImplicitFirstTag", 
      JSIL.MethodSignature.Action($.Int32), 
      ProtoContractAttribute_set_ImplicitFirstTag
    );

    $.Method({Static:false, Public:true }, "set_InferTagFromName", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoContractAttribute_set_InferTagFromName
    );

    $.Method({Static:false, Public:true }, "set_IsGroup", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoContractAttribute_set_IsGroup
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      ProtoContractAttribute_set_Name
    );

    $.Method({Static:false, Public:true }, "set_SkipConstructor", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoContractAttribute_set_SkipConstructor
    );

    $.Method({Static:false, Public:true }, "set_UseProtoMembersOnly", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoContractAttribute_set_UseProtoMembersOnly
    );

    $.Method({Static:false, Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [$.UInt16, $.Boolean]), 
      ProtoContractAttribute_SetFlag
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "implicitFirstTag", $.Int32);

    $.Field({Static:false, Public:false}, "implicitFields", $asm08.TypeRef("ProtoBuf.ImplicitFields"));

    $.Field({Static:false, Public:false}, "dataMemberOffset", $.Int32);

    $.Field({Static:false, Public:false}, "flags", $.UInt16);

    $.Constant({Static:true , Public:false}, "OPTIONS_InferTagFromName", $.UInt16, 1);

    $.Constant({Static:true , Public:false}, "OPTIONS_InferTagFromNameHasValue", $.UInt16, 2);

    $.Constant({Static:true , Public:false}, "OPTIONS_UseProtoMembersOnly", $.UInt16, 4);

    $.Constant({Static:true , Public:false}, "OPTIONS_SkipConstructor", $.UInt16, 8);

    $.Constant({Static:true , Public:false}, "OPTIONS_IgnoreListHandling", $.UInt16, 16);

    $.Constant({Static:true , Public:false}, "OPTIONS_AsReferenceDefault", $.UInt16, 32);

    $.Constant({Static:true , Public:false}, "OPTIONS_EnumPassthru", $.UInt16, 64);

    $.Constant({Static:true , Public:false}, "OPTIONS_EnumPassthruHasValue", $.UInt16, 128);

    $.Constant({Static:true , Public:false}, "OPTIONS_IsGroup", $.UInt16, 256);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "ImplicitFirstTag", $.Int32);

    $.Property({Static:false, Public:true }, "UseProtoMembersOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "IgnoreListHandling", $.Boolean);

    $.Property({Static:false, Public:true }, "ImplicitFields", $asm08.TypeRef("ProtoBuf.ImplicitFields"));

    $.Property({Static:false, Public:true }, "InferTagFromName", $.Boolean);

    $.Property({Static:false, Public:false}, "InferTagFromNameHasValue", $.Boolean);

    $.Property({Static:false, Public:true }, "DataMemberOffset", $.Int32);

    $.Property({Static:false, Public:true }, "SkipConstructor", $.Boolean);

    $.Property({Static:false, Public:true }, "AsReferenceDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "IsGroup", $.Boolean);

    $.Property({Static:false, Public:true }, "EnumPassthru", $.Boolean);

    $.Property({Static:false, Public:false}, "EnumPassthruHasValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Class", "Enum", "Interface", "Struct")]; });

})();

/* class ProtoBuf.ProtoConverterAttribute */ 

(function ProtoConverterAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };


  function ProtoConverterAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoConverterAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoConverterAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* class ProtoBuf.ProtoEnumAttribute */ 

(function ProtoEnumAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };


  function ProtoEnumAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function ProtoEnumAttribute_get_Name () {
    return this.$name;
  }; 

  function ProtoEnumAttribute_get_Value () {
    return this.enumValue;
  }; 

  function ProtoEnumAttribute_HasValue () {
    return this.hasValue;
  }; 

  function ProtoEnumAttribute_set_Name (value) {
    this.$name = value;
  }; 

  function ProtoEnumAttribute_set_Value (value) {
    this.enumValue = (value | 0);
    this.hasValue = true;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoEnumAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoEnumAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      ProtoEnumAttribute_get_Name
    );

    $.Method({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoEnumAttribute_get_Value
    );

    $.Method({Static:false, Public:true }, "HasValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoEnumAttribute_HasValue
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      ProtoEnumAttribute_set_Name
    );

    $.Method({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Int32), 
      ProtoEnumAttribute_set_Value
    );

    $.Field({Static:false, Public:false}, "hasValue", $.Boolean);

    $.Field({Static:false, Public:false}, "enumValue", $.Int32);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Field]; });

})();

/* class ProtoBuf.ProtoException */ 

(function ProtoException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Runtime.Serialization.SerializationInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Runtime.Serialization.StreamingContext)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.String, $asm07.System.Exception]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Runtime.Serialization.SerializationInfo, $asm07.System.Runtime.Serialization.StreamingContext]))) ();
  };


  function ProtoException__ctor$00 () {
    $T00().prototype._ctor.call(this);
  }; 

  function ProtoException__ctor$01 (message) {
    $T00().prototype._ctor.call(this, message);
  }; 

  function ProtoException__ctor$02 (message, innerException) {
    $S00().Call($T00().prototype, "_ctor", null, this, message, innerException);
  }; 

  function ProtoException__ctor$03 (info, context) {
    $S01().Call($T00().prototype, "_ctor", null, this, info, context.MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "ProtoBuf.ProtoException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoException__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      ProtoException__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")]), 
      ProtoException__ctor$02
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")]), 
      ProtoException__ctor$03
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoIgnoreAttribute */ 

(function ProtoIgnoreAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };


  function ProtoIgnoreAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoIgnoreAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoIgnoreAttribute__ctor
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class ProtoBuf.ProtoPartialIgnoreAttribute */ 

(function ProtoPartialIgnoreAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.ProtoIgnoreAttribute)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };


  function ProtoPartialIgnoreAttribute__ctor (memberName) {
    $T01().prototype._ctor.call(this);
    if ($T02().IsNullOrEmpty(memberName)) {
      throw $S00().Construct("memberName");
    }
    this.memberName = memberName;
  }; 

  function ProtoPartialIgnoreAttribute_get_MemberName () {
    return this.memberName;
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.ProtoIgnoreAttribute"), 
      Name: "ProtoBuf.ProtoPartialIgnoreAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      ProtoPartialIgnoreAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_MemberName", 
      JSIL.MethodSignature.Return($.String), 
      ProtoPartialIgnoreAttribute_get_MemberName
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "memberName", $.String);

    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class ProtoBuf.ProtoIncludeAttribute */ 

(function ProtoIncludeAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Attribute)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Int32, $asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String, $asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String, $asm07.System.String]))) ();
  };


  function ProtoIncludeAttribute__ctor$00 (tag, knownType) {
    $S00().Call($thisType.prototype, "_ctor", null, this, tag, (
        $T01().op_Equality(knownType, null)
           ? ""
           : knownType.get_AssemblyQualifiedName())
    );
  }; 

  function ProtoIncludeAttribute__ctor$01 (tag, knownTypeName) {
    $T03().prototype._ctor.call(this);
    if ((tag | 0) <= 0) {
      throw $S01().Construct("tag", "Tags must be positive integers");
    }
    if ($T05().IsNullOrEmpty(knownTypeName)) {
      throw $S02().Construct("knownTypeName", "Known type cannot be blank");
    }
    this.tag = (tag | 0);
    this.knownTypeName = knownTypeName;
  }; 

  function ProtoIncludeAttribute_get_DataFormat () {
    return this.dataFormat;
  }; 

  function ProtoIncludeAttribute_get_KnownType () {
    return $T07().ResolveKnownType(this.get_KnownTypeName(), null, null);
  }; 

  function ProtoIncludeAttribute_get_KnownTypeName () {
    return this.knownTypeName;
  }; 

  function ProtoIncludeAttribute_get_Tag () {
    return this.tag;
  }; 

  function ProtoIncludeAttribute_set_DataFormat (value) {
    this.dataFormat = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoIncludeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Type")]), 
      ProtoIncludeAttribute__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.String]), 
      ProtoIncludeAttribute__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_DataFormat", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.DataFormat")), 
      ProtoIncludeAttribute_get_DataFormat
    );

    $.Method({Static:false, Public:true }, "get_KnownType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      ProtoIncludeAttribute_get_KnownType
    );

    $.Method({Static:false, Public:true }, "get_KnownTypeName", 
      JSIL.MethodSignature.Return($.String), 
      ProtoIncludeAttribute_get_KnownTypeName
    );

    $.Method({Static:false, Public:true }, "get_Tag", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoIncludeAttribute_get_Tag
    );

    $.Method({Static:false, Public:true }, "set_DataFormat", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.DataFormat")), 
      ProtoIncludeAttribute_set_DataFormat
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "tag", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "knownTypeName", $.String);

    $.Field({Static:false, Public:false}, "dataFormat", $asm08.TypeRef("ProtoBuf.DataFormat"));

    $.Property({Static:false, Public:true }, "Tag", $.Int32);

    $.Property({Static:false, Public:true }, "KnownTypeName", $.String);

    $.Property({Static:false, Public:true }, "KnownType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "DataFormat", $asm08.TypeRef("ProtoBuf.DataFormat"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm08.ProtoBuf.DataFormat.Default]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Class", "Interface")]; });

})();

/* class ProtoBuf.ProtoMemberAttribute */ 

(function ProtoMemberAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Attribute)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.MemberSerializationOptions)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [$asm08.ProtoBuf.ProtoMemberAttribute]))) ();
  };


  function ProtoMemberAttribute__ctor$00 (tag) {
    $thisType.prototype._ctor.call(this, tag, false);
  }; 

  function ProtoMemberAttribute__ctor$01 (tag, forced) {
    $T02().prototype._ctor.call(this);
    if (!(((tag | 0) > 0) || forced)) {
      throw $S00().Construct("tag");
    }
    this.tag = (tag | 0);
  }; 

  function ProtoMemberAttribute_CompareTo$02 (other) {
    return $S01().CallVirtual("CompareTo", null, this, $thisType.$As(other));
  }; 

  function ProtoMemberAttribute_CompareTo$03 (other) {
    if (other === null) {
      return -1;
    }
    if (this === other) {
      return 0;
    }
    var num = (JSIL.CompareValues(this.tag, other.tag));
    if (num === 0) {
      num = ($T05().CompareOrdinal(this.$name, other.$name) | 0);
    }
    return num;
  }; 

  function ProtoMemberAttribute_get_AsReference () {
    return ($T06().$Cast(this.options & $T06().AsReference) === $T06().AsReference);
  }; 

  function ProtoMemberAttribute_get_AsReferenceHasValue () {
    return ($T06().$Cast(this.options & $T06().AsReferenceHasValue) === $T06().AsReferenceHasValue);
  }; 

  function ProtoMemberAttribute_get_DataFormat () {
    return this.dataFormat;
  }; 

  function ProtoMemberAttribute_get_DynamicType () {
    return ($T06().$Cast(this.options & $T06().DynamicType) === $T06().DynamicType);
  }; 

  function ProtoMemberAttribute_get_IsPacked () {
    return ($T06().$Cast(this.options & $T06().Packed) === $T06().Packed);
  }; 

  function ProtoMemberAttribute_get_IsRequired () {
    return ($T06().$Cast(this.options & $T06().Required) === $T06().Required);
  }; 

  function ProtoMemberAttribute_get_Name () {
    return this.$name;
  }; 

  function ProtoMemberAttribute_get_Options () {
    return this.options;
  }; 

  function ProtoMemberAttribute_get_OverwriteList () {
    return ($T06().$Cast(this.options & $T06().OverwriteList) === $T06().OverwriteList);
  }; 

  function ProtoMemberAttribute_get_Tag () {
    return this.tag;
  }; 

  function ProtoMemberAttribute_Rebase (tag) {
    this.tag = (tag | 0);
  }; 

  function ProtoMemberAttribute_set_AsReference (value) {
    if (value) {
      this.options = $T06().$Cast(this.options | $T06().AsReference);
    } else {
      this.options = $T06().$Cast(this.options & $T06().$Flags(
            "AsReferenceHasValue", "DynamicType", "OverwriteList", "Packed", 
            "Required"
        ));
    }
    this.options = $T06().$Cast(this.options | $T06().AsReferenceHasValue);
  }; 

  function ProtoMemberAttribute_set_AsReferenceHasValue (value) {
    if (value) {
      this.options = $T06().$Cast(this.options | $T06().AsReferenceHasValue);
      return;
    }
    this.options = $T06().$Cast(this.options & $T06().$Flags(
          "AsReference", "DynamicType", "OverwriteList", "Packed", 
          "Required"
      ));
  }; 

  function ProtoMemberAttribute_set_DataFormat (value) {
    this.dataFormat = value;
  }; 

  function ProtoMemberAttribute_set_DynamicType (value) {
    if (value) {
      this.options = $T06().$Cast(this.options | $T06().DynamicType);
      return;
    }
    this.options = $T06().$Cast(this.options & $T06().$Flags(
          "AsReference", "AsReferenceHasValue", "OverwriteList", "Packed", 
          "Required"
      ));
  }; 

  function ProtoMemberAttribute_set_IsPacked (value) {
    if (value) {
      this.options = $T06().$Cast(this.options | $T06().Packed);
      return;
    }
    this.options = $T06().$Cast(this.options & $T06().$Flags(
          "AsReference", "AsReferenceHasValue", "DynamicType", "OverwriteList", 
          "Required"
      ));
  }; 

  function ProtoMemberAttribute_set_IsRequired (value) {
    if (value) {
      this.options = $T06().$Cast(this.options | $T06().Required);
      return;
    }
    this.options = $T06().$Cast(this.options & $T06().$Flags(
          "AsReference", "AsReferenceHasValue", "DynamicType", "OverwriteList", 
          "Packed"
      ));
  }; 

  function ProtoMemberAttribute_set_Name (value) {
    this.$name = value;
  }; 

  function ProtoMemberAttribute_set_Options (value) {
    this.options = value;
  }; 

  function ProtoMemberAttribute_set_OverwriteList (value) {
    if (value) {
      this.options = $T06().$Cast(this.options | $T06().OverwriteList);
      return;
    }
    this.options = $T06().$Cast(this.options & $T06().$Flags(
          "AsReference", "AsReferenceHasValue", "DynamicType", "Packed", 
          "Required"
      ));
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      ProtoMemberAttribute__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean]), 
      ProtoMemberAttribute__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      ProtoMemberAttribute_CompareTo$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type]), 
      ProtoMemberAttribute_CompareTo$03
    );

    $.Method({Static:false, Public:true }, "get_AsReference", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoMemberAttribute_get_AsReference
    );

    $.Method({Static:false, Public:false}, "get_AsReferenceHasValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoMemberAttribute_get_AsReferenceHasValue
    );

    $.Method({Static:false, Public:true }, "get_DataFormat", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.DataFormat")), 
      ProtoMemberAttribute_get_DataFormat
    );

    $.Method({Static:false, Public:true }, "get_DynamicType", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoMemberAttribute_get_DynamicType
    );

    $.Method({Static:false, Public:true }, "get_IsPacked", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoMemberAttribute_get_IsPacked
    );

    $.Method({Static:false, Public:true }, "get_IsRequired", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoMemberAttribute_get_IsRequired
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      ProtoMemberAttribute_get_Name
    );

    $.Method({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.MemberSerializationOptions")), 
      ProtoMemberAttribute_get_Options
    );

    $.Method({Static:false, Public:true }, "get_OverwriteList", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoMemberAttribute_get_OverwriteList
    );

    $.Method({Static:false, Public:true }, "get_Tag", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoMemberAttribute_get_Tag
    );

    $.Method({Static:false, Public:false}, "Rebase", 
      JSIL.MethodSignature.Action($.Int32), 
      ProtoMemberAttribute_Rebase
    );

    $.Method({Static:false, Public:true }, "set_AsReference", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoMemberAttribute_set_AsReference
    );

    $.Method({Static:false, Public:false}, "set_AsReferenceHasValue", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoMemberAttribute_set_AsReferenceHasValue
    );

    $.Method({Static:false, Public:true }, "set_DataFormat", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.DataFormat")), 
      ProtoMemberAttribute_set_DataFormat
    );

    $.Method({Static:false, Public:true }, "set_DynamicType", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoMemberAttribute_set_DynamicType
    );

    $.Method({Static:false, Public:true }, "set_IsPacked", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoMemberAttribute_set_IsPacked
    );

    $.Method({Static:false, Public:true }, "set_IsRequired", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoMemberAttribute_set_IsRequired
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      ProtoMemberAttribute_set_Name
    );

    $.Method({Static:false, Public:true }, "set_Options", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.MemberSerializationOptions")), 
      ProtoMemberAttribute_set_Options
    );

    $.Method({Static:false, Public:true }, "set_OverwriteList", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoMemberAttribute_set_OverwriteList
    );

    $.Field({Static:false, Public:false}, "Member", $asm07.TypeRef("System.Reflection.MemberInfo"));

    $.Field({Static:false, Public:false}, "TagIsPinned", $.Boolean);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "dataFormat", $asm08.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:false}, "tag", $.Int32);

    $.Field({Static:false, Public:false}, "options", $asm08.TypeRef("ProtoBuf.MemberSerializationOptions"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "DataFormat", $asm08.TypeRef("ProtoBuf.DataFormat"));

    $.Property({Static:false, Public:true }, "Tag", $.Int32);

    $.Property({Static:false, Public:true }, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPacked", $.Boolean);

    $.Property({Static:false, Public:true }, "OverwriteList", $.Boolean);

    $.Property({Static:false, Public:true }, "AsReference", $.Boolean);

    $.Property({Static:false, Public:false}, "AsReferenceHasValue", $.Boolean);

    $.Property({Static:false, Public:true }, "DynamicType", $.Boolean);

    $.Property({Static:false, Public:true }, "Options", $asm08.TypeRef("ProtoBuf.MemberSerializationOptions"));

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm07.TypeRef("System.IComparable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* enum ProtoBuf.MemberSerializationOptions */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.MemberSerializationOptions", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Packed: 1, 
    Required: 2, 
    AsReference: 4, 
    DynamicType: 8, 
    OverwriteList: 16, 
    AsReferenceHasValue: 32, 
  }
);

/* class ProtoBuf.ProtoPartialMemberAttribute */ 

(function ProtoPartialMemberAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.ProtoMemberAttribute)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };


  function ProtoPartialMemberAttribute__ctor (tag, memberName) {
    $T02().prototype._ctor.call(this, tag);
    if ($T03().IsNullOrEmpty(memberName)) {
      throw $S00().Construct("memberName");
    }
    this.memberName = memberName;
  }; 

  function ProtoPartialMemberAttribute_get_MemberName () {
    return this.memberName;
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.ProtoMemberAttribute"), 
      Name: "ProtoBuf.ProtoPartialMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.String]), 
      ProtoPartialMemberAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_MemberName", 
      JSIL.MethodSignature.Return($.String), 
      ProtoPartialMemberAttribute_get_MemberName
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "memberName", $.String);

    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class ProtoBuf.ProtoReader */ 

(function ProtoReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Text.UTF8Encoding)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Collections.IDictionary)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm08.ProtoBuf.IExtensible)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm08.ProtoBuf.IExtension)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.SubItemToken)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.Text.Encoding)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm08.ProtoBuf.BufferPool)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.String, $asm07.System.String))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm08.ProtoBuf.NetObjectCache)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.IO.EndOfStreamException)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.System.IO.MemoryStream)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm08.ProtoBuf.PrefixStyle)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm07.System.SByte)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm07.System.OverflowException)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm07.System.IO.SeekOrigin)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Text.UTF8Encoding, null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.ProtoException, [$asm07.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm08.ProtoBuf.ProtoReader, [
        $asm07.System.IO.Stream, $asm08.ProtoBuf.Meta.TypeModel, 
        $asm08.ProtoBuf.SerializationContext, $asm07.System.Int64
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.ProtoReader, [
        $asm07.System.IO.Stream, $asm08.ProtoBuf.Meta.TypeModel, 
        $asm08.ProtoBuf.SerializationContext, $asm07.System.Int64
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.IO.EndOfStreamException, null))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String, $asm07.System.String]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.String, $asm07.System.String), null))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.TypeRef("System.String"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.String")])]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.IO.MemoryStream, null))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm08.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm07.System.Type
      ]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [$asm07.System.UInt32]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int64, [$asm07.System.UInt64]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, null))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Single]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Double]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.OverflowException, null))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.Int32, $asm07.System.Object, 
        $asm08.ProtoBuf.ProtoReader
      ]))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.SubItemToken, [$asm07.System.Int64]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.Collections.IDictionary.Contains)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.Collections.IDictionary.Add)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.IExtensible.GetExtensionObject)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.IExtension.BeginAppend)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm08.ProtoBuf.IExtension.EndAppend)) ();
  };


  function ProtoReader__ctor$00 (source, model, context) {
    $thisType.Init(
      this, 
      source, 
      model, 
      context, 
      $T05().Create(16777215, 16777215, 65535)
    );
  }; 

  function ProtoReader__ctor$01 (source, model, context, length) {
    $thisType.Init(
      this, 
      source, 
      model, 
      context, 
      $T05().FromNumber(length)
    );
  }; 

  function ProtoReader__ctor$02 (source, model, context, length) {
    $thisType.Init(
      this, 
      source, 
      model, 
      context, 
      length
    );
  }; 

  function ProtoReader_AddErrorData (exception, source) {
    if (!((exception === null) || 
        (source === null) || $IM00().Call(exception.get_Data(), null, "protoSource"))) {
      $IM01().Call(exception.get_Data(), null, "protoSource", $T09().Format("tag={0}; wire-type={1}; offset={2}; depth={3}", JSIL.Array.New($T0A(), [$T06().$Box(source.fieldNumber), source.wireType, source.position64, $T06().$Box(source.depth)])));
    }
    return exception;
  }; 

  function ProtoReader_AppendBytes (value, reader) {
    if (reader === null) {
      throw $S01().Construct("reader");
    }
    var wireType = reader.wireType;
    if ((wireType.valueOf() | 0) === 0) {
      return JSIL.Array.New($T01(), 0);
    }
    if (wireType !== $T0D().String) {
      throw reader.CreateWireTypeException();
    }
    var i = (reader.ReadUInt32Variant(false) | 0);
    reader.wireType = $T0D().None;
    if (i !== 0) {
      if (!((value !== null) && ((value.length | 0) !== 0))) {
        var num = 0;
        value = JSIL.Array.New($T01(), i);
      } else {
        num = (value.length | 0);
        var array = JSIL.Array.New($T01(), (((value.length | 0) + i) | 0));
        $T0E().BlockCopy(
          value, 
          0, 
          array, 
          0, 
          value.length
        );
        value = array;
      }
      reader.position64 = $T05().op_Addition(reader.position64, $T05().FromNumber(i));

      while (i > (reader.available | 0)) {
        if ((reader.available | 0) > 0) {
          $T0E().BlockCopy(
            reader.ioBuffer, 
            reader.ioIndex, 
            value, 
            num, 
            reader.available
          );
          i = ((i - (reader.available | 0)) | 0);
          num = ((num + (reader.available | 0)) | 0);
          reader.ioIndex = reader.available = 0;
        }
        var num2 = ((
          (i > (reader.ioBuffer.length | 0))
             ? reader.ioBuffer.length
             : i)
         | 0);
        if (num2 > 0) {
          reader.Ensure(num2, true);
        }
      }
      if (i > 0) {
        $T0E().BlockCopy(
          reader.ioBuffer, 
          reader.ioIndex, 
          value, 
          num, 
          i
        );
        reader.ioIndex = (((reader.ioIndex | 0) + i) | 0);
        reader.available = (((reader.available | 0) - i) | 0);
      }
      return value;
    }
    if (value !== null) {
      return value;
    }
    return $thisType.EmptyBlob;
  }; 

  function ProtoReader_AppendExtensionData (instance) {
    if (instance === null) {
      throw $S01().Construct("instance");
    }
    var extensionObject = $IM02().Call(instance, null, true);
    var commit = false;
    var stream = $IM03().Call(extensionObject, null);
    try {
      var protoWriter = new ($T12())(stream, this.model, null);
      try {
        this.AppendExtensionField(protoWriter);
        protoWriter.Close();
      } finally {
        if (protoWriter !== null) {
          $IM04().Call(protoWriter, null);
        }
      }
      commit = true;
    } finally {
      $IM05().Call(extensionObject, null, stream, commit);
    }
  }; 

  function ProtoReader_AppendExtensionField (writer) {
    $T12().WriteFieldHeader(this.fieldNumber, this.wireType, writer);
    switch ((this.wireType).valueOf()) {
      case 0: 
      case 1: 
      case 8: 
        $T12().WriteInt64(this.ReadInt64(), writer);
        return;

      case 2: 
        $T12().WriteBytes($thisType.AppendBytes(null, this), writer);
        return;

      case 3: 
        var token = $thisType.StartSubItem(this);
        var token2 = $T12().StartSubItem(null, writer);

        while ((this.ReadFieldHeader() | 0) > 0) {
          this.AppendExtensionField(writer);
        }
        $thisType.EndSubItem(token, this);
        $T12().EndSubItem(token2, writer);
        return;

      case 5: 
        $T12().WriteInt32(this.ReadInt32(), writer);
        return;

    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_Assert (wireType) {
    if (this.wireType === wireType) {
      return;
    }
    if ($T0D().$Cast(wireType & $T0D().$Cast(7)) === this.wireType) {
      this.wireType = wireType;
      return;
    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_CheckFullyConsumed () {
    if (this.isFixedLength) {
      if ($T05().op_Inequality(this.dataRemaining64, $T05().Create(0, 0, 0))) {
        throw $S02().Construct("Incorrect number of bytes consumed");
      }
    } else if ((this.available | 0) !== 0) {
      throw $S02().Construct("Unconsumed data left in the buffer; this suggests corrupt input");
    }
  }; 

  function ProtoReader_Create$03 (source, model, context, len) {
    return $S03().CallStatic($thisType, "Create", null, source, model, context, $T05().FromNumber(len));
  }; 

  function ProtoReader_Create$04 (source, model, context, len) {
    var recycled = $thisType.GetRecycled();
    if (recycled === null) {
      return $S04().Construct(source, model, context, len);
    }
    $thisType.Init(
      recycled, 
      source, 
      model, 
      context, 
      len
    );
    return recycled;
  }; 

  function ProtoReader_CreateException (message) {
    return $thisType.AddErrorData($S02().Construct(message), this);
  }; 

  function ProtoReader_CreateWireTypeException () {
    return this.CreateException("Invalid wire-type; this usually means you have over-written a file without truncating or setting the length; see http://stackoverflow.com/q/2152978/23354");
  }; 

  function ProtoReader_DeserializeType (value) {
    return $T03().DeserializeType(this.model, value);
  }; 

  function ProtoReader_DirectReadBigEndianInt32 (source) {
    return ((((($thisType.ReadByteOrThrow(source) | 0) << 24) | (($thisType.ReadByteOrThrow(source) | 0) << 16)) | (($thisType.ReadByteOrThrow(source) | 0) << 8)) | ($thisType.ReadByteOrThrow(source) | 0));
  }; 

  function ProtoReader_DirectReadBytes$05 (source, buffer, offset, count) {
    var num = 0;
    if (source === null) {
      throw $S01().Construct("source");
    }

    for (; ((count | 0) > 0) && ((num = (source.Read(buffer, offset, count) | 0)) > 0); offset = (((offset | 0) + num) | 0)) {
      count = (((count | 0) - num) | 0);
    }
    if ((count | 0) > 0) {
      throw $thisType.EoF(null);
    }
  }; 

  function ProtoReader_DirectReadBytes$06 (source, count) {
    var array = JSIL.Array.New($T01(), count);
    $thisType.DirectReadBytes(source, array, 0, count);
    return array;
  }; 

  function ProtoReader_DirectReadLittleEndianInt32 (source) {
    return (((($thisType.ReadByteOrThrow(source) | 0) | (($thisType.ReadByteOrThrow(source) | 0) << 8)) | (($thisType.ReadByteOrThrow(source) | 0) << 16)) | (($thisType.ReadByteOrThrow(source) | 0) << 24));
  }; 

  function ProtoReader_DirectReadString (source, length) {
    var array = JSIL.Array.New($T01(), length);
    $thisType.DirectReadBytes(source, array, 0, length);
    return $T16().get_UTF8().GetString(array, 0, length);
  }; 

  function ProtoReader_DirectReadVarintInt32 (source) {
    var num2 = new JSIL.BoxedVariable($T17().Create(0, 0, 0));
    var num = ($thisType.TryReadUInt64Variant(source, /* ref */ num2) | 0);
    if (num <= 0) {
      throw $thisType.EoF(null);
    }
    return $T06().$OverflowCheck((num2.get()).ToNumber(4294967295, true));
  }; 

  function ProtoReader_Dispose () {
    this.source = null;
    this.model = null;
    $T18().ReleaseBufferToPool(/* ref */ new JSIL.MemberReference(this, "ioBuffer"));
    if (this.stringInterner !== null) {
      (this.stringInterner).Clear();
    }
    if (this.netCache !== null) {
      (this.netCache).Clear();
    }
  }; 

  function ProtoReader_EndSubItem (token, reader) {
    if (reader === null) {
      throw $S01().Construct("reader");
    }
    var value = token.value64;
    var wireType = reader.wireType;
    if (wireType === $T0D().EndGroup) {
      if (!$T05().op_LessThan(value, $T05().Create(0, 0, 0))) {
        throw $thisType.AddErrorData($S05().Construct("token"), reader);
      }
      if ((-value.ToNumber(4294967295, true) | 0) !== (reader.fieldNumber | 0)) {
        throw reader.CreateException("Wrong group was ended");
      }
      reader.wireType = $T0D().None;
      reader.depth = (((reader.depth | 0) - 1) | 0);
      return;
    } else {
      if (!$T05().op_GreaterThanOrEqual(value, reader.position64)) {
        throw reader.CreateException($T09().Format("Sub-message not read entirely; expected {0}, was {1}", value, reader.position64));
      }
      if (!($T05().op_Equality(reader.blockEnd64, reader.position64) || $T05().op_Equality(reader.blockEnd64, $T05().Create(16777215, 16777215, 32767)))) {
        throw reader.CreateException("Sub-message not read correctly");
      }
      reader.blockEnd64 = value;
      reader.depth = (((reader.depth | 0) - 1) | 0);
      return;
    }
  }; 

  function ProtoReader_Ensure (count, strict) {
    var num3 = 0;
    if ((count | 0) > (this.ioBuffer.length | 0)) {
      $T18().ResizeAndFlushLeft(/* ref */ new JSIL.MemberReference(this, "ioBuffer"), count, this.ioIndex, this.available);
      this.ioIndex = 0;
    } else if ((((this.ioIndex | 0) + (count | 0)) | 0) >= (this.ioBuffer.length | 0)) {
      $T0E().BlockCopy(
        this.ioBuffer, 
        this.ioIndex, 
        this.ioBuffer, 
        0, 
        this.available
      );
      this.ioIndex = 0;
    }
    count = (((count | 0) - (this.available | 0)) | 0);
    var num = (((this.ioIndex | 0) + (this.available | 0)) | 0);
    var num2 = (((this.ioBuffer.length | 0) - num) | 0);
    if (!(!this.isFixedLength || $T05().op_GreaterThanOrEqual(this.dataRemaining64, $T05().FromNumber(num2)))) {
      num2 = ((this.dataRemaining64).ToNumber(4294967295, true) | 0);
    }

    while (!(((count | 0) <= 0) || 
        (num2 <= 0)) && ((num3 = ((this.source).Read(this.ioBuffer, num, num2) | 0)) > 0)) {
      this.available = (((this.available | 0) + num3) | 0);
      count = (((count | 0) - num3) | 0);
      num2 = ((num2 - num3) | 0);
      num = ((num + num3) | 0);
      if (this.isFixedLength) {
        this.dataRemaining64 = $T05().op_Subtraction(this.dataRemaining64, $T05().FromNumber(num3));
      }
    }
    if (!(!strict || ((count | 0) <= 0))) {
      throw $thisType.EoF(this);
    }
  }; 

  function ProtoReader_EoF (source) {
    return $thisType.AddErrorData($S06().Construct(), source);
  }; 

  function ProtoReader_get_Context () {
    return this.context;
  }; 

  function ProtoReader_get_FieldNumber () {
    return this.fieldNumber;
  }; 

  function ProtoReader_get_InternStrings () {
    return this.internStrings;
  }; 

  function ProtoReader_get_LongPosition () {
    return this.position64;
  }; 

  function ProtoReader_get_Model () {
    return this.model;
  }; 

  function ProtoReader_get_NetCache () {
    return this.netCache;
  }; 

  function ProtoReader_get_Position () {
    return $T06().$OverflowCheck((this.position64).ToNumber(4294967295, true));
  }; 

  function ProtoReader_get_WireType () {
    return this.wireType;
  }; 

  function ProtoReader_GetRecycled () {
    var result = $thisType.lastReader;
    $thisType.lastReader = null;
    return result;
  }; 

  function ProtoReader_GetTypeKey (/* ref */ type) {
    return (this.model).GetKey(/* ref */ type);
  }; 

  function ProtoReader_HasSubValue (wireType, source) {
    if (source === null) {
      throw $S01().Construct("source");
    }
    if (!($T05().op_GreaterThan(source.blockEnd64, source.position64) && (wireType !== $T0D().EndGroup))) {
      return false;
    }
    source.wireType = wireType;
    return true;
  }; 

  function ProtoReader_Hint (wireType) {
    if (!((this.wireType === wireType) || ($T0D().$Cast(wireType & $T0D().$Cast(7)) !== this.wireType))) {
      this.wireType = wireType;
    }
  }; 

  function ProtoReader_Init (reader, source, model, context, length) {
    if (source === null) {
      throw $S01().Construct("source");
    }
    if (!source.get_CanRead()) {
      throw $S07().Construct("Cannot read from stream", "source");
    }
    reader.source = source;
    reader.ioBuffer = $T18().GetBuffer();
    reader.model = model;
    var flag = $T05().op_GreaterThanOrEqual(length, $T05().Create(0, 0, 0));
    reader.isFixedLength = flag;
    reader.dataRemaining64 = (
      flag
         ? length
         : $T05().Create(0, 0, 0))
    ;
    if (context === null) {
      context = $T04().get_Default();
    } else {
      context.Freeze();
    }
    reader.context = context;
    reader.position64 = $T05().Create(0, 0, 0);
    reader.available = reader.depth = reader.fieldNumber = reader.ioIndex = 0;
    reader.blockEnd64 = $T05().Create(16777215, 16777215, 32767);
    reader.internStrings = true;
    reader.wireType = $T0D().None;
    reader.trapCount = 1;
    if (reader.netCache === null) {
      reader.netCache = new ($T1A())();
    }
  }; 

  function ProtoReader_Intern (value) {
    var text = new JSIL.BoxedVariable(null);
    if (value === null) {
      return null;
    }
    if ((value.length | 0) === 0) {
      return "";
    }
    if (this.stringInterner === null) {
      this.stringInterner = $S08().Construct();
      (this.stringInterner).Add(value, value);
    } else if ($S09().CallVirtual("TryGetValue", null, this.stringInterner, value, /* ref */ text)) {
      value = text.get();
    } else {
      (this.stringInterner).Add(value, value);
    }
    return value;
  }; 

  function ProtoReader_Merge (parent, from, to) {
    if (parent === null) {
      throw $S01().Construct("parent");
    }
    var typeModel = parent.get_Model();
    var serializationContext = parent.get_Context();
    if (typeModel === null) {
      throw $S0A().Construct("Types cannot be merged unless a type-model has been specified");
    }
    var memoryStream = $S0B().Construct();
    try {
      $S0C().CallVirtual("Serialize", null, typeModel, memoryStream, from, serializationContext);
      memoryStream.set_Position($T05().Create(0, 0, 0));
      var result = $S0D().CallVirtual("Deserialize", null, typeModel, memoryStream, to, null);
    } finally {
      if (memoryStream !== null) {
        $IM04().Call(memoryStream, null);
      }
    }
    return result;
  }; 

  function ProtoReader_NoteObject (value, reader) {
    if (reader === null) {
      throw $S01().Construct("reader");
    }
    if ((reader.trapCount >>> 0) !== 0) {
      (reader.netCache).RegisterTrappedObject(value);
      reader.trapCount = (((reader.trapCount >>> 0) - 1) >>> 0);
    }
  }; 

  function ProtoReader_ReadBoolean () {
    var num = (this.ReadUInt32() >>> 0);
    if (num === 0) {
      return false;
    }
    if (num !== 1) {
      throw this.CreateException("Unexpected boolean value");
    }
    return true;
  }; 

  function ProtoReader_ReadByte () {
    return $T01().$OverflowCheck((this.ReadUInt32() & 0xFF));
  }; 

  function ProtoReader_ReadByteOrThrow (source) {
    var num = (source.ReadByte() | 0);
    if (num < 0) {
      throw $thisType.EoF(null);
    }
    return num;
  }; 

  function ProtoReader_ReadDouble () {
    var wireType = this.wireType;
    if (wireType === $T0D().Fixed64) {
      var num = this.ReadInt64();
      return 
      /* WARNING: Mutating the result pointer will not mutate the input value. */ 
      JSIL.PinValueAndGetPointer(num, $asm07.System.Int64, JSIL.Pointer.Of($asm07.System.Double)).get();
    }
    if (wireType === $T0D().Fixed32) {
      return this.ReadSingle();
    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_ReadFieldHeader () {
    var num = new JSIL.BoxedVariable(0);
    if (!($T05().op_GreaterThan(this.blockEnd64, this.position64) && (this.wireType !== $T0D().EndGroup))) {
      return 0;
    }
    if (!(!this.TryReadUInt32Variant(/* ref */ num) || ((num.get() >>> 0) === 0))) {
      this.wireType = $T0D().$Cast((num.get() >>> 0) & 7);
      this.fieldNumber = ((num.get() >>> 0) >>> (3 >>> 0) | 0);
      if ((this.fieldNumber | 0) < 1) {
        throw $S02().Construct(JSIL.ConcatString("Invalid field in source data: ", (this.fieldNumber).toString()));
      }
    } else {
      this.wireType = $T0D().None;
      this.fieldNumber = 0;
    }
    if (this.wireType !== $T0D().EndGroup) {
      return this.fieldNumber;
    }
    if ((this.depth | 0) > 0) {
      return 0;
    }
    throw $S02().Construct("Unexpected end-group in source data; this usually means the source data is corrupt");
  }; 

  function ProtoReader_ReadInt16 () {
    return $T21().$OverflowCheck(((this.ReadInt32() + 0x8000 & 0xFFFF) - 0x8000));
  }; 

  function ProtoReader_ReadInt32 () {
    var wireType = this.wireType;
    if (wireType <= $T0D().Fixed64) {
      if ((wireType.valueOf() | 0) === 0) {
        return (this.ReadUInt32Variant(true) | 0);
      }
      if (wireType === $T0D().Fixed64) {
        var num = this.ReadInt64();
        return $T06().$OverflowCheck(num.ToNumber(4294967295, true));
      }
    } else {
      if (wireType === $T0D().Fixed32) {
        if ((this.available | 0) < 4) {
          this.Ensure(4, true);
        }
        this.position64 = $T05().op_Addition(this.position64, $T05().Create(4, 0, 0));
        this.available = (((this.available | 0) - 4) | 0);
        var arg_77_0 = this.ioBuffer;
        var num2 = (this.ioIndex | 0);
        this.ioIndex = ((num2 + 1) | 0);
        var arg_92_0 = (arg_77_0[num2] | 0);
        var arg_8F_0 = this.ioBuffer;
        num2 = (this.ioIndex | 0);
        this.ioIndex = ((num2 + 1) | 0);
        var arg_AE_0 = arg_92_0 | ((arg_8F_0[num2] | 0) << 8);
        var arg_AA_0 = this.ioBuffer;
        num2 = (this.ioIndex | 0);
        this.ioIndex = ((num2 + 1) | 0);
        var arg_CA_0 = arg_AE_0 | ((arg_AA_0[num2] | 0) << 16);
        var arg_C6_0 = this.ioBuffer;
        num2 = (this.ioIndex | 0);
        this.ioIndex = ((num2 + 1) | 0);
        return (arg_CA_0 | ((arg_C6_0[num2] | 0) << 24));
      }
      if (wireType === $T0D().SignedVariant) {
        return $S0E().CallStatic($thisType, "Zag", null, this.ReadUInt32Variant(true));
      }
    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_ReadInt64 () {
    var wireType = this.wireType;
    if (wireType <= $T0D().Fixed64) {
      if ((wireType.valueOf() | 0) === 0) {
        return (this.ReadUInt64Variant()).ToInt64();
      }
      if (wireType === $T0D().Fixed64) {
        if ((this.available | 0) < 8) {
          this.Ensure(8, true);
        }
        this.position64 = $T05().op_Addition(this.position64, $T05().Create(8, 0, 0));
        this.available = (((this.available | 0) - 8) | 0);
        var arg_7B_0 = this.ioBuffer;
        var num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_98_0 = (arg_7B_0[num]).ToInt64();
        var arg_94_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_B5_0 = $T05().op_BitwiseOr(arg_98_0, $T05().op_LeftShift((arg_94_0[num]).ToInt64(), 8));
        var arg_B0_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_D2_0 = $T05().op_BitwiseOr(arg_B5_0, $T05().op_LeftShift((arg_B0_0[num]).ToInt64(), 16));
        var arg_CD_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_EF_0 = $T05().op_BitwiseOr(arg_D2_0, $T05().op_LeftShift((arg_CD_0[num]).ToInt64(), 24));
        var arg_EA_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_10C_0 = $T05().op_BitwiseOr(arg_EF_0, $T05().op_LeftShift((arg_EA_0[num]).ToInt64(), 32));
        var arg_107_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_129_0 = $T05().op_BitwiseOr(arg_10C_0, $T05().op_LeftShift((arg_107_0[num]).ToInt64(), 40));
        var arg_124_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        var arg_146_0 = $T05().op_BitwiseOr(arg_129_0, $T05().op_LeftShift((arg_124_0[num]).ToInt64(), 48));
        var arg_141_0 = this.ioBuffer;
        num = (this.ioIndex | 0);
        this.ioIndex = ((num + 1) | 0);
        return $T05().op_BitwiseOr(arg_146_0, $T05().op_LeftShift((arg_141_0[num]).ToInt64(), 56));
      }
    } else {
      if (wireType === $T0D().Fixed32) {
        return $T05().FromNumber(this.ReadInt32());
      }
      if (wireType === $T0D().SignedVariant) {
        return $S0F().CallStatic($thisType, "Zag", null, this.ReadUInt64Variant());
      }
    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_ReadLengthPrefix$07 (source, expectHeader, style, /* ref */ fieldNumber) {
    var num = new JSIL.BoxedVariable(0);
    return $thisType.ReadLengthPrefix(
      source, 
      expectHeader, 
      style, 
      /* ref */ fieldNumber, 
      /* ref */ num
    );
  }; 

  function ProtoReader_ReadLengthPrefix$08 (source, expectHeader, style, /* ref */ fieldNumber, /* ref */ bytesRead) {
    if ((style.valueOf() | 0) === 0) {
      bytesRead.set(fieldNumber.set(0));
      return 2147483647;
    }
    var num = $thisType.ReadLongLengthPrefix(
      source, 
      expectHeader, 
      style, 
      /* ref */ fieldNumber, 
      /* ref */ bytesRead
    );
    return $T06().$OverflowCheck(num.ToNumber(4294967295, true));
  }; 

  function ProtoReader_ReadLongLengthPrefix (source, expectHeader, style, /* ref */ fieldNumber, /* ref */ bytesRead) {
    var num2 = new JSIL.BoxedVariable($T17().Create(0, 0, 0));
    fieldNumber.set(0);
    switch (style.valueOf()) {
      case 0: 
        bytesRead.set(0);
        return $T05().Create(16777215, 16777215, 32767);

      case 1: 
        bytesRead.set(0);
        if (expectHeader) {
          var num = ($thisType.TryReadUInt64Variant(source, /* ref */ num2) | 0);
          bytesRead.set((((bytesRead.get() | 0) + num) | 0));
          if (num <= 0) {
            bytesRead.set(0);
            return $T05().Create(16777215, 16777215, 65535);
          }
          if (!$T17().op_Equality(
              $T17().op_BitwiseAnd(
                num2.get(), 
                $T17().Create(7, 0, 0)
              ), 
              $T17().Create(2, 0, 0)
            )) {
            throw $S10().Construct();
          }
          fieldNumber.set(($T17().op_RightShift(num2.get(), (3 >>> 0))).ToNumber(4294967295, true));
          num = ($thisType.TryReadUInt64Variant(source, /* ref */ num2) | 0);
          bytesRead.set((((bytesRead.get() | 0) + num) | 0));
          if ((bytesRead.get() | 0) === 0) {
            throw $thisType.EoF(null);
          }
          return (num2.get()).ToInt64();
        } else {
          num = ($thisType.TryReadUInt64Variant(source, /* ref */ num2) | 0);
          bytesRead.set((((bytesRead.get() | 0) + num) | 0));
          if ((bytesRead.get() | 0) >= 0) {
            return (num2.get()).ToInt64();
          }
          return $T05().Create(16777215, 16777215, 65535);
        }
        break;

      case 2: 
        var num3 = (source.ReadByte() | 0);
        if (num3 < 0) {
          bytesRead.set(0);
          return $T05().Create(16777215, 16777215, 65535);
        }
        bytesRead.set(4);
        return $T05().FromNumber(((num3 | (($thisType.ReadByteOrThrow(source) | 0) << 8)) | (($thisType.ReadByteOrThrow(source) | 0) << 16)) | (($thisType.ReadByteOrThrow(source) | 0) << 24));

      case 3: 
        var num4 = (source.ReadByte() | 0);
        if (num4 < 0) {
          bytesRead.set(0);
          return $T05().Create(16777215, 16777215, 65535);
        }
        bytesRead.set(4);
        return $T05().FromNumber((((num4 << 24) | (($thisType.ReadByteOrThrow(source) | 0) << 16)) | (($thisType.ReadByteOrThrow(source) | 0) << 8)) | ($thisType.ReadByteOrThrow(source) | 0));

      default: 
        throw $S11().Construct("style");

    }
  }; 

  function ProtoReader_ReadObject (value, key, reader) {
    return $thisType.ReadTypedObject(value, key, reader, null);
  }; 

  function ProtoReader_ReadSByte () {
    return $T24().$OverflowCheck(((this.ReadInt32() + 0x80 & 0xFF) - 0x80));
  }; 

  function ProtoReader_ReadSingle () {
    var wireType = this.wireType;
    if (wireType !== $T0D().Fixed64) {
      if (wireType === $T0D().Fixed32) {
        var num = (this.ReadInt32() | 0);
        return 
        /* WARNING: Mutating the result pointer will not mutate the input value. */ 
        JSIL.PinValueAndGetPointer(num, $asm07.System.Int32, JSIL.Pointer.Of($asm07.System.Single)).get();
      }
      throw this.CreateWireTypeException();
    } else {
      var num2 = +this.ReadDouble();
      var num3 = Math.fround(num2);
      if (!(!$S12().CallStatic($T0E(), "IsInfinity", null, num3) || $S13().CallStatic($T0E(), "IsInfinity", null, num2))) {
        throw $thisType.AddErrorData($S14().Construct(), this);
      }
      return num3;
    }
  }; 

  function ProtoReader_ReadString () {
    if (this.wireType !== $T0D().String) {
      throw this.CreateWireTypeException();
    }
    var num = (this.ReadUInt32Variant(false) | 0);
    if (num === 0) {
      return "";
    }
    if ((this.available | 0) < num) {
      this.Ensure(num, true);
    }
    var text = $thisType.encoding.GetString(this.ioBuffer, this.ioIndex, num);
    if (this.internStrings) {
      text = this.Intern(text);
    }
    this.available = (((this.available | 0) - num) | 0);
    this.position64 = $T05().op_Addition(this.position64, $T05().FromNumber(num));
    this.ioIndex = (((this.ioIndex | 0) + num) | 0);
    return text;
  }; 

  function ProtoReader_ReadType () {
    return $T03().DeserializeType(this.model, this.ReadString());
  }; 

  function ProtoReader_ReadTypedObject ($value, key, reader, type) {
    var value = new JSIL.BoxedVariable($value);
    if (reader.model === null) {
      throw $thisType.AddErrorData($S0A().Construct("Cannot deserialize sub-objects unless a model is provided"), reader);
    }
    var token = $thisType.StartSubItem(reader);
    if ((key | 0) >= 0) {
      value.set($S15().CallVirtual("Deserialize", null, reader.model, key, value.get(), reader));
    } else if (!($T1D().op_Inequality(type, null) && (reader.model).TryDeserializeAuxiliaryType(
          reader, 
          $T28().Default, 
          1, 
          type, 
          /* ref */ value, 
          true, 
          false, 
          true, 
          false
        ))) {
      $T03().ThrowUnexpectedType(type);
    }
    $thisType.EndSubItem(token, reader);
    return value.get();
  }; 

  function ProtoReader_ReadUInt16 () {
    return $T29().$OverflowCheck((this.ReadUInt32() & 0xFFFF));
  }; 

  function ProtoReader_ReadUInt32 () {
    var wireType = this.wireType;
    if ((wireType.valueOf() | 0) === 0) {
      return this.ReadUInt32Variant(false);
    }
    if (wireType === $T0D().Fixed64) {
      var num = this.ReadUInt64();
      return $T20().$OverflowCheck(num.ToNumber(4294967295, false));
    }
    if (wireType !== $T0D().Fixed32) {
      throw this.CreateWireTypeException();
    }
    if ((this.available | 0) < 4) {
      this.Ensure(4, true);
    }
    this.position64 = $T05().op_Addition(this.position64, $T05().Create(4, 0, 0));
    this.available = (((this.available | 0) - 4) | 0);
    var arg_67_0 = this.ioBuffer;
    var num2 = (this.ioIndex | 0);
    this.ioIndex = ((num2 + 1) | 0);
    var arg_82_0 = (arg_67_0[num2] >>> 0);
    var arg_7F_0 = this.ioBuffer;
    num2 = (this.ioIndex | 0);
    this.ioIndex = ((num2 + 1) | 0);
    var arg_9E_0 = arg_82_0 | ((arg_7F_0[num2] >>> 0) << 8);
    var arg_9A_0 = this.ioBuffer;
    num2 = (this.ioIndex | 0);
    this.ioIndex = ((num2 + 1) | 0);
    var arg_BA_0 = arg_9E_0 | ((arg_9A_0[num2] >>> 0) << 16);
    var arg_B6_0 = this.ioBuffer;
    num2 = (this.ioIndex | 0);
    this.ioIndex = ((num2 + 1) | 0);
    return (arg_BA_0 | ((arg_B6_0[num2] >>> 0) << 24));
  }; 

  function ProtoReader_ReadUInt32Variant (trimNegative) {
    var result = new JSIL.BoxedVariable(0);
    var num = (this.TryReadUInt32VariantWithoutMoving(trimNegative, /* ref */ result) | 0);
    if (num > 0) {
      this.ioIndex = (((this.ioIndex | 0) + num) | 0);
      this.available = (((this.available | 0) - num) | 0);
      this.position64 = $T05().op_Addition(this.position64, $T05().FromNumber(num));
      return result.get();
    }
    throw $thisType.EoF(this);
  }; 

  function ProtoReader_ReadUInt64 () {
    var wireType = this.wireType;
    if ((wireType.valueOf() | 0) === 0) {
      return this.ReadUInt64Variant();
    }
    if (wireType === $T0D().Fixed64) {
      if ((this.available | 0) < 8) {
        this.Ensure(8, true);
      }
      this.position64 = $T05().op_Addition(this.position64, $T05().Create(8, 0, 0));
      this.available = (((this.available | 0) - 8) | 0);
      var arg_6B_0 = this.ioBuffer;
      var num = (this.ioIndex | 0);
      this.ioIndex = ((num + 1) | 0);
      var arg_88_0 = arg_6B_0[num];
      var arg_84_0 = this.ioBuffer;
      num = (this.ioIndex | 0);
      this.ioIndex = ((num + 1) | 0);
      var arg_A5_0 = $T17().op_BitwiseOr(arg_88_0, $T17().op_LeftShift(arg_84_0[num], 8));
      var arg_A0_0 = this.ioBuffer;
      num = (this.ioIndex | 0);
      this.ioIndex = ((num + 1) | 0);
      var arg_C2_0 = $T17().op_BitwiseOr(arg_A5_0, $T17().op_LeftShift(arg_A0_0[num], 16));
      var arg_BD_0 = this.ioBuffer;
      num = (this.ioIndex | 0);
      this.ioIndex = ((num + 1) | 0);
      var arg_DF_0 = $T17().op_BitwiseOr(arg_C2_0, $T17().op_LeftShift(arg_BD_0[num], 24));
      var arg_DA_0 = this.ioBuffer;
      num = (this.ioIndex | 0);
      this.ioIndex = ((num + 1) | 0);
      var arg_FC_0 = $T17().op_BitwiseOr(arg_DF_0, $T17().op_LeftShift(arg_DA_0[num], 32));
      var arg_F7_0 = this.ioBuffer;
      num = (this.ioIndex | 0);
      this.ioIndex = ((num + 1) | 0);
      var arg_119_0 = $T17().op_BitwiseOr(arg_FC_0, $T17().op_LeftShift(arg_F7_0[num], 40));
      var arg_114_0 = this.ioBuffer;
      num = (this.ioIndex | 0);
      this.ioIndex = ((num + 1) | 0);
      var arg_136_0 = $T17().op_BitwiseOr(arg_119_0, $T17().op_LeftShift(arg_114_0[num], 48));
      var arg_131_0 = this.ioBuffer;
      num = (this.ioIndex | 0);
      this.ioIndex = ((num + 1) | 0);
      return $T17().op_BitwiseOr(arg_136_0, $T17().op_LeftShift(arg_131_0[num], 56));
    }
    if (wireType !== $T0D().Fixed32) {
      throw this.CreateWireTypeException();
    }
    return $T17().FromNumber(this.ReadUInt32());
  }; 

  function ProtoReader_ReadUInt64Variant () {
    var result = new JSIL.BoxedVariable($T17().Create(0, 0, 0));
    var num = (this.TryReadUInt64VariantWithoutMoving(/* ref */ result) | 0);
    if (num > 0) {
      this.ioIndex = (((this.ioIndex | 0) + num) | 0);
      this.available = (((this.available | 0) - num) | 0);
      this.position64 = $T05().op_Addition(this.position64, $T05().FromNumber(num));
      return result.get();
    }
    throw $thisType.EoF(this);
  }; 

  function ProtoReader_Recycle (reader) {
    if (reader !== null) {
      reader.Dispose();
      $thisType.lastReader = reader;
    }
  }; 

  function ProtoReader_Seek (source, count, $buffer) {
    var buffer = new JSIL.BoxedVariable($buffer);
    var num = 0, num2 = 0;
    if (source.get_CanSeek()) {
      source.Seek(count, $T2A().Current);
      count = $T05().Create(0, 0, 0);
    } else if (buffer.get() !== null) {

    $loop2: 
      for (; !$T05().op_LessThanOrEqual(count, $T05().FromNumber(buffer.get().length)); count = $T05().op_Subtraction(count, $T05().FromNumber(num))) {
        if ((num = (source.Read(buffer.get(), 0, buffer.get().length) | 0)) <= 0) {
          break $loop2;
        }
      }

    $loop3: 
      for (; !$T05().op_LessThanOrEqual(count, $T05().Create(0, 0, 0)); count = $T05().op_Subtraction(count, $T05().FromNumber(num))) {
        if ((num = (source.Read(buffer.get(), 0, count.ToNumber(4294967295, true)) | 0)) <= 0) {
          break $loop3;
        }
      }
    } else {
      buffer.set($T18().GetBuffer());
      try {

      $loop0: 
        for (; !$T05().op_LessThanOrEqual(count, $T05().FromNumber(buffer.get().length)); count = $T05().op_Subtraction(count, $T05().FromNumber(num2))) {
          if ((num2 = (source.Read(buffer.get(), 0, buffer.get().length) | 0)) <= 0) {
            break $loop0;
          }
        }

        for (; $T05().op_GreaterThan(count, $T05().Create(0, 0, 0)) && ((num2 = (source.Read(buffer.get(), 0, count.ToNumber(4294967295, true)) | 0)) > 0); count = $T05().op_Subtraction(count, $T05().FromNumber(num2))) {
        }
      } finally {
        $T18().ReleaseBufferToPool(/* ref */ buffer);
      }
    }
    if (!$T05().op_LessThanOrEqual(count, $T05().Create(0, 0, 0))) {
      throw $thisType.EoF(null);
    }
  }; 

  function ProtoReader_set_InternStrings (value) {
    this.internStrings = value;
  }; 

  function ProtoReader_SetRootObject (value) {
    (this.netCache).SetKeyedObject(0, value);
    this.trapCount = (((this.trapCount >>> 0) - 1) >>> 0);
  }; 

  function ProtoReader_SkipField () {
    switch ((this.wireType).valueOf()) {
      case 0: 
      case 8: 
        this.ReadUInt64Variant();
        return;

      case 1: 
        if ((this.available | 0) < 8) {
          this.Ensure(8, true);
        }
        this.available = (((this.available | 0) - 8) | 0);
        this.ioIndex = (((this.ioIndex | 0) + 8) | 0);
        this.position64 = $T05().op_Addition(this.position64, $T05().Create(8, 0, 0));
        return;

      case 2: 
        var num = (this.ReadUInt64Variant()).ToInt64();
        if (!$T05().op_GreaterThan(num, $T05().FromNumber(this.available))) {
          this.available = (((this.available | 0) - (num.ToNumber(4294967295, true) | 0)) | 0);
          this.ioIndex = (((this.ioIndex | 0) + (num.ToNumber(4294967295, true) | 0)) | 0);
          this.position64 = $T05().op_Addition(this.position64, num);
          return;
        }
        this.position64 = $T05().op_Addition(this.position64, num);
        num = $T05().op_Subtraction(num, $T05().FromNumber(this.available));
        this.ioIndex = this.available = 0;
        if (this.isFixedLength) {
          if (!$T05().op_LessThanOrEqual(num, this.dataRemaining64)) {
            throw $thisType.EoF(this);
          }
          this.dataRemaining64 = $T05().op_Subtraction(this.dataRemaining64, num);
        }
        $thisType.Seek(this.source, num, this.ioBuffer);
        return;

      case 3: 
        var num2 = (this.fieldNumber | 0);
        this.depth = (((this.depth | 0) + 1) | 0);

        while ((this.ReadFieldHeader() | 0) > 0) {
          this.SkipField();
        }
        this.depth = (((this.depth | 0) - 1) | 0);
        if (!((this.wireType !== $T0D().EndGroup) || ((this.fieldNumber | 0) !== num2))) {
          this.wireType = $T0D().None;
          return;
        }
        throw this.CreateWireTypeException();

      case 5: 
        if ((this.available | 0) < 4) {
          this.Ensure(4, true);
        }
        this.available = (((this.available | 0) - 4) | 0);
        this.ioIndex = (((this.ioIndex | 0) + 4) | 0);
        this.position64 = $T05().op_Addition(this.position64, $T05().Create(4, 0, 0));
        return;

    }
    throw this.CreateWireTypeException();
  }; 

  function ProtoReader_StartSubItem (reader) {
    if (reader === null) {
      throw $S01().Construct("reader");
    }
    var wireType = reader.wireType;
    if (wireType !== $T0D().String) {
      if (wireType === $T0D().StartGroup) {
        reader.wireType = $T0D().None;
        reader.depth = (((reader.depth | 0) + 1) | 0);
        return $S16().Construct($T05().FromNumber((-$T05().FromNumber(reader.fieldNumber) | 0)));
      }
      throw reader.CreateWireTypeException();
    } else {
      var num = (reader.ReadUInt64Variant()).ToInt64();
      if (!$T05().op_GreaterThanOrEqual(num, $T05().Create(0, 0, 0))) {
        throw $thisType.AddErrorData($S10().Construct(), reader);
      }
      var value = reader.blockEnd64;
      reader.blockEnd64 = $T05().op_Addition(reader.position64, num);
      reader.depth = (((reader.depth | 0) + 1) | 0);
      return $S16().Construct(value);
    }
  }; 

  function ProtoReader_ThrowEnumException (type, value) {
    var str = (
      $T1D().op_Equality(type, null)
         ? "<null>"
         : type.get_FullName())
    ;
    throw $thisType.AddErrorData($S02().Construct(("No " + str + " enum is mapped to the wire-value " + (value).toString())), this);
  }; 

  function ProtoReader_TrapNextObject (newObjectKey) {
    this.trapCount = (((this.trapCount >>> 0) + 1) >>> 0);
    (this.netCache).SetKeyedObject(newObjectKey, null);
  }; 

  function ProtoReader_TryReadFieldHeader (field) {
    var num2 = new JSIL.BoxedVariable(0);
    var wireType = $asm08.ProtoBuf.WireType.Variant;
    if (!($T05().op_GreaterThan(this.blockEnd64, this.position64) && (this.wireType !== $T0D().EndGroup))) {
      return false;
    }
    var num = (this.TryReadUInt32VariantWithoutMoving(false, /* ref */ num2) | 0);
    if (!((num <= 0) || 
        (((num2.get() | 0) >> 3) !== (field | 0)) || ((wireType = $T0D().$Cast((num2.get() >>> 0) & 7)) === $T0D().EndGroup))) {
      this.wireType = wireType;
      this.fieldNumber = (field | 0);
      this.position64 = $T05().op_Addition(this.position64, $T05().FromNumber(num));
      this.ioIndex = (((this.ioIndex | 0) + num) | 0);
      this.available = (((this.available | 0) - num) | 0);
      return true;
    }
    return false;
  }; 

  function ProtoReader_TryReadUInt32Variant (/* ref */ value) {
    var num = (this.TryReadUInt32VariantWithoutMoving(false, /* ref */ value) | 0);
    if (num > 0) {
      this.ioIndex = (((this.ioIndex | 0) + num) | 0);
      this.available = (((this.available | 0) - num) | 0);
      this.position64 = $T05().op_Addition(this.position64, $T05().FromNumber(num));
      return true;
    }
    return false;
  }; 

  function ProtoReader_TryReadUInt32VariantWithoutMoving (trimNegative, /* ref */ value) {
    var $temp00, $temp01, $temp02, $temp03;
    if ((this.available | 0) < 10) {
      this.Ensure(10, false);
    }
    if ((this.available | 0) === 0) {
      value.set(0);
      return 0;
    }
    var num = (this.ioIndex | 0);
    value.set(this.ioBuffer[($temp00 = num, 
        num = ((num + 1) | 0), 
        $temp00)]);
    if (((value.get() >>> 0) & 128) === 0) {
      return 1;
    }
    value.set((value.get() >>> 0) & 127);
    if ((this.available | 0) === 1) {
      throw $thisType.EoF(this);
    }
    var num2 = (this.ioBuffer[($temp01 = num, 
      num = ((num + 1) | 0), 
      $temp01)] | 0);
    value.set((value.get() >>> 0) | ((num2 & 127) << 7));
    if ((num2 & 128) === 0) {
      return 2;
    }
    if ((this.available | 0) === 2) {
      throw $thisType.EoF(this);
    }
    num2 = (this.ioBuffer[($temp02 = num, 
      num = ((num + 1) | 0), 
      $temp02)] | 0);
    value.set((value.get() >>> 0) | ((num2 & 127) << 14));
    if ((num2 & 128) === 0) {
      return 3;
    }
    if ((this.available | 0) === 3) {
      throw $thisType.EoF(this);
    }
    num2 = (this.ioBuffer[($temp03 = num, 
      num = ((num + 1) | 0), 
      $temp03)] | 0);
    value.set((value.get() >>> 0) | ((num2 & 127) << 21));
    if ((num2 & 128) === 0) {
      return 4;
    }
    if ((this.available | 0) === 4) {
      throw $thisType.EoF(this);
    }
    num2 = (this.ioBuffer[num] | 0);
    value.set((value.get() >>> 0) | (num2 << 28));
    if ((num2 & 240) === 0) {
      return 5;
    }
    if (!(!trimNegative || 
        ((num2 & 240) !== 240) || 
        ((this.available | 0) < 10) || 
        ((this.ioBuffer[(num = ((num + 1) | 0))] | 0) !== 255) || 
        ((this.ioBuffer[(num = ((num + 1) | 0))] | 0) !== 255) || 
        ((this.ioBuffer[(num = ((num + 1) | 0))] | 0) !== 255) || 
        ((this.ioBuffer[(num = ((num + 1) | 0))] | 0) !== 255) || ((this.ioBuffer[((num + 1) | 0)] | 0) !== 1))) {
      return 10;
    }
    throw $thisType.AddErrorData($S14().Construct(), this);
  }; 

  function ProtoReader_TryReadUInt64Variant (source, /* ref */ value) {
    value.set($T17().Create(0, 0, 0));
    var num = (source.ReadByte() | 0);
    if (num < 0) {
      return 0;
    }
    value.set($T17().FromNumber(num));
    if (!$T17().op_Inequality(
        $T17().op_BitwiseAnd(
          value.get(), 
          $T17().Create(128, 0, 0)
        ), 
        $T17().Create(0, 0, 0)
      )) {
      return 1;
    }
    var i = 1;
    var num2 = 7;

    while (i < 9) {
      num = (source.ReadByte() | 0);
      if (num < 0) {
        throw $thisType.EoF(null);
      }
      value.set($T17().op_BitwiseOr(
          value.get(), 
          $T17().op_LeftShift($T17().FromNumber(num & 127), num2)
        ));
      num2 = ((num2 + 7) | 0);
      if ((num & 128) === 0) {
        return ((i + 1) | 0);
      }
    }
    num = (source.ReadByte() | 0);
    if (num < 0) {
      throw $thisType.EoF(null);
    }
    if ((num & 1) === 0) {
      value.set($T17().op_BitwiseOr(
          value.get(), 
          $T17().op_LeftShift($T17().FromNumber(num & 127), num2)
        ));
      return ((i + 1) | 0);
    }
    throw $S14().Construct();
  }; 

  function ProtoReader_TryReadUInt64VariantWithoutMoving (/* ref */ value) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06, $temp07, $temp08;
    if ((this.available | 0) < 10) {
      this.Ensure(10, false);
    }
    if ((this.available | 0) === 0) {
      value.set($T17().Create(0, 0, 0));
      return 0;
    }
    var num = (this.ioIndex | 0);
    value.set($T17().FromNumber(this.ioBuffer[($temp00 = num, 
          num = ((num + 1) | 0), 
          $temp00)]));
    if (!$T17().op_Inequality(
        $T17().op_BitwiseAnd(
          value.get(), 
          $T17().Create(128, 0, 0)
        ), 
        $T17().Create(0, 0, 0)
      )) {
      return 1;
    }
    value.set($T17().op_BitwiseAnd(
        value.get(), 
        $T17().Create(127, 0, 0)
      ));
    if ((this.available | 0) === 1) {
      throw $thisType.EoF(this);
    }
    var num2 = $T17().FromNumber(this.ioBuffer[($temp01 = num, 
        num = ((num + 1) | 0), 
        $temp01)]);
    value.set($T17().op_BitwiseOr(
        value.get(), 
        $T17().op_LeftShift($T17().op_BitwiseAnd(num2, $T17().Create(127, 0, 0)), 7)
      ));
    if (!$T17().op_Inequality(
        $T17().op_BitwiseAnd(num2, $T17().Create(128, 0, 0)), 
        $T17().Create(0, 0, 0)
      )) {
      return 2;
    }
    if ((this.available | 0) === 2) {
      throw $thisType.EoF(this);
    }
    num2 = $T17().FromNumber(this.ioBuffer[($temp02 = num, 
        num = ((num + 1) | 0), 
        $temp02)]);
    value.set($T17().op_BitwiseOr(
        value.get(), 
        $T17().op_LeftShift($T17().op_BitwiseAnd(num2, $T17().Create(127, 0, 0)), 14)
      ));
    if (!$T17().op_Inequality(
        $T17().op_BitwiseAnd(num2, $T17().Create(128, 0, 0)), 
        $T17().Create(0, 0, 0)
      )) {
      return 3;
    }
    if ((this.available | 0) === 3) {
      throw $thisType.EoF(this);
    }
    num2 = $T17().FromNumber(this.ioBuffer[($temp03 = num, 
        num = ((num + 1) | 0), 
        $temp03)]);
    value.set($T17().op_BitwiseOr(
        value.get(), 
        $T17().op_LeftShift($T17().op_BitwiseAnd(num2, $T17().Create(127, 0, 0)), 21)
      ));
    if (!$T17().op_Inequality(
        $T17().op_BitwiseAnd(num2, $T17().Create(128, 0, 0)), 
        $T17().Create(0, 0, 0)
      )) {
      return 4;
    }
    if ((this.available | 0) === 4) {
      throw $thisType.EoF(this);
    }
    num2 = $T17().FromNumber(this.ioBuffer[($temp04 = num, 
        num = ((num + 1) | 0), 
        $temp04)]);
    value.set($T17().op_BitwiseOr(
        value.get(), 
        $T17().op_LeftShift($T17().op_BitwiseAnd(num2, $T17().Create(127, 0, 0)), 28)
      ));
    if (!$T17().op_Inequality(
        $T17().op_BitwiseAnd(num2, $T17().Create(128, 0, 0)), 
        $T17().Create(0, 0, 0)
      )) {
      return 5;
    }
    if ((this.available | 0) === 5) {
      throw $thisType.EoF(this);
    }
    num2 = $T17().FromNumber(this.ioBuffer[($temp05 = num, 
        num = ((num + 1) | 0), 
        $temp05)]);
    value.set($T17().op_BitwiseOr(
        value.get(), 
        $T17().op_LeftShift($T17().op_BitwiseAnd(num2, $T17().Create(127, 0, 0)), 35)
      ));
    if (!$T17().op_Inequality(
        $T17().op_BitwiseAnd(num2, $T17().Create(128, 0, 0)), 
        $T17().Create(0, 0, 0)
      )) {
      return 6;
    }
    if ((this.available | 0) === 6) {
      throw $thisType.EoF(this);
    }
    num2 = $T17().FromNumber(this.ioBuffer[($temp06 = num, 
        num = ((num + 1) | 0), 
        $temp06)]);
    value.set($T17().op_BitwiseOr(
        value.get(), 
        $T17().op_LeftShift($T17().op_BitwiseAnd(num2, $T17().Create(127, 0, 0)), 42)
      ));
    if (!$T17().op_Inequality(
        $T17().op_BitwiseAnd(num2, $T17().Create(128, 0, 0)), 
        $T17().Create(0, 0, 0)
      )) {
      return 7;
    }
    if ((this.available | 0) === 7) {
      throw $thisType.EoF(this);
    }
    num2 = $T17().FromNumber(this.ioBuffer[($temp07 = num, 
        num = ((num + 1) | 0), 
        $temp07)]);
    value.set($T17().op_BitwiseOr(
        value.get(), 
        $T17().op_LeftShift($T17().op_BitwiseAnd(num2, $T17().Create(127, 0, 0)), 49)
      ));
    if (!$T17().op_Inequality(
        $T17().op_BitwiseAnd(num2, $T17().Create(128, 0, 0)), 
        $T17().Create(0, 0, 0)
      )) {
      return 8;
    }
    if ((this.available | 0) === 8) {
      throw $thisType.EoF(this);
    }
    num2 = $T17().FromNumber(this.ioBuffer[($temp08 = num, 
        num = ((num + 1) | 0), 
        $temp08)]);
    value.set($T17().op_BitwiseOr(
        value.get(), 
        $T17().op_LeftShift($T17().op_BitwiseAnd(num2, $T17().Create(127, 0, 0)), 56)
      ));
    if (!$T17().op_Inequality(
        $T17().op_BitwiseAnd(num2, $T17().Create(128, 0, 0)), 
        $T17().Create(0, 0, 0)
      )) {
      return 9;
    }
    if ((this.available | 0) === 9) {
      throw $thisType.EoF(this);
    }
    num2 = $T17().FromNumber(this.ioBuffer[num]);
    value.set($T17().op_BitwiseOr(
        value.get(), 
        $T17().op_LeftShift(num2, 63)
      ));
    if ($T17().op_Inequality(
        $T17().op_BitwiseAnd(num2, $T17().Create(16777214, 16777215, 65535)), 
        $T17().Create(0, 0, 0)
      )) {
      throw $thisType.AddErrorData($S14().Construct(), this);
    }
    return 10;
  }; 

  function ProtoReader_Zag$09 (ziggedValue) {
    return ((-((ziggedValue >>> 0) & 1) >>> 0) ^ (((ziggedValue | 0) >> 1) & 2147483647 >>> 0) | 0);
  }; 

  function ProtoReader_Zag$0A (ziggedValue) {
    return ($T17().op_ExclusiveOr(
        $T05().op_UnaryNegation(($T17().op_BitwiseAnd(ziggedValue, $T17().Create(1, 0, 0))).ToInt64()), 
        $T17().op_BitwiseAnd(
          $T17().op_RightShift(ziggedValue, 1), 
          $T17().Create(16777215, 16777215, 32767)
        )
      )).ToInt64();
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.ProtoReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      ProtoReader__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext"), $.Int32
        ]), 
      ProtoReader__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext"), $.Int64
        ]), 
      ProtoReader__ctor$02
    );

    $.Method({Static:true , Public:false}, "AddErrorData", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception"), $.Type]), 
      ProtoReader_AddErrorData
    );

    $.Method({Static:true , Public:true }, "AppendBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Type]), 
      ProtoReader_AppendBytes
    );

    $.Method({Static:false, Public:true }, "AppendExtensionData", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.IExtensible")), 
      ProtoReader_AppendExtensionData
    );

    $.Method({Static:false, Public:false}, "AppendExtensionField", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.ProtoWriter")), 
      ProtoReader_AppendExtensionField
    );

    $.Method({Static:false, Public:true }, "Assert", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.WireType")), 
      ProtoReader_Assert
    );

    $.Method({Static:false, Public:false}, "CheckFullyConsumed", 
      JSIL.MethodSignature.Void, 
      ProtoReader_CheckFullyConsumed
    );

    $.Method({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext"), $.Int32
        ]), 
      ProtoReader_Create$03
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["32-bit"]; });

    $.Method({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext"), $.Int64
        ]), 
      ProtoReader_Create$04
    );

    $.Method({Static:false, Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String]), 
      ProtoReader_CreateException
    );

    $.Method({Static:false, Public:false}, "CreateWireTypeException", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception")), 
      ProtoReader_CreateWireTypeException
    );

    $.Method({Static:false, Public:false}, "DeserializeType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String]), 
      ProtoReader_DeserializeType
    );

    $.Method({Static:true , Public:true }, "DirectReadBigEndianInt32", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.Stream")]), 
      ProtoReader_DirectReadBigEndianInt32
    );

    $.Method({Static:true , Public:true }, "DirectReadBytes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ]), 
      ProtoReader_DirectReadBytes$05
    );

    $.Method({Static:true , Public:true }, "DirectReadBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.IO.Stream"), $.Int32]), 
      ProtoReader_DirectReadBytes$06
    );

    $.Method({Static:true , Public:true }, "DirectReadLittleEndianInt32", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.Stream")]), 
      ProtoReader_DirectReadLittleEndianInt32
    );

    $.Method({Static:true , Public:true }, "DirectReadString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.IO.Stream"), $.Int32]), 
      ProtoReader_DirectReadString
    );

    $.Method({Static:true , Public:true }, "DirectReadVarintInt32", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.Stream")]), 
      ProtoReader_DirectReadVarintInt32
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      ProtoReader_Dispose
    );

    $.Method({Static:true , Public:true }, "EndSubItem", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.SubItemToken"), $.Type]), 
      ProtoReader_EndSubItem
    );

    $.Method({Static:false, Public:false}, "Ensure", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean]), 
      ProtoReader_Ensure
    );

    $.Method({Static:true , Public:false}, "EoF", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Type]), 
      ProtoReader_EoF
    );

    $.Method({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.SerializationContext")), 
      ProtoReader_get_Context
    );

    $.Method({Static:false, Public:true }, "get_FieldNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoReader_get_FieldNumber
    );

    $.Method({Static:false, Public:true }, "get_InternStrings", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoReader_get_InternStrings
    );

    $.Method({Static:false, Public:true }, "get_LongPosition", 
      JSIL.MethodSignature.Return($.Int64), 
      ProtoReader_get_LongPosition
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      ProtoReader_get_Model
    );

    $.Method({Static:false, Public:false}, "get_NetCache", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.NetObjectCache")), 
      ProtoReader_get_NetCache
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoReader_get_Position
    );

    $.Method({Static:false, Public:true }, "get_WireType", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.WireType")), 
      ProtoReader_get_WireType
    );

    $.Method({Static:true , Public:false}, "GetRecycled", 
      JSIL.MethodSignature.Return($.Type), 
      ProtoReader_GetRecycled
    );

    $.Method({Static:false, Public:false}, "GetTypeKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])]), 
      ProtoReader_GetTypeKey
    );

    $.Method({Static:true , Public:true }, "HasSubValue", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.WireType"), $.Type]), 
      ProtoReader_HasSubValue
    );

    $.Method({Static:false, Public:true }, "Hint", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.WireType")), 
      ProtoReader_Hint
    );

    $.Method({Static:true , Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm07.TypeRef("System.IO.Stream"), 
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm08.TypeRef("ProtoBuf.SerializationContext"), 
          $.Int64
        ]), 
      ProtoReader_Init
    );

    $.Method({Static:false, Public:false}, "Intern", 
      new JSIL.MethodSignature($.String, [$.String]), 
      ProtoReader_Intern
    );

    $.Method({Static:true , Public:true }, "Merge", 
      new JSIL.MethodSignature($.Object, [
          $.Type, $.Object, 
          $.Object
        ]), 
      ProtoReader_Merge
    );

    $.Method({Static:true , Public:true }, "NoteObject", 
      new JSIL.MethodSignature(null, [$.Object, $.Type]), 
      ProtoReader_NoteObject
    );

    $.Method({Static:false, Public:true }, "ReadBoolean", 
      JSIL.MethodSignature.Return($.Boolean), 
      ProtoReader_ReadBoolean
    );

    $.Method({Static:false, Public:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Byte), 
      ProtoReader_ReadByte
    );

    $.Method({Static:true , Public:false}, "ReadByteOrThrow", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.Stream")]), 
      ProtoReader_ReadByteOrThrow
    );

    $.Method({Static:false, Public:true }, "ReadDouble", 
      JSIL.MethodSignature.Return($.Double), 
      ProtoReader_ReadDouble
    );

    $.Method({Static:false, Public:true }, "ReadFieldHeader", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoReader_ReadFieldHeader
    );

    $.Method({Static:false, Public:true }, "ReadInt16", 
      JSIL.MethodSignature.Return($.Int16), 
      ProtoReader_ReadInt16
    );

    $.Method({Static:false, Public:true }, "ReadInt32", 
      JSIL.MethodSignature.Return($.Int32), 
      ProtoReader_ReadInt32
    );

    $.Method({Static:false, Public:true }, "ReadInt64", 
      JSIL.MethodSignature.Return($.Int64), 
      ProtoReader_ReadInt64
    );

    $.Method({Static:true , Public:true }, "ReadLengthPrefix", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.IO.Stream"), $.Boolean, 
          $asm08.TypeRef("ProtoBuf.PrefixStyle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      ProtoReader_ReadLengthPrefix$07
    );

    $.Method({Static:true , Public:true }, "ReadLengthPrefix", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.IO.Stream"), $.Boolean, 
          $asm08.TypeRef("ProtoBuf.PrefixStyle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      ProtoReader_ReadLengthPrefix$08
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["32-bit"]; });

    $.Method({Static:true , Public:true }, "ReadLongLengthPrefix", 
      new JSIL.MethodSignature($.Int64, [
          $asm07.TypeRef("System.IO.Stream"), $.Boolean, 
          $asm08.TypeRef("ProtoBuf.PrefixStyle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      ProtoReader_ReadLongLengthPrefix
    );

    $.Method({Static:true , Public:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Int32, 
          $.Type
        ]), 
      ProtoReader_ReadObject
    );

    $.Method({Static:false, Public:true }, "ReadSByte", 
      JSIL.MethodSignature.Return($.SByte), 
      ProtoReader_ReadSByte
    );

    $.Method({Static:false, Public:true }, "ReadSingle", 
      JSIL.MethodSignature.Return($.Single), 
      ProtoReader_ReadSingle
    );

    $.Method({Static:false, Public:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String), 
      ProtoReader_ReadString
    );

    $.Method({Static:false, Public:true }, "ReadType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      ProtoReader_ReadType
    );

    $.Method({Static:true , Public:false}, "ReadTypedObject", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Int32, 
          $.Type, $asm07.TypeRef("System.Type")
        ]), 
      ProtoReader_ReadTypedObject
    );

    $.Method({Static:false, Public:true }, "ReadUInt16", 
      JSIL.MethodSignature.Return($.UInt16), 
      ProtoReader_ReadUInt16
    );

    $.Method({Static:false, Public:true }, "ReadUInt32", 
      JSIL.MethodSignature.Return($.UInt32), 
      ProtoReader_ReadUInt32
    );

    $.Method({Static:false, Public:false}, "ReadUInt32Variant", 
      new JSIL.MethodSignature($.UInt32, [$.Boolean]), 
      ProtoReader_ReadUInt32Variant
    );

    $.Method({Static:false, Public:true }, "ReadUInt64", 
      JSIL.MethodSignature.Return($.UInt64), 
      ProtoReader_ReadUInt64
    );

    $.Method({Static:false, Public:false}, "ReadUInt64Variant", 
      JSIL.MethodSignature.Return($.UInt64), 
      ProtoReader_ReadUInt64Variant
    );

    $.Method({Static:true , Public:false}, "Recycle", 
      JSIL.MethodSignature.Action($.Type), 
      ProtoReader_Recycle
    );

    $.Method({Static:true , Public:false}, "Seek", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.Int64, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      ProtoReader_Seek
    );

    $.Method({Static:false, Public:true }, "set_InternStrings", 
      JSIL.MethodSignature.Action($.Boolean), 
      ProtoReader_set_InternStrings
    );

    $.Method({Static:false, Public:false}, "SetRootObject", 
      JSIL.MethodSignature.Action($.Object), 
      ProtoReader_SetRootObject
    );

    $.Method({Static:false, Public:true }, "SkipField", 
      JSIL.MethodSignature.Void, 
      ProtoReader_SkipField
    );

    $.Method({Static:true , Public:true }, "StartSubItem", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.SubItemToken"), [$.Type]), 
      ProtoReader_StartSubItem
    );

    $.Method({Static:false, Public:true }, "ThrowEnumException", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.Int32]), 
      ProtoReader_ThrowEnumException
    );

    $.Method({Static:false, Public:false}, "TrapNextObject", 
      JSIL.MethodSignature.Action($.Int32), 
      ProtoReader_TrapNextObject
    );

    $.Method({Static:false, Public:true }, "TryReadFieldHeader", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      ProtoReader_TryReadFieldHeader
    );

    $.Method({Static:false, Public:false}, "TryReadUInt32Variant", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      ProtoReader_TryReadUInt32Variant
    );

    $.Method({Static:false, Public:false}, "TryReadUInt32VariantWithoutMoving", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])]), 
      ProtoReader_TryReadUInt32VariantWithoutMoving
    );

    $.Method({Static:true , Public:false}, "TryReadUInt64Variant", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])]), 
      ProtoReader_TryReadUInt64Variant
    );

    $.Method({Static:false, Public:false}, "TryReadUInt64VariantWithoutMoving", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt64])]), 
      ProtoReader_TryReadUInt64VariantWithoutMoving
    );

    $.Method({Static:true , Public:false}, "Zag", 
      new JSIL.MethodSignature($.Int32, [$.UInt32]), 
      ProtoReader_Zag$09
    );

    $.Method({Static:true , Public:false}, "Zag", 
      new JSIL.MethodSignature($.Int64, [$.UInt64]), 
      ProtoReader_Zag$0A
    );

    $.Field({Static:false, Public:false}, "source", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "ioBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:false}, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "ioIndex", $.Int32);

    $.Field({Static:false, Public:false}, "available", $.Int32);

    $.Field({Static:false, Public:false}, "position64", $.Int64);

    $.Field({Static:false, Public:false}, "blockEnd64", $.Int64);

    $.Field({Static:false, Public:false}, "dataRemaining64", $.Int64);

    $.Field({Static:false, Public:false}, "wireType", $asm08.TypeRef("ProtoBuf.WireType"));

    $.Field({Static:false, Public:false}, "isFixedLength", $.Boolean);

    $.Field({Static:false, Public:false}, "internStrings", $.Boolean);

    $.Field({Static:false, Public:false}, "netCache", $asm08.TypeRef("ProtoBuf.NetObjectCache"));

    $.Field({Static:false, Public:false}, "trapCount", $.UInt32);

    $.Constant({Static:true , Public:false}, "TO_EOF", $.Int64, -1);

    $.Field({Static:false, Public:false}, "context", $asm08.TypeRef("ProtoBuf.SerializationContext"));

    $.Constant({Static:true , Public:false}, "Int64Msb", $.Int64, -9223372036854775808);

    $.Constant({Static:true , Public:false}, "Int32Msb", $.Int32, -2147483648);

    $.Field({Static:false, Public:false}, "stringInterner", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "encoding", $asm07.TypeRef("System.Text.UTF8Encoding"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyBlob", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm07.System.Byte, 0);
      });

    $.Field({Static:true , Public:false}, "lastReader", $.Type)
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));


    function ProtoReader__cctor () {
      $thisType.encoding = $S00().Construct();
      $thisType.EmptyBlob = JSIL.Array.New($T01(), 0);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ProtoReader__cctor
    );

    $.Property({Static:false, Public:true }, "FieldNumber", $.Int32);

    $.Property({Static:false, Public:true }, "WireType", $asm08.TypeRef("ProtoBuf.WireType"));

    $.Property({Static:false, Public:true }, "InternStrings", $.Boolean);

    $.Property({Static:false, Public:true }, "Context", $asm08.TypeRef("ProtoBuf.SerializationContext"));

    $.Property({Static:false, Public:true }, "Position", $.Int32);

    $.Property({Static:false, Public:true }, "LongPosition", $.Int64);

    $.Property({Static:false, Public:true }, "Model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Property({Static:false, Public:false}, "NetCache", $asm08.TypeRef("ProtoBuf.NetObjectCache"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoWriter */ 

(function ProtoWriter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Text.UTF8Encoding)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.NetObjectCache)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.BufferPool)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.IExtensible)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.IExtension)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.ProtoBuf.Meta.MutableList)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.SubItemToken)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.ProtoBuf.PrefixStyle)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm07.System.OverflowException)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize(System.Array.Of($asm07.System.String))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm07.System.SByte)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm07.System.Text.Encoding)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Text.UTF8Encoding, null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String, $asm07.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.ProtoException, [$asm07.System.String]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.SubItemToken, [$asm07.System.Int64]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Single]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Double]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.OverflowException, null))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.UInt32, [$asm07.System.Int32]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.UInt64, [$asm07.System.Int64]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.Int32, $asm07.System.Object, 
        $asm08.ProtoBuf.ProtoWriter
      ]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String, $asm07.System.String]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [$asm07.System.String]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [
        $asm07.System.String, $asm07.System.Int32, 
        $asm07.System.Int32, System.Array.Of($asm07.System.Byte), 
        $asm07.System.Int32
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.IExtensible.GetExtensionObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.IExtension.BeginQuery)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.IExtension.EndQuery)) ();
  };


  function ProtoWriter__ctor (dest, model, context) {
    this.netCache = new ($T04())();
    if (dest === null) {
      throw $S01().Construct("dest");
    }
    if (!dest.get_CanWrite()) {
      throw $S02().Construct("Cannot write to stream", "dest");
    }
    this.dest = dest;
    this.ioBuffer = $T07().GetBuffer();
    this.model = model;
    this.wireType = $T08().None;
    if (context === null) {
      context = $T03().get_Default();
    } else {
      context.Freeze();
    }
    this.context = context;
  }; 

  function ProtoWriter_AppendExtensionData (instance, writer) {
    if (instance === null) {
      throw $S01().Construct("instance");
    }
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    if (writer.wireType !== $T08().None) {
      throw $thisType.CreateException(writer);
    }
    var extensionObject = $IM00().Call(instance, null, false);
    if (extensionObject !== null) {
      var stream = $IM01().Call(extensionObject, null);
      try {
        $thisType.CopyRawFromStream(stream, writer);
      } finally {
        $IM02().Call(extensionObject, null, stream);
      }
    }
  }; 

  function ProtoWriter_CheckDepthFlushlock () {
    if (!(((this.depth | 0) === 0) && ((this.flushLock | 0) === 0))) {
      throw $S03().Construct("The writer is in an incomplete state");
    }
  }; 

  function ProtoWriter_CheckRecursionStackAndPush (instance) {
    var num = 0;
    if (this.recursionStack === null) {
      this.recursionStack = new ($T0E())();
    } else if (!((instance === null) || ((num = ((this.recursionStack).IndexOfReference(instance) | 0)) < 0))) {
      throw $S04().Construct(("Possible recursion detected (offset: " + (((((this.recursionStack).get_Count() | 0) - num) | 0)).toString() + " level(s)): " + instance.toString()));
    }
    (this.recursionStack).Add(instance);
  }; 

  function ProtoWriter_ClearPackedField (fieldNumber, writer) {
    if ((fieldNumber | 0) !== (writer.packedFieldNumber | 0)) {
      throw $S03().Construct(("Field mismatch during packed encoding; expected " + (writer.packedFieldNumber).toString() + " but received " + (fieldNumber).toString()));
    }
    writer.packedFieldNumber = 0;
  }; 

  function ProtoWriter_Close () {
    if (!(((this.depth | 0) === 0) && ((this.flushLock | 0) === 0))) {
      throw $S03().Construct("Unable to close stream in an incomplete state");
    }
    this.Dispose();
  }; 

  function ProtoWriter_CopyRawFromStream (source, writer) {
    var array = writer.ioBuffer;
    var num = (((array.length | 0) - (writer.ioIndex | 0)) | 0);

    for (var num2 = 1; (num > 0) && ((num2 = (source.Read(array, writer.ioIndex, num) | 0)) > 0); ) {
      writer.ioIndex = (((writer.ioIndex | 0) + num2) | 0);
      writer.position64 = $T13().op_Addition(writer.position64, $T13().FromNumber(num2));
      num = ((num - num2) | 0);
    }
    if (num2 <= 0) {
      return;
    }
    if ((writer.flushLock | 0) === 0) {
      $thisType.Flush(writer);

      while ((num2 = (source.Read(array, 0, array.length) | 0)) > 0) {
        (writer.dest).Write(array, 0, num2);
        writer.position64 = $T13().op_Addition(writer.position64, $T13().FromNumber(num2));
      }
      return;
    }

  $loop2: 
    while (true) {
      $thisType.DemandSpace(128, writer);
      if ((num2 = (source.Read(writer.ioBuffer, writer.ioIndex, (((writer.ioBuffer.length | 0) - (writer.ioIndex | 0)) | 0)) | 0)) <= 0) {
        break $loop2;
      }
      writer.position64 = $T13().op_Addition(writer.position64, $T13().FromNumber(num2));
      writer.ioIndex = (((writer.ioIndex | 0) + num2) | 0);
    }
  }; 

  function ProtoWriter_CreateException (writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    return $S04().Construct(("Invalid serialization operation with wire-type " + (writer.wireType).toString() + " at position " + (writer.position64).toString()));
  }; 

  function ProtoWriter_DemandSpace (required, writer) {
    if ((((writer.ioBuffer.length | 0) - (writer.ioIndex | 0)) | 0) < (required | 0)) {
      if ((writer.flushLock | 0) === 0) {
        $thisType.Flush(writer);
        if ((((writer.ioBuffer.length | 0) - (writer.ioIndex | 0)) | 0) >= (required | 0)) {
          return;
        }
      }
      $T07().ResizeAndFlushLeft(/* ref */ new JSIL.MemberReference(writer, "ioBuffer"), (((required | 0) + (writer.ioIndex | 0)) | 0), 0, writer.ioIndex);
    }
  }; 

  function ProtoWriter_Dispose () {
    if (this.dest !== null) {
      $thisType.Flush(this);
      this.dest = null;
    }
    this.model = null;
    $T07().ReleaseBufferToPool(/* ref */ new JSIL.MemberReference(this, "ioBuffer"));
  }; 

  function ProtoWriter_EndSubItem$00 (token, writer) {
    $thisType.EndSubItem(token, writer, $T15().Base128);
  }; 

  function ProtoWriter_EndSubItem$01 (token, writer, style) {
    var $temp00;
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    if (writer.wireType !== $T08().None) {
      throw $thisType.CreateException(writer);
    }
    var num = ((token.value64).ToNumber(4294967295, true) | 0);
    if ((writer.depth | 0) <= 0) {
      throw $thisType.CreateException(writer);
    }
    var num2 = (writer.depth | 0);
    writer.depth = ((num2 - 1) | 0);
    if (num2 > 25) {
      writer.PopRecursionStack();
    }
    writer.packedFieldNumber = 0;
    if (num < 0) {
      $thisType.WriteHeaderCore((-num | 0), $T08().EndGroup, writer);
      writer.wireType = $T08().None;
      return;
    }
    switch (style.valueOf()) {
      case 1: 
        var num3 = (((((writer.ioIndex | 0) - num) | 0) - 1) | 0);
        var num4 = 0;
        var num5 = (num3 >>> 0);

        while ((num5 = num5 >>> (7 >>> 0)) !== 0) {
          num4 = ((num4 + 1) | 0);
        }
        if (num4 === 0) {
          writer.ioBuffer[num] = (num3 & 127 & 0xFF);
        } else {
          $thisType.DemandSpace(num4, writer);
          var array = writer.ioBuffer;
          $T18().BlockCopy(
            array, 
            ((num + 1) | 0), 
            array, 
            ((((num + 1) | 0) + num4) | 0), 
            num3
          );
          num5 = (num3 >>> 0);

          do {
            array[($temp00 = num, 
              num = ((num + 1) | 0), 
              $temp00)] = ((num5 & 127) | 128 & 0xFF);
          } while ((num5 = num5 >>> (7 >>> 0)) !== 0);
          array[((num - 1) | 0)] = ((array[((num - 1) | 0)] | 0) & -129 & 0xFF);
          writer.position64 = $T13().op_Addition(writer.position64, $T13().FromNumber(num4));
          writer.ioIndex = (((writer.ioIndex | 0) + num4) | 0);
        }
        break;

      case 2: 
        num3 = (((((writer.ioIndex | 0) - num) | 0) - 4) | 0);
        $thisType.WriteInt32ToBuffer(num3, writer.ioBuffer, num);
        break;

      case 3: 
        num3 = (((((writer.ioIndex | 0) - num) | 0) - 4) | 0);
        var array2 = writer.ioBuffer;
        $thisType.WriteInt32ToBuffer(num3, array2, num);
        var b = (array2[num] | 0);
        array2[num] = (array2[((num + 3) | 0)] | 0);
        array2[((num + 3) | 0)] = b;
        b = (array2[((num + 1) | 0)] | 0);
        array2[((num + 1) | 0)] = (array2[((num + 2) | 0)] | 0);
        array2[((num + 2) | 0)] = b;
        break;

      default: 
        throw $S05().Construct("style");

    }
    num2 = (((writer.flushLock | 0) - 1) | 0);
    writer.flushLock = num2;
    if (!((num2 !== 0) || ((writer.ioIndex | 0) < 1024))) {
      $thisType.Flush(writer);
    }
  }; 

  function ProtoWriter_Flush (writer) {
    if (!(((writer.flushLock | 0) !== 0) || ((writer.ioIndex | 0) === 0))) {
      (writer.dest).Write(writer.ioBuffer, 0, writer.ioIndex);
      writer.ioIndex = 0;
    }
  }; 

  function ProtoWriter_get_Context () {
    return this.context;
  }; 

  function ProtoWriter_get_Model () {
    return this.model;
  }; 

  function ProtoWriter_get_NetCache () {
    return this.netCache;
  }; 

  function ProtoWriter_get_WireType () {
    return this.wireType;
  }; 

  function ProtoWriter_GetLongPosition (writer) {
    return writer.position64;
  }; 

  function ProtoWriter_GetPosition (writer) {
    return $T0B().$OverflowCheck((writer.position64).ToNumber(4294967295, true));
  }; 

  function ProtoWriter_GetTypeKey (/* ref */ type) {
    return (this.model).GetKey(/* ref */ type);
  }; 

  function ProtoWriter_IncrementedAndReset (length, writer) {
    writer.ioIndex = (((writer.ioIndex | 0) + (length | 0)) | 0);
    writer.position64 = $T13().op_Addition(writer.position64, $T13().FromNumber(length));
    writer.wireType = $T08().None;
  }; 

  function ProtoWriter_PopRecursionStack () {
    (this.recursionStack).RemoveLast();
  }; 

  function ProtoWriter_SerializeType (type) {
    return $T02().SerializeType(this.model, type);
  }; 

  function ProtoWriter_SetPackedField (fieldNumber, writer) {
    if ((fieldNumber | 0) <= 0) {
      throw $S05().Construct("fieldNumber");
    }
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    writer.packedFieldNumber = (fieldNumber | 0);
  }; 

  function ProtoWriter_SetRootObject (value) {
    (this.get_NetCache()).SetKeyedObject(0, value);
  }; 

  function ProtoWriter_StartSubItem$02 (instance, writer) {
    return $thisType.StartSubItem(instance, writer, false);
  }; 

  function ProtoWriter_StartSubItem$03 (instance, writer, allowFixed) {
    var result = new ($T14())();
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var num = (((writer.depth | 0) + 1) | 0);
    writer.depth = num;
    if (num > 25) {
      writer.CheckRecursionStackAndPush(instance);
    }
    if ((writer.packedFieldNumber | 0) !== 0) {
      throw $S03().Construct("Cannot begin a sub-item while performing packed encoding");
    }
    switch ((writer.wireType).valueOf()) {
      case 2: 
        writer.wireType = $T08().None;
        $thisType.DemandSpace(32, writer);
        writer.flushLock = (((writer.flushLock | 0) + 1) | 0);
        writer.position64 = $T13().op_Addition(writer.position64, $T13().Create(1, 0, 0));
        num = (writer.ioIndex | 0);
        writer.ioIndex = ((num + 1) | 0);
        return $S06().Construct($T13().FromNumber(num));

      case 3: 
        writer.wireType = $T08().None;
        return $S06().Construct($T13().FromNumber((-$T13().FromNumber(writer.fieldNumber) | 0)));

      case 5: 
        if (!allowFixed) {
          throw $thisType.CreateException(writer);
        }
        $thisType.DemandSpace(32, writer);
        writer.flushLock = (((writer.flushLock | 0) + 1) | 0);
        result = $S06().Construct($T13().FromNumber(writer.ioIndex));
        $thisType.IncrementedAndReset(4, writer);
        return result;

    }
    throw $thisType.CreateException(writer);
  }; 

  function ProtoWriter_System_IDisposable_Dispose () {
    this.Dispose();
  }; 

  function ProtoWriter_ThrowEnumException (writer, enumValue) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var str = (
      (enumValue === null)
         ? "<null>"
         : ((JSIL.GetType(enumValue)).get_FullName() + "." + enumValue.toString()))
    ;
    throw $S04().Construct(("No wire-value is mapped to the enum " + str + " at position " + (writer.position64).toString()));
  }; 

  function ProtoWriter_WriteBoolean (value, writer) {
    $thisType.WriteUInt32((
        value
           ? 1
           : 0)
      , writer);
  }; 

  function ProtoWriter_WriteByte (value, writer) {
    $thisType.WriteUInt32(value, writer);
  }; 

  function ProtoWriter_WriteBytes$04 (data, writer) {
    if (data === null) {
      throw $S01().Construct("data");
    }
    $thisType.WriteBytes(data, 0, data.length, writer);
  }; 

  function ProtoWriter_WriteBytes$05 (data, offset, length, writer) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          if (data === null) {
            throw $S01().Construct("data");
          }
          if (writer === null) {
            throw $S01().Construct("writer");
          }
          switch ((writer.wireType).valueOf()) {
            case 1: 
              if ((length | 0) !== 8) {
                throw $S07().Construct("length");
              }
              $label0 = 1 /* goto IL_AF */ ;
              continue $labelgroup0;

            case 2: 
              $thisType.WriteUInt32Variant((length >>> 0), writer);
              writer.wireType = $T08().None;
              if ((length | 0) === 0) {
                return;
              }
              if (!(((writer.flushLock | 0) !== 0) || ((length | 0) <= (writer.ioBuffer.length | 0)))) {
                $thisType.Flush(writer);
                (writer.dest).Write(data, offset, length);
                writer.position64 = $T13().op_Addition(writer.position64, $T13().FromNumber(length));
                return;
              }
              $label0 = 1 /* goto IL_AF */ ;
              continue $labelgroup0;

            case 5: 
              if ((length | 0) !== 4) {
                throw $S07().Construct("length");
              }
              $label0 = 1 /* goto IL_AF */ ;
              continue $labelgroup0;

          }
          throw $thisType.CreateException(writer);

          $label0 = 1 /* goto IL_AF */ ;
          continue $labelgroup0;
        case 1: /* IL_AF */ 
          $thisType.DemandSpace(length, writer);
          $T18().BlockCopy(
            data, 
            offset, 
            writer.ioBuffer, 
            writer.ioIndex, 
            length
          );
          $thisType.IncrementedAndReset(length, writer);

          break $labelgroup0;
      }
    }
  }; 

  function ProtoWriter_WriteDouble (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType === $T08().Fixed64) {
      $thisType.WriteInt64(
        /* WARNING: Mutating the result pointer will not mutate the input value. */ 
        JSIL.PinValueAndGetPointer(value, $asm07.System.Double, JSIL.Pointer.Of($asm07.System.Int64)).get(), writer);
      return;
    }
    if (wireType !== $T08().Fixed32) {
      throw $thisType.CreateException(writer);
    }
    var value2 = Math.fround(value);
    if (!(!$S08().CallStatic($T18(), "IsInfinity", null, value2) || $S09().CallStatic($T18(), "IsInfinity", null, value))) {
      throw $S0A().Construct();
    }
    $thisType.WriteSingle(value2, writer);
  }; 

  function ProtoWriter_WriteFieldHeader (fieldNumber, wireType, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    if (writer.wireType !== $T08().None) {
      throw $S03().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T11(), ["Cannot write a ", wireType.toString(), " header until the ", (writer.wireType).toString(), " data has been written"])));
    }
    if ((fieldNumber | 0) < 0) {
      throw $S05().Construct("fieldNumber");
    }
    if ((writer.packedFieldNumber | 0) === 0) {
      writer.fieldNumber = (fieldNumber | 0);
      writer.wireType = wireType;
      $thisType.WriteHeaderCore(fieldNumber, wireType, writer);
      return;
    }
    if ((writer.packedFieldNumber | 0) !== (fieldNumber | 0)) {
      throw $S03().Construct(("Field mismatch during packed encoding; expected " + (writer.packedFieldNumber).toString() + " but received " + (fieldNumber).toString()));
    }
    if (!((wireType <= $T08().Fixed64) || 
        (wireType === $T08().Fixed32) || (wireType === $T08().SignedVariant))) {
      throw $S03().Construct(JSIL.ConcatString("Wire-type cannot be encoded as packed: ", wireType.toString()));
    }
    writer.fieldNumber = (fieldNumber | 0);
    writer.wireType = wireType;
  }; 

  function ProtoWriter_WriteHeaderCore (fieldNumber, wireType, writer) {
    var value = (((fieldNumber | 0) << 3) | (($T08().$Cast(wireType & $T08().$Cast(7))).valueOf() | 0) >>> 0);
    $thisType.WriteUInt32Variant(value, writer);
  }; 

  function ProtoWriter_WriteInt16 (value, writer) {
    $thisType.WriteInt32(value, writer);
  }; 

  function ProtoWriter_WriteInt32 (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType <= $T08().Fixed64) {
      if ((wireType.valueOf() | 0) !== 0) {
        if (wireType === $T08().Fixed64) {
          $thisType.DemandSpace(8, writer);
          var array = writer.ioBuffer;
          var num = (writer.ioIndex | 0);
          array[num] = (value & 0xFF);
          array[((num + 1) | 0)] = ((value | 0) >> 8 & 0xFF);
          array[((num + 2) | 0)] = ((value | 0) >> 16 & 0xFF);
          array[((num + 3) | 0)] = ((value | 0) >> 24 & 0xFF);
          array[((num + 4) | 0)] = array[((num + 5) | 0)] = array[((num + 6) | 0)] = array[((num + 7) | 0)] = 0;
          $thisType.IncrementedAndReset(8, writer);
          return;
        }
      } else {
        if ((value | 0) >= 0) {
          $thisType.WriteUInt32Variant((value >>> 0), writer);
          writer.wireType = $T08().None;
          return;
        }
        $thisType.DemandSpace(10, writer);
        array = writer.ioBuffer;
        num = (writer.ioIndex | 0);
        array[num] = ((value | 0) | 128 & 0xFF);
        array[((num + 1) | 0)] = (((value | 0) >> 7) | 128 & 0xFF);
        array[((num + 2) | 0)] = (((value | 0) >> 14) | 128 & 0xFF);
        array[((num + 3) | 0)] = (((value | 0) >> 21) | 128 & 0xFF);
        array[((num + 4) | 0)] = (((value | 0) >> 28) | 128 & 0xFF);
        array[((num + 5) | 0)] = array[((num + 6) | 0)] = array[((num + 7) | 0)] = array[((num + 8) | 0)] = 255;
        array[((num + 9) | 0)] = 1;
        $thisType.IncrementedAndReset(10, writer);
        return;
      }
    } else {
      if (wireType === $T08().Fixed32) {
        $thisType.DemandSpace(4, writer);
        $thisType.WriteInt32ToBuffer(value, writer.ioBuffer, writer.ioIndex);
        $thisType.IncrementedAndReset(4, writer);
        return;
      }
      if (wireType === $T08().SignedVariant) {
        $thisType.WriteUInt32Variant($S0B().CallStatic($thisType, "Zig", null, value), writer);
        writer.wireType = $T08().None;
        return;
      }
    }
    throw $thisType.CreateException(writer);
  }; 

  function ProtoWriter_WriteInt32ToBuffer (value, buffer, index) {
    buffer[index] = (value & 0xFF);
    buffer[(((index | 0) + 1) | 0)] = ((value | 0) >> 8 & 0xFF);
    buffer[(((index | 0) + 2) | 0)] = ((value | 0) >> 16 & 0xFF);
    buffer[(((index | 0) + 3) | 0)] = ((value | 0) >> 24 & 0xFF);
  }; 

  function ProtoWriter_WriteInt64 (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType <= $T08().Fixed64) {
      if ((wireType.valueOf() | 0) !== 0) {
        if (wireType === $T08().Fixed64) {
          $thisType.DemandSpace(8, writer);
          var array = writer.ioBuffer;
          var num = (writer.ioIndex | 0);
          array[num] = (value.ToNumber(255, false) | 0);
          array[((num + 1) | 0)] = (($T13().op_RightShift(value, 8)).ToNumber(255, false) | 0);
          array[((num + 2) | 0)] = (($T13().op_RightShift(value, 16)).ToNumber(255, false) | 0);
          array[((num + 3) | 0)] = (($T13().op_RightShift(value, 24)).ToNumber(255, false) | 0);
          array[((num + 4) | 0)] = (($T13().op_RightShift(value, 32)).ToNumber(255, false) | 0);
          array[((num + 5) | 0)] = (($T13().op_RightShift(value, 40)).ToNumber(255, false) | 0);
          array[((num + 6) | 0)] = (($T13().op_RightShift(value, 48)).ToNumber(255, false) | 0);
          array[((num + 7) | 0)] = (($T13().op_RightShift(value, 56)).ToNumber(255, false) | 0);
          $thisType.IncrementedAndReset(8, writer);
          return;
        }
      } else {
        if (!$T13().op_LessThan(value, $T13().Create(0, 0, 0))) {
          $thisType.WriteUInt64Variant(value.ToUInt64(), writer);
          writer.wireType = $T08().None;
          return;
        }
        $thisType.DemandSpace(10, writer);
        array = writer.ioBuffer;
        num = (writer.ioIndex | 0);
        array[num] = (($T13().op_BitwiseOr(value, $T13().Create(128, 0, 0))).ToNumber(255, false) | 0);
        array[((num + 1) | 0)] = ((($T13().op_RightShift(value, 7)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
        array[((num + 2) | 0)] = ((($T13().op_RightShift(value, 14)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
        array[((num + 3) | 0)] = ((($T13().op_RightShift(value, 21)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
        array[((num + 4) | 0)] = ((($T13().op_RightShift(value, 28)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
        array[((num + 5) | 0)] = ((($T13().op_RightShift(value, 35)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
        array[((num + 6) | 0)] = ((($T13().op_RightShift(value, 42)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
        array[((num + 7) | 0)] = ((($T13().op_RightShift(value, 49)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
        array[((num + 8) | 0)] = ((($T13().op_RightShift(value, 56)).ToNumber(4294967295, true) | 0) | 128 & 0xFF);
        array[((num + 9) | 0)] = 1;
        $thisType.IncrementedAndReset(10, writer);
        return;
      }
    } else {
      if (wireType === $T08().Fixed32) {
        $thisType.WriteInt32($T0B().$OverflowCheck(value.ToNumber(4294967295, true)), writer);
        return;
      }
      if (wireType === $T08().SignedVariant) {
        $thisType.WriteUInt64Variant($S0C().CallStatic($thisType, "Zig", null, value), writer);
        writer.wireType = $T08().None;
        return;
      }
    }
    throw $thisType.CreateException(writer);
  }; 

  function ProtoWriter_WriteObject$06 (value, key, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    if (writer.model === null) {
      throw $S03().Construct("Cannot serialize sub-objects unless a model is provided");
    }
    var token = $thisType.StartSubItem(value, writer);
    if ((key | 0) >= 0) {
      $S0D().CallVirtual("Serialize", null, writer.model, key, value, writer);
    } else if (!((writer.model !== null) && (writer.model).TrySerializeAuxiliaryType(
          writer, 
          JSIL.GetType(value), 
          $T21().Default, 
          1, 
          value, 
          false
        ))) {
      $T02().ThrowUnexpectedType(JSIL.GetType(value));
    }
    $thisType.EndSubItem(token, writer);
  }; 

  function ProtoWriter_WriteObject$07 (value, key, writer, style, fieldNumber) {
    if (writer.model === null) {
      throw $S03().Construct("Cannot serialize sub-objects unless a model is provided");
    }
    if (writer.wireType !== $T08().None) {
      throw $thisType.CreateException(writer);
    }
    if (style !== $T15().Base128) {
      if ((((style - $T15().Fixed32) | 0) >>> 0) > (1 >>> 0)) {
        throw $S05().Construct("style");
      }
      writer.fieldNumber = 0;
      writer.wireType = $T08().Fixed32;
    } else {
      writer.wireType = $T08().String;
      writer.fieldNumber = (fieldNumber | 0);
      if ((fieldNumber | 0) > 0) {
        $thisType.WriteHeaderCore(fieldNumber, $T08().String, writer);
      }
    }
    var token = $thisType.StartSubItem(value, writer, true);
    if ((key | 0) < 0) {
      if (!(writer.model).TrySerializeAuxiliaryType(
          writer, 
          JSIL.GetType(value), 
          $T21().Default, 
          1, 
          value, 
          false
        )) {
        $T02().ThrowUnexpectedType(JSIL.GetType(value));
      }
    } else {
      $S0D().CallVirtual("Serialize", null, writer.model, key, value, writer);
    }
    $thisType.EndSubItem(token, writer, style);
  }; 

  function ProtoWriter_WritePackedPrefix (elementCount, wireType, writer) {
    if (writer.get_WireType() !== $T08().String) {
      throw $S03().Construct(JSIL.ConcatString("Invalid wire-type: ", writer.get_WireType()));
    }
    if ((elementCount | 0) < 0) {
      throw $S05().Construct("elementCount");
    }
    if (wireType !== $T08().Fixed64) {
      if (wireType !== $T08().Fixed32) {
        throw $S0E().Construct("wireType", JSIL.ConcatString("Invalid wire-type: ", wireType));
      }
      var value = $T22().op_LeftShift(($T13().FromNumber(elementCount)).ToUInt64(), 2);
    } else {
      value = $T22().op_LeftShift(($T13().FromNumber(elementCount)).ToUInt64(), 3);
    }
    $thisType.WriteUInt64Variant(value, writer);
    writer.wireType = $T08().None;
  }; 

  function ProtoWriter_WriteRecursionSafeObject (value, key, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    if (writer.model === null) {
      throw $S03().Construct("Cannot serialize sub-objects unless a model is provided");
    }
    var token = $thisType.StartSubItem(null, writer);
    $S0D().CallVirtual("Serialize", null, writer.model, key, value, writer);
    $thisType.EndSubItem(token, writer);
  }; 

  function ProtoWriter_WriteSByte (value, writer) {
    $thisType.WriteInt32(value, writer);
  }; 

  function ProtoWriter_WriteSingle (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType === $T08().Fixed64) {
      $thisType.WriteDouble(value, writer);
      return;
    }
    if (wireType === $T08().Fixed32) {
      $thisType.WriteInt32(
        /* WARNING: Mutating the result pointer will not mutate the input value. */ 
        JSIL.PinValueAndGetPointer(value, $asm07.System.Single, JSIL.Pointer.Of($asm07.System.Int32)).get(), writer);
      return;
    }
    throw $thisType.CreateException(writer);
  }; 

  function ProtoWriter_WriteString (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    if (writer.wireType !== $T08().String) {
      throw $thisType.CreateException(writer);
    }
    if (value === null) {
      throw $S01().Construct("value");
    }
    if ((value.length | 0) === 0) {
      $thisType.WriteUInt32Variant(0, writer);
      writer.wireType = $T08().None;
      return;
    }
    var byteCount = ($S0F().CallVirtual("GetByteCount", null, $thisType.encoding, value) | 0);
    $thisType.WriteUInt32Variant((byteCount >>> 0), writer);
    $thisType.DemandSpace(byteCount, writer);
    var bytes = ($S10().CallVirtual("GetBytes", null, $thisType.encoding, 
      value, 
      0, 
      value.length, 
      writer.ioBuffer, 
      writer.ioIndex
    ) | 0);
    $thisType.IncrementedAndReset(bytes, writer);
  }; 

  function ProtoWriter_WriteType (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    $thisType.WriteString(writer.SerializeType(value), writer);
  }; 

  function ProtoWriter_WriteUInt16 (value, writer) {
    $thisType.WriteUInt32(value, writer);
  }; 

  function ProtoWriter_WriteUInt32 (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if ((wireType.valueOf() | 0) === 0) {
      $thisType.WriteUInt32Variant(value, writer);
      writer.wireType = $T08().None;
      return;
    }
    if (wireType === $T08().Fixed64) {
      $thisType.WriteInt64($T13().FromNumber(value), writer);
      return;
    }
    if (wireType === $T08().Fixed32) {
      $thisType.WriteInt32((value | 0), writer);
      return;
    }
    throw $thisType.CreateException(writer);
  }; 

  function ProtoWriter_WriteUInt32Variant (value, writer) {
    $thisType.DemandSpace(5, writer);
    var num = 0;

    do {
      var arg_2B_0 = writer.ioBuffer;
      var num2 = (writer.ioIndex | 0);
      writer.ioIndex = ((num2 + 1) | 0);
      arg_2B_0[num2] = (((value >>> 0) & 127) | 128 & 0xFF);
      num = ((num + 1) | 0);
    } while ((value = (value >>> 0) >>> (7 >>> 0)) !== 0);
    var expr_4B_cp_0 = writer.ioBuffer;
    var expr_4B_cp_1 = (((writer.ioIndex | 0) - 1) | 0);
    expr_4B_cp_0[expr_4B_cp_1] = (expr_4B_cp_0[expr_4B_cp_1] | 0) & 127;
    writer.position64 = $T13().op_Addition(writer.position64, $T13().FromNumber(num));
  }; 

  function ProtoWriter_WriteUInt64 (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if ((wireType.valueOf() | 0) === 0) {
      $thisType.WriteUInt64Variant(value, writer);
      writer.wireType = $T08().None;
      return;
    }
    if (wireType === $T08().Fixed64) {
      $thisType.WriteInt64(value.ToInt64(), writer);
      return;
    }
    if (wireType !== $T08().Fixed32) {
      throw $thisType.CreateException(writer);
    }
    $thisType.WriteUInt32($T16().$OverflowCheck(value.ToNumber(4294967295, false)), writer);
  }; 

  function ProtoWriter_WriteUInt64Variant (value, writer) {
    $thisType.DemandSpace(10, writer);
    var num = 0;

    do {
      var arg_2E_0 = writer.ioBuffer;
      var num2 = (writer.ioIndex | 0);
      writer.ioIndex = ((num2 + 1) | 0);
      arg_2E_0[num2] = (($T22().op_BitwiseOr(
          $T22().op_BitwiseAnd(value, $T22().Create(127, 0, 0)), 
          $T22().Create(128, 0, 0)
        )).ToNumber(255, false) | 0);
      num = ((num + 1) | 0);
    } while ($T22().op_Inequality(
        value = $T22().op_RightShift(value, (7 >>> 0)), 
        $T22().Create(0, 0, 0)
      ));
    var expr_4E_cp_0 = writer.ioBuffer;
    var expr_4E_cp_1 = (((writer.ioIndex | 0) - 1) | 0);
    expr_4E_cp_0[expr_4E_cp_1] = (expr_4E_cp_0[expr_4E_cp_1] | 0) & 127;
    writer.position64 = $T13().op_Addition(writer.position64, $T13().FromNumber(num));
  }; 

  function ProtoWriter_Zig$08 (value) {
    return (((value | 0) << 1) ^ ((value | 0) >> 31) >>> 0);
  }; 

  function ProtoWriter_Zig$09 (value) {
    return ($T13().op_ExclusiveOr(
        $T13().op_LeftShift(value, 1), 
        $T13().op_RightShift(value, 63)
      )).ToUInt64();
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.ProtoWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      ProtoWriter__ctor
    );

    $.Method({Static:true , Public:true }, "AppendExtensionData", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.IExtensible"), $.Type]), 
      ProtoWriter_AppendExtensionData
    );

    $.Method({Static:false, Public:false}, "CheckDepthFlushlock", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_CheckDepthFlushlock
    );

    $.Method({Static:false, Public:false}, "CheckRecursionStackAndPush", 
      JSIL.MethodSignature.Action($.Object), 
      ProtoWriter_CheckRecursionStackAndPush
    );

    $.Method({Static:true , Public:true }, "ClearPackedField", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      ProtoWriter_ClearPackedField
    );

    $.Method({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_Close
    );

    $.Method({Static:true , Public:false}, "CopyRawFromStream", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Type]), 
      ProtoWriter_CopyRawFromStream
    );

    $.Method({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Type]), 
      ProtoWriter_CreateException
    );

    $.Method({Static:true , Public:false}, "DemandSpace", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      ProtoWriter_DemandSpace
    );

    $.Method({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_Dispose
    );

    $.Method({Static:true , Public:true }, "EndSubItem", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.SubItemToken"), $.Type]), 
      ProtoWriter_EndSubItem$00
    );

    $.Method({Static:true , Public:false}, "EndSubItem", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.SubItemToken"), $.Type, 
          $asm08.TypeRef("ProtoBuf.PrefixStyle")
        ]), 
      ProtoWriter_EndSubItem$01
    );

    $.Method({Static:true , Public:false}, "Flush", 
      JSIL.MethodSignature.Action($.Type), 
      ProtoWriter_Flush
    );

    $.Method({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.SerializationContext")), 
      ProtoWriter_get_Context
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      ProtoWriter_get_Model
    );

    $.Method({Static:false, Public:false}, "get_NetCache", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.NetObjectCache")), 
      ProtoWriter_get_NetCache
    );

    $.Method({Static:false, Public:false}, "get_WireType", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.WireType")), 
      ProtoWriter_get_WireType
    );

    $.Method({Static:true , Public:false}, "GetLongPosition", 
      new JSIL.MethodSignature($.Int64, [$.Type]), 
      ProtoWriter_GetLongPosition
    );

    $.Method({Static:true , Public:false}, "GetPosition", 
      new JSIL.MethodSignature($.Int32, [$.Type]), 
      ProtoWriter_GetPosition
    );

    $.Method({Static:false, Public:false}, "GetTypeKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])]), 
      ProtoWriter_GetTypeKey
    );

    $.Method({Static:true , Public:false}, "IncrementedAndReset", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      ProtoWriter_IncrementedAndReset
    );

    $.Method({Static:false, Public:false}, "PopRecursionStack", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_PopRecursionStack
    );

    $.Method({Static:false, Public:false}, "SerializeType", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")]), 
      ProtoWriter_SerializeType
    );

    $.Method({Static:true , Public:true }, "SetPackedField", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      ProtoWriter_SetPackedField
    );

    $.Method({Static:false, Public:true }, "SetRootObject", 
      JSIL.MethodSignature.Action($.Object), 
      ProtoWriter_SetRootObject
    );

    $.Method({Static:true , Public:true }, "StartSubItem", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.SubItemToken"), [$.Object, $.Type]), 
      ProtoWriter_StartSubItem$02
    );

    $.Method({Static:true , Public:false}, "StartSubItem", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.SubItemToken"), [
          $.Object, $.Type, 
          $.Boolean
        ]), 
      ProtoWriter_StartSubItem$03
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      ProtoWriter_System_IDisposable_Dispose
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose");

    $.Method({Static:true , Public:true }, "ThrowEnumException", 
      new JSIL.MethodSignature(null, [$.Type, $.Object]), 
      ProtoWriter_ThrowEnumException
    );

    $.Method({Static:true , Public:true }, "WriteBoolean", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Type]), 
      ProtoWriter_WriteBoolean
    );

    $.Method({Static:true , Public:true }, "WriteByte", 
      new JSIL.MethodSignature(null, [$.Byte, $.Type]), 
      ProtoWriter_WriteByte
    );

    $.Method({Static:true , Public:true }, "WriteBytes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Type]), 
      ProtoWriter_WriteBytes$04
    );

    $.Method({Static:true , Public:true }, "WriteBytes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Type
        ]), 
      ProtoWriter_WriteBytes$05
    );

    $.Method({Static:true , Public:true }, "WriteDouble", 
      new JSIL.MethodSignature(null, [$.Double, $.Type]), 
      ProtoWriter_WriteDouble
    );

    $.Method({Static:true , Public:true }, "WriteFieldHeader", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm08.TypeRef("ProtoBuf.WireType"), 
          $.Type
        ]), 
      ProtoWriter_WriteFieldHeader
    );

    $.Method({Static:true , Public:false}, "WriteHeaderCore", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm08.TypeRef("ProtoBuf.WireType"), 
          $.Type
        ]), 
      ProtoWriter_WriteHeaderCore
    );

    $.Method({Static:true , Public:true }, "WriteInt16", 
      new JSIL.MethodSignature(null, [$.Int16, $.Type]), 
      ProtoWriter_WriteInt16
    );

    $.Method({Static:true , Public:true }, "WriteInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type]), 
      ProtoWriter_WriteInt32
    );

    $.Method({Static:true , Public:false}, "WriteInt32ToBuffer", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ]), 
      ProtoWriter_WriteInt32ToBuffer
    );

    $.Method({Static:true , Public:true }, "WriteInt64", 
      new JSIL.MethodSignature(null, [$.Int64, $.Type]), 
      ProtoWriter_WriteInt64
    );

    $.Method({Static:true , Public:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Type
        ]), 
      ProtoWriter_WriteObject$06
    );

    $.Method({Static:true , Public:false}, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Type, $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ]), 
      ProtoWriter_WriteObject$07
    );

    $.Method({Static:true , Public:true }, "WritePackedPrefix", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm08.TypeRef("ProtoBuf.WireType"), 
          $.Type
        ]), 
      ProtoWriter_WritePackedPrefix
    );

    $.Method({Static:true , Public:true }, "WriteRecursionSafeObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Type
        ]), 
      ProtoWriter_WriteRecursionSafeObject
    );

    $.Method({Static:true , Public:true }, "WriteSByte", 
      new JSIL.MethodSignature(null, [$.SByte, $.Type]), 
      ProtoWriter_WriteSByte
    );

    $.Method({Static:true , Public:true }, "WriteSingle", 
      new JSIL.MethodSignature(null, [$.Single, $.Type]), 
      ProtoWriter_WriteSingle
    );

    $.Method({Static:true , Public:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String, $.Type]), 
      ProtoWriter_WriteString
    );

    $.Method({Static:true , Public:true }, "WriteType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.Type]), 
      ProtoWriter_WriteType
    );

    $.Method({Static:true , Public:true }, "WriteUInt16", 
      new JSIL.MethodSignature(null, [$.UInt16, $.Type]), 
      ProtoWriter_WriteUInt16
    );

    $.Method({Static:true , Public:true }, "WriteUInt32", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Type]), 
      ProtoWriter_WriteUInt32
    );

    $.Method({Static:true , Public:false}, "WriteUInt32Variant", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Type]), 
      ProtoWriter_WriteUInt32Variant
    );

    $.Method({Static:true , Public:true }, "WriteUInt64", 
      new JSIL.MethodSignature(null, [$.UInt64, $.Type]), 
      ProtoWriter_WriteUInt64
    );

    $.Method({Static:true , Public:false}, "WriteUInt64Variant", 
      new JSIL.MethodSignature(null, [$.UInt64, $.Type]), 
      ProtoWriter_WriteUInt64Variant
    );

    $.Method({Static:true , Public:false}, "Zig", 
      new JSIL.MethodSignature($.UInt32, [$.Int32]), 
      ProtoWriter_Zig$08
    );

    $.Method({Static:true , Public:false}, "Zig", 
      new JSIL.MethodSignature($.UInt64, [$.Int64]), 
      ProtoWriter_Zig$09
    );

    $.Field({Static:false, Public:false}, "dest", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "netCache", $asm08.TypeRef("ProtoBuf.NetObjectCache"));

    $.Field({Static:false, Public:false}, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false}, "flushLock", $.Int32);

    $.Field({Static:false, Public:false}, "wireType", $asm08.TypeRef("ProtoBuf.WireType"));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Constant({Static:true , Public:false}, "RecursionCheckDepth", $.Int32, 25);

    $.Field({Static:false, Public:false}, "recursionStack", $asm08.TypeRef("ProtoBuf.Meta.MutableList"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "context", $asm08.TypeRef("ProtoBuf.SerializationContext"));

    $.Field({Static:false, Public:false}, "ioBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "ioIndex", $.Int32);

    $.Field({Static:false, Public:false}, "position64", $.Int64);

    $.Field({Static:true , Public:false, ReadOnly:true }, "encoding", $asm07.TypeRef("System.Text.UTF8Encoding"));

    $.Field({Static:false, Public:false}, "packedFieldNumber", $.Int32);


    function ProtoWriter__cctor () {
      $thisType.encoding = $S00().Construct();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ProtoWriter__cctor
    );

    $.Property({Static:false, Public:false}, "NetCache", $asm08.TypeRef("ProtoBuf.NetObjectCache"));

    $.Property({Static:false, Public:false}, "WireType", $asm08.TypeRef("ProtoBuf.WireType"));

    $.Property({Static:false, Public:true }, "Context", $asm08.TypeRef("ProtoBuf.SerializationContext"));

    $.Property({Static:false, Public:true }, "Model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.SerializationContext */ 

(function SerializationContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Runtime.Serialization.StreamingContextStates)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Runtime.Serialization.StreamingContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Runtime.Serialization.StreamingContext, [$asm07.System.Runtime.Serialization.StreamingContextStates]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Runtime.Serialization.StreamingContext, [$asm07.System.Runtime.Serialization.StreamingContextStates, $asm07.System.Object]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };


  function SerializationContext__ctor () {
    this.state = $T00().Persistence;
  }; 

  function SerializationContext_Freeze () {
    this.frozen = true;
  }; 

  function SerializationContext_get_Context () {
    return this.context;
  }; 

  function SerializationContext_get_Default () {
    return $thisType.$default;
  }; 

  function SerializationContext_get_State () {
    return this.state;
  }; 

  function SerializationContext_op_Implicit$00 (ctx) {
    if (ctx === null) {
      return $S00().Construct($T00().Persistence);
    }
    return $S01().Construct(ctx.state, ctx.context);
  }; 

  function SerializationContext_op_Implicit$01 (ctx) {
    var serializationContext = new $thisType();
    serializationContext.set_Context(ctx.get_Context());
    serializationContext.set_State(ctx.get_State());
    return serializationContext;
  }; 

  function SerializationContext_set_Context (value) {
    if (this.context !== value) {
      this.ThrowIfFrozen();
      this.context = value;
    }
  }; 

  function SerializationContext_set_State (value) {
    if (this.state !== value) {
      this.ThrowIfFrozen();
      this.state = value;
    }
  }; 

  function SerializationContext_ThrowIfFrozen () {
    if (this.frozen) {
      throw $S02().Construct("The serialization-context cannot be changed once it is in use");
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.SerializationContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SerializationContext__ctor
    );

    $.Method({Static:false, Public:false}, "Freeze", 
      JSIL.MethodSignature.Void, 
      SerializationContext_Freeze
    );

    $.Method({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($.Object), 
      SerializationContext_get_Context
    );

    $.Method({Static:true , Public:false}, "get_Default", 
      JSIL.MethodSignature.Return($.Type), 
      SerializationContext_get_Default
    );

    $.Method({Static:false, Public:true }, "get_State", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Runtime.Serialization.StreamingContextStates")), 
      SerializationContext_get_State
    );

    $.Method({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), [$.Type]), 
      SerializationContext_op_Implicit$00
    );

    $.Method({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Runtime.Serialization.StreamingContext")]), 
      SerializationContext_op_Implicit$01
    );

    $.Method({Static:false, Public:true }, "set_Context", 
      JSIL.MethodSignature.Action($.Object), 
      SerializationContext_set_Context
    );

    $.Method({Static:false, Public:true }, "set_State", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.Serialization.StreamingContextStates")), 
      SerializationContext_set_State
    );

    $.Method({Static:false, Public:false}, "ThrowIfFrozen", 
      JSIL.MethodSignature.Void, 
      SerializationContext_ThrowIfFrozen
    );

    $.Field({Static:false, Public:false}, "frozen", $.Boolean);

    $.Field({Static:false, Public:false}, "context", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "$default", $.Type);

    $.Field({Static:false, Public:false}, "state", $asm07.TypeRef("System.Runtime.Serialization.StreamingContextStates"));


    function SerializationContext__cctor () {
      $thisType.$default = new $thisType();
      $thisType.$default.Freeze();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SerializationContext__cctor
    );

    $.Property({Static:false, Public:true }, "Context", $.Object);

    $.Property({Static:true , Public:false}, "Default", $.Type);

    $.Property({Static:false, Public:true }, "State", $asm07.TypeRef("System.Runtime.Serialization.StreamingContextStates"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializer */ 

(function Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.IO.MemoryStream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.PrefixStyle)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.BufferPool)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm2F.System.Xml.XmlReader)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm2F.System.Xml.XmlNodeType)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.Runtime.Serialization.SerializationInfo)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.Runtime.Serialization.StreamingContext)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Runtime.Serialization.StreamingContextStates)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.ProtoBuf.Meta.MetaType)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm2F.System.Xml.XmlWriter)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.IO.MemoryStream, null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.IO.Stream, "!!0"], ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm07.System.Type
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
        $asm07.System.IO.Stream, $asm08.ProtoBuf.PrefixStyle, 
        $asm07.System.Int32
      ], ["T"]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [
        $asm07.System.IO.Stream, $asm08.ProtoBuf.PrefixStyle, 
        $asm07.System.Int32
      ], ["T"]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm07.System.IO.Stream, "!!0"], ["T"]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.Runtime.Serialization.SerializationInfo, $asm07.System.Runtime.Serialization.StreamingContext, 
        "!!0"
      ], ["T"]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Runtime.Serialization.StreamingContext, [$asm07.System.Runtime.Serialization.StreamingContextStates]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String, $asm07.System.String]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.IO.MemoryStream, [System.Array.Of($asm07.System.Byte)]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm07.System.Type, $asm08.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm08.ProtoBuf.SerializationContext, [$asm07.System.Runtime.Serialization.StreamingContext]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.ProtoException, [$asm07.System.String]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.IO.Stream, $asm07.System.Object]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.Runtime.Serialization.SerializationInfo, $asm07.System.Runtime.Serialization.StreamingContext, 
        "!!0"
      ], ["T"]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm08.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.String, $asm07.System.Object]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.IO.Stream, "!!0"], ["T"]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.IO.Stream, "!!0", 
        $asm08.ProtoBuf.PrefixStyle, $asm07.System.Int32
      ], ["T"]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.IO.MemoryStream, [
        System.Array.Of($asm07.System.Byte), $asm07.System.Int32, 
        $asm07.System.Int32
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };


  function Serializer_ChangeType$b2 (TFrom, TTo, instance) {
    var memoryStream = $S00().Construct();
    try {
      $S01().CallStatic($thisType, "Serialize$b1", [TFrom], memoryStream, JSIL.CloneParameter(TFrom, instance));
      memoryStream.set_Position($T03().Create(0, 0, 0));
      var result = JSIL.CloneParameter(TTo, $thisType.Deserialize$b1(TTo)(memoryStream));
    } finally {
      if (memoryStream !== null) {
        $IM00().Call(memoryStream, null);
      }
    }
    return result;
  }; 

  function Serializer_CreateFormatter$b1 (T) {
    return $T06().get_Default().CreateFormatter(T);
  }; 

  function Serializer_DeepClone$b1 (T, instance) {
    if (instance !== null) {
      return T.$Cast($T06().get_Default().DeepClone(JSIL.CloneParameter(T, instance)));
    }
    return instance;
  }; 

  function Serializer_Deserialize$b1 (T, source) {
    return T.$Cast($S02().CallVirtual("Deserialize", null, $T06().get_Default(), source, null, T));
  }; 

  function Serializer_Deserialize (type, source) {
    return $S02().CallVirtual("Deserialize", null, $T06().get_Default(), source, null, type);
  }; 

  function Serializer_DeserializeItems$b1 (T, source, style, fieldNumber) {
    return $S03().CallVirtual("DeserializeItems$b1", [T], $T06().get_Default(), source, style, fieldNumber);
  }; 

  function Serializer_DeserializeWithLengthPrefix$b1$00 (T, source, style) {
    return $S04().CallStatic($thisType, "DeserializeWithLengthPrefix$b1", [T], source, style, 0);
  }; 

  function Serializer_DeserializeWithLengthPrefix$b1$01 (T, source, style, fieldNumber) {
    var $default = $T06().get_Default();
    return T.$Cast($default.DeserializeWithLengthPrefix(
        source, 
        null, 
        $default.MapType(T), 
        style, 
        fieldNumber
      ));
  }; 

  function Serializer_FlushPool () {
    $T09().Flush();
  }; 

  function Serializer_GetProto$b1 (T) {
    return $T06().get_Default().GetSchema($T06().get_Default().MapType(T));
  }; 

  function Serializer_Merge$b1$02 (T, source, instance) {
    return T.$Cast($S02().CallVirtual("Deserialize", null, $T06().get_Default(), source, JSIL.CloneParameter(T, instance), T));
  }; 

  function Serializer_Merge$b1$03 (T, reader, instance) {
    var count = 0;
    if (reader === null) {
      throw $S05().Construct("reader");
    }
    if (instance === null) {
      throw $S05().Construct("instance");
    }
    var buffer = JSIL.Array.New($T0D(), 4096);
    var memoryStream = $S00().Construct();
    try {

    $loop0: 
      for (var depth = (reader.get_Depth() | 0); reader.Read() && ((reader.get_Depth() | 0) > depth); ) {
        if (reader.get_NodeType() === $T0E().Text) {

          while ((count = (reader.ReadContentAsBase64(buffer, 0, 4096) | 0)) > 0) {
            memoryStream.Write(buffer, 0, count);
          }
          if ((reader.get_Depth() | 0) <= depth) {
            break $loop0;
          }
        }
      }
      memoryStream.set_Position($T03().Create(0, 0, 0));
      $S06().CallStatic($thisType, "Merge$b1", [T], memoryStream, JSIL.CloneParameter(T, instance));
    } finally {
      if (memoryStream !== null) {
        $IM00().Call(memoryStream, null);
      }
    }
  }; 

  function Serializer_Merge$b1$04 (T, info, instance) {
    $S07().CallStatic($thisType, "Merge$b1", [T], info, $S08().Construct($T11().Persistence), JSIL.CloneParameter(T, instance));
  }; 

  function Serializer_Merge$b1$05 (T, info, context, instance) {
    if (info === null) {
      throw $S05().Construct("info");
    }
    if (instance === null) {
      throw $S05().Construct("instance");
    }
    if ($T00().op_Inequality(JSIL.GetType(instance), T)) {
      throw $S09().Construct("Incorrect type", "instance");
    }
    var buffer = $T0C().$Cast(info.GetValue("proto", $T0C().__Type__));
    var memoryStream = $S0A().Construct(buffer);
    try {
      var t = T.$Cast($S0B().CallVirtual("Deserialize", null, $T06().get_Default(), memoryStream, JSIL.CloneParameter(T, instance), T, $S0C().CallStatic($T13(), "op_Implicit", null, context.MemberwiseClone())));
      if (t !== instance) {
        throw $S0D().Construct("Deserialization changed the instance; cannot succeed.");
      }
    } finally {
      if (memoryStream !== null) {
        $IM00().Call(memoryStream, null);
      }
    }
  }; 

  function Serializer_MergeWithLengthPrefix$b1 (T, source, instance, style) {
    var $default = $T06().get_Default();
    return T.$Cast($default.DeserializeWithLengthPrefix(
        source, 
        JSIL.CloneParameter(T, instance), 
        $default.MapType(T), 
        style, 
        0
      ));
  }; 

  function Serializer_PrepareSerializer$b1 (T) {
    var $default = $T06().get_Default();
    ($default.get_Item($default.MapType(T))).CompileInPlace();
  }; 

  function Serializer_Serialize$b1$06 (T, destination, instance) {
    if (instance !== null) {
      $S0E().CallVirtual("Serialize", null, $T06().get_Default(), destination, JSIL.CloneParameter(T, instance));
    }
  }; 

  function Serializer_Serialize$b1$07 (T, info, instance) {
    $S0F().CallStatic($thisType, "Serialize$b1", [T], info, $S08().Construct($T11().Persistence), JSIL.CloneParameter(T, instance));
  }; 

  function Serializer_Serialize$b1$08 (T, info, context, instance) {
    if (info === null) {
      throw $S05().Construct("info");
    }
    if (instance === null) {
      throw $S05().Construct("instance");
    }
    if ($T00().op_Inequality(JSIL.GetType(instance), T)) {
      throw $S09().Construct("Incorrect type", "instance");
    }
    var memoryStream = $S00().Construct();
    try {
      $S10().CallVirtual("Serialize", null, $T06().get_Default(), memoryStream, JSIL.CloneParameter(T, instance), $S0C().CallStatic($T13(), "op_Implicit", null, context.MemberwiseClone()));
      $S11().CallVirtual("AddValue", null, info, "proto", memoryStream.ToArray());
    } finally {
      if (memoryStream !== null) {
        $IM00().Call(memoryStream, null);
      }
    }
  }; 

  function Serializer_Serialize$b1$09 (T, writer, instance) {
    if (writer === null) {
      throw $S05().Construct("writer");
    }
    if (instance === null) {
      throw $S05().Construct("instance");
    }
    var memoryStream = $S00().Construct();
    try {
      $S12().CallStatic($thisType, "Serialize$b1", [T], memoryStream, JSIL.CloneParameter(T, instance));
      writer.WriteBase64(
        $T17().GetBuffer(memoryStream), 
        0, 
        (memoryStream.get_Length()).ToNumber(4294967295, true)
      );
    } finally {
      if (memoryStream !== null) {
        $IM00().Call(memoryStream, null);
      }
    }
  }; 

  function Serializer_SerializeWithLengthPrefix$b1$0A (T, destination, instance, style) {
    $S13().CallStatic($thisType, "SerializeWithLengthPrefix$b1", [T], destination, JSIL.CloneParameter(T, instance), style, 0);
  }; 

  function Serializer_SerializeWithLengthPrefix$b1$0B (T, destination, instance, style, fieldNumber) {
    var $default = $T06().get_Default();
    $default.SerializeWithLengthPrefix(
      destination, 
      JSIL.CloneParameter(T, instance), 
      $default.MapType(T), 
      style, 
      fieldNumber
    );
  }; 

  function Serializer_TryReadLengthPrefix$0C (source, style, /* ref */ length) {
    var num = new JSIL.BoxedVariable(0);
    var num2 = new JSIL.BoxedVariable(0);
    length.set($T18().ReadLengthPrefix(
        source, 
        false, 
        style, 
        /* ref */ num, 
        /* ref */ num2
      ));
    return ((num2.get() | 0) > 0);
  }; 

  function Serializer_TryReadLengthPrefix$0D (buffer, index, count, style, /* ref */ length) {
    var stream = $S14().Construct(buffer, index, count);
    try {
      var result = $thisType.TryReadLengthPrefix(stream, style, /* ref */ length);
    } finally {
      if (stream !== null) {
        $IM00().Call(stream, null);
      }
    }
    return result;
  }; 

  JSIL.MakeStaticClass("ProtoBuf.Serializer", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "ChangeType", 
      new JSIL.MethodSignature("!!1", ["!!0"], ["TFrom", "TTo"]), 
      Serializer_ChangeType$b2
    );

    $.Method({Static:true , Public:true }, "CreateFormatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Serialization.IFormatter"), null, ["T"]), 
      Serializer_CreateFormatter$b1
    );

    $.Method({Static:true , Public:true }, "DeepClone", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["T"]), 
      Serializer_DeepClone$b1
    );

    $.Method({Static:true , Public:true }, "Deserialize", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.IO.Stream")], ["T"]), 
      Serializer_Deserialize$b1
    );

    $.Method({Static:true , Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.IO.Stream")]), 
      Serializer_Deserialize
    );

    $.Method({Static:true , Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ], ["T"]), 
      Serializer_DeserializeItems$b1
    );

    $.Method({Static:true , Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.PrefixStyle")], ["T"]), 
      Serializer_DeserializeWithLengthPrefix$b1$00
    );

    $.Method({Static:true , Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature("!!0", [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ], ["T"]), 
      Serializer_DeserializeWithLengthPrefix$b1$01
    );

    $.Method({Static:true , Public:true }, "FlushPool", 
      JSIL.MethodSignature.Void, 
      Serializer_FlushPool
    );

    $.Method({Static:true , Public:true }, "GetProto", 
      new JSIL.MethodSignature($.String, null, ["T"]), 
      Serializer_GetProto$b1
    );

    $.Method({Static:true , Public:true }, "Merge", 
      new JSIL.MethodSignature("!!0", [$asm07.TypeRef("System.IO.Stream"), "!!0"], ["T"]), 
      Serializer_Merge$b1$02
    );

    $.Method({Static:true , Public:true }, "Merge", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), "!!0"], ["T"]), 
      Serializer_Merge$b1$03
    );

    $.Method({Static:true , Public:true }, "Merge", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), "!!0"], ["T"]), 
      Serializer_Merge$b1$04
    );

    $.Method({Static:true , Public:true }, "Merge", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          "!!0"
        ], ["T"]), 
      Serializer_Merge$b1$05
    );

    $.Method({Static:true , Public:true }, "MergeWithLengthPrefix", 
      new JSIL.MethodSignature("!!0", [
          $asm07.TypeRef("System.IO.Stream"), "!!0", 
          $asm08.TypeRef("ProtoBuf.PrefixStyle")
        ], ["T"]), 
      Serializer_MergeWithLengthPrefix$b1
    );

    $.Method({Static:true , Public:true }, "PrepareSerializer", 
      new JSIL.MethodSignature(null, null, ["T"]), 
      Serializer_PrepareSerializer$b1
    );

    $.Method({Static:true , Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), "!!0"], ["T"]), 
      Serializer_Serialize$b1$06
    );

    $.Method({Static:true , Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), "!!0"], ["T"]), 
      Serializer_Serialize$b1$07
    );

    $.Method({Static:true , Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          "!!0"
        ], ["T"]), 
      Serializer_Serialize$b1$08
    );

    $.Method({Static:true , Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), "!!0"], ["T"]), 
      Serializer_Serialize$b1$09
    );

    $.Method({Static:true , Public:true }, "SerializeWithLengthPrefix", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), "!!0", 
          $asm08.TypeRef("ProtoBuf.PrefixStyle")
        ], ["T"]), 
      Serializer_SerializeWithLengthPrefix$b1$0A
    );

    $.Method({Static:true , Public:true }, "SerializeWithLengthPrefix", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), "!!0", 
          $asm08.TypeRef("ProtoBuf.PrefixStyle"), $.Int32
        ], ["T"]), 
      Serializer_SerializeWithLengthPrefix$b1$0B
    );

    $.Method({Static:true , Public:true }, "TryReadLengthPrefix", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      Serializer_TryReadLengthPrefix$0C
    );

    $.Method({Static:true , Public:true }, "TryReadLengthPrefix", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      Serializer_TryReadLengthPrefix$0D
    );

    $.Constant({Static:true , Public:false}, "ProtoBinaryField", $.String, "proto");

    $.Constant({Static:true , Public:true }, "ListItemTag", $.Int32, 1);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializer+NonGeneric */ 

(function NonGeneric$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.PrefixStyle)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.Serializer_TypeResolver)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm07.System.Type
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm07.System.Type, $asm08.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.IO.Stream, $asm07.System.Object]))) ();
  };


  function NonGeneric_CanSerialize (type) {
    return $T02().get_Default().IsDefined(type);
  }; 

  function NonGeneric_DeepClone (instance) {
    if (instance !== null) {
      return $T02().get_Default().DeepClone(instance);
    }
    return null;
  }; 

  function NonGeneric_Deserialize (type, source) {
    return $S00().CallVirtual("Deserialize", null, $T02().get_Default(), source, null, type);
  }; 

  function NonGeneric_Merge (source, instance) {
    if (instance === null) {
      throw $S01().Construct("instance");
    }
    return $S02().CallVirtual("Deserialize", null, $T02().get_Default(), source, instance, JSIL.GetType(instance), null);
  }; 

  function NonGeneric_Serialize (dest, instance) {
    if (instance !== null) {
      $S03().CallVirtual("Serialize", null, $T02().get_Default(), dest, instance);
    }
  }; 

  function NonGeneric_SerializeWithLengthPrefix (destination, instance, style, fieldNumber) {
    if (instance === null) {
      throw $S01().Construct("instance");
    }
    var $default = $T02().get_Default();
    $default.SerializeWithLengthPrefix(
      destination, 
      instance, 
      $default.MapType(JSIL.GetType(instance)), 
      style, 
      fieldNumber
    );
  }; 

  function NonGeneric_TryDeserializeWithLengthPrefix (source, style, resolver, /* ref */ value) {
    value.set($T02().get_Default().DeserializeWithLengthPrefix(
        source, 
        null, 
        null, 
        style, 
        0, 
        resolver
      ));
    return (value.get() !== null);
  }; 

  JSIL.MakeStaticClass("ProtoBuf.Serializer+NonGeneric", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "CanSerialize", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")]), 
      NonGeneric_CanSerialize
    );

    $.Method({Static:true , Public:true }, "DeepClone", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      NonGeneric_DeepClone
    );

    $.Method({Static:true , Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.IO.Stream")]), 
      NonGeneric_Deserialize
    );

    $.Method({Static:true , Public:true }, "Merge", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.Stream"), $.Object]), 
      NonGeneric_Merge
    );

    $.Method({Static:true , Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Object]), 
      NonGeneric_Serialize
    );

    $.Method({Static:true , Public:true }, "SerializeWithLengthPrefix", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm08.TypeRef("ProtoBuf.PrefixStyle"), $.Int32
        ]), 
      NonGeneric_SerializeWithLengthPrefix
    );

    $.Method({Static:true , Public:true }, "TryDeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $asm08.TypeRef("ProtoBuf.Serializer+TypeResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      NonGeneric_TryDeserializeWithLengthPrefix
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializer+GlobalOptions */ 

(function GlobalOptions$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };


  function GlobalOptions_get_InferTagFromName () {
    return $T00().get_Default().get_InferTagFromNameDefault();
  }; 

  function GlobalOptions_set_InferTagFromName (value) {
    $T00().get_Default().set_InferTagFromNameDefault(value);
  }; 

  JSIL.MakeStaticClass("ProtoBuf.Serializer+GlobalOptions", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "get_InferTagFromName", 
      JSIL.MethodSignature.Return($.Boolean), 
      GlobalOptions_get_InferTagFromName
    );

    $.Method({Static:true , Public:true }, "set_InferTagFromName", 
      JSIL.MethodSignature.Action($.Boolean), 
      GlobalOptions_set_InferTagFromName
    );

    $.Property({Static:true , Public:true }, "InferTagFromName", $.Boolean)
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["Please use RuntimeTypeModel.Default.InferTagFromNameDefault instead (or on a per-model basis)", false]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate ProtoBuf.Serializer+TypeResolver */ 

JSIL.MakeDelegate("ProtoBuf.Serializer+TypeResolver", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Int32")]));

/* struct ProtoBuf.SubItemToken */ 

(function SubItemToken$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int64)) ();
  };


  function SubItemToken__ctor$00 (value) {
    this.value64 = $T01().FromNumber(value);
  }; 

  function SubItemToken__ctor$01 (value) {
    this.value64 = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.SubItemToken", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      SubItemToken__ctor$00
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["32-bit", true]; });

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int64), 
      SubItemToken__ctor$01
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "value64", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.WireType */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.WireType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: -1, 
    Variant: 0, 
    Fixed64: 1, 
    String: 2, 
    StartGroup: 3, 
    EndGroup: 4, 
    Fixed32: 5, 
    SignedVariant: 8, 
  }
);

JSIL.DeclareNamespace("ProtoBuf.ServiceModel");
/* class ProtoBuf.ServiceModel.ProtoBehaviorAttribute */ 

(function ProtoBehaviorAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm22.System.ServiceModel.Description.OperationDescription)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm22.System.ServiceModel.Channels.BindingParameterCollection)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm22.System.ServiceModel.Dispatcher.ClientOperation)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm22.System.ServiceModel.Description.IOperationBehavior)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ServiceModel.ProtoOperationBehavior)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm22.System.ServiceModel.Dispatcher.DispatchOperation)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm22.System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm22.System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior)) ();
  };


  function ProtoBehaviorAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_AddBindingParameters (operationDescription, bindingParameters) {
  }; 

  function ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_ApplyClientBehavior (operationDescription, clientOperation) {
    var operationBehavior = new ($T05())(operationDescription);
    $IM00().Call(operationBehavior, null, operationDescription, clientOperation);
  }; 

  function ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_ApplyDispatchBehavior (operationDescription, dispatchOperation) {
    var operationBehavior = new ($T05())(operationDescription);
    $IM01().Call(operationBehavior, null, operationDescription, dispatchOperation);
  }; 

  function ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_Validate (operationDescription) {
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ServiceModel.ProtoBehaviorAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoBehaviorAttribute__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IOperationBehavior.AddBindingParameters", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.OperationDescription"), $asm22.TypeRef("System.ServiceModel.Channels.BindingParameterCollection")]), 
      ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_AddBindingParameters
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IOperationBehavior"), "AddBindingParameters");

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.OperationDescription"), $asm22.TypeRef("System.ServiceModel.Dispatcher.ClientOperation")]), 
      ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_ApplyClientBehavior
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IOperationBehavior"), "ApplyClientBehavior");

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.OperationDescription"), $asm22.TypeRef("System.ServiceModel.Dispatcher.DispatchOperation")]), 
      ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_ApplyDispatchBehavior
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IOperationBehavior"), "ApplyDispatchBehavior");

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IOperationBehavior.Validate", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Description.OperationDescription")), 
      ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_Validate
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IOperationBehavior"), "Validate");

    $.ImplementInterfaces(
      /* 1 */ $asm22.TypeRef("System.ServiceModel.Description.IOperationBehavior")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* class ProtoBuf.ServiceModel.ProtoBehaviorExtension */ 

(function ProtoBehaviorExtension$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm22.System.ServiceModel.Configuration.BehaviorExtensionElement)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.ServiceModel.ProtoEndpointBehavior)) ();
  };


  function ProtoBehaviorExtension__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function ProtoBehaviorExtension_CreateBehavior () {
    return new ($T01())();
  }; 

  function ProtoBehaviorExtension_get_BehaviorType () {
    return $T01().__Type__;
  }; 

  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Configuration.BehaviorExtensionElement"), 
      Name: "ProtoBuf.ServiceModel.ProtoBehaviorExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoBehaviorExtension__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateBehavior", 
      JSIL.MethodSignature.Return($.Object), 
      ProtoBehaviorExtension_CreateBehavior
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_BehaviorType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      ProtoBehaviorExtension_get_BehaviorType
    );

    $.Property({Static:false, Public:true , Virtual:true }, "BehaviorType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ServiceModel.ProtoEndpointBehavior */ 

(function ProtoEndpointBehavior$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm22.System.ServiceModel.Description.ServiceEndpoint)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm22.System.ServiceModel.Description.OperationDescription))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Collections.ObjectModel.Collection$b1.Of($asm22.System.ServiceModel.Description.OperationDescription))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm22.System.ServiceModel.Description.ContractDescription)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm22.System.ServiceModel.Description.OperationDescription)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm22.System.ServiceModel.Description.DataContractSerializerOperationBehavior)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm22.System.Collections.Generic.KeyedByTypeCollection$b1.Of($asm22.System.ServiceModel.Description.IOperationBehavior))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Collections.ObjectModel.Collection$b1.Of($asm22.System.ServiceModel.Description.IOperationBehavior))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.ServiceModel.ProtoOperationBehavior)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm22.System.ServiceModel.Channels.BindingParameterCollection)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm22.System.ServiceModel.Dispatcher.ClientRuntime)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm22.System.ServiceModel.Dispatcher.EndpointDispatcher)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Description.OperationDescription")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature("!!0", null, ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm22.TypeRef("System.ServiceModel.Description.IOperationBehavior")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.IOperationBehavior")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm22.System.ServiceModel.Description.OperationDescription).get_Current)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };


  function ProtoEndpointBehavior__ctor () {
  }; 

  function ProtoEndpointBehavior_ReplaceDataContractSerializerOperationBehavior$00 (serviceEndpoint) {
    var enumerator = ((serviceEndpoint.get_Contract()).get_Operations()).GetEnumerator();
    try {

      while ($IM00().Call(enumerator, null)) {
        var current = $IM01().Call(enumerator, null);
        $S00().CallStatic($thisType, "ReplaceDataContractSerializerOperationBehavior", null, current);
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
  }; 

  function ProtoEndpointBehavior_ReplaceDataContractSerializerOperationBehavior$01 (description) {
    var dataContractSerializerOperationBehavior = $S01().Call($T08().prototype, "Find$b1", [$asm22.System.ServiceModel.Description.DataContractSerializerOperationBehavior], description.get_Behaviors());
    if (dataContractSerializerOperationBehavior !== null) {
      $S02().CallVirtual("Remove", null, description.get_Behaviors(), dataContractSerializerOperationBehavior);
      var protoOperationBehavior = new ($T0A())(description);
      protoOperationBehavior.set_MaxItemsInObjectGraph(dataContractSerializerOperationBehavior.get_MaxItemsInObjectGraph());
      $S03().CallVirtual("Add", null, description.get_Behaviors(), protoOperationBehavior);
    }
  }; 

  function ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_AddBindingParameters (endpoint, bindingParameters) {
  }; 

  function ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_ApplyClientBehavior (endpoint, clientRuntime) {
    $S04().CallStatic($thisType, "ReplaceDataContractSerializerOperationBehavior", null, endpoint);
  }; 

  function ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_ApplyDispatchBehavior (endpoint, endpointDispatcher) {
    $S04().CallStatic($thisType, "ReplaceDataContractSerializerOperationBehavior", null, endpoint);
  }; 

  function ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_Validate (endpoint) {
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.ServiceModel.ProtoEndpointBehavior", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      ProtoEndpointBehavior__ctor
    );

    $.Method({Static:true , Public:false}, "ReplaceDataContractSerializerOperationBehavior", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint")), 
      ProtoEndpointBehavior_ReplaceDataContractSerializerOperationBehavior$00
    );

    $.Method({Static:true , Public:false}, "ReplaceDataContractSerializerOperationBehavior", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Description.OperationDescription")), 
      ProtoEndpointBehavior_ReplaceDataContractSerializerOperationBehavior$01
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint"), $asm22.TypeRef("System.ServiceModel.Channels.BindingParameterCollection")]), 
      ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_AddBindingParameters
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior"), "AddBindingParameters");

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint"), $asm22.TypeRef("System.ServiceModel.Dispatcher.ClientRuntime")]), 
      ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_ApplyClientBehavior
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior"), "ApplyClientBehavior");

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior", 
      new JSIL.MethodSignature(null, [$asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint"), $asm22.TypeRef("System.ServiceModel.Dispatcher.EndpointDispatcher")]), 
      ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_ApplyDispatchBehavior
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior"), "ApplyDispatchBehavior");

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.Validate", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Description.ServiceEndpoint")), 
      ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_Validate
    )
      .Overrides($asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior"), "Validate");

    $.ImplementInterfaces(
      /* 0 */ $asm22.TypeRef("System.ServiceModel.Description.IEndpointBehavior")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ServiceModel.ProtoOperationBehavior */ 

(function ProtoOperationBehavior$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm22.System.ServiceModel.Description.OperationDescription)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm22.System.ServiceModel.Description.DataContractSerializerOperationBehavior)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm21.System.Xml.XmlDictionaryString)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Collections.Generic.IList$b1.Of($asm07.System.Type))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.ServiceModel.XmlProtoSerializer)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm21.System.Runtime.Serialization.XmlObjectSerializer, [
        $asm07.System.Type, $asm21.System.Xml.XmlDictionaryString, 
        $asm21.System.Xml.XmlDictionaryString, $asm07.System.Collections.Generic.IList$b1.Of($asm07.System.Type)
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };


  function ProtoOperationBehavior__ctor (operation) {
    $T01().prototype._ctor.call(this, operation);
    this.model = $T02().get_Default();
  }; 

  function ProtoOperationBehavior_CreateSerializer$00 (type, name, ns, knownTypes) {
    if (this.model === null) {
      throw $S00().Construct("No Model instance has been assigned to the ProtoOperationBehavior");
    }
    return JSIL.Coalesce($T08().TryCreate(this.model, type), $T08().$Cast($S01().Call($T01().prototype, "CreateSerializer", null, this, type, name, ns, knownTypes)));
  }; 

  function ProtoOperationBehavior_get_Model () {
    return this.model;
  }; 

  function ProtoOperationBehavior_set_Model (value) {
    if (value === null) {
      throw $S02().Construct("value");
    }
    this.model = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm22.TypeRef("System.ServiceModel.Description.DataContractSerializerOperationBehavior"), 
      Name: "ProtoBuf.ServiceModel.ProtoOperationBehavior", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm22.TypeRef("System.ServiceModel.Description.OperationDescription")), 
      ProtoOperationBehavior__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), [
          $asm07.TypeRef("System.Type"), $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Type")])
        ]), 
      ProtoOperationBehavior_CreateSerializer$00
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      ProtoOperationBehavior_get_Model
    );

    $.Method({Static:false, Public:true }, "set_Model", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      ProtoOperationBehavior_set_Model
    );

    $.Field({Static:false, Public:false}, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Property({Static:false, Public:true }, "Model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ServiceModel.XmlProtoSerializer */ 

(function XmlProtoSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm21.System.Runtime.Serialization.XmlObjectSerializer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm21.System.Xml.XmlDictionaryReader)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm2F.System.Xml.XmlReader)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm2F.System.Xml.XmlNodeType)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.IO.MemoryStream)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm21.System.Xml.XmlDictionaryWriter)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm2F.System.Xml.XmlWriter)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String, $asm07.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.String, [$asm07.System.String]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.String")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm07.System.Type, $asm08.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm08.ProtoBuf.ProtoReader, [
        $asm07.System.IO.Stream, $asm08.ProtoBuf.Meta.TypeModel, 
        $asm08.ProtoBuf.SerializationContext, $asm07.System.Int64
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.Int32, $asm07.System.Object, 
        $asm08.ProtoBuf.ProtoReader
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.IO.MemoryStream, [System.Array.Of($asm07.System.Byte)]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.ServiceModel.XmlProtoSerializer, [
        $asm08.ProtoBuf.Meta.TypeModel, $asm07.System.Int32, 
        $asm07.System.Type, $asm07.System.Boolean
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.IO.MemoryStream, null))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm08.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.Int32, $asm07.System.Object, 
        $asm08.ProtoBuf.ProtoWriter
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };


  function XmlProtoSerializer__ctor$00 (model, key, type, isList) {
    $T04().prototype._ctor.call(this);
    if (model === null) {
      throw $S00().Construct("model");
    }
    if ((key | 0) < 0) {
      throw $S01().Construct("key");
    }
    if ($T02().op_Equality(type, null)) {
      throw $S01().Construct("type");
    }
    this.model = model;
    this.key = (key | 0);
    this.isList = isList;
    this.type = type;
    this.isEnum = $T07().IsEnum(type);
  }; 

  function XmlProtoSerializer__ctor$01 (model, $type) {
    var type = new JSIL.BoxedVariable($type);
    $T04().prototype._ctor.call(this);
    if (model === null) {
      throw $S00().Construct("model");
    }
    if ($T02().op_Equality(type.get(), null)) {
      throw $S00().Construct("type");
    }
    this.key = ($thisType.GetKey(model, /* ref */ type, /* ref */ new JSIL.MemberReference(this, "isList")) | 0);
    this.model = model;
    this.type = type.get();
    this.isEnum = $T07().IsEnum(type.get());
    if ((this.key | 0) < 0) {
      throw $S02().Construct("type", JSIL.ConcatString("Type not recognised by the model: ", (type.get()).get_FullName()));
    }
  }; 

  function XmlProtoSerializer_GetKey (model, /* ref */ type, /* ref */ isList) {
    var listItemType = new JSIL.BoxedVariable(null);
    if (!((model === null) || !$T02().op_Inequality(type.get(), null))) {
      var num = (model.GetKey(/* ref */ type) | 0);
      if (num >= 0) {
        isList.set(false);
        return num;
      }
      listItemType.set($T00().GetListItemType(model, type.get()));
      if ($T02().op_Inequality(listItemType.get(), null)) {
        num = (model.GetKey(/* ref */ listItemType) | 0);
        if (num >= 0) {
          isList.set(true);
          return num;
        }
      }
    }
    isList.set(false);
    return -1;
  }; 

  function XmlProtoSerializer_IsStartObject$02 (reader) {
    if (reader === null) {
      throw $S00().Construct("reader");
    }
    reader.MoveToContent();
    return ((reader.get_NodeType() === $T0B().Element) && (reader.get_Name() == "proto"));
  }; 

  function XmlProtoSerializer_ReadObject$03 (reader, verifyObjectName) {
    if (reader === null) {
      throw $S00().Construct("reader");
    }
    reader.MoveToContent();
    var isEmptyElement = reader.get_IsEmptyElement();
    var flag = ($S03().CallVirtual("GetAttribute", null, reader, "nil") == "true");
    $S04().CallVirtual("ReadStartElement", null, reader, "proto");
    if (flag) {
      if (!isEmptyElement) {
        reader.ReadEndElement();
      }
      return null;
    }
    if (isEmptyElement) {
      if (!(!this.isList && !this.isEnum)) {
        return $S05().CallVirtual("Deserialize", null, this.model, $T0C().Null, null, this.type, null);
      }
      var protoReader = null;
      try {
        protoReader = $S06().CallStatic($T0D(), "Create", null, $T0C().Null, this.model, null, $T0E().Create(16777215, 16777215, 65535));
        return $S07().CallVirtual("Deserialize", null, this.model, this.key, null, protoReader);
      } finally {
        $T0D().Recycle(protoReader);
      }
    }
    var memoryStream = $S08().Construct(reader.ReadContentAsBase64());
    try {
      if (!(!this.isList && !this.isEnum)) {
        var result = $S05().CallVirtual("Deserialize", null, this.model, memoryStream, null, this.type, null);
      } else {
        var protoReader2 = null;
        try {
          protoReader2 = $S06().CallStatic($T0D(), "Create", null, memoryStream, this.model, null, $T0E().Create(16777215, 16777215, 65535));
          result = $S07().CallVirtual("Deserialize", null, this.model, this.key, null, protoReader2);
        } finally {
          $T0D().Recycle(protoReader2);
        }
      }
    } finally {
      if (memoryStream !== null) {
        $IM00().Call(memoryStream, null);
      }
    }
    reader.ReadEndElement();
    return result;
  }; 

  function XmlProtoSerializer_TryCreate (model, $type) {
    var type = new JSIL.BoxedVariable($type);
    var flag = new JSIL.BoxedVariable(false);
    if (model === null) {
      throw $S00().Construct("model");
    }
    if ($T02().op_Equality(type.get(), null)) {
      throw $S00().Construct("type");
    }
    var num = ($thisType.GetKey(model, /* ref */ type, /* ref */ flag) | 0);
    if (num >= 0) {
      return $S09().Construct(model, num, type.get(), flag.get());
    }
    return null;
  }; 

  function XmlProtoSerializer_WriteEndObject$04 (writer) {
    if (writer === null) {
      throw $S00().Construct("writer");
    }
    writer.WriteEndElement();
  }; 

  function XmlProtoSerializer_WriteObjectContent$05 (writer, graph) {
    if (writer === null) {
      throw $S00().Construct("writer");
    }
    if (graph === null) {
      writer.WriteAttributeString("nil", "true");
      return;
    }
    var memoryStream = $S0A().Construct();
    try {
      if (this.isList) {
        $S0B().CallVirtual("Serialize", null, this.model, memoryStream, graph, null);
      } else {
        var protoWriter = new ($T14())(memoryStream, this.model, null);
        try {
          $S0C().CallVirtual("Serialize", null, this.model, this.key, graph, protoWriter);
        } finally {
          if (protoWriter !== null) {
            $IM00().Call(protoWriter, null);
          }
        }
      }
      var buffer = memoryStream.GetBuffer();
      writer.WriteBase64(buffer, 0, (memoryStream.get_Length()).ToNumber(4294967295, true));
    } finally {
      if (memoryStream !== null) {
        $IM00().Call(memoryStream, null);
      }
    }
  }; 

  function XmlProtoSerializer_WriteStartObject$06 (writer, graph) {
    if (writer === null) {
      throw $S00().Construct("writer");
    }
    writer.WriteStartElement("proto");
  }; 

  JSIL.MakeType({
      BaseType: $asm21.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), 
      Name: "ProtoBuf.ServiceModel.XmlProtoSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $.Int32, 
          $asm07.TypeRef("System.Type"), $.Boolean
        ]), 
      XmlProtoSerializer__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type")]), 
      XmlProtoSerializer__ctor$01
    );

    $.Method({Static:true , Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]), 
      XmlProtoSerializer_GetKey
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryReader")]), 
      XmlProtoSerializer_IsStartObject$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean]), 
      XmlProtoSerializer_ReadObject$03
    );

    $.Method({Static:true , Public:true }, "TryCreate", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type")]), 
      XmlProtoSerializer_TryCreate
    );

    $.Method({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter")), 
      XmlProtoSerializer_WriteEndObject$04
    );

    $.Method({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object]), 
      XmlProtoSerializer_WriteObjectContent$05
    );

    $.Method({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object]), 
      XmlProtoSerializer_WriteStartObject$06
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "key", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "isList", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "isEnum", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm07.TypeRef("System.Type"));

    $.Constant({Static:true , Public:false}, "PROTO_ELEMENT", $.String, "proto");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("ProtoBuf.Serializers");
/* class ProtoBuf.Serializers.ProtoDecoratorBase */ 

(function ProtoDecoratorBase$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };


  function ProtoDecoratorBase__ctor (tail) {
    this.Tail = tail;
  }; 

  function ProtoDecoratorBase_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    this.EmitRead(ctx, valueFrom);
  }; 

  function ProtoDecoratorBase_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    this.EmitWrite(ctx, valueFrom);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.ProtoDecoratorBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      ProtoDecoratorBase__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      ProtoDecoratorBase_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      ProtoDecoratorBase_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Field({Static:false, Public:false, ReadOnly:true }, "Tail", $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.ArrayDecorator */ 

(function ArrayDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ListDecorator)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Collections.Generic.List$b1)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm07.System.Type))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.Array)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.SubItemToken)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Collections.IList)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.Collections.ICollection)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.NullReferenceException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.PropertyInfo")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Reflection.MethodInfo, [$asm07.System.String, System.Array.Of($asm07.System.Type)]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NullReferenceException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitWrite)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm07.System.Collections.ICollection.get_Count)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm07.System.Collections.IList.get_Item)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function ArrayDecorator__ctor (model, tail, fieldNumber, writePacked, packedWireType, arrayType, overwriteList, supportNull) {
    $T06().prototype._ctor.call(this, tail);
    this.itemType = arrayType.GetElementType();
    var arg_35_0 = (
      supportNull
         ? this.itemType
         : JSIL.Coalesce($T07().GetUnderlyingType(this.itemType), this.itemType))
    ;
    if (!((!writePacked && 
          (packedWireType === $T04().None)) || ((fieldNumber | 0) > 0))) {
      throw $S00().Construct("fieldNumber");
    }
    if (!$T09().CanPack(packedWireType)) {
      if (writePacked) {
        throw $S01().Construct("Only simple data-types can use packed encoding");
      }
      packedWireType = $T04().None;
    }
    this.fieldNumber = (fieldNumber | 0);
    this.packedWireType = packedWireType;
    if (writePacked) {
      this.options = (this.options | 0) | 1;
    }
    if (overwriteList) {
      this.options = (this.options | 0) | 2;
    }
    if (supportNull) {
      this.options = (this.options | 0) | 4;
    }
    this.arrayType = arrayType;
  }; 

  function ArrayDecorator_CanUsePackedPrefix$00 () {
    return $thisType.CanUsePackedPrefix(this.packedWireType, this.itemType);
  }; 

  function ArrayDecorator_CanUsePackedPrefix$01 (packedWireType, itemType) {
    return (((packedWireType === $T04().Fixed64) || 
        (packedWireType === $T04().Fixed32)) && 
      $T07().IsValueType(itemType) && $T05().op_Equality($T07().GetUnderlyingType(itemType), null));
  }; 

  function ArrayDecorator_EmitRead (ctx, valueFrom) {
    var type = (ctx.MapType($T0D().__Type__)).MakeGenericType(JSIL.Array.New($T05(), [this.itemType]));
    var expectedType = this.get_ExpectedType();
    var local = (
      this.get_AppendToCollection()
         ? ctx.GetLocalWithValue(expectedType, valueFrom)
         : null)
    ;
    try {
      var local2 = $S02().Construct(ctx, expectedType);
      try {
        var local3 = $S02().Construct(ctx, type);
        try {
          $S03().CallVirtual("EmitCtor", null, ctx, type);
          $S04().CallVirtual("StoreValue", null, ctx, local3);
          $T09().EmitReadList(
            ctx, 
            local3, 
            this.Tail, 
            type.GetMethod("Add"), 
            this.packedWireType, 
            false
          );
          var local4 = (
            this.get_AppendToCollection()
               ? $S02().Construct(ctx, ctx.MapType($T02().__Type__))
               : null)
          ;
          try {
            var array = JSIL.Array.New($T05(), [ctx.MapType($T0F().__Type__), ctx.MapType($T02().__Type__)]);
            if (this.get_AppendToCollection()) {
              ctx.LoadLength(local, true);
              ctx.CopyValue();
              $S04().CallVirtual("StoreValue", null, ctx, local4);
              ctx.LoadAddress(local3, type);
              $S05().CallVirtual("LoadValue", null, ctx, type.GetProperty("Count"));
              ctx.Add();
              ctx.CreateArray(this.itemType, null);
              $S04().CallVirtual("StoreValue", null, ctx, local2);
              $S06().CallVirtual("LoadValue", null, ctx, local4);
              var label = ctx.DefineLabel();
              ctx.BranchIfFalse(label, true);
              $S06().CallVirtual("LoadValue", null, ctx, local);
              $S06().CallVirtual("LoadValue", null, ctx, local2);
              $S07().CallVirtual("LoadValue", null, ctx, 0);
              ctx.EmitCall($S08().CallVirtual("GetMethod", null, expectedType, "CopyTo", array));
              ctx.MarkLabel(label);
              $S06().CallVirtual("LoadValue", null, ctx, local3);
              $S06().CallVirtual("LoadValue", null, ctx, local2);
              $S06().CallVirtual("LoadValue", null, ctx, local4);
            } else {
              ctx.LoadAddress(local3, type);
              $S05().CallVirtual("LoadValue", null, ctx, type.GetProperty("Count"));
              ctx.CreateArray(this.itemType, null);
              $S04().CallVirtual("StoreValue", null, ctx, local2);
              ctx.LoadAddress(local3, type);
              $S06().CallVirtual("LoadValue", null, ctx, local2);
              $S07().CallVirtual("LoadValue", null, ctx, 0);
            }
            array[0] = expectedType;
            var method = $S08().CallVirtual("GetMethod", null, type, "CopyTo", array);
            if ($T11().op_Equality(method, null)) {
              array[1] = ctx.MapType($T0F().__Type__);
              method = $S08().CallVirtual("GetMethod", null, type, "CopyTo", array);
            }
            ctx.EmitCall(method);
          } finally {
            if (local4 !== null) {
              $IM00().Call(local4, null);
            }
          }
          $S06().CallVirtual("LoadValue", null, ctx, local2);
        } finally {
          if (local3 !== null) {
            $IM00().Call(local3, null);
          }
        }
      } finally {
        if (local2 !== null) {
          $IM00().Call(local2, null);
        }
      }
    } finally {
      if (local !== null) {
        $IM00().Call(local, null);
      }
    }
  }; 

  function ArrayDecorator_EmitWrite (ctx, valueFrom) {
    var localWithValue = ctx.GetLocalWithValue(this.arrayType, valueFrom);
    try {
      var local = $S02().Construct(ctx, ctx.MapType($T02().__Type__));
      try {
        var flag = ((this.options | 0) & 1) > (0 >>> 0);
        var flag2 = flag && 
        this.CanUsePackedPrefix();
        var local2 = (
          (flag && 
            !flag2)
             ? $S02().Construct(ctx, ctx.MapType($T14().__Type__))
             : null)
        ;
        try {
          var type = ctx.MapType($T15().__Type__);
          if (flag) {
            $S07().CallVirtual("LoadValue", null, ctx, this.fieldNumber);
            $S07().CallVirtual("LoadValue", null, ctx, 2);
            ctx.LoadReaderWriter();
            ctx.EmitCall(type.GetMethod("WriteFieldHeader"));
            if (flag2) {
              ctx.LoadLength(localWithValue, false);
              $S07().CallVirtual("LoadValue", null, ctx, (this.packedWireType).valueOf());
              ctx.LoadReaderWriter();
              ctx.EmitCall(type.GetMethod("WritePackedPrefix"));
            } else {
              $S06().CallVirtual("LoadValue", null, ctx, localWithValue);
              ctx.LoadReaderWriter();
              ctx.EmitCall(type.GetMethod("StartSubItem"));
              $S04().CallVirtual("StoreValue", null, ctx, local2);
            }
            $S07().CallVirtual("LoadValue", null, ctx, this.fieldNumber);
            ctx.LoadReaderWriter();
            ctx.EmitCall(type.GetMethod("SetPackedField"));
          }
          this.EmitWriteArrayLoop(ctx, local, localWithValue);
          if (flag) {
            if (flag2) {
              $S07().CallVirtual("LoadValue", null, ctx, this.fieldNumber);
              ctx.LoadReaderWriter();
              ctx.EmitCall(type.GetMethod("ClearPackedField"));
            } else {
              $S06().CallVirtual("LoadValue", null, ctx, local2);
              ctx.LoadReaderWriter();
              ctx.EmitCall(type.GetMethod("EndSubItem"));
            }
          }
        } finally {
          if (local2 !== null) {
            $IM00().Call(local2, null);
          }
        }
      } finally {
        if (local !== null) {
          $IM00().Call(local, null);
        }
      }
    } finally {
      if (localWithValue !== null) {
        $IM00().Call(localWithValue, null);
      }
    }
  }; 

  function ArrayDecorator_EmitWriteArrayLoop (ctx, i, arr) {
    $S07().CallVirtual("LoadValue", null, ctx, 0);
    $S04().CallVirtual("StoreValue", null, ctx, i);
    var label = ctx.DefineLabel();
    var label2 = ctx.DefineLabel();
    ctx.Branch(label, false);
    ctx.MarkLabel(label2);
    ctx.LoadArrayValue(arr, i);
    if (this.get_SupportNull()) {
      $IM01().Call(this.Tail, null, ctx, null);
    } else {
      ctx.WriteNullCheckedTail(this.itemType, this.Tail, null);
    }
    $S06().CallVirtual("LoadValue", null, ctx, i);
    $S07().CallVirtual("LoadValue", null, ctx, 1);
    ctx.Add();
    $S04().CallVirtual("StoreValue", null, ctx, i);
    ctx.MarkLabel(label);
    $S06().CallVirtual("LoadValue", null, ctx, i);
    ctx.LoadLength(arr, false);
    ctx.BranchIfLess(label2, false);
  }; 

  function ArrayDecorator_get_AppendToCollection () {
    return (((this.options | 0) & 2) === 0);
  }; 

  function ArrayDecorator_get_ExpectedType () {
    return this.arrayType;
  }; 

  function ArrayDecorator_get_RequiresOldValue () {
    return this.get_AppendToCollection();
  }; 

  function ArrayDecorator_get_ReturnsValue () {
    return true;
  }; 

  function ArrayDecorator_get_SupportNull () {
    return (((this.options | 0) & 4) > (0 >>> 0));
  }; 

  function ArrayDecorator_Read (value, source) {
    var field = (source.get_FieldNumber() | 0);
    var basicList = new ($T18())();
    if (!((this.packedWireType === $T04().None) || (source.get_WireType() !== $T04().String))) {
      var token = $T17().StartSubItem(source);

      while ($T17().HasSubValue(this.packedWireType, source)) {
        basicList.Add($IM02().Call(this.Tail, null, null, source));
      }
      $T17().EndSubItem(token, source);
    } else {

      do {
        basicList.Add($IM02().Call(this.Tail, null, null, source));
      } while (source.TryReadFieldHeader(field));
    }
    var num = ((
      this.get_AppendToCollection()
         ? (
          (value === null)
             ? 0
             : $T0F().$Cast(value).length)

         : 0)
     | 0);
    var array = (JSIL.Array.New(this.itemType, ((num + (basicList.get_Count() | 0)) | 0)));
    if (num !== 0) {
      JSIL.Array.CopyTo($T0F().$Cast(value), array, 0);
    }
    basicList.CopyTo(array, num);
    return array;
  }; 

  function ArrayDecorator_Write (value, dest) {
    var list = $T19().$Cast(value);
    var count = ($IM03().Call(list, null) | 0);
    var flag = ((this.options | 0) & 1) > (0 >>> 0);
    var flag2 = flag && 
    this.CanUsePackedPrefix();
    if (flag) {
      $T15().WriteFieldHeader(this.fieldNumber, $T04().String, dest);
      if (flag2) {
        $T15().WritePackedPrefix($IM03().Call(list, null), this.packedWireType, dest);
        var token = new ($T14())();
      } else {
        token = $T15().StartSubItem(value, dest);
      }
      $T15().SetPackedField(this.fieldNumber, dest);
    } else {
      token = new ($T14())();
    }
    var flag3 = !this.get_SupportNull();

    for (var i = 0; i < count; i = ((i + 1) | 0)) {
      var obj = $IM04().Call(list, null, i);
      if (!(!flag3 || (obj !== null))) {
        throw $S09().Construct();
      }
      $IM05().Call(this.Tail, null, obj, dest);
    }
    if (flag) {
      if (flag2) {
        $T15().ClearPackedField(this.fieldNumber, dest);
        return;
      }
      $T15().EndSubItem(token, dest);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.ArrayDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), 
          $.Int32, $.Boolean, 
          $asm08.TypeRef("ProtoBuf.WireType"), $asm07.TypeRef("System.Type"), 
          $.Boolean, $.Boolean
        ]), 
      ArrayDecorator__ctor
    );

    $.Method({Static:false, Public:false}, "CanUsePackedPrefix", 
      JSIL.MethodSignature.Return($.Boolean), 
      ArrayDecorator_CanUsePackedPrefix$00
    );

    $.Method({Static:true , Public:false}, "CanUsePackedPrefix", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.WireType"), $asm07.TypeRef("System.Type")]), 
      ArrayDecorator_CanUsePackedPrefix$01
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      ArrayDecorator_EmitRead
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      ArrayDecorator_EmitWrite
    );

    $.Method({Static:false, Public:false}, "EmitWriteArrayLoop", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local"), 
          $asm08.TypeRef("ProtoBuf.Compiler.Local")
        ]), 
      ArrayDecorator_EmitWriteArrayLoop
    );

    $.Method({Static:false, Public:false}, "get_AppendToCollection", 
      JSIL.MethodSignature.Return($.Boolean), 
      ArrayDecorator_get_AppendToCollection
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      ArrayDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ArrayDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ArrayDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:false}, "get_SupportNull", 
      JSIL.MethodSignature.Return($.Boolean), 
      ArrayDecorator_get_SupportNull
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      ArrayDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      ArrayDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "fieldNumber", $.Int32);

    $.Constant({Static:true , Public:false}, "OPTIONS_WritePacked", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "OPTIONS_OverwriteList", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "OPTIONS_SupportNull", $.Byte, 4);

    $.Field({Static:false, Public:false, ReadOnly:true }, "options", $.Byte);

    $.Field({Static:false, Public:false, ReadOnly:true }, "packedWireType", $asm08.TypeRef("ProtoBuf.WireType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "arrayType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "itemType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:false}, "AppendToCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportNull", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.BlobSerializer */ 

(function BlobSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };


  function BlobSerializer__ctor (model, overwriteList) {
    this.overwriteList = overwriteList;
  }; 

  function BlobSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function BlobSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    if (this.overwriteList) {
      ctx.LoadNullRef();
    } else {
      $S00().CallVirtual("LoadValue", null, ctx, valueFrom);
    }
    ctx.LoadReaderWriter();
    ctx.EmitCall((ctx.MapType($T06().__Type__)).GetMethod("AppendBytes"));
  }; 

  function BlobSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteBytes", valueFrom);
  }; 

  function BlobSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return !this.overwriteList;
  }; 

  function BlobSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function BlobSerializer_Read (value, source) {
    return $T06().AppendBytes((
        this.overwriteList
           ? null
           : $T00().$Cast(value))
      , source);
  }; 

  function BlobSerializer_Write (value, dest) {
    $T08().WriteBytes($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.BlobSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $.Boolean]), 
      BlobSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      BlobSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      BlobSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      BlobSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      BlobSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      BlobSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      BlobSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      BlobSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm07.System.Byte).__Type__;
      });

    $.Field({Static:false, Public:false, ReadOnly:true }, "overwriteList", $.Boolean);


    function BlobSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BlobSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.BooleanSerializer */ 

(function BooleanSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function BooleanSerializer__ctor (model) {
  }; 

  function BooleanSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function BooleanSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadBoolean", this.get_ExpectedType());
  }; 

  function BooleanSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteBoolean", valueFrom);
  }; 

  function BooleanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function BooleanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function BooleanSerializer_Read (value, source) {
    return $T00().$Box(source.ReadBoolean());
  }; 

  function BooleanSerializer_Write (value, dest) {
    $T06().WriteBoolean($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.BooleanSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      BooleanSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      BooleanSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      BooleanSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      BooleanSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      BooleanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      BooleanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      BooleanSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      BooleanSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Boolean.__Type__;
      });


    function BooleanSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BooleanSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.ByteSerializer */ 

(function ByteSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function ByteSerializer__ctor (model) {
  }; 

  function ByteSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function ByteSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadByte", this.get_ExpectedType());
  }; 

  function ByteSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteByte", valueFrom);
  }; 

  function ByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function ByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function ByteSerializer_Read (value, source) {
    return $T00().$Box(source.ReadByte());
  }; 

  function ByteSerializer_Write (value, dest) {
    $T06().WriteByte($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.ByteSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      ByteSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      ByteSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      ByteSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      ByteSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      ByteSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      ByteSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Byte.__Type__;
      });


    function ByteSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ByteSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.UInt16Serializer */ 

(function UInt16Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function UInt16Serializer__ctor (model) {
  }; 

  function UInt16Serializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function UInt16Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadUInt16", ctx.MapType($T00().__Type__));
  }; 

  function UInt16Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteUInt16", valueFrom);
  }; 

  function UInt16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function UInt16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function UInt16Serializer_Read (value, source) {
    return $T00().$Box(source.ReadUInt16());
  }; 

  function UInt16Serializer_Write (value, dest) {
    $T06().WriteUInt16($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.UInt16Serializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      UInt16Serializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      UInt16Serializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      UInt16Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      UInt16Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UInt16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UInt16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      UInt16Serializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      UInt16Serializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.UInt16.__Type__;
      });


    function UInt16Serializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      UInt16Serializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.CharSerializer */ 

(function CharSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Char)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.UInt16Serializer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function CharSerializer__ctor (model) {
    $T02().prototype._ctor.call(this, model);
  }; 

  function CharSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function CharSerializer_Read (value, source) {
    return $T00().$Box(String.fromCharCode(source.ReadUInt16()));
  }; 

  function CharSerializer_Write (value, dest) {
    $T05().WriteUInt16(($T00().$Cast(value)).charCodeAt(0), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Serializers.UInt16Serializer"), 
      Name: "ProtoBuf.Serializers.CharSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      CharSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      CharSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      CharSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      CharSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Char.__Type__;
      });


    function CharSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      CharSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.CompiledSerializer */ 

(function CompiledSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel_CallbackType)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.Callback)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitRead)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitWrite)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.EmitCallback)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks)) ();
  };


  function CompiledSerializer__ctor (head, model) {
    this.head = head;
    this.serializer = $T02().BuildSerializer(head, model);
    this.deserializer = $T02().BuildDeserializer(head, model);
  }; 

  function CompiledSerializer_Callback (value, callbackType, context) {
    $IM00().Call(this.head, null, value, callbackType, context);
  }; 

  function CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    $IM01().Call(this.head, null, ctx, valueFrom);
  }; 

  function CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    $IM02().Call(this.head, null, ctx, valueFrom);
  }; 

  function CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ExpectedType () {
    return $IM03().Call(this.head, null);
  }; 

  function CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return $IM04().Call(this.head, null);
  }; 

  function CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return $IM05().Call(this.head, null);
  }; 

  function CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_Read (value, source) {
    return this.deserializer(value, source);
  }; 

  function CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_Write (value, dest) {
    this.serializer(value, dest);
  }; 

  function CompiledSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance () {
    return $IM06().Call(this.head, null);
  }; 

  function CompiledSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance (source) {
    return $IM07().Call(this.head, null, source);
  }; 

  function CompiledSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCallback (ctx, valueFrom, callbackType) {
    $IM08().Call(this.head, null, ctx, valueFrom, callbackType);
  }; 

  function CompiledSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCreateInstance (ctx) {
    $IM09().Call(this.head, null, ctx);
  }; 

  function CompiledSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_HasCallbacks (callbackType) {
    return $IM0A().Call(this.head, null, callbackType);
  }; 

  function CompiledSerializer_Wrap (head, model) {
    var compiledSerializer = $thisType.$As(head);
    if (compiledSerializer === null) {
      compiledSerializer = new $thisType(head, model);
    }
    return compiledSerializer;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.CompiledSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel")]), 
      CompiledSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Callback", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      CompiledSerializer_Callback
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ExpectedType
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ExpectedType");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_Read
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "Read");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      CompiledSerializer_ProtoBuf_Serializers_IProtoSerializer_Write
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "Write");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance", 
      JSIL.MethodSignature.Return($.Boolean), 
      CompiledSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CanCreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      CompiledSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.EmitCallback", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local"), 
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")
        ]), 
      CompiledSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCallback
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "EmitCallback");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.CompilerContext")), 
      CompiledSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "EmitCreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]), 
      CompiledSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_HasCallbacks
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "HasCallbacks");

    $.Method({Static:true , Public:true }, "Wrap", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel")]), 
      CompiledSerializer_Wrap
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "head", $asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "serializer", $asm08.TypeRef("ProtoBuf.Compiler.ProtoSerializer"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "deserializer", $asm08.TypeRef("ProtoBuf.Compiler.ProtoDeserializer"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ExpectedType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), 
      /* 1 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.DateTimeSerializer */ 

(function DateTimeSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.DateTime)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.BclHelpers)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function DateTimeSerializer__ctor (model) {
    this.includeKind = (model !== null) && 
    model.SerializeDateTimeKind();
  }; 

  function DateTimeSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function DateTimeSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead(
      ctx.MapType($T04().__Type__), 
      "ReadDateTime", 
      this.get_ExpectedType()
    );
  }; 

  function DateTimeSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitWrite(ctx.MapType($T04().__Type__), (
        this.includeKind
           ? "WriteDateTimeWithKind"
           : "WriteDateTime")
      , valueFrom);
  }; 

  function DateTimeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function DateTimeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function DateTimeSerializer_Read (value, source) {
    return $T04().ReadDateTime(source);
  }; 

  function DateTimeSerializer_Write (value, dest) {
    if (this.includeKind) {
      $T04().WriteDateTimeWithKind($T00().$Cast(value).MemberwiseClone(), dest);
      return;
    }
    $T04().WriteDateTime($T00().$Cast(value).MemberwiseClone(), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.DateTimeSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      DateTimeSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      DateTimeSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      DateTimeSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      DateTimeSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DateTimeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DateTimeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      DateTimeSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      DateTimeSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.DateTime.__Type__;
      });

    $.Field({Static:false, Public:false, ReadOnly:true }, "includeKind", $.Boolean);


    function DateTimeSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DateTimeSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.DecimalSerializer */ 

(function DecimalSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Decimal)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.BclHelpers)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function DecimalSerializer__ctor (model) {
  }; 

  function DecimalSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function DecimalSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead(
      ctx.MapType($T04().__Type__), 
      "ReadDecimal", 
      this.get_ExpectedType()
    );
  }; 

  function DecimalSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitWrite(ctx.MapType($T04().__Type__), "WriteDecimal", valueFrom);
  }; 

  function DecimalSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function DecimalSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function DecimalSerializer_Read (value, source) {
    return $T04().ReadDecimal(source);
  }; 

  function DecimalSerializer_Write (value, dest) {
    $T04().WriteDecimal($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.DecimalSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      DecimalSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      DecimalSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      DecimalSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      DecimalSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DecimalSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DecimalSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      DecimalSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      DecimalSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Decimal.__Type__;
      });


    function DecimalSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DecimalSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.DefaultValueDecorator */ 

(function DefaultValueDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Reflection.BindingFlags)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Char)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.SByte)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.Decimal)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.DateTime)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm07.System.TimeSpan)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String, $asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int64")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Single")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Double")))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Decimal")))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.String")))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.FieldInfo")))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid")))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, [$asm07.System.String]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitRead)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitWrite)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function DefaultValueDecorator__ctor (model, defaultValue, tail) {
    $T03().prototype._ctor.call(this, tail);
    if (defaultValue === null) {
      throw $S00().Construct("defaultValue");
    }
    if ($T05().op_Inequality(
        model.MapType(JSIL.GetType(defaultValue)), 
        $IM00().Call(tail, null)
      )) {
      throw $S01().Construct("Default value is of incorrect type", "defaultValue");
    }
    this.defaultValue = defaultValue;
  }; 

  function DefaultValueDecorator_EmitBeq (ctx, label, type) {
    var typeCode = $T0A().GetTypeCode(type);
    if ((((typeCode - $T09().Boolean) | 0) >>> 0) <= (11 >>> 0)) {
      ctx.BranchIfEqual(label, false);
      return;
    }
    var method = type.GetMethod(
      "op_Equality", 
      $T0D().$Flags("Public", "Static"), 
      null, 
      JSIL.Array.New($T05(), [type, type]), 
      null
    );
    if (!(!$T0C().op_Equality(method, null) && !$T05().op_Inequality(
          method.get_ReturnType(), 
          ctx.MapType($T0E().__Type__)
        ))) {
      throw $S02().Construct(JSIL.ConcatString("No suitable equality operator found for default-values of type: ", type.get_FullName()));
    }
    ctx.EmitCall(method);
    ctx.BranchIfTrue(label, false);
  }; 

  function DefaultValueDecorator_EmitBranchIfDefaultValue (ctx, label) {
    var expectedType = this.get_ExpectedType();
    var typeCode = $T0A().GetTypeCode(expectedType);
    switch (typeCode.valueOf()) {
      case 3: 
        if ($T0E().$Cast(this.defaultValue)) {
          ctx.BranchIfTrue(label, false);
          return;
        }
        ctx.BranchIfFalse(label, false);
        return;

      case 4: 
        if ($T11().$Cast(this.defaultValue) === "\x00") {
          ctx.BranchIfFalse(label, false);
          return;
        }
        $S03().CallVirtual("LoadValue", null, ctx, ($T11().$Cast(this.defaultValue)).charCodeAt(0));
        this.EmitBeq(ctx, label, expectedType);
        return;

      case 5: 
        if ($T12().$Cast(this.defaultValue) === 0) {
          ctx.BranchIfFalse(label, false);
          return;
        }
        $S03().CallVirtual("LoadValue", null, ctx, $T12().$Cast(this.defaultValue));
        this.EmitBeq(ctx, label, expectedType);
        return;

      case 6: 
        if ($T13().$Cast(this.defaultValue) === 0) {
          ctx.BranchIfFalse(label, false);
          return;
        }
        $S03().CallVirtual("LoadValue", null, ctx, $T13().$Cast(this.defaultValue));
        this.EmitBeq(ctx, label, expectedType);
        return;

      case 7: 
        if ($T14().$Cast(this.defaultValue) === 0) {
          ctx.BranchIfFalse(label, false);
          return;
        }
        $S03().CallVirtual("LoadValue", null, ctx, $T14().$Cast(this.defaultValue));
        this.EmitBeq(ctx, label, expectedType);
        return;

      case 8: 
        if ($T15().$Cast(this.defaultValue) === 0) {
          ctx.BranchIfFalse(label, false);
          return;
        }
        $S03().CallVirtual("LoadValue", null, ctx, $T15().$Cast(this.defaultValue));
        this.EmitBeq(ctx, label, expectedType);
        return;

      case 9: 
        if ($T16().$Cast(this.defaultValue) === 0) {
          ctx.BranchIfFalse(label, false);
          return;
        }
        $S03().CallVirtual("LoadValue", null, ctx, $T16().$Cast(this.defaultValue));
        this.EmitBeq(ctx, label, expectedType);
        return;

      case 10: 
        if ($T0B().$Cast(this.defaultValue) === 0) {
          ctx.BranchIfFalse(label, false);
          return;
        }
        $S03().CallVirtual("LoadValue", null, ctx, ($T0B().$Cast(this.defaultValue) | 0));
        this.EmitBeq(ctx, label, expectedType);
        return;

      case 11: 
        $S04().CallVirtual("LoadValue", null, ctx, $T17().$Cast(this.defaultValue));
        this.EmitBeq(ctx, label, expectedType);
        return;

      case 12: 
        $S04().CallVirtual("LoadValue", null, ctx, ($T18().$Cast(this.defaultValue)).ToInt64());
        this.EmitBeq(ctx, label, expectedType);
        return;

      case 13: 
        $S05().CallVirtual("LoadValue", null, ctx, $T19().$Cast(this.defaultValue));
        this.EmitBeq(ctx, label, expectedType);
        return;

      case 14: 
        $S06().CallVirtual("LoadValue", null, ctx, $T1A().$Cast(this.defaultValue));
        this.EmitBeq(ctx, label, expectedType);
        return;

      case 15: 
        var value = $T1B().$Cast(this.defaultValue);
        $S07().CallVirtual("LoadValue", null, ctx, value);
        this.EmitBeq(ctx, label, expectedType);
        return;

      case 16: 
        $S04().CallVirtual("LoadValue", null, ctx, ($T1C().$Cast(this.defaultValue).MemberwiseClone()).ToBinary());
        ctx.EmitCall((ctx.MapType($T1C().__Type__)).GetMethod("FromBinary"));
        this.EmitBeq(ctx, label, expectedType);
        return;

      case 17: 
        break;

      case 18: 
        $S08().CallVirtual("LoadValue", null, ctx, $T10().$Cast(this.defaultValue));
        this.EmitBeq(ctx, label, expectedType);
        return;

      default: 
        if (typeCode === $T09().TimeSpan) {
          var t = $T1D().$Cast(this.defaultValue).MemberwiseClone();
          if ($T1D().op_Equality(t.MemberwiseClone(), $T1D().Zero.MemberwiseClone())) {
            $S09().CallVirtual("LoadValue", null, ctx, $T1D().__Type__.GetField("Zero"));
          } else {
            $S04().CallVirtual("LoadValue", null, ctx, t.get_Ticks());
            ctx.EmitCall((ctx.MapType($T1D().__Type__)).GetMethod("FromTicks"));
          }
          this.EmitBeq(ctx, label, expectedType);
          return;
        }
        if (typeCode === $T09().Guid) {
          $S0A().CallVirtual("LoadValue", null, ctx, $T1E().$Cast(this.defaultValue).MemberwiseClone());
          this.EmitBeq(ctx, label, expectedType);
          return;
        }
        break;

    }
    throw $S0B().Construct(JSIL.ConcatString("Type cannot be represented as a default value: ", expectedType.get_FullName()));
  }; 

  function DefaultValueDecorator_EmitRead (ctx, valueFrom) {
    $IM01().Call(this.Tail, null, ctx, valueFrom);
  }; 

  function DefaultValueDecorator_EmitWrite (ctx, valueFrom) {
    var label = ctx.DefineLabel();
    if (valueFrom === null) {
      ctx.CopyValue();
      var label2 = ctx.DefineLabel();
      this.EmitBranchIfDefaultValue(ctx, label2);
      $IM02().Call(this.Tail, null, ctx, null);
      ctx.Branch(label, true);
      ctx.MarkLabel(label2);
      ctx.DiscardValue();
    } else {
      $S0C().CallVirtual("LoadValue", null, ctx, valueFrom);
      this.EmitBranchIfDefaultValue(ctx, label);
      $IM02().Call(this.Tail, null, ctx, valueFrom);
    }
    ctx.MarkLabel(label);
  }; 

  function DefaultValueDecorator_get_ExpectedType () {
    return $IM00().Call(this.Tail, null);
  }; 

  function DefaultValueDecorator_get_RequiresOldValue () {
    return $IM03().Call(this.Tail, null);
  }; 

  function DefaultValueDecorator_get_ReturnsValue () {
    return $IM04().Call(this.Tail, null);
  }; 

  function DefaultValueDecorator_Read (value, source) {
    return $IM05().Call(this.Tail, null, value, source);
  }; 

  function DefaultValueDecorator_Write (value, dest) {
    if (!(JSIL.ObjectEquals(value, this.defaultValue))) {
      $IM06().Call(this.Tail, null, value, dest);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.DefaultValueDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $.Object, 
          $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
        ]), 
      DefaultValueDecorator__ctor
    );

    $.Method({Static:false, Public:false}, "EmitBeq", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.CodeLabel"), 
          $asm07.TypeRef("System.Type")
        ]), 
      DefaultValueDecorator_EmitBeq
    );

    $.Method({Static:false, Public:false}, "EmitBranchIfDefaultValue", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.CodeLabel")]), 
      DefaultValueDecorator_EmitBranchIfDefaultValue
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      DefaultValueDecorator_EmitRead
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      DefaultValueDecorator_EmitWrite
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      DefaultValueDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DefaultValueDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DefaultValueDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      DefaultValueDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      DefaultValueDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "defaultValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.DoubleSerializer */ 

(function DoubleSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function DoubleSerializer__ctor (model) {
  }; 

  function DoubleSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function DoubleSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadDouble", this.get_ExpectedType());
  }; 

  function DoubleSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteDouble", valueFrom);
  }; 

  function DoubleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function DoubleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function DoubleSerializer_Read (value, source) {
    return $T00().$Box(source.ReadDouble());
  }; 

  function DoubleSerializer_Write (value, dest) {
    $T06().WriteDouble($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.DoubleSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      DoubleSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      DoubleSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      DoubleSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      DoubleSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DoubleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      DoubleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      DoubleSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      DoubleSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Double.__Type__;
      });


    function DoubleSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DoubleSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.EnumSerializer */ 

(function EnumSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Serializers.EnumSerializer_EnumPair))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.SByte)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm08.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm07.System.Int32))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_NodeEnumerator)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_Group)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Compiler.CodeLabel))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm07.System.Enum)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.ProtoException, [$asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type, $asm07.System.SByte]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type, $asm07.System.Byte]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type, $asm07.System.Int16]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type, $asm07.System.UInt16]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type, $asm07.System.Int32]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type, $asm07.System.UInt32]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type, $asm07.System.Int64]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type, $asm07.System.UInt64]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int64")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };


  function EnumSerializer__ctor (enumType, map) {
    if ($T00().op_Equality(enumType, null)) {
      throw $S00().Construct("enumType");
    }
    this.enumType = enumType;
    this.map = map;
    if (map !== null) {

      for (var i = 1; i < (map.length | 0); i = ((i + 1) | 0)) {

        for (var j = 0; j < i; j = ((j + 1) | 0)) {
          if (!(((map[i].WireValue | 0) !== (map[j].WireValue | 0)) || (JSIL.ObjectEquals(map[i].RawValue, map[j].RawValue)))) {
            throw $S01().Construct(JSIL.ConcatString("Multiple enums with wire-value ", (map[i].WireValue).toString()));
          }
          if (!(!(JSIL.ObjectEquals(map[i].RawValue, map[j].RawValue)) || ((map[i].WireValue | 0) === (map[j].WireValue | 0)))) {
            throw $S01().Construct(JSIL.ConcatString("Multiple enums with deserialized-value ", map[i].RawValue));
          }
        }
      }
    }
  }; 

  function EnumSerializer_EnumToWire (value) {
    switch ((this.GetTypeCode()).valueOf()) {
      case 5: 
        return $T07().$Cast(value);

      case 6: 
        return $T08().$Cast(value);

      case 7: 
        return $T09().$Cast(value);

      case 8: 
        return $T0A().$Cast(value);

      case 9: 
        return $T03().$Cast(value);

      case 10: 
        return ($T0B().$Cast(value) | 0);

      case 11: 
        return ($T0C().$Cast(value)).ToNumber(4294967295, true);

      case 12: 
        return ($T0D().$Cast(value)).ToNumber(4294967295, true);

      default: 
        throw $S02().Construct();

    }
  }; 

  function EnumSerializer_get_ExpectedType () {
    return this.enumType;
  }; 

  function EnumSerializer_GetTypeCode () {
    var underlyingType = $T0F().GetUnderlyingType(this.enumType);
    if ($T00().op_Equality(underlyingType, null)) {
      underlyingType = this.enumType;
    }
    return $T0F().GetTypeCode(underlyingType);
  }; 

  function EnumSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    var typeCode = this.GetTypeCode();
    if (this.map === null) {
      ctx.EmitBasicRead("ReadInt32", ctx.MapType($T03().__Type__));
      ctx.ConvertFromInt32(typeCode, false);
      return;
    }
    var array = JSIL.Array.New($T03(), this.map.length);
    var array2 = JSIL.Array.New($T04(), this.map.length);

    for (var i = 0; i < (this.map.length | 0); i = ((i + 1) | 0)) {
      array[i] = (this.map[i].WireValue | 0);
      array2[i] = this.map[i].RawValue;
    }
    var local = $S03().Construct(ctx, this.get_ExpectedType());
    try {
      var local2 = $S03().Construct(ctx, ctx.MapType($T03().__Type__));
      try {
        ctx.EmitBasicRead("ReadInt32", ctx.MapType($T03().__Type__));
        $S04().CallVirtual("StoreValue", null, ctx, local2);
        var codeLabel = ctx.DefineLabel();

        for (var enumerator = ($T17().GetContiguousGroups(array, array2)).GetEnumerator(); enumerator.MoveNext(); ) {
          var group = $T18().$Cast(enumerator.get_Current());
          var label = ctx.DefineLabel();
          var count = ((group.Items).get_Count() | 0);
          if (count === 1) {
            $S05().CallVirtual("LoadValue", null, ctx, local2);
            $S06().CallVirtual("LoadValue", null, ctx, group.First);
            var codeLabel2 = ctx.DefineLabel();
            ctx.BranchIfEqual(codeLabel2, true);
            ctx.Branch(label, false);
            $thisType.WriteEnumValue(
              ctx, 
              typeCode, 
              codeLabel2, 
              codeLabel, 
              (group.Items).get_Item(0), 
              local
            );
          } else {
            $S05().CallVirtual("LoadValue", null, ctx, local2);
            $S06().CallVirtual("LoadValue", null, ctx, group.First);
            ctx.Subtract();
            var array3 = JSIL.Array.New($T15(), count);

            for (var j = 0; j < count; j = ((j + 1) | 0)) {
              array3[j] = ctx.DefineLabel();
            }
            ctx.Switch(array3);
            ctx.Branch(label, false);

            for (var k = 0; k < count; k = ((k + 1) | 0)) {
              $thisType.WriteEnumValue(
                ctx, 
                typeCode, 
                array3[k], 
                codeLabel, 
                (group.Items).get_Item(k), 
                local
              );
            }
          }
          ctx.MarkLabel(label);
        }
        ctx.LoadReaderWriter();
        $S07().CallVirtual("LoadValue", null, ctx, this.get_ExpectedType());
        $S05().CallVirtual("LoadValue", null, ctx, local2);
        ctx.EmitCall((ctx.MapType($T1A().__Type__)).GetMethod("ThrowEnumException"));
        ctx.MarkLabel(codeLabel);
        $S05().CallVirtual("LoadValue", null, ctx, local);
      } finally {
        if (local2 !== null) {
          $IM00().Call(local2, null);
        }
      }
    } finally {
      if (local !== null) {
        $IM00().Call(local, null);
      }
    }
  }; 

  function EnumSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    var typeCode = this.GetTypeCode();
    if (this.map === null) {
      $S05().CallVirtual("LoadValue", null, ctx, valueFrom);
      ctx.ConvertToInt32(typeCode, false);
      ctx.EmitBasicWrite("WriteInt32", null);
      return;
    }
    var localWithValue = ctx.GetLocalWithValue(this.get_ExpectedType(), valueFrom);
    try {
      var label = ctx.DefineLabel();

      for (var i = 0; i < (this.map.length | 0); i = ((i + 1) | 0)) {
        var label2 = ctx.DefineLabel();
        var label3 = ctx.DefineLabel();
        $S05().CallVirtual("LoadValue", null, ctx, localWithValue);
        $thisType.WriteEnumValue(ctx, typeCode, this.map[i].RawValue);
        ctx.BranchIfEqual(label3, true);
        ctx.Branch(label2, true);
        ctx.MarkLabel(label3);
        $S06().CallVirtual("LoadValue", null, ctx, this.map[i].WireValue);
        ctx.EmitBasicWrite("WriteInt32", null);
        ctx.Branch(label, false);
        ctx.MarkLabel(label2);
      }
      ctx.LoadReaderWriter();
      $S05().CallVirtual("LoadValue", null, ctx, localWithValue);
      ctx.CastToObject(this.get_ExpectedType());
      ctx.EmitCall((ctx.MapType($T1C().__Type__)).GetMethod("ThrowEnumException"));
      ctx.MarkLabel(label);
    } finally {
      if (localWithValue !== null) {
        $IM00().Call(localWithValue, null);
      }
    }
  }; 

  function EnumSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function EnumSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function EnumSerializer_Read (value, source) {
    var num = (source.ReadInt32() | 0);
    if (this.map === null) {
      return this.WireToEnum(num);
    }

    for (var i = 0; i < (this.map.length | 0); i = ((i + 1) | 0)) {
      if ((this.map[i].WireValue | 0) === num) {
        return this.map[i].TypedValue;
      }
    }
    source.ThrowEnumException(this.get_ExpectedType(), num);
    return null;
  }; 

  function EnumSerializer_WireToEnum (value) {
    switch ((this.GetTypeCode()).valueOf()) {
      case 5: 
        return $S08().CallStatic($T1D(), "ToObject", null, this.enumType, ((value + 0x80 & 0xFF) - 0x80));

      case 6: 
        return $S09().CallStatic($T1D(), "ToObject", null, this.enumType, (value & 0xFF));

      case 7: 
        return $S0A().CallStatic($T1D(), "ToObject", null, this.enumType, ((value + 0x8000 & 0xFFFF) - 0x8000));

      case 8: 
        return $S0B().CallStatic($T1D(), "ToObject", null, this.enumType, (value & 0xFFFF));

      case 9: 
        return $S0C().CallStatic($T1D(), "ToObject", null, this.enumType, value);

      case 10: 
        return $S0D().CallStatic($T1D(), "ToObject", null, this.enumType, (value >>> 0));

      case 11: 
        return $S0E().CallStatic($T1D(), "ToObject", null, this.enumType, $T0C().FromNumber(value));

      case 12: 
        return $S0F().CallStatic($T1D(), "ToObject", null, this.enumType, ($T0C().FromNumber(value)).ToUInt64());

      default: 
        throw $S02().Construct();

    }
  }; 

  function EnumSerializer_Write (value, dest) {
    if (this.map === null) {
      $T1C().WriteInt32(this.EnumToWire(value), dest);
      return;
    }

    for (var i = 0; i < (this.map.length | 0); i = ((i + 1) | 0)) {
      if (JSIL.ObjectEquals(this.map[i].TypedValue, value)) {
        $T1C().WriteInt32(this.map[i].WireValue, dest);
        return;
      }
    }
    $T1C().ThrowEnumException(dest, value);
  }; 

  function EnumSerializer_WriteEnumValue$00 (ctx, typeCode, value) {
    switch (typeCode.valueOf()) {
      case 5: 
        $S06().CallVirtual("LoadValue", null, ctx, $T07().$Cast(value));
        return;

      case 6: 
        $S06().CallVirtual("LoadValue", null, ctx, $T08().$Cast(value));
        return;

      case 7: 
        $S06().CallVirtual("LoadValue", null, ctx, $T09().$Cast(value));
        return;

      case 8: 
        $S06().CallVirtual("LoadValue", null, ctx, $T0A().$Cast(value));
        return;

      case 9: 
        $S06().CallVirtual("LoadValue", null, ctx, $T03().$Cast(value));
        return;

      case 10: 
        $S06().CallVirtual("LoadValue", null, ctx, ($T0B().$Cast(value) | 0));
        return;

      case 11: 
        $S10().CallVirtual("LoadValue", null, ctx, $T0C().$Cast(value));
        return;

      case 12: 
        $S10().CallVirtual("LoadValue", null, ctx, ($T0D().$Cast(value)).ToInt64());
        return;

      default: 
        throw $S02().Construct();

    }
  }; 

  function EnumSerializer_WriteEnumValue$01 (ctx, typeCode, handler, $continue, value, local) {
    ctx.MarkLabel(handler);
    $thisType.WriteEnumValue(ctx, typeCode, value);
    $S04().CallVirtual("StoreValue", null, ctx, local);
    ctx.Branch($continue, false);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.EnumSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Serializers.EnumSerializer+EnumPair")])]), 
      EnumSerializer__ctor
    );

    $.Method({Static:false, Public:false}, "EnumToWire", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      EnumSerializer_EnumToWire
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      EnumSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false}, "GetTypeCode", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.ProtoTypeCode")), 
      EnumSerializer_GetTypeCode
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      EnumSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      EnumSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      EnumSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      EnumSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      EnumSerializer_Read
    );

    $.Method({Static:false, Public:false}, "WireToEnum", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      EnumSerializer_WireToEnum
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      EnumSerializer_Write
    );

    $.Method({Static:true , Public:false}, "WriteEnumValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.ProtoTypeCode"), 
          $.Object
        ]), 
      EnumSerializer_WriteEnumValue$00
    );

    $.Method({Static:true , Public:false}, "WriteEnumValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.ProtoTypeCode"), 
          $asm08.TypeRef("ProtoBuf.Compiler.CodeLabel"), $asm08.TypeRef("ProtoBuf.Compiler.CodeLabel"), 
          $.Object, $asm08.TypeRef("ProtoBuf.Compiler.Local")
        ]), 
      EnumSerializer_WriteEnumValue$01
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "enumType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "map", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Serializers.EnumSerializer+EnumPair")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct ProtoBuf.Serializers.EnumSerializer+EnumPair */ 

(function EnumPair$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Enum)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type, $asm07.System.Object]))) ();
  };


  function EnumPair__ctor (wireValue, raw, type) {
    this.WireValue = (wireValue | 0);
    this.RawValue = raw;
    this.TypedValue = $T03().$Cast($S00().CallStatic($T03(), "ToObject", null, type, raw));
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.Serializers.EnumSerializer+EnumPair", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm07.TypeRef("System.Type")
        ]), 
      EnumPair__ctor
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "RawValue", $.Object);

    $.Field({Static:false, Public:true , ReadOnly:true }, "TypedValue", $asm07.TypeRef("System.Enum"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "WireValue", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.FieldDecorator */ 

(function FieldDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Reflection.FieldInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.FieldInfo")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.FieldInfo")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Object]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function FieldDecorator__ctor (forType, field, tail) {
    $T03().prototype._ctor.call(this, tail);
    this.forType = forType;
    this.field = field;
  }; 

  function FieldDecorator_EmitRead (ctx, valueFrom) {
    var localWithValue = ctx.GetLocalWithValue(this.get_ExpectedType(), valueFrom);
    try {
      if ($IM00().Call(this.Tail, null)) {
        ctx.LoadAddress(localWithValue, this.get_ExpectedType());
        $S00().CallVirtual("LoadValue", null, ctx, this.field);
      }
      ctx.ReadNullCheckedTail((this.field).get_FieldType(), this.Tail, null);
      if ($IM01().Call(this.Tail, null)) {
        var local = $S01().Construct(ctx, (this.field).get_FieldType());
        try {
          $S02().CallVirtual("StoreValue", null, ctx, local);
          if ($T06().IsValueType((this.field).get_FieldType())) {
            ctx.LoadAddress(localWithValue, this.get_ExpectedType());
            $S03().CallVirtual("LoadValue", null, ctx, local);
            $S04().CallVirtual("StoreValue", null, ctx, this.field);
          } else {
            var label = ctx.DefineLabel();
            $S03().CallVirtual("LoadValue", null, ctx, local);
            ctx.BranchIfFalse(label, true);
            ctx.LoadAddress(localWithValue, this.get_ExpectedType());
            $S03().CallVirtual("LoadValue", null, ctx, local);
            $S04().CallVirtual("StoreValue", null, ctx, this.field);
            ctx.MarkLabel(label);
          }
        } finally {
          if (local !== null) {
            $IM02().Call(local, null);
          }
        }
      }
    } finally {
      if (localWithValue !== null) {
        $IM02().Call(localWithValue, null);
      }
    }
  }; 

  function FieldDecorator_EmitWrite (ctx, valueFrom) {
    ctx.LoadAddress(valueFrom, this.get_ExpectedType());
    $S00().CallVirtual("LoadValue", null, ctx, this.field);
    ctx.WriteNullCheckedTail((this.field).get_FieldType(), this.Tail, null);
  }; 

  function FieldDecorator_get_ExpectedType () {
    return this.forType;
  }; 

  function FieldDecorator_get_RequiresOldValue () {
    return true;
  }; 

  function FieldDecorator_get_ReturnsValue () {
    return false;
  }; 

  function FieldDecorator_Read (value, source) {
    var obj = $IM03().Call(this.Tail, null, (
        $IM00().Call(this.Tail, null)
           ? $S05().CallVirtual("GetValue", null, this.field, value)
           : null)
      , source);
    if (obj !== null) {
      (this.field).SetValue(value, obj);
    }
    return null;
  }; 

  function FieldDecorator_Write (value, dest) {
    value = $S05().CallVirtual("GetValue", null, this.field, value);
    if (value !== null) {
      $IM04().Call(this.Tail, null, value, dest);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.FieldDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Reflection.FieldInfo"), 
          $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
        ]), 
      FieldDecorator__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      FieldDecorator_EmitRead
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      FieldDecorator_EmitWrite
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      FieldDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      FieldDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      FieldDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      FieldDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      FieldDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "field", $asm07.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "forType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.GuidSerializer */ 

(function GuidSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.BclHelpers)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function GuidSerializer__ctor (model) {
  }; 

  function GuidSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function GuidSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead(
      ctx.MapType($T04().__Type__), 
      "ReadGuid", 
      this.get_ExpectedType()
    );
  }; 

  function GuidSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitWrite(ctx.MapType($T04().__Type__), "WriteGuid", valueFrom);
  }; 

  function GuidSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function GuidSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function GuidSerializer_Read (value, source) {
    return $T04().ReadGuid(source);
  }; 

  function GuidSerializer_Write (value, dest) {
    $T04().WriteGuid($T00().$Cast(value).MemberwiseClone(), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.GuidSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      GuidSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      GuidSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      GuidSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      GuidSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      GuidSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      GuidSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      GuidSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      GuidSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Guid.__Type__;
      });


    function GuidSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      GuidSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.ListDecorator */ 

(function ListDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Collections.IEnumerable)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ArrayDecorator)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ImmutableCollectionDecorator)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.Reflection.ParameterInfo)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.Reflection.ConstructorInfo)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm08.ProtoBuf.SubItemToken)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm07.System.Reflection.PropertyInfo)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm07.System.Activator)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm07.System.Collections.IList)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm07.System.Reflection.TargetInvocationException)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm07.System.Collections.ICollection)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm07.System.NullReferenceException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String, $asm07.System.String]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Type]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.ConstructorInfo")))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.PropertyInfo")))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NullReferenceException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitRead)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitWrite)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm07.System.Collections.IList.Add)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm07.System.Collections.ICollection.get_Count)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm07.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm07.System.Collections.IEnumerator.get_Current)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function ListDecorator__ctor (model, declaredType, concreteType, tail, fieldNumber, writePacked, packedWireType, returnList, overwriteList, supportNull) {
    var flag = new JSIL.BoxedVariable(false);
    $T08().prototype._ctor.call(this, tail);
    if (returnList) {
      this.options = (this.options | 0) | 8;
    }
    if (overwriteList) {
      this.options = (this.options | 0) | 16;
    }
    if (supportNull) {
      this.options = (this.options | 0) | 32;
    }
    if (!((!writePacked && 
          (packedWireType === $T07().None)) || ((fieldNumber | 0) > 0))) {
      throw $S00().Construct("fieldNumber");
    }
    if (!$thisType.CanPack(packedWireType)) {
      if (writePacked) {
        throw $S01().Construct("Only simple data-types can use packed encoding");
      }
      packedWireType = $T07().None;
    }
    this.fieldNumber = (fieldNumber | 0);
    if (writePacked) {
      this.options = (this.options | 0) | 4;
    }
    this.packedWireType = packedWireType;
    if ($T03().op_Equality(declaredType, null)) {
      throw $S02().Construct("declaredType");
    }
    if (declaredType.get_IsArray()) {
      throw $S03().Construct("Cannot treat arrays as lists", "declaredType");
    }
    this.declaredType = declaredType;
    this.concreteType = concreteType;
    if (this.get_RequireAdd()) {
      this.add = $T02().ResolveListAdd(model, declaredType, $IM00().Call(tail, null), /* ref */ flag);
      if (flag.get()) {
        this.options = (this.options | 0) | 1;
        var fullName = declaredType.get_FullName();
        if (!((fullName === null) || !(System.String.StartsWith(fullName, "System.Data.Linq.EntitySet`1[[")))) {
          this.options = (this.options | 0) | 2;
        }
      }
      if ($T0E().op_Equality(this.add, null)) {
        throw $S01().Construct(JSIL.ConcatString("Unable to resolve a suitable Add method for ", declaredType.get_FullName()));
      }
    }
  }; 

  function ListDecorator_CanPack (wireType) {
    return !((wireType > $T07().Fixed64) && 
      (wireType !== $T07().Fixed32) && (wireType !== $T07().SignedVariant));
  }; 

  function ListDecorator_CanUsePackedPrefix (obj) {
    return $T10().CanUsePackedPrefix(this.packedWireType, $IM00().Call(this.Tail, null));
  }; 

  function ListDecorator_Create (model, declaredType, concreteType, tail, fieldNumber, writePacked, packedWireType, returnList, overwriteList, supportNull) {
    var builderFactory = new JSIL.BoxedVariable(null);
    var methodInfo = new JSIL.BoxedVariable(null);
    var addRange = new JSIL.BoxedVariable(null);
    var finish = new JSIL.BoxedVariable(null);
    if (!(!returnList || !$T11().IdentifyImmutable(
          model, 
          declaredType, 
          /* ref */ builderFactory, 
          /* ref */ methodInfo, 
          /* ref */ addRange, 
          /* ref */ finish
        ))) {
      return new ($T11())(model, declaredType, concreteType, tail, fieldNumber, writePacked, packedWireType, returnList, overwriteList, supportNull, builderFactory.get(), methodInfo.get(), addRange.get(), finish.get());
    }
    return new $thisType(model, declaredType, concreteType, tail, fieldNumber, writePacked, packedWireType, returnList, overwriteList, supportNull);
  }; 

  function ListDecorator_EmitRead (ctx, valueFrom) {
    var returnList = this.get_ReturnList();
    var local = (
      this.get_AppendToCollection()
         ? ctx.GetLocalWithValue(this.get_ExpectedType(), valueFrom)
         : $S04().Construct(ctx, this.declaredType))
    ;
    try {
      var local2 = (
        (returnList && 
          this.get_AppendToCollection() && 
          !$T14().IsValueType(this.get_ExpectedType()))
           ? $S04().Construct(ctx, this.get_ExpectedType())
           : null)
      ;
      try {
        if (!this.get_AppendToCollection()) {
          ctx.LoadNullRef();
          $S05().CallVirtual("StoreValue", null, ctx, local);
        } else if (!(!returnList || (local2 === null))) {
          $S06().CallVirtual("LoadValue", null, ctx, local);
          $S05().CallVirtual("StoreValue", null, ctx, local2);
        }
        if ($T03().op_Inequality(this.concreteType, null)) {
          $S06().CallVirtual("LoadValue", null, ctx, local);
          var label = ctx.DefineLabel();
          ctx.BranchIfTrue(label, true);
          $S07().CallVirtual("EmitCtor", null, ctx, this.concreteType);
          $S05().CallVirtual("StoreValue", null, ctx, local);
          ctx.MarkLabel(label);
        }
        var castListForAdd = !$S08().CallVirtual("IsAssignableFrom", null, (this.add).get_DeclaringType(), this.declaredType);
        $thisType.EmitReadList(
          ctx, 
          local, 
          this.Tail, 
          this.add, 
          this.packedWireType, 
          castListForAdd
        );
        if (returnList) {
          if (!(!this.get_AppendToCollection() || (local2 === null))) {
            $S06().CallVirtual("LoadValue", null, ctx, local2);
            $S06().CallVirtual("LoadValue", null, ctx, local);
            var label2 = ctx.DefineLabel();
            var label3 = ctx.DefineLabel();
            ctx.BranchIfEqual(label2, true);
            $S06().CallVirtual("LoadValue", null, ctx, local);
            ctx.Branch(label3, true);
            ctx.MarkLabel(label2);
            ctx.LoadNullRef();
            ctx.MarkLabel(label3);
          } else {
            $S06().CallVirtual("LoadValue", null, ctx, local);
          }
        }
      } finally {
        if (local2 !== null) {
          $IM01().Call(local2, null);
        }
      }
    } finally {
      if (local !== null) {
        $IM01().Call(local, null);
      }
    }
  }; 

  function ListDecorator_EmitReadAndAddItem (ctx, list, tail, add, castListForAdd) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          ctx.LoadAddress(list, list.get_Type());
          if (castListForAdd) {
            ctx.Cast(add.get_DeclaringType());
          }
          var expectedType = $IM00().Call(tail, null);
          var returnsValue = $IM02().Call(tail, null);
          if ($IM03().Call(tail, null)) {
            if (!(!$T14().IsValueType(expectedType) && returnsValue)) {
              var local = $S04().Construct(ctx, expectedType);
              try {
                if ($T14().IsValueType(expectedType)) {
                  ctx.LoadAddress(local, expectedType);
                  $S07().CallVirtual("EmitCtor", null, ctx, expectedType);
                } else {
                  ctx.LoadNullRef();
                  $S05().CallVirtual("StoreValue", null, ctx, local);
                }
                $IM04().Call(tail, null, ctx, local);
                if (!returnsValue) {
                  $S06().CallVirtual("LoadValue", null, ctx, local);
                }
                break $labelgroup0;
              } finally {
                if (local !== null) {
                  $IM01().Call(local, null);
                }
              }
            }
            ctx.LoadNullRef();
            $IM04().Call(tail, null, ctx, null);
          } else {
            if (!returnsValue) {
              throw $S09().Construct();
            }
            $IM04().Call(tail, null, ctx, null);
          }
          break $labelgroup0;

      }
    }
    /* Original label IL_AD */ 
    var parameterType = (add.GetParameters()[0]).get_ParameterType();
    if ($T03().op_Inequality(parameterType, expectedType)) {
      if ($T03().op_Equality(parameterType, ctx.MapType($T0F().__Type__))) {
        ctx.CastToObject(expectedType);
      } else {
        if (!$T03().op_Equality($T14().GetUnderlyingType(parameterType), expectedType)) {
          throw $S01().Construct("Conflicting item/add type");
        }
        var constructor = $T14().GetConstructor(parameterType, JSIL.Array.New($T03(), [expectedType]), false);
        $S0A().CallVirtual("EmitCtor", null, ctx, constructor);
      }
    }
    ctx.EmitCall(add, list.get_Type());
    if ($T03().op_Inequality(
        add.get_ReturnType(), 
        ctx.MapType($T1B().__Type__)
      )) {
      ctx.DiscardValue();
    }
  }; 

  function ListDecorator_EmitReadList (ctx, list, tail, add, packedWireType, castListForAdd) {
    var local = $S04().Construct(ctx, ctx.MapType($T05().__Type__));
    try {
      var label = (
        (packedWireType === $T07().None)
           ? new ($T15())()
           : ctx.DefineLabel())
      ;
      if (packedWireType !== $T07().None) {
        ctx.LoadReaderWriter();
        $S0B().CallVirtual("LoadValue", null, ctx, $T1C().__Type__.GetProperty("WireType"));
        $S0C().CallVirtual("LoadValue", null, ctx, 2);
        ctx.BranchIfEqual(label, false);
      }
      ctx.LoadReaderWriter();
      $S0B().CallVirtual("LoadValue", null, ctx, $T1C().__Type__.GetProperty("FieldNumber"));
      $S05().CallVirtual("StoreValue", null, ctx, local);
      var label2 = ctx.DefineLabel();
      ctx.MarkLabel(label2);
      $thisType.EmitReadAndAddItem(
        ctx, 
        list, 
        tail, 
        add, 
        castListForAdd
      );
      ctx.LoadReaderWriter();
      $S06().CallVirtual("LoadValue", null, ctx, local);
      ctx.EmitCall((ctx.MapType($T1C().__Type__)).GetMethod("TryReadFieldHeader"));
      ctx.BranchIfTrue(label2, false);
      if (packedWireType !== $T07().None) {
        var label3 = ctx.DefineLabel();
        ctx.Branch(label3, false);
        ctx.MarkLabel(label);
        ctx.LoadReaderWriter();
        ctx.EmitCall((ctx.MapType($T1C().__Type__)).GetMethod("StartSubItem"));
        var label4 = ctx.DefineLabel();
        var label5 = ctx.DefineLabel();
        ctx.MarkLabel(label4);
        $S0C().CallVirtual("LoadValue", null, ctx, packedWireType.valueOf());
        ctx.LoadReaderWriter();
        ctx.EmitCall((ctx.MapType($T1C().__Type__)).GetMethod("HasSubValue"));
        ctx.BranchIfFalse(label5, false);
        $thisType.EmitReadAndAddItem(
          ctx, 
          list, 
          tail, 
          add, 
          castListForAdd
        );
        ctx.Branch(label4, false);
        ctx.MarkLabel(label5);
        ctx.LoadReaderWriter();
        ctx.EmitCall((ctx.MapType($T1C().__Type__)).GetMethod("EndSubItem"));
        ctx.MarkLabel(label3);
      }
    } finally {
      if (local !== null) {
        $IM01().Call(local, null);
      }
    }
  }; 

  function ListDecorator_EmitWrite (ctx, valueFrom) {
    var method = new JSIL.BoxedVariable(null);
    var methodInfo = new JSIL.BoxedVariable(null);
    var localWithValue = ctx.GetLocalWithValue(this.get_ExpectedType(), valueFrom);
    try {
      var enumeratorInfo = this.GetEnumeratorInfo(ctx.get_Model(), /* ref */ method, /* ref */ methodInfo);
      var returnType = enumeratorInfo.get_ReturnType();
      var writePacked = this.get_WritePacked();
      var local = $S04().Construct(ctx, returnType);
      try {
        var local2 = (
          writePacked
             ? $S04().Construct(ctx, ctx.MapType($T1D().__Type__))
             : null)
        ;
        try {
          if (writePacked) {
            $S0C().CallVirtual("LoadValue", null, ctx, this.fieldNumber);
            $S0C().CallVirtual("LoadValue", null, ctx, 2);
            ctx.LoadReaderWriter();
            ctx.EmitCall((ctx.MapType($T1E().__Type__)).GetMethod("WriteFieldHeader"));
            $S06().CallVirtual("LoadValue", null, ctx, localWithValue);
            ctx.LoadReaderWriter();
            ctx.EmitCall((ctx.MapType($T1E().__Type__)).GetMethod("StartSubItem"));
            $S05().CallVirtual("StoreValue", null, ctx, local2);
            $S0C().CallVirtual("LoadValue", null, ctx, this.fieldNumber);
            ctx.LoadReaderWriter();
            ctx.EmitCall((ctx.MapType($T1E().__Type__)).GetMethod("SetPackedField"));
          }
          ctx.LoadAddress(localWithValue, this.get_ExpectedType());
          ctx.EmitCall(enumeratorInfo, this.get_ExpectedType());
          $S05().CallVirtual("StoreValue", null, ctx, local);
          var disposable = ctx.Using(local);
          try {
            var label = ctx.DefineLabel();
            var label2 = ctx.DefineLabel();
            ctx.Branch(label2, false);
            ctx.MarkLabel(label);
            ctx.LoadAddress(local, returnType);
            ctx.EmitCall(methodInfo.get(), returnType);
            var expectedType = $IM00().Call(this.Tail, null);
            if (!(!$T03().op_Inequality(expectedType, ctx.MapType($T0F().__Type__)) || !$T03().op_Equality(
                  (methodInfo.get()).get_ReturnType(), 
                  ctx.MapType($T0F().__Type__)
                ))) {
              ctx.CastFromObject(expectedType);
            }
            $IM05().Call(this.Tail, null, ctx, null);
            ctx.MarkLabel(label2);
            ctx.LoadAddress(local, returnType);
            ctx.EmitCall(method.get(), returnType);
            ctx.BranchIfTrue(label, false);
          } finally {
            if (disposable !== null) {
              $IM01().Call(disposable, null);
            }
          }
          if (writePacked) {
            $S06().CallVirtual("LoadValue", null, ctx, local2);
            ctx.LoadReaderWriter();
            ctx.EmitCall((ctx.MapType($T1E().__Type__)).GetMethod("EndSubItem"));
          }
        } finally {
          if (local2 !== null) {
            $IM01().Call(local2, null);
          }
        }
      } finally {
        if (local !== null) {
          $IM01().Call(local, null);
        }
      }
    } finally {
      if (localWithValue !== null) {
        $IM01().Call(localWithValue, null);
      }
    }
  }; 

  function ListDecorator_get_AppendToCollection () {
    return (((this.options | 0) & 16) === 0);
  }; 

  function ListDecorator_get_ExpectedType () {
    return this.declaredType;
  }; 

  function ListDecorator_get_IsList () {
    return (((this.options | 0) & 1) > (0 >>> 0));
  }; 

  function ListDecorator_get_RequireAdd () {
    return true;
  }; 

  function ListDecorator_get_RequiresOldValue () {
    return this.get_AppendToCollection();
  }; 

  function ListDecorator_get_ReturnList () {
    return (((this.options | 0) & 8) > (0 >>> 0));
  }; 

  function ListDecorator_get_ReturnsValue () {
    return this.get_ReturnList();
  }; 

  function ListDecorator_get_SupportNull () {
    return (((this.options | 0) & 32) > (0 >>> 0));
  }; 

  function ListDecorator_get_SuppressIList () {
    return (((this.options | 0) & 2) > (0 >>> 0));
  }; 

  function ListDecorator_get_WritePacked () {
    return (((this.options | 0) & 4) > (0 >>> 0));
  }; 

  function ListDecorator_GetEnumeratorInfo (model, /* ref */ moveNext, /* ref */ current) {
    var type = null;
    var expectedType = this.get_ExpectedType();
    var instanceMethod = $T14().GetInstanceMethod(expectedType, "GetEnumerator", null);
    var expectedType2 = $IM00().Call(this.Tail, null);
    if ($T0E().op_Inequality(instanceMethod, null)) {
      var returnType = instanceMethod.get_ReturnType();
      var type2 = returnType;
      moveNext.set($T14().GetInstanceMethod(type2, "MoveNext", null));
      var property = $T14().GetProperty(type2, "Current", false);
      current.set((
          $T20().op_Equality(property, null)
             ? null
             : $T14().GetGetMethod(property, false, false))
      );
      if (!(!$T0E().op_Equality(moveNext.get(), null) || !$S08().CallVirtual("IsAssignableFrom", null, model.MapType($thisType.ienumeratorType), type2))) {
        moveNext.set($T14().GetInstanceMethod(model.MapType($thisType.ienumeratorType), "MoveNext", null));
      }
      if (!(!$T0E().op_Inequality(moveNext.get(), null) || 
          !$T03().op_Equality(
            (moveNext.get()).get_ReturnType(), 
            model.MapType($T06().__Type__)
          ) || 
          !$T0E().op_Inequality(current.get(), null) || !$T03().op_Equality((current.get()).get_ReturnType(), expectedType2))) {
        return instanceMethod;
      }
      current.set(null);
      moveNext.set(null);
    }
    var type3 = model.MapType($T21().__Type__, false);
    if ($T03().op_Inequality(type3, null)) {
      type3 = type3.MakeGenericType(JSIL.Array.New($T03(), [expectedType2]));
      type = type3;
    }
    if (!(!$T03().op_Inequality(type, null) || !$S08().CallVirtual("IsAssignableFrom", null, type, expectedType))) {
      instanceMethod = $T14().GetInstanceMethod(type, "GetEnumerator");
      returnType = instanceMethod.get_ReturnType();
      type2 = returnType;
      moveNext.set($T14().GetInstanceMethod(model.MapType($thisType.ienumeratorType), "MoveNext"));
      current.set($T14().GetGetMethod($T14().GetProperty(type2, "Current", false), false, false));
      return instanceMethod;
    }
    type = model.MapType($thisType.ienumerableType);
    instanceMethod = $T14().GetInstanceMethod(type, "GetEnumerator");
    returnType = instanceMethod.get_ReturnType();
    type2 = returnType;
    moveNext.set($T14().GetInstanceMethod(type2, "MoveNext"));
    current.set($T14().GetGetMethod($T14().GetProperty(type2, "Current", false), false, false));
    return instanceMethod;
  }; 

  function ListDecorator_Read (value, source, $exception) {
    try {
      var field = (source.get_FieldNumber() | 0);
      var obj = value;
      if (value === null) {
        value = $S0D().CallStatic($T23(), "CreateInstance", null, this.concreteType);
      }
      var flag = this.get_IsList() && 
      !this.get_SuppressIList();
      if (!((this.packedWireType === $T07().None) || (source.get_WireType() !== $T07().String))) {
        var token = $T1C().StartSubItem(source);
        if (flag) {
          var list = $T24().$Cast(value);

          while ($T1C().HasSubValue(this.packedWireType, source)) {
            $IM06().Call(list, null, $IM07().Call(this.Tail, null, null, source));
          }
        } else {
          var array = JSIL.Array.New($T0F(), 1);

          while ($T1C().HasSubValue(this.packedWireType, source)) {
            array[0] = $IM07().Call(this.Tail, null, null, source);
            (this.add).Invoke(value, array);
          }
        }
        $T1C().EndSubItem(token, source);
      } else if (flag) {
        var list2 = $T24().$Cast(value);

        do {
          $IM06().Call(list2, null, $IM07().Call(this.Tail, null, null, source));
        } while (source.TryReadFieldHeader(field));
      } else {
        var array2 = JSIL.Array.New($T0F(), 1);

        do {
          array2[0] = $IM07().Call(this.Tail, null, null, source);
          (this.add).Invoke(value, array2);
        } while (source.TryReadFieldHeader(field));
      }
      var result = (
        (obj === value)
           ? null
           : value)
      ;
    } catch ($exception) {
      if ($T26().$Is($exception)) {
        var ex = $exception;
        if (ex.get_InnerException() !== null) {
          throw ex.get_InnerException();
        }
        throw $exception;
      } else {
        throw $exception;
      }
    }
    return result;
  }; 

  function ListDecorator_Write (value, dest) {
    var writePacked = this.get_WritePacked();
    var flag = (writePacked & this.CanUsePackedPrefix(value)) && 
    $T27().$Is(value);
    if (writePacked) {
      $T1E().WriteFieldHeader(this.fieldNumber, $T07().String, dest);
      if (flag) {
        $T1E().WritePackedPrefix($IM08().Call($T27().$Cast(value), null), this.packedWireType, dest);
        var token = new ($T1D())();
      } else {
        token = $T1E().StartSubItem(value, dest);
      }
      $T1E().SetPackedField(this.fieldNumber, dest);
    } else {
      token = new ($T1D())();
    }
    var flag2 = !this.get_SupportNull();
    var enumerator = $IM09().Call($T01().$Cast(value), null);
    try {

      while ($IM0A().Call(enumerator, null)) {
        var current = $IM0B().Call(enumerator, null);
        if (!(!flag2 || (current !== null))) {
          throw $S0E().Construct();
        }
        $IM0C().Call(this.Tail, null, current, dest);
      }
    } finally {
      var disposable = $T17().$As(enumerator);
      if (disposable !== null) {
        $IM01().Call(disposable, null);
      }
    }
    if (writePacked) {
      if (flag) {
        $T1E().ClearPackedField(this.fieldNumber, dest);
        return;
      }
      $T1E().EndSubItem(token, dest);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.ListDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), 
          $.Int32, $.Boolean, 
          $asm08.TypeRef("ProtoBuf.WireType"), $.Boolean, 
          $.Boolean, $.Boolean
        ]), 
      ListDecorator__ctor
    );

    $.Method({Static:true , Public:false}, "CanPack", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.WireType")]), 
      ListDecorator_CanPack
    );

    $.Method({Static:false, Public:false}, "CanUsePackedPrefix", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      ListDecorator_CanUsePackedPrefix
    );

    $.Method({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), 
          $.Int32, $.Boolean, 
          $asm08.TypeRef("ProtoBuf.WireType"), $.Boolean, 
          $.Boolean, $.Boolean
        ]), 
      ListDecorator_Create
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      ListDecorator_EmitRead
    );

    $.Method({Static:true , Public:false}, "EmitReadAndAddItem", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local"), 
          $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $.Boolean
        ]), 
      ListDecorator_EmitReadAndAddItem
    );

    $.Method({Static:true , Public:false}, "EmitReadList", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local"), 
          $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm08.TypeRef("ProtoBuf.WireType"), $.Boolean
        ]), 
      ListDecorator_EmitReadList
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      ListDecorator_EmitWrite
    );

    $.Method({Static:false, Public:false}, "get_AppendToCollection", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_AppendToCollection
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      ListDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:false}, "get_IsList", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_IsList
    );

    $.Method({Static:false, Public:false, Virtual:true }, "get_RequireAdd", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_RequireAdd
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:false}, "get_ReturnList", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_ReturnList
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:false}, "get_SupportNull", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_SupportNull
    );

    $.Method({Static:false, Public:false}, "get_SuppressIList", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_SuppressIList
    );

    $.Method({Static:false, Public:false}, "get_WritePacked", 
      JSIL.MethodSignature.Return($.Boolean), 
      ListDecorator_get_WritePacked
    );

    $.Method({Static:false, Public:false}, "GetEnumeratorInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")])
        ]), 
      ListDecorator_GetEnumeratorInfo
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      ListDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      ListDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "options", $.Byte);

    $.Constant({Static:true , Public:false}, "OPTIONS_IsList", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "OPTIONS_SuppressIList", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "OPTIONS_WritePacked", $.Byte, 4);

    $.Constant({Static:true , Public:false}, "OPTIONS_ReturnList", $.Byte, 8);

    $.Constant({Static:true , Public:false}, "OPTIONS_OverwriteList", $.Byte, 16);

    $.Constant({Static:true , Public:false}, "OPTIONS_SupportNull", $.Byte, 32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "declaredType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "concreteType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "add", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "packedWireType", $asm08.TypeRef("ProtoBuf.WireType"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ienumeratorType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Collections.IEnumerator.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ienumerableType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Collections.IEnumerable.__Type__;
      });


    function ListDecorator__cctor () {
      $thisType.ienumeratorType = $T00().__Type__;
      $thisType.ienumerableType = $T01().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      ListDecorator__cctor
    );

    $.Property({Static:false, Public:false}, "IsList", $.Boolean);

    $.Property({Static:false, Public:false}, "SuppressIList", $.Boolean);

    $.Property({Static:false, Public:false}, "WritePacked", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportNull", $.Boolean);

    $.Property({Static:false, Public:false}, "ReturnList", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "RequireAdd", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:false}, "AppendToCollection", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.ImmutableCollectionDecorator */ 

(function ImmutableCollectionDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ListDecorator)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Reflection.PropertyInfo)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm07.System.Type))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Collections.Generic.KeyValuePair$b2)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.Char)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.MethodInfo))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.ParameterInfo))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.Collections.ICollection)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm07.System.Collections.IList)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.System.Collections.IEnumerable)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm08.ProtoBuf.SubItemToken)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.Collections.ICollection.get_Count)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm07.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm07.System.Collections.IEnumerator.get_Current)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };


  function ImmutableCollectionDecorator__ctor (model, declaredType, concreteType, tail, fieldNumber, writePacked, packedWireType, returnList, overwriteList, supportNull, builderFactory, add, addRange, finish) {
    $T07().prototype._ctor.call(this, 
      model, 
      declaredType, 
      concreteType, 
      tail, 
      fieldNumber, 
      writePacked, 
      packedWireType, 
      returnList, 
      overwriteList, 
      supportNull
    );
    this.builderFactory = builderFactory;
    this.add = add;
    this.addRange = addRange;
    this.finish = finish;
  }; 

  function ImmutableCollectionDecorator_EmitRead (ctx, valueFrom) {
    var method = new JSIL.BoxedVariable(null);
    var method2 = new JSIL.BoxedVariable(null);
    var local = (
      this.get_AppendToCollection()
         ? ctx.GetLocalWithValue(this.get_ExpectedType(), valueFrom)
         : null)
    ;
    try {
      var local2 = $S00().Construct(ctx, (this.builderFactory).get_ReturnType());
      try {
        ctx.EmitCall(this.builderFactory);
        $S01().CallVirtual("StoreValue", null, ctx, local2);
        if (this.get_AppendToCollection()) {
          var label = ctx.DefineLabel();
          if (!$T0C().IsValueType(this.get_ExpectedType())) {
            $S02().CallVirtual("LoadValue", null, ctx, local);
            ctx.BranchIfFalse(label, false);
          }
          var expectedType = this.get_ExpectedType();
          var property = $T0C().GetProperty(expectedType, "Length", false);
          if ($T0D().op_Equality(property, null)) {
            property = $T0C().GetProperty(expectedType, "Count", false);
          }
          if ($T0D().op_Equality(property, null)) {
            property = $T0C().GetProperty($thisType.ResolveIReadOnlyCollection(
                this.get_ExpectedType(), 
                $IM00().Call(this.Tail, null)
              ), "Count", false);
          }
          ctx.LoadAddress(local, local.get_Type());
          ctx.EmitCall($T0C().GetGetMethod(property, false, false));
          ctx.BranchIfFalse(label, false);
          var right = ctx.MapType($T0E().__Type__);
          if ($T06().op_Inequality(this.addRange, null)) {
            $S02().CallVirtual("LoadValue", null, ctx, local2);
            $S02().CallVirtual("LoadValue", null, ctx, local);
            ctx.EmitCall(this.addRange);
            if (!(!$T01().op_Inequality((this.addRange).get_ReturnType(), null) || !$T01().op_Inequality((this.add).get_ReturnType(), right))) {
              ctx.DiscardValue();
            }
          } else {
            var enumeratorInfo = this.GetEnumeratorInfo(ctx.get_Model(), /* ref */ method, /* ref */ method2);
            var returnType = enumeratorInfo.get_ReturnType();
            var local3 = $S00().Construct(ctx, returnType);
            try {
              ctx.LoadAddress(local, this.get_ExpectedType());
              ctx.EmitCall(enumeratorInfo);
              $S01().CallVirtual("StoreValue", null, ctx, local3);
              var disposable = ctx.Using(local3);
              try {
                var label2 = ctx.DefineLabel();
                var label3 = ctx.DefineLabel();
                ctx.Branch(label3, false);
                ctx.MarkLabel(label2);
                ctx.LoadAddress(local2, local2.get_Type());
                ctx.LoadAddress(local3, returnType);
                ctx.EmitCall(method2.get());
                ctx.EmitCall(this.add);
                if (!(!$T01().op_Inequality((this.add).get_ReturnType(), null) || !$T01().op_Inequality((this.add).get_ReturnType(), right))) {
                  ctx.DiscardValue();
                }
                ctx.MarkLabel(label3);
                ctx.LoadAddress(local3, returnType);
                ctx.EmitCall(method.get());
                ctx.BranchIfTrue(label2, false);
              } finally {
                if (disposable !== null) {
                  $IM01().Call(disposable, null);
                }
              }
            } finally {
              if (local3 !== null) {
                $IM01().Call(local3, null);
              }
            }
          }
          ctx.MarkLabel(label);
        }
        $T07().EmitReadList(
          ctx, 
          local2, 
          this.Tail, 
          this.add, 
          this.packedWireType, 
          false
        );
        ctx.LoadAddress(local2, local2.get_Type());
        ctx.EmitCall(this.finish);
        if ($T01().op_Inequality(
            this.get_ExpectedType(), 
            (this.finish).get_ReturnType()
          )) {
          ctx.Cast(this.get_ExpectedType());
        }
      } finally {
        if (local2 !== null) {
          $IM01().Call(local2, null);
        }
      }
    } finally {
      if (local !== null) {
        $IM01().Call(local, null);
      }
    }
  }; 

  function ImmutableCollectionDecorator_get_RequireAdd () {
    return false;
  }; 

  function ImmutableCollectionDecorator_IdentifyImmutable (model, declaredType, /* ref */ builderFactory, /* ref */ add, /* ref */ addRange, /* ref */ finish) {
    var methodInfo = null;
    finish.set(methodInfo = null);
    addRange.set(methodInfo = methodInfo);
    add.set(methodInfo = methodInfo);
    builderFactory.set(methodInfo);
    if (!((model !== null) && !$T01().op_Equality(declaredType, null))) {
      return false;
    }
    if (!declaredType.get_IsGenericType()) {
      return false;
    }
    var genericArguments = declaredType.GetGenericArguments();
    var num = (genericArguments.length | 0);
    if (num !== 1) {
      if (num !== 2) {
        return false;
      }
      var type = model.MapType($T11().__Type__);
      if ($T01().op_Equality(type, null)) {
        return false;
      }
      type = type.MakeGenericType(genericArguments);
      var array = JSIL.Array.New($T01(), [type]);
    } else {
      array = genericArguments;
    }
    if ($T01().op_Equality($thisType.ResolveIReadOnlyCollection(declaredType, null), null)) {
      return false;
    }
    var text = declaredType.get_Name();
    var num2 = (text.indexOf("`"));
    if (num2 <= 0) {
      return false;
    }
    text = (
      declaredType.get_IsInterface()
         ? text.substr(1, ((num2 - 1) | 0))
         : text.substr(0, num2))
    ;
    var type2 = model.GetType(
      (declaredType.get_Namespace() + "." + text), 
      declaredType.get_Assembly()
    );
    if (!(!$T01().op_Equality(type2, null) || !(text == "ImmutableSet"))) {
      type2 = model.GetType(
        JSIL.ConcatString(declaredType.get_Namespace(), ".ImmutableHashSet"), 
        declaredType.get_Assembly()
      );
    }
    if ($T01().op_Equality(type2, null)) {
      return false;
    }
    var methods = type2.GetMethods();

  $loop0: 
    for (var i = 0; i < (methods.length | 0); i = ((i + 1) | 0)) {
      var methodInfo2 = methods[i];
      if (!(!methodInfo2.get_IsStatic() || 
          (methodInfo2.get_Name() != "CreateBuilder") || 
          !methodInfo2.get_IsGenericMethodDefinition() || 
          ((methodInfo2.GetParameters().length | 0) !== 0) || ((methodInfo2.GetGenericArguments().length | 0) !== (genericArguments.length | 0)))) {
        builderFactory.set(methodInfo2.MakeGenericMethod(genericArguments));
        break $loop0;
      }
    }
    var right = model.MapType($T0E().__Type__);
    if (!(!$T06().op_Equality(builderFactory.get(), null) && 
        !$T01().op_Equality((builderFactory.get()).get_ReturnType(), null) && !$T01().op_Equality((builderFactory.get()).get_ReturnType(), right))) {
      return false;
    }
    add.set($T0C().GetInstanceMethod((builderFactory.get()).get_ReturnType(), "Add", array));
    if ($T06().op_Equality(add.get(), null)) {
      return false;
    }
    finish.set($T0C().GetInstanceMethod((builderFactory.get()).get_ReturnType(), "ToImmutable", $T0C().EmptyTypes));
    if (!(!$T06().op_Equality(finish.get(), null) && 
        !$T01().op_Equality((finish.get()).get_ReturnType(), null) && !$T01().op_Equality((finish.get()).get_ReturnType(), right))) {
      return false;
    }
    if (!($T01().op_Equality((finish.get()).get_ReturnType(), declaredType) || $T0C().IsAssignableFrom(declaredType, (finish.get()).get_ReturnType()))) {
      return false;
    }
    addRange.set($T0C().GetInstanceMethod((builderFactory.get()).get_ReturnType(), "AddRange", JSIL.Array.New($T01(), [declaredType])));
    if ($T06().op_Equality(addRange.get(), null)) {
      var type3 = model.MapType($T18().__Type__, false);
      if ($T01().op_Inequality(type3, null)) {
        addRange.set($T0C().GetInstanceMethod(
            (builderFactory.get()).get_ReturnType(), 
            "AddRange", 
            JSIL.Array.New($T01(), [type3.MakeGenericType(array)])
          ));
      }
    }
    return true;
  }; 

  function ImmutableCollectionDecorator_Read (value, source) {
    var obj = (this.builderFactory).Invoke(null, null);
    var fieldNumber = (source.get_FieldNumber() | 0);
    var array = JSIL.Array.New($T19(), 1);
    if (!(!this.get_AppendToCollection() || 
        (value === null) || (($IM02().Call($T1D().$Cast(value), null) | 0) === 0))) {
      if ($T06().op_Inequality(this.addRange, null)) {
        array[0] = value;
        (this.addRange).Invoke(obj, array);
      } else {
        var enumerator = $IM03().Call($T1D().$Cast(value), null);
        try {

          while ($IM04().Call(enumerator, null)) {
            var current = $IM05().Call(enumerator, null);
            array[0] = current;
            (this.add).Invoke(obj, array);
          }
        } finally {
          var disposable = $T0F().$As(enumerator);
          if (disposable !== null) {
            $IM01().Call(disposable, null);
          }
        }
      }
    }
    if (!((this.packedWireType === $T05().None) || (source.get_WireType() !== $T05().String))) {
      var token = $T1A().StartSubItem(source);

      while ($T1A().HasSubValue(this.packedWireType, source)) {
        array[0] = $IM06().Call(this.Tail, null, null, source);
        (this.add).Invoke(obj, array);
      }
      $T1A().EndSubItem(token, source);
    } else {

      do {
        array[0] = $IM06().Call(this.Tail, null, null, source);
        (this.add).Invoke(obj, array);
      } while (source.TryReadFieldHeader(fieldNumber));
    }
    return (this.finish).Invoke(obj, null);
  }; 

  function ImmutableCollectionDecorator_ResolveIReadOnlyCollection (declaredType, t) {
    var interfaces = declaredType.GetInterfaces();
    var i = 0;

  $loop0: 
    while (i < (interfaces.length | 0)) {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            var type = interfaces[i];
            if (!(!type.get_IsGenericType() || !(System.String.StartsWith(type.get_Name(), "IReadOnlyCollection`")))) {
              if ($T01().op_Inequality(t, null)) {
                var genericArguments = type.GetGenericArguments();
                if (((genericArguments.length | 0) !== 1) && $T01().op_Inequality(genericArguments[0], t)) {
                  $label0 = 1 /* goto IL_4C */ ;
                  continue $labelgroup0;
                }
              }
              return type;
            }

            $label0 = 1 /* goto IL_4C */ ;
            continue $labelgroup0;
          case 1: /* IL_4C */ 
            i = ((i + 1) | 0);

            break $labelgroup0;
        }
      }
    }
    return null;
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Serializers.ListDecorator"), 
      Name: "ProtoBuf.Serializers.ImmutableCollectionDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 14, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), 
          $.Int32, $.Boolean, 
          $asm08.TypeRef("ProtoBuf.WireType"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Reflection.MethodInfo")
        ]), 
      ImmutableCollectionDecorator__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      ImmutableCollectionDecorator_EmitRead
    );

    $.Method({Static:false, Public:false, Virtual:true }, "get_RequireAdd", 
      JSIL.MethodSignature.Return($.Boolean), 
      ImmutableCollectionDecorator_get_RequireAdd
    );

    $.Method({Static:true , Public:false}, "IdentifyImmutable", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")])
        ]), 
      ImmutableCollectionDecorator_IdentifyImmutable
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      ImmutableCollectionDecorator_Read
    );

    $.Method({Static:true , Public:false}, "ResolveIReadOnlyCollection", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")]), 
      ImmutableCollectionDecorator_ResolveIReadOnlyCollection
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "builderFactory", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "add", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "addRange", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "finish", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "RequireAdd", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.Int16Serializer */ 

(function Int16Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function Int16Serializer__ctor (model) {
  }; 

  function Int16Serializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function Int16Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadInt16", this.get_ExpectedType());
  }; 

  function Int16Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteInt16", valueFrom);
  }; 

  function Int16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function Int16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function Int16Serializer_Read (value, source) {
    return $T00().$Box(source.ReadInt16());
  }; 

  function Int16Serializer_Write (value, dest) {
    $T06().WriteInt16($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.Int16Serializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      Int16Serializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      Int16Serializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      Int16Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      Int16Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      Int16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      Int16Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      Int16Serializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      Int16Serializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Int16.__Type__;
      });


    function Int16Serializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Int16Serializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.Int32Serializer */ 

(function Int32Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function Int32Serializer__ctor (model) {
  }; 

  function Int32Serializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function Int32Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadInt32", this.get_ExpectedType());
  }; 

  function Int32Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteInt32", valueFrom);
  }; 

  function Int32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function Int32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function Int32Serializer_Read (value, source) {
    return $T00().$Box(source.ReadInt32());
  }; 

  function Int32Serializer_Write (value, dest) {
    $T06().WriteInt32($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.Int32Serializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      Int32Serializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      Int32Serializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      Int32Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      Int32Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      Int32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      Int32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      Int32Serializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      Int32Serializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Int32.__Type__;
      });


    function Int32Serializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Int32Serializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.Int64Serializer */ 

(function Int64Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function Int64Serializer__ctor (model) {
  }; 

  function Int64Serializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function Int64Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadInt64", this.get_ExpectedType());
  }; 

  function Int64Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteInt64", valueFrom);
  }; 

  function Int64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function Int64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function Int64Serializer_Read (value, source) {
    return source.ReadInt64();
  }; 

  function Int64Serializer_Write (value, dest) {
    $T06().WriteInt64($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.Int64Serializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      Int64Serializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      Int64Serializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      Int64Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      Int64Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      Int64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      Int64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      Int64Serializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      Int64Serializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Int64.__Type__;
      });


    function Int64Serializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Int64Serializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface ProtoBuf.Serializers.IProtoSerializer */ 

JSIL.MakeInterface(
  "ProtoBuf.Serializers.IProtoSerializer", false, [], function ($) {
    $.Method({}, "get_ExpectedType", JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")));
    $.Method({}, "Write", new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]));
    $.Method({}, "Read", new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]));
    $.Method({}, "get_RequiresOldValue", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_ReturnsValue", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "EmitWrite", new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]));
    $.Method({}, "EmitRead", new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]));
    $.Property({}, "ExpectedType");
    $.Property({}, "RequiresOldValue");
    $.Property({}, "ReturnsValue");
  }, []);

/* interface ProtoBuf.Serializers.IProtoTypeSerializer */ 

JSIL.MakeInterface(
  "ProtoBuf.Serializers.IProtoTypeSerializer", false, [], function ($) {
    $.Method({}, "HasCallbacks", new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]));
    $.Method({}, "CanCreateInstance", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "CreateInstance", new JSIL.MethodSignature($.Object, [$asm08.TypeRef("ProtoBuf.ProtoReader")]));
    $.Method({}, "Callback", new JSIL.MethodSignature(null, [
          $.Object, $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]));
    $.Method({}, "EmitCallback", new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local"), 
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")
        ]));
    $.Method({}, "EmitCreateInstance", JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.CompilerContext")));
  }, [$asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]);

/* interface ProtoBuf.Serializers.ISerializerProxy */ 

JSIL.MakeInterface(
  "ProtoBuf.Serializers.ISerializerProxy", false, [], function ($) {
    $.Method({}, "get_Serializer", JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")));
    $.Property({}, "Serializer");
  }, []);

/* class ProtoBuf.Serializers.MemberSpecifiedDecorator */ 

(function MemberSpecifiedDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitRead)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitWrite)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function MemberSpecifiedDecorator__ctor (getSpecified, setSpecified, tail) {
    $T02().prototype._ctor.call(this, tail);
    if (!(!$T00().op_Equality(getSpecified, null) || !$T00().op_Equality(setSpecified, null))) {
      throw $S00().Construct();
    }
    this.getSpecified = getSpecified;
    this.setSpecified = setSpecified;
  }; 

  function MemberSpecifiedDecorator_EmitRead (ctx, valueFrom) {
    if ($T00().op_Equality(this.setSpecified, null)) {
      $IM00().Call(this.Tail, null, ctx, valueFrom);
      return;
    }
    var localWithValue = ctx.GetLocalWithValue(this.get_ExpectedType(), valueFrom);
    try {
      $IM00().Call(this.Tail, null, ctx, localWithValue);
      ctx.LoadAddress(localWithValue, this.get_ExpectedType());
      $S01().CallVirtual("LoadValue", null, ctx, 1);
      ctx.EmitCall(this.setSpecified);
    } finally {
      if (localWithValue !== null) {
        $IM01().Call(localWithValue, null);
      }
    }
  }; 

  function MemberSpecifiedDecorator_EmitWrite (ctx, valueFrom) {
    if ($T00().op_Equality(this.getSpecified, null)) {
      $IM02().Call(this.Tail, null, ctx, valueFrom);
      return;
    }
    var localWithValue = ctx.GetLocalWithValue(this.get_ExpectedType(), valueFrom);
    try {
      ctx.LoadAddress(localWithValue, this.get_ExpectedType());
      ctx.EmitCall(this.getSpecified);
      var label = ctx.DefineLabel();
      ctx.BranchIfFalse(label, false);
      $IM02().Call(this.Tail, null, ctx, localWithValue);
      ctx.MarkLabel(label);
    } finally {
      if (localWithValue !== null) {
        $IM01().Call(localWithValue, null);
      }
    }
  }; 

  function MemberSpecifiedDecorator_get_ExpectedType () {
    return $IM03().Call(this.Tail, null);
  }; 

  function MemberSpecifiedDecorator_get_RequiresOldValue () {
    return $IM04().Call(this.Tail, null);
  }; 

  function MemberSpecifiedDecorator_get_ReturnsValue () {
    return $IM05().Call(this.Tail, null);
  }; 

  function MemberSpecifiedDecorator_Read (value, source) {
    var result = $IM06().Call(this.Tail, null, value, source);
    if ($T00().op_Inequality(this.setSpecified, null)) {
      (this.setSpecified).Invoke(value, JSIL.Array.New($T08(), [$T0B().$Box(true)]));
    }
    return result;
  }; 

  function MemberSpecifiedDecorator_Write (value, dest) {
    if (!(!$T00().op_Equality(this.getSpecified, null) && !$T0B().$Cast((this.getSpecified).Invoke(value, null)))) {
      $IM07().Call(this.Tail, null, value, dest);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.MemberSpecifiedDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
        ]), 
      MemberSpecifiedDecorator__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      MemberSpecifiedDecorator_EmitRead
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      MemberSpecifiedDecorator_EmitWrite
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      MemberSpecifiedDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      MemberSpecifiedDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      MemberSpecifiedDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      MemberSpecifiedDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      MemberSpecifiedDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "getSpecified", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "setSpecified", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.NetObjectSerializer */ 

(function NetObjectSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.BclHelpers_NetObjectOptions)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.BclHelpers)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")))) ();
  };


  function NetObjectSerializer__ctor (model, type, key, options) {
    var flag = $T03().$Cast(options & $T03().DynamicType) > $T03().None;
    this.key = ((
      flag
         ? -1
         : key)
     | 0);
    this.type = (
      flag
         ? model.MapType($T05().__Type__)
         : type)
    ;
    this.options = options;
  }; 

  function NetObjectSerializer_EmitRead (ctx, valueFrom) {
    $S00().CallVirtual("LoadValue", null, ctx, valueFrom);
    ctx.CastToObject(this.type);
    ctx.LoadReaderWriter();
    $S01().CallVirtual("LoadValue", null, ctx, ctx.MapMetaKeyToCompiledKey(this.key));
    if ($T01().op_Equality(this.type, ctx.MapType($T05().__Type__))) {
      ctx.LoadNullRef();
    } else {
      $S02().CallVirtual("LoadValue", null, ctx, this.type);
    }
    $S01().CallVirtual("LoadValue", null, ctx, (this.options).valueOf());
    ctx.EmitCall((ctx.MapType($T08().__Type__)).GetMethod("ReadNetObject"));
    ctx.CastFromObject(this.type);
  }; 

  function NetObjectSerializer_EmitWrite (ctx, valueFrom) {
    $S00().CallVirtual("LoadValue", null, ctx, valueFrom);
    ctx.CastToObject(this.type);
    ctx.LoadReaderWriter();
    $S01().CallVirtual("LoadValue", null, ctx, ctx.MapMetaKeyToCompiledKey(this.key));
    $S01().CallVirtual("LoadValue", null, ctx, (this.options).valueOf());
    ctx.EmitCall((ctx.MapType($T08().__Type__)).GetMethod("WriteNetObject"));
  }; 

  function NetObjectSerializer_get_ExpectedType () {
    return this.type;
  }; 

  function NetObjectSerializer_get_RequiresOldValue () {
    return true;
  }; 

  function NetObjectSerializer_get_ReturnsValue () {
    return true;
  }; 

  function NetObjectSerializer_Read (value, source) {
    return $T08().ReadNetObject(
      value, 
      source, 
      this.key, 
      (
        $T01().op_Equality(this.type, $T05().__Type__)
           ? null
           : this.type)
      , 
      this.options
    );
  }; 

  function NetObjectSerializer_Write (value, dest) {
    $T08().WriteNetObject(value, dest, this.key, this.options);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.NetObjectSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.BclHelpers+NetObjectOptions")
        ]), 
      NetObjectSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      NetObjectSerializer_EmitRead
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      NetObjectSerializer_EmitWrite
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      NetObjectSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      NetObjectSerializer_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      NetObjectSerializer_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      NetObjectSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      NetObjectSerializer_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "key", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "options", $asm08.TypeRef("ProtoBuf.BclHelpers+NetObjectOptions"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.NullDecorator */ 

(function NullDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Nullable$b1)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.SubItemToken)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Reflection.MethodInfo, [$asm07.System.String, System.Array.Of($asm07.System.Type)]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.PropertyInfo")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitRead)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitWrite)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function NullDecorator__ctor (model, tail) {
    $T02().prototype._ctor.call(this, tail);
    if (!$IM00().Call(tail, null)) {
      throw $S00().Construct("NullDecorator only supports implementations that return values");
    }
    var type = $IM01().Call(tail, null);
    if ($T05().IsValueType(type)) {
      this.expectedType = (model.MapType($T06().__Type__)).MakeGenericType(JSIL.Array.New($T04(), [type]));
      return;
    }
    this.expectedType = type;
  }; 

  function NullDecorator_EmitRead (ctx, valueFrom) {
    var localWithValue = ctx.GetLocalWithValue(this.expectedType, valueFrom);
    try {
      var local = $S01().Construct(ctx, ctx.MapType($T09().__Type__));
      try {
        var local2 = $S01().Construct(ctx, ctx.MapType($T0A().__Type__));
        try {
          ctx.LoadReaderWriter();
          ctx.EmitCall((ctx.MapType($T0B().__Type__)).GetMethod("StartSubItem"));
          $S02().CallVirtual("StoreValue", null, ctx, local);
          var label = ctx.DefineLabel();
          var label2 = ctx.DefineLabel();
          var label3 = ctx.DefineLabel();
          ctx.MarkLabel(label);
          ctx.EmitBasicRead("ReadFieldHeader", ctx.MapType($T0A().__Type__));
          ctx.CopyValue();
          $S02().CallVirtual("StoreValue", null, ctx, local2);
          $S03().CallVirtual("LoadValue", null, ctx, 1);
          ctx.BranchIfEqual(label2, true);
          $S04().CallVirtual("LoadValue", null, ctx, local2);
          $S03().CallVirtual("LoadValue", null, ctx, 1);
          ctx.BranchIfLess(label3, false);
          ctx.LoadReaderWriter();
          ctx.EmitCall((ctx.MapType($T0B().__Type__)).GetMethod("SkipField"));
          ctx.Branch(label, true);
          ctx.MarkLabel(label2);
          if ($IM02().Call(this.Tail, null)) {
            if ($T05().IsValueType(this.expectedType)) {
              ctx.LoadAddress(localWithValue, this.expectedType);
              ctx.EmitCall($S05().CallVirtual("GetMethod", null, this.expectedType, "GetValueOrDefault", $T05().EmptyTypes));
            } else {
              $S04().CallVirtual("LoadValue", null, ctx, localWithValue);
            }
          }
          $IM03().Call(this.Tail, null, ctx, null);
          if ($T05().IsValueType(this.expectedType)) {
            ctx.EmitCtor(this.expectedType, JSIL.Array.New($T04(), [$IM01().Call(this.Tail, null)]));
          }
          $S02().CallVirtual("StoreValue", null, ctx, localWithValue);
          ctx.Branch(label, false);
          ctx.MarkLabel(label3);
          $S04().CallVirtual("LoadValue", null, ctx, local);
          ctx.LoadReaderWriter();
          ctx.EmitCall((ctx.MapType($T0B().__Type__)).GetMethod("EndSubItem"));
          $S04().CallVirtual("LoadValue", null, ctx, localWithValue);
        } finally {
          if (local2 !== null) {
            $IM04().Call(local2, null);
          }
        }
      } finally {
        if (local !== null) {
          $IM04().Call(local, null);
        }
      }
    } finally {
      if (localWithValue !== null) {
        $IM04().Call(localWithValue, null);
      }
    }
  }; 

  function NullDecorator_EmitWrite (ctx, valueFrom) {
    var localWithValue = ctx.GetLocalWithValue(this.expectedType, valueFrom);
    try {
      var local = $S01().Construct(ctx, ctx.MapType($T09().__Type__));
      try {
        ctx.LoadNullRef();
        ctx.LoadReaderWriter();
        ctx.EmitCall((ctx.MapType($T0E().__Type__)).GetMethod("StartSubItem"));
        $S02().CallVirtual("StoreValue", null, ctx, local);
        if ($T05().IsValueType(this.expectedType)) {
          ctx.LoadAddress(localWithValue, this.expectedType);
          $S06().CallVirtual("LoadValue", null, ctx, (this.expectedType).GetProperty("HasValue"));
        } else {
          $S04().CallVirtual("LoadValue", null, ctx, localWithValue);
        }
        var label = ctx.DefineLabel();
        ctx.BranchIfFalse(label, false);
        if ($T05().IsValueType(this.expectedType)) {
          ctx.LoadAddress(localWithValue, this.expectedType);
          ctx.EmitCall($S05().CallVirtual("GetMethod", null, this.expectedType, "GetValueOrDefault", $T05().EmptyTypes));
        } else {
          $S04().CallVirtual("LoadValue", null, ctx, localWithValue);
        }
        $IM05().Call(this.Tail, null, ctx, null);
        ctx.MarkLabel(label);
        $S04().CallVirtual("LoadValue", null, ctx, local);
        ctx.LoadReaderWriter();
        ctx.EmitCall((ctx.MapType($T0E().__Type__)).GetMethod("EndSubItem"));
      } finally {
        if (local !== null) {
          $IM04().Call(local, null);
        }
      }
    } finally {
      if (localWithValue !== null) {
        $IM04().Call(localWithValue, null);
      }
    }
  }; 

  function NullDecorator_get_ExpectedType () {
    return this.expectedType;
  }; 

  function NullDecorator_get_RequiresOldValue () {
    return true;
  }; 

  function NullDecorator_get_ReturnsValue () {
    return true;
  }; 

  function NullDecorator_Read (value, source) {
    var num = 0;
    var token = $T0B().StartSubItem(source);

    while ((num = (source.ReadFieldHeader() | 0)) > 0) {
      if (num === 1) {
        value = $IM06().Call(this.Tail, null, value, source);
      } else {
        source.SkipField();
      }
    }
    $T0B().EndSubItem(token, source);
    return value;
  }; 

  function NullDecorator_Write (value, dest) {
    var token = $T0E().StartSubItem(null, dest);
    if (value !== null) {
      $IM07().Call(this.Tail, null, value, dest);
    }
    $T0E().EndSubItem(token, dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.NullDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]), 
      NullDecorator__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      NullDecorator_EmitRead
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      NullDecorator_EmitWrite
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      NullDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      NullDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      NullDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      NullDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      NullDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"));

    $.Constant({Static:true , Public:true }, "Tag", $.Int32, 1);

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.ParseableSerializer */ 

(function ParseableSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Reflection.BindingFlags)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };


  function ParseableSerializer__ctor (parse) {
    this.parse = parse;
  }; 

  function ParseableSerializer_get_ExpectedType () {
    return (this.parse).get_DeclaringType();
  }; 

  function ParseableSerializer_GetCustomToString (type) {
    return type.GetMethod(
      "ToString", 
      $T03().$Flags("DeclaredOnly", "Instance", "Public"), 
      null, 
      $T04().EmptyTypes, 
      null
    );
  }; 

  function ParseableSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadString", ctx.MapType($T07().__Type__));
    ctx.EmitCall(this.parse);
  }; 

  function ParseableSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var expectedType = this.get_ExpectedType();
          if ($T04().IsValueType(expectedType)) {
            var localWithValue = ctx.GetLocalWithValue(expectedType, valueFrom);
            try {
              ctx.LoadAddress(localWithValue, expectedType);
              ctx.EmitCall($thisType.GetCustomToString(expectedType));
              break $labelgroup0;
            } finally {
              if (localWithValue !== null) {
                $IM00().Call(localWithValue, null);
              }
            }
          }
          ctx.EmitCall((ctx.MapType($T09().__Type__)).GetMethod("ToString"));
          break $labelgroup0;

      }
    }
    /* Original label IL_58 */ 
    ctx.EmitBasicWrite("WriteString", valueFrom);
  }; 

  function ParseableSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function ParseableSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function ParseableSerializer_Read (value, source) {
    return (this.parse).Invoke(null, JSIL.Array.New($T09(), [source.ReadString()]));
  }; 

  function ParseableSerializer_TryCreate (type, model) {
    if ($T02().op_Equality(type, null)) {
      throw $S00().Construct("type");
    }
    var method = type.GetMethod(
      "Parse", 
      $T03().$Flags("DeclaredOnly", "Public", "Static"), 
      null, 
      JSIL.Array.New($T02(), [model.MapType($T07().__Type__)]), 
      null
    );
    if (!(!$T00().op_Inequality(method, null) || !$T02().op_Equality(method.get_ReturnType(), type))) {
      if ($T04().IsValueType(type)) {
        var customToString = $thisType.GetCustomToString(type);
        if (!(!$T00().op_Equality(customToString, null) && !$T02().op_Inequality(
              customToString.get_ReturnType(), 
              model.MapType($T07().__Type__)
            ))) {
          return null;
        }
      }
      return new $thisType(method);
    }
    return null;
  }; 

  function ParseableSerializer_Write (value, dest) {
    $T0E().WriteString(value.toString(), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.ParseableSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo")), 
      ParseableSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      ParseableSerializer_get_ExpectedType
    );

    $.Method({Static:true , Public:false}, "GetCustomToString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Type")]), 
      ParseableSerializer_GetCustomToString
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      ParseableSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      ParseableSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ParseableSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      ParseableSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      ParseableSerializer_Read
    );

    $.Method({Static:true , Public:true }, "TryCreate", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel")]), 
      ParseableSerializer_TryCreate
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      ParseableSerializer_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "parse", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.PropertyDecorator */ 

(function PropertyDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Reflection.PropertyInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Reflection.FieldInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.PropertyInfo")))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.PropertyInfo")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function PropertyDecorator__ctor (model, forType, property, tail) {
    $T04().prototype._ctor.call(this, tail);
    this.forType = forType;
    this.property = property;
    $thisType.SanityCheck(
      model, 
      property, 
      tail, 
      /* ref */ new JSIL.MemberReference(this, "readOptionsWriteValue"), 
      true, 
      true
    );
    this.shadowSetter = $thisType.GetShadowSetter(model, property);
  }; 

  function PropertyDecorator_CanWrite (model, member) {
    if ($T05().op_Equality(member, null)) {
      throw $S00().Construct("member");
    }
    var propertyInfo = $T02().$As(member);
    if ($T02().op_Inequality(propertyInfo, null)) {
      return (propertyInfo.get_CanWrite() || $T07().op_Inequality($thisType.GetShadowSetter(model, propertyInfo), null));
    }
    return $T08().$Is(member);
  }; 

  function PropertyDecorator_EmitRead (ctx, valueFrom) {
    var flag = new JSIL.BoxedVariable(false);
    $thisType.SanityCheck(
      ctx.get_Model(), 
      this.property, 
      this.Tail, 
      /* ref */ flag, 
      ctx.get_NonPublic(), 
      ctx.AllowInternal(this.property)
    );
    if (!(!$T0C().IsValueType(this.get_ExpectedType()) || (valueFrom !== null))) {
      throw $S01().Construct("Attempt to mutate struct on the head of the stack; changes would be lost");
    }
    var localWithValue = ctx.GetLocalWithValue(this.get_ExpectedType(), valueFrom);
    try {
      if ($IM00().Call(this.Tail, null)) {
        ctx.LoadAddress(localWithValue, this.get_ExpectedType());
        $S02().CallVirtual("LoadValue", null, ctx, this.property);
      }
      var propertyType = (this.property).get_PropertyType();
      ctx.ReadNullCheckedTail(propertyType, this.Tail, null);
      if (flag.get()) {
        var local = $S03().Construct(ctx, (this.property).get_PropertyType());
        try {
          $S04().CallVirtual("StoreValue", null, ctx, local);
          var label = new ($T0E())();
          if (!$T0C().IsValueType(propertyType)) {
            label = ctx.DefineLabel();
            $S05().CallVirtual("LoadValue", null, ctx, local);
            ctx.BranchIfFalse(label, true);
          }
          ctx.LoadAddress(localWithValue, this.get_ExpectedType());
          $S05().CallVirtual("LoadValue", null, ctx, local);
          if ($T07().op_Equality(this.shadowSetter, null)) {
            $S06().CallVirtual("StoreValue", null, ctx, this.property);
          } else {
            ctx.EmitCall(this.shadowSetter);
          }
          if (!$T0C().IsValueType(propertyType)) {
            ctx.MarkLabel(label);
          }
          return;
        } finally {
          if (local !== null) {
            $IM01().Call(local, null);
          }
        }
      }
      if ($IM02().Call(this.Tail, null)) {
        ctx.DiscardValue();
      }
    } finally {
      if (localWithValue !== null) {
        $IM01().Call(localWithValue, null);
      }
    }
  }; 

  function PropertyDecorator_EmitWrite (ctx, valueFrom) {
    ctx.LoadAddress(valueFrom, this.get_ExpectedType());
    $S02().CallVirtual("LoadValue", null, ctx, this.property);
    ctx.WriteNullCheckedTail((this.property).get_PropertyType(), this.Tail, null);
  }; 

  function PropertyDecorator_get_ExpectedType () {
    return this.forType;
  }; 

  function PropertyDecorator_get_RequiresOldValue () {
    return true;
  }; 

  function PropertyDecorator_get_ReturnsValue () {
    return false;
  }; 

  function PropertyDecorator_GetShadowSetter (model, property) {
    var reflectedType = property.get_ReflectedType();
    var instanceMethod = $T0C().GetInstanceMethod(
      reflectedType, 
      JSIL.ConcatString("Set", property.get_Name()), 
      JSIL.Array.New($T01(), [property.get_PropertyType()])
    );
    if (!(!$T07().op_Equality(instanceMethod, null) && 
        instanceMethod.get_IsPublic() && !$T01().op_Inequality(
          instanceMethod.get_ReturnType(), 
          model.MapType($T12().__Type__)
        ))) {
      return null;
    }
    return instanceMethod;
  }; 

  function PropertyDecorator_Read (value, source) {
    var value2 = (
      $IM00().Call(this.Tail, null)
         ? (this.property).GetValue(value, null)
         : null)
    ;
    var obj = $IM03().Call(this.Tail, null, value2, source);
    if (!(!this.readOptionsWriteValue || (obj === null))) {
      if ($T07().op_Equality(this.shadowSetter, null)) {
        (this.property).SetValue(value, obj, null);
      } else {
        (this.shadowSetter).Invoke(value, JSIL.Array.New($T13(), [obj]));
      }
    }
    return null;
  }; 

  function PropertyDecorator_SanityCheck (model, property, tail, /* ref */ writeValue, nonPublic, allowInternal) {
    if ($T02().op_Equality(property, null)) {
      throw $S00().Construct("property");
    }
    writeValue.set($IM02().Call(tail, null) && 
      ($T07().op_Inequality($thisType.GetShadowSetter(model, property), null) || 
        (property.get_CanWrite() && 
          $T07().op_Inequality($T0C().GetSetMethod(property, nonPublic, allowInternal), null))));
    if (!(property.get_CanRead() && !$T07().op_Equality($T0C().GetGetMethod(property, nonPublic, allowInternal), null))) {
      throw $S01().Construct("Cannot serialize property without a get accessor");
    }
    if (!(writeValue.get() || ($IM00().Call(tail, null) && 
          !$T0C().IsValueType($IM04().Call(tail, null))))) {
      throw $S01().Construct(("Cannot apply changes to property " + (property.get_DeclaringType()).get_FullName() + "." + property.get_Name()));
    }
  }; 

  function PropertyDecorator_Write (value, dest) {
    value = (this.property).GetValue(value, null);
    if (value !== null) {
      $IM05().Call(this.Tail, null, value, dest);
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.PropertyDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Reflection.PropertyInfo"), $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
        ]), 
      PropertyDecorator__ctor
    );

    $.Method({Static:true , Public:false}, "CanWrite", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Reflection.MemberInfo")]), 
      PropertyDecorator_CanWrite
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      PropertyDecorator_EmitRead
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      PropertyDecorator_EmitWrite
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      PropertyDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      PropertyDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      PropertyDecorator_get_ReturnsValue
    );

    $.Method({Static:true , Public:false}, "GetShadowSetter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Reflection.PropertyInfo")]), 
      PropertyDecorator_GetShadowSetter
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      PropertyDecorator_Read
    );

    $.Method({Static:true , Public:false}, "SanityCheck", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Reflection.PropertyInfo"), 
          $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean, $.Boolean
        ]), 
      PropertyDecorator_SanityCheck
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      PropertyDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "property", $asm07.TypeRef("System.Reflection.PropertyInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "forType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "readOptionsWriteValue", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "shadowSetter", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.SByteSerializer */ 

(function SByteSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.SByte)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function SByteSerializer__ctor (model) {
  }; 

  function SByteSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function SByteSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadSByte", this.get_ExpectedType());
  }; 

  function SByteSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteSByte", valueFrom);
  }; 

  function SByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function SByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function SByteSerializer_Read (value, source) {
    return $T00().$Box(source.ReadSByte());
  }; 

  function SByteSerializer_Write (value, dest) {
    $T06().WriteSByte($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.SByteSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      SByteSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      SByteSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      SByteSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      SByteSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SByteSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      SByteSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      SByteSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.SByte.__Type__;
      });


    function SByteSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SByteSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.SingleSerializer */ 

(function SingleSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function SingleSerializer__ctor (model) {
  }; 

  function SingleSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function SingleSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadSingle", this.get_ExpectedType());
  }; 

  function SingleSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteSingle", valueFrom);
  }; 

  function SingleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function SingleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function SingleSerializer_Read (value, source) {
    return $T00().$Box(source.ReadSingle());
  }; 

  function SingleSerializer_Write (value, dest) {
    $T06().WriteSingle($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.SingleSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      SingleSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      SingleSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      SingleSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      SingleSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SingleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SingleSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      SingleSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      SingleSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Single.__Type__;
      });


    function SingleSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SingleSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.StringSerializer */ 

(function StringSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function StringSerializer__ctor (model) {
  }; 

  function StringSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function StringSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadString", this.get_ExpectedType());
  }; 

  function StringSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteString", valueFrom);
  }; 

  function StringSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function StringSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function StringSerializer_Read (value, source) {
    return source.ReadString();
  }; 

  function StringSerializer_Write (value, dest) {
    $T06().WriteString($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.StringSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      StringSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      StringSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      StringSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      StringSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      StringSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      StringSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      StringSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      StringSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.String.__Type__;
      });


    function StringSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      StringSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.SubItemSerializer */ 

(function SubItemSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ISerializerProxy)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Reflection.Emit.MethodBuilder)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.SubItemToken)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm07.System.Type))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel_CallbackType)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.Callback)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ISerializerProxy.get_Serializer)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.EmitCallback)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks)) ();
  };


  function SubItemSerializer__ctor (type, key, proxy, recursionCheck) {
    if ($T00().op_Equality(type, null)) {
      throw $S00().Construct("type");
    }
    if (proxy === null) {
      throw $S00().Construct("proxy");
    }
    this.type = type;
    this.proxy = proxy;
    this.key = (key | 0);
    this.recursionCheck = recursionCheck;
  }; 

  function SubItemSerializer_EmitDedicatedMethod (ctx, valueFrom, read) {
    var dedicatedMethod = ctx.GetDedicatedMethod(this.key, read);
    if ($T08().op_Equality(dedicatedMethod, null)) {
      return false;
    }
    var local = $S01().Construct(ctx, ctx.MapType($T09().__Type__));
    try {
      var type = ctx.MapType((
          read
             ? $T0A().__Type__
             : $T0B().__Type__)
      );
      $S02().CallVirtual("LoadValue", null, ctx, valueFrom);
      if (!read) {
        if (!(!$T0C().IsValueType(this.type) && this.recursionCheck)) {
          ctx.LoadNullRef();
        } else {
          ctx.CopyValue();
        }
      }
      ctx.LoadReaderWriter();
      var arg_B6_0 = type;
      if (!read) {
        var expr_93 = JSIL.Array.New($T00(), 2);
        expr_93[0] = ctx.MapType($T0E().__Type__);
        var arg_B6_2 = expr_93;
        expr_93[1] = type;
      } else {
        (arg_B6_2 = JSIL.Array.New($T00(), 1))[0] = type;
      }
      ctx.EmitCall($T0C().GetStaticMethod(arg_B6_0, "StartSubItem", arg_B6_2));
      $S03().CallVirtual("StoreValue", null, ctx, local);
      ctx.LoadReaderWriter();
      ctx.EmitCall(dedicatedMethod);
      if (!(!read || !$T00().op_Inequality(this.type, dedicatedMethod.get_ReturnType()))) {
        ctx.Cast(this.type);
      }
      $S02().CallVirtual("LoadValue", null, ctx, local);
      ctx.LoadReaderWriter();
      ctx.EmitCall($T0C().GetStaticMethod(type, "EndSubItem", JSIL.Array.New($T00(), [ctx.MapType($T09().__Type__), type])));
    } finally {
      if (local !== null) {
        $IM00().Call(local, null);
      }
    }
    return true;
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    if (!this.EmitDedicatedMethod(ctx, valueFrom, true)) {
      $S02().CallVirtual("LoadValue", null, ctx, valueFrom);
      if ($T0C().IsValueType(this.type)) {
        ctx.CastToObject(this.type);
      }
      $S04().CallVirtual("LoadValue", null, ctx, ctx.MapMetaKeyToCompiledKey(this.key));
      ctx.LoadReaderWriter();
      ctx.EmitCall($T0C().GetStaticMethod(ctx.MapType($T0A().__Type__), "ReadObject"));
      ctx.CastFromObject(this.type);
    }
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    if (!this.EmitDedicatedMethod(ctx, valueFrom, false)) {
      $S02().CallVirtual("LoadValue", null, ctx, valueFrom);
      if ($T0C().IsValueType(this.type)) {
        ctx.CastToObject(this.type);
      }
      $S04().CallVirtual("LoadValue", null, ctx, ctx.MapMetaKeyToCompiledKey(this.key));
      ctx.LoadReaderWriter();
      ctx.EmitCall($T0C().GetStaticMethod(
          ctx.MapType($T0B().__Type__), 
          (
            this.recursionCheck
               ? "WriteObject"
               : "WriteRecursionSafeObject")
          , 
          JSIL.Array.New($T00(), [ctx.MapType($T0E().__Type__), ctx.MapType($T01().__Type__), ctx.MapType($T0B().__Type__)])
        ));
    }
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ExpectedType () {
    return this.type;
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return true;
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_Read (value, source) {
    return $T0A().ReadObject(value, this.key, source);
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_Write (value, dest) {
    if (this.recursionCheck) {
      $T0B().WriteObject(value, this.key, dest);
      return;
    }
    $T0B().WriteRecursionSafeObject(value, this.key, dest);
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_Callback (value, callbackType, context) {
    $IM01().Call($T12().$Cast($IM02().Call(this.proxy, null)), null, value, callbackType, context);
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance () {
    return $IM03().Call($T12().$Cast($IM02().Call(this.proxy, null)), null);
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance (source) {
    return $IM04().Call($T12().$Cast($IM02().Call(this.proxy, null)), null, source);
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCallback (ctx, valueFrom, callbackType) {
    $IM05().Call($T12().$Cast($IM02().Call(this.proxy, null)), null, ctx, valueFrom, callbackType);
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCreateInstance (ctx) {
    $IM06().Call($T12().$Cast($IM02().Call(this.proxy, null)), null, ctx);
  }; 

  function SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_HasCallbacks (callbackType) {
    return $IM07().Call($T12().$Cast($IM02().Call(this.proxy, null)), null, callbackType);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.SubItemSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.Serializers.ISerializerProxy"), $.Boolean
        ]), 
      SubItemSerializer__ctor
    );

    $.Method({Static:false, Public:false}, "EmitDedicatedMethod", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local"), 
          $.Boolean
        ]), 
      SubItemSerializer_EmitDedicatedMethod
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ExpectedType
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ExpectedType");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_Read
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "Read");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoSerializer_Write
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "Write");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.Callback", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_Callback
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "Callback");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance", 
      JSIL.MethodSignature.Return($.Boolean), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CanCreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.EmitCallback", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local"), 
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")
        ]), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCallback
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "EmitCallback");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.CompilerContext")), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "EmitCreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]), 
      SubItemSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_HasCallbacks
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "HasCallbacks");

    $.Field({Static:false, Public:false, ReadOnly:true }, "key", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "proxy", $asm08.TypeRef("ProtoBuf.Serializers.ISerializerProxy"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "recursionCheck", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), 
      /* 1 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.SurrogateSerializer */ 

(function SurrogateSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.MethodInfo))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Reflection.BindingFlags)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.ParameterInfo))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Reflection.ParameterInfo)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm08.ProtoBuf.ProtoConverterAttribute)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel_CallbackType)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitRead)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitWrite)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function SurrogateSerializer__ctor (model, forType, declaredType, rootTail) {
    this.forType = forType;
    this.declaredType = declaredType;
    this.rootTail = rootTail;
    this.toTail = this.GetConversion(model, true);
    this.fromTail = this.GetConversion(model, false);
  }; 

  function SurrogateSerializer_get_ExpectedType () {
    return this.forType;
  }; 

  function SurrogateSerializer_get_RequiresOldValue () {
    return true;
  }; 

  function SurrogateSerializer_get_ReturnsValue () {
    return false;
  }; 

  function SurrogateSerializer_GetConversion (model, toTail) {
    var result = new JSIL.BoxedVariable(null);
    var to = (
      toTail
         ? this.declaredType
         : this.forType)
    ;
    var from = (
      toTail
         ? this.forType
         : this.declaredType)
    ;
    if (!(!$thisType.HasCast(
          model, 
          this.declaredType, 
          from, 
          to, 
          /* ref */ result
        ) && !$thisType.HasCast(
          model, 
          this.forType, 
          from, 
          to, 
          /* ref */ result
        ))) {
      return result.get();
    }
    throw $S00().Construct(("No suitable conversion operator found for surrogate: " + (this.forType).get_FullName() + " / " + (this.declaredType).get_FullName()));
  }; 

  function SurrogateSerializer_HasCast (model, type, from, to, /* ref */ op) {
    var methods = type.GetMethods($T08().$Flags("NonPublic", "Public", "Static"));
    var type2 = null;

  $loop0: 
    for (var i = 0; i < (methods.length | 0); i = ((i + 1) | 0)) {
      var methodInfo = methods[i];
      if (!$T01().op_Inequality(methodInfo.get_ReturnType(), to)) {
        var parameters = methodInfo.GetParameters();
        if (!(((parameters.length | 0) !== 1) || !$T01().op_Equality((parameters[0]).get_ParameterType(), from))) {
          if ($T01().op_Equality(type2, null)) {
            type2 = model.MapType($T0D().__Type__, false);
            if ($T01().op_Equality(type2, null)) {
              break $loop0;
            }
          }
          if (methodInfo.IsDefined(type2, true)) {
            op.set(methodInfo);
            return true;
          }
        }
      }
    }

    for (var j = 0; j < (methods.length | 0); j = ((j + 1) | 0)) {
      var methodInfo2 = methods[j];
      if (!(((methodInfo2.get_Name() != "op_Implicit") && 
            (methodInfo2.get_Name() != "op_Explicit")) || $T01().op_Inequality(methodInfo2.get_ReturnType(), to))) {
        parameters = methodInfo2.GetParameters();
        if (!(((parameters.length | 0) !== 1) || !$T01().op_Equality((parameters[0]).get_ParameterType(), from))) {
          op.set(methodInfo2);
          return true;
        }
      }
    }
    op.set(null);
    return false;
  }; 

  function SurrogateSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    var local = $S01().Construct(ctx, this.declaredType);
    try {
      $S02().CallVirtual("LoadValue", null, ctx, valueFrom);
      ctx.EmitCall(this.toTail);
      $S03().CallVirtual("StoreValue", null, ctx, local);
      $IM00().Call(this.rootTail, null, ctx, local);
      $S02().CallVirtual("LoadValue", null, ctx, local);
      ctx.EmitCall(this.fromTail);
      $S03().CallVirtual("StoreValue", null, ctx, valueFrom);
    } finally {
      if (local !== null) {
        $IM01().Call(local, null);
      }
    }
  }; 

  function SurrogateSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    $S02().CallVirtual("LoadValue", null, ctx, valueFrom);
    ctx.EmitCall(this.toTail);
    $IM02().Call(this.rootTail, null, ctx, null);
  }; 

  function SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_Callback (value, callbackType, context) {
  }; 

  function SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance () {
    return false;
  }; 

  function SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance (source) {
    throw $S04().Construct();
  }; 

  function SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCallback (ctx, valueFrom, callbackType) {
  }; 

  function SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCreateInstance (ctx) {
    throw $S04().Construct();
  }; 

  function SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_HasCallbacks (callbackType) {
    return false;
  }; 

  function SurrogateSerializer_Read (value, source) {
    var array = JSIL.Array.New($T13(), [value]);
    value = (this.toTail).Invoke(null, array);
    array[0] = $IM03().Call(this.rootTail, null, value, source);
    return (this.fromTail).Invoke(null, array);
  }; 

  function SurrogateSerializer_Write (value, writer) {
    $IM04().Call(this.rootTail, null, (this.toTail).Invoke(null, JSIL.Array.New($T13(), [value])), writer);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.SurrogateSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer")
        ]), 
      SurrogateSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      SurrogateSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SurrogateSerializer_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SurrogateSerializer_get_ReturnsValue
    );

    $.Method({Static:false, Public:true }, "GetConversion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $.Boolean]), 
      SurrogateSerializer_GetConversion
    );

    $.Method({Static:true , Public:false}, "HasCast", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.MethodInfo")])
        ]), 
      SurrogateSerializer_HasCast
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      SurrogateSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      SurrogateSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.Callback", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_Callback
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "Callback");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance", 
      JSIL.MethodSignature.Return($.Boolean), 
      SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CanCreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.EmitCallback", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local"), 
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")
        ]), 
      SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCallback
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "EmitCallback");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.CompilerContext")), 
      SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "EmitCreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]), 
      SurrogateSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_HasCallbacks
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "HasCallbacks");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      SurrogateSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      SurrogateSerializer_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "forType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "declaredType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "toTail", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fromTail", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "rootTail", $asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), 
      /* 1 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.SystemTypeSerializer */ 

(function SystemTypeSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function SystemTypeSerializer__ctor (model) {
  }; 

  function SystemTypeSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadType", this.get_ExpectedType());
  }; 

  function SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteType", valueFrom);
  }; 

  function SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_Read (value, source) {
    return source.ReadType();
  }; 

  function SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_Write (value, dest) {
    $T06().WriteType($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.SystemTypeSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      SystemTypeSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      SystemTypeSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_Read
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "Read");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      SystemTypeSerializer_ProtoBuf_Serializers_IProtoSerializer_Write
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "Write");

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Type.__Type__;
      });


    function SystemTypeSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SystemTypeSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.TagDecorator */ 

(function TagDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel_CallbackType)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.Callback)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.EmitCallback)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitRead)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitWrite)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function TagDecorator__ctor (fieldNumber, wireType, strict, tail) {
    $T04().prototype._ctor.call(this, tail);
    this.fieldNumber = (fieldNumber | 0);
    this.wireType = wireType;
    this.strict = strict;
  }; 

  function TagDecorator_Callback (value, callbackType, context) {
    var protoTypeSerializer = $T08().$As(this.Tail);
    if (protoTypeSerializer !== null) {
      $IM00().Call(protoTypeSerializer, null, value, callbackType, context);
    }
  }; 

  function TagDecorator_CanCreateInstance () {
    var protoTypeSerializer = $T08().$As(this.Tail);
    return ((protoTypeSerializer !== null) && $IM01().Call(protoTypeSerializer, null));
  }; 

  function TagDecorator_CreateInstance (source) {
    return $IM02().Call($T08().$Cast(this.Tail), null, source);
  }; 

  function TagDecorator_EmitCallback (ctx, valueFrom, callbackType) {
    $IM03().Call($T08().$Cast(this.Tail), null, ctx, valueFrom, callbackType);
  }; 

  function TagDecorator_EmitCreateInstance (ctx) {
    $IM04().Call($T08().$Cast(this.Tail), null, ctx);
  }; 

  function TagDecorator_EmitRead (ctx, valueFrom) {
    if (!(!this.strict && !this.get_NeedsHint())) {
      ctx.LoadReaderWriter();
      $S00().CallVirtual("LoadValue", null, ctx, (this.wireType).valueOf());
      ctx.EmitCall((ctx.MapType($T09().__Type__)).GetMethod((
            this.strict
               ? "Assert"
               : "Hint")
        ));
    }
    $IM05().Call(this.Tail, null, ctx, valueFrom);
  }; 

  function TagDecorator_EmitWrite (ctx, valueFrom) {
    $S00().CallVirtual("LoadValue", null, ctx, this.fieldNumber);
    $S00().CallVirtual("LoadValue", null, ctx, (this.wireType).valueOf());
    ctx.LoadReaderWriter();
    ctx.EmitCall((ctx.MapType($T0D().__Type__)).GetMethod("WriteFieldHeader"));
    $IM06().Call(this.Tail, null, ctx, valueFrom);
  }; 

  function TagDecorator_get_ExpectedType () {
    return $IM07().Call(this.Tail, null);
  }; 

  function TagDecorator_get_NeedsHint () {
    return ($T01().$Cast(this.wireType & $T01().$Cast(-8)) > $T01().Variant);
  }; 

  function TagDecorator_get_RequiresOldValue () {
    return $IM08().Call(this.Tail, null);
  }; 

  function TagDecorator_get_ReturnsValue () {
    return $IM09().Call(this.Tail, null);
  }; 

  function TagDecorator_HasCallbacks (callbackType) {
    var protoTypeSerializer = $T08().$As(this.Tail);
    return ((protoTypeSerializer !== null) && $IM0A().Call(protoTypeSerializer, null, callbackType));
  }; 

  function TagDecorator_Read (value, source) {
    if (this.strict) {
      source.Assert(this.wireType);
    } else if (this.get_NeedsHint()) {
      source.Hint(this.wireType);
    }
    return $IM0B().Call(this.Tail, null, value, source);
  }; 

  function TagDecorator_Write (value, dest) {
    $T0D().WriteFieldHeader(this.fieldNumber, this.wireType, dest);
    $IM0C().Call(this.Tail, null, value, dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.TagDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm08.TypeRef("ProtoBuf.WireType"), 
          $.Boolean, $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
        ]), 
      TagDecorator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Callback", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TagDecorator_Callback
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CanCreateInstance", 
      JSIL.MethodSignature.Return($.Boolean), 
      TagDecorator_CanCreateInstance
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      TagDecorator_CreateInstance
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EmitCallback", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local"), 
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")
        ]), 
      TagDecorator_EmitCallback
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EmitCreateInstance", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.CompilerContext")), 
      TagDecorator_EmitCreateInstance
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      TagDecorator_EmitRead
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      TagDecorator_EmitWrite
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      TagDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:false}, "get_NeedsHint", 
      JSIL.MethodSignature.Return($.Boolean), 
      TagDecorator_get_NeedsHint
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TagDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TagDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "HasCallbacks", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]), 
      TagDecorator_HasCallbacks
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      TagDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      TagDecorator_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "strict", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "wireType", $asm08.TypeRef("ProtoBuf.WireType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.Property({Static:false, Public:false}, "NeedsHint", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.TimeSpanSerializer */ 

(function TimeSpanSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.TimeSpan)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.BclHelpers)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function TimeSpanSerializer__ctor (model) {
  }; 

  function TimeSpanSerializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function TimeSpanSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead(
      ctx.MapType($T04().__Type__), 
      "ReadTimeSpan", 
      this.get_ExpectedType()
    );
  }; 

  function TimeSpanSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitWrite(ctx.MapType($T04().__Type__), "WriteTimeSpan", valueFrom);
  }; 

  function TimeSpanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function TimeSpanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function TimeSpanSerializer_Read (value, source) {
    return $T04().ReadTimeSpan(source);
  }; 

  function TimeSpanSerializer_Write (value, dest) {
    $T04().WriteTimeSpan($T00().$Cast(value).MemberwiseClone(), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.TimeSpanSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      TimeSpanSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      TimeSpanSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      TimeSpanSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      TimeSpanSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TimeSpanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TimeSpanSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      TimeSpanSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      TimeSpanSerializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.TimeSpan.__Type__;
      });


    function TimeSpanSerializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TimeSpanSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.TupleSerializer */ 

(function TupleSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Reflection.ConstructorInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.MemberInfo))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.ParameterInfo))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Reflection.ParameterInfo)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm08.ProtoBuf.Meta.MetaType)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm08.ProtoBuf.Meta.ValueMember)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm08.ProtoBuf.Serializers.TagDecorator)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ArrayDecorator)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ListDecorator)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel_CallbackType)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Compiler.Local))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm08.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.Decimal)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm07.System.Reflection.FieldInfo)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.System.Reflection.PropertyInfo)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Compiler.CodeLabel))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Serializers.IProtoSerializer))) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm07.System.Activator)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int64")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Single")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Double")))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Decimal")))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid")))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.FieldInfo")))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.PropertyInfo")))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.ConstructorInfo")))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, null))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Object]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function TupleSerializer__ctor (model, ctor, members) {
    var wireType = new JSIL.BoxedVariable($asm08.ProtoBuf.WireType.Variant);
    if ($T01().op_Equality(ctor, null)) {
      throw $S00().Construct("ctor");
    }
    if (members === null) {
      throw $S00().Construct("members");
    }
    this.ctor = ctor;
    this.members = members;
    this.tails = JSIL.Array.New($T05(), members.length);
    var parameters = ctor.GetParameters();
    var i = 0;
    var type = new JSIL.BoxedVariable(null);
    var concreteType = new JSIL.BoxedVariable(null);

    while (i < (members.length | 0)) {
      var parameterType = (parameters[i]).get_ParameterType();
      type.set(null);
      concreteType.set(null);
      $T0B().ResolveListTypes(model, parameterType, /* ref */ type, /* ref */ concreteType);
      var type2 = (
        $T09().op_Equality(type.get(), null)
           ? parameterType
           : type.get())
      ;
      var asReference = false;
      var num = (model.FindOrAddAuto(type2, false, true, false) | 0);
      if (num >= 0) {
        asReference = (model.get_Item(type2)).get_AsReferenceDefault();
      }
      var protoSerializer = $T0D().TryGetCoreSerializer(
        model, 
        $T0E().Default, 
        type2, 
        /* ref */ wireType, 
        asReference, 
        false, 
        false, 
        true
      );
      if (protoSerializer === null) {
        throw $S01().Construct(JSIL.ConcatString("No serializer defined for type: ", type2.get_FullName()));
      }
      protoSerializer = new ($T11())(((i + 1) | 0), wireType.get(), false, protoSerializer);
      if ($T09().op_Equality(type.get(), null)) {
        var protoSerializer2 = protoSerializer;
      } else if (parameterType.get_IsArray()) {
        protoSerializer2 = new ($T12())(model, protoSerializer, ((i + 1) | 0), false, wireType.get(), parameterType, false, false);
      } else {
        protoSerializer2 = $T13().Create(
          model, 
          parameterType, 
          concreteType.get(), 
          protoSerializer, 
          ((i + 1) | 0), 
          false, 
          wireType.get(), 
          true, 
          false, 
          false
        );
      }
      this.tails[i] = protoSerializer2;
      i = ((i + 1) | 0);
    }
  }; 

  function TupleSerializer_EmitCallback (ctx, valueFrom, callbackType) {
  }; 

  function TupleSerializer_EmitRead (ctx, incoming) {
    var localWithValue = ctx.GetLocalWithValue(this.get_ExpectedType(), incoming);
    try {
      var array = JSIL.Array.New($T15(), this.members.length);
      try {

      $loop0: 
        for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
          var memberType = this.GetMemberType(i);
          var flag = true;
          array[i] = $S02().Construct(ctx, memberType);
          if (!$T18().IsValueType(this.get_ExpectedType())) {

            var $label0 = 0;
          $labelgroup0: 
            while (true) {
              switch ($label0) {
                case 0: /* $entry0 */ 
                  if ($T18().IsValueType(memberType)) {
                    var typeCode = $T18().GetTypeCode(memberType);
                    switch (typeCode.valueOf()) {
                      case 3: 
                      case 5: 
                      case 6: 
                      case 7: 
                      case 8: 
                      case 9: 
                      case 10: 
                        $S03().CallVirtual("LoadValue", null, ctx, 0);
                        break $labelgroup0;

                      case 4: 
                        break;

                      case 11: 
                      case 12: 
                        $S04().CallVirtual("LoadValue", null, ctx, $T1A().Create(0, 0, 0));
                        break $labelgroup0;

                      case 13: 
                        $S05().CallVirtual("LoadValue", null, ctx, 0);
                        break $labelgroup0;

                      case 14: 
                        $S06().CallVirtual("LoadValue", null, ctx, 0);
                        break $labelgroup0;

                      case 15: 
                        $S07().CallVirtual("LoadValue", null, ctx, $T1B().Zero);
                        break $labelgroup0;

                      default: 
                        if (typeCode === $T19().Guid) {
                          $S08().CallVirtual("LoadValue", null, ctx, $T1C().Empty.MemberwiseClone());
                          break $labelgroup0;
                        }
                        break;

                    }
                    ctx.LoadAddress(array[i], memberType);
                    $S09().CallVirtual("EmitCtor", null, ctx, memberType);
                    flag = false;
                  } else {
                    ctx.LoadNullRef();
                  }
                  break $labelgroup0;

              }
            }
            /* Original label IL_10D */ 
            if (flag) {
              $S0A().CallVirtual("StoreValue", null, ctx, array[i]);
            }
          }
        }
        var label = (
          $T18().IsValueType(this.get_ExpectedType())
             ? new ($T1D())()
             : ctx.DefineLabel())
        ;
        if (!$T18().IsValueType(this.get_ExpectedType())) {
          ctx.LoadAddress(localWithValue, this.get_ExpectedType());
          ctx.BranchIfFalse(label, false);
        }

        for (var j = 0; j < (this.members.length | 0); j = ((j + 1) | 0)) {
          ctx.LoadAddress(localWithValue, this.get_ExpectedType());
          if ($T1E().$As(this.members[j]) !== null) {
            $S0B().CallVirtual("LoadValue", null, ctx, $T1E().$Cast(this.members[j]));
          } else if ($T1F().$As(this.members[j]) !== null) {
            $S0C().CallVirtual("LoadValue", null, ctx, $T1F().$Cast(this.members[j]));
          }
          $S0A().CallVirtual("StoreValue", null, ctx, array[j]);
        }
        if (!$T18().IsValueType(this.get_ExpectedType())) {
          ctx.MarkLabel(label);
        }
        var local = $S02().Construct(ctx, ctx.MapType($T08().__Type__));
        try {
          var label2 = ctx.DefineLabel();
          var label3 = ctx.DefineLabel();
          var label4 = ctx.DefineLabel();
          ctx.Branch(label2, false);
          var array2 = JSIL.Array.New($T1D(), this.members.length);

          for (var k = 0; k < (this.members.length | 0); k = ((k + 1) | 0)) {
            array2[k] = ctx.DefineLabel();
          }
          ctx.MarkLabel(label3);
          $S0D().CallVirtual("LoadValue", null, ctx, local);
          $S03().CallVirtual("LoadValue", null, ctx, 1);
          ctx.Subtract();
          ctx.Switch(array2);
          ctx.Branch(label4, false);

          for (var l = 0; l < (array2.length | 0); l = ((l + 1) | 0)) {
            ctx.MarkLabel(array2[l]);
            var protoSerializer = this.tails[l];
            var valueFrom = (
              $IM00().Call(protoSerializer, null)
                 ? array[l]
                 : null)
            ;
            ctx.ReadNullCheckedTail((array[l]).get_Type(), protoSerializer, valueFrom);
            if ($IM01().Call(protoSerializer, null)) {
              if ($T18().IsValueType((array[l]).get_Type())) {
                $S0A().CallVirtual("StoreValue", null, ctx, array[l]);
              } else {
                var label5 = ctx.DefineLabel();
                var label6 = ctx.DefineLabel();
                ctx.CopyValue();
                ctx.BranchIfTrue(label5, true);
                ctx.DiscardValue();
                ctx.Branch(label6, true);
                ctx.MarkLabel(label5);
                $S0A().CallVirtual("StoreValue", null, ctx, array[l]);
                ctx.MarkLabel(label6);
              }
            }
            ctx.Branch(label2, false);
          }
          ctx.MarkLabel(label4);
          ctx.LoadReaderWriter();
          ctx.EmitCall((ctx.MapType($T21().__Type__)).GetMethod("SkipField"));
          ctx.MarkLabel(label2);
          ctx.EmitBasicRead("ReadFieldHeader", ctx.MapType($T08().__Type__));
          ctx.CopyValue();
          $S0A().CallVirtual("StoreValue", null, ctx, local);
          $S03().CallVirtual("LoadValue", null, ctx, 0);
          ctx.BranchIfGreater(label3, false);
        } finally {
          if (local !== null) {
            $IM02().Call(local, null);
          }
        }

        for (var m = 0; m < (array.length | 0); m = ((m + 1) | 0)) {
          $S0D().CallVirtual("LoadValue", null, ctx, array[m]);
        }
        $S0E().CallVirtual("EmitCtor", null, ctx, this.ctor);
        $S0A().CallVirtual("StoreValue", null, ctx, localWithValue);
      } finally {

        for (var n = 0; n < (array.length | 0); n = ((n + 1) | 0)) {
          if (array[n] !== null) {
            (array[n]).Dispose();
          }
        }
      }
    } finally {
      if (localWithValue !== null) {
        $IM02().Call(localWithValue, null);
      }
    }
  }; 

  function TupleSerializer_EmitWrite (ctx, valueFrom) {
    var localWithValue = ctx.GetLocalWithValue((this.ctor).get_DeclaringType(), valueFrom);
    try {

      for (var i = 0; i < (this.tails.length | 0); i = ((i + 1) | 0)) {
        var memberType = this.GetMemberType(i);
        ctx.LoadAddress(localWithValue, this.get_ExpectedType());
        if ($T1E().$As(this.members[i]) !== null) {
          $S0B().CallVirtual("LoadValue", null, ctx, $T1E().$Cast(this.members[i]));
        } else if ($T1F().$As(this.members[i]) !== null) {
          $S0C().CallVirtual("LoadValue", null, ctx, $T1F().$Cast(this.members[i]));
        }
        ctx.WriteNullCheckedTail(memberType, this.tails[i], null);
      }
    } finally {
      if (localWithValue !== null) {
        $IM02().Call(localWithValue, null);
      }
    }
  }; 

  function TupleSerializer_get_ExpectedType () {
    return (this.ctor).get_DeclaringType();
  }; 

  function TupleSerializer_get_RequiresOldValue () {
    return true;
  }; 

  function TupleSerializer_get_ReturnsValue () {
    return false;
  }; 

  function TupleSerializer_GetMemberType (index) {
    var memberType = $T18().GetMemberType(this.members[index]);
    if ($T09().op_Equality(memberType, null)) {
      throw $S0F().Construct();
    }
    return memberType;
  }; 

  function TupleSerializer_GetValue (obj, index) {
    var propertyInfo = null, fieldInfo = null;
    if ($T1F().op_Inequality(propertyInfo = $T1F().$As(this.members[index]), null)) {
      if (obj !== null) {
        return propertyInfo.GetValue(obj, null);
      }
      if (!$T18().IsValueType(propertyInfo.get_PropertyType())) {
        return null;
      }
      return $S10().CallStatic($T26(), "CreateInstance", null, propertyInfo.get_PropertyType());
    } else {
      if (!$T1E().op_Inequality(fieldInfo = $T1E().$As(this.members[index]), null)) {
        throw $S0F().Construct();
      }
      if (obj !== null) {
        return $S11().CallVirtual("GetValue", null, fieldInfo, obj);
      }
      if (!$T18().IsValueType(fieldInfo.get_FieldType())) {
        return null;
      }
      return $S10().CallStatic($T26(), "CreateInstance", null, fieldInfo.get_FieldType());
    }
  }; 

  function TupleSerializer_HasCallbacks (callbackType) {
    return false;
  }; 

  function TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_Callback (value, callbackType, context) {
  }; 

  function TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance () {
    return false;
  }; 

  function TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance (source) {
    throw $S12().Construct();
  }; 

  function TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCreateInstance (ctx) {
    throw $S12().Construct();
  }; 

  function TupleSerializer_Read (value, source) {
    var num = 0;
    var array = JSIL.Array.New($T25(), this.members.length);
    var flag = false;
    if (value === null) {
      flag = true;
    }

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      array[i] = this.GetValue(value, i);
    }

    while ((num = (source.ReadFieldHeader() | 0)) > 0) {
      flag = true;
      if (num <= (this.tails.length | 0)) {
        var protoSerializer = this.tails[((num - 1) | 0)];
        array[((num - 1) | 0)] = $IM03().Call(this.tails[((num - 1) | 0)], null, (
            $IM00().Call(protoSerializer, null)
               ? array[((num - 1) | 0)]
               : null)
          , source);
      } else {
        source.SkipField();
      }
    }
    if (!flag) {
      return value;
    }
    return (this.ctor).Invoke(array);
  }; 

  function TupleSerializer_Write (value, dest) {

    for (var i = 0; i < (this.tails.length | 0); i = ((i + 1) | 0)) {
      var value2 = this.GetValue(value, i);
      if (value2 !== null) {
        $IM04().Call(this.tails[i], null, value2, dest);
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.TupleSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm07.TypeRef("System.Reflection.ConstructorInfo"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")])
        ]), 
      TupleSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EmitCallback", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local"), 
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")
        ]), 
      TupleSerializer_EmitCallback
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      TupleSerializer_EmitRead
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      TupleSerializer_EmitWrite
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      TupleSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TupleSerializer_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TupleSerializer_get_ReturnsValue
    );

    $.Method({Static:false, Public:false}, "GetMemberType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Int32]), 
      TupleSerializer_GetMemberType
    );

    $.Method({Static:false, Public:false}, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Int32]), 
      TupleSerializer_GetValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "HasCallbacks", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]), 
      TupleSerializer_HasCallbacks
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.Callback", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_Callback
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "Callback");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance", 
      JSIL.MethodSignature.Return($.Boolean), 
      TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CanCreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.CompilerContext")), 
      TupleSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "EmitCreateInstance");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      TupleSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      TupleSerializer_Write
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "members", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ctor", $asm07.TypeRef("System.Reflection.ConstructorInfo"));

    $.Field({Static:false, Public:false}, "tails", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), 
      /* 1 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.TypeSerializer */ 

(function TypeSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.IExtensible)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm07.System.Int32))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Serializers.IProtoSerializer))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.MethodInfo))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Meta.CallbackSet)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Reflection.ConstructorInfo)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel_CallbackType)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.Activator)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm08.ProtoBuf.BclHelpers)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.ParameterInfo))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm07.System.Reflection.ParameterInfo)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.System.Runtime.Serialization.StreamingContext)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_NodeEnumerator)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_Group)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Compiler.CodeLabel))) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm07.System.Reflection.BindingFlags)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Type]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String, $asm07.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, [$asm07.System.String]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type, $asm07.System.Boolean]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Reflection.MethodInfo, [$asm07.System.String, System.Array.Of($asm07.System.Type)]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Runtime.Serialization.StreamingContext, [$asm08.ProtoBuf.SerializationContext]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Reflection.MethodInfo, [$asm07.System.String, $asm07.System.Reflection.BindingFlags]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.Callback)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.HasCallbacks)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.EmitCallback)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitWrite)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitRead)) ();
  };


  function TypeSerializer__ctor (model, forType, fieldNumbers, serializers, baseCtorCallbacks, isRootType, useConstructor, callbacks, constructType, factory) {
    $T09().Sort(fieldNumbers, $T0A().$Cast(serializers));
    var flag = false;

    for (var i = 1; i < (fieldNumbers.length | 0); i = ((i + 1) | 0)) {
      if ((fieldNumbers[i] | 0) === (fieldNumbers[((i - 1) | 0)] | 0)) {
        throw $S00().Construct(("Duplicate field-number detected; " + (fieldNumbers[i]).toString() + " on: " + forType.get_FullName()));
      }
      if (!(flag || !$T02().op_Inequality($IM00().Call(serializers[i], null), forType))) {
        flag = true;
      }
    }
    this.forType = forType;
    this.factory = factory;
    if ($T02().op_Equality(constructType, null)) {
      constructType = forType;
    } else if (!$S01().CallVirtual("IsAssignableFrom", null, forType, constructType)) {
      throw $S00().Construct((forType.get_FullName() + " cannot be assigned from " + constructType.get_FullName()));
    }
    this.constructType = constructType;
    this.serializers = serializers;
    this.fieldNumbers = fieldNumbers;
    this.callbacks = callbacks;
    this.isRootType = isRootType;
    this.useConstructor = useConstructor;
    if (!((baseCtorCallbacks === null) || ((baseCtorCallbacks.length | 0) !== 0))) {
      baseCtorCallbacks = null;
    }
    this.baseCtorCallbacks = baseCtorCallbacks;
    if ($T02().op_Inequality($T09().GetUnderlyingType(forType), null)) {
      throw $S02().Construct("Cannot create a TypeSerializer for nullable types", "forType");
    }
    if ($S01().CallVirtual("IsAssignableFrom", null, model.MapType($thisType.iextensible), forType)) {
      if ((forType.get_IsValueType() || 
          !isRootType) | flag) {
        throw $S03().Construct("IExtensible is not supported in structs or classes with inheritance");
      }
      this.isExtensible = true;
    }
    this.hasConstructor = !constructType.get_IsAbstract() && 
    $T11().op_Inequality($T09().GetConstructor(constructType, $T09().EmptyTypes, true), null);
    if (!(!($T02().op_Inequality(constructType, forType) & useConstructor) || this.hasConstructor)) {
      throw $S02().Construct(JSIL.ConcatString("The supplied default implementation cannot be created: ", constructType.get_FullName()), "constructType");
    }
  }; 

  function TypeSerializer_Callback (value, callbackType, context) {
    if (this.callbacks !== null) {
      this.InvokeCallback((this.callbacks).get_Item(callbackType), value, context);
    }
    var protoTypeSerializer = $T15().$Cast(this.GetMoreSpecificSerializer(value));
    if (protoTypeSerializer !== null) {
      $IM01().Call(protoTypeSerializer, null, value, callbackType, context);
    }
  }; 

  function TypeSerializer_CreateInstance (source, includeLocalCallback) {
    if ($T08().op_Inequality(this.factory, null)) {
      var obj = this.InvokeCallback(this.factory, null, source.get_Context());
    } else if (this.useConstructor) {
      if (!this.hasConstructor) {
        $T01().ThrowCannotCreateInstance(this.constructType);
      }
      obj = $S04().CallStatic($T17(), "CreateInstance", null, this.constructType, true);
    } else {
      obj = $T18().GetUninitializedObject(this.constructType);
    }
    $T16().NoteObject(obj, source);
    if (this.baseCtorCallbacks !== null) {

      for (var i = 0; i < (this.baseCtorCallbacks.length | 0); i = ((i + 1) | 0)) {
        this.InvokeCallback(this.baseCtorCallbacks[i], obj, source.get_Context());
      }
    }
    if (!(!includeLocalCallback || (this.callbacks === null))) {
      this.InvokeCallback(
        (this.callbacks).get_BeforeDeserialize(), 
        obj, 
        source.get_Context()
      );
    }
    return obj;
  }; 

  function TypeSerializer_EmitCallbackIfNeeded (ctx, valueFrom, callbackType) {
    if (!(!this.isRootType || !$IM02().Call(this, null, callbackType))) {
      $IM03().Call(this, null, ctx, valueFrom, callbackType);
    }
  }; 

  function TypeSerializer_EmitCreateIfNull (ctx, storage) {
    if (!$T09().IsValueType(this.get_ExpectedType())) {
      var label = ctx.DefineLabel();
      $S05().CallVirtual("LoadValue", null, ctx, storage);
      ctx.BranchIfTrue(label, false);
      $IM04().Call(this, null, ctx);
      if (this.callbacks !== null) {
        $thisType.EmitInvokeCallback(
          ctx, 
          (this.callbacks).get_BeforeDeserialize(), 
          true, 
          null, 
          this.forType
        );
      }
      $S06().CallVirtual("StoreValue", null, ctx, storage);
      ctx.MarkLabel(label);
    }
  }; 

  function TypeSerializer_EmitInvokeCallback (ctx, method, copyValue, constructType, type) {
    if ($T08().op_Inequality(method, null)) {
      if (copyValue) {
        ctx.CopyValue();
      }
      var parameters = method.GetParameters();
      var flag = true;

      for (var i = 0; i < (parameters.length | 0); i = ((i + 1) | 0)) {
        var parameterType = (parameters[0]).get_ParameterType();
        if ($T02().op_Equality(parameterType, ctx.MapType($T14().__Type__))) {
          ctx.LoadSerializationContext();
        } else if ($T02().op_Equality(parameterType, ctx.MapType($T02().__Type__))) {
          var type2 = constructType;
          if ($T02().op_Equality(type2, null)) {
            type2 = type;
          }
          $S07().CallVirtual("LoadValue", null, ctx, type2);
        } else if ($T02().op_Equality(parameterType, ctx.MapType($T1F().__Type__))) {
          ctx.LoadSerializationContext();
          var method2 = $S08().CallVirtual("GetMethod", null, ctx.MapType($T14().__Type__), "op_Implicit", JSIL.Array.New($T02(), [ctx.MapType($T14().__Type__)]));
          if ($T08().op_Inequality(method2, null)) {
            ctx.EmitCall(method2);
            flag = true;
          }
        } else {
          flag = false;
        }
      }
      if (!flag) {
        throw $T07().CreateInvalidCallbackSignature(method);
      }
      ctx.EmitCall(method);
      if (!(!$T02().op_Inequality(constructType, null) || !$T02().op_Equality(
            method.get_ReturnType(), 
            ctx.MapType($T12().__Type__)
          ))) {
        ctx.CastFromObject(type);
        return;
      }
    }
  }; 

  function TypeSerializer_get_CanHaveInheritance () {
    return (!(!(this.forType).get_IsClass() && 
        !(this.forType).get_IsInterface()) && !(this.forType).get_IsSealed());
  }; 

  function TypeSerializer_get_ExpectedType () {
    return this.forType;
  }; 

  function TypeSerializer_GetMoreSpecificSerializer (value) {
    if (!this.get_CanHaveInheritance()) {
      return null;
    }
    var type = JSIL.GetType(value);
    if ($T02().op_Equality(type, this.forType)) {
      return null;
    }

    for (var i = 0; i < (this.serializers.length | 0); i = ((i + 1) | 0)) {
      var protoSerializer = this.serializers[i];
      if (!(!$T02().op_Inequality($IM00().Call(protoSerializer, null), this.forType) || !$T09().IsAssignableFrom($IM00().Call(protoSerializer, null), type))) {
        return protoSerializer;
      }
    }
    if ($T02().op_Equality(type, this.constructType)) {
      return null;
    }
    $T01().ThrowUnexpectedSubtype(this.forType, type);
    return null;
  }; 

  function TypeSerializer_HasCallbacks (callbackType) {
    if (!((this.callbacks === null) || !$T08().op_Inequality((this.callbacks).get_Item(callbackType), null))) {
      return true;
    }

    for (var i = 0; i < (this.serializers.length | 0); i = ((i + 1) | 0)) {
      if (!(!$T02().op_Inequality($IM00().Call(this.serializers[i], null), this.forType) || !$IM02().Call($T15().$Cast(this.serializers[i]), null, callbackType))) {
        return true;
      }
    }
    return false;
  }; 

  function TypeSerializer_InvokeCallback (method, obj, context) {
    var result = null;
    if ($T08().op_Inequality(method, null)) {
      var parameters = method.GetParameters();
      if ((parameters.length | 0) === 0) {
        var array = null;
        var flag = true;
      } else {
        array = JSIL.Array.New($T12(), parameters.length);
        flag = true;

        for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
          var parameterType = (parameters[i]).get_ParameterType();
          if ($T02().op_Equality(parameterType, $T14().__Type__)) {
            var obj2 = context;
          } else if ($T02().op_Equality(parameterType, $T02().__Type__)) {
            obj2 = this.constructType;
          } else if ($T02().op_Equality(parameterType, $T1F().__Type__)) {
            obj2 = $S09().CallStatic($T14(), "op_Implicit", null, context);
          } else {
            obj2 = null;
            flag = false;
          }
          array[i] = obj2;
        }
      }
      if (!flag) {
        throw $T07().CreateInvalidCallbackSignature(method);
      }
      result = method.Invoke(obj, array);
    }
    return result;
  }; 

  function TypeSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    var expectedType = this.get_ExpectedType();
    var localWithValue = ctx.GetLocalWithValue(expectedType, valueFrom);
    try {
      var local = $S0A().Construct(ctx, ctx.MapType($T0B().__Type__));
      try {
        if (this.HasCallbacks($T13().BeforeDeserialize)) {
          if ($T09().IsValueType(this.get_ExpectedType())) {
            this.EmitCallbackIfNeeded(ctx, localWithValue, $T13().BeforeDeserialize);
          } else {
            var label = ctx.DefineLabel();
            $S05().CallVirtual("LoadValue", null, ctx, localWithValue);
            ctx.BranchIfFalse(label, false);
            this.EmitCallbackIfNeeded(ctx, localWithValue, $T13().BeforeDeserialize);
            ctx.MarkLabel(label);
          }
        }
        var codeLabel = ctx.DefineLabel();
        var label2 = ctx.DefineLabel();
        ctx.Branch(codeLabel, false);
        ctx.MarkLabel(label2);

        for (var enumerator = ($T21().GetContiguousGroups(this.fieldNumbers, $T0A().$Cast(this.serializers))).GetEnumerator(); enumerator.MoveNext(); ) {
          var group = $T22().$Cast(enumerator.get_Current());
          var label3 = ctx.DefineLabel();
          var count = ((group.Items).get_Count() | 0);
          if (count === 1) {
            $S05().CallVirtual("LoadValue", null, ctx, local);
            $S0B().CallVirtual("LoadValue", null, ctx, group.First);
            var codeLabel2 = ctx.DefineLabel();
            ctx.BranchIfEqual(codeLabel2, true);
            ctx.Branch(label3, false);
            this.WriteFieldHandler(
              ctx, 
              expectedType, 
              localWithValue, 
              codeLabel2, 
              codeLabel, 
              $T0E().$Cast((group.Items).get_Item(0))
            );
          } else {
            $S05().CallVirtual("LoadValue", null, ctx, local);
            $S0B().CallVirtual("LoadValue", null, ctx, group.First);
            ctx.Subtract();
            var array = JSIL.Array.New($T1B(), count);

            for (var i = 0; i < count; i = ((i + 1) | 0)) {
              array[i] = ctx.DefineLabel();
            }
            ctx.Switch(array);
            ctx.Branch(label3, false);

            for (var j = 0; j < count; j = ((j + 1) | 0)) {
              this.WriteFieldHandler(
                ctx, 
                expectedType, 
                localWithValue, 
                array[j], 
                codeLabel, 
                $T0E().$Cast((group.Items).get_Item(j))
              );
            }
          }
          ctx.MarkLabel(label3);
        }
        this.EmitCreateIfNull(ctx, localWithValue);
        ctx.LoadReaderWriter();
        if (this.isExtensible) {
          $S05().CallVirtual("LoadValue", null, ctx, localWithValue);
          ctx.EmitCall((ctx.MapType($T16().__Type__)).GetMethod("AppendExtensionData"));
        } else {
          ctx.EmitCall((ctx.MapType($T16().__Type__)).GetMethod("SkipField"));
        }
        ctx.MarkLabel(codeLabel);
        ctx.EmitBasicRead("ReadFieldHeader", ctx.MapType($T0B().__Type__));
        ctx.CopyValue();
        $S06().CallVirtual("StoreValue", null, ctx, local);
        $S0B().CallVirtual("LoadValue", null, ctx, 0);
        ctx.BranchIfGreater(label2, false);
        this.EmitCreateIfNull(ctx, localWithValue);
        this.EmitCallbackIfNeeded(ctx, localWithValue, $T13().AfterDeserialize);
        if (!((valueFrom === null) || localWithValue.IsSame(valueFrom))) {
          $S05().CallVirtual("LoadValue", null, ctx, localWithValue);
          ctx.Cast(valueFrom.get_Type());
          $S06().CallVirtual("StoreValue", null, ctx, valueFrom);
        }
      } finally {
        if (local !== null) {
          $IM05().Call(local, null);
        }
      }
    } finally {
      if (localWithValue !== null) {
        $IM05().Call(localWithValue, null);
      }
    }
  }; 

  function TypeSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    var expectedType = this.get_ExpectedType();
    var localWithValue = ctx.GetLocalWithValue(expectedType, valueFrom);
    try {
      this.EmitCallbackIfNeeded(ctx, localWithValue, $T13().BeforeSerialize);
      var label = ctx.DefineLabel();
      if (this.get_CanHaveInheritance()) {

        var $label0 = 0;
      $labelgroup0: 
        while (true) {
          switch ($label0) {
            case 0: /* $entry0 */ 

              for (var i = 0; i < (this.serializers.length | 0); i = ((i + 1) | 0)) {
                var protoSerializer = this.serializers[i];
                var expectedType2 = $IM00().Call(protoSerializer, null);
                if ($T02().op_Inequality(expectedType2, this.forType)) {
                  var label2 = ctx.DefineLabel();
                  var label3 = ctx.DefineLabel();
                  $S05().CallVirtual("LoadValue", null, ctx, localWithValue);
                  ctx.TryCast(expectedType2);
                  ctx.CopyValue();
                  ctx.BranchIfTrue(label2, true);
                  ctx.DiscardValue();
                  ctx.Branch(label3, true);
                  ctx.MarkLabel(label2);
                  $IM06().Call(protoSerializer, null, ctx, null);
                  ctx.Branch(label, false);
                  ctx.MarkLabel(label3);
                }
              }
              if (!(!$T02().op_Inequality(this.constructType, null) || !$T02().op_Inequality(this.constructType, this.forType))) {
                var local = $S0A().Construct(ctx, ctx.MapType($T02().__Type__));
                try {
                  $S05().CallVirtual("LoadValue", null, ctx, localWithValue);
                  ctx.EmitCall((ctx.MapType($T12().__Type__)).GetMethod("GetType"));
                  ctx.CopyValue();
                  $S06().CallVirtual("StoreValue", null, ctx, local);
                  $S07().CallVirtual("LoadValue", null, ctx, this.forType);
                  ctx.BranchIfEqual(label, true);
                  $S05().CallVirtual("LoadValue", null, ctx, local);
                  $S07().CallVirtual("LoadValue", null, ctx, this.constructType);
                  ctx.BranchIfEqual(label, true);
                  break $labelgroup0;
                } finally {
                  if (local !== null) {
                    $IM05().Call(local, null);
                  }
                }
              }
              $S05().CallVirtual("LoadValue", null, ctx, localWithValue);
              ctx.EmitCall((ctx.MapType($T12().__Type__)).GetMethod("GetType"));
              $S07().CallVirtual("LoadValue", null, ctx, this.forType);
              ctx.BranchIfEqual(label, true);
              break $labelgroup0;

          }
        }
        /* Original label IL_1B1 */ 
        $S07().CallVirtual("LoadValue", null, ctx, this.forType);
        $S05().CallVirtual("LoadValue", null, ctx, localWithValue);
        ctx.EmitCall((ctx.MapType($T12().__Type__)).GetMethod("GetType"));
        ctx.EmitCall($S0C().CallVirtual("GetMethod", null, ctx.MapType($T01().__Type__), "ThrowUnexpectedSubtype", $T25().$Flags("NonPublic", "Public", "Static")));
      }
      ctx.MarkLabel(label);

      for (var j = 0; j < (this.serializers.length | 0); j = ((j + 1) | 0)) {
        var protoSerializer2 = this.serializers[j];
        if ($T02().op_Equality($IM00().Call(protoSerializer2, null), this.forType)) {
          $IM06().Call(protoSerializer2, null, ctx, localWithValue);
        }
      }
      if (this.isExtensible) {
        $S05().CallVirtual("LoadValue", null, ctx, localWithValue);
        ctx.LoadReaderWriter();
        ctx.EmitCall((ctx.MapType($T26().__Type__)).GetMethod("AppendExtensionData"));
      }
      this.EmitCallbackIfNeeded(ctx, localWithValue, $T13().AfterSerialize);
    } finally {
      if (localWithValue !== null) {
        $IM05().Call(localWithValue, null);
      }
    }
  }; 

  function TypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return true;
  }; 

  function TypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return false;
  }; 

  function TypeSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance () {
    return true;
  }; 

  function TypeSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance (source) {
    return this.CreateInstance(source, false);
  }; 

  function TypeSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCallback (ctx, valueFrom, callbackType) {
    var protoTypeSerializer = null;
    var flag = false;
    if (this.get_CanHaveInheritance()) {

      for (var i = 0; i < (this.serializers.length | 0); i = ((i + 1) | 0)) {
        var protoSerializer = this.serializers[i];
        if (!(!$T02().op_Inequality($IM00().Call(protoSerializer, null), this.forType) || !$IM02().Call($T15().$Cast(protoSerializer), null, callbackType))) {
          flag = true;
        }
      }
    }
    var methodInfo = (
      (this.callbacks === null)
         ? null
         : (this.callbacks).get_Item(callbackType))
    ;
    if (!(!$T08().op_Equality(methodInfo, null) || flag)) {
      return;
    }
    ctx.LoadAddress(valueFrom, this.get_ExpectedType());
    $thisType.EmitInvokeCallback(
      ctx, 
      methodInfo, 
      flag, 
      null, 
      this.forType
    );
    if (flag) {
      var label = ctx.DefineLabel();

      for (var j = 0; j < (this.serializers.length | 0); j = ((j + 1) | 0)) {
        var protoSerializer2 = this.serializers[j];
        var expectedType = $IM00().Call(protoSerializer2, null);
        if (!(!$T02().op_Inequality(expectedType, this.forType) || !$IM02().Call(protoTypeSerializer = $T15().$Cast(protoSerializer2), null, callbackType))) {
          var label2 = ctx.DefineLabel();
          var label3 = ctx.DefineLabel();
          ctx.CopyValue();
          ctx.TryCast(expectedType);
          ctx.CopyValue();
          ctx.BranchIfTrue(label2, true);
          ctx.DiscardValue();
          ctx.Branch(label3, false);
          ctx.MarkLabel(label2);
          $IM03().Call(protoTypeSerializer, null, ctx, null, callbackType);
          ctx.Branch(label, false);
          ctx.MarkLabel(label3);
        }
      }
      ctx.MarkLabel(label);
      ctx.DiscardValue();
    }
  }; 

  function TypeSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCreateInstance (ctx) {
    var flag = true;
    if ($T08().op_Inequality(this.factory, null)) {
      $thisType.EmitInvokeCallback(
        ctx, 
        this.factory, 
        false, 
        this.constructType, 
        this.forType
      );
    } else if (!this.useConstructor) {
      $S07().CallVirtual("LoadValue", null, ctx, this.constructType);
      ctx.EmitCall((ctx.MapType($T18().__Type__)).GetMethod("GetUninitializedObject"));
      ctx.Cast(this.forType);
    } else if (!(!$T09().IsClass(this.constructType) || !this.hasConstructor)) {
      $S0D().CallVirtual("EmitCtor", null, ctx, this.constructType);
    } else {
      $S07().CallVirtual("LoadValue", null, ctx, this.get_ExpectedType());
      ctx.EmitCall($S0C().CallVirtual("GetMethod", null, ctx.MapType($T01().__Type__), "ThrowCannotCreateInstance", $T25().$Flags("Public", "Static")));
      ctx.LoadNullRef();
      flag = false;
    }
    if (flag) {
      ctx.CopyValue();
      ctx.LoadReaderWriter();
      ctx.EmitCall($S0C().CallVirtual("GetMethod", null, ctx.MapType($T16().__Type__), "NoteObject", $T25().$Flags("Public", "Static")));
    }
    if (this.baseCtorCallbacks !== null) {

      for (var i = 0; i < (this.baseCtorCallbacks.length | 0); i = ((i + 1) | 0)) {
        $thisType.EmitInvokeCallback(
          ctx, 
          this.baseCtorCallbacks[i], 
          true, 
          null, 
          this.forType
        );
      }
    }
  }; 

  function TypeSerializer_Read (value, source) {
    var num3 = 0;
    if (!(!this.isRootType || (value === null))) {
      this.Callback(value, $T13().BeforeDeserialize, source.get_Context());
    }
    var num = 0;
    var num2 = 0;

    while ((num3 = (source.ReadFieldHeader() | 0)) > 0) {
      var flag = false;
      if (num3 < num) {
        num2 = num = 0;
      }

    $loop1: 
      for (var i = num2; i < (this.fieldNumbers.length | 0); i = ((i + 1) | 0)) {
        if ((this.fieldNumbers[i] | 0) === num3) {
          var protoSerializer = this.serializers[i];
          var expectedType = $IM00().Call(protoSerializer, null);
          if (value === null) {
            if ($T02().op_Equality(expectedType, this.forType)) {
              value = this.CreateInstance(source, true);
            }
          } else if (!(!$T02().op_Inequality(expectedType, this.forType) || 
              !$IM07().Call($T15().$Cast(protoSerializer), null) || !expectedType.IsSubclassOf(JSIL.GetType(value)))) {
            value = $T16().Merge(source, value, $IM08().Call($T15().$Cast(protoSerializer), null, source));
          }
          if ($IM09().Call(protoSerializer, null)) {
            value = $IM0A().Call(protoSerializer, null, value, source);
          } else {
            $IM0A().Call(protoSerializer, null, value, source);
          }
          num2 = i;
          num = num3;
          flag = true;
          break $loop1;
        }
      }
      if (!flag) {
        if (value === null) {
          value = this.CreateInstance(source, true);
        }
        if (this.isExtensible) {
          source.AppendExtensionData($T00().$Cast(value));
        } else {
          source.SkipField();
        }
      }
    }
    if (value === null) {
      value = this.CreateInstance(source, true);
    }
    if (this.isRootType) {
      this.Callback(value, $T13().AfterDeserialize, source.get_Context());
    }
    return value;
  }; 

  function TypeSerializer_Write (value, dest) {
    if (this.isRootType) {
      this.Callback(value, $T13().BeforeSerialize, dest.get_Context());
    }
    var moreSpecificSerializer = this.GetMoreSpecificSerializer(value);
    if (moreSpecificSerializer !== null) {
      $IM0B().Call(moreSpecificSerializer, null, value, dest);
    }

    for (var i = 0; i < (this.serializers.length | 0); i = ((i + 1) | 0)) {
      var protoSerializer = this.serializers[i];
      if ($T02().op_Equality($IM00().Call(protoSerializer, null), this.forType)) {
        $IM0B().Call(protoSerializer, null, value, dest);
      }
    }
    if (this.isExtensible) {
      $T26().AppendExtensionData($T00().$Cast(value), dest);
    }
    if (this.isRootType) {
      this.Callback(value, $T13().AfterSerialize, dest.get_Context());
    }
  }; 

  function TypeSerializer_WriteFieldHandler (ctx, expected, loc, handler, $continue, serializer) {
    ctx.MarkLabel(handler);
    var expectedType = $IM00().Call(serializer, null);
    if ($T02().op_Equality(expectedType, this.forType)) {
      this.EmitCreateIfNull(ctx, loc);
      $IM0C().Call(serializer, null, ctx, loc);
    } else {
      if ($IM07().Call($T15().$Cast(serializer), null)) {
        var label = ctx.DefineLabel();
        $S05().CallVirtual("LoadValue", null, ctx, loc);
        ctx.BranchIfFalse(label, false);
        $S05().CallVirtual("LoadValue", null, ctx, loc);
        ctx.TryCast(expectedType);
        ctx.BranchIfTrue(label, false);
        ctx.LoadReaderWriter();
        $S05().CallVirtual("LoadValue", null, ctx, loc);
        $IM04().Call($T15().$Cast(serializer), null, ctx);
        ctx.EmitCall((ctx.MapType($T16().__Type__)).GetMethod("Merge"));
        ctx.Cast(expected);
        $S06().CallVirtual("StoreValue", null, ctx, loc);
        ctx.MarkLabel(label);
      }
      $S05().CallVirtual("LoadValue", null, ctx, loc);
      ctx.Cast(expectedType);
      $IM0C().Call(serializer, null, ctx, null);
    }
    if ($IM09().Call(serializer, null)) {
      $S06().CallVirtual("StoreValue", null, ctx, loc);
    }
    ctx.Branch($continue, false);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.TypeSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")]), $.Boolean, 
          $.Boolean, $asm08.TypeRef("ProtoBuf.Meta.CallbackSet"), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Reflection.MethodInfo")
        ]), 
      TypeSerializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Callback", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeSerializer_Callback
    );

    $.Method({Static:false, Public:false}, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("ProtoBuf.ProtoReader"), $.Boolean]), 
      TypeSerializer_CreateInstance
    );

    $.Method({Static:false, Public:false}, "EmitCallbackIfNeeded", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local"), 
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")
        ]), 
      TypeSerializer_EmitCallbackIfNeeded
    );

    $.Method({Static:false, Public:false}, "EmitCreateIfNull", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      TypeSerializer_EmitCreateIfNull
    );

    $.Method({Static:true , Public:false}, "EmitInvokeCallback", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $.Boolean, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type")
        ]), 
      TypeSerializer_EmitInvokeCallback
    );

    $.Method({Static:false, Public:false}, "get_CanHaveInheritance", 
      JSIL.MethodSignature.Return($.Boolean), 
      TypeSerializer_get_CanHaveInheritance
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      TypeSerializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false}, "GetMoreSpecificSerializer", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), [$.Object]), 
      TypeSerializer_GetMoreSpecificSerializer
    );

    $.Method({Static:false, Public:true , Virtual:true }, "HasCallbacks", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]), 
      TypeSerializer_HasCallbacks
    );

    $.Method({Static:false, Public:false}, "InvokeCallback", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $.Object, 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeSerializer_InvokeCallback
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      TypeSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      TypeSerializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      TypeSerializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CanCreateInstance", 
      JSIL.MethodSignature.Return($.Boolean), 
      TypeSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CanCreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CanCreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      TypeSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_CreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "CreateInstance");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.EmitCallback", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local"), 
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")
        ]), 
      TypeSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCallback
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "EmitCallback");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoTypeSerializer.EmitCreateInstance", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.CompilerContext")), 
      TypeSerializer_ProtoBuf_Serializers_IProtoTypeSerializer_EmitCreateInstance
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), "EmitCreateInstance");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      TypeSerializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      TypeSerializer_Write
    );

    $.Method({Static:false, Public:false}, "WriteFieldHandler", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.Compiler.Local"), $asm08.TypeRef("ProtoBuf.Compiler.CodeLabel"), 
          $asm08.TypeRef("ProtoBuf.Compiler.CodeLabel"), $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
        ]), 
      TypeSerializer_WriteFieldHandler
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "forType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "constructType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "serializers", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fieldNumbers", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "isRootType", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "useConstructor", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "isExtensible", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "hasConstructor", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "callbacks", $asm08.TypeRef("ProtoBuf.Meta.CallbackSet"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "baseCtorCallbacks", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "factory", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "iextensible", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm08.ProtoBuf.IExtensible.__Type__;
      });


    function TypeSerializer__cctor () {
      $thisType.iextensible = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TypeSerializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "CanHaveInheritance", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"), 
      /* 1 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.UInt32Serializer */ 

(function UInt32Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function UInt32Serializer__ctor (model) {
  }; 

  function UInt32Serializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function UInt32Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadUInt32", ctx.MapType($T00().__Type__));
  }; 

  function UInt32Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteUInt32", valueFrom);
  }; 

  function UInt32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function UInt32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function UInt32Serializer_Read (value, source) {
    return $T00().$Box(source.ReadUInt32());
  }; 

  function UInt32Serializer_Write (value, dest) {
    $T06().WriteUInt32($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.UInt32Serializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      UInt32Serializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      UInt32Serializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      UInt32Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      UInt32Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UInt32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UInt32Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      UInt32Serializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      UInt32Serializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.UInt32.__Type__;
      });


    function UInt32Serializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      UInt32Serializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.UInt64Serializer */ 

(function UInt64Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };


  function UInt64Serializer__ctor (model) {
  }; 

  function UInt64Serializer_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function UInt64Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead (ctx, valueFrom) {
    ctx.EmitBasicRead("ReadUInt64", this.get_ExpectedType());
  }; 

  function UInt64Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite (ctx, valueFrom) {
    ctx.EmitBasicWrite("WriteUInt64", valueFrom);
  }; 

  function UInt64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue () {
    return false;
  }; 

  function UInt64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue () {
    return true;
  }; 

  function UInt64Serializer_Read (value, source) {
    return source.ReadUInt64();
  }; 

  function UInt64Serializer_Write (value, dest) {
    $T06().WriteUInt64($T00().$Cast(value), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Serializers.UInt64Serializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      UInt64Serializer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      UInt64Serializer_get_ExpectedType
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      UInt64Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitRead
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitRead");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      UInt64Serializer_ProtoBuf_Serializers_IProtoSerializer_EmitWrite
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "EmitWrite");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UInt64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_RequiresOldValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_RequiresOldValue");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UInt64Serializer_ProtoBuf_Serializers_IProtoSerializer_get_ReturnsValue
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), "get_ReturnsValue");

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      UInt64Serializer_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      UInt64Serializer_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.UInt64.__Type__;
      });


    function UInt64Serializer__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      UInt64Serializer__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.IProtoSerializer.ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Serializers.UriDecorator */ 

(function UriDecorator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.System.Uri)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ProtoDecoratorBase)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.PropertyInfo")))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.System.Uri, [$asm07.System.String]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitRead)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitWrite)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };


  function UriDecorator__ctor (model, tail) {
    $T03().prototype._ctor.call(this, tail);
  }; 

  function UriDecorator_EmitRead (ctx, valueFrom) {
    $IM00().Call(this.Tail, null, ctx, valueFrom);
    ctx.CopyValue();
    var label = ctx.DefineLabel();
    var label2 = ctx.DefineLabel();
    $S00().CallVirtual("LoadValue", null, ctx, $T08().__Type__.GetProperty("Length"));
    ctx.BranchIfTrue(label, true);
    ctx.DiscardValue();
    ctx.LoadNullRef();
    ctx.Branch(label2, true);
    ctx.MarkLabel(label);
    ctx.EmitCtor(
      ctx.MapType($T00().__Type__), 
      JSIL.Array.New($T07(), [ctx.MapType($T08().__Type__)])
    );
    ctx.MarkLabel(label2);
  }; 

  function UriDecorator_EmitWrite (ctx, valueFrom) {
    $S01().CallVirtual("LoadValue", null, ctx, valueFrom);
    $S00().CallVirtual("LoadValue", null, ctx, $T00().__Type__.GetProperty("AbsoluteUri"));
    $IM01().Call(this.Tail, null, ctx, null);
  }; 

  function UriDecorator_get_ExpectedType () {
    return $thisType.expectedType;
  }; 

  function UriDecorator_get_RequiresOldValue () {
    return false;
  }; 

  function UriDecorator_get_ReturnsValue () {
    return true;
  }; 

  function UriDecorator_Read (value, source) {
    var text = $T08().$Cast($IM02().Call(this.Tail, null, null, source));
    if ((text.length | 0) !== 0) {
      return $S02().Construct(text);
    }
    return null;
  }; 

  function UriDecorator_Write (value, dest) {
    $IM03().Call(this.Tail, null, ($T00().$Cast(value)).get_AbsoluteUri(), dest);
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Serializers.ProtoDecoratorBase"), 
      Name: "ProtoBuf.Serializers.UriDecorator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]), 
      UriDecorator__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitRead", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      UriDecorator_EmitRead
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EmitWrite", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      UriDecorator_EmitWrite
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ExpectedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      UriDecorator_get_ExpectedType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_RequiresOldValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UriDecorator_get_RequiresOldValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_ReturnsValue", 
      JSIL.MethodSignature.Return($.Boolean), 
      UriDecorator_get_ReturnsValue
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoReader")]), 
      UriDecorator_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter")]), 
      UriDecorator_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "expectedType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm0A.System.Uri.__Type__;
      });


    function UriDecorator__cctor () {
      $thisType.expectedType = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      UriDecorator__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ExpectedType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "RequiresOldValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnsValue", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("ProtoBuf.Meta");
/* class ProtoBuf.Meta.AttributeMap */ 

(function AttributeMap$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Meta.AttributeMap))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Meta.AttributeMap_ReflectionAttributeMap)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Attribute)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Reflection.Assembly)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Object)) ();
  };


  function AttributeMap__ctor () {
  }; 

  function AttributeMap_Create$00 (model, type, inherit) {
    var customAttributes = type.GetCustomAttributes(inherit);
    var array = JSIL.Array.New($thisType, customAttributes.length);

    for (var i = 0; i < (customAttributes.length | 0); i = ((i + 1) | 0)) {
      array[i] = new ($T07())($T08().$Cast(customAttributes[i]));
    }
    return array;
  }; 

  function AttributeMap_Create$01 (model, member, inherit) {
    var customAttributes = member.GetCustomAttributes(inherit);
    var array = JSIL.Array.New($thisType, customAttributes.length);

    for (var i = 0; i < (customAttributes.length | 0); i = ((i + 1) | 0)) {
      array[i] = new ($T07())($T08().$Cast(customAttributes[i]));
    }
    return array;
  }; 

  function AttributeMap_Create$02 (model, assembly) {
    var customAttributes = assembly.GetCustomAttributes(false);
    var array = JSIL.Array.New($thisType, customAttributes.length);

    for (var i = 0; i < (customAttributes.length | 0); i = ((i + 1) | 0)) {
      array[i] = new ($T07())($T08().$Cast(customAttributes[i]));
    }
    return array;
  }; 

  function AttributeMap_TryGet$03 (key, /* ref */ value) {
    return this.TryGet(key, true, /* ref */ value);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.AttributeMap", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      AttributeMap__ctor
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $.Boolean
        ]), 
      AttributeMap_Create$00
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Reflection.MemberInfo"), 
          $.Boolean
        ]), 
      AttributeMap_Create$01
    );

    $.Method({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Reflection.Assembly")]), 
      AttributeMap_Create$02
    );

    $.Method({Static:false, Public:true }, "TryGet", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])]), 
      AttributeMap_TryGet$03
    );

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Target", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.AttributeMap+ReflectionAttributeMap */ 

(function ReflectionAttributeMap$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.AttributeMap)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.MemberInfo))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.StringComparison)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Reflection.PropertyInfo)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Reflection.FieldInfo)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Object]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, [$asm07.System.String]))) ();
  };


  function ReflectionAttributeMap__ctor (attribute) {
    $T01().prototype._ctor.call(this);
    this.attribute = attribute;
  }; 

  function ReflectionAttributeMap_get_AttributeType () {
    return JSIL.GetType(this.attribute);
  }; 

  function ReflectionAttributeMap_get_Target () {
    return this.attribute;
  }; 

  function ReflectionAttributeMap_TryGet$00 (key, publicOnly, /* ref */ value) {
    var instanceFieldsAndProperties = $T06().GetInstanceFieldsAndProperties(JSIL.GetType(this.attribute), publicOnly);
    var array = instanceFieldsAndProperties;

    for (var i = 0; i < (array.length | 0); ) {
      var memberInfo = array[i];
      if ((System.String.Compare(memberInfo.get_Name(), key, $T09().OrdinalIgnoreCase) === 0)) {
        var propertyInfo = $T0A().$As(memberInfo);
        if ($T0A().op_Inequality(propertyInfo, null)) {
          value.set(propertyInfo.GetValue(this.attribute, null));
          return true;
        }
        var fieldInfo = $T0B().$As(memberInfo);
        if ($T0B().op_Inequality(fieldInfo, null)) {
          value.set($S00().CallVirtual("GetValue", null, fieldInfo, this.attribute));
          return true;
        }
        throw $S01().Construct((JSIL.GetType(memberInfo)).get_Name());
      } else {
        i = ((i + 1) | 0);
      }
    }
    value.set(null);
    return false;
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Meta.AttributeMap"), 
      Name: "ProtoBuf.Meta.AttributeMap+ReflectionAttributeMap", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Attribute")), 
      ReflectionAttributeMap__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_AttributeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      ReflectionAttributeMap_get_AttributeType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Target", 
      JSIL.MethodSignature.Return($.Object), 
      ReflectionAttributeMap_get_Target
    );

    $.Method({Static:false, Public:true , Virtual:true }, "TryGet", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      ReflectionAttributeMap_TryGet$00
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "attribute", $asm07.TypeRef("System.Attribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Target", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeType", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.BasicList */ 

(function BasicList$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_Node)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_NodeEnumerator)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Array)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm07.System.Int32))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_Group)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_MatchPredicate)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String, $asm07.System.String]))) ();
  };


  function BasicList__ctor () {
    this.head = $thisType.nil;
  }; 

  function BasicList_Add (value) {
    return ((((this.head = (this.head).Append(value)).get_Length() | 0) - 1) | 0);
  }; 

  function BasicList_Contains (value) {

    for (var enumerator = this.GetEnumerator(); enumerator.MoveNext(); ) {
      var current = enumerator.get_Current();
      if (JSIL.ObjectEquals(current, value)) {
        return true;
      }
    }
    return false;
  }; 

  function BasicList_CopyTo (array, offset) {
    (this.head).CopyTo(array, offset);
  }; 

  function BasicList_get_Count () {
    return (this.head).get_Length();
  }; 

  function BasicList_get_Item (index) {
    return (this.head).get_Item(index);
  }; 

  function BasicList_GetContiguousGroups (keys, values) {
    if (keys === null) {
      throw $S00().Construct("keys");
    }
    if (values === null) {
      throw $S00().Construct("values");
    }
    if ((values.length | 0) < (keys.length | 0)) {
      throw $S01().Construct("Not all keys are covered by values", "values");
    }
    var basicList = new $thisType();
    var group = null;

    for (var i = 0; i < (keys.length | 0); i = ((i + 1) | 0)) {
      if (!((i !== 0) && ((keys[i] | 0) === (keys[((i - 1) | 0)] | 0)))) {
        group = null;
      }
      if (group === null) {
        group = new ($T09())(keys[i]);
        basicList.Add(group);
      }
      (group.Items).Add(values[i]);
    }
    return basicList;
  }; 

  function BasicList_GetEnumerator () {
    return new ($T02())(this.head);
  }; 

  function BasicList_IndexOf (predicate, ctx) {
    return (this.head).IndexOf(predicate, ctx);
  }; 

  function BasicList_IndexOfReference (instance) {
    return (this.head).IndexOfReference(instance);
  }; 

  function BasicList_IndexOfString (value) {
    return (this.head).IndexOfString(value);
  }; 

  function BasicList_System_Collections_IEnumerable_GetEnumerator () {
    return new ($T02())(this.head);
  }; 

  function BasicList_Trim () {
    this.head = (this.head).Trim();
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.BasicList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      BasicList__ctor
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      BasicList_Add
    );

    $.Method({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      BasicList_Contains
    );

    $.Method({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32]), 
      BasicList_CopyTo
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32), 
      BasicList_get_Count
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      BasicList_get_Item
    );

    $.Method({Static:true , Public:false}, "GetContiguousGroups", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Object])]), 
      BasicList_GetContiguousGroups
    );

    $.Method({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Meta.BasicList+NodeEnumerator")), 
      BasicList_GetEnumerator
    );

    $.Method({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("ProtoBuf.Meta.BasicList+MatchPredicate"), $.Object]), 
      BasicList_IndexOf
    );

    $.Method({Static:false, Public:false}, "IndexOfReference", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      BasicList_IndexOfReference
    );

    $.Method({Static:false, Public:false}, "IndexOfString", 
      new JSIL.MethodSignature($.Int32, [$.String]), 
      BasicList_IndexOfString
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator")), 
      BasicList_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:true }, "Trim", 
      JSIL.MethodSignature.Void, 
      BasicList_Trim
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "nil", $asm08.TypeRef("ProtoBuf.Meta.BasicList+Node"));

    $.Field({Static:false, Public:false}, "head", $asm08.TypeRef("ProtoBuf.Meta.BasicList+Node"));


    function BasicList__cctor () {
      $thisType.nil = new ($T00())(null, 0);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BasicList__cctor
    );

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct ProtoBuf.Meta.BasicList+NodeEnumerator */ 

(function NodeEnumerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_Node)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };


  function NodeEnumerator__ctor (node) {
    this.position = -1;
    this.node = node;
  }; 

  function NodeEnumerator_get_Current () {
    return (this.node).get_Item(this.position);
  }; 

  function NodeEnumerator_MoveNext () {
    var length = ((this.node).get_Length() | 0);
    if ((this.position | 0) <= length) {
      var num = (((this.position | 0) + 1) | 0);
      this.position = num;
      return (num < length);
    }
    return false;
  }; 

  function NodeEnumerator_System_Collections_IEnumerator_Reset () {
    this.position = -1;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.Meta.BasicList+NodeEnumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.BasicList+Node")), 
      NodeEnumerator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      NodeEnumerator_get_Current
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      NodeEnumerator_MoveNext
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      NodeEnumerator_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "node", $asm08.TypeRef("ProtoBuf.Meta.BasicList+Node"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.BasicList+Node */ 

(function Node$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Array)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_MatchPredicate)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.Array, $asm07.System.Array, 
        $asm07.System.Int32
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.Array, $asm07.System.Int32, 
        $asm07.System.Array, $asm07.System.Int32, 
        $asm07.System.Int32
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, null))) ();
  };


  function Node__ctor (data, length) {
    this.data = data;
    this.$length = (length | 0);
  }; 

  function Node_Append (value) {
    var num = (((this.$length | 0) + 1) | 0);
    if (this.data === null) {
      var array = JSIL.Array.New($T02(), 10);
    } else if ((this.$length | 0) === (this.data.length | 0)) {
      array = JSIL.Array.New($T02(), Math.imul(this.data.length, 2));
      $S00().CallStatic($T03(), "Copy", null, this.data, array, this.$length);
    } else {
      array = this.data;
    }
    array[this.$length] = value;
    return new $thisType(array, num);
  }; 

  function Node_Clear () {
    if (this.data !== null) {
      JSIL.Array.Erase(this.data, $T02().__Type__, 0, this.data.length);
    }
    this.$length = 0;
  }; 

  function Node_CopyTo (array, offset) {
    if ((this.$length | 0) > 0) {
      $S01().CallStatic($T03(), "Copy", null, 
        this.data, 
        0, 
        array, 
        offset, 
        this.$length
      );
    }
  }; 

  function Node_get_Item (index) {
    if (!(((index | 0) < 0) || ((index | 0) >= (this.$length | 0)))) {
      return this.data[index];
    }
    throw $S02().Construct("index");
  }; 

  function Node_get_Length () {
    return this.$length;
  }; 

  function Node_IndexOf (predicate, ctx) {

    for (var i = 0; i < (this.$length | 0); i = ((i + 1) | 0)) {
      if (predicate(this.data[i], ctx)) {
        return i;
      }
    }
    return -1;
  }; 

  function Node_IndexOfReference (instance) {

    for (var i = 0; i < (this.$length | 0); i = ((i + 1) | 0)) {
      if (instance === this.data[i]) {
        return i;
      }
    }
    return -1;
  }; 

  function Node_IndexOfString (value) {

    for (var i = 0; i < (this.$length | 0); i = ((i + 1) | 0)) {
      if (value == $T06().$Cast(this.data[i])) {
        return i;
      }
    }
    return -1;
  }; 

  function Node_RemoveLastWithMutate () {
    if ((this.$length | 0) === 0) {
      throw $S03().Construct();
    }
    this.$length = (((this.$length | 0) - 1) | 0);
  }; 

  function Node_set_Item (index, value) {
    if (!(((index | 0) < 0) || ((index | 0) >= (this.$length | 0)))) {
      this.data[index] = value;
      return;
    }
    throw $S02().Construct("index");
  }; 

  function Node_Trim () {
    if (!(((this.$length | 0) !== 0) && ((this.$length | 0) !== (this.data.length | 0)))) {
      return this;
    }
    var destinationArray = JSIL.Array.New($T02(), this.$length);
    $S00().CallStatic($T03(), "Copy", null, this.data, destinationArray, this.$length);
    return new $thisType(destinationArray, this.$length);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.BasicList+Node", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32]), 
      Node__ctor
    );

    $.Method({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Object]), 
      Node_Append
    );

    $.Method({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void, 
      Node_Clear
    );

    $.Method({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32]), 
      Node_CopyTo
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      Node_get_Item
    );

    $.Method({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32), 
      Node_get_Length
    );

    $.Method({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("ProtoBuf.Meta.BasicList+MatchPredicate"), $.Object]), 
      Node_IndexOf
    );

    $.Method({Static:false, Public:false}, "IndexOfReference", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      Node_IndexOfReference
    );

    $.Method({Static:false, Public:false}, "IndexOfString", 
      new JSIL.MethodSignature($.Int32, [$.String]), 
      Node_IndexOfString
    );

    $.Method({Static:false, Public:true }, "RemoveLastWithMutate", 
      JSIL.MethodSignature.Void, 
      Node_RemoveLastWithMutate
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      Node_set_Item
    );

    $.Method({Static:false, Public:true }, "Trim", 
      JSIL.MethodSignature.Return($.Type), 
      Node_Trim
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "data", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "$length", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Length", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* delegate ProtoBuf.Meta.BasicList+MatchPredicate */ 

JSIL.MakeDelegate("ProtoBuf.Meta.BasicList+MatchPredicate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Object"), $asm07.TypeRef("System.Object")]));

/* class ProtoBuf.Meta.BasicList+Group */ 

(function Group$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };


  function Group__ctor (first) {
    this.First = (first | 0);
    this.Items = new ($T01())();
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.BasicList+Group", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32), 
      Group__ctor
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "First", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "Items", $asm08.TypeRef("ProtoBuf.Meta.BasicList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.MutableList */ 

(function MutableList$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_Node)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Object)) ();
  };


  function MutableList__ctor () {
    $T00().prototype._ctor.call(this);
  }; 

  function MutableList_Clear () {
    (this.head).Clear();
  }; 

  function MutableList_get_Item (index) {
    return (this.head).get_Item(index);
  }; 

  function MutableList_RemoveLast () {
    (this.head).RemoveLastWithMutate();
  }; 

  function MutableList_set_Item (index, value) {
    (this.head).set_Item(index, value);
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Meta.BasicList"), 
      Name: "ProtoBuf.Meta.MutableList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      MutableList__ctor
    );

    $.Method({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void, 
      MutableList_Clear
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32]), 
      MutableList_get_Item
    );

    $.Method({Static:false, Public:true }, "RemoveLast", 
      JSIL.MethodSignature.Void, 
      MutableList_RemoveLast
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object]), 
      MutableList_set_Item
    );

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class ProtoBuf.Meta.CallbackSet */ 

(function CallbackSet$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.MetaType)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.ParameterInfo))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Reflection.ParameterInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Runtime.Serialization.StreamingContext)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel_CallbackType)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, [$asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String, $asm07.System.String]))) ();
  };


  function CallbackSet__ctor (metaType) {
    if (metaType === null) {
      throw $S00().Construct("metaType");
    }
    this.metaType = metaType;
  }; 

  function CallbackSet_CheckCallbackParameters (model, method) {
    var parameters = method.GetParameters();

    for (var i = 0; i < (parameters.length | 0); i = ((i + 1) | 0)) {
      var parameterType = (parameters[i]).get_ParameterType();
      if (!($T07().op_Equality(parameterType, model.MapType($T09().__Type__)) || 
          $T07().op_Equality(parameterType, model.MapType($T07().__Type__)) || $T07().op_Equality(parameterType, model.MapType($T0A().__Type__)))) {
        return false;
      }
    }
    return true;
  }; 

  function CallbackSet_CreateInvalidCallbackSignature (method) {
    return $S01().Construct(("Invalid callback signature in " + (method.get_DeclaringType()).get_FullName() + "." + method.get_Name()));
  }; 

  function CallbackSet_get_AfterDeserialize () {
    return this.afterDeserialize;
  }; 

  function CallbackSet_get_AfterSerialize () {
    return this.afterSerialize;
  }; 

  function CallbackSet_get_BeforeDeserialize () {
    return this.beforeDeserialize;
  }; 

  function CallbackSet_get_BeforeSerialize () {
    return this.beforeSerialize;
  }; 

  function CallbackSet_get_Item (callbackType) {
    switch (callbackType.valueOf()) {
      case 0: 
        return this.beforeSerialize;

      case 1: 
        return this.afterSerialize;

      case 2: 
        return this.beforeDeserialize;

      case 3: 
        return this.afterDeserialize;

      default: 
        throw $S02().Construct(JSIL.ConcatString("Callback type not supported: ", callbackType.toString()), "callbackType");

    }
  }; 

  function CallbackSet_get_NonTrivial () {
    return ($T03().op_Inequality(this.beforeSerialize, null) || 
      $T03().op_Inequality(this.beforeDeserialize, null) || 
      $T03().op_Inequality(this.afterSerialize, null) || $T03().op_Inequality(this.afterDeserialize, null));
  }; 

  function CallbackSet_SanityCheckCallback (model, callback) {
    (this.metaType).ThrowIfFrozen();
    if ($T03().op_Equality(callback, null)) {
      return callback;
    }
    if (callback.get_IsStatic()) {
      throw $S02().Construct("Callbacks cannot be static", "callback");
    }
    if (!(!$T07().op_Inequality(
          callback.get_ReturnType(), 
          model.MapType($T11().__Type__)
        ) && $thisType.CheckCallbackParameters(model, callback))) {
      throw $thisType.CreateInvalidCallbackSignature(callback);
    }
    return callback;
  }; 

  function CallbackSet_set_AfterDeserialize (value) {
    this.afterDeserialize = this.SanityCheckCallback((this.metaType).get_Model(), value);
  }; 

  function CallbackSet_set_AfterSerialize (value) {
    this.afterSerialize = this.SanityCheckCallback((this.metaType).get_Model(), value);
  }; 

  function CallbackSet_set_BeforeDeserialize (value) {
    this.beforeDeserialize = this.SanityCheckCallback((this.metaType).get_Model(), value);
  }; 

  function CallbackSet_set_BeforeSerialize (value) {
    this.beforeSerialize = this.SanityCheckCallback((this.metaType).get_Model(), value);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.CallbackSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.MetaType")), 
      CallbackSet__ctor
    );

    $.Method({Static:true , Public:false}, "CheckCallbackParameters", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Reflection.MethodInfo")]), 
      CallbackSet_CheckCallbackParameters
    );

    $.Method({Static:true , Public:false}, "CreateInvalidCallbackSignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Reflection.MethodInfo")]), 
      CallbackSet_CreateInvalidCallbackSignature
    );

    $.Method({Static:false, Public:true }, "get_AfterDeserialize", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_get_AfterDeserialize
    );

    $.Method({Static:false, Public:true }, "get_AfterSerialize", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_get_AfterSerialize
    );

    $.Method({Static:false, Public:true }, "get_BeforeDeserialize", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_get_BeforeDeserialize
    );

    $.Method({Static:false, Public:true }, "get_BeforeSerialize", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_get_BeforeSerialize
    );

    $.Method({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm08.TypeRef("ProtoBuf.Meta.TypeModel+CallbackType")]), 
      CallbackSet_get_Item
    );

    $.Method({Static:false, Public:true }, "get_NonTrivial", 
      JSIL.MethodSignature.Return($.Boolean), 
      CallbackSet_get_NonTrivial
    );

    $.Method({Static:false, Public:false}, "SanityCheckCallback", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Reflection.MethodInfo")]), 
      CallbackSet_SanityCheckCallback
    );

    $.Method({Static:false, Public:true }, "set_AfterDeserialize", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_set_AfterDeserialize
    );

    $.Method({Static:false, Public:true }, "set_AfterSerialize", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_set_AfterSerialize
    );

    $.Method({Static:false, Public:true }, "set_BeforeDeserialize", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_set_BeforeDeserialize
    );

    $.Method({Static:false, Public:true }, "set_BeforeSerialize", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo")), 
      CallbackSet_set_BeforeSerialize
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "metaType", $asm08.TypeRef("ProtoBuf.Meta.MetaType"));

    $.Field({Static:false, Public:false}, "beforeSerialize", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "afterSerialize", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "beforeDeserialize", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "afterDeserialize", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "Item", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "BeforeSerialize", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "BeforeDeserialize", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "AfterSerialize", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "AfterDeserialize", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "NonTrivial", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class ProtoBuf.Meta.MetaType */ 

(function MetaType$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.IEnumerable)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.FlagsAttribute)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize(System.Array.Of($asm07.System.String))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm08.ProtoBuf.Meta.ValueMember)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.MemberInfo))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Reflection.BindingFlags)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Reflection.MemberTypes)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.System.Reflection.PropertyInfo)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.Reflection.FieldInfo)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm08.ProtoBuf.Meta.SubType)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Meta.AttributeMap))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm08.ProtoBuf.Meta.AttributeMap)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm08.ProtoBuf.Meta.MetaType_AttributeFamily)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm08.ProtoBuf.ImplicitFields)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.MethodInfo))) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm08.ProtoBuf.ProtoIgnoreAttribute)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.ProtoMemberAttribute))) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm08.ProtoBuf.ProtoMemberAttribute)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm07.System.Array)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm08.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm07.System.Char)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm07.System.SByte)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm07.System.Decimal)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm07.System.TimeSpan)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm07.System.Delegate)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm08.ProtoBuf.Serializers.TagDecorator)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm08.ProtoBuf.Serializers.EnumSerializer)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm08.ProtoBuf.Serializers.TypeSerializer)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm08.ProtoBuf.Serializers.SurrogateSerializer)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize(System.Array.Of($asm07.System.Int32))) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Serializers.IProtoSerializer))) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_NodeEnumerator)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm08.ProtoBuf.Meta.CallbackSet)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm07.System.Reflection.ConstructorInfo)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm08.ProtoBuf.Serializers.TupleSerializer)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm08.ProtoBuf.Serializers.CompiledSerializer)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Serializers.EnumSerializer_EnumPair))) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm08.ProtoBuf.Serializers.EnumSerializer_EnumPair)) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Meta.ValueMember))) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm08.ProtoBuf.Meta.ValueMember_Comparer)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm07.System.Text.StringBuilder)) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize(System.Array.Of($asm07.System.Type))) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Meta.SubType))) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm08.ProtoBuf.Meta.SubType_Comparer)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize($asm07.System.Convert)) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize($asm07.System.Collections.Generic.IDictionary$b2)) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm07.System.Collections.Generic.KeyValuePair$b2)) ();
  };
  var $T4F = function () {
    return ($T4F = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2)) ();
  };
  var $T50 = function () {
    return ($T50 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1)) ();
  };
  var $T51 = function () {
    return ($T51 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.ConstructorInfo))) ();
  };
  var $T52 = function () {
    return ($T52 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.ParameterInfo))) ();
  };
  var $T53 = function () {
    return ($T53 = JSIL.Memoize($asm07.System.StringComparison)) ();
  };
  var $T54 = function () {
    return ($T54 = JSIL.Memoize($asm07.System.Reflection.ParameterInfo)) ();
  };
  var $T55 = function () {
    return ($T55 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.FieldInfo))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String, $asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, [$asm07.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Meta.ValueMember, [
        $asm08.ProtoBuf.Meta.RuntimeTypeModel, $asm07.System.Type, 
        $asm07.System.Int32, $asm07.System.Reflection.MemberInfo, 
        $asm07.System.Type, $asm07.System.Type, 
        $asm07.System.Type, $asm08.ProtoBuf.DataFormat, 
        $asm07.System.Object
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.ValueMember")))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(System.Array.Of($asm08.ProtoBuf.Meta.AttributeMap), [
        $asm08.ProtoBuf.Meta.TypeModel, $asm07.System.Type, 
        $asm07.System.Boolean
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String, $asm07.System.Exception]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(System.Array.Of($asm08.ProtoBuf.Meta.AttributeMap), [
        $asm08.ProtoBuf.Meta.TypeModel, $asm07.System.Reflection.MemberInfo, 
        $asm07.System.Boolean
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm08.ProtoBuf.Meta.MetaType, [
        $asm07.System.Reflection.MethodInfo, $asm07.System.Reflection.MethodInfo, 
        $asm07.System.Reflection.MethodInfo, $asm07.System.Reflection.MethodInfo
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Meta.ValueMember, [
        $asm08.ProtoBuf.Meta.RuntimeTypeModel, $asm07.System.Int32, 
        $asm07.System.Type, $asm07.System.Type, 
        $asm07.System.Type, $asm08.ProtoBuf.DataFormat
      ]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Type]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, null))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.ProtoException, [$asm07.System.String]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"]), $asm07.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"])], ["T"]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Text.StringBuilder, [$asm07.System.String]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Text.StringBuilder, [$asm07.System.Char]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Text.StringBuilder, [$asm07.System.String]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"]), $asm07.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"])], ["T"]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Text.StringBuilder, [$asm07.System.Char, $asm07.System.Int32]))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [$asm07.System.Object]))) ();
  };
  var $S17 = function () {
    return ($S17 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.ProtoMemberAttribute, [$asm07.System.Int32, $asm07.System.Boolean]))) ();
  };
  var $S18 = function () {
    return ($S18 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [$asm07.System.String, $asm07.System.StringComparison]))) ();
  };
  var $S19 = function () {
    return ($S19 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [
        $asm07.System.String, $asm07.System.String, 
        $asm07.System.StringComparison
      ]))) ();
  };
  var $S1A = function () {
    return ($S1A = JSIL.Memoize(new JSIL.MethodSignature($asm08.ProtoBuf.Meta.MetaType, [$asm07.System.Reflection.MethodInfo]))) ();
  };
  var $S1B = function () {
    return ($S1B = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Text.StringBuilder, [$asm07.System.Int32]))) ();
  };
  var $S1C = function () {
    return ($S1C = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Text.StringBuilder, [$asm07.System.Object]))) ();
  };


  function MetaType__ctor (model, type, factory) {
    this.fields = new ($T04())();
    this.factory = factory;
    if (model === null) {
      throw $S00().Construct("model");
    }
    if ($T02().op_Equality(type, null)) {
      throw $S00().Construct("type");
    }
    var protoSerializer = model.TryGetBasicTypeSerializer(type);
    if (protoSerializer !== null) {
      throw $thisType.InbuiltType(type);
    }
    this.type = type;
    this.model = model;
    if ($T07().IsEnum(type)) {
      this.set_EnumPassthru(type.IsDefined(model.MapType($T0A().__Type__), false));
    }
  }; 

  function MetaType_Add$00 (fieldNumber, memberName) {
    this.AddField(
      fieldNumber, 
      memberName, 
      null, 
      null, 
      null
    );
    return this;
  }; 

  function MetaType_Add$01 (memberName) {
    this.Add(this.GetNextFieldNumber(), memberName);
    return this;
  }; 

  function MetaType_Add$02 (memberNames) {
    var $temp00;
    if (memberNames === null) {
      throw $S00().Construct("memberNames");
    }
    var nextFieldNumber = (this.GetNextFieldNumber() | 0);

    for (var i = 0; i < (memberNames.length | 0); i = ((i + 1) | 0)) {
      this.Add(($temp00 = nextFieldNumber, 
          nextFieldNumber = ((nextFieldNumber + 1) | 0), 
          $temp00), memberNames[i]);
    }
    return this;
  }; 

  function MetaType_Add$03 (fieldNumber, memberName, defaultValue) {
    this.AddField(
      fieldNumber, 
      memberName, 
      null, 
      null, 
      defaultValue
    );
    return this;
  }; 

  function MetaType_Add$04 (fieldNumber, memberName, itemType, defaultType) {
    this.AddField(
      fieldNumber, 
      memberName, 
      itemType, 
      defaultType, 
      null
    );
    return this;
  }; 

  function MetaType_Add$05 (member) {
    var opaqueToken = new JSIL.BoxedVariable(0);
    try {
      (this.model).TakeLock(/* ref */ opaqueToken);
      this.ThrowIfFrozen();
      (this.fields).Add(member);
    } finally {
      (this.model).ReleaseLock(opaqueToken.get());
    }
  }; 

  function MetaType_AddField$06 (fieldNumber, memberName) {
    return this.AddField(
      fieldNumber, 
      memberName, 
      null, 
      null, 
      null
    );
  }; 

  function MetaType_AddField$07 (fieldNumber, memberName, itemType, defaultType) {
    return this.AddField(
      fieldNumber, 
      memberName, 
      itemType, 
      defaultType, 
      null
    );
  }; 

  function MetaType_AddField$08 (fieldNumber, memberName, $itemType, $defaultType, defaultValue) {
    var defaultType = new JSIL.BoxedVariable($defaultType);
    var itemType = new JSIL.BoxedVariable($itemType);
    var memberInfo = null;
    var member = (this.type).GetMember(memberName, (
        $T07().IsEnum(this.type)
           ? $T11().$Flags("Public", "Static")
           : $T11().$Flags("Instance", "NonPublic", "Public"))
    );
    if (!((member === null) || ((member.length | 0) !== 1))) {
      memberInfo = member[0];
    }
    if ($T08().op_Equality(memberInfo, null)) {
      throw $S01().Construct(JSIL.ConcatString("Unable to determine member: ", memberName), "memberName");
    }
    var memberType = memberInfo.get_MemberType();
    if (memberType !== $T13().Field) {
      if (memberType !== $T13().Property) {
        throw $S02().Construct((memberInfo.get_MemberType()).toString());
      }
      var memberType2 = ($T15().$Cast(memberInfo)).get_PropertyType();
    } else {
      memberType2 = ($T16().$Cast(memberInfo)).get_FieldType();
    }
    $thisType.ResolveListTypes(this.model, memberType2, /* ref */ itemType, /* ref */ defaultType);
    var memberInfo2 = null;
    var expr_B2 = $T15().$As(memberInfo);
    if ((expr_B2 !== null) && !expr_B2.get_CanWrite()) {
      var member2 = (this.type).GetMember(
        $T0C().Format("<{0}>k__BackingField", ($T15().$Cast(memberInfo)).get_Name()), 
        (
          $T07().IsEnum(this.type)
             ? $T11().$Flags("Public", "Static")
             : $T11().$Flags("Instance", "NonPublic", "Public"))

      );
      if (!((member2 === null) || 
          ((member2.length | 0) !== 1) || !$T16().op_Inequality($T16().$As(member2[0]), null))) {
        memberInfo2 = member2[0];
      }
    }
    var valueMember = $S03().Construct(this.model, this.type, fieldNumber, JSIL.Coalesce(memberInfo2, memberInfo), memberType2, itemType.get(), defaultType.get(), $T17().Default, defaultValue);
    if ($T08().op_Inequality(memberInfo2, null)) {
      valueMember.SetName(memberInfo.get_Name());
    }
    $S04().CallVirtual("Add", null, this, valueMember);
    return valueMember;
  }; 

  function MetaType_AddSubType$09 (fieldNumber, derivedType) {
    return this.AddSubType(fieldNumber, derivedType, $T17().Default);
  }; 

  function MetaType_AddSubType$0A (fieldNumber, derivedType, dataFormat) {
    if ($T02().op_Equality(derivedType, null)) {
      throw $S00().Construct("derivedType");
    }
    if ((fieldNumber | 0) < 1) {
      throw $S05().Construct("fieldNumber");
    }
    if (!(!(!(this.type).get_IsClass() && 
          !(this.type).get_IsInterface()) && !(this.type).get_IsSealed())) {
      throw $S06().Construct("Sub-types can only be added to non-sealed classes");
    }
    if (!this.IsValidSubType(derivedType)) {
      throw $S01().Construct((derivedType.get_Name() + " is not a valid sub-type of " + (this.type).get_Name()), "derivedType");
    }
    var metaType = (this.model).get_Item(derivedType);
    this.ThrowIfFrozen();
    metaType.ThrowIfFrozen();
    var value = new ($T1A())(fieldNumber, metaType, dataFormat);
    this.ThrowIfFrozen();
    metaType.SetBaseType(this);
    if (this.subTypes === null) {
      this.subTypes = new ($T04())();
    }
    (this.subTypes).Add(value);
    return this;
  }; 

  function MetaType_ApplyDefaultBehaviour$0B ($exception) {
    var $temp00;
    var obj = new JSIL.BoxedVariable(null);
    var propertyInfo = null, fieldInfo = null, methodInfo = null;
    var left = $thisType.GetBaseType(this);
    if (!(!$T02().op_Inequality(left, null) || 
        ((this.model).FindWithoutAdd(left) !== null) || ((($thisType.GetContractFamily(this.model, left, null)).valueOf() | 0) === 0))) {
      (this.model).FindOrAddAuto(left, true, false, false);
    }
    var array = $S07().CallStatic($T1D(), "Create", null, this.model, this.type, false);
    var attributeFamily = $thisType.GetContractFamily(this.model, this.type, array);
    if (attributeFamily === $T1E().AutoTuple) {
      this.SetFlag(64, true, true);
    }
    var flag = !this.get_EnumPassthru() && 
    $T07().IsEnum(this.type);
    if (!(((attributeFamily.valueOf() | 0) !== 0) || flag)) {
      return;
    }
    var basicList = null;
    var basicList2 = null;
    var dataMemberOffset = 0;
    var num = 1;
    var flag2 = (this.model).get_InferTagFromNameDefault();
    var implicitFields = $T20().None;
    var text = null;

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var attributeMap = array[i];
      var fullName = (attributeMap.get_AttributeType()).get_FullName();
      if (!(flag || !(fullName == "ProtoBuf.ProtoIncludeAttribute"))) {
        var fieldNumber = 0;
        if (attributeMap.TryGet("tag", /* ref */ obj)) {
          fieldNumber = $T0B().$Cast(obj.get());
        }
        var dataFormat = $T17().Default;
        if (attributeMap.TryGet("DataFormat", /* ref */ obj)) {
          dataFormat = $T17().$Cast($T0B().$Cast(obj.get()));
        }
        var type = null;
        try {
          if (attributeMap.TryGet("knownTypeName", /* ref */ obj)) {
            type = (this.model).GetType($T0C().$Cast(obj.get()), (this.type).get_Assembly());
          } else if (attributeMap.TryGet("knownType", /* ref */ obj)) {
            type = $T02().$Cast(obj.get());
          }
        } catch ($exception) {
          throw $S08().Construct(JSIL.ConcatString("Unable to resolve sub-type of: ", (this.type).get_FullName()), $exception);
        }
        if ($T02().op_Equality(type, null)) {
          throw $S06().Construct(JSIL.ConcatString("Unable to resolve sub-type of: ", (this.type).get_FullName()));
        }
        if (this.IsValidSubType(type)) {
          this.AddSubType(fieldNumber, type, dataFormat);
        }
      }
      if (!(!(fullName == "ProtoBuf.ProtoPartialIgnoreAttribute") || 
          !attributeMap.TryGet("MemberName", /* ref */ obj) || (obj.get() === null))) {
        if (basicList === null) {
          basicList = new ($T04())();
        }
        basicList.Add($T0C().$Cast(obj.get()));
      }
      if (!(flag || !(fullName == "ProtoBuf.ProtoPartialMemberAttribute"))) {
        if (basicList2 === null) {
          basicList2 = new ($T04())();
        }
        basicList2.Add(attributeMap);
      }
      if (fullName == "ProtoBuf.ProtoContractAttribute") {
        if (attributeMap.TryGet("Name", /* ref */ obj)) {
          text = $T0C().$Cast(obj.get());
        }
        if ($T07().IsEnum(this.type)) {
          if (!(!attributeMap.TryGet("EnumPassthruHasValue", false, /* ref */ obj) || 
              !$T1F().$Cast(obj.get()) || !attributeMap.TryGet("EnumPassthru", /* ref */ obj))) {
            this.set_EnumPassthru($T1F().$Cast(obj.get()));
            if (this.get_EnumPassthru()) {
              flag = false;
            }
          }
        } else {
          if (attributeMap.TryGet("DataMemberOffset", /* ref */ obj)) {
            dataMemberOffset = $T0B().$Cast(obj.get());
          }
          if (!(!attributeMap.TryGet("InferTagFromNameHasValue", false, /* ref */ obj) || 
              !$T1F().$Cast(obj.get()) || !attributeMap.TryGet("InferTagFromName", /* ref */ obj))) {
            flag2 = $T1F().$Cast(obj.get());
          }
          if (!(!attributeMap.TryGet("ImplicitFields", /* ref */ obj) || (obj.get() === null))) {
            implicitFields = $T20().$Cast($T0B().$Cast(obj.get()));
          }
          if (attributeMap.TryGet("SkipConstructor", /* ref */ obj)) {
            this.set_UseConstructor(!$T1F().$Cast(obj.get()));
          }
          if (attributeMap.TryGet("IgnoreListHandling", /* ref */ obj)) {
            this.set_IgnoreListHandling($T1F().$Cast(obj.get()));
          }
          if (attributeMap.TryGet("AsReferenceDefault", /* ref */ obj)) {
            this.set_AsReferenceDefault($T1F().$Cast(obj.get()));
          }
          if (!(!attributeMap.TryGet("ImplicitFirstTag", /* ref */ obj) || ($T0B().$Cast(obj.get()) <= 0))) {
            num = $T0B().$Cast(obj.get());
          }
          if (attributeMap.TryGet("IsGroup", /* ref */ obj)) {
            this.set_IsGroup($T1F().$Cast(obj.get()));
          }
        }
      }
      if (!(!(fullName == "System.Runtime.Serialization.DataContractAttribute") || 
          (text !== null) || !attributeMap.TryGet("Name", /* ref */ obj))) {
        text = $T0C().$Cast(obj.get());
      }
      if (!(!(fullName == "System.Xml.Serialization.XmlTypeAttribute") || 
          (text !== null) || !attributeMap.TryGet("TypeName", /* ref */ obj))) {
        text = $T0C().$Cast(obj.get());
      }
    }
    if (!$T07().IsNullOrEmpty(text)) {
      this.set_Name(text);
    }
    if ((implicitFields.valueOf() | 0) !== 0) {
      attributeFamily = $T1E().$Cast(attributeFamily & $T1E().ProtoBuf);
    }
    var array2 = new JSIL.BoxedVariable(null);
    var basicList3 = new ($T04())();
    var members = (this.type).GetMembers((
        flag
           ? $T11().$Flags("Public", "Static")
           : $T11().$Flags("Instance", "NonPublic", "Public"))
    );
    var array3 = members;
    var j = 0;
    var flag3 = new JSIL.BoxedVariable(false);
    var type2 = new JSIL.BoxedVariable(null);

    while (j < (array3.length | 0)) {
      var memberInfo = array3[j];
      if (!($T02().op_Inequality(memberInfo.get_DeclaringType(), this.type) || 
          memberInfo.IsDefined((this.model).MapType($T22().__Type__), true) || ((basicList !== null) && 
            basicList.Contains(memberInfo.get_Name())))) {
        flag3.set(false);
        if ($T15().op_Inequality(propertyInfo = $T15().$As(memberInfo), null)) {
          if (!flag) {
            var backingMember = null;
            if (!propertyInfo.get_CanWrite()) {
              var b = $T0C().Format("<{0}>k__BackingField", propertyInfo.get_Name());
              var array4 = members;

            $loop2: 
              for (var k = 0; k < (array4.length | 0); k = ((k + 1) | 0)) {
                var memberInfo2 = array4[k];
                if (!(!$T16().op_Inequality($T16().$As(memberInfo2), null) || !(memberInfo2.get_Name() == b))) {
                  backingMember = memberInfo2;
                  break $loop2;
                }
              }
            }
            type2.set(propertyInfo.get_PropertyType());
            var isPublic = $T03().op_Inequality($T07().GetGetMethod(propertyInfo, false, false), null);
            var isField = false;
            $thisType.ApplyDefaultBehaviour_AddMembers(
              this.model, 
              attributeFamily, 
              flag, 
              basicList2, 
              dataMemberOffset, 
              flag2, 
              implicitFields, 
              basicList3, 
              memberInfo, 
              /* ref */ flag3, 
              isPublic, 
              isField, 
              /* ref */ type2, 
              backingMember
            );
          }
        } else if ($T16().op_Inequality(fieldInfo = $T16().$As(memberInfo), null)) {
          type2.set(fieldInfo.get_FieldType());
          isPublic = fieldInfo.get_IsPublic();
          isField = true;
          if (!(flag && !fieldInfo.get_IsStatic())) {
            $thisType.ApplyDefaultBehaviour_AddMembers(
              this.model, 
              attributeFamily, 
              flag, 
              basicList2, 
              dataMemberOffset, 
              flag2, 
              implicitFields, 
              basicList3, 
              memberInfo, 
              /* ref */ flag3, 
              isPublic, 
              isField, 
              /* ref */ type2, 
              null
            );
          }
        } else if (!(!$T03().op_Inequality(methodInfo = $T03().$As(memberInfo), null) || flag)) {
          var array5 = $S09().CallStatic($T1D(), "Create", null, this.model, methodInfo, false);
          if (!((array5 === null) || ((array5.length | 0) === 0))) {
            $thisType.CheckForCallback(
              methodInfo, 
              array5, 
              "ProtoBuf.ProtoBeforeSerializationAttribute", 
              /* ref */ array2, 
              0
            );
            $thisType.CheckForCallback(
              methodInfo, 
              array5, 
              "ProtoBuf.ProtoAfterSerializationAttribute", 
              /* ref */ array2, 
              1
            );
            $thisType.CheckForCallback(
              methodInfo, 
              array5, 
              "ProtoBuf.ProtoBeforeDeserializationAttribute", 
              /* ref */ array2, 
              2
            );
            $thisType.CheckForCallback(
              methodInfo, 
              array5, 
              "ProtoBuf.ProtoAfterDeserializationAttribute", 
              /* ref */ array2, 
              3
            );
            $thisType.CheckForCallback(
              methodInfo, 
              array5, 
              "System.Runtime.Serialization.OnSerializingAttribute", 
              /* ref */ array2, 
              4
            );
            $thisType.CheckForCallback(
              methodInfo, 
              array5, 
              "System.Runtime.Serialization.OnSerializedAttribute", 
              /* ref */ array2, 
              5
            );
            $thisType.CheckForCallback(
              methodInfo, 
              array5, 
              "System.Runtime.Serialization.OnDeserializingAttribute", 
              /* ref */ array2, 
              6
            );
            $thisType.CheckForCallback(
              methodInfo, 
              array5, 
              "System.Runtime.Serialization.OnDeserializedAttribute", 
              /* ref */ array2, 
              7
            );
          }
        }
      }
      j = ((j + 1) | 0);
    }
    var array6 = JSIL.Array.New($T24(), basicList3.get_Count());
    basicList3.CopyTo(array6, 0);
    if (!(!flag2 && ((implicitFields.valueOf() | 0) === 0))) {
      Array.prototype.sort.call(array6);
      var num2 = num;
      var array7 = array6;

      for (var l = 0; l < (array7.length | 0); l = ((l + 1) | 0)) {
        var protoMemberAttribute = array7[l];
        if (!protoMemberAttribute.TagIsPinned) {
          protoMemberAttribute.Rebase(($temp00 = num2, 
              num2 = ((num2 + 1) | 0), 
              $temp00));
        }
      }
    }
    var array8 = array6;

    for (var m = 0; m < (array8.length | 0); m = ((m + 1) | 0)) {
      var normalizedAttribute = array8[m];
      var valueMember = this.ApplyDefaultBehaviour(flag, normalizedAttribute);
      if (valueMember !== null) {
        $S04().CallVirtual("Add", null, this, valueMember);
      }
    }
    if (array2.get() !== null) {
      $S0A().CallVirtual("SetCallbacks", null, this, 
        $thisType.Coalesce(array2.get(), 0, 4), 
        $thisType.Coalesce(array2.get(), 1, 5), 
        $thisType.Coalesce(array2.get(), 2, 6), 
        $thisType.Coalesce(array2.get(), 3, 7)
      );
    }
  }; 

  function MetaType_ApplyDefaultBehaviour$0C (isEnum, normalizedAttribute) {
    var obj = new JSIL.BoxedVariable(null);
    var member = null, attribute = null;
    if (!((normalizedAttribute !== null) && !$T08().op_Equality(member = normalizedAttribute.Member, null))) {
      return null;
    }
    var memberType = $T07().GetMemberType(member);
    var type = new JSIL.BoxedVariable(null);
    var defaultType = new JSIL.BoxedVariable(null);
    $thisType.ResolveListTypes(this.model, memberType, /* ref */ type, /* ref */ defaultType);
    if ($T02().op_Inequality(type.get(), null)) {
      var num = ((this.model).FindOrAddAuto(memberType, false, true, false) | 0);
      if (!((num < 0) || !((this.model).get_Item(memberType)).get_IgnoreListHandling())) {
        type.set(null);
        defaultType.set(null);
      }
    }
    var attribs = $S09().CallStatic($T1D(), "Create", null, this.model, member, true);
    var defaultValue = null;
    if ((this.model).get_UseImplicitZeroDefaults()) {
      var typeCode = $T07().GetTypeCode(memberType);
      switch (typeCode.valueOf()) {
        case 3: 
          defaultValue = $T1F().$Box(false);
          break;

        case 4: 
          defaultValue = $T27().$Box("\x00");
          break;

        case 5: 
          defaultValue = $T28().$Box(0);
          break;

        case 6: 
          defaultValue = $T29().$Box(0);
          break;

        case 7: 
          defaultValue = $T2A().$Box(0);
          break;

        case 8: 
          defaultValue = $T2B().$Box(0);
          break;

        case 9: 
          defaultValue = $T0B().$Box(0);
          break;

        case 10: 
          defaultValue = $T2C().$Box(0);
          break;

        case 11: 
          defaultValue = $T2D().Create(0, 0, 0);
          break;

        case 12: 
          defaultValue = $T2E().Create(0, 0, 0);
          break;

        case 13: 
          defaultValue = $T2F().$Box(0);
          break;

        case 14: 
          defaultValue = $T30().$Box(0);
          break;

        case 15: 
          defaultValue = $T31().Zero;
          break;

        default: 
          if (typeCode !== $T26().TimeSpan) {
            if (typeCode === $T26().Guid) {
              defaultValue = $T32().Empty.MemberwiseClone();
            }
          } else {
            defaultValue = $T33().Zero.MemberwiseClone();
          }
          break;

      }
    }
    if (!(((attribute = $thisType.GetAttribute(attribs, "System.ComponentModel.DefaultValueAttribute")) === null) || !attribute.TryGet("Value", /* ref */ obj))) {
      defaultValue = obj.get();
    }
    var valueMember = (
      (isEnum || 
        ((normalizedAttribute.get_Tag() | 0) > 0))
         ? $S03().Construct(this.model, this.type, normalizedAttribute.get_Tag(), member, memberType, type.get(), defaultType.get(), normalizedAttribute.get_DataFormat(), defaultValue)
         : null)
    ;
    if (valueMember !== null) {
      var declaringType = this.type;
      var propertyInfo = $T07().GetProperty(declaringType, JSIL.ConcatString(member.get_Name(), "Specified"), true);
      var getMethod = $T07().GetGetMethod(propertyInfo, true, true);
      if (!(!$T03().op_Equality(getMethod, null) && !getMethod.get_IsStatic())) {
        propertyInfo = null;
      }
      if ($T15().op_Inequality(propertyInfo, null)) {
        valueMember.SetSpecified(getMethod, $T07().GetSetMethod(propertyInfo, true, true));
      } else {
        var instanceMethod = $T07().GetInstanceMethod(declaringType, JSIL.ConcatString("ShouldSerialize", member.get_Name()), $T07().EmptyTypes);
        if (!(!$T03().op_Inequality(instanceMethod, null) || !$T02().op_Equality(
              instanceMethod.get_ReturnType(), 
              (this.model).MapType($T1F().__Type__)
            ))) {
          valueMember.SetSpecified(instanceMethod, null);
        }
      }
      if (!$T07().IsNullOrEmpty(normalizedAttribute.get_Name())) {
        valueMember.SetName(normalizedAttribute.get_Name());
      }
      valueMember.set_IsPacked(normalizedAttribute.get_IsPacked());
      valueMember.set_IsRequired(normalizedAttribute.get_IsRequired());
      valueMember.set_OverwriteList(normalizedAttribute.get_OverwriteList());
      if (normalizedAttribute.get_AsReferenceHasValue()) {
        valueMember.set_AsReference(normalizedAttribute.get_AsReference());
      }
      valueMember.set_DynamicType(normalizedAttribute.get_DynamicType());
    }
    return valueMember;
  }; 

  function MetaType_ApplyDefaultBehaviour_AddMembers (model, family, isEnum, partialMembers, dataMemberOffset, inferTagByName, implicitMode, members, member, /* ref */ forced, isPublic, isField, /* ref */ effectiveType, backingMember) {
    if (implicitMode !== $T20().AllPublic) {
      if (!((implicitMode !== $T20().AllFields) || !isField)) {
        forced.set(true);
      }
    } else if (isPublic) {
      forced.set(true);
    }
    if ((effectiveType.get()).IsSubclassOf(model.MapType($T35().__Type__))) {
      effectiveType.set(null);
    }
    if ($T02().op_Inequality(effectiveType.get(), null)) {
      var protoMemberAttribute = $thisType.NormalizeProtoMember(
        model, 
        member, 
        family, 
        forced.get(), 
        isEnum, 
        partialMembers, 
        dataMemberOffset, 
        inferTagByName, 
        backingMember
      );
      if (protoMemberAttribute !== null) {
        members.Add(protoMemberAttribute);
      }
    }
  }; 

  function MetaType_BuildSerializer () {
    var $temp00, $temp01;
    var members = new JSIL.BoxedVariable(null);
    var metaType2 = null;
    if ($T07().IsEnum(this.type)) {
      return new ($T36())(1, $T37().Variant, false, new ($T38())(this.type, this.GetEnumMap()));
    }
    var type = new JSIL.BoxedVariable((
        this.get_IgnoreListHandling()
           ? null
           : $T09().GetListItemType(this.model, this.type))
    );
    var defaultType = new JSIL.BoxedVariable(null);
    if ($T02().op_Inequality(type.get(), null)) {
      if ($T02().op_Inequality(this.surrogate, null)) {
        throw $S0B().Construct("Repeated data (a list, collection, etc) has inbuilt behaviour and cannot use a surrogate");
      }
      if (!((this.subTypes === null) || (((this.subTypes).get_Count() | 0) === 0))) {
        throw $S0B().Construct("Repeated data (a list, collection, etc) has inbuilt behaviour and cannot be subclassed");
      }
      defaultType.set(null);
      $thisType.ResolveListTypes(this.model, this.type, /* ref */ type, /* ref */ defaultType);
      var valueMember = $S0C().Construct(this.model, 1, this.type, type.get(), defaultType.get(), $T17().Default);
      return new ($T39())(this.model, this.type, JSIL.Array.New($T0B(), [1]), JSIL.Array.New($T06(), [valueMember.get_Serializer()]), null, true, true, null, this.constructType, this.factory);
    } else {
      if ($T02().op_Inequality(this.surrogate, null)) {

        for (var metaType = (this.model).get_Item(this.surrogate); (metaType2 = metaType.baseType) !== null; ) {
          metaType = metaType2;
        }
        return new ($T3A())(this.model, this.type, this.surrogate, metaType.get_Serializer());
      }
      if (!this.get_IsAutoTuple()) {
        (this.fields).Trim();
        var count = ((this.fields).get_Count() | 0);
        var num = ((
          (this.subTypes === null)
             ? 0
             : (this.subTypes).get_Count())
         | 0);
        var array = JSIL.Array.New($T0B(), ((count + num) | 0));
        var array2 = JSIL.Array.New($T06(), ((count + num) | 0));
        var num2 = 0;
        if (num !== 0) {

          for (var enumerator = (this.subTypes).GetEnumerator(); enumerator.MoveNext(); ) {
            var subType = $T1A().$Cast(enumerator.get_Current());
            if (!((subType.get_DerivedType()).get_IgnoreListHandling() || !$S0D().CallVirtual("IsAssignableFrom", null, (this.model).MapType($thisType.ienumerable), (subType.get_DerivedType()).get_Type()))) {
              throw $S0B().Construct("Repeated data (a list, collection, etc) has inbuilt behaviour and cannot be used as a subclass");
            }
            array[num2] = (subType.get_FieldNumber() | 0);
            array2[($temp00 = num2, 
              num2 = ((num2 + 1) | 0), 
              $temp00)] = subType.get_Serializer();
          }
        }
        if (count !== 0) {

          for (var enumerator2 = (this.fields).GetEnumerator(); enumerator2.MoveNext(); ) {
            var valueMember2 = $T0F().$Cast(enumerator2.get_Current());
            array[num2] = (valueMember2.get_FieldNumber() | 0);
            array2[($temp01 = num2, 
              num2 = ((num2 + 1) | 0), 
              $temp01)] = valueMember2.get_Serializer();
          }
        }
        var basicList = null;

        for (var metaType3 = this.get_BaseType(); metaType3 !== null; metaType3 = metaType3.get_BaseType()) {
          var methodInfo = (
            metaType3.get_HasCallbacks()
               ? (metaType3.get_Callbacks()).get_BeforeDeserialize()
               : null)
          ;
          if ($T03().op_Inequality(methodInfo, null)) {
            if (basicList === null) {
              basicList = new ($T04())();
            }
            basicList.Add(methodInfo);
          }
        }
        var array3 = null;
        if (basicList !== null) {
          array3 = JSIL.Array.New($T03(), basicList.get_Count());
          basicList.CopyTo(array3, 0);
          $T25().Reverse(array3);
        }
        return new ($T39())(this.model, this.type, array, array2, array3, (this.baseType === null), this.get_UseConstructor(), this.callbacks, this.constructType, this.factory);
      }
      var constructorInfo = $thisType.ResolveTupleConstructor(this.type, /* ref */ members);
      if ($T3F().op_Equality(constructorInfo, null)) {
        throw $S0E().Construct();
      }
      return new ($T40())(this.model, constructorInfo, members.get());
    }
  }; 

  function MetaType_CheckForCallback (method, attributes, callbackTypeName, /* ref */ callbacks, index) {

    for (var i = 0; i < (attributes.length | 0); i = ((i + 1) | 0)) {
      if (((attributes[i]).get_AttributeType()).get_FullName() == callbackTypeName) {
        if (callbacks.get() === null) {
          callbacks.set(JSIL.Array.New($T03(), 8));
        } else if ($T03().op_Inequality(callbacks.get()[index], null)) {
          var reflectedType = method.get_ReflectedType();
          throw $S0F().Construct(("Duplicate " + callbackTypeName + " callbacks on " + reflectedType.get_FullName()));
        }
        callbacks.get()[index] = method;
      }
    }
  }; 

  function MetaType_Coalesce (arr, x, y) {
    var methodInfo = arr[x];
    if ($T03().op_Equality(methodInfo, null)) {
      methodInfo = arr[y];
    }
    return methodInfo;
  }; 

  function MetaType_CompileInPlace () {
    this.serializer = $T42().Wrap(this.get_Serializer(), this.model);
  }; 

  function MetaType_get_AsReferenceDefault () {
    return this.HasFlag(32);
  }; 

  function MetaType_get_BaseType () {
    return this.baseType;
  }; 

  function MetaType_get_Callbacks () {
    if (this.callbacks === null) {
      this.callbacks = new ($T3E())(this);
    }
    return this.callbacks;
  }; 

  function MetaType_get_ConstructType () {
    return this.constructType;
  }; 

  function MetaType_get_EnumPassthru () {
    return this.HasFlag(2);
  }; 

  function MetaType_get_Fields () {
    return this.fields;
  }; 

  function MetaType_get_HasCallbacks () {
    return ((this.callbacks !== null) && (this.callbacks).get_NonTrivial());
  }; 

  function MetaType_get_HasSubtypes () {
    return ((this.subTypes !== null) && (((this.subTypes).get_Count() >>> 0) > (0 >>> 0)));
  }; 

  function MetaType_get_IgnoreListHandling () {
    return this.HasFlag(128);
  }; 

  function MetaType_get_IncludeSerializerMethod () {
    return !this.HasFlag(8);
  }; 

  function MetaType_get_IsAutoTuple () {
    return this.HasFlag(64);
  }; 

  function MetaType_get_IsGroup () {
    return this.HasFlag(256);
  }; 

  function MetaType_get_IsList () {
    var left = (
      this.get_IgnoreListHandling()
         ? null
         : $T09().GetListItemType(this.model, this.type))
    ;
    return $T02().op_Inequality(left, null);
  }; 

  function MetaType_get_IsValueType () {
    return (this.type).get_IsValueType();
  }; 

  function MetaType_get_Item$0D (fieldNumber) {

    for (var enumerator = (this.fields).GetEnumerator(); enumerator.MoveNext(); ) {
      var valueMember = $T0F().$Cast(enumerator.get_Current());
      if ((valueMember.get_FieldNumber() | 0) === (fieldNumber | 0)) {
        return valueMember;
      }
    }
    return null;
  }; 

  function MetaType_get_Item$0E (member) {
    if ($T08().op_Equality(member, null)) {
      return null;
    }

    for (var enumerator = (this.fields).GetEnumerator(); enumerator.MoveNext(); ) {
      var valueMember = $T0F().$Cast(enumerator.get_Current());
      if ($T08().op_Equality(valueMember.get_Member(), member)) {
        return valueMember;
      }
    }
    return null;
  }; 

  function MetaType_get_Model () {
    return this.model;
  }; 

  function MetaType_get_Name () {
    return this.$name;
  }; 

  function MetaType_get_Pending () {
    return this.HasFlag(1);
  }; 

  function MetaType_get_Serializer () {
    var opaqueToken = new JSIL.BoxedVariable(0);
    if (this.serializer === null) {
      opaqueToken.set(0);
      try {
        (this.model).TakeLock(/* ref */ opaqueToken);
        if (this.serializer === null) {
          this.SetFlag(4, true, false);
          this.serializer = this.BuildSerializer();
          if ((this.model).get_AutoCompile()) {
            this.CompileInPlace();
          }
        }
      } finally {
        (this.model).ReleaseLock(opaqueToken.get());
      }
    }
    return this.serializer;
  }; 

  function MetaType_get_Type () {
    return this.type;
  }; 

  function MetaType_get_UseConstructor () {
    return !this.HasFlag(16);
  }; 

  function MetaType_GetAsReferenceDefault (model, type) {
    var obj = new JSIL.BoxedVariable(null);
    if ($T02().op_Equality(type, null)) {
      throw $S00().Construct("type");
    }
    if ($T07().IsEnum(type)) {
      return false;
    }
    var array = $S07().CallStatic($T1D(), "Create", null, model, type, false);

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      if (!(!(((array[i]).get_AttributeType()).get_FullName() == "ProtoBuf.ProtoContractAttribute") || !(array[i]).TryGet("AsReferenceDefault", /* ref */ obj))) {
        return $T1F().$Cast(obj.get());
      }
    }
    return false;
  }; 

  function MetaType_GetAttribute (attribs, fullName) {

    for (var i = 0; i < (attribs.length | 0); i = ((i + 1) | 0)) {
      var attributeMap = attribs[i];
      if (!((attributeMap === null) || !((attributeMap.get_AttributeType()).get_FullName() == fullName))) {
        return attributeMap;
      }
    }
    return null;
  }; 

  function MetaType_GetBaseType (type) {
    return (type.type).get_BaseType();
  }; 

  function MetaType_GetContractFamily (model, type, attributes) {
    var array = new JSIL.BoxedVariable(null);
    var attributeFamily = $T1E().None;
    if (attributes === null) {
      attributes = $S07().CallStatic($T1D(), "Create", null, model, type, false);
    }
    var i = 0;
    var flag = new JSIL.BoxedVariable(false);

    while (i < (attributes.length | 0)) {
      var fullName = ((attributes[i]).get_AttributeType()).get_FullName();
      if (!(fullName == "ProtoBuf.ProtoContractAttribute")) {
        if (!(fullName == "System.Xml.Serialization.XmlTypeAttribute")) {
          if (fullName == "System.Runtime.Serialization.DataContractAttribute") {
            if (!model.get_AutoAddProtoContractTypesOnly()) {
              attributeFamily = $T1E().$Cast(attributeFamily | $T1E().DataContractSerialier);
            }
          }
        } else if (!model.get_AutoAddProtoContractTypesOnly()) {
          attributeFamily = $T1E().$Cast(attributeFamily | $T1E().XmlSerializer);
        }
      } else {
        flag.set(false);
        $thisType.GetFieldBoolean(/* ref */ flag, attributes[i], "UseProtoMembersOnly");
        if (flag.get()) {
          return $T1E().ProtoBuf;
        }
        attributeFamily = $T1E().$Cast(attributeFamily | $T1E().ProtoBuf);
      }
      i = ((i + 1) | 0);
    }
    if (!(((attributeFamily.valueOf() | 0) !== 0) || !$T3F().op_Inequality($thisType.ResolveTupleConstructor(type, /* ref */ array), null))) {
      attributeFamily = $T1E().$Cast(attributeFamily | $T1E().AutoTuple);
    }
    return attributeFamily;
  }; 

  function MetaType_GetDataFormat (/* ref */ value, attrib, memberName) {
    var obj = new JSIL.BoxedVariable(null);
    if (!((attrib !== null) && (((value.get()).valueOf() | 0) === 0))) {
      return;
    }
    if (!(!attrib.TryGet(memberName, /* ref */ obj) || (obj.get() === null))) {
      value.set($T17().$Cast(obj.get()));
    }
  }; 

  function MetaType_GetEnumMap () {
    if (this.HasFlag(2)) {
      return null;
    }
    var array = JSIL.Array.New($T45(), (this.fields).get_Count());

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var valueMember = $T0F().$Cast((this.fields).get_Item(i));
      var fieldNumber = (valueMember.get_FieldNumber() | 0);
      var rawEnumValue = valueMember.GetRawEnumValue();
      array[i] = new ($T45())(fieldNumber, rawEnumValue, valueMember.get_MemberType());
    }
    return array;
  }; 

  function MetaType_GetFieldBoolean$0F (/* ref */ value, attrib, memberName) {
    $thisType.GetFieldBoolean(/* ref */ value, attrib, memberName, true);
  }; 

  function MetaType_GetFieldBoolean$10 (/* ref */ value, attrib, memberName, publicOnly) {
    var obj = new JSIL.BoxedVariable(null);
    if (attrib === null) {
      return false;
    }
    if (value.get()) {
      return true;
    }
    if (!(!attrib.TryGet(memberName, publicOnly, /* ref */ obj) || (obj.get() === null))) {
      value.set($T1F().$Cast(obj.get()));
      return true;
    }
    return false;
  }; 

  function MetaType_GetFieldName (/* ref */ name, attrib, memberName) {
    var obj = new JSIL.BoxedVariable(null);
    if (!((attrib !== null) && $T07().IsNullOrEmpty(name.get()))) {
      return;
    }
    if (!(!attrib.TryGet(memberName, /* ref */ obj) || (obj.get() === null))) {
      name.set($T0C().$Cast(obj.get()));
    }
  }; 

  function MetaType_GetFieldNumber (/* ref */ value, attrib, memberName) {
    var obj = new JSIL.BoxedVariable(null);
    if (!((attrib !== null) && ((value.get() | 0) <= 0))) {
      return;
    }
    if (!(!attrib.TryGet(memberName, /* ref */ obj) || (obj.get() === null))) {
      value.set($T0B().$Cast(obj.get()));
    }
  }; 

  function MetaType_GetFields () {
    var array = JSIL.Array.New($T0F(), (this.fields).get_Count());
    (this.fields).CopyTo(array, 0);
    $S10().CallStatic($T25(), "Sort$b1", [$asm08.ProtoBuf.Meta.ValueMember], array, $T47().Default);
    return array;
  }; 

  function MetaType_GetIgnore (/* ref */ ignore, attrib, attribs, fullName) {
    if (!(!ignore.get() && (attrib !== null))) {
      return;
    }
    ignore.set($thisType.GetAttribute(attribs, fullName) !== null);
  }; 

  function MetaType_GetKey (demand, getBaseKey) {
    return (this.model).GetKey(this.type, demand, getBaseKey);
  }; 

  function MetaType_GetNextFieldNumber () {
    var num = 0;

    for (var enumerator = (this.fields).GetEnumerator(); enumerator.MoveNext(); ) {
      var valueMember = $T0F().$Cast(enumerator.get_Current());
      if ((valueMember.get_FieldNumber() | 0) > num) {
        num = (valueMember.get_FieldNumber() | 0);
      }
    }
    if (this.subTypes !== null) {

      for (var enumerator2 = (this.subTypes).GetEnumerator(); enumerator2.MoveNext(); ) {
        var subType = $T1A().$Cast(enumerator2.get_Current());
        if ((subType.get_FieldNumber() | 0) > num) {
          num = (subType.get_FieldNumber() | 0);
        }
      }
    }
    return ((num + 1) | 0);
  }; 

  function MetaType_GetRootType (source) {
    var metaType2 = null;

    while (source.serializer !== null) {
      var metaType = source.baseType;
      if (metaType === null) {
        return source;
      }
      source = metaType;
    }
    var runtimeTypeModel = source.model;
    var opaqueToken = new JSIL.BoxedVariable(0);
    try {
      runtimeTypeModel.TakeLock(/* ref */ opaqueToken);

      while ((metaType2 = source.baseType) !== null) {
        source = metaType2;
      }
      var result = source;
    } finally {
      runtimeTypeModel.ReleaseLock(opaqueToken.get());
    }
    return result;
  }; 

  function MetaType_GetSchemaTypeName () {
    var metaType = null;
    if ($T02().op_Inequality(this.surrogate, null)) {
      return ((this.model).get_Item(this.surrogate)).GetSchemaTypeName();
    }
    if (!$T07().IsNullOrEmpty(this.$name)) {
      return this.$name;
    }
    var text = (this.type).get_Name();
    var type2 = new JSIL.BoxedVariable(null);
    if ((this.type).get_IsGenericType()) {
      var stringBuilder = $S11().Construct(text);
      var num = (text.indexOf("`"));
      if (num >= 0) {
        stringBuilder.set_Length(num);
      }
      var genericArguments = (this.type).GetGenericArguments();

      for (var i = 0; i < (genericArguments.length | 0); i = ((i + 1) | 0)) {
        var type = genericArguments[i];
        $S12().CallVirtual("Append", null, stringBuilder, "_");
        type2.set(type);
        var key = ((this.model).GetKey(/* ref */ type2) | 0);
        if (!((key < 0) || 
            ((metaType = (this.model).get_Item(type2.get())) === null) || !$T02().op_Equality(metaType.surrogate, null))) {
          $S13().CallVirtual("Append", null, stringBuilder, metaType.GetSchemaTypeName());
        } else {
          $S13().CallVirtual("Append", null, stringBuilder, (type2.get()).get_Name());
        }
      }
      return stringBuilder.toString();
    }
    return text;
  }; 

  function MetaType_GetSubtypes () {
    if (!((this.subTypes !== null) && (((this.subTypes).get_Count() | 0) !== 0))) {
      return JSIL.Array.New($T1A(), 0);
    }
    var array = JSIL.Array.New($T1A(), (this.subTypes).get_Count());
    (this.subTypes).CopyTo(array, 0);
    $S14().CallStatic($T25(), "Sort$b1", [$asm08.ProtoBuf.Meta.SubType], array, $T4B().Default);
    return array;
  }; 

  function MetaType_GetSurrogateOrBaseOrSelf (deep) {
    if ($T02().op_Inequality(this.surrogate, null)) {
      return (this.model).get_Item(this.surrogate);
    }
    var metaType = this.baseType;
    if (metaType === null) {
      return this;
    }
    if (deep) {

      do {
        var result = metaType;
        metaType = metaType.baseType;
      } while (metaType !== null);
      return result;
    }
    return metaType;
  }; 

  function MetaType_GetSurrogateOrSelf () {
    if ($T02().op_Inequality(this.surrogate, null)) {
      return (this.model).get_Item(this.surrogate);
    }
    return this;
  }; 

  function MetaType_HasFamily (value, required) {
    return ($T1E().$Cast(value & required) === required);
  }; 

  function MetaType_HasFlag (flag) {
    return (((this.flags | 0) & (flag | 0)) === (flag | 0));
  }; 

  function MetaType_InbuiltType (type) {
    return $S0B().Construct(JSIL.ConcatString("Data of this type has inbuilt behaviour, and cannot be added to a model in this way: ", type.get_FullName()));
  }; 

  function MetaType_IsDefined (fieldNumber) {

    for (var enumerator = (this.fields).GetEnumerator(); enumerator.MoveNext(); ) {
      var valueMember = $T0F().$Cast(enumerator.get_Current());
      if ((valueMember.get_FieldNumber() | 0) === (fieldNumber | 0)) {
        return true;
      }
    }
    return false;
  }; 

  function MetaType_IsPrepared () {
    return $T42().$Is(this.serializer);
  }; 

  function MetaType_IsValidSubType (subType) {
    return $S0D().CallVirtual("IsAssignableFrom", null, this.type, subType);
  }; 

  function MetaType_NewLine (builder, indent) {
    return $S15().CallVirtual("Append", null, $T07().AppendLine(builder), " ", Math.imul(indent, 3));
  }; 

  function MetaType_NormalizeProtoMember (model, member, family, forced, isEnum, partialMembers, dataMemberOffset, inferByTagName, backingMember) {
    var obj = new JSIL.BoxedVariable(null);
    var obj2 = new JSIL.BoxedVariable(null);
    if (!(!$T08().op_Equality(member, null) && (((family.valueOf() | 0) !== 0) || 
          isEnum))) {
      return null;
    }
    var num = new JSIL.BoxedVariable(-2147483648);
    var num2 = ((
      inferByTagName
         ? -1
         : 1)
     | 0);
    var text = new JSIL.BoxedVariable(null);
    var isPacked = new JSIL.BoxedVariable(false);
    var flag = new JSIL.BoxedVariable(false);
    var flag2 = false;
    var isRequired = new JSIL.BoxedVariable(false);
    var asReference = new JSIL.BoxedVariable(false);
    var flag3 = new JSIL.BoxedVariable(false);
    var dynamicType = new JSIL.BoxedVariable(false);
    var tagIsPinned = false;
    var overwriteList = new JSIL.BoxedVariable(false);
    var dataFormat = new JSIL.BoxedVariable($T17().Default);
    if (isEnum) {
      forced = true;
    }
    var attribs = $S09().CallStatic($T1D(), "Create", null, model, member, true);
    if (isEnum) {
      var attribute = $thisType.GetAttribute(attribs, "ProtoBuf.ProtoIgnoreAttribute");
      if (attribute !== null) {
        flag.set(true);
      } else {
        attribute = $thisType.GetAttribute(attribs, "ProtoBuf.ProtoEnumAttribute");
        num.set($S16().CallStatic($T4C(), "ToInt32", null, ($T16().$Cast(member)).GetRawConstantValue()));
        if (attribute !== null) {
          $thisType.GetFieldName(/* ref */ text, attribute, "Name");
          if (!(!$T1F().$Cast(($T07().GetInstanceMethod(attribute.get_AttributeType(), "HasValue")).Invoke(attribute.get_Target(), null)) || !attribute.TryGet("Value", /* ref */ obj))) {
            num.set($T0B().$Cast(obj.get()));
          }
        }
      }
      flag2 = true;
    }
    if (!(flag.get() || flag2)) {
      attribute = $thisType.GetAttribute(attribs, "ProtoBuf.ProtoMemberAttribute");
      $thisType.GetIgnore(/* ref */ flag, attribute, attribs, "ProtoBuf.ProtoIgnoreAttribute");
      if (!(flag.get() || (attribute === null))) {
        $thisType.GetFieldNumber(/* ref */ num, attribute, "Tag");
        $thisType.GetFieldName(/* ref */ text, attribute, "Name");
        $thisType.GetFieldBoolean(/* ref */ isRequired, attribute, "IsRequired");
        $thisType.GetFieldBoolean(/* ref */ isPacked, attribute, "IsPacked");
        $thisType.GetFieldBoolean(/* ref */ overwriteList, attribute, "OverwriteList");
        $thisType.GetDataFormat(/* ref */ dataFormat, attribute, "DataFormat");
        $thisType.GetFieldBoolean(/* ref */ flag3, attribute, "AsReferenceHasValue", false);
        if (flag3.get()) {
          flag3.set($thisType.GetFieldBoolean(/* ref */ asReference, attribute, "AsReference", true));
        }
        $thisType.GetFieldBoolean(/* ref */ dynamicType, attribute, "DynamicType");
        tagIsPinned = flag2 = (num.get() | 0) > 0;
      }
      if (!(flag2 || (partialMembers === null))) {

      $loop0: 
        for (var enumerator = partialMembers.GetEnumerator(); enumerator.MoveNext(); ) {
          var attributeMap = $T1D().$Cast(enumerator.get_Current());
          if (!(!attributeMap.TryGet("MemberName", /* ref */ obj2) || !($T0C().$Cast(obj2.get()) == member.get_Name()))) {
            $thisType.GetFieldNumber(/* ref */ num, attributeMap, "Tag");
            $thisType.GetFieldName(/* ref */ text, attributeMap, "Name");
            $thisType.GetFieldBoolean(/* ref */ isRequired, attributeMap, "IsRequired");
            $thisType.GetFieldBoolean(/* ref */ isPacked, attributeMap, "IsPacked");
            $thisType.GetFieldBoolean(/* ref */ overwriteList, attribute, "OverwriteList");
            $thisType.GetDataFormat(/* ref */ dataFormat, attributeMap, "DataFormat");
            $thisType.GetFieldBoolean(/* ref */ flag3, attribute, "AsReferenceHasValue", false);
            if (flag3.get()) {
              flag3.set($thisType.GetFieldBoolean(/* ref */ asReference, attributeMap, "AsReference", true));
            }
            $thisType.GetFieldBoolean(/* ref */ dynamicType, attributeMap, "DynamicType");
            if (flag2 = tagIsPinned = (num.get() | 0) > 0) {
              break $loop0;
            }
          }
        }
      }
    }
    if (!(flag.get() || 
        flag2 || !$thisType.HasFamily(family, $T1E().DataContractSerialier))) {
      attribute = $thisType.GetAttribute(attribs, "System.Runtime.Serialization.DataMemberAttribute");
      if (attribute !== null) {
        $thisType.GetFieldNumber(/* ref */ num, attribute, "Order");
        $thisType.GetFieldName(/* ref */ text, attribute, "Name");
        $thisType.GetFieldBoolean(/* ref */ isRequired, attribute, "IsRequired");
        flag2 = (num.get() | 0) >= num2;
        if (flag2) {
          num.set((((num.get() | 0) + (dataMemberOffset | 0)) | 0));
        }
      }
    }
    if (!(flag.get() || 
        flag2 || !$thisType.HasFamily(family, $T1E().XmlSerializer))) {
      attribute = $thisType.GetAttribute(attribs, "System.Xml.Serialization.XmlElementAttribute");
      if (attribute === null) {
        attribute = $thisType.GetAttribute(attribs, "System.Xml.Serialization.XmlArrayAttribute");
      }
      $thisType.GetIgnore(/* ref */ flag, attribute, attribs, "System.Xml.Serialization.XmlIgnoreAttribute");
      if (!((attribute === null) || flag.get())) {
        $thisType.GetFieldNumber(/* ref */ num, attribute, "Order");
        $thisType.GetFieldName(/* ref */ text, attribute, "ElementName");
        flag2 = (num.get() | 0) >= num2;
      }
    }
    if (!(flag.get() || 
        flag2 || ($thisType.GetAttribute(attribs, "System.NonSerializedAttribute") === null))) {
      flag.set(true);
    }
    if (!(!flag.get() && (((num.get() | 0) >= num2) || 
          forced))) {
      return null;
    }
    var protoMemberAttribute = $S17().Construct(num.get(), (forced | inferByTagName));
    protoMemberAttribute.set_AsReference(asReference.get());
    protoMemberAttribute.set_AsReferenceHasValue(flag3.get());
    protoMemberAttribute.set_DataFormat(dataFormat.get());
    protoMemberAttribute.set_DynamicType(dynamicType.get());
    protoMemberAttribute.set_IsPacked(isPacked.get());
    protoMemberAttribute.set_OverwriteList(overwriteList.get());
    protoMemberAttribute.set_IsRequired(isRequired.get());
    protoMemberAttribute.set_Name((
        $T07().IsNullOrEmpty(text.get())
           ? member.get_Name()
           : text.get())
    );
    protoMemberAttribute.Member = JSIL.Coalesce(backingMember, member);
    protoMemberAttribute.TagIsPinned = tagIsPinned;
    return protoMemberAttribute;
  }; 

  function MetaType_ProtoBuf_Serializers_ISerializerProxy_get_Serializer () {
    return this.get_Serializer();
  }; 

  function MetaType_ResolveListTypes (model, type, /* ref */ itemType, /* ref */ defaultType) {
    var genericArguments = null;
    if ($T02().op_Equality(type, null)) {
      return;
    }
    if (type.get_IsArray()) {
      if ((type.GetArrayRank() | 0) !== 1) {
        throw $S02().Construct("Multi-dimensional arrays are not supported");
      }
      itemType.set(type.GetElementType());
      if ($T02().op_Equality(itemType.get(), model.MapType($T29().__Type__))) {
        itemType.set(null);
        defaultType.set(null);
      } else {
        defaultType.set(type);
      }
    }
    if ($T02().op_Equality(itemType.get(), null)) {
      itemType.set($T09().GetListItemType(model, type));
    }
    var left = new JSIL.BoxedVariable(null);
    var type3 = new JSIL.BoxedVariable(null);
    if ($T02().op_Inequality(itemType.get(), null)) {
      left.set(null);
      type3.set(null);
      $thisType.ResolveListTypes(model, itemType.get(), /* ref */ left, /* ref */ type3);
      if ($T02().op_Inequality(left.get(), null)) {
        throw $T09().CreateNestedListsNotSupported();
      }
    }
    if (!(!$T02().op_Inequality(itemType.get(), null) || !$T02().op_Equality(defaultType.get(), null))) {
      if (!(!type.get_IsClass() || 
          type.get_IsAbstract() || !$T3F().op_Inequality($T07().GetConstructor(type, $T07().EmptyTypes, true), null))) {
        defaultType.set(type);
      }
      if (!(!$T02().op_Equality(defaultType.get(), null) || !type.get_IsInterface())) {
        if (!(!type.get_IsGenericType() || 
            !$T02().op_Equality(
              type.GetGenericTypeDefinition(), 
              model.MapType($T4D().__Type__)
            ) || !$T02().op_Equality(itemType.get(), (model.MapType($T4E().__Type__)).MakeGenericType(genericArguments = type.GetGenericArguments())))) {
          defaultType.set((model.MapType($T4F().__Type__)).MakeGenericType(genericArguments));
        } else {
          defaultType.set((model.MapType($T50().__Type__)).MakeGenericType(JSIL.Array.New($T02(), [itemType.get()])));
        }
      }
      if (!(!$T02().op_Inequality(defaultType.get(), null) || $T07().IsAssignableFrom(type, defaultType.get()))) {
        defaultType.set(null);
      }
    }
  }; 

  function MetaType_ResolveMethod (name, instance) {
    if ($T07().IsNullOrEmpty(name)) {
      return null;
    }
    if (!instance) {
      return $T07().GetStaticMethod(this.type, name);
    }
    return $T07().GetInstanceMethod(this.type, name);
  }; 

  function MetaType_ResolveTupleConstructor (type, /* ref */ mappedMembers) {
    mappedMembers.set(null);
    if ($T02().op_Equality(type, null)) {
      throw $S00().Construct("type");
    }
    if (type.get_IsAbstract()) {
      return null;
    }
    var constructors = $T07().GetConstructors(type, false);
    if (!(((constructors.length | 0) !== 0) && (((constructors.length | 0) !== 1) || 
          (((constructors[0]).GetParameters().length | 0) !== 0)))) {
      return null;
    }
    var instanceFieldsAndProperties = $T07().GetInstanceFieldsAndProperties(type, true);
    var basicList = new ($T04())();
    var flag = ($S18().CallVirtual("IndexOf", null, type.get_Name(), "Tuple", $T53().OrdinalIgnoreCase) | 0) < 0;

    for (var i = 0; i < (instanceFieldsAndProperties.length | 0); i = ((i + 1) | 0)) {
      var propertyInfo = $T15().$As(instanceFieldsAndProperties[i]);
      if ($T15().op_Inequality(propertyInfo, null)) {
        if (!propertyInfo.get_CanRead()) {
          return null;
        }
        if (!(!flag || 
            !propertyInfo.get_CanWrite() || !$T03().op_Inequality($T07().GetSetMethod(propertyInfo, false, false), null))) {
          return null;
        }
        basicList.Add(propertyInfo);
      } else {
        var fieldInfo = $T16().$As(instanceFieldsAndProperties[i]);
        if ($T16().op_Inequality(fieldInfo, null)) {
          if (!(!flag || fieldInfo.get_IsInitOnly())) {
            return null;
          }
          basicList.Add(fieldInfo);
        }
      }
    }
    if ((basicList.get_Count() | 0) === 0) {
      return null;
    }
    var array = JSIL.Array.New($T08(), basicList.get_Count());
    basicList.CopyTo(array, 0);
    var array2 = JSIL.Array.New($T0B(), array.length);
    var num = 0;
    var result = null;
    mappedMembers.set(JSIL.Array.New($T08(), array2.length));

    for (var j = 0; j < (constructors.length | 0); j = ((j + 1) | 0)) {
      var parameters = (constructors[j]).GetParameters();
      if ((parameters.length | 0) === (array.length | 0)) {

        for (var k = 0; k < (array2.length | 0); k = ((k + 1) | 0)) {
          array2[k] = -1;
        }

        for (var l = 0; l < (parameters.length | 0); l = ((l + 1) | 0)) {

          for (var m = 0; m < (array.length | 0); m = ((m + 1) | 0)) {
            if (($S19().CallStatic($T0C(), "Compare", null, 
                (parameters[l]).get_Name(), 
                (array[m]).get_Name(), 
                $T53().OrdinalIgnoreCase
              ) | 0) === 0) {
              var memberType = $T07().GetMemberType(array[m]);
              if (!$T02().op_Inequality(memberType, (parameters[l]).get_ParameterType())) {
                array2[l] = m;
              }
            }
          }
        }
        var flag2 = false;

      $loop5: 
        for (var n = 0; n < (array2.length | 0); n = ((n + 1) | 0)) {
          if ((array2[n] | 0) < 0) {
            flag2 = true;
            break $loop5;
          }
          mappedMembers.get()[n] = array[array2[n]];
        }
        if (!flag2) {
          num = ((num + 1) | 0);
          result = constructors[j];
        }
      }
    }
    if (num !== 1) {
      return null;
    }
    return result;
  }; 

  function MetaType_set_AsReferenceDefault (value) {
    this.SetFlag(32, value, true);
  }; 

  function MetaType_set_ConstructType (value) {
    this.ThrowIfFrozen();
    this.constructType = value;
  }; 

  function MetaType_set_EnumPassthru (value) {
    this.SetFlag(2, value, true);
  }; 

  function MetaType_set_IgnoreListHandling (value) {
    this.SetFlag(128, value, true);
  }; 

  function MetaType_set_IncludeSerializerMethod (value) {
    this.SetFlag(8, !value, true);
  }; 

  function MetaType_set_IsGroup (value) {
    this.SetFlag(256, value, true);
  }; 

  function MetaType_set_Name (value) {
    this.ThrowIfFrozen();
    this.$name = value;
  }; 

  function MetaType_set_Pending (value) {
    this.SetFlag(1, value, false);
  }; 

  function MetaType_set_UseConstructor (value) {
    this.SetFlag(16, !value, true);
  }; 

  function MetaType_SetBaseType (baseType) {
    if (baseType === null) {
      throw $S00().Construct("baseType");
    }
    if (this.baseType === baseType) {
      return;
    }
    if (this.baseType !== null) {
      throw $S06().Construct("A type can only participate in one inheritance hierarchy");
    }

    for (var metaType = baseType; metaType !== null; metaType = metaType.baseType) {
      if (metaType === this) {
        throw $S06().Construct("Cyclic inheritance is not allowed");
      }
    }
    this.baseType = baseType;
  }; 

  function MetaType_SetCallbacks$11 (beforeSerialize, afterSerialize, beforeDeserialize, afterDeserialize) {
    var callbackSet = this.get_Callbacks();
    callbackSet.set_BeforeSerialize(beforeSerialize);
    callbackSet.set_AfterSerialize(afterSerialize);
    callbackSet.set_BeforeDeserialize(beforeDeserialize);
    callbackSet.set_AfterDeserialize(afterDeserialize);
    return this;
  }; 

  function MetaType_SetCallbacks$12 (beforeSerialize, afterSerialize, beforeDeserialize, afterDeserialize) {
    if (this.get_IsValueType()) {
      throw $S0E().Construct();
    }
    var callbackSet = this.get_Callbacks();
    callbackSet.set_BeforeSerialize(this.ResolveMethod(beforeSerialize, true));
    callbackSet.set_AfterSerialize(this.ResolveMethod(afterSerialize, true));
    callbackSet.set_BeforeDeserialize(this.ResolveMethod(beforeDeserialize, true));
    callbackSet.set_AfterDeserialize(this.ResolveMethod(afterDeserialize, true));
    return this;
  }; 

  function MetaType_SetFactory$13 (factory) {
    (this.model).VerifyFactory(factory, this.type);
    this.ThrowIfFrozen();
    this.factory = factory;
    return this;
  }; 

  function MetaType_SetFactory$14 (factory) {
    return $S1A().CallVirtual("SetFactory", null, this, this.ResolveMethod(factory, false));
  }; 

  function MetaType_SetFlag (flag, value, throwIfFrozen) {
    if (!(!throwIfFrozen || (this.HasFlag(flag) === value))) {
      this.ThrowIfFrozen();
    }
    if (value) {
      this.flags = (this.flags | 0) | (flag | 0);
      return;
    }
    this.flags = (this.flags | 0) & (~flag & 0xFFFF);
  }; 

  function MetaType_SetSurrogate (surrogateType) {
    if ($T02().op_Equality(surrogateType, this.type)) {
      surrogateType = null;
    }
    if (!(!$T02().op_Inequality(surrogateType, null) || 
        !$T02().op_Inequality(surrogateType, null) || !$T07().IsAssignableFrom((this.model).MapType($T00().__Type__), surrogateType))) {
      throw $S0B().Construct("Repeated data (a list, collection, etc) has inbuilt behaviour and cannot be used as a surrogate");
    }
    this.ThrowIfFrozen();
    this.surrogate = surrogateType;
  }; 

  function MetaType_ThrowIfFrozen () {
    if (((this.flags | 0) & 4) !== 0) {
      throw $S06().Construct(JSIL.ConcatString("The type cannot be changed once a serializer has been generated for ", (this.type).get_FullName()));
    }
  }; 

  function MetaType_toString () {
    return (this.type).toString();
  }; 

  function MetaType_WriteSchema (builder, indent, /* ref */ requiresBclImport) {
    var array2 = new JSIL.BoxedVariable(null);
    if ($T02().op_Inequality(this.surrogate, null)) {
      return;
    }
    var array = JSIL.Array.New($T0F(), (this.fields).get_Count());
    (this.fields).CopyTo(array, 0);
    $S10().CallStatic($T25(), "Sort$b1", [$asm08.ProtoBuf.Meta.ValueMember], array, $T47().Default);
    if (this.get_IsList()) {
      var schemaTypeName = (this.model).GetSchemaTypeName(
        $T09().GetListItemType(this.model, this.type), 
        $T17().Default, 
        false, 
        false, 
        /* ref */ requiresBclImport
      );
      $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "message "), this.GetSchemaTypeName()), " {");
      $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), "repeated "), schemaTypeName), " items = 1;");
      $S12().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "}");
      return;
    }
    if (this.get_IsAutoTuple()) {
      if ($T3F().op_Inequality($thisType.ResolveTupleConstructor(this.type, /* ref */ array2), null)) {
        $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "message "), this.GetSchemaTypeName()), " {");

        for (var i = 0; i < (array2.get().length | 0); i = ((i + 1) | 0)) {
          if ($T15().$As(array2.get()[i]) !== null) {
            var effectiveType = ($T15().$Cast(array2.get()[i])).get_PropertyType();
          } else {
            if ($T16().$As(array2.get()[i]) === null) {
              throw $S02().Construct(JSIL.ConcatString("Unknown member type: ", (JSIL.GetType(array2.get()[i])).get_Name()));
            }
            effectiveType = ($T16().$Cast(array2.get()[i])).get_FieldType();
          }
          $S12().CallVirtual("Append", null, $S1B().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S12().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), "optional "), System.String.Replace((this.model).GetSchemaTypeName(
                        effectiveType, 
                        $T17().Default, 
                        false, 
                        false, 
                        /* ref */ requiresBclImport
                      ), ".", "_")), " "), (array2.get()[i]).get_Name()), " = "), ((i + 1) | 0)), ";");
        }
        $S12().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "}");
        return;
      }
    } else {
      if ($T07().IsEnum(this.type)) {
        $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "enum "), this.GetSchemaTypeName()), " {");
        if (!(((array.length | 0) !== 0) || !this.get_EnumPassthru())) {
          if ((this.type).IsDefined((this.model).MapType($T0A().__Type__), false)) {
            $S13().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), "// this is a composite/flags enumeration");
          } else {
            $S13().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), "// this enumeration will be passed as a raw value");
          }
          var array3 = (this.type).GetFields();

          for (var j = 0; j < (array3.length | 0); j = ((j + 1) | 0)) {
            var fieldInfo = array3[j];
            if (!(!fieldInfo.get_IsStatic() || !fieldInfo.get_IsLiteral())) {
              var rawConstantValue = fieldInfo.GetRawConstantValue();
              $S13().CallVirtual("Append", null, $S1C().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), fieldInfo.get_Name()), " = "), rawConstantValue), ";");
            }
          }
        } else {
          var array4 = array;

          for (var k = 0; k < (array4.length | 0); k = ((k + 1) | 0)) {
            var valueMember = array4[k];
            $S12().CallVirtual("Append", null, $S1B().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), valueMember.get_Name()), " = "), valueMember.get_FieldNumber()), ";");
          }
        }
        $S12().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "}");
        return;
      }
      $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "message "), this.GetSchemaTypeName()), " {");
      var array5 = array;

      for (var l = 0; l < (array5.length | 0); l = ((l + 1) | 0)) {
        var valueMember2 = array5[l];
        var value = (
          $T02().op_Inequality(valueMember2.get_ItemType(), null)
             ? "repeated"
             : (
              valueMember2.get_IsRequired()
                 ? "required"
                 : "optional")
        )
        ;
        $S12().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), value), " ");
        if (valueMember2.get_DataFormat() === $T17().Group) {
          $S13().CallVirtual("Append", null, builder, "group ");
        }
        var schemaTypeName2 = valueMember2.GetSchemaTypeName(true, /* ref */ requiresBclImport);
        $S1B().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, builder, schemaTypeName2), " "), valueMember2.get_Name()), " = "), valueMember2.get_FieldNumber());
        if (!((valueMember2.get_DefaultValue() === null) || valueMember2.get_IsRequired())) {
          if ($T0C().$As(valueMember2.get_DefaultValue()) !== null) {
            $S13().CallVirtual("Append", null, $S1C().CallVirtual("Append", null, $S13().CallVirtual("Append", null, builder, " [default = \""), valueMember2.get_DefaultValue()), "\"]");
          } else if ($T1F().$Is(valueMember2.get_DefaultValue())) {
            $S13().CallVirtual("Append", null, builder, (
                $T1F().$Cast(valueMember2.get_DefaultValue())
                   ? " [default = true]"
                   : " [default = false]")
            );
          } else {
            $S12().CallVirtual("Append", null, $S1C().CallVirtual("Append", null, $S13().CallVirtual("Append", null, builder, " [default = "), valueMember2.get_DefaultValue()), "]");
          }
        }
        if (!(!$T02().op_Inequality(valueMember2.get_ItemType(), null) || !valueMember2.get_IsPacked())) {
          $S13().CallVirtual("Append", null, builder, " [packed=true]");
        }
        $S12().CallVirtual("Append", null, builder, ";");
        if (!(!(schemaTypeName2 == "bcl.NetObjectProxy") || 
            !valueMember2.get_AsReference() || valueMember2.get_DynamicType())) {
          $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, builder, " // reference-tracked "), valueMember2.GetSchemaTypeName(false, /* ref */ requiresBclImport));
        }
      }
      if (!((this.subTypes === null) || (((this.subTypes).get_Count() | 0) === 0))) {
        $S13().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), "// the following represent sub-types; at most 1 should have a value");
        var array6 = JSIL.Array.New($T1A(), (this.subTypes).get_Count());
        (this.subTypes).CopyTo(array6, 0);
        $S14().CallStatic($T25(), "Sort$b1", [$asm08.ProtoBuf.Meta.SubType], array6, $T4B().Default);
        var array7 = array6;

        for (var m = 0; m < (array7.length | 0); m = ((m + 1) | 0)) {
          var subType = array7[m];
          var schemaTypeName3 = (subType.get_DerivedType()).GetSchemaTypeName();
          $S12().CallVirtual("Append", null, $S1B().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $S13().CallVirtual("Append", null, $thisType.NewLine(builder, (((indent | 0) + 1) | 0)), "optional "), schemaTypeName3), " "), schemaTypeName3), " = "), subType.get_FieldNumber()), ";");
        }
      }
      $S12().CallVirtual("Append", null, $thisType.NewLine(builder, indent), "}");
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.MetaType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Reflection.MethodInfo")
        ]), 
      MetaType__ctor
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.String]), 
      MetaType_Add$00
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.String]), 
      MetaType_Add$01
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.String])]), 
      MetaType_Add$02
    )
      .Parameter(0, "memberNames", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.String, 
          $.Object
        ]), 
      MetaType_Add$03
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.String, 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")
        ]), 
      MetaType_Add$04
    );

    $.Method({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.ValueMember")), 
      MetaType_Add$05
    );

    $.Method({Static:false, Public:true }, "AddField", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.ValueMember"), [$.Int32, $.String]), 
      MetaType_AddField$06
    );

    $.Method({Static:false, Public:true }, "AddField", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.ValueMember"), [
          $.Int32, $.String, 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")
        ]), 
      MetaType_AddField$07
    );

    $.Method({Static:false, Public:false}, "AddField", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.ValueMember"), [
          $.Int32, $.String, 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.Object
        ]), 
      MetaType_AddField$08
    );

    $.Method({Static:false, Public:true }, "AddSubType", 
      new JSIL.MethodSignature($.Type, [$.Int32, $asm07.TypeRef("System.Type")]), 
      MetaType_AddSubType$09
    );

    $.Method({Static:false, Public:true }, "AddSubType", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.DataFormat")
        ]), 
      MetaType_AddSubType$0A
    );

    $.Method({Static:false, Public:false}, "ApplyDefaultBehaviour", 
      JSIL.MethodSignature.Void, 
      MetaType_ApplyDefaultBehaviour$0B
    );

    $.Method({Static:false, Public:false}, "ApplyDefaultBehaviour", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.ValueMember"), [$.Boolean, $asm08.TypeRef("ProtoBuf.ProtoMemberAttribute")]), 
      MetaType_ApplyDefaultBehaviour$0C
    );

    $.Method({Static:true , Public:false}, "ApplyDefaultBehaviour_AddMembers", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm08.TypeRef("ProtoBuf.Meta.MetaType+AttributeFamily"), 
          $.Boolean, $asm08.TypeRef("ProtoBuf.Meta.BasicList"), 
          $.Int32, $.Boolean, 
          $asm08.TypeRef("ProtoBuf.ImplicitFields"), $asm08.TypeRef("ProtoBuf.Meta.BasicList"), 
          $asm07.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")]), $asm07.TypeRef("System.Reflection.MemberInfo")
        ]), 
      MetaType_ApplyDefaultBehaviour_AddMembers
    );

    $.Method({Static:false, Public:false}, "BuildSerializer", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer")), 
      MetaType_BuildSerializer
    );

    $.Method({Static:true , Public:false}, "CheckForCallback", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Meta.AttributeMap")]), 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")])]), 
          $.Int32
        ]), 
      MetaType_CheckForCallback
    );

    $.Method({Static:true , Public:false}, "Coalesce", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodInfo")]), $.Int32, 
          $.Int32
        ]), 
      MetaType_Coalesce
    );

    $.Method({Static:false, Public:true }, "CompileInPlace", 
      JSIL.MethodSignature.Void, 
      MetaType_CompileInPlace
    );

    $.Method({Static:false, Public:true }, "get_AsReferenceDefault", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_AsReferenceDefault
    );

    $.Method({Static:false, Public:true }, "get_BaseType", 
      JSIL.MethodSignature.Return($.Type), 
      MetaType_get_BaseType
    );

    $.Method({Static:false, Public:true }, "get_Callbacks", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Meta.CallbackSet")), 
      MetaType_get_Callbacks
    );

    $.Method({Static:false, Public:true }, "get_ConstructType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      MetaType_get_ConstructType
    );

    $.Method({Static:false, Public:true }, "get_EnumPassthru", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_EnumPassthru
    );

    $.Method({Static:false, Public:false}, "get_Fields", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerable")), 
      MetaType_get_Fields
    );

    $.Method({Static:false, Public:true }, "get_HasCallbacks", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_HasCallbacks
    );

    $.Method({Static:false, Public:true }, "get_HasSubtypes", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_HasSubtypes
    );

    $.Method({Static:false, Public:true }, "get_IgnoreListHandling", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_IgnoreListHandling
    );

    $.Method({Static:false, Public:true }, "get_IncludeSerializerMethod", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_IncludeSerializerMethod
    );

    $.Method({Static:false, Public:false}, "get_IsAutoTuple", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_IsAutoTuple
    );

    $.Method({Static:false, Public:true }, "get_IsGroup", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_IsGroup
    );

    $.Method({Static:false, Public:false}, "get_IsList", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_IsList
    );

    $.Method({Static:false, Public:false}, "get_IsValueType", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_IsValueType
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.ValueMember"), [$.Int32]), 
      MetaType_get_Item$0D
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.ValueMember"), [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
      MetaType_get_Item$0E
    );

    $.Method({Static:false, Public:false}, "get_Model", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      MetaType_get_Model
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      MetaType_get_Name
    );

    $.Method({Static:false, Public:false}, "get_Pending", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_Pending
    );

    $.Method({Static:false, Public:false}, "get_Serializer", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer")), 
      MetaType_get_Serializer
    );

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      MetaType_get_Type
    );

    $.Method({Static:false, Public:true }, "get_UseConstructor", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_get_UseConstructor
    );

    $.Method({Static:true , Public:false}, "GetAsReferenceDefault", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm07.TypeRef("System.Type")]), 
      MetaType_GetAsReferenceDefault
    );

    $.Method({Static:true , Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.AttributeMap"), [$jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Meta.AttributeMap")]), $.String]), 
      MetaType_GetAttribute
    );

    $.Method({Static:true , Public:false}, "GetBaseType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Type]), 
      MetaType_GetBaseType
    );

    $.Method({Static:true , Public:false}, "GetContractFamily", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.MetaType+AttributeFamily"), [
          $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Meta.AttributeMap")])
        ]), 
      MetaType_GetContractFamily
    );

    $.Method({Static:true , Public:false}, "GetDataFormat", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("ProtoBuf.DataFormat")]), $asm08.TypeRef("ProtoBuf.Meta.AttributeMap"), 
          $.String
        ]), 
      MetaType_GetDataFormat
    );

    $.Method({Static:false, Public:false}, "GetEnumMap", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Serializers.EnumSerializer+EnumPair")])), 
      MetaType_GetEnumMap
    );

    $.Method({Static:true , Public:false}, "GetFieldBoolean", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $asm08.TypeRef("ProtoBuf.Meta.AttributeMap"), 
          $.String
        ]), 
      MetaType_GetFieldBoolean$0F
    );

    $.Method({Static:true , Public:false}, "GetFieldBoolean", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $asm08.TypeRef("ProtoBuf.Meta.AttributeMap"), 
          $.String, $.Boolean
        ]), 
      MetaType_GetFieldBoolean$10
    );

    $.Method({Static:true , Public:false}, "GetFieldName", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm08.TypeRef("ProtoBuf.Meta.AttributeMap"), 
          $.String
        ]), 
      MetaType_GetFieldName
    );

    $.Method({Static:true , Public:false}, "GetFieldNumber", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm08.TypeRef("ProtoBuf.Meta.AttributeMap"), 
          $.String
        ]), 
      MetaType_GetFieldNumber
    );

    $.Method({Static:false, Public:true }, "GetFields", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Meta.ValueMember")])), 
      MetaType_GetFields
    );

    $.Method({Static:true , Public:false}, "GetIgnore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $asm08.TypeRef("ProtoBuf.Meta.AttributeMap"), 
          $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Meta.AttributeMap")]), $.String
        ]), 
      MetaType_GetIgnore
    );

    $.Method({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $.Boolean]), 
      MetaType_GetKey
    );

    $.Method({Static:false, Public:false}, "GetNextFieldNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      MetaType_GetNextFieldNumber
    );

    $.Method({Static:true , Public:false}, "GetRootType", 
      new JSIL.MethodSignature($.Type, [$.Type]), 
      MetaType_GetRootType
    );

    $.Method({Static:false, Public:false}, "GetSchemaTypeName", 
      JSIL.MethodSignature.Return($.String), 
      MetaType_GetSchemaTypeName
    );

    $.Method({Static:false, Public:true }, "GetSubtypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Meta.SubType")])), 
      MetaType_GetSubtypes
    );

    $.Method({Static:false, Public:false}, "GetSurrogateOrBaseOrSelf", 
      new JSIL.MethodSignature($.Type, [$.Boolean]), 
      MetaType_GetSurrogateOrBaseOrSelf
    );

    $.Method({Static:false, Public:false}, "GetSurrogateOrSelf", 
      JSIL.MethodSignature.Return($.Type), 
      MetaType_GetSurrogateOrSelf
    );

    $.Method({Static:true , Public:false}, "HasFamily", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.Meta.MetaType+AttributeFamily"), $asm08.TypeRef("ProtoBuf.Meta.MetaType+AttributeFamily")]), 
      MetaType_HasFamily
    );

    $.Method({Static:false, Public:false}, "HasFlag", 
      new JSIL.MethodSignature($.Boolean, [$.UInt16]), 
      MetaType_HasFlag
    );

    $.Method({Static:true , Public:false}, "InbuiltType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Type")]), 
      MetaType_InbuiltType
    );

    $.Method({Static:false, Public:false}, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      MetaType_IsDefined
    );

    $.Method({Static:false, Public:false}, "IsPrepared", 
      JSIL.MethodSignature.Return($.Boolean), 
      MetaType_IsPrepared
    );

    $.Method({Static:false, Public:false}, "IsValidSubType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")]), 
      MetaType_IsValidSubType
    );

    $.Method({Static:true , Public:false}, "NewLine", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Text.StringBuilder"), [$asm07.TypeRef("System.Text.StringBuilder"), $.Int32]), 
      MetaType_NewLine
    );

    $.Method({Static:true , Public:false}, "NormalizeProtoMember", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.ProtoMemberAttribute"), [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Reflection.MemberInfo"), 
          $asm08.TypeRef("ProtoBuf.Meta.MetaType+AttributeFamily"), $.Boolean, 
          $.Boolean, $asm08.TypeRef("ProtoBuf.Meta.BasicList"), 
          $.Int32, $.Boolean, 
          $asm07.TypeRef("System.Reflection.MemberInfo")
        ]), 
      MetaType_NormalizeProtoMember
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.ISerializerProxy.get_Serializer", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      MetaType_ProtoBuf_Serializers_ISerializerProxy_get_Serializer
    )
      .Overrides($asm08.TypeRef("ProtoBuf.Serializers.ISerializerProxy"), "get_Serializer");

    $.Method({Static:true , Public:false}, "ResolveListTypes", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])
        ]), 
      MetaType_ResolveListTypes
    );

    $.Method({Static:false, Public:false}, "ResolveMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.String, $.Boolean]), 
      MetaType_ResolveMethod
    );

    $.Method({Static:true , Public:false}, "ResolveTupleConstructor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ConstructorInfo"), [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")])])]), 
      MetaType_ResolveTupleConstructor
    );

    $.Method({Static:false, Public:true }, "set_AsReferenceDefault", 
      JSIL.MethodSignature.Action($.Boolean), 
      MetaType_set_AsReferenceDefault
    );

    $.Method({Static:false, Public:true }, "set_ConstructType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      MetaType_set_ConstructType
    );

    $.Method({Static:false, Public:true }, "set_EnumPassthru", 
      JSIL.MethodSignature.Action($.Boolean), 
      MetaType_set_EnumPassthru
    );

    $.Method({Static:false, Public:true }, "set_IgnoreListHandling", 
      JSIL.MethodSignature.Action($.Boolean), 
      MetaType_set_IgnoreListHandling
    );

    $.Method({Static:false, Public:true }, "set_IncludeSerializerMethod", 
      JSIL.MethodSignature.Action($.Boolean), 
      MetaType_set_IncludeSerializerMethod
    );

    $.Method({Static:false, Public:true }, "set_IsGroup", 
      JSIL.MethodSignature.Action($.Boolean), 
      MetaType_set_IsGroup
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String), 
      MetaType_set_Name
    );

    $.Method({Static:false, Public:false}, "set_Pending", 
      JSIL.MethodSignature.Action($.Boolean), 
      MetaType_set_Pending
    );

    $.Method({Static:false, Public:true }, "set_UseConstructor", 
      JSIL.MethodSignature.Action($.Boolean), 
      MetaType_set_UseConstructor
    );

    $.Method({Static:false, Public:false}, "SetBaseType", 
      JSIL.MethodSignature.Action($.Type), 
      MetaType_SetBaseType
    );

    $.Method({Static:false, Public:true }, "SetCallbacks", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Reflection.MethodInfo"), 
          $asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Reflection.MethodInfo")
        ]), 
      MetaType_SetCallbacks$11
    );

    $.Method({Static:false, Public:true }, "SetCallbacks", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $.String, $.String
        ]), 
      MetaType_SetCallbacks$12
    );

    $.Method({Static:false, Public:true }, "SetFactory", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Reflection.MethodInfo")]), 
      MetaType_SetFactory$13
    );

    $.Method({Static:false, Public:true }, "SetFactory", 
      new JSIL.MethodSignature($.Type, [$.String]), 
      MetaType_SetFactory$14
    );

    $.Method({Static:false, Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [
          $.UInt16, $.Boolean, 
          $.Boolean
        ]), 
      MetaType_SetFlag
    );

    $.Method({Static:false, Public:true }, "SetSurrogate", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      MetaType_SetSurrogate
    );

    $.Method({Static:false, Public:false}, "ThrowIfFrozen", 
      JSIL.MethodSignature.Void, 
      MetaType_ThrowIfFrozen
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      MetaType_toString
    );

    $.Method({Static:false, Public:false}, "WriteSchema", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]), 
      MetaType_WriteSchema
    );

    $.Field({Static:false, Public:false}, "baseType", $.Type);

    $.Field({Static:false, Public:false}, "subTypes", $asm08.TypeRef("ProtoBuf.Meta.BasicList"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ienumerable", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Collections.IEnumerable.__Type__;
      });

    $.Field({Static:false, Public:false}, "callbacks", $asm08.TypeRef("ProtoBuf.Meta.CallbackSet"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "factory", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "model", $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "serializer", $asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"));

    $.Field({Static:false, Public:false}, "constructType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "surrogate", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fields", $asm08.TypeRef("ProtoBuf.Meta.BasicList"));

    $.Constant({Static:true , Public:false}, "OPTIONS_Pending", $.UInt16, 1);

    $.Constant({Static:true , Public:false}, "OPTIONS_EnumPassThru", $.UInt16, 2);

    $.Constant({Static:true , Public:false}, "OPTIONS_Frozen", $.UInt16, 4);

    $.Constant({Static:true , Public:false}, "OPTIONS_PrivateOnApi", $.UInt16, 8);

    $.Constant({Static:true , Public:false}, "OPTIONS_SkipConstructor", $.UInt16, 16);

    $.Constant({Static:true , Public:false}, "OPTIONS_AsReferenceDefault", $.UInt16, 32);

    $.Constant({Static:true , Public:false}, "OPTIONS_AutoTuple", $.UInt16, 64);

    $.Constant({Static:true , Public:false}, "OPTIONS_IgnoreListHandling", $.UInt16, 128);

    $.Constant({Static:true , Public:false}, "OPTIONS_IsGroup", $.UInt16, 256);

    $.Field({Static:false, Public:false}, "flags", $asm07.TypeRef("System.UInt16"));


    function MetaType__cctor () {
      $thisType.ienumerable = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      MetaType__cctor
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ProtoBuf.Serializers.ISerializerProxy.Serializer", $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));

    $.Property({Static:false, Public:true }, "BaseType", $.Type);

    $.Property({Static:false, Public:false}, "Model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Property({Static:false, Public:true }, "IncludeSerializerMethod", $.Boolean);

    $.Property({Static:false, Public:true }, "AsReferenceDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "HasCallbacks", $.Boolean);

    $.Property({Static:false, Public:true }, "HasSubtypes", $.Boolean);

    $.Property({Static:false, Public:true }, "Callbacks", $asm08.TypeRef("ProtoBuf.Meta.CallbackSet"));

    $.Property({Static:false, Public:false}, "IsValueType", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Serializer", $asm08.TypeRef("ProtoBuf.Serializers.IProtoTypeSerializer"));

    $.Property({Static:false, Public:false}, "IsList", $.Boolean);

    $.Property({Static:false, Public:true }, "UseConstructor", $.Boolean);

    $.Property({Static:false, Public:true }, "ConstructType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Item", $asm08.TypeRef("ProtoBuf.Meta.ValueMember"));

    $.Property({Static:false, Public:true }, "Item", $asm08.TypeRef("ProtoBuf.Meta.ValueMember"));

    $.Property({Static:false, Public:true }, "EnumPassthru", $.Boolean);

    $.Property({Static:false, Public:true }, "IgnoreListHandling", $.Boolean);

    $.Property({Static:false, Public:false}, "Pending", $.Boolean);

    $.Property({Static:false, Public:false}, "Fields", $asm07.TypeRef("System.Collections.IEnumerable"));

    $.Property({Static:false, Public:false}, "IsAutoTuple", $.Boolean);

    $.Property({Static:false, Public:true }, "IsGroup", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.Serializers.ISerializerProxy")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class ProtoBuf.Meta.MetaType+Comparer */ 

(function Comparer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.MetaType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.StringComparison)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [$asm08.ProtoBuf.Meta.MetaType, $asm08.ProtoBuf.Meta.MetaType]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [
        $asm07.System.String, $asm07.System.String, 
        $asm07.System.StringComparison
      ]))) ();
  };


  function Comparer__ctor () {
  }; 

  function Comparer_Compare$00 (x, y) {
    return $S00().CallVirtual("Compare", null, this, $T01().$As(x), $T01().$As(y));
  }; 

  function Comparer_Compare$01 (x, y) {
    if (x === y) {
      return 0;
    }
    if (x === null) {
      return -1;
    }
    if (y === null) {
      return 1;
    }
    return $S01().CallStatic($T02(), "Compare", null, 
      x.GetSchemaTypeName(), 
      y.GetSchemaTypeName(), 
      $T03().Ordinal
    );
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.MetaType+Comparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Comparer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object]), 
      Comparer_Compare$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("ProtoBuf.Meta.MetaType"), $asm08.TypeRef("ProtoBuf.Meta.MetaType")]), 
      Comparer_Compare$01
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type);


    function Comparer__cctor () {
      $thisType.Default = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Comparer__cctor
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer"), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm08.TypeRef("ProtoBuf.Meta.MetaType")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.Meta.MetaType+AttributeFamily */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.Meta.MetaType+AttributeFamily", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    ProtoBuf: 1, 
    DataContractSerialier: 2, 
    XmlSerializer: 4, 
    AutoTuple: 8, 
  }
);

/* class ProtoBuf.Meta.TypeModel */ 

(function TypeModel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.IList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeFormatEventHandler)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Delegate)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Threading.Interlocked)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Collections.Generic.KeyValuePair$b2)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel_Formatter)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Array)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.Reflection.ConstructorInfo)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.Collections.Generic.IDictionary$b2)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm07.System.Type))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Collections.IDictionary)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.Collections.Hashtable)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.Collections.ArrayList)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.Activator)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.IO.MemoryStream)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm08.ProtoBuf.PrefixStyle)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm08.ProtoBuf.Serializer_TypeResolver)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel_DeserializeItemsIterator)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeFormatEventArgs)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm07.System.Collections.IEnumerable)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.MethodInfo))) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.ParameterInfo))) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm07.System.Reflection.ParameterInfo)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.PropertyInfo))) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm07.System.Reflection.BindingFlags)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm07.System.Reflection.PropertyInfo)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm07.System.Reflection.Assembly)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm07.System.Char)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm07.System.Collections.Generic.ICollection$b1)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm08.ProtoBuf.SubItemToken)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm07.System.SByte)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm08.ProtoBuf.BclHelpers)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm0A.System.Uri)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm07.System.Decimal)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm07.System.DateTime)) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm07.System.TimeSpan)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize($asm07.System.NullReferenceException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, [$asm07.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.IO.MemoryStream, null))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.Int32, $asm07.System.Object, 
        $asm08.ProtoBuf.ProtoWriter
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm08.ProtoBuf.ProtoReader, [
        $asm07.System.IO.Stream, $asm08.ProtoBuf.Meta.TypeModel, 
        $asm08.ProtoBuf.SerializationContext, $asm07.System.Int64
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.Int32, $asm07.System.Object, 
        $asm08.ProtoBuf.ProtoReader
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm07.System.Type, $asm08.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm07.System.Type, $asm07.System.Int32, 
        $asm08.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm07.System.Type, $asm07.System.Int64, 
        $asm08.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm07.System.Type, $asm07.System.Int64
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
        $asm07.System.IO.Stream, $asm08.ProtoBuf.PrefixStyle, 
        $asm07.System.Int32, $asm08.ProtoBuf.SerializationContext
      ], ["T"]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Meta.TypeFormatEventArgs, [$asm07.System.String]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm07.System.Type, $asm08.ProtoBuf.PrefixStyle, 
        $asm07.System.Int32, $asm08.ProtoBuf.Serializer_TypeResolver, 
        JSIL.Reference.Of($asm07.System.Int64)
      ]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, null))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Type]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, null))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm08.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Meta.TypeFormatEventArgs, [$asm07.System.Type]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.ProtoException, [$asm07.System.String]))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.System.Uri, [$asm07.System.String]))) ();
  };
  var $S17 = function () {
    return ($S17 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.Array, $asm07.System.Array, 
        $asm07.System.Int32
      ]))) ();
  };
  var $S18 = function () {
    return ($S18 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NullReferenceException, null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.Collections.IList.Add)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm07.System.Collections.IEnumerator.get_Current)) ();
  };


  function TypeModel__ctor () {
  }; 

  function TypeModel_add_DynamicTypeFormatting (value) {
    var typeFormatEventHandler = this.DynamicTypeFormatting;

    do {
      var typeFormatEventHandler2 = typeFormatEventHandler;
      var value2 = $T02().Combine(typeFormatEventHandler2, value);
      typeFormatEventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "DynamicTypeFormatting"), value2, typeFormatEventHandler2);
    } while (typeFormatEventHandler !== typeFormatEventHandler2);
  }; 

  function TypeModel_CanSerialize$00 (type) {
    return this.CanSerialize(type, true, true, true);
  }; 

  function TypeModel_CanSerialize$01 ($type, allowBasic, allowContract, allowLists) {
    var type = new JSIL.BoxedVariable($type);
    if ($T04().op_Equality(type.get(), null)) {
      throw $S00().Construct("type");
    }
    var underlyingType = $T07().GetUnderlyingType(type.get());
    if ($T04().op_Inequality(underlyingType, null)) {
      type.set(underlyingType);
    }
    var typeCode = $T07().GetTypeCode(type.get());
    if (typeCode > $T08().Unknown) {
      return allowBasic;
    }
    var key = (this.GetKey(/* ref */ type) | 0);
    if (key >= 0) {
      return allowContract;
    }
    if (allowLists) {
      var type2 = null;
      if ((type.get()).get_IsArray()) {
        if (((type.get()).GetArrayRank() | 0) === 1) {
          type2 = (type.get()).GetElementType();
        }
      } else {
        type2 = $thisType.GetListItemType(this, type.get());
      }
      if ($T04().op_Inequality(type2, null)) {
        return this.CanSerialize(type2, allowBasic, allowContract, false);
      }
    }
    return false;
  }; 

  function TypeModel_CanSerializeBasicType (type) {
    return this.CanSerialize(type, true, false, true);
  }; 

  function TypeModel_CanSerializeContractType (type) {
    return this.CanSerialize(type, false, true, true);
  }; 

  function TypeModel_CheckDictionaryAccessors (model, pair, value) {
    return (!(!pair.get_IsGenericType() || 
        !$T04().op_Equality(
          pair.GetGenericTypeDefinition(), 
          model.MapType($T0A().__Type__)
        )) && $T04().op_Equality(pair.GetGenericArguments()[1], value));
  }; 

  function TypeModel_Create$02 () {
    return new ($T0B())(false);
  }; 

  function TypeModel_CreateFormatter (type) {
    return new ($T0C())(this, type);
  }; 

  function TypeModel_CreateListInstance (listType, itemType) {
    var fullName = null;
    var type = listType;
    if (listType.get_IsArray()) {
      return JSIL.Array.New(itemType, 0);
    }
    if (!(listType.get_IsClass() && 
        !listType.get_IsAbstract() && !$T0F().op_Equality($T07().GetConstructor(listType, $T07().EmptyTypes, true), null))) {
      var flag = false;
      if (!(!listType.get_IsInterface() || 
          ((fullName = listType.get_FullName()) === null) || ((fullName.indexOf("Dictionary")) < 0))) {
        if (!(!listType.get_IsGenericType() || !$T04().op_Equality(listType.GetGenericTypeDefinition(), $T10().__Type__))) {
          var genericArguments = listType.GetGenericArguments();
          type = $T12().__Type__.MakeGenericType(genericArguments);
          flag = true;
        }
        if (!(flag || !$T04().op_Equality(listType, $T13().__Type__))) {
          type = $T14().__Type__;
          flag = true;
        }
      }
      if (!flag) {
        type = $T15().__Type__.MakeGenericType(JSIL.Array.New($T04(), [itemType]));
        flag = true;
      }
      if (!flag) {
        type = $T16().__Type__;
      }
    }
    return $S01().CallStatic($T17(), "CreateInstance", null, type);
  }; 

  function TypeModel_CreateNestedListsNotSupported () {
    return $S02().Construct("Nested or jagged lists and arrays are not supported");
  }; 

  function TypeModel_DeepClone ($value) {
    var value = new JSIL.BoxedVariable($value);
    var num = new JSIL.BoxedVariable(0);
    if (value.get() === null) {
      return null;
    }
    var type = new JSIL.BoxedVariable(JSIL.GetType(value.get()));
    var key = (this.GetKey(/* ref */ type) | 0);
    if (!((key < 0) || $T07().IsEnum(type.get()))) {
      var memoryStream = $S03().Construct();
      try {
        var protoWriter = new ($T1B())(memoryStream, this, null);
        try {
          protoWriter.SetRootObject(value.get());
          $S04().CallVirtual("Serialize", null, this, key, value.get(), protoWriter);
          protoWriter.Close();
        } finally {
          if (protoWriter !== null) {
            $IM00().Call(protoWriter, null);
          }
        }
        memoryStream.set_Position($T1E().Create(0, 0, 0));
        var protoReader = null;
        try {
          protoReader = $S05().CallStatic($T1F(), "Create", null, memoryStream, this, null, $T1E().Create(16777215, 16777215, 65535));
          var result = $S06().CallVirtual("Deserialize", null, this, key, null, protoReader);
          return result;
        } finally {
          $T1F().Recycle(protoReader);
        }
      } finally {
        if (memoryStream !== null) {
          $IM00().Call(memoryStream, null);
        }
      }
    }
    if ($T04().op_Equality(type.get(), $T20().__Type__)) {
      var array = $T20().$Cast(value.get());
      var array2 = JSIL.Array.New($T21(), array.length);
      $T07().BlockCopy(
        array, 
        0, 
        array2, 
        0, 
        array.length
      );
      return array2;
    }
    if (!((this.GetWireType($T07().GetTypeCode(type.get()), $T22().Default, /* ref */ type, /* ref */ num) === $T23().None) || ((num.get() | 0) >= 0))) {
      return value.get();
    }
    var memoryStream2 = $S03().Construct();
    try {
      var protoWriter2 = new ($T1B())(memoryStream2, this, null);
      try {
        if (!this.TrySerializeAuxiliaryType(
            protoWriter2, 
            type.get(), 
            $T22().Default, 
            1, 
            value.get(), 
            false
          )) {
          $thisType.ThrowUnexpectedType(type.get());
        }
        protoWriter2.Close();
      } finally {
        if (protoWriter2 !== null) {
          $IM00().Call(protoWriter2, null);
        }
      }
      memoryStream2.set_Position($T1E().Create(0, 0, 0));
      var reader = null;
      try {
        reader = $S05().CallStatic($T1F(), "Create", null, memoryStream2, this, null, $T1E().Create(16777215, 16777215, 65535));
        value.set(null);
        this.TryDeserializeAuxiliaryType(
          reader, 
          $T22().Default, 
          1, 
          type.get(), 
          /* ref */ value, 
          true, 
          false, 
          true, 
          false
        );
        result = value.get();
      } finally {
        $T1F().Recycle(reader);
      }
    } finally {
      if (memoryStream2 !== null) {
        $IM00().Call(memoryStream2, null);
      }
    }
    return result;
  }; 

  function TypeModel_Deserialize$03 (source, value, type) {
    return $S07().CallVirtual("Deserialize", null, this, source, value, type, null);
  }; 

  function TypeModel_Deserialize$04 (source, value, $type, context) {
    var type = new JSIL.BoxedVariable($type);
    var noAutoCreate = this.PrepareDeserialize(value, /* ref */ type);
    var protoReader = null;
    try {
      protoReader = $S05().CallStatic($T1F(), "Create", null, source, this, context, $T1E().Create(16777215, 16777215, 65535));
      if (value !== null) {
        protoReader.SetRootObject(value);
      }
      var obj = this.DeserializeCore(protoReader, type.get(), value, noAutoCreate);
      protoReader.CheckFullyConsumed();
      var result = obj;
    } finally {
      $T1F().Recycle(protoReader);
    }
    return result;
  }; 

  function TypeModel_Deserialize$05 (source, value, type, length) {
    return $S08().CallVirtual("Deserialize", null, this, 
      source, 
      value, 
      type, 
      length, 
      null
    );
  }; 

  function TypeModel_Deserialize$06 (source, value, type, length) {
    return $S09().CallVirtual("Deserialize", null, this, 
      source, 
      value, 
      type, 
      length, 
      null
    );
  }; 

  function TypeModel_Deserialize$07 (source, value, type, length, context) {
    return $S0A().CallVirtual("Deserialize", null, this, source, value, type, (
        ((length | 0) === 2147483647)
           ? $T1E().Create(16777215, 16777215, 32767)
           : $T1E().$Cast(value))
    );
  }; 

  function TypeModel_Deserialize$08 (source, value, $type, length, context) {
    var type = new JSIL.BoxedVariable($type);
    var noAutoCreate = this.PrepareDeserialize(value, /* ref */ type);
    var protoReader = null;
    try {
      protoReader = $S05().CallStatic($T1F(), "Create", null, source, this, context, length);
      if (value !== null) {
        protoReader.SetRootObject(value);
      }
      var obj = this.DeserializeCore(protoReader, type.get(), value, noAutoCreate);
      protoReader.CheckFullyConsumed();
      var result = obj;
    } finally {
      $T1F().Recycle(protoReader);
    }
    return result;
  }; 

  function TypeModel_Deserialize$09 (source, value, $type) {
    var type = new JSIL.BoxedVariable($type);
    if (source === null) {
      throw $S00().Construct("source");
    }
    var noAutoCreate = this.PrepareDeserialize(value, /* ref */ type);
    if (value !== null) {
      source.SetRootObject(value);
    }
    var result = this.DeserializeCore(source, type.get(), value, noAutoCreate);
    source.CheckFullyConsumed();
    return result;
  }; 

  function TypeModel_DeserializeCore (reader, $type, $value, noAutoCreate) {
    var value = new JSIL.BoxedVariable($value);
    var type = new JSIL.BoxedVariable($type);
    var key = (this.GetKey(/* ref */ type) | 0);
    if (!((key < 0) || $T07().IsEnum(type.get()))) {
      return $S06().CallVirtual("Deserialize", null, this, key, value.get(), reader);
    }
    this.TryDeserializeAuxiliaryType(
      reader, 
      $T22().Default, 
      1, 
      type.get(), 
      /* ref */ value, 
      true, 
      false, 
      noAutoCreate, 
      false
    );
    return value.get();
  }; 

  function TypeModel_DeserializeItems$0A (source, type, style, expectedField, resolver) {
    return this.DeserializeItems(
      source, 
      type, 
      style, 
      expectedField, 
      resolver, 
      null
    );
  }; 

  function TypeModel_DeserializeItems$0B (source, type, style, expectedField, resolver, context) {
    return new ($T27())(this, source, type, style, expectedField, resolver, context);
  }; 

  function TypeModel_DeserializeItems$b1$0C (T, source, style, expectedField) {
    return $S0B().CallVirtual("DeserializeItems$b1", [T], this, source, style, expectedField, null);
  }; 

  function TypeModel_DeserializeItems$b1$0D (T, source, style, expectedField, context) {
    return new ($asm08.ProtoBuf.Meta.TypeModel_DeserializeItemsIterator$b1.Of(T)) (this, source, style, expectedField, context);
  }; 

  function TypeModel_DeserializeType (model, value) {
    if (model !== null) {
      var dynamicTypeFormatting = model.DynamicTypeFormatting;
      if (dynamicTypeFormatting !== null) {
        var typeFormatEventArgs = $S0C().Construct(value);
        dynamicTypeFormatting(model, typeFormatEventArgs);
        if ($T04().op_Inequality(typeFormatEventArgs.get_Type(), null)) {
          return typeFormatEventArgs.get_Type();
        }
      }
    }
    return JSIL.ReflectionGetTypeInternal($asm08.__Assembly__, value, false, false);
  }; 

  function TypeModel_DeserializeWithLengthPrefix$0E (source, value, type, style, fieldNumber) {
    var num = new JSIL.BoxedVariable($T1E().Create(0, 0, 0));
    return $S0D().CallVirtual("DeserializeWithLengthPrefix", null, this, 
      source, 
      value, 
      type, 
      style, 
      fieldNumber, 
      null, 
      /* ref */ num
    );
  }; 

  function TypeModel_DeserializeWithLengthPrefix$0F (source, value, type, style, expectedField, resolver) {
    var num = new JSIL.BoxedVariable($T1E().Create(0, 0, 0));
    return $S0D().CallVirtual("DeserializeWithLengthPrefix", null, this, 
      source, 
      value, 
      type, 
      style, 
      expectedField, 
      resolver, 
      /* ref */ num
    );
  }; 

  function TypeModel_DeserializeWithLengthPrefix$10 (source, value, type, style, expectedField, resolver, /* ref */ bytesRead) {
    var num = new JSIL.BoxedVariable($T1E().Create(0, 0, 0));
    var flag = new JSIL.BoxedVariable(false);
    var result = this.DeserializeWithLengthPrefix(
      source, 
      value, 
      type, 
      style, 
      expectedField, 
      resolver, 
      /* ref */ num, 
      /* ref */ flag, 
      null
    );
    bytesRead.set($T09().$OverflowCheck((num.get()).ToNumber(4294967295, true)));
    return result;
  }; 

  function TypeModel_DeserializeWithLengthPrefix$11 (source, value, type, style, expectedField, resolver, /* ref */ bytesRead) {
    var flag = new JSIL.BoxedVariable(false);
    return this.DeserializeWithLengthPrefix(
      source, 
      value, 
      type, 
      style, 
      expectedField, 
      resolver, 
      /* ref */ bytesRead, 
      /* ref */ flag, 
      null
    );
  }; 

  function TypeModel_DeserializeWithLengthPrefix$12 (source, $value, $type, style, expectedField, resolver, /* ref */ bytesRead, /* ref */ haveObject, context) {
    var value = new JSIL.BoxedVariable($value);
    var type = new JSIL.BoxedVariable($type);
    var num2 = new JSIL.BoxedVariable(0);
    var num3 = new JSIL.BoxedVariable(0);

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          haveObject.set(false);
          bytesRead.set($T1E().Create(0, 0, 0));
          if (!(!$T04().op_Equality(type.get(), null) || ((style === $T25().Base128) && 
                (resolver !== null)))) {
            throw $S0E().Construct("A type must be provided unless base-128 prefixing is being used in combination with a resolver");
          }

        $loop0: 
          while (true) {
            var flag = ((expectedField | 0) > 0) || 
            (resolver !== null);
            var num = $T1F().ReadLongLengthPrefix(
              source, 
              flag, 
              style, 
              /* ref */ num2, 
              /* ref */ num3
            );
            if ((num3.get() | 0) === 0) {
              break $loop0;
            }
            bytesRead.set($T1E().op_Addition(
                bytesRead.get(), 
                $T1E().FromNumber(num3.get())
              ));
            if (!$T1E().op_GreaterThanOrEqual(num, $T1E().Create(0, 0, 0))) {
              return value.get();
            }
            if (style === $T25().Base128) {
              if (!(!flag || 
                  ((expectedField | 0) !== 0) || 
                  !$T04().op_Equality(type.get(), null) || (resolver === null))) {
                type.set(resolver(num2.get()));
                var flag2 = $T04().op_Equality(type.get(), null);
              } else {
                flag2 = (expectedField | 0) !== (num2.get() | 0);
              }
            } else {
              flag2 = false;
            }
            if (flag2) {
              if (!$T1E().op_Inequality(num, $T1E().Create(16777215, 16777215, 32767))) {
                $label0 = 1 /* goto Block_12 */ ;
                continue $labelgroup0;
              }
              $T1F().Seek(source, num, null);
              bytesRead.set($T1E().op_Addition(bytesRead.get(), num));
            }
            if (!flag2) {
              break $labelgroup0;
            }
          }
          return value.get();

          $label0 = 1 /* goto Block_12 */ ;
          continue $labelgroup0;
        case 1: /* Block_12 */ 
          throw $S0F().Construct();
          break $labelgroup0;

      }
    }
    /* Original label Block_13 */ 
    var protoReader = null;
    try {
      protoReader = $S05().CallStatic($T1F(), "Create", null, source, this, context, num);
      var key = (this.GetKey(/* ref */ type) | 0);
      if (!((key < 0) || $T07().IsEnum(type.get()))) {
        value.set($S06().CallVirtual("Deserialize", null, this, key, value.get(), protoReader));
      } else if (!(this.TryDeserializeAuxiliaryType(
            protoReader, 
            $T22().Default, 
            1, 
            type.get(), 
            /* ref */ value, 
            true, 
            false, 
            true, 
            false
          ) || !$T1E().op_Inequality(num, $T1E().Create(0, 0, 0)))) {
        $thisType.ThrowUnexpectedType(type.get());
      }
      bytesRead.set($T1E().op_Addition(
          bytesRead.get(), 
          protoReader.get_LongPosition()
        ));
      haveObject.set(true);
      var result = value.get();
    } finally {
      $T1F().Recycle(protoReader);
    }
    return result;
  }; 

  function TypeModel_GetKey$13 (/* ref */ type) {
    if ($T04().op_Equality(type.get(), null)) {
      return -1;
    }
    var keyImpl = (this.GetKeyImpl(type.get()) | 0);
    if (keyImpl < 0) {
      var type2 = $thisType.ResolveProxies(type.get());
      if ($T04().op_Inequality(type2, null)) {
        type.set(type2);
        keyImpl = (this.GetKeyImpl(type.get()) | 0);
      }
    }
    return keyImpl;
  }; 

  function TypeModel_GetListItemType (model, listType) {
    var parameterType = null;
    if (!(!$T04().op_Equality(listType, model.MapType($T0D().__Type__)) && 
        !listType.get_IsArray() && $S10().CallVirtual("IsAssignableFrom", null, model.MapType($T2A().__Type__), listType))) {
      return null;
    }
    var basicList = new ($T2B())();
    var methods = listType.GetMethods();

    for (var i = 0; i < (methods.length | 0); i = ((i + 1) | 0)) {
      var methodInfo = methods[i];
      if (!(methodInfo.get_IsStatic() || (methodInfo.get_Name() != "Add"))) {
        var parameters = methodInfo.GetParameters();
        if (!(((parameters.length | 0) !== 1) || basicList.Contains(parameterType = (parameters[0]).get_ParameterType()))) {
          basicList.Add(parameterType);
        }
      }
    }
    var name = listType.get_Name();
    if (!((name !== null) && (((name.indexOf("Queue")) >= 0) || 
          ((name.indexOf("Stack")) >= 0)))) {
      $thisType.TestEnumerableListPatterns(model, basicList, listType);
      var interfaces = listType.GetInterfaces();

      for (var j = 0; j < (interfaces.length | 0); j = ((j + 1) | 0)) {
        var iType = interfaces[j];
        $thisType.TestEnumerableListPatterns(model, basicList, iType);
      }
    }
    var properties = listType.GetProperties($T33().$Flags("Instance", "NonPublic", "Public"));

    for (var k = 0; k < (properties.length | 0); k = ((k + 1) | 0)) {
      var propertyInfo = properties[k];
      if (!((propertyInfo.get_Name() != "Item") || basicList.Contains(propertyInfo.get_PropertyType()))) {
        var indexParameters = propertyInfo.GetIndexParameters();
        if (!(((indexParameters.length | 0) !== 1) || $T04().op_Inequality(
              (indexParameters[0]).get_ParameterType(), 
              model.MapType($T09().__Type__)
            ))) {
          basicList.Add(propertyInfo.get_PropertyType());
        }
      }
    }
    switch (basicList.get_Count()) {
      case 0: 
        return null;

      case 1: 
        if ($T04().op_Equality($T04().$Cast(basicList.get_Item(0)), listType)) {
          return null;
        }
        return $T04().$Cast(basicList.get_Item(0));

      case 2: 
        if (!(!$T04().op_Inequality($T04().$Cast(basicList.get_Item(0)), listType) || !$thisType.CheckDictionaryAccessors(
              model, 
              $T04().$Cast(basicList.get_Item(0)), 
              $T04().$Cast(basicList.get_Item(1))
            ))) {
          return $T04().$Cast(basicList.get_Item(0));
        }
        if (!(!$T04().op_Inequality($T04().$Cast(basicList.get_Item(1)), listType) || !$thisType.CheckDictionaryAccessors(
              model, 
              $T04().$Cast(basicList.get_Item(1)), 
              $T04().$Cast(basicList.get_Item(0))
            ))) {
          return $T04().$Cast(basicList.get_Item(1));
        }
        break;

    }
    return null;
  }; 

  function TypeModel_GetSchema (type) {
    throw $S11().Construct();
  }; 

  function TypeModel_GetType$14 (fullName, context) {
    return $thisType.ResolveKnownType(fullName, this, context);
  }; 

  function TypeModel_GetWireType (code, format, /* ref */ type, /* ref */ modelKey) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          modelKey.set(-1);
          if ($T07().IsEnum(type.get())) {
            modelKey.set(this.GetKey(/* ref */ type));
            return $T23().Variant;
          }
          switch (code.valueOf()) {
            case 3: 
            case 4: 
            case 5: 
            case 6: 
            case 7: 
            case 8: 
            case 9: 
            case 10: 
              if (format !== $T22().FixedSize) {
                return $T23().Variant;
              }
              return $T23().Fixed32;

            case 11: 
            case 12: 
              if (format !== $T22().FixedSize) {
                return $T23().Variant;
              }
              return $T23().Fixed64;

            case 13: 
              return $T23().Fixed32;

            case 14: 
              return $T23().Fixed64;

            case 15: 
            case 16: 
            case 18: 
              break;

            case 17: 
              $label0 = 1 /* goto IL_80 */ ;
              continue $labelgroup0;

            default: 
              if ((((code - $T08().TimeSpan) | 0) >>> 0) > (3 >>> 0)) {
                $label0 = 1 /* goto IL_80 */ ;
                continue $labelgroup0;
              }
              break;

          }
          return $T23().String;

          $label0 = 1 /* goto IL_80 */ ;
          continue $labelgroup0;
        case 1: /* IL_80 */ 
          if (modelKey.set(this.GetKey(/* ref */ type)) >= 0) {
            return $T23().String;
          }
          return $T23().None;

          break $labelgroup0;
      }
    }
  }; 

  function TypeModel_IsDefined ($type) {
    var type = new JSIL.BoxedVariable($type);
    return ((this.GetKey(/* ref */ type) | 0) >= 0);
  }; 

  function TypeModel_MapType$15 (type) {
    return this.MapType(type, true);
  }; 

  function TypeModel_MapType$16 (type, demand) {
    return type;
  }; 

  function TypeModel_PrepareDeserialize (value, /* ref */ type) {
    if ($T04().op_Equality(type.get(), null)) {
      if (value === null) {
        throw $S00().Construct("type");
      }
      type.set(this.MapType(JSIL.GetType(value)));
    }
    var result = true;
    var underlyingType = $T07().GetUnderlyingType(type.get());
    if ($T04().op_Inequality(underlyingType, null)) {
      type.set(underlyingType);
      result = false;
    }
    return result;
  }; 

  function TypeModel_remove_DynamicTypeFormatting (value) {
    var typeFormatEventHandler = this.DynamicTypeFormatting;

    do {
      var typeFormatEventHandler2 = typeFormatEventHandler;
      var value2 = $T02().Remove(typeFormatEventHandler2, value);
      typeFormatEventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "DynamicTypeFormatting"), value2, typeFormatEventHandler2);
    } while (typeFormatEventHandler !== typeFormatEventHandler2);
  }; 

  function TypeModel_ResolveKnownType (name, model, assembly, $exception) {
    if ($T07().IsNullOrEmpty(name)) {
      return null;
    }
    try {
      var type = (JSIL.ReflectionGetTypeInternal($asm08.__Assembly__, name, false, false));
      if ($T04().op_Inequality(type, null)) {
        var result = type;
        return result;
      }
    } catch ($exception) {
    }
    try {
      var num = (name.indexOf(","));
      var name2 = ((
          (num > 0)
             ? name.substr(0, num)
             : name)
        .trim());
      if ($T35().op_Equality(assembly, null)) {
        assembly = $T35().GetCallingAssembly();
      }
      var type2 = (
        $T35().op_Equality(assembly, null)
           ? null
           : assembly.GetType(name2))
      ;
      if ($T04().op_Inequality(type2, null)) {
        result = type2;
        return result;
      }
    } catch ($exception) {
    }
    return null;
  }; 

  function TypeModel_ResolveListAdd (model, listType, itemType, /* ref */ isList) {
    isList.set($S10().CallVirtual("IsAssignableFrom", null, model.MapType($thisType.ilist), listType));
    var array = JSIL.Array.New($T04(), [itemType]);
    var instanceMethod = $T07().GetInstanceMethod(listType, "Add", array);
    if ($T2D().op_Equality(instanceMethod, null)) {
      var flag = listType.get_IsInterface() && 
      $T04().op_Equality(listType, (model.MapType($T39().__Type__)).MakeGenericType(array));
      var type = (model.MapType($T3A().__Type__)).MakeGenericType(array);
      if (!(!flag && !$S10().CallVirtual("IsAssignableFrom", null, type, listType))) {
        instanceMethod = $T07().GetInstanceMethod(type, "Add", array);
      }
    }
    if ($T2D().op_Equality(instanceMethod, null)) {
      var interfaces = listType.GetInterfaces();

    $loop0: 
      for (var i = 0; i < (interfaces.length | 0); i = ((i + 1) | 0)) {
        var type2 = interfaces[i];
        if (!(!(type2.get_Name() == "IProducerConsumerCollection`1") || 
            !type2.get_IsGenericType() || !((type2.GetGenericTypeDefinition()).get_FullName() == "System.Collections.Concurrent.IProducerConsumerCollection`1"))) {
          instanceMethod = $T07().GetInstanceMethod(type2, "TryAdd", array);
          if ($T2D().op_Inequality(instanceMethod, null)) {
            break $loop0;
          }
        }
      }
    }
    if ($T2D().op_Equality(instanceMethod, null)) {
      array[0] = model.MapType($T19().__Type__);
      instanceMethod = $T07().GetInstanceMethod(listType, "Add", array);
    }
    if ($T2D().op_Equality(instanceMethod, null) & isList.get()) {
      instanceMethod = $T07().GetInstanceMethod(model.MapType($thisType.ilist), "Add", array);
    }
    return instanceMethod;
  }; 

  function TypeModel_ResolveProxies (type) {
    if ($T04().op_Equality(type, null)) {
      return null;
    }
    if (type.get_IsGenericParameter()) {
      return null;
    }
    var underlyingType = $T07().GetUnderlyingType(type);
    if ($T04().op_Inequality(underlyingType, null)) {
      return underlyingType;
    }
    var fullName = type.get_FullName();
    if (!((fullName === null) || !(System.String.StartsWith(fullName, "System.Data.Entity.DynamicProxies.")))) {
      return type.get_BaseType();
    }
    var interfaces = type.GetInterfaces();

    for (var i = 0; i < (interfaces.length | 0); i = ((i + 1) | 0)) {
      var fullName2 = (interfaces[i]).get_FullName();
      if (!(!(fullName2 == "NHibernate.Proxy.INHibernateProxy") && 
          !(fullName2 == "NHibernate.Proxy.DynamicProxy.IProxy") && !(fullName2 == "NHibernate.Intercept.IFieldInterceptorAccessor"))) {
        return type.get_BaseType();
      }
    }
    return null;
  }; 

  function TypeModel_Serialize$17 (dest, value) {
    $S12().CallVirtual("Serialize", null, this, dest, value, null);
  }; 

  function TypeModel_Serialize$18 (dest, value, context) {
    var protoWriter = new ($T1B())(dest, this, context);
    try {
      protoWriter.SetRootObject(value);
      this.SerializeCore(protoWriter, value);
      protoWriter.Close();
    } finally {
      if (protoWriter !== null) {
        $IM00().Call(protoWriter, null);
      }
    }
  }; 

  function TypeModel_Serialize$19 (dest, value) {
    if (dest === null) {
      throw $S00().Construct("dest");
    }
    dest.CheckDepthFlushlock();
    dest.SetRootObject(value);
    this.SerializeCore(dest, value);
    dest.CheckDepthFlushlock();
    $T1B().Flush(dest);
  }; 

  function TypeModel_SerializeCore (writer, value) {
    if (value === null) {
      throw $S00().Construct("value");
    }
    var type = new JSIL.BoxedVariable(JSIL.GetType(value));
    var key = (this.GetKey(/* ref */ type) | 0);
    if (key >= 0) {
      $S04().CallVirtual("Serialize", null, this, key, value, writer);
      return;
    }
    if (!this.TrySerializeAuxiliaryType(
        writer, 
        type.get(), 
        $T22().Default, 
        1, 
        value, 
        false
      )) {
      $thisType.ThrowUnexpectedType(type.get());
    }
  }; 

  function TypeModel_SerializeDateTimeKind () {
    return false;
  }; 

  function TypeModel_SerializeType (model, type) {
    if (model !== null) {
      var dynamicTypeFormatting = model.DynamicTypeFormatting;
      if (dynamicTypeFormatting !== null) {
        var typeFormatEventArgs = $S13().Construct(type);
        dynamicTypeFormatting(model, typeFormatEventArgs);
        if (!$T07().IsNullOrEmpty(typeFormatEventArgs.get_FormattedName())) {
          return typeFormatEventArgs.get_FormattedName();
        }
      }
    }
    return type.get_AssemblyQualifiedName();
  }; 

  function TypeModel_SerializeWithLengthPrefix$1A (dest, value, type, style, fieldNumber) {
    this.SerializeWithLengthPrefix(
      dest, 
      value, 
      type, 
      style, 
      fieldNumber, 
      null
    );
  }; 

  function TypeModel_SerializeWithLengthPrefix$1B (dest, value, $type, style, fieldNumber, context) {
    var type = new JSIL.BoxedVariable($type);
    if ($T04().op_Equality(type.get(), null)) {
      if (value === null) {
        throw $S00().Construct("value");
      }
      type.set(this.MapType(JSIL.GetType(value)));
    }
    var key = (this.GetKey(/* ref */ type) | 0);
    var protoWriter = new ($T1B())(dest, this, context);
    try {
      if ((style.valueOf() | 0) !== 0) {
        if ((((style - $T25().Base128) | 0) >>> 0) > (2 >>> 0)) {
          throw $S14().Construct("style");
        }
        $T1B().WriteObject(
          value, 
          key, 
          protoWriter, 
          style, 
          fieldNumber
        );
      } else {
        $S04().CallVirtual("Serialize", null, this, key, value, protoWriter);
      }
      protoWriter.Close();
    } finally {
      if (protoWriter !== null) {
        $IM00().Call(protoWriter, null);
      }
    }
  }; 

  function TypeModel_TestEnumerableListPatterns (model, candidates, iType) {
    if (iType.get_IsGenericType()) {
      var genericTypeDefinition = iType.GetGenericTypeDefinition();
      if (!(!$T04().op_Equality(genericTypeDefinition, model.MapType($T39().__Type__)) && 
          !$T04().op_Equality(genericTypeDefinition, model.MapType($T3A().__Type__)) && !(genericTypeDefinition.get_FullName() == "System.Collections.Concurrent.IProducerConsumerCollection`1"))) {
        var genericArguments = iType.GetGenericArguments();
        if (!candidates.Contains(genericArguments[0])) {
          candidates.Add(genericArguments[0]);
        }
      }
    }
  }; 

  function TypeModel_ThrowCannotCreateInstance (type) {
    throw $S15().Construct(JSIL.ConcatString("No parameterless constructor found for ", (
        $T04().op_Equality(type, null)
           ? "(null)"
           : type.get_Name())
      ));
  }; 

  function TypeModel_ThrowUnexpectedSubtype (expected, actual) {
    if ($T04().op_Inequality(expected, $thisType.ResolveProxies(actual))) {
      throw $S0E().Construct(JSIL.ConcatString("Unexpected sub-type: ", actual.get_FullName()));
    }
  }; 

  function TypeModel_ThrowUnexpectedType (type) {
    var str = (
      $T04().op_Equality(type, null)
         ? "(unknown)"
         : type.get_FullName())
    ;
    if ($T04().op_Inequality(type, null)) {
      var baseType = type.get_BaseType();
      if (!(!$T04().op_Inequality(baseType, null) || 
          !baseType.get_IsGenericType() || !((baseType.GetGenericTypeDefinition()).get_Name() == "GeneratedMessage`2"))) {
        throw $S0E().Construct(JSIL.ConcatString("Are you mixing protobuf-net and protobuf-csharp-port? See http://stackoverflow.com/q/11564914; type: ", str));
      }
    }
    throw $S0E().Construct(JSIL.ConcatString("Type is not expected, and no contract can be inferred: ", str));
  }; 

  function TypeModel_TryDeserializeAuxiliaryType (reader, format, tag, $type, /* ref */ value, skipOtherFields, asListItem, autoCreate, insideList) {
    var type = new JSIL.BoxedVariable($type);
    var num = new JSIL.BoxedVariable(0);
    if ($T04().op_Equality(type.get(), null)) {
      throw $S00().Construct("type");
    }
    var typeCode = $T07().GetTypeCode(type.get());
    var wireType = this.GetWireType(typeCode, format, /* ref */ type, /* ref */ num);
    var flag = false;
    if (wireType === $T23().None) {
      var type2 = $thisType.GetListItemType(this, type.get());
      if (!(!$T04().op_Equality(type2, null) || 
          !(type.get()).get_IsArray() || 
          (((type.get()).GetArrayRank() | 0) !== 1) || !$T04().op_Inequality(type.get(), $T20().__Type__))) {
        type2 = (type.get()).GetElementType();
      }
      if ($T04().op_Inequality(type2, null)) {
        if (insideList) {
          throw $thisType.CreateNestedListsNotSupported();
        }
        flag = this.TryDeserializeList(
          this, 
          reader, 
          format, 
          tag, 
          type.get(), 
          type2, 
          /* ref */ value
        );
        if (!flag & autoCreate) {
          value.set($thisType.CreateListInstance(type.get(), type2));
        }
        return flag;
      } else {
        $thisType.ThrowUnexpectedType(type.get());
      }
    }

  $loop0: 
    while (!(flag & asListItem)) {
      var num2 = (reader.ReadFieldHeader() | 0);
      if (num2 <= 0) {
        break $loop0;
      }
      if (num2 !== (tag | 0)) {
        if (!skipOtherFields) {
          throw $T1F().AddErrorData($S0E().Construct(("Expected field " + (tag).toString() + ", but found " + (num2).toString())), reader);
        }
        reader.SkipField();
      } else {
        flag = true;
        reader.Hint(wireType);
        if ((num.get() | 0) >= 0) {
          if ((((wireType - $T23().String) | 0) >>> 0) <= (1 >>> 0)) {
            var token = $T1F().StartSubItem(reader);
            value.set($S06().CallVirtual("Deserialize", null, this, num.get(), value.get(), reader));
            $T1F().EndSubItem(token, reader);
          } else {
            value.set($S06().CallVirtual("Deserialize", null, this, num.get(), value.get(), reader));
          }
        } else {
          switch (typeCode.valueOf()) {
            case 3: 
              value.set($T05().$Box(reader.ReadBoolean()));
              break;

            case 4: 
              value.set($T38().$Box(String.fromCharCode(reader.ReadUInt16())));
              break;

            case 5: 
              value.set($T3E().$Box(reader.ReadSByte()));
              break;

            case 6: 
              value.set($T21().$Box(reader.ReadByte()));
              break;

            case 7: 
              value.set($T3F().$Box(reader.ReadInt16()));
              break;

            case 8: 
              value.set($T40().$Box(reader.ReadUInt16()));
              break;

            case 9: 
              value.set($T09().$Box(reader.ReadInt32()));
              break;

            case 10: 
              value.set($T36().$Box(reader.ReadUInt32()));
              break;

            case 11: 
              value.set(reader.ReadInt64());
              break;

            case 12: 
              value.set(reader.ReadUInt64());
              break;

            case 13: 
              value.set($T41().$Box(reader.ReadSingle()));
              break;

            case 14: 
              value.set($T42().$Box(reader.ReadDouble()));
              break;

            case 15: 
              value.set($T43().ReadDecimal(reader));
              break;

            case 16: 
              value.set($T43().ReadDateTime(reader));
              break;

            case 17: 
              break;

            case 18: 
              value.set(reader.ReadString());
              break;

            default: 
              switch (typeCode.valueOf()) {
                case 100: 
                  value.set($T43().ReadTimeSpan(reader));
                  break;

                case 101: 
                  value.set($T1F().AppendBytes($T20().$Cast(value.get()), reader));
                  break;

                case 102: 
                  value.set($T43().ReadGuid(reader));
                  break;

                case 103: 
                  value.set($S16().Construct(reader.ReadString()));
                  break;

              }
              break;

          }
        }
      }
    }
    if (!(!((!flag && 
            !asListItem) & autoCreate) || !$T04().op_Inequality(type.get(), $T0D().__Type__))) {
      value.set($S01().CallStatic($T17(), "CreateInstance", null, type.get()));
    }
    return flag;
  }; 

  function TypeModel_TryDeserializeList (model, reader, format, tag, listType, itemType, /* ref */ value) {
    var flag = new JSIL.BoxedVariable(false);
    var methodInfo = $thisType.ResolveListAdd(model, listType, itemType, /* ref */ flag);
    if ($T2D().op_Equality(methodInfo, null)) {
      throw $S02().Construct(JSIL.ConcatString("Unknown list variant: ", listType.get_FullName()));
    }
    var result = false;
    var obj = new JSIL.BoxedVariable(null);
    var list = $T00().$As(value.get());
    var array = (
      flag.get()
         ? null
         : JSIL.Array.New($T19(), 1))
    ;
    var basicList = (
      listType.get_IsArray()
         ? new ($T2B())()
         : null)
    ;

    while (this.TryDeserializeAuxiliaryType(
        reader, 
        format, 
        tag, 
        itemType, 
        /* ref */ obj, 
        true, 
        true, 
        true, 
        true
      )) {
      result = true;
      if (!((value.get() !== null) || (basicList !== null))) {
        value.set($thisType.CreateListInstance(listType, itemType));
        list = $T00().$As(value.get());
      }
      if (list !== null) {
        $IM01().Call(list, null, obj.get());
      } else if (basicList !== null) {
        basicList.Add(obj.get());
      } else {
        array[0] = obj.get();
        methodInfo.Invoke(value.get(), array);
      }
      obj.set(null);
    }
    if (basicList !== null) {
      if (value.get() !== null) {
        if ((basicList.get_Count() | 0) !== 0) {
          var array2 = $T0E().$Cast(value.get());
          var array3 = (JSIL.Array.New(itemType, (((array2.length | 0) + (basicList.get_Count() | 0)) | 0)));
          $S17().CallStatic($T0E(), "Copy", null, array2, array3, array2.length);
          basicList.CopyTo(array3, array2.length);
          value.set(array3);
        }
      } else {
        array3 = (JSIL.Array.New(itemType, basicList.get_Count()));
        basicList.CopyTo(array3, 0);
        value.set(array3);
      }
    }
    return result;
  }; 

  function TypeModel_TrySerializeAuxiliaryType (writer, $type, format, tag, value, isInsideList) {
    var type = new JSIL.BoxedVariable($type);
    var num = new JSIL.BoxedVariable(0);
    if ($T04().op_Equality(type.get(), null)) {
      type.set(JSIL.GetType(value));
    }
    var typeCode = $T07().GetTypeCode(type.get());
    var wireType = this.GetWireType(typeCode, format, /* ref */ type, /* ref */ num);
    if ((num.get() | 0) >= 0) {
      if ($T07().IsEnum(type.get())) {
        $S04().CallVirtual("Serialize", null, this, num.get(), value, writer);
        return true;
      }
      $T1B().WriteFieldHeader(tag, wireType, writer);
      if (wireType === $T23().None) {
        throw $T1B().CreateException(writer);
      }
      if ((((wireType - $T23().String) | 0) >>> 0) > (1 >>> 0)) {
        $S04().CallVirtual("Serialize", null, this, num.get(), value, writer);
        return true;
      }
      var token = $T1B().StartSubItem(value, writer);
      $S04().CallVirtual("Serialize", null, this, num.get(), value, writer);
      $T1B().EndSubItem(token, writer);
      return true;
    } else {
      if (wireType !== $T23().None) {
        $T1B().WriteFieldHeader(tag, wireType, writer);
      }
      switch (typeCode.valueOf()) {
        case 3: 
          $T1B().WriteBoolean($T05().$Cast(value), writer);
          return true;

        case 4: 
          $T1B().WriteUInt16(($T38().$Cast(value)).charCodeAt(0), writer);
          return true;

        case 5: 
          $T1B().WriteSByte($T3E().$Cast(value), writer);
          return true;

        case 6: 
          $T1B().WriteByte($T21().$Cast(value), writer);
          return true;

        case 7: 
          $T1B().WriteInt16($T3F().$Cast(value), writer);
          return true;

        case 8: 
          $T1B().WriteUInt16($T40().$Cast(value), writer);
          return true;

        case 9: 
          $T1B().WriteInt32($T09().$Cast(value), writer);
          return true;

        case 10: 
          $T1B().WriteUInt32($T36().$Cast(value), writer);
          return true;

        case 11: 
          $T1B().WriteInt64($T1E().$Cast(value), writer);
          return true;

        case 12: 
          $T1B().WriteUInt64($T46().$Cast(value), writer);
          return true;

        case 13: 
          $T1B().WriteSingle($T41().$Cast(value), writer);
          return true;

        case 14: 
          $T1B().WriteDouble($T42().$Cast(value), writer);
          return true;

        case 15: 
          $T43().WriteDecimal($T47().$Cast(value), writer);
          return true;

        case 16: 
          if (this.SerializeDateTimeKind()) {
            $T43().WriteDateTimeWithKind($T48().$Cast(value).MemberwiseClone(), writer);
          } else {
            $T43().WriteDateTime($T48().$Cast(value).MemberwiseClone(), writer);
          }
          return true;

        case 17: 
          break;

        case 18: 
          $T1B().WriteString($T0D().$Cast(value), writer);
          return true;

        default: 
          switch (typeCode.valueOf()) {
            case 100: 
              $T43().WriteTimeSpan($T49().$Cast(value).MemberwiseClone(), writer);
              return true;

            case 101: 
              $T1B().WriteBytes($T20().$Cast(value), writer);
              return true;

            case 102: 
              $T43().WriteGuid($T4A().$Cast(value).MemberwiseClone(), writer);
              return true;

            case 103: 
              $T1B().WriteString(($T44().$Cast(value)).get_AbsoluteUri(), writer);
              return true;

          }
          break;

      }
      var enumerable = $T2A().$As(value);
      if (enumerable === null) {
        return false;
      }
      if (isInsideList) {
        throw $thisType.CreateNestedListsNotSupported();
      }
      var enumerator = $IM02().Call(enumerable, null);
      try {

        while ($IM03().Call(enumerator, null)) {
          var current = $IM04().Call(enumerator, null);
          if (current === null) {
            throw $S18().Construct();
          }
          if (!this.TrySerializeAuxiliaryType(
              writer, 
              null, 
              format, 
              tag, 
              current, 
              true
            )) {
            $thisType.ThrowUnexpectedType(JSIL.GetType(current));
          }
        }
      } finally {
        var disposable = $T1C().$As(enumerator);
        if (disposable !== null) {
          $IM00().Call(disposable, null);
        }
      }
      return true;
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.TypeModel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      TypeModel__ctor
    );

    $.Method({Static:false, Public:true }, "add_DynamicTypeFormatting", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeFormatEventHandler")), 
      TypeModel_add_DynamicTypeFormatting
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "CanSerialize", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")]), 
      TypeModel_CanSerialize$00
    );

    $.Method({Static:false, Public:false}, "CanSerialize", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $.Boolean, $.Boolean
        ]), 
      TypeModel_CanSerialize$01
    );

    $.Method({Static:false, Public:true }, "CanSerializeBasicType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")]), 
      TypeModel_CanSerializeBasicType
    );

    $.Method({Static:false, Public:true }, "CanSerializeContractType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")]), 
      TypeModel_CanSerializeContractType
    );

    $.Method({Static:true , Public:false}, "CheckDictionaryAccessors", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type")
        ]), 
      TypeModel_CheckDictionaryAccessors
    );

    $.Method({Static:true , Public:true }, "Create", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel")), 
      TypeModel_Create$02
    );

    $.Method({Static:false, Public:true }, "CreateFormatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Serialization.IFormatter"), [$asm07.TypeRef("System.Type")]), 
      TypeModel_CreateFormatter
    );

    $.Method({Static:true , Public:false}, "CreateListInstance", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")]), 
      TypeModel_CreateListInstance
    );

    $.Method({Static:true , Public:false}, "CreateNestedListsNotSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception")), 
      TypeModel_CreateNestedListsNotSupported
    );

    $.Method({Static:false, Public:true }, "DeepClone", 
      new JSIL.MethodSignature($.Object, [$.Object]), 
      TypeModel_DeepClone
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type")
        ]), 
      TypeModel_Deserialize$03
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_Deserialize$04
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $.Int32
        ]), 
      TypeModel_Deserialize$05
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["32-bit"]; });

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $.Int64
        ]), 
      TypeModel_Deserialize$06
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["32-bit"]; });

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_Deserialize$07
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["32-bit"]; });

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $.Int64, 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_Deserialize$08
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("ProtoBuf.ProtoReader"), $.Object, 
          $asm07.TypeRef("System.Type")
        ]), 
      TypeModel_Deserialize$09
    );

    $.Method({Static:false, Public:false}, "DeserializeCore", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("ProtoBuf.ProtoReader"), $asm07.TypeRef("System.Type"), 
          $.Object, $.Boolean
        ]), 
      TypeModel_DeserializeCore
    );

    $.Method({Static:false, Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerable"), [
          $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.PrefixStyle"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.Serializer+TypeResolver")
        ]), 
      TypeModel_DeserializeItems$0A
    );

    $.Method({Static:false, Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerable"), [
          $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.PrefixStyle"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.Serializer+TypeResolver"), $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_DeserializeItems$0B
    );

    $.Method({Static:false, Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ], ["T"]), 
      TypeModel_DeserializeItems$b1$0C
    );

    $.Method({Static:false, Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.SerializationContext")
        ], ["T"]), 
      TypeModel_DeserializeItems$b1$0D
    );

    $.Method({Static:true , Public:false}, "DeserializeType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Type, $.String]), 
      TypeModel_DeserializeType
    );

    $.Method({Static:false, Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ]), 
      TypeModel_DeserializeWithLengthPrefix$0E
    );

    $.Method({Static:false, Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.Serializer+TypeResolver")
        ]), 
      TypeModel_DeserializeWithLengthPrefix$0F
    );

    $.Method({Static:false, Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.Serializer+TypeResolver"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      TypeModel_DeserializeWithLengthPrefix$10
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["32-bit"]; });

    $.Method({Static:false, Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.Serializer+TypeResolver"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      TypeModel_DeserializeWithLengthPrefix$11
    );

    $.Method({Static:false, Public:false}, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.Serializer+TypeResolver"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_DeserializeWithLengthPrefix$12
    );

    $.Method({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])]), 
      TypeModel_GetKey$13
    );

    $.Method({Static:true , Public:false}, "GetListItemType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Type, $asm07.TypeRef("System.Type")]), 
      TypeModel_GetListItemType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")]), 
      TypeModel_GetSchema
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String, $asm07.TypeRef("System.Reflection.Assembly")]), 
      TypeModel_GetType$14
    );

    $.Method({Static:false, Public:false}, "GetWireType", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.WireType"), [
          $asm08.TypeRef("ProtoBuf.ProtoTypeCode"), $asm08.TypeRef("ProtoBuf.DataFormat"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      TypeModel_GetWireType
    );

    $.Method({Static:false, Public:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")]), 
      TypeModel_IsDefined
    );

    $.Method({Static:false, Public:false}, "MapType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")]), 
      TypeModel_MapType$15
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MapType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type"), $.Boolean]), 
      TypeModel_MapType$16
    );

    $.Method({Static:false, Public:false}, "PrepareDeserialize", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])]), 
      TypeModel_PrepareDeserialize
    );

    $.Method({Static:false, Public:true }, "remove_DynamicTypeFormatting", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.TypeFormatEventHandler")), 
      TypeModel_remove_DynamicTypeFormatting
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "ResolveKnownType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [
          $.String, $.Type, 
          $asm07.TypeRef("System.Reflection.Assembly")
        ]), 
      TypeModel_ResolveKnownType
    );

    $.Method({Static:true , Public:false}, "ResolveListAdd", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $.Type, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]), 
      TypeModel_ResolveListAdd
    );

    $.Method({Static:true , Public:false}, "ResolveProxies", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")]), 
      TypeModel_ResolveProxies
    );

    $.Method({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Object]), 
      TypeModel_Serialize$17
    );

    $.Method({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_Serialize$18
    );

    $.Method({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.ProtoWriter"), $.Object]), 
      TypeModel_Serialize$19
    );

    $.Method({Static:false, Public:false}, "SerializeCore", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.ProtoWriter"), $.Object]), 
      TypeModel_SerializeCore
    );

    $.Method({Static:false, Public:false, Virtual:true }, "SerializeDateTimeKind", 
      JSIL.MethodSignature.Return($.Boolean), 
      TypeModel_SerializeDateTimeKind
    );

    $.Method({Static:true , Public:false}, "SerializeType", 
      new JSIL.MethodSignature($.String, [$.Type, $asm07.TypeRef("System.Type")]), 
      TypeModel_SerializeType
    );

    $.Method({Static:false, Public:true }, "SerializeWithLengthPrefix", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ]), 
      TypeModel_SerializeWithLengthPrefix$1A
    );

    $.Method({Static:false, Public:true }, "SerializeWithLengthPrefix", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      TypeModel_SerializeWithLengthPrefix$1B
    );

    $.Method({Static:true , Public:false}, "TestEnumerableListPatterns", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm08.TypeRef("ProtoBuf.Meta.BasicList"), 
          $asm07.TypeRef("System.Type")
        ]), 
      TypeModel_TestEnumerableListPatterns
    );

    $.Method({Static:true , Public:true }, "ThrowCannotCreateInstance", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      TypeModel_ThrowCannotCreateInstance
    );

    $.Method({Static:true , Public:false}, "ThrowUnexpectedSubtype", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")]), 
      TypeModel_ThrowUnexpectedSubtype
    );

    $.Method({Static:true , Public:false}, "ThrowUnexpectedType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      TypeModel_ThrowUnexpectedType
    );

    $.Method({Static:false, Public:false}, "TryDeserializeAuxiliaryType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("ProtoBuf.ProtoReader"), $asm08.TypeRef("ProtoBuf.DataFormat"), 
          $.Int32, $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean
        ]), 
      TypeModel_TryDeserializeAuxiliaryType
    );

    $.Method({Static:false, Public:false}, "TryDeserializeList", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $asm08.TypeRef("ProtoBuf.ProtoReader"), 
          $asm08.TypeRef("ProtoBuf.DataFormat"), $.Int32, 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ]), 
      TypeModel_TryDeserializeList
    );

    $.Method({Static:false, Public:false}, "TrySerializeAuxiliaryType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("ProtoBuf.ProtoWriter"), $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.DataFormat"), $.Int32, 
          $.Object, $.Boolean
        ]), 
      TypeModel_TrySerializeAuxiliaryType
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ilist", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Collections.IList.__Type__;
      });

    $.Field({Static:false, Public:false}, "DynamicTypeFormatting", $asm08.TypeRef("ProtoBuf.Meta.TypeFormatEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));


    function TypeModel__cctor () {
      $thisType.ilist = $T00().__Type__;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TypeModel__cctor
    );

    $.Event({Static:false, Public:true }, "DynamicTypeFormatting", $asm08.TypeRef("ProtoBuf.Meta.TypeFormatEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.TypeModel+DeserializeItemsIterator */ 

(function DeserializeItemsIterator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.PrefixStyle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Serializer_TypeResolver)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, null))) ();
  };


  function DeserializeItemsIterator__ctor (model, source, type, style, expectedField, resolver, context) {
    this.haveObject = true;
    this.source = source;
    this.type = type;
    this.style = style;
    this.expectedField = (expectedField | 0);
    this.resolver = resolver;
    this.model = model;
    this.context = context;
  }; 

  function DeserializeItemsIterator_get_Current$00 () {
    return this.current;
  }; 

  function DeserializeItemsIterator_MoveNext () {
    var num = new JSIL.BoxedVariable($T07().Create(0, 0, 0));
    if (this.haveObject) {
      this.current = (this.model).DeserializeWithLengthPrefix(
        this.source, 
        null, 
        this.type, 
        this.style, 
        this.expectedField, 
        this.resolver, 
        /* ref */ num, 
        /* ref */ new JSIL.MemberReference(this, "haveObject"), 
        this.context
      );
    }
    return this.haveObject;
  }; 

  function DeserializeItemsIterator_System_Collections_IEnumerable_GetEnumerator () {
    return this;
  }; 

  function DeserializeItemsIterator_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.TypeModel+DeserializeItemsIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.IO.Stream"), 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.Serializer+TypeResolver"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      DeserializeItemsIterator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object), 
      DeserializeItemsIterator_get_Current$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean), 
      DeserializeItemsIterator_MoveNext
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator")), 
      DeserializeItemsIterator_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void, 
      DeserializeItemsIterator_System_Collections_IEnumerator_Reset
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "haveObject", $.Boolean);

    $.Field({Static:false, Public:false}, "current", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "source", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "style", $asm08.TypeRef("ProtoBuf.PrefixStyle"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "expectedField", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "resolver", $asm08.TypeRef("ProtoBuf.Serializer+TypeResolver"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "context", $asm08.TypeRef("ProtoBuf.SerializationContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.TypeModel+DeserializeItemsIterator`1 */ 

(function DeserializeItemsIterator$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.PrefixStyle)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel_DeserializeItemsIterator)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Return($asm07.TypeRef("System.Object")))) ();
  };


  function DeserializeItemsIterator$b1__ctor (model, source, style, expectedField, context) {
    $T05().prototype._ctor.call(this, 
      model, 
      source, 
      model.MapType($thisType.T.get(this)), 
      style, 
      expectedField, 
      null, 
      context
    );
  }; 

  function DeserializeItemsIterator$b1_get_Current$00 () {
    return $thisType.T.get(this).$Cast($S00().Call($T05().prototype, "get_Current", null, this));
  }; 

  function DeserializeItemsIterator$b1_System_Collections_Generic_IEnumerable$lT$g_GetEnumerator () {
    return this;
  }; 

  function DeserializeItemsIterator$b1_System_IDisposable_Dispose () {
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Meta.TypeModel+DeserializeItemsIterator"), 
      Name: "ProtoBuf.Meta.TypeModel+DeserializeItemsIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.IO.Stream"), 
          $asm08.TypeRef("ProtoBuf.PrefixStyle"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ]), 
      DeserializeItemsIterator$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      DeserializeItemsIterator$b1_get_Current$00
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null), 
      DeserializeItemsIterator$b1_System_Collections_Generic_IEnumerable$lT$g_GetEnumerator
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void, 
      DeserializeItemsIterator$b1_System_IDisposable_Dispose
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose");

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.Meta.TypeModel+CallbackType */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.Meta.TypeModel+CallbackType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BeforeSerialize: 0, 
    AfterSerialize: 1, 
    BeforeDeserialize: 2, 
    AfterDeserialize: 3, 
  }
);

/* class ProtoBuf.Meta.TypeModel+Formatter */ 

(function Formatter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Runtime.Serialization.SerializationBinder)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Runtime.Serialization.StreamingContext)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Runtime.Serialization.ISurrogateSelector)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm07.System.Type, $asm07.System.Int64, 
        $asm08.ProtoBuf.SerializationContext
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm08.ProtoBuf.SerializationContext, [$asm07.System.Runtime.Serialization.StreamingContext]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.System.IO.Stream, $asm07.System.Object, 
        $asm08.ProtoBuf.SerializationContext
      ]))) ();
  };


  function Formatter__ctor (model, type) {
    if (model === null) {
      throw $S00().Construct("model");
    }
    if ($T01().op_Equality(type, null)) {
      throw $S00().Construct("type");
    }
    this.model = model;
    this.type = type;
  }; 

  function Formatter_Deserialize (source) {
    return $S01().CallVirtual("Deserialize", null, this.model, 
      source, 
      null, 
      this.type, 
      $T04().Create(16777215, 16777215, 65535), 
      $S02().CallStatic($T05(), "op_Implicit", null, this.get_Context().MemberwiseClone())
    );
  }; 

  function Formatter_get_Binder () {
    return this.binder;
  }; 

  function Formatter_get_Context () {
    return this.context;
  }; 

  function Formatter_get_SurrogateSelector () {
    return this.surrogateSelector;
  }; 

  function Formatter_Serialize (destination, graph) {
    $S03().CallVirtual("Serialize", null, this.model, destination, graph, $S02().CallStatic($T05(), "op_Implicit", null, this.get_Context().MemberwiseClone()));
  }; 

  function Formatter_set_Binder (value) {
    this.binder = value;
  }; 

  function Formatter_set_Context (value) {
    this.context = value.MemberwiseClone();
  }; 

  function Formatter_set_SurrogateSelector (value) {
    this.surrogateSelector = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.TypeModel+Formatter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type")]), 
      Formatter__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.Stream")]), 
      Formatter_Deserialize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Binder", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Runtime.Serialization.SerializationBinder")), 
      Formatter_get_Binder
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Context", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Runtime.Serialization.StreamingContext")), 
      Formatter_get_Context
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_SurrogateSelector", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Runtime.Serialization.ISurrogateSelector")), 
      Formatter_get_SurrogateSelector
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Object]), 
      Formatter_Serialize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Binder", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.Serialization.SerializationBinder")), 
      Formatter_set_Binder
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Context", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.Serialization.StreamingContext")), 
      Formatter_set_Context
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_SurrogateSelector", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.Serialization.ISurrogateSelector")), 
      Formatter_set_SurrogateSelector
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "binder", $asm07.TypeRef("System.Runtime.Serialization.SerializationBinder"));

    $.Field({Static:false, Public:false}, "context", $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"));

    $.Field({Static:false, Public:false}, "surrogateSelector", $asm07.TypeRef("System.Runtime.Serialization.ISurrogateSelector"));

    $.Property({Static:false, Public:true , Virtual:true }, "Binder", $asm07.TypeRef("System.Runtime.Serialization.SerializationBinder"));

    $.Property({Static:false, Public:true , Virtual:true }, "Context", $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "SurrogateSelector", $asm07.TypeRef("System.Runtime.Serialization.ISurrogateSelector"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.Serialization.IFormatter")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.RuntimeTypeModel */ 

(function RuntimeTypeModel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_MatchPredicate)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Meta.MetaType)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.Meta.LockContentedEventHandler)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Delegate)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Threading.Interlocked)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel_BasicType)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoTypeSerializer)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.MemberInfo))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.Meta.ValueMember)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.Reflection.ConstructorInfo)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.Reflection.PropertyInfo)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Reflection.FieldInfo)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.Collections.IEnumerable)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Meta.SubType))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm08.ProtoBuf.Meta.SubType)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel_CompilerOptions)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Meta.RuntimeTypeModel_SerializerPair))) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext_ILVersion)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm07.System.Reflection.Emit.ILGenerator)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm07.System.Reflection.Emit.FieldBuilder)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm07.System.IO.FileSystemInfo)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm07.System.IO.FileInfo)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm07.System.IO.Path)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm07.System.Reflection.AssemblyName)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm07.System.Reflection.Emit.AssemblyBuilder)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm07.System.AppDomain)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm07.System.Reflection.Emit.AssemblyBuilderAccess)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm07.System.Reflection.Emit.ModuleBuilder)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm07.System.Reflection.Emit.TypeBuilder)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm07.System.Reflection.Emit.OpCodes)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm07.System.IO.IOException)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm07.System.Activator)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_NodeEnumerator)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm07.System.Reflection.Emit.MethodBuilder)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm07.System.Reflection.MethodAttributes)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm07.System.Reflection.CallingConventions)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm08.ProtoBuf.Meta.MetaType_AttributeFamily)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel_Singleton)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm07.System.Text.StringBuilder)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Meta.MetaType))) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm07.System.Array)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm08.ProtoBuf.Meta.MetaType_Comparer)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ParseableSerializer)) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm08.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm08.ProtoBuf.Compiler.ProtoSerializer)) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm07.System.Reflection.BindingFlags)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.ParameterInfo))) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize(System.Array.Of($asm07.System.Type))) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize($asm07.System.Reflection.ParameterInfo)) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm07.System.Threading.Monitor)) ();
  };
  var $T4F = function () {
    return ($T4F = JSIL.Memoize($asm08.ProtoBuf.Meta.LockContentedEventArgs)) ();
  };
  var $T50 = function () {
    return ($T50 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T51 = function () {
    return ($T51 = JSIL.Memoize($asm07.System.Collections.Generic.IDictionary$b2)) ();
  };
  var $T52 = function () {
    return ($T52 = JSIL.Memoize($asm07.System.Collections.Generic.KeyValuePair$b2)) ();
  };
  var $T53 = function () {
    return ($T53 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2)) ();
  };
  var $T54 = function () {
    return ($T54 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1)) ();
  };
  var $T55 = function () {
    return ($T55 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T56 = function () {
    return ($T56 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T57 = function () {
    return ($T57 = JSIL.Memoize($asm07.System.TimeoutException)) ();
  };
  var $T58 = function () {
    return ($T58 = JSIL.Memoize($asm08.ProtoBuf.Meta.CallbackSet)) ();
  };
  var $T59 = function () {
    return ($T59 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.PropertyInfo))) ();
  };
  var $T5A = function () {
    return ($T5A = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T5B = function () {
    return ($T5B = JSIL.Memoize($asm07.System.Reflection.Emit.CustomAttributeBuilder)) ();
  };
  var $T5C = function () {
    return ($T5C = JSIL.Memoize($asm07.System.Runtime.CompilerServices.InternalsVisibleToAttribute)) ();
  };
  var $T5D = function () {
    return ($T5D = JSIL.Memoize($asm07.System.Reflection.Assembly)) ();
  };
  var $T5E = function () {
    return ($T5E = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Meta.AttributeMap))) ();
  };
  var $T5F = function () {
    return ($T5F = JSIL.Memoize($asm08.ProtoBuf.Meta.AttributeMap)) ();
  };
  var $T60 = function () {
    return ($T60 = JSIL.Memoize($asm07.System.Reflection.TypeAttributes)) ();
  };
  var $T61 = function () {
    return ($T61 = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel_Accessibility)) ();
  };
  var $T62 = function () {
    return ($T62 = JSIL.Memoize($asm07.System.Reflection.Emit.ConstructorBuilder)) ();
  };
  var $T63 = function () {
    return ($T63 = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel_SerializerPair)) ();
  };
  var $T64 = function () {
    return ($T64 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.Type, $asm07.System.Int32))) ();
  };
  var $T65 = function () {
    return ($T65 = JSIL.Memoize($asm07.System.Collections.Hashtable)) ();
  };
  var $T66 = function () {
    return ($T66 = JSIL.Memoize($asm07.System.Reflection.FieldAttributes)) ();
  };
  var $T67 = function () {
    return ($T67 = JSIL.Memoize($asm07.System.Collections.IList)) ();
  };
  var $T68 = function () {
    return ($T68 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Compiler.CodeLabel))) ();
  };
  var $T69 = function () {
    return ($T69 = JSIL.Memoize($asm07.System.Reflection.Emit.LocalBuilder)) ();
  };
  var $T6A = function () {
    return ($T6A = JSIL.Memoize($asm07.System.Reflection.Emit.Label)) ();
  };
  var $T6B = function () {
    return ($T6B = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Object, $asm07.System.Object]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Object, $asm07.System.Object]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Type]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String, $asm07.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [JSIL.Reference.Of($asm07.System.Int32)]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.IO.FileInfo, [$asm07.System.String]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Reflection.AssemblyName, null))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Reflection.Emit.ModuleBuilder, [$asm07.System.String, $asm07.System.String]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.IO.IOException, [$asm07.System.String, $asm07.System.Exception]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.CompilerContext, [
        $asm07.System.Reflection.Emit.ILGenerator, $asm07.System.Boolean, 
        $asm07.System.Boolean, System.Array.Of($asm08.ProtoBuf.Meta.RuntimeTypeModel_SerializerPair), 
        $asm08.ProtoBuf.Meta.TypeModel, $asm08.ProtoBuf.Compiler.CompilerContext_ILVersion, 
        $asm07.System.String, $asm07.System.Type, 
        $asm07.System.String
      ]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [
        JSIL.Reference.Of($asm07.System.Int32), $asm07.System.Int32, 
        $asm07.System.Int32
      ]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.ProtoException, [$asm07.System.String, $asm07.System.Exception]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Text.StringBuilder, null))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Text.StringBuilder, [$asm07.System.Char]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Text.StringBuilder, [$asm07.System.String]))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"]), $asm07.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"])], ["T"]))) ();
  };
  var $S17 = function () {
    return ($S17 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Text.StringBuilder, [$asm07.System.Object]))) ();
  };
  var $S18 = function () {
    return ($S18 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, [$asm07.System.String]))) ();
  };
  var $S19 = function () {
    return ($S19 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Object, $asm08.ProtoBuf.ProtoWriter]))) ();
  };
  var $S1A = function () {
    return ($S1A = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Reflection.MethodInfo, [$asm07.System.String, $asm07.System.Reflection.BindingFlags]))) ();
  };
  var $S1B = function () {
    return ($S1B = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.ProtoException, null))) ();
  };
  var $S1C = function () {
    return ($S1C = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };
  var $S1D = function () {
    return ($S1D = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Object, $asm07.System.Int32]))) ();
  };
  var $S1E = function () {
    return ($S1E = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.TimeoutException, [$asm07.System.String]))) ();
  };
  var $S1F = function () {
    return ($S1F = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, null))) ();
  };
  var $S20 = function () {
    return ($S20 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Reflection.Emit.CustomAttributeBuilder, [
        $asm07.System.Reflection.ConstructorInfo, System.Array.Of($asm07.System.Object), 
        System.Array.Of($asm07.System.Reflection.PropertyInfo), System.Array.Of($asm07.System.Object)
      ]))) ();
  };
  var $S21 = function () {
    return ($S21 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Reflection.Emit.CustomAttributeBuilder, [$asm07.System.Reflection.ConstructorInfo, System.Array.Of($asm07.System.Object)]))) ();
  };
  var $S22 = function () {
    return ($S22 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Type]))) ();
  };
  var $S23 = function () {
    return ($S23 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Reflection.FieldInfo]))) ();
  };
  var $S24 = function () {
    return ($S24 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Reflection.ConstructorInfo]))) ();
  };
  var $S25 = function () {
    return ($S25 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Reflection.MethodInfo, [$asm07.System.String, System.Array.Of($asm07.System.Type)]))) ();
  };
  var $S26 = function () {
    return ($S26 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Reflection.Emit.LocalBuilder]))) ();
  };
  var $S27 = function () {
    return ($S27 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Reflection.Emit.Label]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.Collections.IEnumerator.get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Read)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.Write)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitWrite)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitRead)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };


  function RuntimeTypeModel__ctor (isDefault) {
    this.basicTypes = new ($T02())();
    this.types = new ($T02())();
    this.metadataTimeoutMilliseconds = 5000;
    this.contentionCounter = 1;
    $T03().prototype._ctor.call(this);
    this.set_AutoAddMissingTypes(true);
    this.set_UseImplicitZeroDefaults(true);
    this.SetOption(2, isDefault);
    this.set_AutoCompile(true);
  }; 

  function RuntimeTypeModel_Add (type, applyDefaultBehaviour) {
    if ($T04().op_Equality(type, null)) {
      throw $S02().Construct("type");
    }
    var metaType = this.FindWithoutAdd(type);
    if (metaType !== null) {
      return metaType;
    }
    var opaqueToken = new JSIL.BoxedVariable(0);
    if (!(!type.get_IsInterface() || 
        !$S03().CallVirtual("IsAssignableFrom", null, this.MapType($T06().ienumerable), type) || !$T04().op_Equality($T03().GetListItemType(this, type), null))) {
      throw $S04().Construct("IEnumerable[<T>] data cannot be used as a meta-type unless an Add method can be resolved");
    }
    try {
      metaType = this.RecogniseCommonTypes(type);
      if (metaType !== null) {
        if (!applyDefaultBehaviour) {
          throw $S05().Construct(JSIL.ConcatString("Default behaviour must be observed for certain types with special handling; ", type.get_FullName()), "applyDefaultBehaviour");
        }
        applyDefaultBehaviour = false;
      }
      if (metaType === null) {
        metaType = this.Create(type);
      }
      metaType.set_Pending(true);
      this.TakeLock(/* ref */ opaqueToken);
      if (this.FindWithoutAdd(type) !== null) {
        throw $S05().Construct("Duplicate type", "type");
      }
      this.ThrowIfFrozen();
      (this.types).Add(metaType);
      if (applyDefaultBehaviour) {
        metaType.ApplyDefaultBehaviour();
      }
      metaType.set_Pending(false);
    } finally {
      this.ReleaseLock(opaqueToken.get());
    }
    return metaType;
  }; 

  function RuntimeTypeModel_add_LockContended (value) {
    var lockContentedEventHandler = this.LockContended;

    do {
      var lockContentedEventHandler2 = lockContentedEventHandler;
      var value2 = $T0B().Combine(lockContentedEventHandler2, value);
      lockContentedEventHandler = $T0C().CompareExchange$b1($T0A())(/* ref */ new JSIL.MemberReference(this, "LockContended"), value2, lockContentedEventHandler2);
    } while (lockContentedEventHandler !== lockContentedEventHandler2);
  }; 

  function RuntimeTypeModel_AddContention () {
    $S06().CallStatic($T0C(), "Increment", null, /* ref */ new JSIL.MemberReference(this, "contentionCounter"));
  }; 

  function RuntimeTypeModel_BasicTypeFinderImpl (value, ctx) {
    return $T04().op_Equality(($T0E().$Cast(value)).get_Type(), $T04().$Cast(ctx));
  }; 

  function RuntimeTypeModel_BuildAllSerializers () {

    for (var i = 0; i < ((this.types).get_Count() | 0); i = ((i + 1) | 0)) {
      var metaType = $T06().$Cast((this.types).get_Item(i));
      if (metaType.get_Serializer() === null) {
        throw $S07().Construct(JSIL.ConcatString("No serializer available for ", (metaType.get_Type()).get_Name()));
      }
    }
  }; 

  function RuntimeTypeModel_CascadeDependents (list, metaType) {
    var wireType = new JSIL.BoxedVariable($asm08.ProtoBuf.WireType.Variant);
    var array = new JSIL.BoxedVariable(null);
    var wireType2 = new JSIL.BoxedVariable($asm08.ProtoBuf.WireType.Variant);
    var wireType3 = new JSIL.BoxedVariable($asm08.ProtoBuf.WireType.Variant);
    if (metaType.get_IsList()) {
      var listItemType = $T03().GetListItemType(this, metaType.get_Type());
      if ($T14().TryGetCoreSerializer(
          this, 
          $T15().Default, 
          listItemType, 
          /* ref */ wireType, 
          false, 
          false, 
          false, 
          false
        ) === null) {
        var num = (this.FindOrAddAuto(listItemType, false, false, false) | 0);
        if (num >= 0) {
          var metaType2 = ($T06().$Cast((this.types).get_Item(num))).GetSurrogateOrBaseOrSelf(false);
          if (!list.Contains(metaType2)) {
            list.Add(metaType2);
            this.CascadeDependents(list, metaType2);
            return;
          }
        }
      }
    } else {
      if (metaType.get_IsAutoTuple()) {
        if ($T17().op_Inequality($T06().ResolveTupleConstructor(metaType.get_Type(), /* ref */ array), null)) {

          for (var i = 0; i < (array.get().length | 0); i = ((i + 1) | 0)) {
            var type = null;
            if ($T18().$As(array.get()[i]) !== null) {
              type = ($T18().$Cast(array.get()[i])).get_PropertyType();
            } else if ($T19().$As(array.get()[i]) !== null) {
              type = ($T19().$Cast(array.get()[i])).get_FieldType();
            }
            if ($T14().TryGetCoreSerializer(
                this, 
                $T15().Default, 
                type, 
                /* ref */ wireType2, 
                false, 
                false, 
                false, 
                false
              ) === null) {
              var num2 = (this.FindOrAddAuto(type, false, false, false) | 0);
              if (num2 >= 0) {
                metaType2 = ($T06().$Cast((this.types).get_Item(num2))).GetSurrogateOrBaseOrSelf(false);
                if (!list.Contains(metaType2)) {
                  list.Add(metaType2);
                  this.CascadeDependents(list, metaType2);
                }
              }
            }
          }
        }
      } else {
        var enumerator = $IM00().Call(metaType.get_Fields(), null);
        try {

          while ($IM01().Call(enumerator, null)) {
            var valueMember = $T14().$Cast($IM02().Call(enumerator, null));
            var type2 = valueMember.get_ItemType();
            if ($T04().op_Equality(type2, null)) {
              type2 = valueMember.get_MemberType();
            }
            if ($T14().TryGetCoreSerializer(
                this, 
                $T15().Default, 
                type2, 
                /* ref */ wireType3, 
                false, 
                false, 
                false, 
                false
              ) === null) {
              var num3 = (this.FindOrAddAuto(type2, false, false, false) | 0);
              if (num3 >= 0) {
                metaType2 = ($T06().$Cast((this.types).get_Item(num3))).GetSurrogateOrBaseOrSelf(false);
                if (!list.Contains(metaType2)) {
                  list.Add(metaType2);
                  this.CascadeDependents(list, metaType2);
                }
              }
            }
          }
        } finally {
          var disposable = $T1C().$As(enumerator);
          if (disposable !== null) {
            $IM03().Call(disposable, null);
          }
        }
      }
      if (metaType.get_HasSubtypes()) {
        var subtypes = metaType.GetSubtypes();

        for (var j = 0; j < (subtypes.length | 0); j = ((j + 1) | 0)) {
          var subType = subtypes[j];
          metaType2 = (subType.get_DerivedType()).GetSurrogateOrSelf();
          if (!list.Contains(metaType2)) {
            list.Add(metaType2);
            this.CascadeDependents(list, metaType2);
          }
        }
      }
      metaType2 = metaType.get_BaseType();
      if (metaType2 !== null) {
        metaType2 = metaType2.GetSurrogateOrSelf();
      }
      if (!((metaType2 === null) || list.Contains(metaType2))) {
        list.Add(metaType2);
        this.CascadeDependents(list, metaType2);
      }
    }
  }; 

  function RuntimeTypeModel_Compile$00 () {
    var compilerOptions = new ($T1F())();
    return this.Compile(compilerOptions);
  }; 

  function RuntimeTypeModel_Compile$01 (name, path) {
    var compilerOptions = new ($T1F())();
    compilerOptions.set_TypeName(name);
    compilerOptions.set_OutputPath(path);
    return this.Compile(compilerOptions);
  }; 

  function RuntimeTypeModel_Compile$02 (options, $exception) {
    var num = new JSIL.BoxedVariable(0);
    var hasInheritance = new JSIL.BoxedVariable(false);
    var methodPairs = new JSIL.BoxedVariable(null);
    var ilVersion = new JSIL.BoxedVariable($asm08.ProtoBuf.Compiler.CompilerContext_ILVersion.Net1);
    var iLGenerator = new JSIL.BoxedVariable(null);
    var knownTypesCategory = new JSIL.BoxedVariable(0);
    var knownTypes = new JSIL.BoxedVariable(null);
    var knownTypesLookupType = new JSIL.BoxedVariable(null);
    if (options === null) {
      throw $S02().Construct("options");
    }
    var text = options.get_TypeName();
    var outputPath = options.get_OutputPath();
    this.BuildAllSerializers();
    this.Freeze();
    if ($T25().IsNullOrEmpty(text)) {
      if (!$T25().IsNullOrEmpty(outputPath)) {
        throw $S02().Construct("typeName");
      }
      text = $T26().NewGuid().MemberwiseClone().toString();
    }
    if (outputPath === null) {
      var text2 = text;
      var name = (JSIL.ConcatString(text2, ".dll"));
    } else {
      text2 = ($S08().Construct($T29().GetFileNameWithoutExtension(outputPath))).get_Name();
      name = (JSIL.ConcatString(text2, $T29().GetExtension(outputPath)));
    }
    var assemblyName = $S09().Construct();
    assemblyName.set_Name(text2);
    var assemblyBuilder = $T2C().get_CurrentDomain().DefineDynamicAssembly(assemblyName, (
        !$T25().IsNullOrEmpty(outputPath)
           ? $T2D().RunAndSave
           : $T2D().Run)
    );
    var module = (
      !$T25().IsNullOrEmpty(outputPath)
         ? $S0A().CallVirtual("DefineDynamicModule", null, assemblyBuilder, name, outputPath)
         : assemblyBuilder.DefineDynamicModule(name))
    ;
    this.WriteAssemblyAttributes(options, text2, assemblyBuilder);
    var typeBuilder = this.WriteBasicTypeModel(options, text, module);
    this.WriteSerializers(
      options, 
      text2, 
      typeBuilder, 
      /* ref */ num, 
      /* ref */ hasInheritance, 
      /* ref */ methodPairs, 
      /* ref */ ilVersion
    );
    this.WriteGetKeyImpl(
      typeBuilder, 
      hasInheritance.get(), 
      methodPairs.get(), 
      ilVersion.get(), 
      text2, 
      /* ref */ iLGenerator, 
      /* ref */ knownTypesCategory, 
      /* ref */ knownTypes, 
      /* ref */ knownTypesLookupType
    );
    iLGenerator.set($thisType.Override(typeBuilder, "SerializeDateTimeKind"));
    (iLGenerator.get()).Emit((
        this.get_IncludeDateTimeKind()
           ? $T30().Ldc_I4_1
           : $T30().Ldc_I4_0)
      .MemberwiseClone());
    (iLGenerator.get()).Emit($T30().Ret.MemberwiseClone());
    var ctx = this.WriteSerializeDeserialize(
      text2, 
      typeBuilder, 
      methodPairs.get(), 
      ilVersion.get(), 
      /* ref */ iLGenerator
    );
    this.WriteConstructors(
      typeBuilder, 
      /* ref */ num, 
      methodPairs.get(), 
      /* ref */ iLGenerator, 
      knownTypesCategory.get(), 
      knownTypes.get(), 
      knownTypesLookupType.get(), 
      ctx
    );
    var type = typeBuilder.CreateType();
    if (!$T25().IsNullOrEmpty(outputPath)) {
      try {
        assemblyBuilder.Save(outputPath);
      } catch ($exception) {
        if ($T32().$Is($exception)) {
          var ex = $exception;
          throw $S0B().Construct((outputPath + ", " + ex.get_Message()), ex);
        } else {
          throw $exception;
        }
      }
    }
    return $T03().$Cast($S0C().CallStatic($T33(), "CreateInstance", null, type));
  }; 

  function RuntimeTypeModel_CompileInPlace () {

    for (var enumerator = (this.types).GetEnumerator(); enumerator.MoveNext(); ) {
      var metaType = $T06().$Cast(enumerator.get_Current());
      metaType.CompileInPlace();
    }
  }; 

  function RuntimeTypeModel_Create (type) {
    this.ThrowIfFrozen();
    return new ($T06())(this, type, this.defaultFactory);
  }; 

  function RuntimeTypeModel_Deserialize$03 (key, value, source) {
    var serializer = ($T06().$Cast((this.types).get_Item(key))).get_Serializer();
    if (!((value !== null) || !$T25().IsValueType($IM04().Call(serializer, null)))) {
      if ($IM05().Call(serializer, null)) {
        value = $S0C().CallStatic($T33(), "CreateInstance", null, $IM04().Call(serializer, null));
      }
      return $IM06().Call(serializer, null, value, source);
    }
    return $IM06().Call(serializer, null, value, source);
  }; 

  function RuntimeTypeModel_EmitBoxedSerializer (type, i, valueType, methodPairs, model, ilVersion, assemblyName) {
    var deserialize = methodPairs[i].Deserialize;
    var methodBuilder = type.DefineMethod(
      JSIL.ConcatString("_", (i).toString()), 
      $T38().Static, 
      $T39().Standard, 
      model.MapType($T0D().__Type__), 
      JSIL.Array.New($T04(), [model.MapType($T0D().__Type__), model.MapType($T35().__Type__)])
    );
    var compilerContext = $S0D().Construct(methodBuilder.GetILGenerator(), true, false, methodPairs, model, ilVersion, assemblyName, model.MapType($T0D().__Type__), JSIL.ConcatString("BoxedSerializer ", valueType.get_Name()));
    $S0E().CallVirtual("LoadValue", null, compilerContext, compilerContext.get_InputValue());
    var label = compilerContext.DefineLabel();
    compilerContext.BranchIfFalse(label, true);
    $S0E().CallVirtual("LoadValue", null, compilerContext, compilerContext.get_InputValue());
    compilerContext.CastFromObject(valueType);
    compilerContext.LoadReaderWriter();
    compilerContext.EmitCall(deserialize);
    compilerContext.CastToObject(valueType);
    compilerContext.Return();
    compilerContext.MarkLabel(label);
    var local = $S0F().Construct(compilerContext, valueType);
    try {
      compilerContext.LoadAddress(local, valueType);
      $S10().CallVirtual("EmitCtor", null, compilerContext, valueType);
      $S0E().CallVirtual("LoadValue", null, compilerContext, local);
      compilerContext.LoadReaderWriter();
      compilerContext.EmitCall(deserialize);
      compilerContext.CastToObject(valueType);
      compilerContext.Return();
    } finally {
      if (local !== null) {
        $IM03().Call(local, null);
      }
    }
    return methodBuilder;
  }; 

  function RuntimeTypeModel_FindOrAddAuto (type, demand, addWithContractOnly, addEvenIfAutoDisabled) {
    var num = ((this.types).IndexOf($thisType.MetaTypeFinder, type) | 0);
    if (num >= 0) {
      var metaType = $T06().$Cast((this.types).get_Item(num));
      if (metaType.get_Pending()) {
        this.WaitOnLock(metaType);
      }
      return num;
    }
    var flag = this.get_AutoAddMissingTypes() | addEvenIfAutoDisabled;
    var opaqueToken = new JSIL.BoxedVariable(0);
    if ($T25().IsEnum(type) || (this.TryGetBasicTypeSerializer(type) === null)) {
      var type2 = $T03().ResolveProxies(type);
      if ($T04().op_Inequality(type2, null)) {
        num = ((this.types).IndexOf($thisType.MetaTypeFinder, type2) | 0);
        type = type2;
      }
      if (num < 0) {
        opaqueToken.set(0);
        try {
          this.TakeLock(/* ref */ opaqueToken);
          if ((metaType = this.RecogniseCommonTypes(type)) === null) {
            var contractFamily = $T06().GetContractFamily(this, type, null);
            if (contractFamily === $T3C().AutoTuple) {
              addEvenIfAutoDisabled = flag = true;
            }
            if (!(flag && (!(!$T25().IsEnum(type) & addWithContractOnly) || 
                  ((contractFamily.valueOf() | 0) !== 0)))) {
              if (demand) {
                $T03().ThrowUnexpectedType(type);
              }
              return num;
            }
            metaType = this.Create(type);
          }
          metaType.set_Pending(true);
          var flag2 = false;
          var num2 = ((this.types).IndexOf($thisType.MetaTypeFinder, type) | 0);
          if (num2 < 0) {
            this.ThrowIfFrozen();
            num = ((this.types).Add(metaType) | 0);
            flag2 = true;
          } else {
            num = num2;
          }
          if (flag2) {
            metaType.ApplyDefaultBehaviour();
            metaType.set_Pending(false);
          }
        } finally {
          this.ReleaseLock(opaqueToken.get());
        }
        return num;
      }
      return num;
    }
    if (!(!flag || addWithContractOnly)) {
      throw $T06().InbuiltType(type);
    }
    return -1;
  }; 

  function RuntimeTypeModel_FindWithoutAdd (type) {

    for (var enumerator = (this.types).GetEnumerator(); enumerator.MoveNext(); ) {
      var metaType = $T06().$Cast(enumerator.get_Current());
      if ($T04().op_Equality(metaType.get_Type(), type)) {
        if (metaType.get_Pending()) {
          this.WaitOnLock(metaType);
        }
        return metaType;
      }
    }
    var type2 = $T03().ResolveProxies(type);
    if (!$T04().op_Equality(type2, null)) {
      return this.FindWithoutAdd(type2);
    }
    return null;
  }; 

  function RuntimeTypeModel_Freeze () {
    if (this.GetOption(2)) {
      throw $S07().Construct("The default model cannot be frozen");
    }
    this.SetOption(4, true);
  }; 

  function RuntimeTypeModel_get_AllowParseableTypes () {
    return this.GetOption(64);
  }; 

  function RuntimeTypeModel_get_AutoAddMissingTypes () {
    return this.GetOption(8);
  }; 

  function RuntimeTypeModel_get_AutoAddProtoContractTypesOnly () {
    return this.GetOption(128);
  }; 

  function RuntimeTypeModel_get_AutoCompile () {
    return this.GetOption(16);
  }; 

  function RuntimeTypeModel_get_Default () {
    return $T3D().Value;
  }; 

  function RuntimeTypeModel_get_IncludeDateTimeKind () {
    return this.GetOption(256);
  }; 

  function RuntimeTypeModel_get_InferTagFromNameDefault () {
    return this.GetOption(1);
  }; 

  function RuntimeTypeModel_get_Item (type) {
    return $T06().$Cast((this.types).get_Item(this.FindOrAddAuto(type, true, false, false)));
  }; 

  function RuntimeTypeModel_get_MetadataTimeoutMilliseconds () {
    return this.metadataTimeoutMilliseconds;
  }; 

  function RuntimeTypeModel_get_UseImplicitZeroDefaults () {
    return this.GetOption(32);
  }; 

  function RuntimeTypeModel_GetContention () {
    return $S11().CallStatic($T0C(), "CompareExchange", null, /* ref */ new JSIL.MemberReference(this, "contentionCounter"), 0, 0);
  }; 

  function RuntimeTypeModel_GetEnumMap (type) {
    var num = (this.FindOrAddAuto(type, false, false, false) | 0);
    if (num >= 0) {
      return ($T06().$Cast((this.types).get_Item(num))).GetEnumMap();
    }
    return null;
  }; 

  function RuntimeTypeModel_GetKey$04 (type, demand, getBaseKey, $exception) {
    try {
      var num = (this.FindOrAddAuto(type, demand, true, false) | 0);
      if (num >= 0) {
        var metaType = $T06().$Cast((this.types).get_Item(num));
        if (getBaseKey) {
          metaType = $T06().GetRootType(metaType);
          num = (this.FindOrAddAuto(metaType.get_Type(), true, true, false) | 0);
        }
      }
      var result = num;
    } catch ($exception) {
      if ($T3E().$Is($exception)) {
        throw $exception;
      } else {
        var ex = $exception;
        if ((ex.get_Message().indexOf(type.get_FullName())) >= 0) {
          throw $exception;
        }
        throw $S12().Construct((ex.get_Message() + " (" + type.get_FullName() + ")"), ex);
      }
    }
    return result;
  }; 

  function RuntimeTypeModel_GetKeyImpl (type) {
    return this.GetKey(type, false, true);
  }; 

  function RuntimeTypeModel_GetOption (option) {
    return (((this.options | 0) & (option | 0)) === (option | 0));
  }; 

  function RuntimeTypeModel_GetSchema (type) {
    var wireType = new JSIL.BoxedVariable($asm08.ProtoBuf.WireType.Variant);
    var basicList = new ($T02())();
    var metaType = null;
    var flag = false;
    if ($T04().op_Equality(type, null)) {

      for (var enumerator = (this.types).GetEnumerator(); enumerator.MoveNext(); ) {
        var metaType2 = $T06().$Cast(enumerator.get_Current());
        var surrogateOrBaseOrSelf = metaType2.GetSurrogateOrBaseOrSelf(false);
        if (!basicList.Contains(surrogateOrBaseOrSelf)) {
          basicList.Add(surrogateOrBaseOrSelf);
          this.CascadeDependents(basicList, surrogateOrBaseOrSelf);
        }
      }
    } else {
      var underlyingType = $T25().GetUnderlyingType(type);
      if ($T04().op_Inequality(underlyingType, null)) {
        type = underlyingType;
      }
      flag = $T14().TryGetCoreSerializer(
        this, 
        $T15().Default, 
        type, 
        /* ref */ wireType, 
        false, 
        false, 
        false, 
        false
      ) !== null;
      if (!flag) {
        var num = (this.FindOrAddAuto(type, false, false, false) | 0);
        if (num < 0) {
          throw $S05().Construct("The type specified is not a contract-type", "type");
        }
        metaType = ($T06().$Cast((this.types).get_Item(num))).GetSurrogateOrBaseOrSelf(false);
        basicList.Add(metaType);
        this.CascadeDependents(basicList, metaType);
      }
    }
    var stringBuilder = $S13().Construct();
    var text = null;
    if (!flag) {
      var enumerable = (
        (metaType === null)
           ? this.types
           : basicList)
      ;
      var enumerator2 = $IM00().Call(enumerable, null);
      try {

      $loop1: 
        while ($IM01().Call(enumerator2, null)) {
          var metaType3 = $T06().$Cast($IM02().Call(enumerator2, null));
          if (!metaType3.get_IsList()) {
            var namespace = (metaType3.get_Type()).get_Namespace();
            if (!($T25().IsNullOrEmpty(namespace) || (System.String.StartsWith(namespace, "System.")))) {
              if (text === null) {
                text = namespace;
              } else if (!(text == namespace)) {
                text = null;
                break $loop1;
              }
            }
          }
        }
      } finally {
        var disposable = $T1C().$As(enumerator2);
        if (disposable !== null) {
          $IM03().Call(disposable, null);
        }
      }
    }
    if (!$T25().IsNullOrEmpty(text)) {
      $S14().CallVirtual("Append", null, $S15().CallVirtual("Append", null, $S15().CallVirtual("Append", null, stringBuilder, "package "), text), ";");
      $T25().AppendLine(stringBuilder);
    }
    var flag2 = new JSIL.BoxedVariable(false);
    var stringBuilder2 = $S13().Construct();
    var array = JSIL.Array.New($T06(), basicList.get_Count());
    basicList.CopyTo(array, 0);
    $S16().CallStatic($T43(), "Sort$b1", [$asm08.ProtoBuf.Meta.MetaType], array, $T44().Default);
    if (flag) {
      $S15().CallVirtual("Append", null, $S15().CallVirtual("Append", null, $S15().CallVirtual("Append", null, $T25().AppendLine(stringBuilder2), "message "), type.get_Name()), " {");
      $S15().CallVirtual("Append", null, $S15().CallVirtual("Append", null, $S15().CallVirtual("Append", null, $T06().NewLine(stringBuilder2, 1), "optional "), this.GetSchemaTypeName(
            type, 
            $T15().Default, 
            false, 
            false, 
            /* ref */ flag2
          )), " value = 1;");
      $S14().CallVirtual("Append", null, $T25().AppendLine(stringBuilder2), "}");
    } else {

      for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
        var metaType4 = array[i];
        if (!(metaType4.get_IsList() && (metaType4 !== metaType))) {
          metaType4.WriteSchema(stringBuilder2, 0, /* ref */ flag2);
        }
      }
    }
    if (flag2.get()) {
      $S15().CallVirtual("Append", null, stringBuilder, "import \"bcl.proto\"; // schema for protobuf-net's handling of core .NET types");
      $T25().AppendLine(stringBuilder);
    }
    return ($T25().AppendLine($S17().CallVirtual("Append", null, stringBuilder, stringBuilder2))).toString();
  }; 

  function RuntimeTypeModel_GetSchemaTypeName (effectiveType, dataFormat, asReference, dynamicType, /* ref */ requiresBclImport) {
    var wireType = new JSIL.BoxedVariable($asm08.ProtoBuf.WireType.Variant);
    var underlyingType = $T25().GetUnderlyingType(effectiveType);
    if ($T04().op_Inequality(underlyingType, null)) {
      effectiveType = underlyingType;
    }
    if ($T04().op_Equality(effectiveType, this.MapType($T45().__Type__))) {
      return "bytes";
    }
    var protoSerializer = $T14().TryGetCoreSerializer(
      this, 
      dataFormat, 
      effectiveType, 
      /* ref */ wireType, 
      false, 
      false, 
      false, 
      false
    );
    if (protoSerializer === null) {
      if (asReference | dynamicType) {
        requiresBclImport.set(true);
        return "bcl.NetObjectProxy";
      }
      return ((this.get_Item(effectiveType)).GetSurrogateOrBaseOrSelf(true)).GetSchemaTypeName();
    } else {
      if ($T46().$As(protoSerializer) === null) {
        var typeCode = $T25().GetTypeCode(effectiveType);
        switch (typeCode.valueOf()) {
          case 3: 
            return "bool";

          case 4: 
          case 6: 
          case 8: 
          case 10: 
            if (dataFormat === $T15().FixedSize) {
              return "fixed32";
            }
            return "uint32";

          case 5: 
          case 7: 
          case 9: 
            if (dataFormat === $T15().ZigZag) {
              return "sint32";
            }
            if (dataFormat !== $T15().FixedSize) {
              return "int32";
            }
            return "sfixed32";

          case 11: 
            if (dataFormat === $T15().ZigZag) {
              return "sint64";
            }
            if (dataFormat !== $T15().FixedSize) {
              return "int64";
            }
            return "sfixed64";

          case 12: 
            if (dataFormat === $T15().FixedSize) {
              return "fixed64";
            }
            return "uint64";

          case 13: 
            return "float";

          case 14: 
            return "double";

          case 15: 
            requiresBclImport.set(true);
            return "bcl.Decimal";

          case 16: 
            requiresBclImport.set(true);
            return "bcl.DateTime";

          case 17: 
            break;

          case 18: 
            if (asReference) {
              requiresBclImport.set(true);
            }
            if (!asReference) {
              return "string";
            }
            return "bcl.NetObjectProxy";

          default: 
            if (typeCode === $T47().TimeSpan) {
              requiresBclImport.set(true);
              return "bcl.TimeSpan";
            }
            if (typeCode === $T47().Guid) {
              requiresBclImport.set(true);
              return "bcl.Guid";
            }
            break;

        }
        throw $S18().Construct(JSIL.ConcatString("No .proto map found for: ", effectiveType.get_FullName()));
      }
      if (asReference) {
        requiresBclImport.set(true);
      }
      if (!asReference) {
        return "string";
      }
      return "bcl.NetObjectProxy";
    }
  }; 

  function RuntimeTypeModel_GetSerializer (serializer, compiled) {
    if (serializer === null) {
      throw $S02().Construct("serializer");
    }
    if (compiled) {
      return $T31().BuildSerializer(serializer, this);
    }
    return $T48().New(serializer, null, new JSIL.MethodPointerInfo($asm08.ProtoBuf.Serializers.IProtoSerializer, "Write", $S19(), false, true));
  }; 

  function RuntimeTypeModel_GetTypes () {
    return this.types;
  }; 

  function RuntimeTypeModel_IsPrepared (type) {
    var metaType = this.FindWithoutAdd(type);
    return ((metaType !== null) && metaType.IsPrepared());
  }; 

  function RuntimeTypeModel_MetaTypeFinderImpl (value, ctx) {
    return $T04().op_Equality(($T06().$Cast(value)).get_Type(), $T04().$Cast(ctx));
  }; 

  function RuntimeTypeModel_Override (type, name) {
    var method = $S1A().CallVirtual("GetMethod", null, type.get_BaseType(), name, $T49().$Flags("Instance", "NonPublic"));
    var parameters = method.GetParameters();
    var array = JSIL.Array.New($T04(), parameters.length);

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      array[i] = (parameters[i]).get_ParameterType();
    }
    var methodBuilder = type.DefineMethod(
      method.get_Name(), 
      $T38().$Cast($T38().$Cast(method.get_Attributes() & $T38().$Flags(
              "CheckAccessOnOverride", "Final", "HideBySig", "MemberAccessMask", 
              "NewSlot", "PinvokeImpl", "ReservedMask", "SpecialName", 
              "Static", "UnmanagedExport", "Virtual", "VtableLayoutMask"
          )) | $T38().Final), 
      method.get_CallingConvention(), 
      method.get_ReturnType(), 
      array
    );
    var iLGenerator = methodBuilder.GetILGenerator();
    type.DefineMethodOverride(methodBuilder, method);
    return iLGenerator;
  }; 

  function RuntimeTypeModel_RecogniseCommonTypes (type) {
    return null;
  }; 

  function RuntimeTypeModel_ReleaseLock (opaqueToken, $exception) {
    if ((opaqueToken | 0) !== 0) {
      $T4E().Exit(this.types);
      if ((opaqueToken | 0) !== (this.GetContention() | 0)) {
        var lockContended = this.LockContended;
        if (lockContended !== null) {
          try {
            throw $S1B().Construct();
          } catch ($exception) {
            var stackTrace = $exception.get_StackTrace();
          }
          lockContended(this, new ($T4F())(stackTrace));
        }
      }
    }
  }; 

  function RuntimeTypeModel_remove_LockContended (value) {
    var lockContentedEventHandler = this.LockContended;

    do {
      var lockContentedEventHandler2 = lockContentedEventHandler;
      var value2 = $T0B().Remove(lockContentedEventHandler2, value);
      lockContentedEventHandler = $T0C().CompareExchange$b1($T0A())(/* ref */ new JSIL.MemberReference(this, "LockContended"), value2, lockContentedEventHandler2);
    } while (lockContentedEventHandler !== lockContentedEventHandler2);
  }; 

  function RuntimeTypeModel_ResolveListTypes (type, /* ref */ itemType, /* ref */ defaultType) {
    var type2 = null, genericArguments = null;
    if ($T04().op_Equality(type, null)) {
      return;
    }
    if ($T25().GetTypeCode(type) !== $T47().Unknown) {
      return;
    }
    if ((this.get_Item(type)).get_IgnoreListHandling()) {
      return;
    }
    if (type.get_IsArray()) {
      if ((type.GetArrayRank() | 0) !== 1) {
        throw $S18().Construct("Multi-dimension arrays are supported");
      }
      itemType.set(type.GetElementType());
      if ($T04().op_Equality(itemType.get(), this.MapType($T50().__Type__))) {
        itemType.set(type2 = null);
        defaultType.set(type2);
      } else {
        defaultType.set(type);
      }
    }
    if ($T04().op_Equality(itemType.get(), null)) {
      itemType.set($T03().GetListItemType(this, type));
    }
    var left = new JSIL.BoxedVariable(null);
    var type3 = new JSIL.BoxedVariable(null);
    if ($T04().op_Inequality(itemType.get(), null)) {
      left.set(null);
      type3.set(null);
      this.ResolveListTypes(itemType.get(), /* ref */ left, /* ref */ type3);
      if ($T04().op_Inequality(left.get(), null)) {
        throw $T03().CreateNestedListsNotSupported();
      }
    }
    if (!(!$T04().op_Inequality(itemType.get(), null) || !$T04().op_Equality(defaultType.get(), null))) {
      if (!(!type.get_IsClass() || 
          type.get_IsAbstract() || !$T17().op_Inequality($T25().GetConstructor(type, $T25().EmptyTypes, true), null))) {
        defaultType.set(type);
      }
      if (!(!$T04().op_Equality(defaultType.get(), null) || !type.get_IsInterface())) {
        if (!(!type.get_IsGenericType() || 
            !$T04().op_Equality(
              type.GetGenericTypeDefinition(), 
              this.MapType($T51().__Type__)
            ) || !$T04().op_Equality(itemType.get(), (this.MapType($T52().__Type__)).MakeGenericType(genericArguments = type.GetGenericArguments())))) {
          defaultType.set((this.MapType($T53().__Type__)).MakeGenericType(genericArguments));
        } else {
          defaultType.set((this.MapType($T54().__Type__)).MakeGenericType(JSIL.Array.New($T04(), [itemType.get()])));
        }
      }
      if (!(!$T04().op_Inequality(defaultType.get(), null) || $T25().IsAssignableFrom(type, defaultType.get()))) {
        defaultType.set(null);
      }
    }
  }; 

  function RuntimeTypeModel_Serialize$05 (key, value, dest) {
    $IM07().Call(($T06().$Cast((this.types).get_Item(key))).get_Serializer(), null, value, dest);
  }; 

  function RuntimeTypeModel_SerializeDateTimeKind () {
    return this.GetOption(256);
  }; 

  function RuntimeTypeModel_set_AllowParseableTypes (value) {
    this.SetOption(64, value);
  }; 

  function RuntimeTypeModel_set_AutoAddMissingTypes (value) {
    if (!(value || !this.GetOption(2))) {
      throw $S07().Construct("The default model must allow missing types");
    }
    this.ThrowIfFrozen();
    this.SetOption(8, value);
  }; 

  function RuntimeTypeModel_set_AutoAddProtoContractTypesOnly (value) {
    this.SetOption(128, value);
  }; 

  function RuntimeTypeModel_set_AutoCompile (value) {
    this.SetOption(16, value);
  }; 

  function RuntimeTypeModel_set_IncludeDateTimeKind (value) {
    this.SetOption(256, value);
  }; 

  function RuntimeTypeModel_set_InferTagFromNameDefault (value) {
    this.SetOption(1, value);
  }; 

  function RuntimeTypeModel_set_MetadataTimeoutMilliseconds (value) {
    if ((value | 0) <= 0) {
      throw $S1C().Construct("MetadataTimeoutMilliseconds");
    }
    this.metadataTimeoutMilliseconds = (value | 0);
  }; 

  function RuntimeTypeModel_set_UseImplicitZeroDefaults (value) {
    if (!(value || !this.GetOption(2))) {
      throw $S07().Construct("UseImplicitZeroDefaults cannot be disabled on the default model");
    }
    this.SetOption(32, value);
  }; 

  function RuntimeTypeModel_SetDefaultFactory (methodInfo) {
    this.VerifyFactory(methodInfo, null);
    this.defaultFactory = methodInfo;
  }; 

  function RuntimeTypeModel_SetOption (option, value) {
    if (value) {
      this.options = (this.options | 0) | (option | 0);
      return;
    }
    this.options = (this.options | 0) & (~option & 0xFFFF);
  }; 

  function RuntimeTypeModel_TakeLock (/* ref */ opaqueToken) {
    opaqueToken.set(0);
    if ($S1D().CallStatic($T4E(), "TryEnter", null, this.types, this.metadataTimeoutMilliseconds)) {
      opaqueToken.set(this.GetContention());
      return;
    }
    this.AddContention();
    throw $S1E().Construct("Timeout while inspecting metadata; this may indicate a deadlock. This can often be avoided by preparing necessary serializers during application initialization, rather than allowing multiple threads to perform the initial metadata inspection; please also see the LockContended event");
  }; 

  function RuntimeTypeModel_ThrowIfFrozen () {
    if (this.GetOption(4)) {
      throw $S07().Construct("The model cannot be changed once frozen");
    }
  }; 

  function RuntimeTypeModel_TryGetBasicTypeSerializer (type) {
    var wireType = new JSIL.BoxedVariable($asm08.ProtoBuf.WireType.Variant);
    var num = ((this.basicTypes).IndexOf($thisType.BasicTypeFinder, type) | 0);
    if (num >= 0) {
      return ($T0E().$Cast((this.basicTypes).get_Item(num))).get_Serializer();
    }
    var obj = this.basicTypes;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T4E().Enter(obj, /* ref */ flag);
      num = ((this.basicTypes).IndexOf($thisType.BasicTypeFinder, type) | 0);
      if (num >= 0) {
        var result = ($T0E().$Cast((this.basicTypes).get_Item(num))).get_Serializer();
      } else {
        var contractFamily = $T06().GetContractFamily(this, type, null);
        var protoSerializer = (
          ((contractFamily.valueOf() | 0) === 0)
             ? $T14().TryGetCoreSerializer(
              this, 
              $T15().Default, 
              type, 
              /* ref */ wireType, 
              false, 
              false, 
              false, 
              false
            )
             : null)
        ;
        if (protoSerializer !== null) {
          (this.basicTypes).Add(new ($T0E())(type, protoSerializer));
        }
        result = protoSerializer;
      }
    } finally {
      if (flag.get()) {
        $T4E().Exit(obj);
      }
    }
    return result;
  }; 

  function RuntimeTypeModel_VerifyFactory (factory, type) {
    if ($T36().op_Inequality(factory, null)) {
      if (!(!$T04().op_Inequality(type, null) || !$T25().IsValueType(type))) {
        throw $S1F().Construct();
      }
      if (!factory.get_IsStatic()) {
        throw $S05().Construct("A factory-method must be static", "factory");
      }
      if (!(!$T04().op_Inequality(type, null) || 
          !$T04().op_Inequality(factory.get_ReturnType(), type) || !$T04().op_Inequality(
            factory.get_ReturnType(), 
            this.MapType($T0D().__Type__)
          ))) {
        throw $S05().Construct(JSIL.ConcatString("The factory-method must return object", (
            $T04().op_Equality(type, null)
               ? ""
               : JSIL.ConcatString(" or ", type.get_FullName()))
          ), "factory");
      }
      if (!$T58().CheckCallbackParameters(this, factory)) {
        throw $S05().Construct(("Invalid factory signature in " + (factory.get_DeclaringType()).get_FullName() + "." + factory.get_Name()), "factory");
      }
    }
  }; 

  function RuntimeTypeModel_WaitOnLock (type) {
    var opaqueToken = new JSIL.BoxedVariable(0);
    try {
      this.TakeLock(/* ref */ opaqueToken);
    } finally {
      this.ReleaseLock(opaqueToken.get());
    }
  }; 

  function RuntimeTypeModel_WriteAssemblyAttributes (options, assemblyName, asm, $exception) {
    var obj = new JSIL.BoxedVariable(null);
    if (!$T25().IsNullOrEmpty(options.get_TargetFrameworkName())) {
      var type = null;
      try {
        type = this.GetType("System.Runtime.Versioning.TargetFrameworkAttribute", $T25().GetAssembly(this.MapType($T09().__Type__)));
      } catch ($exception) {
      }
      if ($T04().op_Inequality(type, null)) {
        if ($T25().IsNullOrEmpty(options.get_TargetFrameworkDisplayName())) {
          var namedProperties = JSIL.Array.New($T18(), 0);
          var propertyValues = JSIL.Array.New($T0D(), 0);
        } else {
          namedProperties = JSIL.Array.New($T18(), [type.GetProperty("FrameworkDisplayName")]);
          propertyValues = JSIL.Array.New($T0D(), [options.get_TargetFrameworkDisplayName()]);
        }
        var customAttribute = $S20().Construct(type.GetConstructor(JSIL.Array.New($T04(), [this.MapType($T09().__Type__)])), JSIL.Array.New($T0D(), [options.get_TargetFrameworkName()]), namedProperties, propertyValues);
        asm.SetCustomAttribute(customAttribute);
      }
    }
    var type2 = null;
    try {
      type2 = this.MapType($T5C().__Type__);
    } catch ($exception) {
    }
    if ($T04().op_Inequality(type2, null)) {
      var basicList = new ($T02())();
      var basicList2 = new ($T02())();

      for (var enumerator = (this.types).GetEnumerator(); enumerator.MoveNext(); ) {
        var metaType = $T06().$Cast(enumerator.get_Current());
        var assembly = $T25().GetAssembly(metaType.get_Type());
        if ((basicList2.IndexOfReference(assembly) | 0) < 0) {
          basicList2.Add(assembly);
          var array = $T5F().Create(this, assembly);

          for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
            if (!$T04().op_Inequality((array[i]).get_AttributeType(), type2)) {
              (array[i]).TryGet("AssemblyName", /* ref */ obj);
              var text = $T09().$As(obj.get());
              if (!((text == assemblyName) || 
                  $T25().IsNullOrEmpty(text) || ((basicList.IndexOfString(text) | 0) >= 0))) {
                basicList.Add(text);
                var customAttribute2 = $S21().Construct(type2.GetConstructor(JSIL.Array.New($T04(), [this.MapType($T09().__Type__)])), JSIL.Array.New($T0D(), [text]));
                asm.SetCustomAttribute(customAttribute2);
              }
            }
          }
        }
      }
    }
  }; 

  function RuntimeTypeModel_WriteBasicTypeModel (options, typeName, module) {
    var typeAttributes = $T60().$Cast($T60().$Cast((this.MapType($T03().__Type__)).get_Attributes() & $T60().$Flags(
            "BeforeFieldInit", "ClassSemanticsMask", "CustomFormatClass", "CustomFormatMask", 
            "Import", "Interface", "LayoutMask", "NestedFamORAssem", 
            "ReservedMask", "Sealed", "Serializable", "SpecialName", 
            "StringFormatMask", "VisibilityMask", "WindowsRuntime"
        )) | $T60().Sealed);
    if (options.get_Accessibility() === $T61().Internal) {
      typeAttributes = $T60().$Cast(typeAttributes & $T60().$Flags(
            "Abstract", "BeforeFieldInit", "ClassSemanticsMask", "CustomFormatClass", 
            "CustomFormatMask", "Import", "Interface", "LayoutMask", 
            "NestedFamANDAssem", "ReservedMask", "Sealed", "Serializable", 
            "SpecialName", "StringFormatMask", "WindowsRuntime"
        ));
    }
    return module.DefineType(typeName, typeAttributes, this.MapType($T03().__Type__));
  }; 

  function RuntimeTypeModel_WriteConstructors (type, /* ref */ index, methodPairs, /* ref */ il, knownTypesCategory, knownTypes, knownTypesLookupType, ctx) {
    var $temp00, $temp01;
    type.DefineDefaultConstructor($T38().Public);
    il.set((type.DefineTypeInitializer()).GetILGenerator());
    switch (knownTypesCategory) {
      case 1: 
        $T31().LoadValue(il.get(), (this.types).get_Count());
        $S22().CallVirtual("Emit", null, il.get(), $T30().Newarr.MemberwiseClone(), ctx.MapType($T04().__Type__));
        index.set(0);

        for (var i = 0; i < (methodPairs.length | 0); i = ((i + 1) | 0)) {
          var serializerPair = methodPairs[i];
          (il.get()).Emit($T30().Dup.MemberwiseClone());
          $T31().LoadValue(il.get(), index.get());
          $S22().CallVirtual("Emit", null, il.get(), $T30().Ldtoken.MemberwiseClone(), (serializerPair.Type).get_Type());
          (il.get()).EmitCall($T30().Call.MemberwiseClone(), (ctx.MapType($T04().__Type__)).GetMethod("GetTypeFromHandle"), null);
          (il.get()).Emit($T30().Stelem_Ref.MemberwiseClone());
          index.set((((index.get() | 0) + 1) | 0));
        }
        $S23().CallVirtual("Emit", null, il.get(), $T30().Stsfld.MemberwiseClone(), knownTypes);
        (il.get()).Emit($T30().Ret.MemberwiseClone());
        return;

      case 2: 
        $T31().LoadValue(il.get(), (this.types).get_Count());
        $S24().CallVirtual("Emit", null, il.get(), $T30().Newobj.MemberwiseClone(), knownTypesLookupType.GetConstructor(JSIL.Array.New($T04(), [this.MapType($T07().__Type__)])));
        $S23().CallVirtual("Emit", null, il.get(), $T30().Stsfld.MemberwiseClone(), knownTypes);
        var num = 0;

        for (var j = 0; j < (methodPairs.length | 0); j = ((j + 1) | 0)) {
          var serializerPair2 = methodPairs[j];
          $S23().CallVirtual("Emit", null, il.get(), $T30().Ldsfld.MemberwiseClone(), knownTypes);
          $S22().CallVirtual("Emit", null, il.get(), $T30().Ldtoken.MemberwiseClone(), (serializerPair2.Type).get_Type());
          (il.get()).EmitCall($T30().Call.MemberwiseClone(), (ctx.MapType($T04().__Type__)).GetMethod("GetTypeFromHandle"), null);
          var value = (($temp00 = num, 
            num = ((num + 1) | 0), 
            $temp00) | 0);
          var baseKey = (serializerPair2.BaseKey | 0);
          if (baseKey !== (serializerPair2.MetaKey | 0)) {
            value = -1;

          $loop2: 
            for (var k = 0; k < (methodPairs.length | 0); k = ((k + 1) | 0)) {
              if (!(((methodPairs[k].BaseKey | 0) !== baseKey) || ((methodPairs[k].MetaKey | 0) !== baseKey))) {
                value = k;
                break $loop2;
              }
            }
          }
          $T31().LoadValue(il.get(), value);
          (il.get()).EmitCall($T30().Callvirt.MemberwiseClone(), $S25().CallVirtual("GetMethod", null, knownTypesLookupType, "Add", JSIL.Array.New($T04(), [this.MapType($T04().__Type__), this.MapType($T07().__Type__)])), null);
        }
        (il.get()).Emit($T30().Ret.MemberwiseClone());
        return;

      case 3: 
        $T31().LoadValue(il.get(), (this.types).get_Count());
        $S24().CallVirtual("Emit", null, il.get(), $T30().Newobj.MemberwiseClone(), knownTypesLookupType.GetConstructor(JSIL.Array.New($T04(), [this.MapType($T07().__Type__)])));
        $S23().CallVirtual("Emit", null, il.get(), $T30().Stsfld.MemberwiseClone(), knownTypes);
        var num2 = 0;

        for (var l = 0; l < (methodPairs.length | 0); l = ((l + 1) | 0)) {
          var serializerPair3 = methodPairs[l];
          $S23().CallVirtual("Emit", null, il.get(), $T30().Ldsfld.MemberwiseClone(), knownTypes);
          $S22().CallVirtual("Emit", null, il.get(), $T30().Ldtoken.MemberwiseClone(), (serializerPair3.Type).get_Type());
          (il.get()).EmitCall($T30().Call.MemberwiseClone(), (ctx.MapType($T04().__Type__)).GetMethod("GetTypeFromHandle"), null);
          var value2 = (($temp01 = num2, 
            num2 = ((num2 + 1) | 0), 
            $temp01) | 0);
          var baseKey2 = (serializerPair3.BaseKey | 0);
          if (baseKey2 !== (serializerPair3.MetaKey | 0)) {
            value2 = -1;

          $loop4: 
            for (var m = 0; m < (methodPairs.length | 0); m = ((m + 1) | 0)) {
              if (!(((methodPairs[m].BaseKey | 0) !== baseKey2) || ((methodPairs[m].MetaKey | 0) !== baseKey2))) {
                value2 = m;
                break $loop4;
              }
            }
          }
          $T31().LoadValue(il.get(), value2);
          $S22().CallVirtual("Emit", null, il.get(), $T30().Box.MemberwiseClone(), this.MapType($T07().__Type__));
          (il.get()).EmitCall($T30().Callvirt.MemberwiseClone(), $S25().CallVirtual("GetMethod", null, knownTypesLookupType, "Add", JSIL.Array.New($T04(), [this.MapType($T0D().__Type__), this.MapType($T0D().__Type__)])), null);
        }
        (il.get()).Emit($T30().Ret.MemberwiseClone());
        return;

      default: 
        throw $S1F().Construct();

    }
  }; 

  function RuntimeTypeModel_WriteGetKeyImpl (type, hasInheritance, methodPairs, ilVersion, assemblyName, /* ref */ il, /* ref */ knownTypesCategory, /* ref */ knownTypes, /* ref */ knownTypesLookupType) {
    il.set($thisType.Override(type, "GetKeyImpl"));
    var compilerContext = $S0D().Construct(il.get(), false, false, methodPairs, this, ilVersion, assemblyName, this.MapType($T04().__Type__, true), "GetKeyImpl");
    if (((this.types).get_Count() | 0) <= 20) {
      knownTypesCategory.set(1);
      knownTypesLookupType.set(this.MapType($T4C().__Type__, true));
    } else {
      knownTypesLookupType.set(this.MapType($T64().__Type__, false));
      if ($T04().op_Equality(knownTypesLookupType.get(), null)) {
        knownTypesLookupType.set(this.MapType($T65().__Type__, true));
        knownTypesCategory.set(3);
      } else {
        knownTypesCategory.set(2);
      }
    }
    knownTypes.set(type.DefineField("knownTypes", knownTypesLookupType.get(), $T66().$Flags("InitOnly", "Private", "Static")));
    switch (knownTypesCategory.get()) {
      case 1: 
        $S23().CallVirtual("Emit", null, il.get(), $T30().Ldsfld.MemberwiseClone(), knownTypes.get());
        (il.get()).Emit($T30().Ldarg_1.MemberwiseClone());
        (il.get()).EmitCall($T30().Callvirt.MemberwiseClone(), $S25().CallVirtual("GetMethod", null, this.MapType($T67().__Type__), "IndexOf", JSIL.Array.New($T04(), [this.MapType($T0D().__Type__)])), null);
        if (hasInheritance) {
          (il.get()).DeclareLocal(this.MapType($T07().__Type__));
          (il.get()).Emit($T30().Dup.MemberwiseClone());
          (il.get()).Emit($T30().Stloc_0.MemberwiseClone());
          var basicList = new ($T02())();
          var num = -1;

          for (var num2 = 0; !((num2 >= (methodPairs.length | 0)) || ((methodPairs[num2].MetaKey | 0) === (methodPairs[num2].BaseKey | 0))); num2 = ((num2 + 1) | 0)) {
            if (num === (methodPairs[num2].BaseKey | 0)) {
              basicList.Add(basicList.get_Item((((basicList.get_Count() | 0) - 1) | 0)));
            } else {
              basicList.Add(compilerContext.DefineLabel());
              num = (methodPairs[num2].BaseKey | 0);
            }
          }
          var array = JSIL.Array.New($T3A(), basicList.get_Count());
          basicList.CopyTo(array, 0);
          compilerContext.Switch(array);
          (il.get()).Emit($T30().Ldloc_0.MemberwiseClone());
          (il.get()).Emit($T30().Ret.MemberwiseClone());
          num = -1;

          for (var i = (((array.length | 0) - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
            if (num !== (methodPairs[i].BaseKey | 0)) {
              num = (methodPairs[i].BaseKey | 0);
              var value = -1;

            $loop2: 
              for (var j = (array.length | 0); j < (methodPairs.length | 0); j = ((j + 1) | 0)) {
                if (!(((methodPairs[j].BaseKey | 0) !== num) || ((methodPairs[j].MetaKey | 0) !== num))) {
                  value = j;
                  break $loop2;
                }
              }
              compilerContext.MarkLabel(array[i]);
              $T31().LoadValue(il.get(), value);
              (il.get()).Emit($T30().Ret.MemberwiseClone());
            }
          }
          return;
        }
        (il.get()).Emit($T30().Ret.MemberwiseClone());
        return;

      case 2: 
        var local = (il.get()).DeclareLocal(this.MapType($T07().__Type__));
        var label = (il.get()).DefineLabel().MemberwiseClone();
        $S23().CallVirtual("Emit", null, il.get(), $T30().Ldsfld.MemberwiseClone(), knownTypes.get());
        (il.get()).Emit($T30().Ldarg_1.MemberwiseClone());
        $S26().CallVirtual("Emit", null, il.get(), $T30().Ldloca_S.MemberwiseClone(), local);
        (il.get()).EmitCall($T30().Callvirt.MemberwiseClone(), $S1A().CallVirtual("GetMethod", null, knownTypesLookupType.get(), "TryGetValue", $T49().$Flags("Instance", "Public")), null);
        $S27().CallVirtual("Emit", null, il.get(), $T30().Brfalse_S.MemberwiseClone(), label.MemberwiseClone());
        $S26().CallVirtual("Emit", null, il.get(), $T30().Ldloc_S.MemberwiseClone(), local);
        (il.get()).Emit($T30().Ret.MemberwiseClone());
        (il.get()).MarkLabel(label.MemberwiseClone());
        (il.get()).Emit($T30().Ldc_I4_M1.MemberwiseClone());
        (il.get()).Emit($T30().Ret.MemberwiseClone());
        return;

      case 3: 
        var label2 = (il.get()).DefineLabel().MemberwiseClone();
        $S23().CallVirtual("Emit", null, il.get(), $T30().Ldsfld.MemberwiseClone(), knownTypes.get());
        (il.get()).Emit($T30().Ldarg_1.MemberwiseClone());
        (il.get()).EmitCall($T30().Callvirt.MemberwiseClone(), ((knownTypesLookupType.get()).GetProperty("Item")).GetGetMethod(), null);
        (il.get()).Emit($T30().Dup.MemberwiseClone());
        $S27().CallVirtual("Emit", null, il.get(), $T30().Brfalse_S.MemberwiseClone(), label2.MemberwiseClone());
        if ((ilVersion.valueOf() | 0) === 0) {
          $S22().CallVirtual("Emit", null, il.get(), $T30().Unbox.MemberwiseClone(), this.MapType($T07().__Type__));
          $S22().CallVirtual("Emit", null, il.get(), $T30().Ldobj.MemberwiseClone(), this.MapType($T07().__Type__));
        } else {
          $S22().CallVirtual("Emit", null, il.get(), $T30().Unbox_Any.MemberwiseClone(), this.MapType($T07().__Type__));
        }
        (il.get()).Emit($T30().Ret.MemberwiseClone());
        (il.get()).MarkLabel(label2.MemberwiseClone());
        (il.get()).Emit($T30().Pop.MemberwiseClone());
        (il.get()).Emit($T30().Ldc_I4_M1.MemberwiseClone());
        (il.get()).Emit($T30().Ret.MemberwiseClone());
        return;

      default: 
        throw $S1F().Construct();

    }
  }; 

  function RuntimeTypeModel_WriteSerializeDeserialize (assemblyName, type, methodPairs, ilVersion, /* ref */ il) {
    il.set($thisType.Override(type, "Serialize"));
    var compilerContext = $S0D().Construct(il.get(), false, true, methodPairs, this, ilVersion, assemblyName, this.MapType($T0D().__Type__), JSIL.ConcatString("Serialize ", type.get_Name()));
    var array = JSIL.Array.New($T3A(), (this.types).get_Count());

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      array[i] = compilerContext.DefineLabel();
    }
    (il.get()).Emit($T30().Ldarg_1.MemberwiseClone());
    compilerContext.Switch(array);
    compilerContext.Return();

    for (var j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
      var serializerPair = methodPairs[j];
      compilerContext.MarkLabel(array[j]);
      (il.get()).Emit($T30().Ldarg_2.MemberwiseClone());
      compilerContext.CastFromObject((serializerPair.Type).get_Type());
      (il.get()).Emit($T30().Ldarg_3.MemberwiseClone());
      (il.get()).EmitCall($T30().Call.MemberwiseClone(), serializerPair.Serialize, null);
      compilerContext.Return();
    }
    il.set($thisType.Override(type, "Deserialize"));
    compilerContext = $S0D().Construct(il.get(), false, false, methodPairs, this, ilVersion, assemblyName, this.MapType($T0D().__Type__), JSIL.ConcatString("Deserialize ", type.get_Name()));

    for (var k = 0; k < (array.length | 0); k = ((k + 1) | 0)) {
      array[k] = compilerContext.DefineLabel();
    }
    (il.get()).Emit($T30().Ldarg_1.MemberwiseClone());
    compilerContext.Switch(array);
    compilerContext.LoadNullRef();
    compilerContext.Return();

    for (var l = 0; l < (array.length | 0); l = ((l + 1) | 0)) {
      var serializerPair2 = methodPairs[l];
      compilerContext.MarkLabel(array[l]);
      var type2 = (serializerPair2.Type).get_Type();
      if ($T25().IsValueType(type2)) {
        (il.get()).Emit($T30().Ldarg_2.MemberwiseClone());
        (il.get()).Emit($T30().Ldarg_3.MemberwiseClone());
        (il.get()).EmitCall($T30().Call.MemberwiseClone(), $thisType.EmitBoxedSerializer(
            type, 
            l, 
            type2, 
            methodPairs, 
            this, 
            ilVersion, 
            assemblyName
          ), null);
        compilerContext.Return();
      } else {
        (il.get()).Emit($T30().Ldarg_2.MemberwiseClone());
        compilerContext.CastFromObject(type2);
        (il.get()).Emit($T30().Ldarg_3.MemberwiseClone());
        (il.get()).EmitCall($T30().Call.MemberwiseClone(), serializerPair2.Deserialize, null);
        compilerContext.Return();
      }
    }
    return compilerContext;
  }; 

  function RuntimeTypeModel_WriteSerializers (options, assemblyName, type, /* ref */ index, /* ref */ hasInheritance, /* ref */ methodPairs, /* ref */ ilVersion) {
    index.set(0);
    hasInheritance.set(false);
    methodPairs.set(JSIL.Array.New($T63(), (this.types).get_Count()));

    for (var enumerator = (this.types).GetEnumerator(); enumerator.MoveNext(); ) {
      var metaType = $T06().$Cast(enumerator.get_Current());
      var methodBuilder = type.DefineMethod(
        "Write", 
        $T38().$Flags("Private", "Static"), 
        $T39().Standard, 
        this.MapType($T6B().__Type__), 
        JSIL.Array.New($T04(), [metaType.get_Type(), this.MapType($T55().__Type__)])
      );
      var methodBuilder2 = type.DefineMethod(
        "Read", 
        $T38().$Flags("Private", "Static"), 
        $T39().Standard, 
        metaType.get_Type(), 
        JSIL.Array.New($T04(), [metaType.get_Type(), this.MapType($T35().__Type__)])
      );
      var serializerPair = new ($T63())(this.GetKey(metaType.get_Type(), true, false), this.GetKey(metaType.get_Type(), true, true), metaType, methodBuilder, methodBuilder2, methodBuilder.GetILGenerator(), methodBuilder2.GetILGenerator());
      var arg_F9_0 = methodPairs.get();
      var num = (index.get() | 0);
      index.set(((num + 1) | 0));
      arg_F9_0[num] = serializerPair;
      if ((serializerPair.MetaKey | 0) !== (serializerPair.BaseKey | 0)) {
        hasInheritance.set(true);
      }
    }
    if (hasInheritance.get()) {
      Array.prototype.sort.call(methodPairs.get());
    }
    ilVersion.set($T22().Net2);
    if ((options.get_MetaDataVersion() | 0) === 65536) {
      ilVersion.set($T22().Net1);
    }

    for (index.set(0); (index.get() | 0) < (methodPairs.get().length | 0); index.set((((index.get() | 0) + 1) | 0))) {
      var serializerPair2 = methodPairs.get()[index.get()];
      var compilerContext = $S0D().Construct(serializerPair2.SerializeBody, true, true, methodPairs.get(), this, ilVersion.get(), assemblyName, (serializerPair2.Type).get_Type(), JSIL.ConcatString("SerializeImpl ", ((serializerPair2.Type).get_Type()).get_Name()));
      compilerContext.CheckAccessibility((serializerPair2.Deserialize).get_ReturnType());
      $IM08().Call((serializerPair2.Type).get_Serializer(), null, compilerContext, compilerContext.get_InputValue());
      compilerContext.Return();
      compilerContext = $S0D().Construct(serializerPair2.DeserializeBody, true, false, methodPairs.get(), this, ilVersion.get(), assemblyName, (serializerPair2.Type).get_Type(), JSIL.ConcatString("DeserializeImpl ", ((serializerPair2.Type).get_Type()).get_Name()));
      $IM09().Call((serializerPair2.Type).get_Serializer(), null, compilerContext, compilerContext.get_InputValue());
      if (!$IM0A().Call((serializerPair2.Type).get_Serializer(), null)) {
        $S0E().CallVirtual("LoadValue", null, compilerContext, compilerContext.get_InputValue());
      }
      compilerContext.Return();
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), 
      Name: "ProtoBuf.Meta.RuntimeTypeModel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel__ctor
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.MetaType"), [$asm07.TypeRef("System.Type"), $.Boolean]), 
      RuntimeTypeModel_Add
    );

    $.Method({Static:false, Public:true }, "add_LockContended", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.LockContentedEventHandler")), 
      RuntimeTypeModel_add_LockContended
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "AddContention", 
      JSIL.MethodSignature.Void, 
      RuntimeTypeModel_AddContention
    );

    $.Method({Static:true , Public:false}, "BasicTypeFinderImpl", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object]), 
      RuntimeTypeModel_BasicTypeFinderImpl
    );

    $.Method({Static:false, Public:false}, "BuildAllSerializers", 
      JSIL.MethodSignature.Void, 
      RuntimeTypeModel_BuildAllSerializers
    );

    $.Method({Static:false, Public:false}, "CascadeDependents", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Meta.BasicList"), $asm08.TypeRef("ProtoBuf.Meta.MetaType")]), 
      RuntimeTypeModel_CascadeDependents
    );

    $.Method({Static:false, Public:true }, "Compile", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      RuntimeTypeModel_Compile$00
    );

    $.Method({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.TypeModel"), [$.String, $.String]), 
      RuntimeTypeModel_Compile$01
    );

    $.Method({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.TypeModel"), [$asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+CompilerOptions")]), 
      RuntimeTypeModel_Compile$02
    );

    $.Method({Static:false, Public:true }, "CompileInPlace", 
      JSIL.MethodSignature.Void, 
      RuntimeTypeModel_CompileInPlace
    );

    $.Method({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.MetaType"), [$asm07.TypeRef("System.Type")]), 
      RuntimeTypeModel_Create
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $.Int32, $.Object, 
          $asm08.TypeRef("ProtoBuf.ProtoReader")
        ]), 
      RuntimeTypeModel_Deserialize$03
    );

    $.Method({Static:true , Public:false}, "EmitBoxedSerializer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Emit.MethodBuilder"), [
          $asm07.TypeRef("System.Reflection.Emit.TypeBuilder"), $.Int32, 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+SerializerPair")]), 
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext+ILVersion"), 
          $.String
        ]), 
      RuntimeTypeModel_EmitBoxedSerializer
    );

    $.Method({Static:false, Public:false}, "FindOrAddAuto", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $.Boolean, $.Boolean
        ]), 
      RuntimeTypeModel_FindOrAddAuto
    );

    $.Method({Static:false, Public:false}, "FindWithoutAdd", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.MetaType"), [$asm07.TypeRef("System.Type")]), 
      RuntimeTypeModel_FindWithoutAdd
    );

    $.Method({Static:false, Public:true }, "Freeze", 
      JSIL.MethodSignature.Void, 
      RuntimeTypeModel_Freeze
    );

    $.Method({Static:false, Public:true }, "get_AllowParseableTypes", 
      JSIL.MethodSignature.Return($.Boolean), 
      RuntimeTypeModel_get_AllowParseableTypes
    );

    $.Method({Static:false, Public:true }, "get_AutoAddMissingTypes", 
      JSIL.MethodSignature.Return($.Boolean), 
      RuntimeTypeModel_get_AutoAddMissingTypes
    );

    $.Method({Static:false, Public:true }, "get_AutoAddProtoContractTypesOnly", 
      JSIL.MethodSignature.Return($.Boolean), 
      RuntimeTypeModel_get_AutoAddProtoContractTypesOnly
    );

    $.Method({Static:false, Public:true }, "get_AutoCompile", 
      JSIL.MethodSignature.Return($.Boolean), 
      RuntimeTypeModel_get_AutoCompile
    );

    $.Method({Static:true , Public:true }, "get_Default", 
      JSIL.MethodSignature.Return($.Type), 
      RuntimeTypeModel_get_Default
    );

    $.Method({Static:false, Public:true }, "get_IncludeDateTimeKind", 
      JSIL.MethodSignature.Return($.Boolean), 
      RuntimeTypeModel_get_IncludeDateTimeKind
    );

    $.Method({Static:false, Public:true }, "get_InferTagFromNameDefault", 
      JSIL.MethodSignature.Return($.Boolean), 
      RuntimeTypeModel_get_InferTagFromNameDefault
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.MetaType"), [$asm07.TypeRef("System.Type")]), 
      RuntimeTypeModel_get_Item
    );

    $.Method({Static:false, Public:true }, "get_MetadataTimeoutMilliseconds", 
      JSIL.MethodSignature.Return($.Int32), 
      RuntimeTypeModel_get_MetadataTimeoutMilliseconds
    );

    $.Method({Static:false, Public:true }, "get_UseImplicitZeroDefaults", 
      JSIL.MethodSignature.Return($.Boolean), 
      RuntimeTypeModel_get_UseImplicitZeroDefaults
    );

    $.Method({Static:false, Public:false}, "GetContention", 
      JSIL.MethodSignature.Return($.Int32), 
      RuntimeTypeModel_GetContention
    );

    $.Method({Static:false, Public:false}, "GetEnumMap", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Serializers.EnumSerializer+EnumPair")]), [$asm07.TypeRef("System.Type")]), 
      RuntimeTypeModel_GetEnumMap
    );

    $.Method({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $.Boolean
        ]), 
      RuntimeTypeModel_GetKey$04
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GetKeyImpl", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Type")]), 
      RuntimeTypeModel_GetKeyImpl
    );

    $.Method({Static:false, Public:false}, "GetOption", 
      new JSIL.MethodSignature($.Boolean, [$.UInt16]), 
      RuntimeTypeModel_GetOption
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")]), 
      RuntimeTypeModel_GetSchema
    );

    $.Method({Static:false, Public:false}, "GetSchemaTypeName", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.DataFormat"), 
          $.Boolean, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ]), 
      RuntimeTypeModel_GetSchemaTypeName
    );

    $.Method({Static:false, Public:false}, "GetSerializer", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Compiler.ProtoSerializer"), [$asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), $.Boolean]), 
      RuntimeTypeModel_GetSerializer
    );

    $.Method({Static:false, Public:true }, "GetTypes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerable")), 
      RuntimeTypeModel_GetTypes
    );

    $.Method({Static:false, Public:false}, "IsPrepared", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")]), 
      RuntimeTypeModel_IsPrepared
    );

    $.Method({Static:true , Public:false}, "MetaTypeFinderImpl", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object]), 
      RuntimeTypeModel_MetaTypeFinderImpl
    );

    $.Method({Static:true , Public:false}, "Override", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Emit.ILGenerator"), [$asm07.TypeRef("System.Reflection.Emit.TypeBuilder"), $.String]), 
      RuntimeTypeModel_Override
    );

    $.Method({Static:false, Public:false}, "RecogniseCommonTypes", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.MetaType"), [$asm07.TypeRef("System.Type")]), 
      RuntimeTypeModel_RecogniseCommonTypes
    );

    $.Method({Static:false, Public:false}, "ReleaseLock", 
      JSIL.MethodSignature.Action($.Int32), 
      RuntimeTypeModel_ReleaseLock
    );

    $.Method({Static:false, Public:true }, "remove_LockContended", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.LockContentedEventHandler")), 
      RuntimeTypeModel_remove_LockContended
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "ResolveListTypes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])
        ]), 
      RuntimeTypeModel_ResolveListTypes
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $asm08.TypeRef("ProtoBuf.ProtoWriter")
        ]), 
      RuntimeTypeModel_Serialize$05
    );

    $.Method({Static:false, Public:false, Virtual:true }, "SerializeDateTimeKind", 
      JSIL.MethodSignature.Return($.Boolean), 
      RuntimeTypeModel_SerializeDateTimeKind
    );

    $.Method({Static:false, Public:true }, "set_AllowParseableTypes", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel_set_AllowParseableTypes
    );

    $.Method({Static:false, Public:true }, "set_AutoAddMissingTypes", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel_set_AutoAddMissingTypes
    );

    $.Method({Static:false, Public:true }, "set_AutoAddProtoContractTypesOnly", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel_set_AutoAddProtoContractTypesOnly
    );

    $.Method({Static:false, Public:true }, "set_AutoCompile", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel_set_AutoCompile
    );

    $.Method({Static:false, Public:true }, "set_IncludeDateTimeKind", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel_set_IncludeDateTimeKind
    );

    $.Method({Static:false, Public:true }, "set_InferTagFromNameDefault", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel_set_InferTagFromNameDefault
    );

    $.Method({Static:false, Public:true }, "set_MetadataTimeoutMilliseconds", 
      JSIL.MethodSignature.Action($.Int32), 
      RuntimeTypeModel_set_MetadataTimeoutMilliseconds
    );

    $.Method({Static:false, Public:true }, "set_UseImplicitZeroDefaults", 
      JSIL.MethodSignature.Action($.Boolean), 
      RuntimeTypeModel_set_UseImplicitZeroDefaults
    );

    $.Method({Static:false, Public:true }, "SetDefaultFactory", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo")), 
      RuntimeTypeModel_SetDefaultFactory
    );

    $.Method({Static:false, Public:false}, "SetOption", 
      new JSIL.MethodSignature(null, [$.UInt16, $.Boolean]), 
      RuntimeTypeModel_SetOption
    );

    $.Method({Static:false, Public:false}, "TakeLock", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32])), 
      RuntimeTypeModel_TakeLock
    );

    $.Method({Static:false, Public:false}, "ThrowIfFrozen", 
      JSIL.MethodSignature.Void, 
      RuntimeTypeModel_ThrowIfFrozen
    );

    $.Method({Static:false, Public:false}, "TryGetBasicTypeSerializer", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), [$asm07.TypeRef("System.Type")]), 
      RuntimeTypeModel_TryGetBasicTypeSerializer
    );

    $.Method({Static:false, Public:false}, "VerifyFactory", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Type")]), 
      RuntimeTypeModel_VerifyFactory
    );

    $.Method({Static:false, Public:false}, "WaitOnLock", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.MetaType")), 
      RuntimeTypeModel_WaitOnLock
    );

    $.Method({Static:false, Public:false}, "WriteAssemblyAttributes", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+CompilerOptions"), $.String, 
          $asm07.TypeRef("System.Reflection.Emit.AssemblyBuilder")
        ]), 
      RuntimeTypeModel_WriteAssemblyAttributes
    );

    $.Method({Static:false, Public:false}, "WriteBasicTypeModel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Emit.TypeBuilder"), [
          $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+CompilerOptions"), $.String, 
          $asm07.TypeRef("System.Reflection.Emit.ModuleBuilder")
        ]), 
      RuntimeTypeModel_WriteBasicTypeModel
    );

    $.Method({Static:false, Public:false}, "WriteConstructors", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.TypeBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+SerializerPair")]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.Emit.ILGenerator")]), 
          $.Int32, $asm07.TypeRef("System.Reflection.Emit.FieldBuilder"), 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext")
        ]), 
      RuntimeTypeModel_WriteConstructors
    );

    $.Method({Static:false, Public:false}, "WriteGetKeyImpl", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.TypeBuilder"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+SerializerPair")]), $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext+ILVersion"), 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.Emit.ILGenerator")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.Emit.FieldBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])
        ]), 
      RuntimeTypeModel_WriteGetKeyImpl
    );

    $.Method({Static:false, Public:false}, "WriteSerializeDeserialize", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), [
          $.String, $asm07.TypeRef("System.Reflection.Emit.TypeBuilder"), 
          $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+SerializerPair")]), $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext+ILVersion"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Reflection.Emit.ILGenerator")])
        ]), 
      RuntimeTypeModel_WriteSerializeDeserialize
    );

    $.Method({Static:false, Public:false}, "WriteSerializers", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+CompilerOptions"), $.String, 
          $asm07.TypeRef("System.Reflection.Emit.TypeBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+SerializerPair")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext+ILVersion")])
        ]), 
      RuntimeTypeModel_WriteSerializers
    );

    $.Field({Static:false, Public:false}, "options", $.UInt16);

    $.Constant({Static:true , Public:false}, "OPTIONS_InferTagFromNameDefault", $.UInt16, 1);

    $.Constant({Static:true , Public:false}, "OPTIONS_IsDefaultModel", $.UInt16, 2);

    $.Constant({Static:true , Public:false}, "OPTIONS_Frozen", $.UInt16, 4);

    $.Constant({Static:true , Public:false}, "OPTIONS_AutoAddMissingTypes", $.UInt16, 8);

    $.Constant({Static:true , Public:false}, "OPTIONS_AutoCompile", $.UInt16, 16);

    $.Constant({Static:true , Public:false}, "OPTIONS_UseImplicitZeroDefaults", $.UInt16, 32);

    $.Constant({Static:true , Public:false}, "OPTIONS_AllowParseableTypes", $.UInt16, 64);

    $.Constant({Static:true , Public:false}, "OPTIONS_AutoAddProtoContractTypesOnly", $.UInt16, 128);

    $.Constant({Static:true , Public:false}, "OPTIONS_IncludeDateTimeKind", $.UInt16, 256);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MetaTypeFinder", $asm08.TypeRef("ProtoBuf.Meta.BasicList+MatchPredicate"), function ($pi) {
        return $asm08.ProtoBuf.Meta.BasicList_MatchPredicate.New(null, null, new JSIL.MethodPointerInfo($thisType, "MetaTypeFinderImpl", $S00(), true, false));
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "BasicTypeFinder", $asm08.TypeRef("ProtoBuf.Meta.BasicList+MatchPredicate"), function ($pi) {
        return $asm08.ProtoBuf.Meta.BasicList_MatchPredicate.New(null, null, new JSIL.MethodPointerInfo($thisType, "BasicTypeFinderImpl", $S01(), true, false));
      });

    $.Field({Static:false, Public:false}, "basicTypes", $asm08.TypeRef("ProtoBuf.Meta.BasicList"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "types", $asm08.TypeRef("ProtoBuf.Meta.BasicList"));

    $.Constant({Static:true , Public:false}, "KnownTypes_Array", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "KnownTypes_Dictionary", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "KnownTypes_Hashtable", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "KnownTypes_ArrayCutoff", $.Int32, 20);

    $.Field({Static:false, Public:false}, "metadataTimeoutMilliseconds", $.Int32);

    $.Field({Static:false, Public:false}, "contentionCounter", $.Int32);

    $.Field({Static:false, Public:false}, "LockContended", $asm08.TypeRef("ProtoBuf.Meta.LockContentedEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "defaultFactory", $asm07.TypeRef("System.Reflection.MethodInfo"));


    function RuntimeTypeModel__cctor () {
      $thisType.MetaTypeFinder = $T00().New(null, null, new JSIL.MethodPointerInfo($thisType, "MetaTypeFinderImpl", $S00(), true, false));
      $thisType.BasicTypeFinder = $T00().New(null, null, new JSIL.MethodPointerInfo($thisType, "BasicTypeFinderImpl", $S01(), true, false));
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      RuntimeTypeModel__cctor
    );

    $.Property({Static:false, Public:true }, "InferTagFromNameDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "AutoAddProtoContractTypesOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "UseImplicitZeroDefaults", $.Boolean);

    $.Property({Static:false, Public:true }, "AllowParseableTypes", $.Boolean);

    $.Property({Static:false, Public:true }, "IncludeDateTimeKind", $.Boolean);

    $.Property({Static:true , Public:true }, "Default", $.Type);

    $.Property({Static:false, Public:true }, "Item", $asm08.TypeRef("ProtoBuf.Meta.MetaType"));

    $.Property({Static:false, Public:true }, "AutoCompile", $.Boolean);

    $.Property({Static:false, Public:true }, "AutoAddMissingTypes", $.Boolean);

    $.Property({Static:false, Public:true }, "MetadataTimeoutMilliseconds", $.Int32);

    $.Event({Static:false, Public:true }, "LockContended", $asm08.TypeRef("ProtoBuf.Meta.LockContentedEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class ProtoBuf.Meta.RuntimeTypeModel+Singleton */ 

(function Singleton$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };


  function Singleton__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.RuntimeTypeModel+Singleton", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Singleton__ctor
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Value", $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"));


    function Singleton__cctor () {
      $thisType.Value = new ($T00())(true);
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Singleton__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.RuntimeTypeModel+BasicType */ 

(function BasicType$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };


  function BasicType__ctor (type, serializer) {
    this.type = type;
    this.serializer = serializer;
  }; 

  function BasicType_get_Serializer () {
    return this.serializer;
  }; 

  function BasicType_get_Type () {
    return this.type;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.RuntimeTypeModel+BasicType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")]), 
      BasicType__ctor
    );

    $.Method({Static:false, Public:true }, "get_Serializer", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      BasicType_get_Serializer
    );

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      BasicType_get_Type
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "serializer", $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Serializer", $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.RuntimeTypeModel+SerializerPair */ 

(function SerializerPair$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.MetaType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Reflection.Emit.MethodBuilder)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Reflection.Emit.ILGenerator)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String]))) ();
  };


  function SerializerPair__ctor (metaKey, baseKey, type, serialize, deserialize, serializeBody, deserializeBody) {
    this.MetaKey = (metaKey | 0);
    this.BaseKey = (baseKey | 0);
    this.Serialize = serialize;
    this.Deserialize = deserialize;
    this.SerializeBody = serializeBody;
    this.DeserializeBody = deserializeBody;
    this.Type = type;
  }; 

  function SerializerPair_System_IComparable_CompareTo (obj) {
    if (obj === null) {
      throw $S00().Construct("obj");
    }
    var serializerPair = $thisType.$Cast(obj);
    if ((this.BaseKey | 0) === (this.MetaKey | 0)) {
      if ((serializerPair.BaseKey | 0) === (serializerPair.MetaKey | 0)) {
        return JSIL.CompareValues(this.MetaKey, serializerPair.MetaKey);
      }
      return 1;
    } else {
      if ((serializerPair.BaseKey | 0) === (serializerPair.MetaKey | 0)) {
        return -1;
      }
      var num = (JSIL.CompareValues(this.BaseKey, serializerPair.BaseKey));
      if (num === 0) {
        num = (JSIL.CompareValues(this.MetaKey, serializerPair.MetaKey));
      }
      return num;
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.RuntimeTypeModel+SerializerPair", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm08.TypeRef("ProtoBuf.Meta.MetaType"), $asm07.TypeRef("System.Reflection.Emit.MethodBuilder"), 
          $asm07.TypeRef("System.Reflection.Emit.MethodBuilder"), $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), 
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator")
        ]), 
      SerializerPair__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.IComparable.CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object]), 
      SerializerPair_System_IComparable_CompareTo
    )
      .Overrides($asm07.TypeRef("System.IComparable"), "CompareTo");

    $.Field({Static:false, Public:true , ReadOnly:true }, "MetaKey", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "BaseKey", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "Type", $asm08.TypeRef("ProtoBuf.Meta.MetaType"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "Serialize", $asm07.TypeRef("System.Reflection.Emit.MethodBuilder"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "Deserialize", $asm07.TypeRef("System.Reflection.Emit.MethodBuilder"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "SerializeBody", $asm07.TypeRef("System.Reflection.Emit.ILGenerator"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "DeserializeBody", $asm07.TypeRef("System.Reflection.Emit.ILGenerator"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.RuntimeTypeModel+CompilerOptions */ 

(function CompilerOptions$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel_Accessibility)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Meta.MetaType)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Meta.AttributeMap))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Meta.AttributeMap)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };


  function CompilerOptions__ctor () {
  }; 

  function CompilerOptions_get_Accessibility () {
    return this.accessibility;
  }; 

  function CompilerOptions_get_ImageRuntimeVersion () {
    return this.imageRuntimeVersion;
  }; 

  function CompilerOptions_get_MetaDataVersion () {
    return this.metaDataVersion;
  }; 

  function CompilerOptions_get_OutputPath () {
    return this.outputPath;
  }; 

  function CompilerOptions_get_TargetFrameworkDisplayName () {
    return this.targetFrameworkDisplayName;
  }; 

  function CompilerOptions_get_TargetFrameworkName () {
    return this.targetFrameworkName;
  }; 

  function CompilerOptions_get_TypeName () {
    return this.typeName;
  }; 

  function CompilerOptions_set_Accessibility (value) {
    this.accessibility = value;
  }; 

  function CompilerOptions_set_ImageRuntimeVersion (value) {
    this.imageRuntimeVersion = value;
  }; 

  function CompilerOptions_set_MetaDataVersion (value) {
    this.metaDataVersion = (value | 0);
  }; 

  function CompilerOptions_set_OutputPath (value) {
    this.outputPath = value;
  }; 

  function CompilerOptions_set_TargetFrameworkDisplayName (value) {
    this.targetFrameworkDisplayName = value;
  }; 

  function CompilerOptions_set_TargetFrameworkName (value) {
    this.targetFrameworkName = value;
  }; 

  function CompilerOptions_set_TypeName (value) {
    this.typeName = value;
  }; 

  function CompilerOptions_SetFrameworkOptions (from) {
    var obj = new JSIL.BoxedVariable(null);
    if (from === null) {
      throw $S00().Construct("from");
    }
    var array = $T07().Create(
      from.get_Model(), 
      $T08().GetAssembly(from.get_Type())
    );
    var array2 = array;

  $loop0: 
    for (var i = 0; i < (array2.length | 0); ) {
      var attributeMap = array2[i];
      if ((attributeMap.get_AttributeType()).get_FullName() == "System.Runtime.Versioning.TargetFrameworkAttribute") {
        if (attributeMap.TryGet("FrameworkName", /* ref */ obj)) {
          this.set_TargetFrameworkName($T01().$Cast(obj.get()));
        }
        if (attributeMap.TryGet("FrameworkDisplayName", /* ref */ obj)) {
          this.set_TargetFrameworkDisplayName($T01().$Cast(obj.get()));
          return;
        }
        break $loop0;
      } else {
        i = ((i + 1) | 0);
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.RuntimeTypeModel+CompilerOptions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      CompilerOptions__ctor
    );

    $.Method({Static:false, Public:true }, "get_Accessibility", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+Accessibility")), 
      CompilerOptions_get_Accessibility
    );

    $.Method({Static:false, Public:true }, "get_ImageRuntimeVersion", 
      JSIL.MethodSignature.Return($.String), 
      CompilerOptions_get_ImageRuntimeVersion
    );

    $.Method({Static:false, Public:true }, "get_MetaDataVersion", 
      JSIL.MethodSignature.Return($.Int32), 
      CompilerOptions_get_MetaDataVersion
    );

    $.Method({Static:false, Public:true }, "get_OutputPath", 
      JSIL.MethodSignature.Return($.String), 
      CompilerOptions_get_OutputPath
    );

    $.Method({Static:false, Public:true }, "get_TargetFrameworkDisplayName", 
      JSIL.MethodSignature.Return($.String), 
      CompilerOptions_get_TargetFrameworkDisplayName
    );

    $.Method({Static:false, Public:true }, "get_TargetFrameworkName", 
      JSIL.MethodSignature.Return($.String), 
      CompilerOptions_get_TargetFrameworkName
    );

    $.Method({Static:false, Public:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String), 
      CompilerOptions_get_TypeName
    );

    $.Method({Static:false, Public:true }, "set_Accessibility", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+Accessibility")), 
      CompilerOptions_set_Accessibility
    );

    $.Method({Static:false, Public:true }, "set_ImageRuntimeVersion", 
      JSIL.MethodSignature.Action($.String), 
      CompilerOptions_set_ImageRuntimeVersion
    );

    $.Method({Static:false, Public:true }, "set_MetaDataVersion", 
      JSIL.MethodSignature.Action($.Int32), 
      CompilerOptions_set_MetaDataVersion
    );

    $.Method({Static:false, Public:true }, "set_OutputPath", 
      JSIL.MethodSignature.Action($.String), 
      CompilerOptions_set_OutputPath
    );

    $.Method({Static:false, Public:true }, "set_TargetFrameworkDisplayName", 
      JSIL.MethodSignature.Action($.String), 
      CompilerOptions_set_TargetFrameworkDisplayName
    );

    $.Method({Static:false, Public:true }, "set_TargetFrameworkName", 
      JSIL.MethodSignature.Action($.String), 
      CompilerOptions_set_TargetFrameworkName
    );

    $.Method({Static:false, Public:true }, "set_TypeName", 
      JSIL.MethodSignature.Action($.String), 
      CompilerOptions_set_TypeName
    );

    $.Method({Static:false, Public:true }, "SetFrameworkOptions", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Meta.MetaType")), 
      CompilerOptions_SetFrameworkOptions
    );

    $.Field({Static:false, Public:false}, "targetFrameworkName", $.String);

    $.Field({Static:false, Public:false}, "targetFrameworkDisplayName", $.String);

    $.Field({Static:false, Public:false}, "typeName", $.String);

    $.Field({Static:false, Public:false}, "outputPath", $.String);

    $.Field({Static:false, Public:false}, "imageRuntimeVersion", $.String);

    $.Field({Static:false, Public:false}, "metaDataVersion", $.Int32);

    $.Field({Static:false, Public:false}, "accessibility", $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+Accessibility"));

    $.Property({Static:false, Public:true }, "TargetFrameworkName", $.String);

    $.Property({Static:false, Public:true }, "TargetFrameworkDisplayName", $.String);

    $.Property({Static:false, Public:true }, "TypeName", $.String);

    $.Property({Static:false, Public:true }, "OutputPath", $.String);

    $.Property({Static:false, Public:true }, "ImageRuntimeVersion", $.String);

    $.Property({Static:false, Public:true }, "MetaDataVersion", $.Int32);

    $.Property({Static:false, Public:true }, "Accessibility", $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+Accessibility"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.Meta.RuntimeTypeModel+Accessibility */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.Meta.RuntimeTypeModel+Accessibility", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Public: 0, 
    Internal: 1, 
  }
);

/* class ProtoBuf.Meta.LockContentedEventArgs */ 

(function LockContentedEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.EventArgs)) ();
  };


  function LockContentedEventArgs__ctor (ownerStackTrace) {
    $T01().prototype._ctor.call(this);
    this.ownerStackTrace = ownerStackTrace;
  }; 

  function LockContentedEventArgs_get_OwnerStackTrace () {
    return this.ownerStackTrace;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "ProtoBuf.Meta.LockContentedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      LockContentedEventArgs__ctor
    );

    $.Method({Static:false, Public:true }, "get_OwnerStackTrace", 
      JSIL.MethodSignature.Return($.String), 
      LockContentedEventArgs_get_OwnerStackTrace
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "ownerStackTrace", $.String);

    $.Property({Static:false, Public:true }, "OwnerStackTrace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate ProtoBuf.Meta.LockContentedEventHandler */ 

JSIL.MakeDelegate("ProtoBuf.Meta.LockContentedEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm08.TypeRef("ProtoBuf.Meta.LockContentedEventArgs")]));

/* class ProtoBuf.Meta.SubType */ 

(function SubType$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.MetaType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Serializers.SubItemSerializer)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.Serializers.TagDecorator)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };


  function SubType__ctor (fieldNumber, derivedType, format) {
    if (derivedType === null) {
      throw $S00().Construct("derivedType");
    }
    if ((fieldNumber | 0) <= 0) {
      throw $S01().Construct("fieldNumber");
    }
    this.fieldNumber = (fieldNumber | 0);
    this.derivedType = derivedType;
    this.dataFormat = format;
  }; 

  function SubType_BuildSerializer () {
    var wireType = $T05().String;
    if (this.dataFormat === $T02().Group) {
      wireType = $T05().StartGroup;
    }
    var tail = new ($T07())((this.derivedType).get_Type(), (this.derivedType).GetKey(false, false), this.derivedType, false);
    return new ($T08())(this.fieldNumber, wireType, false, tail);
  }; 

  function SubType_get_DerivedType () {
    return this.derivedType;
  }; 

  function SubType_get_FieldNumber () {
    return this.fieldNumber;
  }; 

  function SubType_get_Serializer () {
    if (this.serializer === null) {
      this.serializer = this.BuildSerializer();
    }
    return this.serializer;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.SubType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm08.TypeRef("ProtoBuf.Meta.MetaType"), 
          $asm08.TypeRef("ProtoBuf.DataFormat")
        ]), 
      SubType__ctor
    );

    $.Method({Static:false, Public:false}, "BuildSerializer", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      SubType_BuildSerializer
    );

    $.Method({Static:false, Public:true }, "get_DerivedType", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Meta.MetaType")), 
      SubType_get_DerivedType
    );

    $.Method({Static:false, Public:true }, "get_FieldNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      SubType_get_FieldNumber
    );

    $.Method({Static:false, Public:false}, "get_Serializer", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      SubType_get_Serializer
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "derivedType", $asm08.TypeRef("ProtoBuf.Meta.MetaType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "dataFormat", $asm08.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:false}, "serializer", $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));

    $.Property({Static:false, Public:true }, "FieldNumber", $.Int32);

    $.Property({Static:false, Public:true }, "DerivedType", $asm08.TypeRef("ProtoBuf.Meta.MetaType"));

    $.Property({Static:false, Public:false}, "Serializer", $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.SubType+Comparer */ 

(function Comparer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.SubType)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [$asm08.ProtoBuf.Meta.SubType, $asm08.ProtoBuf.Meta.SubType]))) ();
  };


  function Comparer__ctor () {
  }; 

  function Comparer_Compare$00 (x, y) {
    return $S00().CallVirtual("Compare", null, this, $T01().$As(x), $T01().$As(y));
  }; 

  function Comparer_Compare$01 (x, y) {
    if (x === y) {
      return 0;
    }
    if (x === null) {
      return -1;
    }
    if (y === null) {
      return 1;
    }
    return JSIL.CompareValues(x.get_FieldNumber(), y.get_FieldNumber());
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.SubType+Comparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Comparer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object]), 
      Comparer_Compare$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("ProtoBuf.Meta.SubType"), $asm08.TypeRef("ProtoBuf.Meta.SubType")]), 
      Comparer_Compare$01
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type);


    function Comparer__cctor () {
      $thisType.Default = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Comparer__cctor
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer"), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm08.TypeRef("ProtoBuf.Meta.SubType")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.TypeFormatEventArgs */ 

(function TypeFormatEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.EventArgs)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };


  function TypeFormatEventArgs__ctor$00 (formattedName) {
    $T01().prototype._ctor.call(this);
    if ($T02().IsNullOrEmpty(formattedName)) {
      throw $S00().Construct("formattedName");
    }
    this.formattedName = formattedName;
  }; 

  function TypeFormatEventArgs__ctor$01 (type) {
    $T01().prototype._ctor.call(this);
    if ($T04().op_Equality(type, null)) {
      throw $S00().Construct("type");
    }
    this.type = type;
    this.typeFixed = true;
  }; 

  function TypeFormatEventArgs_get_FormattedName () {
    return this.formattedName;
  }; 

  function TypeFormatEventArgs_get_Type () {
    return this.type;
  }; 

  function TypeFormatEventArgs_set_FormattedName (value) {
    if (this.formattedName != value) {
      if (!this.typeFixed) {
        throw $S01().Construct("The formatted-name is fixed and cannot be changed");
      }
      this.formattedName = value;
    }
  }; 

  function TypeFormatEventArgs_set_Type (value) {
    if ($T04().op_Inequality(this.type, value)) {
      if (this.typeFixed) {
        throw $S01().Construct("The type is fixed and cannot be changed");
      }
      this.type = value;
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "ProtoBuf.Meta.TypeFormatEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      TypeFormatEventArgs__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      TypeFormatEventArgs__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_FormattedName", 
      JSIL.MethodSignature.Return($.String), 
      TypeFormatEventArgs_get_FormattedName
    );

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      TypeFormatEventArgs_get_Type
    );

    $.Method({Static:false, Public:true }, "set_FormattedName", 
      JSIL.MethodSignature.Action($.String), 
      TypeFormatEventArgs_set_FormattedName
    );

    $.Method({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      TypeFormatEventArgs_set_Type
    );

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "formattedName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "typeFixed", $.Boolean);

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "FormattedName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate ProtoBuf.Meta.TypeFormatEventHandler */ 

JSIL.MakeDelegate("ProtoBuf.Meta.TypeFormatEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm08.TypeRef("ProtoBuf.Meta.TypeFormatEventArgs")]));

/* class ProtoBuf.Meta.ValueMember */ 

(function ValueMember$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.RuntimeTypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.Meta.MetaType)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm08.ProtoBuf.Serializers.TagDecorator)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm08.ProtoBuf.Serializers.NullDecorator)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ArrayDecorator)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm08.ProtoBuf.Serializers.ListDecorator)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.Serializers.PropertyDecorator)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm08.ProtoBuf.Serializers.DefaultValueDecorator)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0A.System.Uri)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm08.ProtoBuf.Serializers.UriDecorator)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Reflection.PropertyInfo)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.Reflection.FieldInfo)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm08.ProtoBuf.Serializers.FieldDecorator)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm08.ProtoBuf.Serializers.MemberSpecifiedDecorator)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm08.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm07.System.Char)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm07.System.FormatException)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm07.System.SByte)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm07.System.Globalization.NumberStyles)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm07.System.Globalization.CultureInfo)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm07.System.Decimal)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm07.System.DateTime)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm07.System.TimeSpan)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm07.System.Enum)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm07.System.Convert)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.ParameterInfo))) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm07.System.Reflection.ParameterInfo)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm08.ProtoBuf.Serializers.EnumSerializer)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm08.ProtoBuf.Serializers.BooleanSerializer)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm08.ProtoBuf.Serializers.CharSerializer)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm08.ProtoBuf.Serializers.SByteSerializer)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm08.ProtoBuf.Serializers.ByteSerializer)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm08.ProtoBuf.Serializers.Int16Serializer)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm08.ProtoBuf.Serializers.UInt16Serializer)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm08.ProtoBuf.Serializers.Int32Serializer)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm08.ProtoBuf.Serializers.UInt32Serializer)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm08.ProtoBuf.Serializers.Int64Serializer)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm08.ProtoBuf.Serializers.UInt64Serializer)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm08.ProtoBuf.Serializers.SingleSerializer)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm08.ProtoBuf.Serializers.DoubleSerializer)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm08.ProtoBuf.Serializers.DecimalSerializer)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm08.ProtoBuf.Serializers.DateTimeSerializer)) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm08.ProtoBuf.Serializers.NetObjectSerializer)) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm08.ProtoBuf.BclHelpers_NetObjectOptions)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm08.ProtoBuf.Serializers.StringSerializer)) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm08.ProtoBuf.Serializers.TimeSpanSerializer)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm08.ProtoBuf.Serializers.BlobSerializer)) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm08.ProtoBuf.Serializers.GuidSerializer)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize($asm08.ProtoBuf.Serializers.SystemTypeSerializer)) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize($asm08.ProtoBuf.Serializers.ParseableSerializer)) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm08.ProtoBuf.Serializers.SubItemSerializer)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentOutOfRangeException, [$asm07.System.String]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, [$asm07.System.String]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.FormatException, [$asm07.System.String]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.SByte, [
        $asm07.System.String, $asm07.System.Globalization.NumberStyles, 
        $asm07.System.IFormatProvider
      ]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Byte, [
        $asm07.System.String, $asm07.System.Globalization.NumberStyles, 
        $asm07.System.IFormatProvider
      ]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int16, [
        $asm07.System.String, $asm07.System.Globalization.NumberStyles, 
        $asm07.System.IFormatProvider
      ]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.UInt16, [
        $asm07.System.String, $asm07.System.Globalization.NumberStyles, 
        $asm07.System.IFormatProvider
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Single, [
        $asm07.System.String, $asm07.System.Globalization.NumberStyles, 
        $asm07.System.IFormatProvider
      ]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Double, [
        $asm07.System.String, $asm07.System.Globalization.NumberStyles, 
        $asm07.System.IFormatProvider
      ]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Guid, [$asm07.System.String]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [$asm07.System.Type, $asm07.System.Object]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Object, [
        $asm07.System.Object, $asm07.System.Type, 
        $asm07.System.IFormatProvider
      ]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String, $asm07.System.String]))) ();
  };


  function ValueMember__ctor$00 (model, parentType, fieldNumber, member, memberType, itemType, defaultType, dataFormat, defaultValue) {
    $thisType.prototype._ctor.call(this, 
      model, 
      fieldNumber, 
      memberType, 
      itemType, 
      defaultType, 
      dataFormat
    );
    if ($T03().op_Equality(member, null)) {
      throw $S00().Construct("member");
    }
    if ($T01().op_Equality(parentType, null)) {
      throw $S00().Construct("parentType");
    }
    if (!(((fieldNumber | 0) >= 1) || $T07().IsEnum(parentType))) {
      throw $S01().Construct("fieldNumber");
    }
    this.member = member;
    this.parentType = parentType;
    if (!(((fieldNumber | 0) >= 1) || $T07().IsEnum(parentType))) {
      throw $S01().Construct("fieldNumber");
    }
    if (!((defaultValue === null) || !$T01().op_Inequality(model.MapType(JSIL.GetType(defaultValue)), memberType))) {
      defaultValue = $thisType.ParseDefaultValue(memberType, defaultValue);
    }
    this.defaultValue = defaultValue;
    var metaType = model.FindWithoutAdd(memberType);
    if (metaType !== null) {
      this.asReference = metaType.get_AsReferenceDefault();
      return;
    }
    this.asReference = $T0A().GetAsReferenceDefault(model, memberType);
  }; 

  function ValueMember__ctor$01 (model, fieldNumber, memberType, itemType, defaultType, dataFormat) {
    if ($T01().op_Equality(memberType, null)) {
      throw $S00().Construct("memberType");
    }
    if (model === null) {
      throw $S00().Construct("model");
    }
    this.fieldNumber = (fieldNumber | 0);
    this.memberType = memberType;
    this.itemType = itemType;
    this.defaultType = defaultType;
    this.model = model;
    this.dataFormat = dataFormat;
  }; 

  function ValueMember_BuildSerializer () {
    var wireType = new JSIL.BoxedVariable($asm08.ProtoBuf.WireType.Variant);
    var opaqueToken = new JSIL.BoxedVariable(0);
    try {
      (this.model).TakeLock(/* ref */ opaqueToken);
      var type = (
        $T01().op_Equality(this.itemType, null)
           ? this.memberType
           : this.itemType)
      ;
      var protoSerializer = $thisType.TryGetCoreSerializer(
        this.model, 
        this.dataFormat, 
        type, 
        /* ref */ wireType, 
        this.asReference, 
        this.dynamicType, 
        this.get_OverwriteList(), 
        true
      );
      if (protoSerializer === null) {
        throw $S02().Construct(JSIL.ConcatString("No serializer defined for type: ", type.get_FullName()));
      }
      if (!(!$T01().op_Inequality(this.itemType, null) || !this.get_SupportNull())) {
        if (this.get_IsPacked()) {
          throw $S03().Construct("Packed encodings cannot support null values");
        }
        protoSerializer = new ($T10())(1, wireType.get(), this.get_IsStrict(), protoSerializer);
        protoSerializer = new ($T11())(this.model, protoSerializer);
        protoSerializer = new ($T10())(this.fieldNumber, $T0B().StartGroup, false, protoSerializer);
      } else {
        protoSerializer = new ($T10())(this.fieldNumber, wireType.get(), this.get_IsStrict(), protoSerializer);
      }
      if ($T01().op_Inequality(this.itemType, null)) {
        var arg_10D_0 = (
          this.get_SupportNull()
             ? this.itemType
             : JSIL.Coalesce($T07().GetUnderlyingType(this.itemType), this.itemType))
        ;
        if ((this.memberType).get_IsArray()) {
          protoSerializer = new ($T12())(this.model, protoSerializer, this.fieldNumber, this.get_IsPacked(), wireType.get(), this.memberType, this.get_OverwriteList(), this.get_SupportNull());
        } else {
          protoSerializer = $T13().Create(
            this.model, 
            this.memberType, 
            this.defaultType, 
            protoSerializer, 
            this.fieldNumber, 
            this.get_IsPacked(), 
            wireType.get(), 
            $T03().op_Inequality(this.member, null) && 
            $T14().CanWrite(this.model, this.member), 
            this.get_OverwriteList(), 
            this.get_SupportNull()
          );
        }
      } else if (!((this.defaultValue === null) || 
          this.get_IsRequired() || !$T15().op_Equality(this.getSpecified, null))) {
        protoSerializer = new ($T16())(this.model, this.defaultValue, protoSerializer);
      }
      if ($T01().op_Equality(this.memberType, (this.model).MapType($T17().__Type__))) {
        protoSerializer = new ($T18())(this.model, protoSerializer);
      }
      if ($T03().op_Inequality(this.member, null)) {
        if ($T19().op_Inequality($T19().$As(this.member), null)) {
          protoSerializer = new ($T14())(this.model, this.parentType, $T19().$Cast(this.member), protoSerializer);
        } else {
          if (!$T1A().op_Inequality($T1A().$As(this.member), null)) {
            throw $S04().Construct();
          }
          protoSerializer = new ($T1B())(this.parentType, $T1A().$Cast(this.member), protoSerializer);
        }
        if (!(!$T15().op_Inequality(this.getSpecified, null) && !$T15().op_Inequality(this.setSpecified, null))) {
          protoSerializer = new ($T1C())(this.getSpecified, this.setSpecified, protoSerializer);
        }
      }
      var result = protoSerializer;
    } finally {
      (this.model).ReleaseLock(opaqueToken.get());
    }
    return result;
  }; 

  function ValueMember_get_AsReference () {
    return this.asReference;
  }; 

  function ValueMember_get_DataFormat () {
    return this.dataFormat;
  }; 

  function ValueMember_get_DefaultType () {
    return this.defaultType;
  }; 

  function ValueMember_get_DefaultValue () {
    return this.defaultValue;
  }; 

  function ValueMember_get_DynamicType () {
    return this.dynamicType;
  }; 

  function ValueMember_get_FieldNumber () {
    return this.fieldNumber;
  }; 

  function ValueMember_get_IsPacked () {
    return this.HasFlag(2);
  }; 

  function ValueMember_get_IsRequired () {
    return this.HasFlag(4);
  }; 

  function ValueMember_get_IsStrict () {
    return this.HasFlag(1);
  }; 

  function ValueMember_get_ItemType () {
    return this.itemType;
  }; 

  function ValueMember_get_Member () {
    return this.member;
  }; 

  function ValueMember_get_MemberType () {
    return this.memberType;
  }; 

  function ValueMember_get_Name () {
    if (!$T07().IsNullOrEmpty(this.$name)) {
      return this.$name;
    }
    return (this.member).get_Name();
  }; 

  function ValueMember_get_OverwriteList () {
    return this.HasFlag(8);
  }; 

  function ValueMember_get_ParentType () {
    return this.parentType;
  }; 

  function ValueMember_get_Serializer () {
    if (this.serializer === null) {
      this.serializer = this.BuildSerializer();
    }
    return this.serializer;
  }; 

  function ValueMember_get_SupportNull () {
    return this.HasFlag(16);
  }; 

  function ValueMember_GetDateTimeWireType (format) {
    switch (format.valueOf()) {
      case 0: 
        return $T0B().String;

      case 3: 
        return $T0B().Fixed64;

      case 4: 
        return $T0B().StartGroup;

    }
    throw $S04().Construct();
  }; 

  function ValueMember_GetIntWireType (format, width) {
    switch (format.valueOf()) {
      case 0: 
      case 2: 
        return $T0B().Variant;

      case 1: 
        return $T0B().SignedVariant;

      case 3: 
        if ((width | 0) !== 32) {
          return $T0B().Fixed64;
        }
        return $T0B().Fixed32;

      default: 
        throw $S04().Construct();

    }
  }; 

  function ValueMember_GetRawEnumValue () {
    return ($T1A().$Cast(this.member)).GetRawConstantValue();
  }; 

  function ValueMember_GetSchemaTypeName (applyNetObjectProxy, /* ref */ requiresBclImport) {
    var type = this.get_ItemType();
    if ($T01().op_Equality(type, null)) {
      type = this.get_MemberType();
    }
    return (this.model).GetSchemaTypeName(
      type, 
      this.get_DataFormat(), 
      applyNetObjectProxy && this.asReference, 
      applyNetObjectProxy && this.dynamicType, 
      /* ref */ requiresBclImport
    );
  }; 

  function ValueMember_HasFlag (flag) {
    return (((this.flags | 0) & (flag | 0)) === (flag | 0));
  }; 

  function ValueMember_ParseDefaultValue (type, value) {
    var underlyingType = $T07().GetUnderlyingType(type);
    if ($T01().op_Inequality(underlyingType, null)) {
      type = underlyingType;
    }
    if ($T0E().$As(value) !== null) {
      var text = $T0E().$Cast(value);
      if ($T07().IsEnum(type)) {
        return $T07().ParseEnum(type, text);
      }
      var typeCode = $T07().GetTypeCode(type);
      switch (typeCode.valueOf()) {
        case 3: 
          return $T1D().$Box($T1D().Parse(text));

        case 4: 
          if ((text.length | 0) === 1) {
            return $T20().$Box(text[0]);
          }
          throw $S05().Construct(("Single character expected: \"" + text + "\""));

        case 5: 
          return $T22().$Box($S06().CallStatic($T22(), "Parse", null, text, $T23().Integer, $T24().get_InvariantCulture()));

        case 6: 
          return $T1E().$Box($S07().CallStatic($T1E(), "Parse", null, text, $T23().Integer, $T24().get_InvariantCulture()));

        case 7: 
          return $T25().$Box($S08().CallStatic($T25(), "Parse", null, text, $T23().Any, $T24().get_InvariantCulture()));

        case 8: 
          return $T26().$Box($S09().CallStatic($T26(), "Parse", null, text, $T23().Any, $T24().get_InvariantCulture()));

        case 9: 
          return $T02().$Box($T02().Parse(text, $T23().Any, $T24().get_InvariantCulture()));

        case 10: 
          return $T27().$Box($T27().Parse(text, $T23().Any, $T24().get_InvariantCulture()));

        case 11: 
          return $T28().Parse(text, $T23().Any, $T24().get_InvariantCulture());

        case 12: 
          return $T29().Parse(text, $T23().Any, $T24().get_InvariantCulture());

        case 13: 
          return $T2A().$Box($S0A().CallStatic($T2A(), "Parse", null, text, $T23().Any, $T24().get_InvariantCulture()));

        case 14: 
          return $T2B().$Box($S0B().CallStatic($T2B(), "Parse", null, text, $T23().Any, $T24().get_InvariantCulture()));

        case 15: 
          return $T2C().Parse(text, $T23().Any, $T24().get_InvariantCulture());

        case 16: 
          return $T2D().Parse(text, $T24().get_InvariantCulture());

        case 17: 
          break;

        case 18: 
          return text;

        default: 
          switch (typeCode.valueOf()) {
            case 100: 
              return $T2E().Parse(text);

            case 102: 
              return $S0C().Construct(text);

            case 103: 
              return text;

          }
          break;

      }
    }
    if ($T07().IsEnum(type)) {
      return $S0D().CallStatic($T30(), "ToObject", null, type, value);
    }
    return $S0E().CallStatic($T31(), "ChangeType", null, value, type, $T24().get_InvariantCulture());
  }; 

  function ValueMember_set_AsReference (value) {
    this.ThrowIfFrozen();
    this.asReference = value;
  }; 

  function ValueMember_set_DataFormat (value) {
    this.ThrowIfFrozen();
    this.dataFormat = value;
  }; 

  function ValueMember_set_DefaultValue (value) {
    this.ThrowIfFrozen();
    this.defaultValue = value;
  }; 

  function ValueMember_set_DynamicType (value) {
    this.ThrowIfFrozen();
    this.dynamicType = value;
  }; 

  function ValueMember_set_IsPacked (value) {
    this.SetFlag(2, value, true);
  }; 

  function ValueMember_set_IsRequired (value) {
    this.SetFlag(4, value, true);
  }; 

  function ValueMember_set_IsStrict (value) {
    this.SetFlag(1, value, true);
  }; 

  function ValueMember_set_OverwriteList (value) {
    this.SetFlag(8, value, true);
  }; 

  function ValueMember_set_SupportNull (value) {
    this.SetFlag(16, value, true);
  }; 

  function ValueMember_SetFlag (flag, value, throwIfFrozen) {
    if (!(!throwIfFrozen || (this.HasFlag(flag) === value))) {
      this.ThrowIfFrozen();
    }
    if (value) {
      this.flags = (this.flags | 0) | (flag | 0);
      return;
    }
    this.flags = (this.flags | 0) & (~flag & 0xFF);
  }; 

  function ValueMember_SetName (name) {
    this.ThrowIfFrozen();
    this.$name = name;
  }; 

  function ValueMember_SetSpecified (getSpecified, setSpecified) {
    var parameters = null;
    if (!(!$T15().op_Inequality(getSpecified, null) || (!$T01().op_Inequality(
            getSpecified.get_ReturnType(), 
            (this.model).MapType($T1D().__Type__)
          ) && 
          !getSpecified.get_IsStatic() && 
          ((getSpecified.GetParameters().length | 0) === 0)))) {
      throw $S0F().Construct("Invalid pattern for checking member-specified", "getSpecified");
    }
    if (!(!$T15().op_Inequality(setSpecified, null) || (!($T01().op_Inequality(
              setSpecified.get_ReturnType(), 
              (this.model).MapType($T35().__Type__)
            ) || 
            setSpecified.get_IsStatic()) && 
          (((parameters = setSpecified.GetParameters()).length | 0) === 1) && 
          !$T01().op_Inequality(
            (parameters[0]).get_ParameterType(), 
            (this.model).MapType($T1D().__Type__)
          )))) {
      throw $S0F().Construct("Invalid pattern for setting member-specified", "setSpecified");
    }
    this.ThrowIfFrozen();
    this.getSpecified = getSpecified;
    this.setSpecified = setSpecified;
  }; 

  function ValueMember_ThrowIfFrozen () {
    if (this.serializer !== null) {
      throw $S02().Construct("The type cannot be changed once a serializer has been generated");
    }
  }; 

  function ValueMember_TryGetCoreSerializer (model, dataFormat, type, /* ref */ defaultWireType, asReference, dynamicType, overwriteList, allowComplexTypes) {
    var underlyingType = $T07().GetUnderlyingType(type);
    if ($T01().op_Inequality(underlyingType, null)) {
      type = underlyingType;
    }
    if ($T07().IsEnum(type)) {
      if (!(!allowComplexTypes || (model === null))) {
        defaultWireType.set($T0B().Variant);
        return new ($T37())(type, model.GetEnumMap(type));
      }
      defaultWireType.set($T0B().None);
      return null;
    } else {
      var typeCode = $T07().GetTypeCode(type);
      switch (typeCode.valueOf()) {
        case 3: 
          defaultWireType.set($T0B().Variant);
          return new ($T38())(model);

        case 4: 
          defaultWireType.set($T0B().Variant);
          return new ($T39())(model);

        case 5: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 32));
          return new ($T3A())(model);

        case 6: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 32));
          return new ($T3B())(model);

        case 7: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 32));
          return new ($T3C())(model);

        case 8: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 32));
          return new ($T3D())(model);

        case 9: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 32));
          return new ($T3E())(model);

        case 10: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 32));
          return new ($T3F())(model);

        case 11: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 64));
          return new ($T40())(model);

        case 12: 
          defaultWireType.set($thisType.GetIntWireType(dataFormat, 64));
          return new ($T41())(model);

        case 13: 
          defaultWireType.set($T0B().Fixed32);
          return new ($T42())(model);

        case 14: 
          defaultWireType.set($T0B().Fixed64);
          return new ($T43())(model);

        case 15: 
          defaultWireType.set($T0B().String);
          return new ($T44())(model);

        case 16: 
          defaultWireType.set($thisType.GetDateTimeWireType(dataFormat));
          return new ($T45())(model);

        case 17: 
          break;

        case 18: 
          defaultWireType.set($T0B().String);
          if (asReference) {
            return new ($T46())(model, model.MapType($T0E().__Type__), 0, $T47().AsReference);
          }
          return new ($T48())(model);

        default: 
          switch (typeCode.valueOf()) {
            case 100: 
              defaultWireType.set($thisType.GetDateTimeWireType(dataFormat));
              return new ($T49())(model);

            case 101: 
              defaultWireType.set($T0B().String);
              return new ($T4A())(model, overwriteList);

            case 102: 
              defaultWireType.set((
                  (dataFormat === $T04().Group)
                     ? $T0B().StartGroup
                     : $T0B().String)
              );
              return new ($T4B())(model);

            case 103: 
              defaultWireType.set($T0B().String);
              return new ($T48())(model);

            case 104: 
              defaultWireType.set($T0B().String);
              return new ($T4C())(model);

          }
          break;

      }
      var protoSerializer = (
        model.get_AllowParseableTypes()
           ? $T4D().TryCreate(type, model)
           : null)
      ;
      if (protoSerializer !== null) {
        defaultWireType.set($T0B().String);
        return protoSerializer;
      }
      if (!(!allowComplexTypes || (model === null))) {
        var key = (model.GetKey(type, false, true) | 0);
        var metaType = null;
        if (key >= 0) {
          metaType = model.get_Item(type);
          if (!(((dataFormat.valueOf() | 0) !== 0) || !metaType.get_IsGroup())) {
            dataFormat = $T04().Group;
          }
        }
        if (asReference | dynamicType) {
          var netObjectOptions = $T47().None;
          if (asReference) {
            netObjectOptions = $T47().$Cast(netObjectOptions | $T47().AsReference);
          }
          if (dynamicType) {
            netObjectOptions = $T47().$Cast(netObjectOptions | $T47().DynamicType);
          }
          if (metaType !== null) {
            if (!(!asReference || !$T07().IsValueType(type))) {
              var text = "AsReference cannot be used with value-types";
              if (type.get_Name() == "KeyValuePair`2") {
                text = (JSIL.ConcatString(text, "; please see http://stackoverflow.com/q/14436606/"));
              } else {
                text = ((text + ": " + type.get_FullName()));
              }
              throw $S02().Construct(text);
            }
            if (!(!asReference || !metaType.get_IsAutoTuple())) {
              netObjectOptions = $T47().$Cast(netObjectOptions | $T47().LateSet);
            }
            if (metaType.get_UseConstructor()) {
              netObjectOptions = $T47().$Cast(netObjectOptions | $T47().UseConstructor);
            }
          }
          defaultWireType.set((
              (dataFormat === $T04().Group)
                 ? $T0B().StartGroup
                 : $T0B().String)
          );
          return new ($T46())(model, type, key, netObjectOptions);
        }
        if (key >= 0) {
          defaultWireType.set((
              (dataFormat === $T04().Group)
                 ? $T0B().StartGroup
                 : $T0B().String)
          );
          return new ($T4E())(type, key, metaType, true);
        }
      }
      defaultWireType.set($T0B().None);
      return null;
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.ValueMember", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm07.TypeRef("System.Type"), 
          $.Int32, $asm07.TypeRef("System.Reflection.MemberInfo"), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.DataFormat"), 
          $.Object
        ]), 
      ValueMember__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $.Int32, 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.DataFormat")
        ]), 
      ValueMember__ctor$01
    );

    $.Method({Static:false, Public:false}, "BuildSerializer", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      ValueMember_BuildSerializer
    );

    $.Method({Static:false, Public:true }, "get_AsReference", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_AsReference
    );

    $.Method({Static:false, Public:true }, "get_DataFormat", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.DataFormat")), 
      ValueMember_get_DataFormat
    );

    $.Method({Static:false, Public:true }, "get_DefaultType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      ValueMember_get_DefaultType
    );

    $.Method({Static:false, Public:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($.Object), 
      ValueMember_get_DefaultValue
    );

    $.Method({Static:false, Public:true }, "get_DynamicType", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_DynamicType
    );

    $.Method({Static:false, Public:true }, "get_FieldNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      ValueMember_get_FieldNumber
    );

    $.Method({Static:false, Public:true }, "get_IsPacked", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_IsPacked
    );

    $.Method({Static:false, Public:true }, "get_IsRequired", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_IsRequired
    );

    $.Method({Static:false, Public:true }, "get_IsStrict", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_IsStrict
    );

    $.Method({Static:false, Public:true }, "get_ItemType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      ValueMember_get_ItemType
    );

    $.Method({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MemberInfo")), 
      ValueMember_get_Member
    );

    $.Method({Static:false, Public:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      ValueMember_get_MemberType
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String), 
      ValueMember_get_Name
    );

    $.Method({Static:false, Public:true }, "get_OverwriteList", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_OverwriteList
    );

    $.Method({Static:false, Public:true }, "get_ParentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      ValueMember_get_ParentType
    );

    $.Method({Static:false, Public:false}, "get_Serializer", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer")), 
      ValueMember_get_Serializer
    );

    $.Method({Static:false, Public:true }, "get_SupportNull", 
      JSIL.MethodSignature.Return($.Boolean), 
      ValueMember_get_SupportNull
    );

    $.Method({Static:true , Public:false}, "GetDateTimeWireType", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.WireType"), [$asm08.TypeRef("ProtoBuf.DataFormat")]), 
      ValueMember_GetDateTimeWireType
    );

    $.Method({Static:true , Public:false}, "GetIntWireType", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.WireType"), [$asm08.TypeRef("ProtoBuf.DataFormat"), $.Int32]), 
      ValueMember_GetIntWireType
    );

    $.Method({Static:false, Public:false}, "GetRawEnumValue", 
      JSIL.MethodSignature.Return($.Object), 
      ValueMember_GetRawEnumValue
    );

    $.Method({Static:false, Public:false}, "GetSchemaTypeName", 
      new JSIL.MethodSignature($.String, [$.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      ValueMember_GetSchemaTypeName
    );

    $.Method({Static:false, Public:false}, "HasFlag", 
      new JSIL.MethodSignature($.Boolean, [$.Byte]), 
      ValueMember_HasFlag
    );

    $.Method({Static:true , Public:false}, "ParseDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $.Object]), 
      ValueMember_ParseDefaultValue
    );

    $.Method({Static:false, Public:true }, "set_AsReference", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_AsReference
    );

    $.Method({Static:false, Public:true }, "set_DataFormat", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.DataFormat")), 
      ValueMember_set_DataFormat
    );

    $.Method({Static:false, Public:true }, "set_DefaultValue", 
      JSIL.MethodSignature.Action($.Object), 
      ValueMember_set_DefaultValue
    );

    $.Method({Static:false, Public:true }, "set_DynamicType", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_DynamicType
    );

    $.Method({Static:false, Public:true }, "set_IsPacked", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_IsPacked
    );

    $.Method({Static:false, Public:true }, "set_IsRequired", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_IsRequired
    );

    $.Method({Static:false, Public:true }, "set_IsStrict", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_IsStrict
    );

    $.Method({Static:false, Public:true }, "set_OverwriteList", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_OverwriteList
    );

    $.Method({Static:false, Public:true }, "set_SupportNull", 
      JSIL.MethodSignature.Action($.Boolean), 
      ValueMember_set_SupportNull
    );

    $.Method({Static:false, Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [
          $.Byte, $.Boolean, 
          $.Boolean
        ]), 
      ValueMember_SetFlag
    );

    $.Method({Static:false, Public:false}, "SetName", 
      JSIL.MethodSignature.Action($.String), 
      ValueMember_SetName
    );

    $.Method({Static:false, Public:true }, "SetSpecified", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Reflection.MethodInfo")]), 
      ValueMember_SetSpecified
    );

    $.Method({Static:false, Public:false}, "ThrowIfFrozen", 
      JSIL.MethodSignature.Void, 
      ValueMember_ThrowIfFrozen
    );

    $.Method({Static:true , Public:false}, "TryGetCoreSerializer", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), [
          $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"), $asm08.TypeRef("ProtoBuf.DataFormat"), 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("ProtoBuf.WireType")]), 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean
        ]), 
      ValueMember_TryGetCoreSerializer
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "fieldNumber", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "member", $asm07.TypeRef("System.Reflection.MemberInfo"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "parentType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "itemType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "defaultType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "memberType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "defaultValue", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "model", $asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel"));

    $.Field({Static:false, Public:false}, "serializer", $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));

    $.Field({Static:false, Public:false}, "dataFormat", $asm08.TypeRef("ProtoBuf.DataFormat"));

    $.Field({Static:false, Public:false}, "asReference", $.Boolean);

    $.Field({Static:false, Public:false}, "dynamicType", $.Boolean);

    $.Field({Static:false, Public:false}, "getSpecified", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "setSpecified", $asm07.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Constant({Static:true , Public:false}, "OPTIONS_IsStrict", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "OPTIONS_IsPacked", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "OPTIONS_IsRequired", $.Byte, 4);

    $.Constant({Static:true , Public:false}, "OPTIONS_OverwriteList", $.Byte, 8);

    $.Constant({Static:true , Public:false}, "OPTIONS_SupportNull", $.Byte, 16);

    $.Field({Static:false, Public:false}, "flags", $.Byte);

    $.Property({Static:false, Public:true }, "FieldNumber", $.Int32);

    $.Property({Static:false, Public:true }, "Member", $asm07.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:true }, "ItemType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "MemberType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "DefaultType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ParentType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "DefaultValue", $.Object);

    $.Property({Static:false, Public:false}, "Serializer", $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"));

    $.Property({Static:false, Public:true }, "DataFormat", $asm08.TypeRef("ProtoBuf.DataFormat"));

    $.Property({Static:false, Public:true }, "IsStrict", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPacked", $.Boolean);

    $.Property({Static:false, Public:true }, "OverwriteList", $.Boolean);

    $.Property({Static:false, Public:true }, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "AsReference", $.Boolean);

    $.Property({Static:false, Public:true }, "DynamicType", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "SupportNull", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.ValueMember+Comparer */ 

(function Comparer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.ValueMember)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [$asm08.ProtoBuf.Meta.ValueMember, $asm08.ProtoBuf.Meta.ValueMember]))) ();
  };


  function Comparer__ctor () {
  }; 

  function Comparer_Compare$00 (x, y) {
    return $S00().CallVirtual("Compare", null, this, $T01().$As(x), $T01().$As(y));
  }; 

  function Comparer_Compare$01 (x, y) {
    if (x === y) {
      return 0;
    }
    if (x === null) {
      return -1;
    }
    if (y === null) {
      return 1;
    }
    return JSIL.CompareValues(x.get_FieldNumber(), y.get_FieldNumber());
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.ValueMember+Comparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Comparer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object]), 
      Comparer_Compare$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("ProtoBuf.Meta.ValueMember"), $asm08.TypeRef("ProtoBuf.Meta.ValueMember")]), 
      Comparer_Compare$01
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type);


    function Comparer__cctor () {
      $thisType.Default = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Comparer__cctor
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer"), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.IComparer`1", [$asm08.TypeRef("ProtoBuf.Meta.ValueMember")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("ProtoBuf.Compiler");
/* struct ProtoBuf.Compiler.CodeLabel */ 

(function CodeLabel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Reflection.Emit.Label)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };


  function CodeLabel__ctor (value, index) {
    this.Value = value.MemberwiseClone();
    this.Index = (index | 0);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.Compiler.CodeLabel", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.Label"), $.Int32]), 
      CodeLabel__ctor
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Value", $asm07.TypeRef("System.Reflection.Emit.Label"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "Index", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Compiler.CompilerContext */ 

(function CompilerContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Reflection.Emit.ILGenerator)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Meta.RuntimeTypeModel_SerializerPair))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext_ILVersion)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Meta.MutableList)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm07.System.Type))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.Reflection.Emit.DynamicMethod)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Threading.Interlocked)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Reflection.Emit.OpCodes)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.Reflection.PropertyInfo)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.Reflection.Emit.Label)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.Reflection.Emit.OpCode)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm08.ProtoBuf.Compiler.ProtoDeserializer)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm08.ProtoBuf.Compiler.ProtoSerializer)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.System.Reflection.MemberTypes)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm07.System.Reflection.ConstructorInfo)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm07.System.Reflection.FieldInfo)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm07.System.Reflection.Emit.MethodBuilder)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm08.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm07.System.Reflection.BindingFlags)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.ParameterInfo))) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm07.System.Reflection.Emit.LocalBuilder)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm07.System.Reflection.LocalVariableInfo)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.MethodInfo))) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm07.System.Reflection.ParameterInfo)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm07.System.Reflection.Assembly)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm07.System.Runtime.CompilerServices.InternalsVisibleToAttribute)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm07.System.SByte)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm07.System.Decimal)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize(System.Array.Of($asm07.System.Int32))) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize(System.Array.Of($asm08.ProtoBuf.Compiler.CodeLabel))) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.Emit.Label))) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm07.System.Math)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext_UsingBlock)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.Reflection.Emit.DynamicMethod, [
        $asm07.System.String, $asm07.System.Type, 
        System.Array.Of($asm07.System.Type), $asm07.System.Type, 
        $asm07.System.Boolean
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Int32, [JSIL.Reference.Of($asm07.System.Int32)]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Reflection.Emit.Label]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.CompilerContext, [
        $asm07.System.Type, $asm07.System.Boolean, 
        $asm07.System.Boolean, $asm08.ProtoBuf.Meta.TypeModel, 
        $asm07.System.Type
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String, $asm07.System.Exception]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Type]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.NotSupportedException, [$asm07.System.String]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, [$asm07.System.String]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.InvalidOperationException, null))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Reflection.MethodInfo, [$asm07.System.String, $asm07.System.Reflection.BindingFlags]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Reflection.ConstructorInfo]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.ConstructorInfo")))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentException, [$asm07.System.String, $asm07.System.String]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Type]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Byte]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Reflection.Emit.LocalBuilder]))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")))) ();
  };
  var $S17 = function () {
    return ($S17 = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.PropertyInfo")))) ();
  };
  var $S18 = function () {
    return ($S18 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.String]))) ();
  };
  var $S19 = function () {
    return ($S19 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Single]))) ();
  };
  var $S1A = function () {
    return ($S1A = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Double]))) ();
  };
  var $S1B = function () {
    return ($S1B = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Int64]))) ();
  };
  var $S1C = function () {
    return ($S1C = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.SByte]))) ();
  };
  var $S1D = function () {
    return ($S1D = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Int32]))) ();
  };
  var $S1E = function () {
    return ($S1E = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, $asm07.System.Reflection.FieldInfo]))) ();
  };
  var $S1F = function () {
    return ($S1F = JSIL.Memoize(JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.FieldInfo")))) ();
  };
  var $S20 = function () {
    return ($S20 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Reflection.MethodInfo, [$asm07.System.String, System.Array.Of($asm07.System.Type)]))) ();
  };
  var $S21 = function () {
    return ($S21 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Reflection.Emit.OpCode, System.Array.Of($asm07.System.Reflection.Emit.Label)]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ExpectedType)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitRead)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_ReturnsValue)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.get_RequiresOldValue)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm08.ProtoBuf.Serializers.IProtoSerializer.EmitWrite)) ();
  };


  function CompilerContext__ctor$00 (il, isStatic, isWriter, methodPairs, model, metadataVersion, assemblyName, inputType, traceName) {
    this.locals = new ($T07())();
    if (il === null) {
      throw $S00().Construct("il");
    }
    if (methodPairs === null) {
      throw $S00().Construct("methodPairs");
    }
    if (model === null) {
      throw $S00().Construct("model");
    }
    if ($T09().IsNullOrEmpty(assemblyName)) {
      throw $S00().Construct("assemblyName");
    }
    this.assemblyName = assemblyName;
    this.isStatic = isStatic;
    this.methodPairs = methodPairs;
    this.il = il;
    this.isWriter = isWriter;
    this.model = model;
    this.metadataVersion = metadataVersion;
    if ($T06().op_Inequality(inputType, null)) {
      this.inputValue = $S01().Construct(null, inputType);
    }
  }; 

  function CompilerContext__ctor$01 (associatedType, isWriter, isStatic, model, inputType) {
    this.locals = new ($T07())();
    if (model === null) {
      throw $S00().Construct("model");
    }
    this.metadataVersion = $T04().Net2;
    this.isStatic = isStatic;
    this.isWriter = isWriter;
    this.model = model;
    this.nonPublic = true;
    if (isWriter) {
      var typeFromHandle = $T0B().__Type__;
      var parameterTypes = JSIL.Array.New($T06(), [$T0D().__Type__, $T0E().__Type__]);
    } else {
      typeFromHandle = $T0D().__Type__;
      parameterTypes = JSIL.Array.New($T06(), [$T0D().__Type__, $T0F().__Type__]);
    }
    this.method = $S02().Construct(JSIL.ConcatString("proto_", ($S03().CallStatic($T11(), "Increment", null, /* ref */ new JSIL.MemberReference($thisType, "next"))).toString()), typeFromHandle, parameterTypes, (
        associatedType.get_IsInterface()
           ? $T0D().__Type__
           : associatedType)
      , true);
    this.il = (this.method).GetILGenerator();
    if ($T06().op_Inequality(inputType, null)) {
      this.inputValue = $S01().Construct(null, inputType);
    }
  }; 

  function CompilerContext_Add () {
    this.Emit($T13().Add.MemberwiseClone());
  }; 

  function CompilerContext_AllowInternal (property) {
    return (this.get_NonPublic() || this.InternalsVisible($T09().GetAssembly(property.get_DeclaringType())));
  }; 

  function CompilerContext_BeginFinally () {
    (this.il).BeginFinallyBlock();
  }; 

  function CompilerContext_BeginTry () {
    var arg_1E_1 = (this.il).BeginExceptionBlock().MemberwiseClone();
    var num = (this.nextLabel | 0);
    this.nextLabel = ((num + 1) | 0);
    var result = new ($T17())(arg_1E_1.MemberwiseClone(), num);
    return result;
  }; 

  function CompilerContext_Branch (label, short) {
    var opcode = (
      short
         ? $T13().Br_S
         : $T13().Br)
    .MemberwiseClone();
    $S04().CallVirtual("Emit", null, this.il, opcode.MemberwiseClone(), label.Value.MemberwiseClone());
  }; 

  function CompilerContext_BranchIfEqual (label, short) {
    var opcode = (
      short
         ? $T13().Beq_S
         : $T13().Beq)
    .MemberwiseClone();
    $S04().CallVirtual("Emit", null, this.il, opcode.MemberwiseClone(), label.Value.MemberwiseClone());
  }; 

  function CompilerContext_BranchIfFalse (label, short) {
    var opcode = (
      short
         ? $T13().Brfalse_S
         : $T13().Brfalse)
    .MemberwiseClone();
    $S04().CallVirtual("Emit", null, this.il, opcode.MemberwiseClone(), label.Value.MemberwiseClone());
  }; 

  function CompilerContext_BranchIfGreater (label, short) {
    var opcode = (
      short
         ? $T13().Bgt_S
         : $T13().Bgt)
    .MemberwiseClone();
    $S04().CallVirtual("Emit", null, this.il, opcode.MemberwiseClone(), label.Value.MemberwiseClone());
  }; 

  function CompilerContext_BranchIfLess (label, short) {
    var opcode = (
      short
         ? $T13().Blt_S
         : $T13().Blt)
    .MemberwiseClone();
    $S04().CallVirtual("Emit", null, this.il, opcode.MemberwiseClone(), label.Value.MemberwiseClone());
  }; 

  function CompilerContext_BranchIfTrue (label, short) {
    var opcode = (
      short
         ? $T13().Brtrue_S
         : $T13().Brtrue)
    .MemberwiseClone();
    $S04().CallVirtual("Emit", null, this.il, opcode.MemberwiseClone(), label.Value.MemberwiseClone());
  }; 

  function CompilerContext_BuildDeserializer (head, model) {
    var expectedType = $IM00().Call(head, null);
    var compilerContext = $S05().Construct(expectedType, false, true, model, $T0D().__Type__);
    var local = $S01().Construct(compilerContext, expectedType);
    try {
      if (!$T09().IsValueType(expectedType)) {
        $S06().CallVirtual("LoadValue", null, compilerContext, compilerContext.get_InputValue());
        compilerContext.CastFromObject(expectedType);
        $S07().CallVirtual("StoreValue", null, compilerContext, local);
      } else {
        $S06().CallVirtual("LoadValue", null, compilerContext, compilerContext.get_InputValue());
        var label = compilerContext.DefineLabel();
        var label2 = compilerContext.DefineLabel();
        compilerContext.BranchIfTrue(label, true);
        compilerContext.LoadAddress(local, expectedType);
        $S08().CallVirtual("EmitCtor", null, compilerContext, expectedType);
        compilerContext.Branch(label2, true);
        compilerContext.MarkLabel(label);
        $S06().CallVirtual("LoadValue", null, compilerContext, compilerContext.get_InputValue());
        compilerContext.CastFromObject(expectedType);
        $S07().CallVirtual("StoreValue", null, compilerContext, local);
        compilerContext.MarkLabel(label2);
      }
      $IM01().Call(head, null, compilerContext, local);
      if ($IM02().Call(head, null)) {
        $S07().CallVirtual("StoreValue", null, compilerContext, local);
      }
      $S06().CallVirtual("LoadValue", null, compilerContext, local);
      compilerContext.CastToObject(expectedType);
    } finally {
      if (local !== null) {
        $IM03().Call(local, null);
      }
    }
    compilerContext.Emit($T13().Ret.MemberwiseClone());
    return (compilerContext.method).CreateDelegate($T1B().__Type__);
  }; 

  function CompilerContext_BuildSerializer (head, model, $exception) {
    var expectedType = $IM00().Call(head, null);
    try {
      var compilerContext = $S05().Construct(expectedType, true, true, model, $T0D().__Type__);
      $S06().CallVirtual("LoadValue", null, compilerContext, compilerContext.get_InputValue());
      compilerContext.CastFromObject(expectedType);
      compilerContext.WriteNullCheckedTail(expectedType, head, null);
      compilerContext.Emit($T13().Ret.MemberwiseClone());
      var result = (compilerContext.method).CreateDelegate($T1D().__Type__);
    } catch ($exception) {
      var text = expectedType.get_FullName();
      if ($T05().IsNullOrEmpty(text)) {
        text = expectedType.get_Name();
      }
      throw $S09().Construct(JSIL.ConcatString("It was not possible to prepare a serializer for: ", text), $exception);
    }
    return result;
  }; 

  function CompilerContext_Cast (type) {
    $S0A().CallVirtual("Emit", null, this.il, $T13().Castclass.MemberwiseClone(), type);
  }; 

  function CompilerContext_CastFromObject (type) {
    if (!$thisType.IsObject(type)) {
      if ($T09().IsValueType(type)) {
        if (((this.get_MetadataVersion()).valueOf() | 0) === 0) {
          $S0A().CallVirtual("Emit", null, this.il, $T13().Unbox.MemberwiseClone(), type);
          $S0A().CallVirtual("Emit", null, this.il, $T13().Ldobj.MemberwiseClone(), type);
          return;
        }
        $S0A().CallVirtual("Emit", null, this.il, $T13().Unbox_Any.MemberwiseClone(), type);
        return;
      } else {
        $S0A().CallVirtual("Emit", null, this.il, $T13().Castclass.MemberwiseClone(), type);
      }
    }
  }; 

  function CompilerContext_CastToObject (type) {
    if (!$thisType.IsObject(type)) {
      if ($T09().IsValueType(type)) {
        $S0A().CallVirtual("Emit", null, this.il, $T13().Box.MemberwiseClone(), type);
        return;
      }
      $S0A().CallVirtual("Emit", null, this.il, $T13().Castclass.MemberwiseClone(), this.MapType($T0D().__Type__));
    }
  }; 

  function CompilerContext_CheckAccessibility (member) {
    if ($T15().op_Equality(member, null)) {
      throw $S00().Construct("member");
    }
    if (!this.get_NonPublic()) {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            var memberType = member.get_MemberType();
            if (memberType <= $T1F().Method) {
              if (memberType === $T1F().Constructor) {
                var constructorInfo = $T20().$Cast(member);
                var flag = constructorInfo.get_IsPublic() || 
                (!(!constructorInfo.get_IsAssembly() && 
                    !constructorInfo.get_IsFamilyOrAssembly()) && 
                  this.InternalsVisible((constructorInfo.get_DeclaringType()).get_Assembly()));
                $label0 = 1 /* goto IL_1DE */ ;
                continue $labelgroup0;
              }
              if (memberType === $T1F().Field) {
                var fieldInfo = $T22().$Cast(member);
                flag = fieldInfo.get_IsPublic() || 
                (!(!fieldInfo.get_IsAssembly() && 
                    !fieldInfo.get_IsFamilyOrAssembly()) && 
                  this.InternalsVisible((fieldInfo.get_DeclaringType()).get_Assembly()));
                $label0 = 1 /* goto IL_1DE */ ;
                continue $labelgroup0;
              }
              if (memberType === $T1F().Method) {
                var methodInfo = $T23().$Cast(member);
                flag = methodInfo.get_IsPublic() || 
                (!(!methodInfo.get_IsAssembly() && 
                    !methodInfo.get_IsFamilyOrAssembly()) && 
                  this.InternalsVisible((methodInfo.get_DeclaringType()).get_Assembly()));
                if (!(flag || (($T24().$As(member) === null) && 
                      !$T06().op_Equality(
                        member.get_DeclaringType(), 
                        this.MapType($T03().__Type__)
                      )))) {
                  flag = true;
                  $label0 = 1 /* goto IL_1DE */ ;
                  continue $labelgroup0;
                }
                $label0 = 1 /* goto IL_1DE */ ;
                continue $labelgroup0;
              }
            } else {
              if (memberType === $T1F().Property) {
                flag = true;
                $label0 = 1 /* goto IL_1DE */ ;
                continue $labelgroup0;
              }
              if (memberType === $T1F().TypeInfo) {
                var type = $T06().$Cast(member);
                flag = type.get_IsPublic() || 
                this.InternalsVisible(type.get_Assembly());
                $label0 = 1 /* goto IL_1DE */ ;
                continue $labelgroup0;
              }
              if (memberType === $T1F().NestedType) {
                type = $T06().$Cast(member);

              $loop0: 
                do {
                  flag = type.get_IsNestedPublic() || 
                  type.get_IsPublic() || 
                  (!(!$T06().op_Equality(type.get_DeclaringType(), null) && 
                      !type.get_IsNestedAssembly() && 
                      !type.get_IsNestedFamORAssem()) && 
                    this.InternalsVisible(type.get_Assembly()));
                  if (!flag) {
                    break $loop0;
                  }
                } while ($T06().op_Inequality(type = type.get_DeclaringType(), null));
                $label0 = 1 /* goto IL_1DE */ ;
                continue $labelgroup0;
              }
            }
            throw $S0B().Construct(memberType.toString());

            $label0 = 1 /* goto IL_1DE */ ;
            continue $labelgroup0;
          case 1: /* IL_1DE */ 
            if (!flag) {
              if (!((memberType !== $T1F().TypeInfo) && (memberType !== $T1F().NestedType))) {
                throw $S0C().Construct(JSIL.ConcatString("Non-public type cannot be used with full dll compilation: ", ($T06().$Cast(member)).get_FullName()));
              }
              throw $S0C().Construct(("Non-public member cannot be used with full dll compilation: " + (member.get_DeclaringType()).get_FullName() + "." + member.get_Name()));
            }

            break $labelgroup0;
        }
      }
    }
  }; 

  function CompilerContext_Constrain (type) {
    $S0A().CallVirtual("Emit", null, this.il, $T13().Constrained.MemberwiseClone(), type);
  }; 

  function CompilerContext_ConvertFromInt32 (typeCode, uint32Overflow) {
    switch (typeCode.valueOf()) {
      case 5: 
        this.Emit($T13().Conv_Ovf_I1.MemberwiseClone());
        return;

      case 6: 
        this.Emit($T13().Conv_Ovf_U1.MemberwiseClone());
        return;

      case 7: 
        this.Emit($T13().Conv_Ovf_I2.MemberwiseClone());
        return;

      case 8: 
        this.Emit($T13().Conv_Ovf_U2.MemberwiseClone());
        return;

      case 9: 
        return;

      case 10: 
        this.Emit((
            uint32Overflow
               ? $T13().Conv_Ovf_U4
               : $T13().Conv_U4)
          .MemberwiseClone());
        return;

      case 11: 
        this.Emit($T13().Conv_I8.MemberwiseClone());
        return;

      case 12: 
        this.Emit($T13().Conv_U8.MemberwiseClone());
        return;

      default: 
        throw $S0D().Construct();

    }
  }; 

  function CompilerContext_ConvertToInt32 (typeCode, uint32Overflow) {
    switch (typeCode.valueOf()) {
      case 5: 
      case 6: 
      case 7: 
      case 8: 
        this.Emit($T13().Conv_I4.MemberwiseClone());
        return;

      case 9: 
        return;

      case 10: 
        this.Emit((
            uint32Overflow
               ? $T13().Conv_Ovf_I4_Un
               : $T13().Conv_Ovf_I4)
          .MemberwiseClone());
        return;

      case 11: 
        this.Emit($T13().Conv_Ovf_I4.MemberwiseClone());
        return;

      case 12: 
        this.Emit($T13().Conv_Ovf_I4_Un.MemberwiseClone());
        return;

      default: 
        throw $S0C().Construct(JSIL.ConcatString("ConvertToInt32 not implemented for: ", typeCode.toString()));

    }
  }; 

  function CompilerContext_CopyValue () {
    this.Emit($T13().Dup.MemberwiseClone());
  }; 

  function CompilerContext_CreateArray (elementType, length) {
    $S06().CallVirtual("LoadValue", null, this, length);
    $S0A().CallVirtual("Emit", null, this.il, $T13().Newarr.MemberwiseClone(), elementType);
  }; 

  function CompilerContext_DefineLabel () {
    var arg_1E_1 = (this.il).DefineLabel().MemberwiseClone();
    var num = (this.nextLabel | 0);
    this.nextLabel = ((num + 1) | 0);
    var result = new ($T17())(arg_1E_1.MemberwiseClone(), num);
    return result;
  }; 

  function CompilerContext_DiscardValue () {
    this.Emit($T13().Pop.MemberwiseClone());
  }; 

  function CompilerContext_Emit (opcode) {
    (this.il).Emit(opcode.MemberwiseClone());
  }; 

  function CompilerContext_EmitBasicRead$02 (methodName, expectedType) {
    var methodInfo = $S0E().CallVirtual("GetMethod", null, this.MapType($T0F().__Type__), methodName, $T27().$Flags("Instance", "NonPublic", "Public"));
    if (!(!$T23().op_Equality(methodInfo, null) && 
        !$T06().op_Inequality(methodInfo.get_ReturnType(), expectedType) && ((methodInfo.GetParameters().length | 0) === 0))) {
      throw $S0F().Construct("methodName");
    }
    this.LoadReaderWriter();
    this.EmitCall(methodInfo);
  }; 

  function CompilerContext_EmitBasicRead$03 (helperType, methodName, expectedType) {
    var methodInfo = $S0E().CallVirtual("GetMethod", null, helperType, methodName, $T27().$Flags("NonPublic", "Public", "Static"));
    if (!(!$T23().op_Equality(methodInfo, null) && 
        !$T06().op_Inequality(methodInfo.get_ReturnType(), expectedType) && ((methodInfo.GetParameters().length | 0) === 1))) {
      throw $S0F().Construct("methodName");
    }
    this.LoadReaderWriter();
    this.EmitCall(methodInfo);
  }; 

  function CompilerContext_EmitBasicWrite (methodName, fromValue) {
    if ($T09().IsNullOrEmpty(methodName)) {
      throw $S00().Construct("methodName");
    }
    $S06().CallVirtual("LoadValue", null, this, fromValue);
    this.LoadReaderWriter();
    this.EmitCall(this.GetWriterMethod(methodName));
  }; 

  function CompilerContext_EmitCall$04 (method) {
    this.EmitCall(method, null);
  }; 

  function CompilerContext_EmitCall$05 (method, targetType) {
    this.CheckAccessibility(method);
    if (!(!method.get_IsStatic() && !$T09().IsValueType(method.get_DeclaringType()))) {
      var opcode = $T13().Call.MemberwiseClone();
    } else {
      opcode = $T13().Callvirt.MemberwiseClone();
      if (!(!$T06().op_Inequality(targetType, null) || 
          !$T09().IsValueType(targetType) || $T09().IsValueType(method.get_DeclaringType()))) {
        this.Constrain(targetType);
      }
    }
    (this.il).EmitCall(opcode.MemberwiseClone(), method, null);
  }; 

  function CompilerContext_EmitCtor$06 (type) {
    this.EmitCtor(type, $T09().EmptyTypes);
  }; 

  function CompilerContext_EmitCtor$07 (ctor) {
    if ($T20().op_Equality(ctor, null)) {
      throw $S00().Construct("ctor");
    }
    this.CheckAccessibility(ctor);
    $S10().CallVirtual("Emit", null, this.il, $T13().Newobj.MemberwiseClone(), ctor);
  }; 

  function CompilerContext_EmitCtor$08 (type, parameterTypes) {
    if (!(!$T09().IsValueType(type) || ((parameterTypes.length | 0) !== 0))) {
      $S0A().CallVirtual("Emit", null, this.il, $T13().Initobj.MemberwiseClone(), type);
      return;
    }
    var constructor = $T09().GetConstructor(type, parameterTypes, true);
    if ($T20().op_Equality(constructor, null)) {
      throw $S0C().Construct(JSIL.ConcatString("No suitable constructor found for ", type.get_FullName()));
    }
    $S11().CallVirtual("EmitCtor", null, this, constructor);
  }; 

  function CompilerContext_EmitWrite (helperType, methodName, valueFrom) {
    if ($T09().IsNullOrEmpty(methodName)) {
      throw $S00().Construct("methodName");
    }
    var methodInfo = $S0E().CallVirtual("GetMethod", null, helperType, methodName, $T27().$Flags("NonPublic", "Public", "Static"));
    if (!(!$T23().op_Equality(methodInfo, null) && !$T06().op_Inequality(
          methodInfo.get_ReturnType(), 
          this.MapType($T0B().__Type__)
        ))) {
      throw $S0F().Construct("methodName");
    }
    $S06().CallVirtual("LoadValue", null, this, valueFrom);
    this.LoadReaderWriter();
    this.EmitCall(methodInfo);
  }; 

  function CompilerContext_EndFinally () {
    (this.il).EndExceptionBlock();
  }; 

  function CompilerContext_EndTry (label, short) {
    var opcode = (
      short
         ? $T13().Leave_S
         : $T13().Leave)
    .MemberwiseClone();
    $S04().CallVirtual("Emit", null, this.il, opcode.MemberwiseClone(), label.Value.MemberwiseClone());
  }; 

  function CompilerContext_get_InputValue () {
    return this.inputValue;
  }; 

  function CompilerContext_get_MetadataVersion () {
    return this.metadataVersion;
  }; 

  function CompilerContext_get_Model () {
    return this.model;
  }; 

  function CompilerContext_get_NonPublic () {
    return this.nonPublic;
  }; 

  function CompilerContext_GetDedicatedMethod (metaKey, read) {
    if (this.methodPairs === null) {
      return null;
    }

    for (var i = 0; i < (this.methodPairs.length | 0); ) {
      if ((this.methodPairs[i].MetaKey | 0) === (metaKey | 0)) {
        if (!read) {
          return this.methodPairs[i].Serialize;
        }
        return this.methodPairs[i].Deserialize;
      } else {
        i = ((i + 1) | 0);
      }
    }
    throw $S12().Construct("Meta-key not found", "metaKey");
  }; 

  function CompilerContext_GetFromPool (type) {
    var count = ((this.locals).get_Count() | 0);

    for (var i = 0; i < count; i = ((i + 1) | 0)) {
      var localBuilder = $T2B().$Cast((this.locals).get_Item(i));
      if (!((localBuilder === null) || !$T06().op_Equality(localBuilder.get_LocalType(), type))) {
        (this.locals).set_Item(i, null);
        return localBuilder;
      }
    }
    return (this.il).DeclareLocal(type);
  }; 

  function CompilerContext_GetLocalWithValue (type, fromValue) {
    if (fromValue !== null) {
      if ($T06().op_Equality(fromValue.get_Type(), type)) {
        return fromValue.AsCopy();
      }
      $S06().CallVirtual("LoadValue", null, this, fromValue);
      if (!($T09().IsValueType(type) || (!$T06().op_Equality(fromValue.get_Type(), null) && 
            $S13().CallVirtual("IsAssignableFrom", null, type, fromValue.get_Type())))) {
        this.Cast(type);
      }
    }
    var local = $S01().Construct(this, type);
    $S07().CallVirtual("StoreValue", null, this, local);
    return local;
  }; 

  function CompilerContext_GetWriterMethod (methodName) {
    var methods = (this.MapType($T0E().__Type__)).GetMethods($T27().$Flags("NonPublic", "Public", "Static"));
    var array = methods;

    for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
      var methodInfo = array[i];
      if (!(methodInfo.get_Name() != methodName)) {
        var parameters = methodInfo.GetParameters();
        if (!(((parameters.length | 0) !== 2) || !$T06().op_Equality(
              (parameters[1]).get_ParameterType(), 
              this.MapType($T0E().__Type__)
            ))) {
          return methodInfo;
        }
      }
    }
    throw $S12().Construct(JSIL.ConcatString("No suitable method found for: ", methodName), "methodName");
  }; 

  function CompilerContext_InternalsVisible (assembly) {
    if ($T09().IsNullOrEmpty(this.assemblyName)) {
      return false;
    }
    if (!((this.knownTrustedAssemblies === null) || (((this.knownTrustedAssemblies).IndexOfReference(assembly) | 0) < 0))) {
      return true;
    }
    if (!((this.knownUntrustedAssemblies === null) || (((this.knownUntrustedAssemblies).IndexOfReference(assembly) | 0) < 0))) {
      return false;
    }
    var flag = false;
    var type = this.MapType($T30().__Type__);
    if ($T06().op_Equality(type, null)) {
      return false;
    }
    var customAttributes = assembly.GetCustomAttributes(type, false);

  $loop0: 
    for (var i = 0; i < (customAttributes.length | 0); i = ((i + 1) | 0)) {
      var internalsVisibleToAttribute = $T30().$Cast(customAttributes[i]);
      if (!(!(internalsVisibleToAttribute.get_AssemblyName() == this.assemblyName) && !(System.String.StartsWith(internalsVisibleToAttribute.get_AssemblyName(), JSIL.ConcatString(this.assemblyName, ","))))) {
        flag = true;
        break $loop0;
      }
    }
    if (flag) {
      if (this.knownTrustedAssemblies === null) {
        this.knownTrustedAssemblies = new ($T2A())();
      }
      (this.knownTrustedAssemblies).Add(assembly);
    } else {
      if (this.knownUntrustedAssemblies === null) {
        this.knownUntrustedAssemblies = new ($T2A())();
      }
      (this.knownUntrustedAssemblies).Add(assembly);
    }
    return flag;
  }; 

  function CompilerContext_IsObject (type) {
    return $T06().op_Equality(type, $T0D().__Type__);
  }; 

  function CompilerContext_LoadAddress (local, type) {
    if (!$T09().IsValueType(type)) {
      $S06().CallVirtual("LoadValue", null, this, local);
      return;
    }
    if (local === null) {
      throw $S0C().Construct("Cannot load the address of a struct at the head of the stack");
    }
    if (local === this.get_InputValue()) {
      $S14().CallVirtual("Emit", null, this.il, $T13().Ldarga_S.MemberwiseClone(), (
          this.isStatic
             ? 0
             : 1)
      );
      return;
    }
    var opcode = (
      this.UseShortForm(local)
         ? $T13().Ldloca_S
         : $T13().Ldloca)
    .MemberwiseClone();
    $S15().CallVirtual("Emit", null, this.il, opcode.MemberwiseClone(), local.get_Value());
  }; 

  function CompilerContext_LoadArrayValue (arr, i) {
    var type = arr.get_Type();
    type = type.GetElementType();
    $S06().CallVirtual("LoadValue", null, this, arr);
    $S06().CallVirtual("LoadValue", null, this, i);
    switch (($T09().GetTypeCode(type)).valueOf()) {
      case 5: 
        this.Emit($T13().Ldelem_I1.MemberwiseClone());
        return;

      case 6: 
        this.Emit($T13().Ldelem_U1.MemberwiseClone());
        return;

      case 7: 
        this.Emit($T13().Ldelem_I2.MemberwiseClone());
        return;

      case 8: 
        this.Emit($T13().Ldelem_U2.MemberwiseClone());
        return;

      case 9: 
        this.Emit($T13().Ldelem_I4.MemberwiseClone());
        return;

      case 10: 
        this.Emit($T13().Ldelem_U4.MemberwiseClone());
        return;

      case 11: 
        this.Emit($T13().Ldelem_I8.MemberwiseClone());
        return;

      case 12: 
        this.Emit($T13().Ldelem_I8.MemberwiseClone());
        return;

      case 13: 
        this.Emit($T13().Ldelem_R4.MemberwiseClone());
        return;

      case 14: 
        this.Emit($T13().Ldelem_R8.MemberwiseClone());
        return;

      default: 
        if ($T09().IsValueType(type)) {
          $S0A().CallVirtual("Emit", null, this.il, $T13().Ldelema.MemberwiseClone(), type);
          $S0A().CallVirtual("Emit", null, this.il, $T13().Ldobj.MemberwiseClone(), type);
          return;
        }
        this.Emit($T13().Ldelem_Ref.MemberwiseClone());
        return;

    }
  }; 

  function CompilerContext_LoadLength (arr, zeroIfNull) {
    if (zeroIfNull) {
      var label = this.DefineLabel();
      var label2 = this.DefineLabel();
      $S06().CallVirtual("LoadValue", null, this, arr);
      this.CopyValue();
      this.BranchIfTrue(label, true);
      this.DiscardValue();
      $S16().CallVirtual("LoadValue", null, this, 0);
      this.Branch(label2, true);
      this.MarkLabel(label);
      this.Emit($T13().Ldlen.MemberwiseClone());
      this.Emit($T13().Conv_I4.MemberwiseClone());
      this.MarkLabel(label2);
      return;
    }
    $S06().CallVirtual("LoadValue", null, this, arr);
    this.Emit($T13().Ldlen.MemberwiseClone());
    this.Emit($T13().Conv_I4.MemberwiseClone());
  }; 

  function CompilerContext_LoadNullRef () {
    this.Emit($T13().Ldnull.MemberwiseClone());
  }; 

  function CompilerContext_LoadReaderWriter () {
    this.Emit((
        this.isStatic
           ? $T13().Ldarg_1
           : $T13().Ldarg_2)
      .MemberwiseClone());
  }; 

  function CompilerContext_LoadSerializationContext () {
    this.LoadReaderWriter();
    $S17().CallVirtual("LoadValue", null, this, ((
          this.isWriter
             ? $T0E().__Type__
             : $T0F().__Type__)
      ).GetProperty("Context"));
  }; 

  function CompilerContext_LoadValue$09 (value) {
    if (value === null) {
      this.LoadNullRef();
      return;
    }
    $S18().CallVirtual("Emit", null, this.il, $T13().Ldstr.MemberwiseClone(), value);
  }; 

  function CompilerContext_LoadValue$0A (value) {
    $S19().CallVirtual("Emit", null, this.il, $T13().Ldc_R4.MemberwiseClone(), value);
  }; 

  function CompilerContext_LoadValue$0B (value) {
    $S1A().CallVirtual("Emit", null, this.il, $T13().Ldc_R8.MemberwiseClone(), value);
  }; 

  function CompilerContext_LoadValue$0C (value) {
    $S1B().CallVirtual("Emit", null, this.il, $T13().Ldc_I8.MemberwiseClone(), value);
  }; 

  function CompilerContext_LoadValue$0D (value) {
    switch (value) {
      case -1: 
        this.Emit($T13().Ldc_I4_M1.MemberwiseClone());
        return;

      case 0: 
        this.Emit($T13().Ldc_I4_0.MemberwiseClone());
        return;

      case 1: 
        this.Emit($T13().Ldc_I4_1.MemberwiseClone());
        return;

      case 2: 
        this.Emit($T13().Ldc_I4_2.MemberwiseClone());
        return;

      case 3: 
        this.Emit($T13().Ldc_I4_3.MemberwiseClone());
        return;

      case 4: 
        this.Emit($T13().Ldc_I4_4.MemberwiseClone());
        return;

      case 5: 
        this.Emit($T13().Ldc_I4_5.MemberwiseClone());
        return;

      case 6: 
        this.Emit($T13().Ldc_I4_6.MemberwiseClone());
        return;

      case 7: 
        this.Emit($T13().Ldc_I4_7.MemberwiseClone());
        return;

      case 8: 
        this.Emit($T13().Ldc_I4_8.MemberwiseClone());
        return;

      default: 
        if (!(((value | 0) < -128) || ((value | 0) > 127))) {
          $S1C().CallVirtual("Emit", null, this.il, $T13().Ldc_I4_S.MemberwiseClone(), ((value + 0x80 & 0xFF) - 0x80));
          return;
        }
        $S1D().CallVirtual("Emit", null, this.il, $T13().Ldc_I4.MemberwiseClone(), value);
        return;

    }
  }; 

  function CompilerContext_LoadValue$0E (local) {
    if (local !== null) {
      if (local === this.get_InputValue()) {
        this.Emit((
            this.isStatic
               ? $T13().Ldarg_0
               : $T13().Ldarg_1)
          .MemberwiseClone());
        return;
      }
      switch ((local.get_Value()).get_LocalIndex()) {
        case 0: 
          this.Emit($T13().Ldloc_0.MemberwiseClone());
          return;

        case 1: 
          this.Emit($T13().Ldloc_1.MemberwiseClone());
          return;

        case 2: 
          this.Emit($T13().Ldloc_2.MemberwiseClone());
          return;

        case 3: 
          this.Emit($T13().Ldloc_3.MemberwiseClone());
          return;

        default: 
          var opcode = (
            this.UseShortForm(local)
               ? $T13().Ldloc_S
               : $T13().Ldloc)
          .MemberwiseClone();
          $S15().CallVirtual("Emit", null, this.il, opcode.MemberwiseClone(), local.get_Value());
          break;

      }
    }
  }; 

  function CompilerContext_LoadValue$0F (field) {
    this.CheckAccessibility(field);
    var opcode = (
      field.get_IsStatic()
         ? $T13().Ldsfld
         : $T13().Ldfld)
    .MemberwiseClone();
    $S1E().CallVirtual("Emit", null, this.il, opcode.MemberwiseClone(), field);
  }; 

  function CompilerContext_LoadValue$10 (property) {
    this.CheckAccessibility(property);
    this.EmitCall($T09().GetGetMethod(property, true, true));
  }; 

  function CompilerContext_LoadValue$11 (il, value) {
    switch (value) {
      case -1: 
        il.Emit($T13().Ldc_I4_M1.MemberwiseClone());
        return;

      case 0: 
        il.Emit($T13().Ldc_I4_0.MemberwiseClone());
        return;

      case 1: 
        il.Emit($T13().Ldc_I4_1.MemberwiseClone());
        return;

      case 2: 
        il.Emit($T13().Ldc_I4_2.MemberwiseClone());
        return;

      case 3: 
        il.Emit($T13().Ldc_I4_3.MemberwiseClone());
        return;

      case 4: 
        il.Emit($T13().Ldc_I4_4.MemberwiseClone());
        return;

      case 5: 
        il.Emit($T13().Ldc_I4_5.MemberwiseClone());
        return;

      case 6: 
        il.Emit($T13().Ldc_I4_6.MemberwiseClone());
        return;

      case 7: 
        il.Emit($T13().Ldc_I4_7.MemberwiseClone());
        return;

      case 8: 
        il.Emit($T13().Ldc_I4_8.MemberwiseClone());
        return;

      default: 
        $S1D().CallVirtual("Emit", null, il, $T13().Ldc_I4.MemberwiseClone(), value);
        return;

    }
  }; 

  function CompilerContext_LoadValue$12 (type) {
    $S0A().CallVirtual("Emit", null, this.il, $T13().Ldtoken.MemberwiseClone(), type);
    this.EmitCall((this.MapType($T06().__Type__)).GetMethod("GetTypeFromHandle"));
  }; 

  function CompilerContext_LoadValue$13 (value) {
    if ($T36().op_Equality(value, $T36().Zero)) {
      $S1F().CallVirtual("LoadValue", null, this, $T36().__Type__.GetField("Zero"));
      return;
    }
    var bits = $T36().GetBits(value);
    $S16().CallVirtual("LoadValue", null, this, bits[0]);
    $S16().CallVirtual("LoadValue", null, this, bits[1]);
    $S16().CallVirtual("LoadValue", null, this, bits[2]);
    $S16().CallVirtual("LoadValue", null, this, ((bits[3] >>> 0) >>> (31 >>> 0) | 0));
    $S16().CallVirtual("LoadValue", null, this, ((bits[3] | 0) >> 16) & 255);
    this.EmitCtor(
      this.MapType($T36().__Type__), 
      JSIL.Array.New($T06(), [this.MapType($T12().__Type__), this.MapType($T12().__Type__), this.MapType($T12().__Type__), this.MapType($T01().__Type__), this.MapType($T39().__Type__)])
    );
  }; 

  function CompilerContext_LoadValue$14 (value) {
    if ($T3A().op_Equality(value.MemberwiseClone(), $T3A().Empty.MemberwiseClone())) {
      $S1F().CallVirtual("LoadValue", null, this, $T3A().__Type__.GetField("Empty"));
      return;
    }
    var array = value.ToByteArray();
    var i = (((array[0] | 0) | ((array[1] | 0) << 8)) | ((array[2] | 0) << 16)) | ((array[3] | 0) << 24);
    $S16().CallVirtual("LoadValue", null, this, i);
    var value2 = (((array[4] | 0) | ((array[5] | 0) << 8) + 0x8000 & 0xFFFF) - 0x8000);
    $S16().CallVirtual("LoadValue", null, this, value2);
    value2 = (((array[6] | 0) | ((array[7] | 0) << 8) + 0x8000 & 0xFFFF) - 0x8000);
    $S16().CallVirtual("LoadValue", null, this, value2);

    for (i = 8; i <= 15; i = ((i + 1) | 0)) {
      $S16().CallVirtual("LoadValue", null, this, array[i]);
    }
    this.EmitCtor(
      this.MapType($T3A().__Type__), 
      JSIL.Array.New($T06(), [this.MapType($T12().__Type__), this.MapType($T3C().__Type__), this.MapType($T3C().__Type__), this.MapType($T39().__Type__), this.MapType($T39().__Type__), this.MapType($T39().__Type__), this.MapType($T39().__Type__), this.MapType($T39().__Type__), this.MapType($T39().__Type__), this.MapType($T39().__Type__), this.MapType($T39().__Type__)])
    );
  }; 

  function CompilerContext_MapMetaKeyToCompiledKey (metaKey) {
    if (!(((metaKey | 0) >= 0) && (this.methodPairs !== null))) {
      return metaKey;
    }

    for (var i = 0; i < (this.methodPairs.length | 0); i = ((i + 1) | 0)) {
      if ((this.methodPairs[i].MetaKey | 0) === (metaKey | 0)) {
        return i;
      }
    }
    throw $S12().Construct(JSIL.ConcatString("Key could not be mapped: ", (metaKey).toString()), "metaKey");
  }; 

  function CompilerContext_MapType (type) {
    return (this.model).MapType(type);
  }; 

  function CompilerContext_MarkLabel (label) {
    (this.il).MarkLabel(label.Value.MemberwiseClone());
  }; 

  function CompilerContext_ReadNullCheckedTail (type, tail, valueFrom) {
    var underlyingType = null;
    if (!(!$T09().IsValueType(type) || !$T06().op_Inequality(underlyingType = $T09().GetUnderlyingType(type), null))) {
      if ($IM04().Call(tail, null)) {
        var localWithValue = this.GetLocalWithValue(type, valueFrom);
        try {
          this.LoadAddress(localWithValue, type);
          this.EmitCall($S20().CallVirtual("GetMethod", null, type, "GetValueOrDefault", $T09().EmptyTypes));
        } finally {
          if (localWithValue !== null) {
            $IM03().Call(localWithValue, null);
          }
        }
      }
      $IM01().Call(tail, null, this, null);
      if ($IM02().Call(tail, null)) {
        this.EmitCtor(type, JSIL.Array.New($T06(), [underlyingType]));
      }
      return;
    }
    $IM01().Call(tail, null, this, valueFrom);
  }; 

  function CompilerContext_ReleaseToPool (value) {
    var count = ((this.locals).get_Count() | 0);

    for (var i = 0; i < count; i = ((i + 1) | 0)) {
      if ((this.locals).get_Item(i) === null) {
        (this.locals).set_Item(i, value);
        return;
      }
    }
    (this.locals).Add(value);
  }; 

  function CompilerContext_Return () {
    this.Emit($T13().Ret.MemberwiseClone());
  }; 

  function CompilerContext_StoreValue$15 (local) {
    if (local === this.get_InputValue()) {
      $S14().CallVirtual("Emit", null, this.il, $T13().Starg_S.MemberwiseClone(), (
          this.isStatic
             ? 0
             : 1)
      );
      return;
    }
    switch ((local.get_Value()).get_LocalIndex()) {
      case 0: 
        this.Emit($T13().Stloc_0.MemberwiseClone());
        return;

      case 1: 
        this.Emit($T13().Stloc_1.MemberwiseClone());
        return;

      case 2: 
        this.Emit($T13().Stloc_2.MemberwiseClone());
        return;

      case 3: 
        this.Emit($T13().Stloc_3.MemberwiseClone());
        return;

      default: 
        var opcode = (
          this.UseShortForm(local)
             ? $T13().Stloc_S
             : $T13().Stloc)
        .MemberwiseClone();
        $S15().CallVirtual("Emit", null, this.il, opcode.MemberwiseClone(), local.get_Value());
        return;

    }
  }; 

  function CompilerContext_StoreValue$16 (field) {
    this.CheckAccessibility(field);
    var opcode = (
      field.get_IsStatic()
         ? $T13().Stsfld
         : $T13().Stfld)
    .MemberwiseClone();
    $S1E().CallVirtual("Emit", null, this.il, opcode.MemberwiseClone(), field);
  }; 

  function CompilerContext_StoreValue$17 (property) {
    this.CheckAccessibility(property);
    this.EmitCall($T09().GetSetMethod(property, true, true));
  }; 

  function CompilerContext_Subtract () {
    this.Emit($T13().Sub.MemberwiseClone());
  }; 

  function CompilerContext_Switch (jumpTable) {
    var $temp00;
    if ((jumpTable.length | 0) <= 128) {
      var array = JSIL.Array.New($T16(), jumpTable.length);

      for (var i = 0; i < (array.length | 0); i = ((i + 1) | 0)) {
        array[i] = jumpTable[i].Value.MemberwiseClone();
      }
      $S21().CallVirtual("Emit", null, this.il, $T13().Switch.MemberwiseClone(), array);
      return;
    }
    var localWithValue = this.GetLocalWithValue(this.MapType($T12().__Type__), null);
    try {
      var num = (jumpTable.length | 0);
      var num2 = 0;
      var num3 = ((num / 128) | 0);
      if (((num % 128) | 0) !== 0) {
        num3 = ((num3 + 1) | 0);
      }
      var array2 = JSIL.Array.New($T16(), num3);

      for (var j = 0; j < num3; j = ((j + 1) | 0)) {
        array2[j] = (this.il).DefineLabel().MemberwiseClone();
      }
      var label = this.DefineLabel();
      $S06().CallVirtual("LoadValue", null, this, localWithValue);
      $S16().CallVirtual("LoadValue", null, this, 128);
      this.Emit($T13().Div.MemberwiseClone());
      $S21().CallVirtual("Emit", null, this.il, $T13().Switch.MemberwiseClone(), array2);
      this.Branch(label, false);
      var array3 = JSIL.Array.New($T16(), 128);

      for (var k = 0; k < num3; k = ((k + 1) | 0)) {
        (this.il).MarkLabel(array2[k].MemberwiseClone());
        var num4 = ($T3F().Min(128, num) | 0);
        num = ((num - num4) | 0);
        if ((array3.length | 0) !== num4) {
          array3 = JSIL.Array.New($T16(), num4);
        }
        var num5 = num2;

        for (var l = 0; l < num4; l = ((l + 1) | 0)) {
          array3[l] = jumpTable[($temp00 = num2, 
            num2 = ((num2 + 1) | 0), 
            $temp00)].Value.MemberwiseClone();
        }
        $S06().CallVirtual("LoadValue", null, this, localWithValue);
        if (num5 !== 0) {
          $S16().CallVirtual("LoadValue", null, this, num5);
          this.Emit($T13().Sub.MemberwiseClone());
        }
        $S21().CallVirtual("Emit", null, this.il, $T13().Switch.MemberwiseClone(), array3);
        if (num !== 0) {
          this.Branch(label, false);
        }
      }
      this.MarkLabel(label);
    } finally {
      if (localWithValue !== null) {
        $IM03().Call(localWithValue, null);
      }
    }
  }; 

  function CompilerContext_TraceCompile (value) {
  }; 

  function CompilerContext_TryCast (type) {
    $S0A().CallVirtual("Emit", null, this.il, $T13().Isinst.MemberwiseClone(), type);
  }; 

  function CompilerContext_UseShortForm (local) {
    return (((local.get_Value()).get_LocalIndex() | 0) < 256);
  }; 

  function CompilerContext_Using (local) {
    return new ($T40())(this, local);
  }; 

  function CompilerContext_WriteNullCheckedTail (type, tail, valueFrom) {
    if ($T09().IsValueType(type)) {
      var underlyingType = $T09().GetUnderlyingType(type);
      if ($T06().op_Equality(underlyingType, null)) {
        $IM05().Call(tail, null, this, valueFrom);
        return;
      }
      var localWithValue = this.GetLocalWithValue(type, valueFrom);
      try {
        this.LoadAddress(localWithValue, type);
        $S17().CallVirtual("LoadValue", null, this, type.GetProperty("HasValue"));
        var label = this.DefineLabel();
        this.BranchIfFalse(label, false);
        this.LoadAddress(localWithValue, type);
        this.EmitCall($S20().CallVirtual("GetMethod", null, type, "GetValueOrDefault", $T09().EmptyTypes));
        $IM05().Call(tail, null, this, null);
        this.MarkLabel(label);
        return;
      } finally {
        if (localWithValue !== null) {
          $IM03().Call(localWithValue, null);
        }
      }
    }
    $S06().CallVirtual("LoadValue", null, this, valueFrom);
    this.CopyValue();
    var label2 = this.DefineLabel();
    var label3 = this.DefineLabel();
    this.BranchIfTrue(label2, true);
    this.DiscardValue();
    this.Branch(label3, false);
    this.MarkLabel(label2);
    $IM05().Call(tail, null, this, null);
    this.MarkLabel(label3);
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Compiler.CompilerContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+SerializerPair")]), 
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext+ILVersion"), 
          $.String, $asm07.TypeRef("System.Type"), 
          $.String
        ]), 
      CompilerContext__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $.Boolean, $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm07.TypeRef("System.Type")
        ]), 
      CompilerContext__ctor$01
    );

    $.Method({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Void, 
      CompilerContext_Add
    );

    $.Method({Static:false, Public:false}, "AllowInternal", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.PropertyInfo")]), 
      CompilerContext_AllowInternal
    );

    $.Method({Static:false, Public:false}, "BeginFinally", 
      JSIL.MethodSignature.Void, 
      CompilerContext_BeginFinally
    );

    $.Method({Static:false, Public:false}, "BeginTry", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Compiler.CodeLabel")), 
      CompilerContext_BeginTry
    );

    $.Method({Static:false, Public:false}, "Branch", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CodeLabel"), $.Boolean]), 
      CompilerContext_Branch
    );

    $.Method({Static:false, Public:false}, "BranchIfEqual", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CodeLabel"), $.Boolean]), 
      CompilerContext_BranchIfEqual
    );

    $.Method({Static:false, Public:false}, "BranchIfFalse", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CodeLabel"), $.Boolean]), 
      CompilerContext_BranchIfFalse
    );

    $.Method({Static:false, Public:false}, "BranchIfGreater", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CodeLabel"), $.Boolean]), 
      CompilerContext_BranchIfGreater
    );

    $.Method({Static:false, Public:false}, "BranchIfLess", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CodeLabel"), $.Boolean]), 
      CompilerContext_BranchIfLess
    );

    $.Method({Static:false, Public:false}, "BranchIfTrue", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CodeLabel"), $.Boolean]), 
      CompilerContext_BranchIfTrue
    );

    $.Method({Static:true , Public:true }, "BuildDeserializer", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Compiler.ProtoDeserializer"), [$asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel")]), 
      CompilerContext_BuildDeserializer
    );

    $.Method({Static:true , Public:true }, "BuildSerializer", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Compiler.ProtoSerializer"), [$asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel")]), 
      CompilerContext_BuildSerializer
    );

    $.Method({Static:false, Public:false}, "Cast", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      CompilerContext_Cast
    );

    $.Method({Static:false, Public:false}, "CastFromObject", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      CompilerContext_CastFromObject
    );

    $.Method({Static:false, Public:false}, "CastToObject", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      CompilerContext_CastToObject
    );

    $.Method({Static:false, Public:false}, "CheckAccessibility", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MemberInfo")), 
      CompilerContext_CheckAccessibility
    );

    $.Method({Static:false, Public:false}, "Constrain", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      CompilerContext_Constrain
    );

    $.Method({Static:false, Public:false}, "ConvertFromInt32", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.ProtoTypeCode"), $.Boolean]), 
      CompilerContext_ConvertFromInt32
    );

    $.Method({Static:false, Public:false}, "ConvertToInt32", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.ProtoTypeCode"), $.Boolean]), 
      CompilerContext_ConvertToInt32
    );

    $.Method({Static:false, Public:false}, "CopyValue", 
      JSIL.MethodSignature.Void, 
      CompilerContext_CopyValue
    );

    $.Method({Static:false, Public:false}, "CreateArray", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      CompilerContext_CreateArray
    );

    $.Method({Static:false, Public:false}, "DefineLabel", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Compiler.CodeLabel")), 
      CompilerContext_DefineLabel
    );

    $.Method({Static:false, Public:false}, "DiscardValue", 
      JSIL.MethodSignature.Void, 
      CompilerContext_DiscardValue
    );

    $.Method({Static:false, Public:false}, "Emit", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.OpCode")), 
      CompilerContext_Emit
    );

    $.Method({Static:false, Public:false}, "EmitBasicRead", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Type")]), 
      CompilerContext_EmitBasicRead$02
    );

    $.Method({Static:false, Public:false}, "EmitBasicRead", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $.String, 
          $asm07.TypeRef("System.Type")
        ]), 
      CompilerContext_EmitBasicRead$03
    );

    $.Method({Static:false, Public:false}, "EmitBasicWrite", 
      new JSIL.MethodSignature(null, [$.String, $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      CompilerContext_EmitBasicWrite
    );

    $.Method({Static:false, Public:true }, "EmitCall", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MethodInfo")), 
      CompilerContext_EmitCall$04
    );

    $.Method({Static:false, Public:true }, "EmitCall", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.MethodInfo"), $asm07.TypeRef("System.Type")]), 
      CompilerContext_EmitCall$05
    );

    $.Method({Static:false, Public:true }, "EmitCtor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      CompilerContext_EmitCtor$06
    );

    $.Method({Static:false, Public:true }, "EmitCtor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.ConstructorInfo")), 
      CompilerContext_EmitCtor$07
    );

    $.Method({Static:false, Public:true }, "EmitCtor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])]), 
      CompilerContext_EmitCtor$08
    )
      .Parameter(1, "parameterTypes", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:false}, "EmitWrite", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $.String, 
          $asm08.TypeRef("ProtoBuf.Compiler.Local")
        ]), 
      CompilerContext_EmitWrite
    );

    $.Method({Static:false, Public:false}, "EndFinally", 
      JSIL.MethodSignature.Void, 
      CompilerContext_EndFinally
    );

    $.Method({Static:false, Public:false}, "EndTry", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CodeLabel"), $.Boolean]), 
      CompilerContext_EndTry
    );

    $.Method({Static:false, Public:true }, "get_InputValue", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Compiler.Local")), 
      CompilerContext_get_InputValue
    );

    $.Method({Static:false, Public:true }, "get_MetadataVersion", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Compiler.CompilerContext+ILVersion")), 
      CompilerContext_get_MetadataVersion
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      JSIL.MethodSignature.Return($asm08.TypeRef("ProtoBuf.Meta.TypeModel")), 
      CompilerContext_get_Model
    );

    $.Method({Static:false, Public:false}, "get_NonPublic", 
      JSIL.MethodSignature.Return($.Boolean), 
      CompilerContext_get_NonPublic
    );

    $.Method({Static:false, Public:false}, "GetDedicatedMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Emit.MethodBuilder"), [$.Int32, $.Boolean]), 
      CompilerContext_GetDedicatedMethod
    );

    $.Method({Static:false, Public:false}, "GetFromPool", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm07.TypeRef("System.Type")]), 
      CompilerContext_GetFromPool
    );

    $.Method({Static:false, Public:true }, "GetLocalWithValue", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Compiler.Local"), [$asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      CompilerContext_GetLocalWithValue
    );

    $.Method({Static:false, Public:false}, "GetWriterMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$.String]), 
      CompilerContext_GetWriterMethod
    );

    $.Method({Static:false, Public:false}, "InternalsVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.Assembly")]), 
      CompilerContext_InternalsVisible
    );

    $.Method({Static:true , Public:false}, "IsObject", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")]), 
      CompilerContext_IsObject
    );

    $.Method({Static:false, Public:false}, "LoadAddress", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.Local"), $asm07.TypeRef("System.Type")]), 
      CompilerContext_LoadAddress
    );

    $.Method({Static:false, Public:false}, "LoadArrayValue", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.Local"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      CompilerContext_LoadArrayValue
    );

    $.Method({Static:false, Public:false}, "LoadLength", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.Local"), $.Boolean]), 
      CompilerContext_LoadLength
    );

    $.Method({Static:false, Public:true }, "LoadNullRef", 
      JSIL.MethodSignature.Void, 
      CompilerContext_LoadNullRef
    );

    $.Method({Static:false, Public:true }, "LoadReaderWriter", 
      JSIL.MethodSignature.Void, 
      CompilerContext_LoadReaderWriter
    );

    $.Method({Static:false, Public:false}, "LoadSerializationContext", 
      JSIL.MethodSignature.Void, 
      CompilerContext_LoadSerializationContext
    );

    $.Method({Static:false, Public:true }, "LoadValue", 
      JSIL.MethodSignature.Action($.String), 
      CompilerContext_LoadValue$09
    );

    $.Method({Static:false, Public:true }, "LoadValue", 
      JSIL.MethodSignature.Action($.Single), 
      CompilerContext_LoadValue$0A
    );

    $.Method({Static:false, Public:true }, "LoadValue", 
      JSIL.MethodSignature.Action($.Double), 
      CompilerContext_LoadValue$0B
    );

    $.Method({Static:false, Public:true }, "LoadValue", 
      JSIL.MethodSignature.Action($.Int64), 
      CompilerContext_LoadValue$0C
    );

    $.Method({Static:false, Public:true }, "LoadValue", 
      JSIL.MethodSignature.Action($.Int32), 
      CompilerContext_LoadValue$0D
    );

    $.Method({Static:false, Public:true }, "LoadValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")), 
      CompilerContext_LoadValue$0E
    );

    $.Method({Static:false, Public:true }, "LoadValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.FieldInfo")), 
      CompilerContext_LoadValue$0F
    );

    $.Method({Static:false, Public:true }, "LoadValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.PropertyInfo")), 
      CompilerContext_LoadValue$10
    );

    $.Method({Static:true , Public:false}, "LoadValue", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32]), 
      CompilerContext_LoadValue$11
    );

    $.Method({Static:false, Public:false}, "LoadValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      CompilerContext_LoadValue$12
    );

    $.Method({Static:false, Public:false}, "LoadValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Decimal")), 
      CompilerContext_LoadValue$13
    );

    $.Method({Static:false, Public:false}, "LoadValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid")), 
      CompilerContext_LoadValue$14
    );

    $.Method({Static:false, Public:false}, "MapMetaKeyToCompiledKey", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      CompilerContext_MapMetaKeyToCompiledKey
    );

    $.Method({Static:false, Public:false}, "MapType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")]), 
      CompilerContext_MapType
    );

    $.Method({Static:false, Public:false}, "MarkLabel", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.CodeLabel")), 
      CompilerContext_MarkLabel
    );

    $.Method({Static:false, Public:false}, "ReadNullCheckedTail", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), 
          $asm08.TypeRef("ProtoBuf.Compiler.Local")
        ]), 
      CompilerContext_ReadNullCheckedTail
    );

    $.Method({Static:false, Public:false}, "ReleaseToPool", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Emit.LocalBuilder")), 
      CompilerContext_ReleaseToPool
    );

    $.Method({Static:false, Public:false}, "Return", 
      JSIL.MethodSignature.Void, 
      CompilerContext_Return
    );

    $.Method({Static:false, Public:true }, "StoreValue", 
      JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")), 
      CompilerContext_StoreValue$15
    );

    $.Method({Static:false, Public:true }, "StoreValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.FieldInfo")), 
      CompilerContext_StoreValue$16
    );

    $.Method({Static:false, Public:true }, "StoreValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.PropertyInfo")), 
      CompilerContext_StoreValue$17
    );

    $.Method({Static:false, Public:true }, "Subtract", 
      JSIL.MethodSignature.Void, 
      CompilerContext_Subtract
    );

    $.Method({Static:false, Public:true }, "Switch", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Compiler.CodeLabel")])), 
      CompilerContext_Switch
    );

    $.Method({Static:false, Public:false}, "TraceCompile", 
      JSIL.MethodSignature.Action($.String), 
      CompilerContext_TraceCompile
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG_COMPILE"]; });

    $.Method({Static:false, Public:false}, "TryCast", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type")), 
      CompilerContext_TryCast
    );

    $.Method({Static:false, Public:false}, "UseShortForm", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      CompilerContext_UseShortForm
    );

    $.Method({Static:false, Public:true }, "Using", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IDisposable"), [$asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      CompilerContext_Using
    );

    $.Method({Static:false, Public:false}, "WriteNullCheckedTail", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.Serializers.IProtoSerializer"), 
          $asm08.TypeRef("ProtoBuf.Compiler.Local")
        ]), 
      CompilerContext_WriteNullCheckedTail
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "method", $asm07.TypeRef("System.Reflection.Emit.DynamicMethod"));

    $.Field({Static:true , Public:false}, "next", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "isStatic", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "methodPairs", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("ProtoBuf.Meta.RuntimeTypeModel+SerializerPair")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "isWriter", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "nonPublic", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "inputValue", $asm08.TypeRef("ProtoBuf.Compiler.Local"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "assemblyName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "il", $asm07.TypeRef("System.Reflection.Emit.ILGenerator"));

    $.Field({Static:false, Public:false}, "locals", $asm08.TypeRef("ProtoBuf.Meta.MutableList"));

    $.Field({Static:false, Public:false}, "nextLabel", $.Int32);

    $.Field({Static:false, Public:false}, "knownTrustedAssemblies", $asm08.TypeRef("ProtoBuf.Meta.BasicList"));

    $.Field({Static:false, Public:false}, "knownUntrustedAssemblies", $asm08.TypeRef("ProtoBuf.Meta.BasicList"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "metadataVersion", $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext+ILVersion"));

    $.Property({Static:false, Public:true }, "Model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Property({Static:false, Public:false}, "NonPublic", $.Boolean);

    $.Property({Static:false, Public:true }, "InputValue", $asm08.TypeRef("ProtoBuf.Compiler.Local"));

    $.Property({Static:false, Public:true }, "MetadataVersion", $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext+ILVersion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Compiler.CompilerContext+UsingBlock */ 

(function UsingBlock$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Compiler.Local)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CodeLabel)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ArgumentNullException, [$asm07.System.String]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.System.Boolean, [$asm07.System.Type]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm08.ProtoBuf.Compiler.CompilerContext, $asm07.System.Type]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(JSIL.MethodSignature.Action($asm08.TypeRef("ProtoBuf.Compiler.Local")))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };


  function UsingBlock__ctor (ctx, local) {
    if (ctx === null) {
      throw $S00().Construct("ctx");
    }
    if (local === null) {
      throw $S00().Construct("local");
    }
    var type = local.get_Type();
    if (!((!$T04().IsValueType(type) && 
          !$T04().IsSealed(type)) || $S01().CallVirtual("IsAssignableFrom", null, ctx.MapType($T05().__Type__), type))) {
      return;
    }
    this.local = local;
    this.ctx = ctx;
    this.label = ctx.BeginTry();
  }; 

  function UsingBlock_Dispose () {
    if (!((this.local !== null) && (this.ctx !== null))) {
      return;
    }
    (this.ctx).EndTry(this.label, false);
    (this.ctx).BeginFinally();
    var type = (this.ctx).MapType($T05().__Type__);
    var method = type.GetMethod("Dispose");
    var type2 = (this.local).get_Type();
    if ($T04().IsValueType(type2)) {
      (this.ctx).LoadAddress(this.local, type2);
      if ((((this.ctx).get_MetadataVersion()).valueOf() | 0) === 0) {
        $S02().CallVirtual("LoadValue", null, this.ctx, this.local);
        (this.ctx).CastToObject(type2);
      } else {
        (this.ctx).Constrain(type2);
      }
      (this.ctx).EmitCall(method);
    } else {
      var codeLabel = (this.ctx).DefineLabel();
      if ($S01().CallVirtual("IsAssignableFrom", null, type, type2)) {
        $S02().CallVirtual("LoadValue", null, this.ctx, this.local);
        (this.ctx).BranchIfFalse(codeLabel, true);
        (this.ctx).LoadAddress(this.local, type2);
      } else {
        var local = $S03().Construct(this.ctx, type);
        try {
          $S02().CallVirtual("LoadValue", null, this.ctx, this.local);
          (this.ctx).TryCast(type);
          (this.ctx).CopyValue();
          $S04().CallVirtual("StoreValue", null, this.ctx, local);
          (this.ctx).BranchIfFalse(codeLabel, true);
          (this.ctx).LoadAddress(local, type);
        } finally {
          if (local !== null) {
            $IM00().Call(local, null);
          }
        }
      }
      (this.ctx).EmitCall(method);
      (this.ctx).MarkLabel(codeLabel);
    }
    (this.ctx).EndFinally();
    this.local = null;
    this.ctx = null;
    this.label = new ($T07())();
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Compiler.CompilerContext+UsingBlock", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm08.TypeRef("ProtoBuf.Compiler.Local")]), 
      UsingBlock__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      UsingBlock_Dispose
    );

    $.Field({Static:false, Public:false}, "local", $asm08.TypeRef("ProtoBuf.Compiler.Local"));

    $.Field({Static:false, Public:false}, "ctx", $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"));

    $.Field({Static:false, Public:false}, "label", $asm08.TypeRef("ProtoBuf.Compiler.CodeLabel"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.Compiler.CompilerContext+ILVersion */ 

JSIL.MakeEnum(
  {
    FullName: "ProtoBuf.Compiler.CompilerContext+ILVersion", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Net1: 0, 
    Net2: 1, 
  }
);

/* delegate ProtoBuf.Compiler.ProtoSerializer */ 

JSIL.MakeDelegate("ProtoBuf.Compiler.ProtoSerializer", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm08.TypeRef("ProtoBuf.ProtoWriter")]));

/* delegate ProtoBuf.Compiler.ProtoDeserializer */ 

JSIL.MakeDelegate("ProtoBuf.Compiler.ProtoDeserializer", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Object"), [$asm07.TypeRef("System.Object"), $asm08.TypeRef("ProtoBuf.ProtoReader")]));

/* class ProtoBuf.Compiler.Local */ 

(function Local$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Reflection.Emit.LocalBuilder)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Compiler.CompilerContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.ObjectDisposedException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.ProtoBuf.Compiler.Local, [$asm07.System.Reflection.Emit.LocalBuilder, $asm07.System.Type]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.System.ObjectDisposedException, [$asm07.System.String]))) ();
  };


  function Local__ctor$00 (value, type) {
    this.value = value;
    this.type = type;
  }; 

  function Local__ctor$01 (ctx, type) {
    this.ctx = ctx;
    if (ctx !== null) {
      this.value = ctx.GetFromPool(type);
    }
    this.type = type;
  }; 

  function Local_AsCopy () {
    if (this.ctx === null) {
      return this;
    }
    return $S00().Construct(this.value, this.type);
  }; 

  function Local_Dispose () {
    if (this.ctx !== null) {
      (this.ctx).ReleaseToPool(this.value);
      this.value = null;
      this.ctx = null;
    }
  }; 

  function Local_get_Type () {
    return this.type;
  }; 

  function Local_get_Value () {
    if (this.value === null) {
      throw $S01().Construct((JSIL.GetType(this)).get_Name());
    }
    return this.value;
  }; 

  function Local_IsSame (other) {
    if (this === other) {
      return true;
    }
    var obj = this.value;
    return ((other !== null) && (obj === other.value));
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Compiler.Local", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm07.TypeRef("System.Type")]), 
      Local__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"), $asm07.TypeRef("System.Type")]), 
      Local__ctor$01
    );

    $.Method({Static:false, Public:true }, "AsCopy", 
      JSIL.MethodSignature.Return($.Type), 
      Local_AsCopy
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void, 
      Local_Dispose
    );

    $.Method({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type")), 
      Local_get_Type
    );

    $.Method({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Emit.LocalBuilder")), 
      Local_get_Value
    );

    $.Method({Static:false, Public:false}, "IsSame", 
      new JSIL.MethodSignature($.Boolean, [$.Type]), 
      Local_IsSame
    );

    $.Field({Static:false, Public:false}, "value", $asm07.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:false}, "ctx", $asm08.TypeRef("ProtoBuf.Compiler.CompilerContext"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Value", $asm07.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

