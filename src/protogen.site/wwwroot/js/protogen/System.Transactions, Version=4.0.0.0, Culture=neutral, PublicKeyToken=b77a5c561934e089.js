/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm27 = JSIL.DeclareAssembly("System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

JSIL.DeclareNamespace("System");
/* class System.TelemetryEventSource */ 

(function TelemetryEventSource$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Diagnostics.Tracing.EventSource"), 
      Name: "System.TelemetryEventSource", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CriticalDataOptions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Tracing.EventSourceOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalTransaction", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.Tracing.EventAttribute"), function () { return [1]; });

    $.ExternalMethod({Static:true , Public:false}, "MeasuresOptions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Tracing.EventSourceOptions"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TelemetryOptions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Diagnostics.Tracing.EventSourceOptions"))
    );

    $.Constant({Static:true , Public:false}, "Reserved44Keyword", $asm07.TypeRef("System.Diagnostics.Tracing.EventKeywords"), 17592186044416);

    $.Constant({Static:true , Public:false}, "TelemetryKeyword", $asm07.TypeRef("System.Diagnostics.Tracing.EventKeywords"), 35184372088832);

    $.Constant({Static:true , Public:false}, "MeasuresKeyword", $asm07.TypeRef("System.Diagnostics.Tracing.EventKeywords"), 70368744177664);

    $.Constant({Static:true , Public:false}, "CriticalDataKeyword", $asm07.TypeRef("System.Diagnostics.Tracing.EventKeywords"), 140737488355328);

    $.Constant({Static:true , Public:false}, "CoreData", $asm07.TypeRef("System.Diagnostics.Tracing.EventTags"), 524288);

    $.Constant({Static:true , Public:false}, "InjectXToken", $asm07.TypeRef("System.Diagnostics.Tracing.EventTags"), 1048576);

    $.Constant({Static:true , Public:false}, "RealtimeLatency", $asm07.TypeRef("System.Diagnostics.Tracing.EventTags"), 2097152);

    $.Constant({Static:true , Public:false}, "NormalLatency", $asm07.TypeRef("System.Diagnostics.Tracing.EventTags"), 4194304);

    $.Constant({Static:true , Public:false}, "CriticalPersistence", $asm07.TypeRef("System.Diagnostics.Tracing.EventTags"), 8388608);

    $.Constant({Static:true , Public:false}, "NormalPersistence", $asm07.TypeRef("System.Diagnostics.Tracing.EventTags"), 16777216);

    $.Constant({Static:true , Public:false}, "DropPii", $asm07.TypeRef("System.Diagnostics.Tracing.EventTags"), 33554432);

    $.Constant({Static:true , Public:false}, "HashPii", $asm07.TypeRef("System.Diagnostics.Tracing.EventTags"), 67108864);

    $.Constant({Static:true , Public:false}, "MarkPii", $asm07.TypeRef("System.Diagnostics.Tracing.EventTags"), 134217728);

    $.Constant({Static:true , Public:false}, "DropPiiField", $asm07.TypeRef("System.Diagnostics.Tracing.EventFieldTags"), 67108864);

    $.Constant({Static:true , Public:false}, "HashPiiField", $asm07.TypeRef("System.Diagnostics.Tracing.EventFieldTags"), 134217728);

    $.Field({Static:true , Public:false, ReadOnly:true }, "telemetryTraits", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Constant({Static:true , Public:false}, "TxProviderName", $.String, "Microsoft.DOTNET.System.Transactions");

    $.Constant({Static:true , Public:false}, "InternalTransactionEventId", $.Int32, 1);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Configuration");
/* class System.Configuration.PrivilegedConfigurationManager */ 

(function PrivilegedConfigurationManager$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Configuration.PrivilegedConfigurationManager", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_ConnectionStrings", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConnectionStringSettingsCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.Property({Static:true , Public:false}, "ConnectionStrings", $asm0E.TypeRef("System.Configuration.ConnectionStringSettingsCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Transactions");
/* enum System.Transactions.EnterpriseServicesState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.EnterpriseServicesState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Available: -1, 
    Unknown: 0, 
    Unavailable: 1, 
  }
);

/* class System.Transactions.TransactionEventArgs */ 

(function TransactionEventArgs$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "System.Transactions.TransactionEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Transaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.Field({Static:false, Public:false}, "transaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Property({Static:false, Public:true }, "Transaction", $asm27.TypeRef("System.Transactions.Transaction"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Transactions.TransactionCompletedEventHandler */ 

JSIL.MakeDelegate("System.Transactions.TransactionCompletedEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm27.TypeRef("System.Transactions.TransactionEventArgs")]));

/* enum System.Transactions.IsolationLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.IsolationLevel", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Serializable: 0, 
    RepeatableRead: 1, 
    ReadCommitted: 2, 
    ReadUncommitted: 3, 
    Snapshot: 4, 
    Chaos: 5, 
    Unspecified: 6, 
  }
);

/* enum System.Transactions.TransactionStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.TransactionStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Active: 0, 
    Committed: 1, 
    Aborted: 2, 
    InDoubt: 3, 
  }
);

/* enum System.Transactions.DependentCloneOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.DependentCloneOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    BlockCommitUntilComplete: 0, 
    RollbackIfNotComplete: 1, 
  }
);

/* enum System.Transactions.EnlistmentOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.EnlistmentOptions", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    EnlistDuringPrepareRequired: 1, 
  }
);

/* class System.Transactions.Transaction */ 

(function Transaction$Members () {
  var $, $thisType;













































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Transaction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.IsolationLevel"), $asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.IsolationLevel"), $asm27.TypeRef("System.Transactions.ISimpleTransactionSuperior")])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_TransactionCompleted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionCompletedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "DependentClone", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.DependentTransaction"), [$asm27.TypeRef("System.Transactions.DependentCloneOption")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm07.TypeRef("System.Guid"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm07.TypeRef("System.Guid"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnlistPromotableSinglePhase", 
      new JSIL.MethodSignature($.Boolean, [$asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnlistPromotableSinglePhase", 
      new JSIL.MethodSignature($.Boolean, [$asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [$asm27.TypeRef("System.Transactions.IEnlistmentNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [$asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FastGetTransaction", 
      new JSIL.MethodSignature($.Type, [
          $asm27.TypeRef("System.Transactions.TransactionScope"), $asm27.TypeRef("System.Transactions.ContextData"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Disposed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DistributedTxId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EnterpriseServicesOk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsolationLevel", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.IsolationLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PromoterType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionInformation", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionInformation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionTraceId", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetContextTransaction", 
      new JSIL.MethodSignature($.Type, [$asm27.TypeRef("System.Transactions.ContextData")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentTransactionAndScope", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.TxLookup"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.TransactionScope")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPromotedToken", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalClone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalDispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "InteropMode", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.EnterpriseServicesInteropOption"), [$asm27.TypeRef("System.Transactions.TransactionScope")])
    );

    $.ExternalMethod({Static:true , Public:false}, "JitSafeGetContextTransaction", 
      new JSIL.MethodSignature($.Type, [$asm27.TypeRef("System.Transactions.ContextData")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "Promote", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "PromoteAndEnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm07.TypeRef("System.Guid"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_TransactionCompleted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionCompletedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Rollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:true }, "set_Current", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetDistributedTransactionIdentifier", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm07.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:true , Public:false}, "UseServiceDomainForCurrent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyEnterpriseServicesOk", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "_enterpriseServicesOk", $asm27.TypeRef("System.Transactions.EnterpriseServicesState"), function ($pi) {
        return $asm27.System.Transactions.EnterpriseServicesState.Unknown;
      });

    $.Field({Static:true , Public:false}, "IID_IObjContext", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "isoLevel", $asm27.TypeRef("System.Transactions.IsolationLevel"));

    $.Field({Static:false, Public:false}, "complete", $.Boolean);

    $.Field({Static:false, Public:false}, "cloneId", $.Int32);

    $.Constant({Static:true , Public:false}, "disposedTrueValue", $.Int32, 1);

    $.Field({Static:false, Public:false}, "disposed", $.Int32);

    $.Field({Static:false, Public:false}, "internalTransaction", $asm27.TypeRef("System.Transactions.InternalTransaction"));

    $.Field({Static:false, Public:false}, "traceIdentifier", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));


    function Transaction__cctor () {
      $thisType.IID_IObjContext = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Transaction__cctor
    );

    $.Property({Static:true , Public:false}, "EnterpriseServicesOk", $.Boolean);

    $.Property({Static:true , Public:true }, "Current", $.Type);

    $.Property({Static:false, Public:false}, "Disposed", $.Boolean);

    $.Property({Static:false, Public:false}, "DistributedTxId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "TransactionInformation", $asm27.TypeRef("System.Transactions.TransactionInformation"));

    $.Property({Static:false, Public:true }, "IsolationLevel", $asm27.TypeRef("System.Transactions.IsolationLevel"));

    $.Property({Static:false, Public:true }, "PromoterType", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "TransactionTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Event({Static:false, Public:true }, "TransactionCompleted", $asm27.TypeRef("System.Transactions.TransactionCompletedEventHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable"), 
      /* 1 */ $asm07.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Transactions.DefaultComContextState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.DefaultComContextState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unavailable: -1, 
    Unknown: 0, 
    Available: 1, 
  }
);

/* class System.Transactions.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Transactions.NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "CoGetContextToken", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])), 
      {
        Module: "Ole32", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CoGetDefaultContext", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.SafeIUnknown")])
        ]), 
      {
        Module: "Ole32", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* enum System.Transactions.TxLookup */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.TxLookup", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    DefaultCallContext: 1, 
    DefaultTLS: 2, 
  }
);

/* class System.Transactions.CallContextCurrentData */ 

(function CallContextCurrentData$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Transactions.CallContextCurrentData", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ClearCurrentData", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.ContextKey"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateOrGetCurrentData", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.ContextData"), [$asm27.TypeRef("System.Transactions.ContextKey")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryGetCurrentData", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.ContextData")])])
    );

    $.Field({Static:true , Public:false}, "CurrentTransactionProperty", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "ContextDataTable", $asm07.TypeRef("System.Runtime.CompilerServices.ConditionalWeakTable`2", [$asm27.TypeRef("System.Transactions.ContextKey"), $asm27.TypeRef("System.Transactions.ContextData")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.CallContextCurrentData+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.CallContextCurrentData+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateOrGetCurrentData$gb__2_0", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.ContextData"), [$asm27.TypeRef("System.Transactions.ContextKey")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__2_0", $asm07.TypeRef("System.Runtime.CompilerServices.ConditionalWeakTable`2+CreateValueCallback", [$asm27.TypeRef("System.Transactions.ContextKey"), $asm27.TypeRef("System.Transactions.ContextData")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Transactions.ContextKey */ 

(function ContextKey$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "System.Transactions.ContextKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.ContextData */ 

(function ContextData$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.ContextData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TLSCurrentData", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupContextData", 
      new JSIL.MethodSignature($.Type, [$asm27.TypeRef("System.Transactions.TxLookup")])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_TLSCurrentData", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false}, "CurrentScope", $asm27.TypeRef("System.Transactions.TransactionScope"));

    $.Field({Static:false, Public:false}, "CurrentTransaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Field({Static:false, Public:false}, "DefaultComContextState", $asm27.TypeRef("System.Transactions.DefaultComContextState"));

    $.Field({Static:false, Public:false}, "WeakDefaultComContext", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "asyncFlow", $.Boolean);

    $.Field({Static:true , Public:false}, "staticData", $.Type)
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.Property({Static:true , Public:false}, "TLSCurrentData", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionInformation */ 

(function TransactionInformation$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.TransactionInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreationTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DistributedIdentifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalIdentifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatus"))
    );

    $.Field({Static:false, Public:false}, "internalTransaction", $asm27.TypeRef("System.Transactions.InternalTransaction"));

    $.Property({Static:false, Public:true }, "LocalIdentifier", $.String);

    $.Property({Static:false, Public:true }, "DistributedIdentifier", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "CreationTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "Status", $asm27.TypeRef("System.Transactions.TransactionStatus"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.DependentTransaction */ 

(function DependentTransaction$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Transaction"), 
      Name: "System.Transactions.DependentTransaction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.IsolationLevel"), $asm27.TypeRef("System.Transactions.InternalTransaction"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Complete", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "blocking", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.CommittableTransaction */ 

(function CommittableTransaction$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Transaction"), 
      Name: "System.Transactions.CommittableTransaction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.IsolationLevel"), $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginCommit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Commit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "EndCommit", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalDispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_AsyncState", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.IAsyncResult"), "get_AsyncState");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.WaitHandle"))
    )
      .Overrides($asm07.TypeRef("System.IAsyncResult"), "get_AsyncWaitHandle");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_CompletedSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.IAsyncResult"), "get_CompletedSynchronously");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.IAsyncResult"), "get_IsCompleted");

    $.Field({Static:false, Public:false}, "completedSynchronously", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.AsyncState", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.CompletedSynchronously", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.AsyncWaitHandle", $asm07.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.IsCompleted", $.Boolean);

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.IAsyncResult")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.InternalTransaction */ 

(function InternalTransaction$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.InternalTransaction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.TimeSpan"), $asm27.TypeRef("System.Transactions.CommittableTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Transaction"), $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Transaction"), $asm27.TypeRef("System.Transactions.ITransactionPromoter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DistributedTransactionOutcome", 
      new JSIL.MethodSignature(null, [$.Type, $asm27.TypeRef("System.Transactions.TransactionStatus")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FireCompletion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AbsoluteTimeout", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CreationTime", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DistributedTxId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InstanceIdentifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PromotedTransaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_State", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionHash", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionTraceId", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CreationTime", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PromotedTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_State", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPromoterTypeToMSDTC", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SignalAsyncCompletion", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfPromoterTypeIsNotMSDTC", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "transactionState", $asm27.TypeRef("System.Transactions.TransactionState"));

    $.Field({Static:false, Public:false}, "promoteState", $asm27.TypeRef("System.Transactions.TransactionState"));

    $.Field({Static:false, Public:false}, "promoterType", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "promotedToken", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "distributedTransactionIdentifierNonMSDTC", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "finalizedObject", $asm27.TypeRef("System.Transactions.FinalizedObject"));

    $.Field({Static:false, Public:false}, "transactionHash", $.Int32);

    $.Field({Static:true , Public:false}, "nextHash", $.Int32);

    $.Field({Static:false, Public:false}, "absoluteTimeout", $.Int64);

    $.Field({Static:false, Public:false}, "creationTime", $.Int64);

    $.Field({Static:false, Public:false}, "durableEnlistment", $asm27.TypeRef("System.Transactions.InternalEnlistment"));

    $.Field({Static:false, Public:false}, "phase0Volatiles", $asm27.TypeRef("System.Transactions.VolatileEnlistmentSet"));

    $.Field({Static:false, Public:false}, "phase1Volatiles", $asm27.TypeRef("System.Transactions.VolatileEnlistmentSet"));

    $.Field({Static:false, Public:false}, "phase0VolatileWaveCount", $.Int32);

    $.Field({Static:false, Public:false}, "phase0WaveDependentClone", $asm27.TypeRef("System.Transactions.Oletx.OletxDependentTransaction"));

    $.Field({Static:false, Public:false}, "phase0WaveDependentCloneCount", $.Int32);

    $.Field({Static:false, Public:false}, "abortingDependentClone", $asm27.TypeRef("System.Transactions.Oletx.OletxDependentTransaction"));

    $.Field({Static:false, Public:false}, "abortingDependentCloneCount", $.Int32);

    $.Constant({Static:true , Public:false}, "volatileArrayIncrement", $.Int32, 8);

    $.Field({Static:false, Public:false}, "tableBucket", $asm27.TypeRef("System.Transactions.Bucket"));

    $.Field({Static:false, Public:false}, "bucketIndex", $.Int32);

    $.Field({Static:false, Public:false}, "transactionCompletedDelegate", $asm27.TypeRef("System.Transactions.TransactionCompletedEventHandler"));

    $.Field({Static:false, Public:false}, "promotedTransaction", $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"));

    $.Field({Static:false, Public:false}, "innerException", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "cloneCount", $.Int32);

    $.Field({Static:false, Public:false}, "enlistmentCount", $.Int32);

    $.Field({Static:false, Public:false}, "asyncResultEvent", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "asyncCommit", $.Boolean);

    $.Field({Static:false, Public:false}, "asyncCallback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "asyncState", $.Object);

    $.Field({Static:false, Public:false}, "needPulse", $.Boolean);

    $.Field({Static:false, Public:false}, "transactionInformation", $asm27.TypeRef("System.Transactions.TransactionInformation"));

    $.Field({Static:false, Public:false}, "committableTransaction", $asm27.TypeRef("System.Transactions.CommittableTransaction"));

    $.Field({Static:false, Public:false}, "outcomeSource", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Field({Static:true , Public:false}, "instanceIdentifier", $asm07.TypeRef("System.String"));

    $.Field({Static:false, Public:false}, "traceIdentifierInited", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "traceIdentifier", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "promoter", $asm27.TypeRef("System.Transactions.ITransactionPromoter"));

    $.Field({Static:false, Public:false}, "attemptingPSPEPromote", $.Boolean);

    $.Property({Static:false, Public:false}, "State", $asm27.TypeRef("System.Transactions.TransactionState"));

    $.Property({Static:false, Public:false}, "TransactionHash", $.Int32);

    $.Property({Static:false, Public:false}, "AbsoluteTimeout", $.Int64);

    $.Property({Static:false, Public:false}, "CreationTime", $.Int64);

    $.Property({Static:false, Public:false}, "PromotedTransaction", $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"));

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);

    $.Property({Static:false, Public:false}, "DistributedTxId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:true , Public:false}, "InstanceIdentifier", $.String);

    $.Property({Static:false, Public:false}, "TransactionTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.FinalizedObject */ 

(function FinalizedObject$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.FinalizedObject", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.Field({Static:false, Public:false}, "identifier", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "internalTransaction", $asm27.TypeRef("System.Transactions.InternalTransaction"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionState */ 

(function TransactionState$Members () {
  var $, $thisType;













































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.TransactionState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddOutcomeRegistrant", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.TransactionCompletedEventHandler")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddVolatileEnlistment", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.VolatileEnlistmentSet")]), $asm27.TypeRef("System.Transactions.Enlistment")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateAbortedDuringPromotion", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedCommitted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedPhase0", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedPhase1", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionCommitted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckForFinishedTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CommonEnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompleteAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompleteBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContinuePhase0Prepares", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContinuePhase1Prepares", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DisposeRoot", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndCommit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistPromotableSinglePhase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.Transaction"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateAborted", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateAborted"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateActive", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateActive"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateCommitted", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateCommitted"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateDelegated", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateDelegated"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateDelegatedAborting", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateDelegatedAborting"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateDelegatedCommitting", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateDelegatedCommitting"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateDelegatedNonMSDTC", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateDelegatedNonMSDTC"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateDelegatedP0Wave", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateDelegatedP0Wave"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateDelegatedSubordinate", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateDelegatedSubordinate"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateInDoubt", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateInDoubt"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateNonCommittablePromoted", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateNonCommittablePromoted"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePhase0", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePhase0"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromoted", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromoted"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedAborted", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedAborted"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedCommitted", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedCommitted"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedCommitting", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedCommitting"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedIndoubt", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedIndoubt"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedNonMSDTCAborted", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCAborted"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedNonMSDTCCommitted", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCCommitted"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedNonMSDTCIndoubt", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCIndoubt"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedNonMSDTCPhase0", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCPhase0"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedNonMSDTCSinglePhaseCommit", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCSinglePhaseCommit"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedNonMSDTCVolatilePhase1", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCVolatilePhase1"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedP0Aborting", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedP0Aborting"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedP0Wave", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedP0Wave"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedP1Aborting", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedP1Aborting"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedPhase0", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedPhase0"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePromotedPhase1", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePromotedPhase1"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStatePSPEOperation", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatePSPEOperation"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateSPC", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateSPC"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateSubordinateActive", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateSubordinateActive"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateVolatilePhase1", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateVolatilePhase1"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__TransactionStateVolatileSPC", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStateVolatileSPC"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Identifier", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromDtc", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsCompleted", 
      new JSIL.MethodSignature($.Boolean, [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase0VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase1VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Promote", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromoteAndEnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromotedToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RestartCommitIfNeeded", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetDistributedTransactionId", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Timeout", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.Field({Static:true , Public:false}, "_transactionStateActive", $asm27.TypeRef("System.Transactions.TransactionStateActive"));

    $.Field({Static:true , Public:false}, "_transactionStateSubordinateActive", $asm27.TypeRef("System.Transactions.TransactionStateSubordinateActive"));

    $.Field({Static:true , Public:false}, "_transactionStatePhase0", $asm27.TypeRef("System.Transactions.TransactionStatePhase0"));

    $.Field({Static:true , Public:false}, "_transactionStateVolatilePhase1", $asm27.TypeRef("System.Transactions.TransactionStateVolatilePhase1"));

    $.Field({Static:true , Public:false}, "_transactionStateVolatileSPC", $asm27.TypeRef("System.Transactions.TransactionStateVolatileSPC"));

    $.Field({Static:true , Public:false}, "_transactionStateSPC", $asm27.TypeRef("System.Transactions.TransactionStateSPC"));

    $.Field({Static:true , Public:false}, "_transactionStateAborted", $asm27.TypeRef("System.Transactions.TransactionStateAborted"));

    $.Field({Static:true , Public:false}, "_transactionStateCommitted", $asm27.TypeRef("System.Transactions.TransactionStateCommitted"));

    $.Field({Static:true , Public:false}, "_transactionStateInDoubt", $asm27.TypeRef("System.Transactions.TransactionStateInDoubt"));

    $.Field({Static:true , Public:false}, "_transactionStatePromoted", $asm27.TypeRef("System.Transactions.TransactionStatePromoted"));

    $.Field({Static:true , Public:false}, "_transactionStateNonCommittablePromoted", $asm27.TypeRef("System.Transactions.TransactionStateNonCommittablePromoted"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedP0Wave", $asm27.TypeRef("System.Transactions.TransactionStatePromotedP0Wave"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedCommitting", $asm27.TypeRef("System.Transactions.TransactionStatePromotedCommitting"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedPhase0", $asm27.TypeRef("System.Transactions.TransactionStatePromotedPhase0"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedPhase1", $asm27.TypeRef("System.Transactions.TransactionStatePromotedPhase1"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedP0Aborting", $asm27.TypeRef("System.Transactions.TransactionStatePromotedP0Aborting"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedP1Aborting", $asm27.TypeRef("System.Transactions.TransactionStatePromotedP1Aborting"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedAborted", $asm27.TypeRef("System.Transactions.TransactionStatePromotedAborted"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedCommitted", $asm27.TypeRef("System.Transactions.TransactionStatePromotedCommitted"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedIndoubt", $asm27.TypeRef("System.Transactions.TransactionStatePromotedIndoubt"));

    $.Field({Static:true , Public:false}, "_transactionStateDelegated", $asm27.TypeRef("System.Transactions.TransactionStateDelegated"));

    $.Field({Static:true , Public:false}, "_transactionStateDelegatedSubordinate", $asm27.TypeRef("System.Transactions.TransactionStateDelegatedSubordinate"));

    $.Field({Static:true , Public:false}, "_transactionStateDelegatedP0Wave", $asm27.TypeRef("System.Transactions.TransactionStateDelegatedP0Wave"));

    $.Field({Static:true , Public:false}, "_transactionStateDelegatedCommitting", $asm27.TypeRef("System.Transactions.TransactionStateDelegatedCommitting"));

    $.Field({Static:true , Public:false}, "_transactionStateDelegatedAborting", $asm27.TypeRef("System.Transactions.TransactionStateDelegatedAborting"));

    $.Field({Static:true , Public:false}, "_transactionStatePSPEOperation", $asm27.TypeRef("System.Transactions.TransactionStatePSPEOperation"));

    $.Field({Static:true , Public:false}, "_transactionStateDelegatedNonMSDTC", $asm27.TypeRef("System.Transactions.TransactionStateDelegatedNonMSDTC"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedNonMSDTCPhase0", $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCPhase0"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedNonMSDTCVolatilePhase1", $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCVolatilePhase1"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedNonMSDTCSinglePhaseCommit", $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCSinglePhaseCommit"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedNonMSDTCAborted", $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCAborted"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedNonMSDTCCommitted", $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCCommitted"));

    $.Field({Static:true , Public:false}, "_transactionStatePromotedNonMSDTCIndoubt", $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCIndoubt"));

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "_TransactionStateActive", $asm27.TypeRef("System.Transactions.TransactionStateActive"));

    $.Property({Static:true , Public:false}, "_TransactionStateSubordinateActive", $asm27.TypeRef("System.Transactions.TransactionStateSubordinateActive"));

    $.Property({Static:true , Public:false}, "_TransactionStatePSPEOperation", $asm27.TypeRef("System.Transactions.TransactionStatePSPEOperation"));

    $.Property({Static:true , Public:false}, "_TransactionStatePhase0", $asm27.TypeRef("System.Transactions.TransactionStatePhase0"));

    $.Property({Static:true , Public:false}, "_TransactionStateVolatilePhase1", $asm27.TypeRef("System.Transactions.TransactionStateVolatilePhase1"));

    $.Property({Static:true , Public:false}, "_TransactionStateVolatileSPC", $asm27.TypeRef("System.Transactions.TransactionStateVolatileSPC"));

    $.Property({Static:true , Public:false}, "_TransactionStateSPC", $asm27.TypeRef("System.Transactions.TransactionStateSPC"));

    $.Property({Static:true , Public:false}, "_TransactionStateAborted", $asm27.TypeRef("System.Transactions.TransactionStateAborted"));

    $.Property({Static:true , Public:false}, "_TransactionStateCommitted", $asm27.TypeRef("System.Transactions.TransactionStateCommitted"));

    $.Property({Static:true , Public:false}, "_TransactionStateInDoubt", $asm27.TypeRef("System.Transactions.TransactionStateInDoubt"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromoted", $asm27.TypeRef("System.Transactions.TransactionStatePromoted"));

    $.Property({Static:true , Public:false}, "_TransactionStateNonCommittablePromoted", $asm27.TypeRef("System.Transactions.TransactionStateNonCommittablePromoted"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedP0Wave", $asm27.TypeRef("System.Transactions.TransactionStatePromotedP0Wave"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedCommitting", $asm27.TypeRef("System.Transactions.TransactionStatePromotedCommitting"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedPhase0", $asm27.TypeRef("System.Transactions.TransactionStatePromotedPhase0"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedPhase1", $asm27.TypeRef("System.Transactions.TransactionStatePromotedPhase1"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedP0Aborting", $asm27.TypeRef("System.Transactions.TransactionStatePromotedP0Aborting"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedP1Aborting", $asm27.TypeRef("System.Transactions.TransactionStatePromotedP1Aborting"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedAborted", $asm27.TypeRef("System.Transactions.TransactionStatePromotedAborted"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedCommitted", $asm27.TypeRef("System.Transactions.TransactionStatePromotedCommitted"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedIndoubt", $asm27.TypeRef("System.Transactions.TransactionStatePromotedIndoubt"));

    $.Property({Static:true , Public:false}, "_TransactionStateDelegated", $asm27.TypeRef("System.Transactions.TransactionStateDelegated"));

    $.Property({Static:true , Public:false}, "_TransactionStateDelegatedSubordinate", $asm27.TypeRef("System.Transactions.TransactionStateDelegatedSubordinate"));

    $.Property({Static:true , Public:false}, "_TransactionStateDelegatedP0Wave", $asm27.TypeRef("System.Transactions.TransactionStateDelegatedP0Wave"));

    $.Property({Static:true , Public:false}, "_TransactionStateDelegatedCommitting", $asm27.TypeRef("System.Transactions.TransactionStateDelegatedCommitting"));

    $.Property({Static:true , Public:false}, "_TransactionStateDelegatedAborting", $asm27.TypeRef("System.Transactions.TransactionStateDelegatedAborting"));

    $.Property({Static:true , Public:false}, "_TransactionStateDelegatedNonMSDTC", $asm27.TypeRef("System.Transactions.TransactionStateDelegatedNonMSDTC"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedNonMSDTCPhase0", $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCPhase0"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedNonMSDTCVolatilePhase1", $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCVolatilePhase1"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedNonMSDTCSinglePhaseCommit", $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCSinglePhaseCommit"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedNonMSDTCAborted", $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCAborted"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedNonMSDTCCommitted", $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCCommitted"));

    $.Property({Static:true , Public:false}, "_TransactionStatePromotedNonMSDTCIndoubt", $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCIndoubt"));

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.ActiveStates */ 

(function ActiveStates$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionState"), 
      Name: "System.Transactions.ActiveStates", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddOutcomeRegistrant", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.TransactionCompletedEventHandler")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.EnlistableStates */ 

(function EnlistableStates$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.ActiveStates"), 
      Name: "System.Transactions.EnlistableStates", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompleteAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompleteBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Promote", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromotedToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Timeout", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateActive */ 

(function TransactionStateActive$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.EnlistableStates"), 
      Name: "System.Transactions.TransactionStateActive", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DisposeRoot", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistPromotableSinglePhase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.Transaction"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase0VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase1VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateSubordinateActive */ 

(function TransactionStateSubordinateActive$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStateActive"), 
      Name: "System.Transactions.TransactionStateSubordinateActive", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddOutcomeRegistrant", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.TransactionCompletedEventHandler")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistPromotableSinglePhase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.Transaction"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePhase0 */ 

(function TransactionStatePhase0$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.EnlistableStates"), 
      Name: "System.Transactions.TransactionStatePhase0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContinuePhase0Prepares", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistPromotableSinglePhase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.Transaction"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase0VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase1VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Promote", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RestartCommitIfNeeded", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateVolatilePhase1 */ 

(function TransactionStateVolatilePhase1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.ActiveStates"), 
      Name: "System.Transactions.TransactionStateVolatilePhase1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContinuePhase1Prepares", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase1VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Timeout", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateVolatileSPC */ 

(function TransactionStateVolatileSPC$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.ActiveStates"), 
      Name: "System.Transactions.TransactionStateVolatileSPC", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionCommitted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateSPC */ 

(function TransactionStateSPC$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.ActiveStates"), 
      Name: "System.Transactions.TransactionStateSPC", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionCommitted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateEnded */ 

(function TransactionStateEnded$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionState"), 
      Name: "System.Transactions.TransactionStateEnded", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddOutcomeRegistrant", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.TransactionCompletedEventHandler")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsCompleted", 
      new JSIL.MethodSignature($.Boolean, [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateAborted */ 

(function TransactionStateAborted$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStateEnded"), 
      Name: "System.Transactions.TransactionStateAborted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateAbortedDuringPromotion", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckForFinishedTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTransactionAbortedException", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionException"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndCommit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase0VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase1VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RestartCommitIfNeeded", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Timeout", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateCommitted */ 

(function TransactionStateCommitted$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStateEnded"), 
      Name: "System.Transactions.TransactionStateCommitted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndCommit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateInDoubt */ 

(function TransactionStateInDoubt$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStateEnded"), 
      Name: "System.Transactions.TransactionStateInDoubt", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckForFinishedTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndCommit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedBase */ 

(function TransactionStatePromotedBase$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionState"), 
      Name: "System.Transactions.TransactionStatePromotedBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddOutcomeRegistrant", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.TransactionCompletedEventHandler")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateAbortedDuringPromotion", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedCommitted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompleteAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompleteBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContinuePhase0Prepares", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistPromotableSinglePhase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.Transaction"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Identifier", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromDtc", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase0VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase1VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Promote", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromotedToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RestartCommitIfNeeded", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Timeout", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateNonCommittablePromoted */ 

(function TransactionStateNonCommittablePromoted$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedBase"), 
      Name: "System.Transactions.TransactionStateNonCommittablePromoted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromoted */ 

(function TransactionStatePromoted$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedBase"), 
      Name: "System.Transactions.TransactionStatePromoted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DisposeRoot", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromoteDurable", 
      new JSIL.MethodSignature($.Boolean, [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromoteEnlistmentsAndOutcome", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PromotePhaseVolatiles", 
      new JSIL.MethodSignature($.Boolean, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.VolatileEnlistmentSet")]), 
          $.Boolean
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedP0Wave */ 

(function TransactionStatePromotedP0Wave$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedBase"), 
      Name: "System.Transactions.TransactionStatePromotedP0Wave", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContinuePhase0Prepares", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase0VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedCommitting */ 

(function TransactionStatePromotedCommitting$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedBase"), 
      Name: "System.Transactions.TransactionStatePromotedCommitting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedPhase0", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedPhase1", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedPhase0 */ 

(function TransactionStatePromotedPhase0$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedCommitting"), 
      Name: "System.Transactions.TransactionStatePromotedPhase0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContinuePhase0Prepares", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase0VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedPhase1 */ 

(function TransactionStatePromotedPhase1$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedCommitting"), 
      Name: "System.Transactions.TransactionStatePromotedPhase1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContinuePhase1Prepares", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase1VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedAborting */ 

(function TransactionStatePromotedAborting$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedBase"), 
      Name: "System.Transactions.TransactionStatePromotedAborting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RestartCommitIfNeeded", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedP0Aborting */ 

(function TransactionStatePromotedP0Aborting$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedAborting"), 
      Name: "System.Transactions.TransactionStatePromotedP0Aborting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase0VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedP1Aborting */ 

(function TransactionStatePromotedP1Aborting$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedAborting"), 
      Name: "System.Transactions.TransactionStatePromotedP1Aborting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase1VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedEnded */ 

(function TransactionStatePromotedEnded$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStateEnded"), 
      Name: "System.Transactions.TransactionStatePromotedEnded", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddOutcomeRegistrant", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.TransactionCompletedEventHandler")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompleteAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompleteBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndCommit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Identifier", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SignalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.WaitCallback"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Promote", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromotedTransactionOutcome", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SignalCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:true , Public:false}, "signalMethod", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.Property({Static:true , Public:false}, "SignalMethod", $asm07.TypeRef("System.Threading.WaitCallback"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedAborted */ 

(function TransactionStatePromotedAborted$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedEnded"), 
      Name: "System.Transactions.TransactionStatePromotedAborted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedPhase0", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedPhase1", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckForFinishedTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromDtc", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase0VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase1VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromotedTransactionOutcome", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RestartCommitIfNeeded", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedCommitted */ 

(function TransactionStatePromotedCommitted$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedEnded"), 
      Name: "System.Transactions.TransactionStatePromotedCommitted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedCommitted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromDtc", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromotedTransactionOutcome", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedIndoubt */ 

(function TransactionStatePromotedIndoubt$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedEnded"), 
      Name: "System.Transactions.TransactionStatePromotedIndoubt", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedCommitted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedPhase0", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedPhase1", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckForFinishedTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromDtc", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromotedTransactionOutcome", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RestartCommitIfNeeded", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateDelegatedBase */ 

(function TransactionStateDelegatedBase$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromoted"), 
      Name: "System.Transactions.TransactionStateDelegatedBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateDelegated */ 

(function TransactionStateDelegated$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStateDelegatedBase"), 
      Name: "System.Transactions.TransactionStateDelegated", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromoteDurable", 
      new JSIL.MethodSignature($.Boolean, [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RestartCommitIfNeeded", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedNonMSDTCBase */ 

(function TransactionStatePromotedNonMSDTCBase$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionState"), 
      Name: "System.Transactions.TransactionStatePromotedNonMSDTCBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddOutcomeRegistrant", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.TransactionCompletedEventHandler")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateAbortedDuringPromotion", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompleteAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompleteBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContinuePhase0Prepares", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DisposeRoot", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistPromotableSinglePhase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.Transaction"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Identifier", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase0VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase1VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Promote", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromotedToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Timeout", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedNonMSDTCPhase0 */ 

(function TransactionStatePromotedNonMSDTCPhase0$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCBase"), 
      Name: "System.Transactions.TransactionStatePromotedNonMSDTCPhase0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContinuePhase0Prepares", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase0VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase1VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedNonMSDTCVolatilePhase1 */ 

(function TransactionStatePromotedNonMSDTCVolatilePhase1$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCBase"), 
      Name: "System.Transactions.TransactionStatePromotedNonMSDTCVolatilePhase1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ContinuePhase1Prepares", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistPromotableSinglePhase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.Transaction"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase1VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedNonMSDTCSinglePhaseCommit */ 

(function TransactionStatePromotedNonMSDTCSinglePhaseCommit$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCBase"), 
      Name: "System.Transactions.TransactionStatePromotedNonMSDTCSinglePhaseCommit", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateAbortedDuringPromotion", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionCommitted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistPromotableSinglePhase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.Transaction"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubtFromEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedNonMSDTCEnded */ 

(function TransactionStatePromotedNonMSDTCEnded$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStateEnded"), 
      Name: "System.Transactions.TransactionStatePromotedNonMSDTCEnded", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddOutcomeRegistrant", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.TransactionCompletedEventHandler")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompleteAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompleteBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndCommit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Identifier", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SignalMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.WaitCallback"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Promote", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromotedTransactionOutcome", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SignalCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:true , Public:false}, "signalMethod", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.Property({Static:true , Public:false}, "SignalMethod", $asm07.TypeRef("System.Threading.WaitCallback"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedNonMSDTCAborted */ 

(function TransactionStatePromotedNonMSDTCAborted$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCEnded"), 
      Name: "System.Transactions.TransactionStatePromotedNonMSDTCAborted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateTransactionAborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckForFinishedTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase0VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase1VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromotedTransactionOutcome", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedNonMSDTCCommitted */ 

(function TransactionStatePromotedNonMSDTCCommitted$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCEnded"), 
      Name: "System.Transactions.TransactionStatePromotedNonMSDTCCommitted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromotedTransactionOutcome", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePromotedNonMSDTCIndoubt */ 

(function TransactionStatePromotedNonMSDTCIndoubt$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCEnded"), 
      Name: "System.Transactions.TransactionStatePromotedNonMSDTCIndoubt", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedPhase0", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedPhase1", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckForFinishedTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAbortingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateBlockingClone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromotedTransactionOutcome", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateDelegatedNonMSDTC */ 

(function TransactionStateDelegatedNonMSDTC$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedNonMSDTCBase"), 
      Name: "System.Transactions.TransactionStateDelegatedNonMSDTC", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateDelegatedSubordinate */ 

(function TransactionStateDelegatedSubordinate$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStateDelegatedBase"), 
      Name: "System.Transactions.TransactionStateDelegatedSubordinate", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedPhase0", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedPhase1", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromoteDurable", 
      new JSIL.MethodSignature($.Boolean, [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStatePSPEOperation */ 

(function TransactionStatePSPEOperation$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionState"), 
      Name: "System.Transactions.TransactionStatePSPEOperation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Status", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.TransactionStatus"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Phase0PSPEInitialize", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PromoteAndEnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PSPEInitialize", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PSPEPromote", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetDistributedTransactionId", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm07.TypeRef("System.Guid")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateDelegatedP0Wave */ 

(function TransactionStateDelegatedP0Wave$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedP0Wave"), 
      Name: "System.Transactions.TransactionStateDelegatedP0Wave", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Phase0VolatilePrepareDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateDelegatedCommitting */ 

(function TransactionStateDelegatedCommitting$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedCommitting"), 
      Name: "System.Transactions.TransactionStateDelegatedCommitting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionStateDelegatedAborting */ 

(function TransactionStateDelegatedAborting$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionStatePromotedAborted"), 
      Name: "System.Transactions.TransactionStateDelegatedAborting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCommit", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $.Boolean, 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromotedAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Transactions.IPromotedEnlistment */ 

JSIL.MakeInterface(
  "System.Transactions.IPromotedEnlistment", false, [], function ($) {
    $.Method({}, "EnlistmentDone", JSIL.MethodSignature.Void);
    $.Method({}, "Prepared", JSIL.MethodSignature.Void);
    $.Method({}, "ForceRollback", JSIL.MethodSignature.Void);
    $.Method({}, "ForceRollback", JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception")));
    $.Method({}, "Committed", JSIL.MethodSignature.Void);
    $.Method({}, "Aborted", JSIL.MethodSignature.Void);
    $.Method({}, "Aborted", JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception")));
    $.Method({}, "InDoubt", JSIL.MethodSignature.Void);
    $.Method({}, "InDoubt", JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception")));
    $.Method({}, "GetRecoveryInformation", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])));
    $.Method({}, "get_InternalEnlistment", JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.InternalEnlistment")));
    $.Method({}, "set_InternalEnlistment", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment")));
    $.Property({}, "InternalEnlistment");
  }, []);

/* class System.Transactions.InternalEnlistment */ 

(function InternalEnlistment$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.InternalEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Enlistment"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.Enlistment"), $asm27.TypeRef("System.Transactions.InternalTransaction"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.Enlistment"), $asm27.TypeRef("System.Transactions.InternalTransaction"), 
          $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.Enlistment"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FinishEnlistment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DistributedTxId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Enlistment", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Enlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnlistmentNotification", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.IEnlistmentNotification"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnlistmentTraceId", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PreparingEnlistment", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.PreparingEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PromotableSinglePhaseNotification", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PromotedEnlistment", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ResourceManagerIdentifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SinglePhaseEnlistment", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.SinglePhaseEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SinglePhaseNotification", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.ISinglePhaseNotification"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_State", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.EnlistmentState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Transaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PromotedEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_State", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.EnlistmentState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IEnlistmentNotificationInternal.Commit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    )
      .Overrides($asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"), "Commit");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IEnlistmentNotificationInternal.InDoubt", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    )
      .Overrides($asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"), "InDoubt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IEnlistmentNotificationInternal.Prepare", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    )
      .Overrides($asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"), "Prepare");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IEnlistmentNotificationInternal.Rollback", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    )
      .Overrides($asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"), "Rollback");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.ISinglePhaseNotificationInternal.SinglePhaseCommit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    )
      .Overrides($asm27.TypeRef("System.Transactions.ISinglePhaseNotificationInternal"), "SinglePhaseCommit");

    $.Field({Static:false, Public:false}, "twoPhaseState", $asm27.TypeRef("System.Transactions.EnlistmentState"));

    $.Field({Static:false, Public:false}, "twoPhaseNotifications", $asm27.TypeRef("System.Transactions.IEnlistmentNotification"));

    $.Field({Static:false, Public:false}, "singlePhaseNotifications", $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"));

    $.Field({Static:false, Public:false}, "transaction", $asm27.TypeRef("System.Transactions.InternalTransaction"));

    $.Field({Static:false, Public:false}, "atomicTransaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Field({Static:false, Public:false}, "traceIdentifier", $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"));

    $.Field({Static:false, Public:false}, "enlistmentId", $.Int32);

    $.Field({Static:false, Public:false}, "enlistment", $asm27.TypeRef("System.Transactions.Enlistment"));

    $.Field({Static:false, Public:false}, "preparingEnlistment", $asm27.TypeRef("System.Transactions.PreparingEnlistment"));

    $.Field({Static:false, Public:false}, "singlePhaseEnlistment", $asm27.TypeRef("System.Transactions.SinglePhaseEnlistment"));

    $.Field({Static:false, Public:false}, "promotedEnlistment", $asm27.TypeRef("System.Transactions.IPromotedEnlistment"));

    $.Property({Static:false, Public:false}, "DistributedTxId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "State", $asm27.TypeRef("System.Transactions.EnlistmentState"));

    $.Property({Static:false, Public:false}, "Enlistment", $asm27.TypeRef("System.Transactions.Enlistment"));

    $.Property({Static:false, Public:false}, "PreparingEnlistment", $asm27.TypeRef("System.Transactions.PreparingEnlistment"));

    $.Property({Static:false, Public:false}, "SinglePhaseEnlistment", $asm27.TypeRef("System.Transactions.SinglePhaseEnlistment"));

    $.Property({Static:false, Public:false}, "Transaction", $asm27.TypeRef("System.Transactions.InternalTransaction"));

    $.Property({Static:false, Public:false, Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false}, "EnlistmentNotification", $asm27.TypeRef("System.Transactions.IEnlistmentNotification"));

    $.Property({Static:false, Public:false}, "SinglePhaseNotification", $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"));

    $.Property({Static:false, Public:false, Virtual:true }, "PromotableSinglePhaseNotification", $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"));

    $.Property({Static:false, Public:false}, "PromotedEnlistment", $asm27.TypeRef("System.Transactions.IPromotedEnlistment"));

    $.Property({Static:false, Public:false}, "EnlistmentTraceId", $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"));

    $.Property({Static:false, Public:false, Virtual:true }, "ResourceManagerIdentifier", $asm07.TypeRef("System.Guid"));

    $.ImplementInterfaces(
      /* 0 */ $asm27.TypeRef("System.Transactions.ISinglePhaseNotificationInternal"), 
      /* 1 */ $asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.DurableInternalEnlistment */ 

(function DurableInternalEnlistment$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.InternalEnlistment"), 
      Name: "System.Transactions.DurableInternalEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.Enlistment"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Enlistment"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ResourceManagerIdentifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.Field({Static:false, Public:false}, "resourceManagerIdentifier", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false, Virtual:true }, "ResourceManagerIdentifier", $asm07.TypeRef("System.Guid"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.RecoveringInternalEnlistment */ 

(function RecoveringInternalEnlistment$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.DurableInternalEnlistment"), 
      Name: "System.Transactions.RecoveringInternalEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.Enlistment"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "syncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "SyncRoot", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.PromotableInternalEnlistment */ 

(function PromotableInternalEnlistment$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.InternalEnlistment"), 
      Name: "System.Transactions.PromotableInternalEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.Enlistment"), $asm27.TypeRef("System.Transactions.InternalTransaction"), 
          $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PromotableSinglePhaseNotification", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"))
    );

    $.Field({Static:false, Public:false}, "promotableNotificationInterface", $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"));

    $.Property({Static:false, Public:false, Virtual:true }, "PromotableSinglePhaseNotification", $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Phase1VolatileEnlistment */ 

(function Phase1VolatileEnlistment$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.InternalEnlistment"), 
      Name: "System.Transactions.Phase1VolatileEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.Enlistment"), $asm27.TypeRef("System.Transactions.InternalTransaction"), 
          $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FinishEnlistment", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Enlistment */ 

(function Enlistment$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Enlistment", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $asm27.TypeRef("System.Transactions.InternalTransaction"), 
          $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), 
          $asm27.TypeRef("System.Transactions.ISinglePhaseNotification"), $asm27.TypeRef("System.Transactions.Transaction"), 
          $asm27.TypeRef("System.Transactions.EnlistmentOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.InternalTransaction"), $asm27.TypeRef("System.Transactions.IPromotableSinglePhaseNotification"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.IEnlistmentNotification"), $asm27.TypeRef("System.Transactions.InternalTransaction"), 
          $asm27.TypeRef("System.Transactions.Transaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.IEnlistmentNotification"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Done", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalEnlistment", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.Field({Static:false, Public:false}, "internalEnlistment", $asm27.TypeRef("System.Transactions.InternalEnlistment"));

    $.Property({Static:false, Public:false}, "InternalEnlistment", $asm27.TypeRef("System.Transactions.InternalEnlistment"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.PreparingEnlistment */ 

(function PreparingEnlistment$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Enlistment"), 
      Name: "System.Transactions.PreparingEnlistment", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ForceRollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ForceRollback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Prepared", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "RecoveryInformation", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.SinglePhaseEnlistment */ 

(function SinglePhaseEnlistment$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Enlistment"), 
      Name: "System.Transactions.SinglePhaseEnlistment", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Aborted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Aborted", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Committed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "InDoubt", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "InDoubt", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Transactions.EnlistmentTraceIdentifier */ 

(function EnlistmentTraceIdentifier$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Transactions.EnlistmentTraceIdentifier", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnlistmentIdentifier", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResourceManagerIdentifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionTraceId", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type);

    $.Field({Static:false, Public:false}, "resourceManagerIdentifier", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "transactionTraceIdentifier", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "enlistmentIdentifier", $.Int32);


    function EnlistmentTraceIdentifier__cctor () {
      $thisType.Empty = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      EnlistmentTraceIdentifier__cctor
    );

    $.Property({Static:false, Public:true }, "ResourceManagerIdentifier", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "TransactionTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Property({Static:false, Public:true }, "EnlistmentIdentifier", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.EnlistmentState */ 

(function EnlistmentState$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.EnlistmentState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Aborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateCommitting", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateDelegated", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePreparing", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromoted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm27.TypeRef("System.Transactions.IPromotedEnlistment")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateSinglePhaseCommit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Committed", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistmentDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ForceRollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get__EnlistmentStatePromoted", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.EnlistmentStatePromoted"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubt", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalCommitted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalIndoubt", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Prepared", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RecoveryInformation", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm27.TypeRef("System.Transactions.InternalEnlistment")])
    );

    $.Field({Static:true , Public:false}, "_enlistmentStatePromoted", $asm27.TypeRef("System.Transactions.EnlistmentStatePromoted"));

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "_EnlistmentStatePromoted", $asm27.TypeRef("System.Transactions.EnlistmentStatePromoted"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.EnlistmentStatePromoted */ 

(function EnlistmentStatePromoted$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.EnlistmentState"), 
      Name: "System.Transactions.EnlistmentStatePromoted", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Aborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Committed", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistmentDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ForceRollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubt", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Prepared", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RecoveryInformation", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm27.TypeRef("System.Transactions.InternalEnlistment")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.DurableEnlistmentState */ 

(function DurableEnlistmentState$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.EnlistmentState"), 
      Name: "System.Transactions.DurableEnlistmentState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get__DurableEnlistmentAborting", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.DurableEnlistmentAborting"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__DurableEnlistmentActive", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.DurableEnlistmentActive"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__DurableEnlistmentCommitting", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.DurableEnlistmentCommitting"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__DurableEnlistmentDelegated", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.DurableEnlistmentDelegated"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__DurableEnlistmentEnded", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.DurableEnlistmentEnded"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:true , Public:false}, "_durableEnlistmentActive", $asm27.TypeRef("System.Transactions.DurableEnlistmentActive"));

    $.Field({Static:true , Public:false}, "_durableEnlistmentAborting", $asm27.TypeRef("System.Transactions.DurableEnlistmentAborting"));

    $.Field({Static:true , Public:false}, "_durableEnlistmentCommitting", $asm27.TypeRef("System.Transactions.DurableEnlistmentCommitting"));

    $.Field({Static:true , Public:false}, "_durableEnlistmentDelegated", $asm27.TypeRef("System.Transactions.DurableEnlistmentDelegated"));

    $.Field({Static:true , Public:false}, "_durableEnlistmentEnded", $asm27.TypeRef("System.Transactions.DurableEnlistmentEnded"));

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "_DurableEnlistmentActive", $asm27.TypeRef("System.Transactions.DurableEnlistmentActive"));

    $.Property({Static:true , Public:false}, "_DurableEnlistmentAborting", $asm27.TypeRef("System.Transactions.DurableEnlistmentAborting"));

    $.Property({Static:true , Public:false}, "_DurableEnlistmentCommitting", $asm27.TypeRef("System.Transactions.DurableEnlistmentCommitting"));

    $.Property({Static:true , Public:false}, "_DurableEnlistmentDelegated", $asm27.TypeRef("System.Transactions.DurableEnlistmentDelegated"));

    $.Property({Static:true , Public:false}, "_DurableEnlistmentEnded", $asm27.TypeRef("System.Transactions.DurableEnlistmentEnded"));

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.DurableEnlistmentActive */ 

(function DurableEnlistmentActive$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.DurableEnlistmentState"), 
      Name: "System.Transactions.DurableEnlistmentActive", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateCommitting", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateDelegated", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePromoted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm27.TypeRef("System.Transactions.IPromotedEnlistment")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistmentDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.DurableEnlistmentAborting */ 

(function DurableEnlistmentAborting$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.DurableEnlistmentState"), 
      Name: "System.Transactions.DurableEnlistmentAborting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Aborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistmentDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.DurableEnlistmentCommitting */ 

(function DurableEnlistmentCommitting$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.DurableEnlistmentState"), 
      Name: "System.Transactions.DurableEnlistmentCommitting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Aborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Committed", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistmentDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubt", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.DurableEnlistmentDelegated */ 

(function DurableEnlistmentDelegated$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.DurableEnlistmentState"), 
      Name: "System.Transactions.DurableEnlistmentDelegated", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Aborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Committed", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubt", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.DurableEnlistmentEnded */ 

(function DurableEnlistmentEnded$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.DurableEnlistmentState"), 
      Name: "System.Transactions.DurableEnlistmentEnded", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubt", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.VolatileEnlistmentState */ 

(function VolatileEnlistmentState$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.EnlistmentState"), 
      Name: "System.Transactions.VolatileEnlistmentState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get__VolatileEnlistmentAborting", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.VolatileEnlistmentAborting"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__VolatileEnlistmentActive", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.VolatileEnlistmentActive"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__VolatileEnlistmentCommitting", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.VolatileEnlistmentCommitting"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__VolatileEnlistmentDone", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.VolatileEnlistmentDone"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__VolatileEnlistmentEnded", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.VolatileEnlistmentEnded"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__VolatileEnlistmentInDoubt", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.VolatileEnlistmentInDoubt"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__VolatileEnlistmentPrepared", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.VolatileEnlistmentPrepared"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__VolatileEnlistmentPreparing", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.VolatileEnlistmentPreparing"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__VolatileEnlistmentPreparingAborting", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.VolatileEnlistmentPreparingAborting"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get__VolatileEnlistmentSPC", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.VolatileEnlistmentSPC"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RecoveryInformation", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm27.TypeRef("System.Transactions.InternalEnlistment")])
    );

    $.Field({Static:true , Public:false}, "_volatileEnlistmentActive", $asm27.TypeRef("System.Transactions.VolatileEnlistmentActive"));

    $.Field({Static:true , Public:false}, "_volatileEnlistmentPreparing", $asm27.TypeRef("System.Transactions.VolatileEnlistmentPreparing"));

    $.Field({Static:true , Public:false}, "_volatileEnlistmentPrepared", $asm27.TypeRef("System.Transactions.VolatileEnlistmentPrepared"));

    $.Field({Static:true , Public:false}, "_volatileEnlistmentSPC", $asm27.TypeRef("System.Transactions.VolatileEnlistmentSPC"));

    $.Field({Static:true , Public:false}, "_volatileEnlistmentPreparingAborting", $asm27.TypeRef("System.Transactions.VolatileEnlistmentPreparingAborting"));

    $.Field({Static:true , Public:false}, "_volatileEnlistmentAborting", $asm27.TypeRef("System.Transactions.VolatileEnlistmentAborting"));

    $.Field({Static:true , Public:false}, "_volatileEnlistmentCommitting", $asm27.TypeRef("System.Transactions.VolatileEnlistmentCommitting"));

    $.Field({Static:true , Public:false}, "_volatileEnlistmentInDoubt", $asm27.TypeRef("System.Transactions.VolatileEnlistmentInDoubt"));

    $.Field({Static:true , Public:false}, "_volatileEnlistmentEnded", $asm27.TypeRef("System.Transactions.VolatileEnlistmentEnded"));

    $.Field({Static:true , Public:false}, "_volatileEnlistmentDone", $asm27.TypeRef("System.Transactions.VolatileEnlistmentDone"));

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "_VolatileEnlistmentActive", $asm27.TypeRef("System.Transactions.VolatileEnlistmentActive"));

    $.Property({Static:true , Public:false}, "_VolatileEnlistmentPreparing", $asm27.TypeRef("System.Transactions.VolatileEnlistmentPreparing"));

    $.Property({Static:true , Public:false}, "_VolatileEnlistmentPrepared", $asm27.TypeRef("System.Transactions.VolatileEnlistmentPrepared"));

    $.Property({Static:true , Public:false}, "_VolatileEnlistmentSPC", $asm27.TypeRef("System.Transactions.VolatileEnlistmentSPC"));

    $.Property({Static:true , Public:false}, "_VolatileEnlistmentPreparingAborting", $asm27.TypeRef("System.Transactions.VolatileEnlistmentPreparingAborting"));

    $.Property({Static:true , Public:false}, "_VolatileEnlistmentAborting", $asm27.TypeRef("System.Transactions.VolatileEnlistmentAborting"));

    $.Property({Static:true , Public:false}, "_VolatileEnlistmentCommitting", $asm27.TypeRef("System.Transactions.VolatileEnlistmentCommitting"));

    $.Property({Static:true , Public:false}, "_VolatileEnlistmentInDoubt", $asm27.TypeRef("System.Transactions.VolatileEnlistmentInDoubt"));

    $.Property({Static:true , Public:false}, "_VolatileEnlistmentEnded", $asm27.TypeRef("System.Transactions.VolatileEnlistmentEnded"));

    $.Property({Static:true , Public:false}, "_VolatileEnlistmentDone", $asm27.TypeRef("System.Transactions.VolatileEnlistmentDone"));

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.VolatileEnlistmentActive */ 

(function VolatileEnlistmentActive$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.VolatileEnlistmentState"), 
      Name: "System.Transactions.VolatileEnlistmentActive", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePreparing", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStateSinglePhaseCommit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistmentDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.VolatileEnlistmentPreparing */ 

(function VolatileEnlistmentPreparing$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.VolatileEnlistmentState"), 
      Name: "System.Transactions.VolatileEnlistmentPreparing", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePreparing", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistmentDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ForceRollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Prepared", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.VolatileEnlistmentSPC */ 

(function VolatileEnlistmentSPC$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.VolatileEnlistmentState"), 
      Name: "System.Transactions.VolatileEnlistmentSPC", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Aborted", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Committed", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistmentDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubt", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.VolatileEnlistmentPrepared */ 

(function VolatileEnlistmentPrepared$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.VolatileEnlistmentState"), 
      Name: "System.Transactions.VolatileEnlistmentPrepared", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePreparing", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalCommitted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalIndoubt", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.VolatileEnlistmentPreparingAborting */ 

(function VolatileEnlistmentPreparingAborting$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.VolatileEnlistmentState"), 
      Name: "System.Transactions.VolatileEnlistmentPreparingAborting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistmentDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ForceRollback", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Prepared", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.VolatileEnlistmentAborting */ 

(function VolatileEnlistmentAborting$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.VolatileEnlistmentState"), 
      Name: "System.Transactions.VolatileEnlistmentAborting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePreparing", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistmentDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.VolatileEnlistmentCommitting */ 

(function VolatileEnlistmentCommitting$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.VolatileEnlistmentState"), 
      Name: "System.Transactions.VolatileEnlistmentCommitting", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistmentDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.VolatileEnlistmentInDoubt */ 

(function VolatileEnlistmentInDoubt$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.VolatileEnlistmentState"), 
      Name: "System.Transactions.VolatileEnlistmentInDoubt", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnlistmentDone", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.VolatileEnlistmentEnded */ 

(function VolatileEnlistmentEnded$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.VolatileEnlistmentState"), 
      Name: "System.Transactions.VolatileEnlistmentEnded", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePreparing", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubt", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.InternalEnlistment"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAborted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalCommitted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalIndoubt", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.VolatileEnlistmentDone */ 

(function VolatileEnlistmentDone$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.VolatileEnlistmentEnded"), 
      Name: "System.Transactions.VolatileEnlistmentDone", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeStatePreparing", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnterState", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.VolatileDemultiplexer */ 

(function VolatileDemultiplexer$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.VolatileDemultiplexer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BroadcastCommitted", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.VolatileEnlistmentSet")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "BroadcastInDoubt", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.VolatileEnlistmentSet")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "BroadcastRollback", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.VolatileEnlistmentSet")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CommitCallback", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.WaitCallback"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InDoubtCallback", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.WaitCallback"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PrepareCallback", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.WaitCallback"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RollbackCallback", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.WaitCallback"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InDoubt", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalCommit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalInDoubt", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalPrepare", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalRollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolableCommit", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolableInDoubt", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolablePrepare", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "PoolableRollback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.Field({Static:false, Public:false}, "transaction", $asm27.TypeRef("System.Transactions.InternalTransaction"));

    $.Field({Static:false, Public:false}, "oletxEnlistment", $asm27.TypeRef("System.Transactions.IPromotedEnlistment"));

    $.Field({Static:false, Public:false}, "preparingEnlistment", $asm27.TypeRef("System.Transactions.IPromotedEnlistment"));

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Field({Static:true , Public:false}, "prepareCallback", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.Field({Static:true , Public:false}, "commitCallback", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.Field({Static:true , Public:false}, "rollbackCallback", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.Field({Static:true , Public:false}, "inDoubtCallback", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "PrepareCallback", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.Property({Static:true , Public:false}, "CommitCallback", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.Property({Static:true , Public:false}, "RollbackCallback", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.Property({Static:true , Public:false}, "InDoubtCallback", $asm07.TypeRef("System.Threading.WaitCallback"));

    $.ImplementInterfaces(
      /* 0 */ $asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Phase0VolatileDemultiplexer */ 

(function Phase0VolatileDemultiplexer$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.VolatileDemultiplexer"), 
      Name: "System.Transactions.Phase0VolatileDemultiplexer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InDoubt", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalCommit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalInDoubt", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalPrepare", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalRollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Phase1VolatileDemultiplexer */ 

(function Phase1VolatileDemultiplexer$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.VolatileDemultiplexer"), 
      Name: "System.Transactions.Phase1VolatileDemultiplexer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InDoubt", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalCommit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalInDoubt", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalPrepare", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalRollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepare", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Rollback", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Transactions.VolatileEnlistmentSet */ 

(function VolatileEnlistmentSet$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Transactions.VolatileEnlistmentSet", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "get_VolatileDemux", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.VolatileDemultiplexer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_VolatileDemux", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.VolatileDemultiplexer"))
    );

    $.Field({Static:false, Public:false}, "volatileEnlistments", $jsilcore.TypeRef("System.Array", [$asm27.TypeRef("System.Transactions.InternalEnlistment")]));

    $.Field({Static:false, Public:false}, "volatileEnlistmentCount", $.Int32);

    $.Field({Static:false, Public:false}, "volatileEnlistmentSize", $.Int32);

    $.Field({Static:false, Public:false}, "dependentClones", $.Int32);

    $.Field({Static:false, Public:false}, "preparedVolatileEnlistments", $.Int32);

    $.Field({Static:false, Public:false}, "volatileDemux", $asm27.TypeRef("System.Transactions.VolatileDemultiplexer"));

    $.Property({Static:false, Public:false}, "VolatileDemux", $asm27.TypeRef("System.Transactions.VolatileDemultiplexer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Transactions.IEnlistmentNotificationInternal */ 

JSIL.MakeInterface(
  "System.Transactions.IEnlistmentNotificationInternal", false, [], function ($) {
    $.Method({}, "Prepare", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment")));
    $.Method({}, "Commit", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment")));
    $.Method({}, "Rollback", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment")));
    $.Method({}, "InDoubt", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment")));
  }, []);

/* interface System.Transactions.IEnlistmentNotification */ 

JSIL.MakeInterface(
  "System.Transactions.IEnlistmentNotification", true, [], function ($) {
    $.Method({}, "Prepare", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.PreparingEnlistment")));
    $.Method({}, "Commit", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Enlistment")));
    $.Method({}, "Rollback", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Enlistment")));
    $.Method({}, "InDoubt", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Enlistment")));
  }, []);

/* interface System.Transactions.IPromotableSinglePhaseNotification */ 

JSIL.MakeInterface(
  "System.Transactions.IPromotableSinglePhaseNotification", true, [], function ($) {
    $.Method({}, "Initialize", JSIL.MethodSignature.Void);
    $.Method({}, "SinglePhaseCommit", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.SinglePhaseEnlistment")));
    $.Method({}, "Rollback", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.SinglePhaseEnlistment")));
  }, [$asm27.TypeRef("System.Transactions.ITransactionPromoter")]);

/* interface System.Transactions.ITransactionPromoter */ 

JSIL.MakeInterface(
  "System.Transactions.ITransactionPromoter", true, [], function ($) {
    $.Method({}, "Promote", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])));
  }, []);

/* interface System.Transactions.ISimpleTransactionSuperior */ 

JSIL.MakeInterface(
  "System.Transactions.ISimpleTransactionSuperior", true, [], function ($) {
    $.Method({}, "Rollback", JSIL.MethodSignature.Void);
  }, [$asm27.TypeRef("System.Transactions.ITransactionPromoter")]);

/* class System.Transactions.SubordinateTransaction */ 

(function SubordinateTransaction$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Transaction"), 
      Name: "System.Transactions.SubordinateTransaction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.IsolationLevel"), $asm27.TypeRef("System.Transactions.ISimpleTransactionSuperior")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Transactions.ISinglePhaseNotificationInternal */ 

JSIL.MakeInterface(
  "System.Transactions.ISinglePhaseNotificationInternal", false, [], function ($) {
    $.Method({}, "SinglePhaseCommit", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IPromotedEnlistment")));
  }, [$asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal")]);

/* interface System.Transactions.ISinglePhaseNotification */ 

JSIL.MakeInterface(
  "System.Transactions.ISinglePhaseNotification", true, [], function ($) {
    $.Method({}, "SinglePhaseCommit", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.SinglePhaseEnlistment")));
  }, [$asm27.TypeRef("System.Transactions.IEnlistmentNotification")]);

/* class System.Transactions.TransactionException */ 

(function TransactionException$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.SystemException"), 
      Name: "System.Transactions.TransactionException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$.String, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateEnlistmentStateException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Exception"), 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidOperationException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidOperationException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateTransactionCompletedException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateTransactionStateException", 
      new JSIL.MethodSignature($.Type, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateTransactionStateException", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm07.TypeRef("System.Exception"), 
          $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncludeDistributedTxId", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Guid")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionAbortedException */ 

(function TransactionAbortedException$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionException"), 
      Name: "System.Transactions.TransactionAbortedException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionInDoubtException */ 

(function TransactionInDoubtException$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionException"), 
      Name: "System.Transactions.TransactionInDoubtException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception"), $asm07.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionManagerCommunicationException */ 

(function TransactionManagerCommunicationException$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionException"), 
      Name: "System.Transactions.TransactionManagerCommunicationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionPromotionException */ 

(function TransactionPromotionException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.TransactionException"), 
      Name: "System.Transactions.TransactionPromotionException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Transactions.IDtcTransaction */ 

JSIL.MakeInterface(
  "System.Transactions.IDtcTransaction", true, [], function ($) {
    $.Method({}, "Commit", new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ]));
    $.Method({}, "Abort", new JSIL.MethodSignature(null, [
          $.IntPtr, $.Int32, 
          $.Int32
        ]));
    $.Method({}, "GetTransactionInfo", JSIL.MethodSignature.Action($.IntPtr));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0fb15084-af41-11ce-bd2b-204c4f4f5020"]; });

/* class System.Transactions.TransactionInterop */ 

(function TransactionInterop$Members () {
  var $, $thisType;











  JSIL.MakeStaticClass("System.Transactions.TransactionInterop", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ConvertToOletxTransaction", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"), [$asm27.TypeRef("System.Transactions.Transaction")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDtcTransaction", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.IDtcTransaction"), [$asm27.TypeRef("System.Transactions.Transaction")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetExportCookie", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm27.TypeRef("System.Transactions.Transaction"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOletxTransactionFromTransmitterPropigationToken", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTransactionFromDtcTransaction", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Transaction"), [$asm27.TypeRef("System.Transactions.IDtcTransaction")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTransactionFromExportCookie", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Transaction"), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTransactionFromTransmitterPropagationToken", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Transaction"), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTransmitterPropagationToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm27.TypeRef("System.Transactions.Transaction")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTransmitterPropagationToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm27.TypeRef("System.Transactions.Oletx.OletxTransaction")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetWhereabouts", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "PromoterTypeDtc", $asm07.TypeRef("System.Guid"));


    function TransactionInterop__cctor () {
      $thisType.PromoterTypeDtc = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TransactionInterop__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Transactions.HostCurrentTransactionCallback */ 

JSIL.MakeDelegate("System.Transactions.HostCurrentTransactionCallback", true, [], 
  JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Transaction")));

/* delegate System.Transactions.TransactionStartedEventHandler */ 

JSIL.MakeDelegate("System.Transactions.TransactionStartedEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm27.TypeRef("System.Transactions.TransactionEventArgs")]));

/* class System.Transactions.TransactionManager */ 

(function TransactionManager$Members () {
  var $, $thisType;


























  JSIL.MakeStaticClass("System.Transactions.TransactionManager", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "add_DistributedTransactionStarted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionStartedEventHandler"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckTransactionManager", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindOrCreatePromotedTransaction", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Transaction"), [$asm07.TypeRef("System.Guid"), $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindPromotedTransaction", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Transaction"), [$asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FireDistributedTransactionStarted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultIsolationLevel", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.IsolationLevel"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultSettings", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Configuration.DefaultSettingsSection"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DistributedTransactionManager", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_HostCurrentCallback", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.HostCurrentTransactionCallback"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MachineSettings", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Configuration.MachineSettingsSection"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MaximumTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PromotedTransactionTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TransactionTable", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionTable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRecoveryInformation", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessExistingTransactions", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionStartedEventHandler"))
    );

    $.ExternalMethod({Static:true , Public:true }, "RecoveryComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Reenlist", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Enlistment"), [
          $asm07.TypeRef("System.Guid"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm27.TypeRef("System.Transactions.IEnlistmentNotification")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "remove_DistributedTransactionStarted", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionStartedEventHandler"))
    );

    $.ExternalMethod({Static:true , Public:true }, "set_HostCurrentCallback", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.HostCurrentTransactionCallback"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateIsolationLevel", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IsolationLevel"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidatePlatform", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateTimeout", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$asm07.TypeRef("System.TimeSpan")])
    );

    $.Constant({Static:true , Public:false}, "recoveryInformationVersion1", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "currentRecoveryVersion", $.Int32, 1);

    $.Field({Static:true , Public:false}, "_platformValidated", $.Boolean);

    $.Field({Static:true , Public:false}, "promotedTransactionTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "transactionTable", $asm27.TypeRef("System.Transactions.TransactionTable"));

    $.Field({Static:true , Public:false}, "distributedTransactionStartedDelegate", $asm27.TypeRef("System.Transactions.TransactionStartedEventHandler"));

    $.Field({Static:true , Public:false}, "currentDelegate", $asm27.TypeRef("System.Transactions.HostCurrentTransactionCallback"));

    $.Field({Static:true , Public:false}, "currentDelegateSet", $.Boolean);

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Field({Static:true , Public:false}, "defaultSettings", $asm27.TypeRef("System.Transactions.Configuration.DefaultSettingsSection"));

    $.Field({Static:true , Public:false}, "machineSettings", $asm27.TypeRef("System.Transactions.Configuration.MachineSettingsSection"));

    $.Field({Static:true , Public:false}, "_defaultTimeoutValidated", $.Boolean);

    $.Field({Static:true , Public:false}, "_defaultTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false}, "_cachedMaxTimeout", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:true , Public:false}, "_maximumTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false}, "distributedTransactionManager", $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"));


    function TransactionManager__cctor () {
      $thisType._defaultTimeout = new $asm07.System.TimeSpan();
      $thisType._maximumTimeout = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TransactionManager__cctor
    );

    $.Property({Static:true , Public:true }, "HostCurrentCallback", $asm27.TypeRef("System.Transactions.HostCurrentTransactionCallback"));

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "DefaultIsolationLevel", $asm27.TypeRef("System.Transactions.IsolationLevel"));

    $.Property({Static:true , Public:false}, "DefaultSettings", $asm27.TypeRef("System.Transactions.Configuration.DefaultSettingsSection"));

    $.Property({Static:true , Public:false}, "MachineSettings", $asm27.TypeRef("System.Transactions.Configuration.MachineSettingsSection"));

    $.Property({Static:true , Public:true }, "DefaultTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:true , Public:true }, "MaximumTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:true , Public:false}, "PromotedTransactionTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:true , Public:false}, "TransactionTable", $asm27.TypeRef("System.Transactions.TransactionTable"));

    $.Property({Static:true , Public:false}, "DistributedTransactionManager", $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"));

    $.Event({Static:true , Public:true }, "DistributedTransactionStarted", $asm27.TypeRef("System.Transactions.TransactionStartedEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.CheapUnfairReaderWriterLock */ 

(function CheapUnfairReaderWriterLock$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.CheapUnfairReaderWriterLock", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AcquireReaderLock", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "AcquireWriterLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadersPresent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriterFinishedEvent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.ManualResetEvent"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReleaseReaderLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ReleaseWriterLock", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "writerFinishedEvent", $.Object);

    $.Field({Static:false, Public:false}, "readersIn", $.Int32);

    $.Field({Static:false, Public:false}, "readersOut", $.Int32);

    $.Field({Static:false, Public:false}, "writerPresent", $.Boolean);

    $.Field({Static:false, Public:false}, "syncRoot", $.Object);

    $.Constant({Static:true , Public:false}, "MAX_SPIN_COUNT", $.Int32, 100);

    $.Constant({Static:true , Public:false}, "SLEEP_TIME", $.Int32, 500);

    $.Property({Static:false, Public:false}, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false}, "ReadersPresent", $.Boolean);

    $.Property({Static:false, Public:false}, "WriterFinishedEvent", $asm07.TypeRef("System.Threading.ManualResetEvent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.TransactionTable */ 

(function TransactionTable$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.TransactionTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIter", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentTime", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "RecalcTimeout", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ThreadTimer", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "TimeoutTicks", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.TimeSpan")])
    );

    $.Field({Static:false, Public:false}, "timer", $asm07.TypeRef("System.Threading.Timer"));

    $.Field({Static:false, Public:false}, "timerEnabled", $.Boolean);

    $.Constant({Static:true , Public:false}, "timerInternalExponent", $.Int32, 9);

    $.Field({Static:false, Public:false}, "timerInterval", $.Int32);

    $.Constant({Static:true , Public:false}, "TicksPerMillisecond", $.Int64, 10000);

    $.Field({Static:false, Public:false}, "ticks", $.Int64);

    $.Field({Static:false, Public:false}, "lastTimerTime", $.Int64);

    $.Field({Static:false, Public:false}, "headBucketSet", $asm27.TypeRef("System.Transactions.BucketSet"));

    $.Field({Static:false, Public:false}, "rwLock", $asm27.TypeRef("System.Transactions.CheapUnfairReaderWriterLock"));

    $.Property({Static:false, Public:false}, "CurrentTime", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.BucketSet */ 

(function BucketSet$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.BucketSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.TransactionTable"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AbsoluteTimeout", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "TimeoutTransactions", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nextSetWeak", $.Object);

    $.Field({Static:false, Public:false}, "prevSet", $.Type);

    $.Field({Static:false, Public:false}, "table", $asm27.TypeRef("System.Transactions.TransactionTable"));

    $.Field({Static:false, Public:false}, "absoluteTimeout", $.Int64);

    $.Field({Static:false, Public:false}, "headBucket", $asm27.TypeRef("System.Transactions.Bucket"));

    $.Property({Static:false, Public:false}, "AbsoluteTimeout", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Bucket */ 

(function Bucket$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Bucket", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.BucketSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Boolean, [$asm27.TypeRef("System.Transactions.InternalTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TimeoutTransactions", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "timedOut", $.Boolean);

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "size", $.Int32);

    $.Field({Static:false, Public:false}, "transactions", $jsilcore.TypeRef("System.Array", [$asm27.TypeRef("System.Transactions.InternalTransaction")]));

    $.Field({Static:false, Public:false}, "nextBucketWeak", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "previous", $.Type);

    $.Field({Static:false, Public:false}, "owningSet", $asm27.TypeRef("System.Transactions.BucketSet"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Transactions.TransactionOptions */ 

(function TransactionOptions$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Transactions.TransactionOptions", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsolationLevel", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.IsolationLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Timeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsolationLevel", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.IsolationLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.Field({Static:false, Public:false}, "timeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "isolationLevel", $asm27.TypeRef("System.Transactions.IsolationLevel"));

    $.Property({Static:false, Public:true }, "Timeout", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "IsolationLevel", $asm27.TypeRef("System.Transactions.IsolationLevel"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.DistributedTransactionPermission */ 

(function DistributedTransactionPermission$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.CodeAccessPermission"), 
      Name: "System.Transactions.DistributedTransactionPermission", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.PermissionState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXml", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Intersect", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.IPermission"), [$asm07.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.IPermission")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsUnrestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.SecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Union", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.IPermission"), [$asm07.TypeRef("System.Security.IPermission")])
    );

    $.Field({Static:false, Public:false}, "unrestricted", $.Boolean);

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.Security.Permissions.IUnrestrictedPermission")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.DistributedTransactionPermissionAttribute */ 

(function DistributedTransactionPermissionAttribute$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Permissions.CodeAccessSecurityAttribute"), 
      Name: "System.Transactions.DistributedTransactionPermissionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Permissions.SecurityAction"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.IPermission"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Unrestricted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Unrestricted", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "unrestricted", $.Boolean);

    $.Property({Static:false, Public:true }, "Unrestricted", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* enum System.Transactions.TransactionScopeOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.TransactionScopeOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Required: 0, 
    RequiresNew: 1, 
    Suppress: 2, 
  }
);

/* enum System.Transactions.TransactionScopeAsyncFlowOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.TransactionScopeAsyncFlowOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Suppress: 0, 
    Enabled: 1, 
  }
);

/* enum System.Transactions.EnterpriseServicesInteropOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.EnterpriseServicesInteropOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Automatic: 1, 
    Full: 2, 
  }
);

/* class System.Transactions.TransactionScope */ 

(function TransactionScope$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm27.System.Transactions.ContextKey)) ();
  };



















  function TransactionScope_get_AsyncFlowEnabled () {
    return this.TransactionScope$AsyncFlowEnabled$value;
  }; 

  function TransactionScope_get_ContextKey () {
    return this.TransactionScope$ContextKey$value;
  }; 













  function TransactionScope_set_AsyncFlowEnabled (value) {
    this.TransactionScope$AsyncFlowEnabled$value = value;
  }; 

  function TransactionScope_set_ContextKey (value) {
    this.TransactionScope$ContextKey$value = value;
  }; 








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.TransactionScope", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionScopeOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionScopeAsyncFlowOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.TransactionScopeOption"), $asm27.TypeRef("System.Transactions.TransactionScopeAsyncFlowOption")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.TransactionScopeOption"), $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.TransactionScopeOption"), $asm07.TypeRef("System.TimeSpan"), 
          $asm27.TypeRef("System.Transactions.TransactionScopeAsyncFlowOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.TransactionScopeOption"), $asm27.TypeRef("System.Transactions.TransactionOptions")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.TransactionScopeOption"), $asm27.TypeRef("System.Transactions.TransactionOptions"), 
          $asm27.TypeRef("System.Transactions.TransactionScopeAsyncFlowOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.TransactionScopeOption"), $asm27.TypeRef("System.Transactions.TransactionOptions"), 
          $asm27.TypeRef("System.Transactions.EnterpriseServicesInteropOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Transaction"), $asm27.TypeRef("System.Transactions.TransactionScopeAsyncFlowOption")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Transaction"), $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.Transaction"), $asm07.TypeRef("System.TimeSpan"), 
          $asm27.TypeRef("System.Transactions.TransactionScopeAsyncFlowOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.Transaction"), $asm07.TypeRef("System.TimeSpan"), 
          $asm27.TypeRef("System.Transactions.EnterpriseServicesInteropOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CommonInitialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Complete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "get_AsyncFlowEnabled", 
      JSIL.MethodSignature.Return($.Boolean), 
      TransactionScope_get_AsyncFlowEnabled
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_ContextKey", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.ContextKey")), 
      TransactionScope_get_ContextKey
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_InteropMode", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.EnterpriseServicesInteropOption"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ScopeComplete", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.Transaction"), $asm07.TypeRef("System.TimeSpan"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "JitSafeLeaveServiceDomain", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "NeedToCreateTransaction", 
      new JSIL.MethodSignature($.Boolean, [$asm27.TypeRef("System.Transactions.TransactionScopeOption")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PushScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PushServiceDomain", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RestoreCurrent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RestoreSavedTLSContextData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveTLSContextData", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "set_AsyncFlowEnabled", 
      JSIL.MethodSignature.Action($.Boolean), 
      TransactionScope_set_AsyncFlowEnabled
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ContextKey", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.ContextKey")), 
      TransactionScope_set_ContextKey
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetCurrent", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Transaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Timeout", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "TimerCallback", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAndSetAsyncFlowOption", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionScopeAsyncFlowOption"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAsyncFlowOptionAndESInteropOption", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateInteropOption", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.EnterpriseServicesInteropOption"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateScopeTimeout", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.TimeSpan")])
    );

    $.Field({Static:false, Public:false}, "complete", $.Boolean);

    $.Field({Static:false, Public:false}, "savedCurrent", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Field({Static:false, Public:false}, "contextTransaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Field({Static:false, Public:false}, "savedCurrentScope", $.Type);

    $.Field({Static:false, Public:false}, "threadContextData", $asm27.TypeRef("System.Transactions.ContextData"));

    $.Field({Static:false, Public:false}, "savedTLSContextData", $asm27.TypeRef("System.Transactions.ContextData"));

    $.Field({Static:false, Public:false}, "expectedCurrent", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Field({Static:false, Public:false}, "committableTransaction", $asm27.TypeRef("System.Transactions.CommittableTransaction"));

    $.Field({Static:false, Public:false}, "dependentTransaction", $asm27.TypeRef("System.Transactions.DependentTransaction"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "scopeTimer", $asm07.TypeRef("System.Threading.Timer"));

    $.Field({Static:false, Public:false}, "scopeThread", $asm07.TypeRef("System.Threading.Thread"));

    $.Field({Static:false, Public:false}, "createdServiceDomain", $.Boolean);

    $.Field({Static:false, Public:false}, "createdDoubleServiceDomain", $.Boolean);

    $.Field({Static:false, Public:false}, "interopModeSpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "interopOption", $asm27.TypeRef("System.Transactions.EnterpriseServicesInteropOption"));

    $.Field({Static:false, Public:false}, "TransactionScope$ContextKey$value", $asm27.TypeRef("System.Transactions.ContextKey"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TransactionScope$AsyncFlowEnabled$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "ScopeComplete", $.Boolean);

    $.Property({Static:false, Public:false}, "InteropMode", $asm27.TypeRef("System.Transactions.EnterpriseServicesInteropOption"));

    $.Property({Static:false, Public:false}, "ContextKey", $asm27.TypeRef("System.Transactions.ContextKey"));

    $.Property({Static:false, Public:false}, "AsyncFlowEnabled", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Transactions.TransactionTraceIdentifier */ 

(function TransactionTraceIdentifier$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Transactions.TransactionTraceIdentifier", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CloneIdentifier", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransactionIdentifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type);

    $.Field({Static:false, Public:false}, "transactionIdentifier", $.String);

    $.Field({Static:false, Public:false}, "cloneIdentifier", $.Int32);


    function TransactionTraceIdentifier__cctor () {
      $thisType.Empty = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      TransactionTraceIdentifier__cctor
    );

    $.Property({Static:false, Public:true }, "TransactionIdentifier", $.String);

    $.Property({Static:false, Public:true }, "CloneIdentifier", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.SafeIUnknown */ 

(function SafeIUnknown$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Transactions.SafeIUnknown", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Transactions.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.Transactions.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Transactions.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.Transactions.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "ArgumentWrongType", $.String, "ArgumentWrongType");

    $.Constant({Static:true , Public:false}, "AsyncFlowAndESInteropNotSupported", $.String, "AsyncFlowAndESInteropNotSupported");

    $.Constant({Static:true , Public:false}, "BadAsyncResult", $.String, "BadAsyncResult");

    $.Constant({Static:true , Public:false}, "BadResourceManagerId", $.String, "BadResourceManagerId");

    $.Constant({Static:true , Public:false}, "CannotGetPrepareInfo", $.String, "CannotGetPrepareInfo");

    $.Constant({Static:true , Public:false}, "CannotGetTransactionIdentifier", $.String, "CannotGetTransactionIdentifier");

    $.Constant({Static:true , Public:false}, "CannotPromoteSnapshot", $.String, "CannotPromoteSnapshot");

    $.Constant({Static:true , Public:false}, "CannotSetCurrent", $.String, "CannotSetCurrent");

    $.Constant({Static:true , Public:false}, "CannotSupportNodeNameSpecification", $.String, "CannotSupportNodeNameSpecification");

    $.Constant({Static:true , Public:false}, "ConfigInvalidConfigurationValue", $.String, "ConfigInvalidConfigurationValue");

    $.Constant({Static:true , Public:false}, "ConfigNull", $.String, "ConfigNull");

    $.Constant({Static:true , Public:false}, "ConfigDistributedTransactionManagerName", $.String, "ConfigDistributedTransactionManagerName");

    $.Constant({Static:true , Public:false}, "ConfigInvalidTimeSpanValue", $.String, "ConfigInvalidTimeSpanValue");

    $.Constant({Static:true , Public:false}, "ConfigurationSectionNotFound", $.String, "ConfigurationSectionNotFound");

    $.Constant({Static:true , Public:false}, "CurrentDelegateSet", $.String, "CurrentDelegateSet");

    $.Constant({Static:true , Public:false}, "DistributedTransactionManager", $.String, "DistributedTransactionManager");

    $.Constant({Static:true , Public:false}, "DisposeScope", $.String, "DisposeScope");

    $.Constant({Static:true , Public:false}, "DtcTransactionManagerUnavailable", $.String, "DtcTransactionManagerUnavailable");

    $.Constant({Static:true , Public:false}, "DuplicateRecoveryComplete", $.String, "DuplicateRecoveryComplete");

    $.Constant({Static:true , Public:false}, "EnlistmentStateException", $.String, "EnlistmentStateException");

    $.Constant({Static:true , Public:false}, "EsNotSupported", $.String, "EsNotSupported");

    $.Constant({Static:true , Public:false}, "FailedToCreateTraceSource", $.String, "FailedToCreateTraceSource");

    $.Constant({Static:true , Public:false}, "FailedToInitializeTraceSource", $.String, "FailedToInitializeTraceSource");

    $.Constant({Static:true , Public:false}, "FailedToTraceEvent", $.String, "FailedToTraceEvent");

    $.Constant({Static:true , Public:false}, "InternalError", $.String, "InternalError");

    $.Constant({Static:true , Public:false}, "InvalidArgument", $.String, "InvalidArgument");

    $.Constant({Static:true , Public:false}, "InvalidIPromotableSinglePhaseNotificationSpecified", $.String, "InvalidIPromotableSinglePhaseNotificationSpecified");

    $.Constant({Static:true , Public:false}, "InvalidRecoveryInformation", $.String, "InvalidRecoveryInformation");

    $.Constant({Static:true , Public:false}, "InvalidScopeThread", $.String, "InvalidScopeThread");

    $.Constant({Static:true , Public:false}, "NetworkTransactionsDisabled", $.String, "NetworkTransactionsDisabled");

    $.Constant({Static:true , Public:false}, "OletxEnlistmentUnexpectedTransactionStatus", $.String, "OletxEnlistmentUnexpectedTransactionStatus");

    $.Constant({Static:true , Public:false}, "OletxTooManyEnlistments", $.String, "OletxTooManyEnlistments");

    $.Constant({Static:true , Public:false}, "OnlySupportedOnWinNT", $.String, "OnlySupportedOnWinNT");

    $.Constant({Static:true , Public:false}, "PrepareInfo", $.String, "PrepareInfo");

    $.Constant({Static:true , Public:false}, "PromotionFailed", $.String, "PromotionFailed");

    $.Constant({Static:true , Public:false}, "PromoterTypeUnrecognized", $.String, "PromoterTypeUnrecognized");

    $.Constant({Static:true , Public:false}, "PromoterTypeInvalid", $.String, "PromoterTypeInvalid");

    $.Constant({Static:true , Public:false}, "PromotedReturnedInvalidValue", $.String, "PromotedReturnedInvalidValue");

    $.Constant({Static:true , Public:false}, "PromotedTransactionExists", $.String, "PromotedTransactionExists");

    $.Constant({Static:true , Public:false}, "ProxyCannotSupportMultipleNodeNames", $.String, "ProxyCannotSupportMultipleNodeNames");

    $.Constant({Static:true , Public:false}, "ReenlistAfterRecoveryComplete", $.String, "ReenlistAfterRecoveryComplete");

    $.Constant({Static:true , Public:false}, "ResourceManagerIdDoesNotMatchRecoveryInformation", $.String, "ResourceManagerIdDoesNotMatchRecoveryInformation");

    $.Constant({Static:true , Public:false}, "TooLate", $.String, "TooLate");

    $.Constant({Static:true , Public:false}, "TraceActivityIdSet", $.String, "TraceActivityIdSet");

    $.Constant({Static:true , Public:false}, "TraceCloneCreated", $.String, "TraceCloneCreated");

    $.Constant({Static:true , Public:false}, "TraceConfiguredDefaultTimeoutAdjusted", $.String, "TraceConfiguredDefaultTimeoutAdjusted");

    $.Constant({Static:true , Public:false}, "TraceDependentCloneComplete", $.String, "TraceDependentCloneComplete");

    $.Constant({Static:true , Public:false}, "TraceDependentCloneCreated", $.String, "TraceDependentCloneCreated");

    $.Constant({Static:true , Public:false}, "TraceEnlistment", $.String, "TraceEnlistment");

    $.Constant({Static:true , Public:false}, "TraceEnlistmentCallbackNegative", $.String, "TraceEnlistmentCallbackNegative");

    $.Constant({Static:true , Public:false}, "TraceEnlistmentCallbackPositive", $.String, "TraceEnlistmentCallbackPositive");

    $.Constant({Static:true , Public:false}, "TraceEnlistmentNotificationCall", $.String, "TraceEnlistmentNotificationCall");

    $.Constant({Static:true , Public:false}, "TraceExceptionConsumed", $.String, "TraceExceptionConsumed");

    $.Constant({Static:true , Public:false}, "TraceInternalError", $.String, "TraceInternalError");

    $.Constant({Static:true , Public:false}, "TraceInvalidOperationException", $.String, "TraceInvalidOperationException");

    $.Constant({Static:true , Public:false}, "TraceMethodEntered", $.String, "TraceMethodEntered");

    $.Constant({Static:true , Public:false}, "TraceMethodExited", $.String, "TraceMethodExited");

    $.Constant({Static:true , Public:false}, "TraceNewActivityIdIssued", $.String, "TraceNewActivityIdIssued");

    $.Constant({Static:true , Public:false}, "TraceRecoveryComplete", $.String, "TraceRecoveryComplete");

    $.Constant({Static:true , Public:false}, "TraceReenlist", $.String, "TraceReenlist");

    $.Constant({Static:true , Public:false}, "TraceSourceBase", $.String, "TraceSourceBase");

    $.Constant({Static:true , Public:false}, "TraceSourceLtm", $.String, "TraceSourceLtm");

    $.Constant({Static:true , Public:false}, "TraceSourceOletx", $.String, "TraceSourceOletx");

    $.Constant({Static:true , Public:false}, "TraceTransactionAborted", $.String, "TraceTransactionAborted");

    $.Constant({Static:true , Public:false}, "TraceTransactionCommitCalled", $.String, "TraceTransactionCommitCalled");

    $.Constant({Static:true , Public:false}, "TraceTransactionCommitted", $.String, "TraceTransactionCommitted");

    $.Constant({Static:true , Public:false}, "TraceTransactionCreated", $.String, "TraceTransactionCreated");

    $.Constant({Static:true , Public:false}, "TraceTransactionDeserialized", $.String, "TraceTransactionDeserialized");

    $.Constant({Static:true , Public:false}, "TraceTransactionException", $.String, "TraceTransactionException");

    $.Constant({Static:true , Public:false}, "TraceTransactionInDoubt", $.String, "TraceTransactionInDoubt");

    $.Constant({Static:true , Public:false}, "TraceTransactionManagerCreated", $.String, "TraceTransactionManagerCreated");

    $.Constant({Static:true , Public:false}, "TraceTransactionPromoted", $.String, "TraceTransactionPromoted");

    $.Constant({Static:true , Public:false}, "TraceTransactionRollbackCalled", $.String, "TraceTransactionRollbackCalled");

    $.Constant({Static:true , Public:false}, "TraceTransactionScopeCreated", $.String, "TraceTransactionScopeCreated");

    $.Constant({Static:true , Public:false}, "TraceTransactionScopeCurrentTransactionChanged", $.String, "TraceTransactionScopeCurrentTransactionChanged");

    $.Constant({Static:true , Public:false}, "TraceTransactionScopeDisposed", $.String, "TraceTransactionScopeDisposed");

    $.Constant({Static:true , Public:false}, "TraceTransactionScopeIncomplete", $.String, "TraceTransactionScopeIncomplete");

    $.Constant({Static:true , Public:false}, "TraceTransactionScopeNestedIncorrectly", $.String, "TraceTransactionScopeNestedIncorrectly");

    $.Constant({Static:true , Public:false}, "TraceTransactionScopeTimeout", $.String, "TraceTransactionScopeTimeout");

    $.Constant({Static:true , Public:false}, "TraceTransactionSerialized", $.String, "TraceTransactionSerialized");

    $.Constant({Static:true , Public:false}, "TraceTransactionTimeout", $.String, "TraceTransactionTimeout");

    $.Constant({Static:true , Public:false}, "TraceUnhandledException", $.String, "TraceUnhandledException");

    $.Constant({Static:true , Public:false}, "TransactionAborted", $.String, "TransactionAborted");

    $.Constant({Static:true , Public:false}, "TransactionAlreadyCompleted", $.String, "TransactionAlreadyCompleted");

    $.Constant({Static:true , Public:false}, "TransactionAlreadyOver", $.String, "TransactionAlreadyOver");

    $.Constant({Static:true , Public:false}, "TransactionIndoubt", $.String, "TransactionIndoubt");

    $.Constant({Static:true , Public:false}, "TransactionManagerCommunicationException", $.String, "TransactionManagerCommunicationException");

    $.Constant({Static:true , Public:false}, "TransactionScopeComplete", $.String, "TransactionScopeComplete");

    $.Constant({Static:true , Public:false}, "TransactionScopeIncorrectCurrent", $.String, "TransactionScopeIncorrectCurrent");

    $.Constant({Static:true , Public:false}, "TransactionScopeInvalidNesting", $.String, "TransactionScopeInvalidNesting");

    $.Constant({Static:true , Public:false}, "TransactionScopeIsolationLevelDifferentFromTransaction", $.String, "TransactionScopeIsolationLevelDifferentFromTransaction");

    $.Constant({Static:true , Public:false}, "TransactionScopeTimerObjectInvalid", $.String, "TransactionScopeTimerObjectInvalid");

    $.Constant({Static:true , Public:false}, "TransactionStateException", $.String, "TransactionStateException");

    $.Constant({Static:true , Public:false}, "UnableToDeserializeTransaction", $.String, "UnableToDeserializeTransaction");

    $.Constant({Static:true , Public:false}, "UnableToDeserializeTransactionInternalError", $.String, "UnableToDeserializeTransactionInternalError");

    $.Constant({Static:true , Public:false}, "UnableToGetNotificationShimFactory", $.String, "UnableToGetNotificationShimFactory");

    $.Constant({Static:true , Public:false}, "UnexpectedTransactionManagerConfigurationValue", $.String, "UnexpectedTransactionManagerConfigurationValue");

    $.Constant({Static:true , Public:false}, "UnexpectedFailureOfThreadPool", $.String, "UnexpectedFailureOfThreadPool");

    $.Constant({Static:true , Public:false}, "UnexpectedTimerFailure", $.String, "UnexpectedTimerFailure");

    $.Constant({Static:true , Public:false}, "UnrecognizedRecoveryInformation", $.String, "UnrecognizedRecoveryInformation");

    $.Constant({Static:true , Public:false}, "VolEnlistNoRecoveryInfo", $.String, "VolEnlistNoRecoveryInfo");

    $.Constant({Static:true , Public:false}, "DistributedTxIDInTransactionException", $.String, "DistributedTxIDInTransactionException");

    $.Constant({Static:true , Public:false}, "CannotAddToClosedDocument", $.String, "CannotAddToClosedDocument");

    $.Constant({Static:true , Public:false}, "DocumentAlreadyClosed", $.String, "DocumentAlreadyClosed");

    $.Constant({Static:true , Public:false}, "EventLogValue", $.String, "EventLogValue");

    $.Constant({Static:true , Public:false}, "EventLogEventIdValue", $.String, "EventLogEventIdValue");

    $.Constant({Static:true , Public:false}, "EventLogExceptionValue", $.String, "EventLogExceptionValue");

    $.Constant({Static:true , Public:false}, "EventLogSourceValue", $.String, "EventLogSourceValue");

    $.Constant({Static:true , Public:false}, "EventLogTraceValue", $.String, "EventLogTraceValue");

    $.Constant({Static:true , Public:false}, "NamedActivity", $.String, "NamedActivity");

    $.Constant({Static:true , Public:false}, "OperationInvalidOnAnEmptyDocument", $.String, "OperationInvalidOnAnEmptyDocument");

    $.Constant({Static:true , Public:false}, "TextNodeAlreadyPopulated", $.String, "TextNodeAlreadyPopulated");

    $.Constant({Static:true , Public:false}, "ThrowingException", $.String, "ThrowingException");

    $.Constant({Static:true , Public:false}, "TracingException", $.String, "TracingException");

    $.Constant({Static:true , Public:false}, "TraceCodeAppDomainUnloading", $.String, "TraceCodeAppDomainUnloading");

    $.Constant({Static:true , Public:false}, "TraceFailure", $.String, "TraceFailure");

    $.Constant({Static:true , Public:false}, "UnhandledException", $.String, "UnhandledException");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Transactions.Diagnostics");
/* class System.Transactions.Diagnostics.Activity */ 

(function Activity$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Diagnostics.Activity", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateActivity", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Guid"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "oldGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "newGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "emitTransfer", $.Boolean);

    $.Field({Static:false, Public:false}, "mustDispose", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.DiagnosticTrace */ 

(function DiagnosticTrace$Members () {
  var $, $thisType;
















































  JSIL.MakeStaticClass("System.Transactions.Diagnostics.DiagnosticTrace", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AddExceptionToTraceString", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildTraceString", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XPath.XPathNavigator"), [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.String, 
          $.String, $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
          $asm07.TypeRef("System.Exception"), $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildTraceString", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XPath.XPathNavigator"), [
          $asm27.TypeRef("System.Transactions.Diagnostics.PlainXmlWriter"), $asm0A.TypeRef("System.Diagnostics.TraceEventType"), 
          $.String, $.String, 
          $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), $asm07.TypeRef("System.Exception"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSourceString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "EventLogEntryTypeFromEventType", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Diagnostics.EventLogEntryType"), [$asm0A.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExitOrUnloadEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FixLevel", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Diagnostics.SourceLevels"), [$asm0A.TypeRef("System.Diagnostics.SourceLevels")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Critical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Error", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_HaveListeners", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Information", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Level", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Diagnostics.SourceLevels"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProcessId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProcessName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldCorrelate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceEventTypeNames", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceFailureCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceFailureThreshold", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TraceSource", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Diagnostics.TraceSource"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TracingEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Verbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Warning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetActivityId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetActivityId", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "LogEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.String, 
          $.String, $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
          $asm07.TypeRef("System.Exception"), $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogEvent", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogTraceFailure", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupSeverity", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Level", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Diagnostics.SourceLevels"))
    );

    $.ExternalMethod({Static:true , Public:false}, "set_TraceFailureCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "set_TraceFailureThreshold", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "set_TraceSource", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Diagnostics.TraceSource"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SetActivityId", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SetLevel", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Diagnostics.SourceLevels"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SetLevelThreadSafe", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Diagnostics.SourceLevels"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldTrace", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShutdownTracing", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "StackTraceString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceAndLogEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.String, 
          $.String, $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
          $asm07.TypeRef("System.Exception"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.String, 
          $.String, $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.String, 
          $.String, $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.String, 
          $.String, $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
          $asm07.TypeRef("System.Exception"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $.Boolean, $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceTransfer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExceptionHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.UnhandledExceptionEventArgs")])
    );

    $.ExternalMethod({Static:true , Public:false}, "XmlEncode", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "DefaultTraceListenerName", $.String, "Default");

    $.Field({Static:true , Public:false}, "traceSource", $asm0A.TypeRef("System.Diagnostics.TraceSource"), null);

    $.Field({Static:true , Public:false}, "tracingEnabled", $.Boolean, true);

    $.Field({Static:true , Public:false}, "haveListeners", $.Boolean, false);

    $.Field({Static:true , Public:false}, "traceEventTypeNames", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.String]));

    $.Field({Static:true , Public:false}, "localSyncObject", $.Object);

    $.Field({Static:true , Public:false}, "traceFailureCount", $.Int32, 0);

    $.Field({Static:true , Public:false}, "traceFailureThreshold", $.Int32, 0);

    $.Field({Static:true , Public:false}, "level", $asm0A.TypeRef("System.Diagnostics.SourceLevels"));

    $.Field({Static:true , Public:false}, "calledShutdown", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldCorrelate", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceVerbose", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceInformation", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceWarning", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceError", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceCritical", $.Boolean, false);

    $.Field({Static:true , Public:false}, "EmptyGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "AppDomainFriendlyName", $.String, null);

    $.Constant({Static:true , Public:false}, "subType", $.String, "");

    $.Constant({Static:true , Public:false}, "version", $.String, "1");

    $.Constant({Static:true , Public:false}, "traceFailureLogThreshold", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "EventLogSourceName", $.String, ".NET Runtime");

    $.Constant({Static:true , Public:false}, "TraceSourceName", $.String, "System.Transactions");

    $.Constant({Static:true , Public:false}, "TraceRecordVersion", $.String, "http://schemas.microsoft.com/2004/10/E2ETraceEvent/TraceRecord");


    function DiagnosticTrace__cctor () {
      $thisType.EmptyGuid = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DiagnosticTrace__cctor
    );

    $.Property({Static:true , Public:false}, "ProcessName", $.String);

    $.Property({Static:true , Public:false}, "ProcessId", $.Int32);

    $.Property({Static:true , Public:false}, "TraceSource", $asm0A.TypeRef("System.Diagnostics.TraceSource"));

    $.Property({Static:true , Public:false}, "TraceEventTypeNames", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.String]));

    $.Property({Static:true , Public:false}, "Level", $asm0A.TypeRef("System.Diagnostics.SourceLevels"));

    $.Property({Static:true , Public:false}, "HaveListeners", $.Boolean);

    $.Property({Static:true , Public:false}, "TracingEnabled", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldCorrelate", $.Boolean);

    $.Property({Static:true , Public:false}, "Critical", $.Boolean);

    $.Property({Static:true , Public:false}, "Error", $.Boolean);

    $.Property({Static:true , Public:false}, "Warning", $.Boolean);

    $.Property({Static:true , Public:false}, "Information", $.Boolean);

    $.Property({Static:true , Public:false}, "Verbose", $.Boolean);

    $.Property({Static:true , Public:false}, "TraceFailureCount", $.Int32);

    $.Property({Static:true , Public:false}, "TraceFailureThreshold", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.PlainXmlWriter */ 

(function PlainXmlWriter$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.XmlWriter"), 
      Name: "System.Transactions.Diagnostics.PlainXmlWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToNavigator", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "navigator", $asm27.TypeRef("System.Transactions.Diagnostics.TraceXPathNavigator"));

    $.Field({Static:false, Public:false}, "stack", $asm0A.TypeRef("System.Collections.Generic.Stack`1", [$.String]));

    $.Field({Static:false, Public:false}, "writingAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "currentAttributeName", $.String);

    $.Field({Static:false, Public:false}, "currentAttributePrefix", $.String);

    $.Field({Static:false, Public:false}, "currentAttributeNs", $.String);

    $.Field({Static:false, Public:false}, "format", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm2F.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm2F.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TraceRecord */ 

(function TraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Diagnostics.TraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "EventIdBase", $.String, "http://schemas.microsoft.com/2004/03/Transactions/");

    $.Constant({Static:true , Public:false}, "NamespaceSuffix", $.String, "TraceRecord");

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Transactions.Diagnostics.EnlistmentType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.Diagnostics.EnlistmentType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Volatile: 0, 
    Durable: 1, 
    PromotableSinglePhase: 2, 
  }
);

/* enum System.Transactions.Diagnostics.NotificationCall */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.Diagnostics.NotificationCall", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Prepare: 0, 
    Commit: 1, 
    Rollback: 2, 
    InDoubt: 3, 
    SinglePhaseCommit: 4, 
    Promote: 5, 
  }
);

/* enum System.Transactions.Diagnostics.EnlistmentCallback */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.Diagnostics.EnlistmentCallback", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Done: 0, 
    Prepared: 1, 
    ForceRollback: 2, 
    Committed: 3, 
    Aborted: 4, 
    InDoubt: 5, 
  }
);

/* enum System.Transactions.Diagnostics.TransactionScopeResult */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.Diagnostics.TransactionScopeResult", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    CreatedTransaction: 0, 
    UsingExistingCurrent: 1, 
    TransactionPassed: 2, 
    DependentTransactionPassed: 3, 
    NoTransaction: 4, 
  }
);

/* class System.Transactions.Diagnostics.TraceHelper */ 

(function TraceHelper$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Transactions.Diagnostics.TraceHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "WriteEnId", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTraceSource", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTxId", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionCreatedTraceRecord */ 

(function TransactionCreatedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionCreatedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionPromotedTraceRecord */ 

(function TransactionPromotedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionPromotedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"), 
          $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "localTxTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "distTxTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.EnlistmentTraceRecord */ 

(function EnlistmentTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.EnlistmentTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"), 
          $asm27.TypeRef("System.Transactions.Diagnostics.EnlistmentType"), $asm27.TypeRef("System.Transactions.EnlistmentOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "enTraceId", $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"));

    $.Field({Static:false, Public:false}, "enType", $asm27.TypeRef("System.Transactions.Diagnostics.EnlistmentType"));

    $.Field({Static:false, Public:false}, "enOptions", $asm27.TypeRef("System.Transactions.EnlistmentOptions"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.EnlistmentNotificationCallTraceRecord */ 

(function EnlistmentNotificationCallTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.EnlistmentNotificationCallTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"), 
          $asm27.TypeRef("System.Transactions.Diagnostics.NotificationCall")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "enTraceId", $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"));

    $.Field({Static:false, Public:false}, "notCall", $asm27.TypeRef("System.Transactions.Diagnostics.NotificationCall"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.EnlistmentCallbackPositiveTraceRecord */ 

(function EnlistmentCallbackPositiveTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.EnlistmentCallbackPositiveTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"), 
          $asm27.TypeRef("System.Transactions.Diagnostics.EnlistmentCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "enTraceId", $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"));

    $.Field({Static:false, Public:false}, "callback", $asm27.TypeRef("System.Transactions.Diagnostics.EnlistmentCallback"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.EnlistmentCallbackNegativeTraceRecord */ 

(function EnlistmentCallbackNegativeTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.EnlistmentCallbackNegativeTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"), 
          $asm27.TypeRef("System.Transactions.Diagnostics.EnlistmentCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "enTraceId", $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"));

    $.Field({Static:false, Public:false}, "callback", $asm27.TypeRef("System.Transactions.Diagnostics.EnlistmentCallback"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionCommitCalledTraceRecord */ 

(function TransactionCommitCalledTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionCommitCalledTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionRollbackCalledTraceRecord */ 

(function TransactionRollbackCalledTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionRollbackCalledTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionCommittedTraceRecord */ 

(function TransactionCommittedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionCommittedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionAbortedTraceRecord */ 

(function TransactionAbortedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionAbortedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionInDoubtTraceRecord */ 

(function TransactionInDoubtTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionInDoubtTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionScopeCreatedTraceRecord */ 

(function TransactionScopeCreatedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionScopeCreatedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"), 
          $asm27.TypeRef("System.Transactions.Diagnostics.TransactionScopeResult")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "txScopeResult", $asm27.TypeRef("System.Transactions.Diagnostics.TransactionScopeResult"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionScopeDisposedTraceRecord */ 

(function TransactionScopeDisposedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionScopeDisposedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionScopeIncompleteTraceRecord */ 

(function TransactionScopeIncompleteTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionScopeIncompleteTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionScopeNestedIncorrectlyTraceRecord */ 

(function TransactionScopeNestedIncorrectlyTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionScopeNestedIncorrectlyTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionScopeCurrentChangedTraceRecord */ 

(function TransactionScopeCurrentChangedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionScopeCurrentChangedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"), 
          $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "scopeTxTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "currentTxTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionScopeTimeoutTraceRecord */ 

(function TransactionScopeTimeoutTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionScopeTimeoutTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionTimeoutTraceRecord */ 

(function TransactionTimeoutTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionTimeoutTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.DependentCloneCreatedTraceRecord */ 

(function DependentCloneCreatedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.DependentCloneCreatedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"), 
          $asm27.TypeRef("System.Transactions.DependentCloneOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "option", $asm27.TypeRef("System.Transactions.DependentCloneOption"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.DependentCloneCompleteTraceRecord */ 

(function DependentCloneCompleteTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.DependentCloneCompleteTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.CloneCreatedTraceRecord */ 

(function CloneCreatedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.CloneCreatedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.RecoveryCompleteTraceRecord */ 

(function RecoveryCompleteTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.RecoveryCompleteTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "rmId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.ReenlistTraceRecord */ 

(function ReenlistTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.ReenlistTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "rmId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.DistributedTransactionManagerCreatedTraceRecord */ 

(function DistributedTransactionManagerCreatedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.DistributedTransactionManagerCreatedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "tmType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "nodeName", $.String);

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionSerializedTraceRecord */ 

(function TransactionSerializedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionSerializedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionDeserializedTraceRecord */ 

(function TransactionDeserializedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionDeserializedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "txTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TransactionExceptionTraceRecord */ 

(function TransactionExceptionTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.TransactionExceptionTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "exceptionMessage", $.String);

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.DictionaryTraceRecord */ 

(function DictionaryTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.DictionaryTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "dictionary", $asm07.TypeRef("System.Collections.IDictionary"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.ExceptionConsumedTraceRecord */ 

(function ExceptionConsumedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.ExceptionConsumedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "exception", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.InvalidOperationExceptionTraceRecord */ 

(function InvalidOperationExceptionTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.InvalidOperationExceptionTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "exceptionMessage", $.String);

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.InternalErrorTraceRecord */ 

(function InternalErrorTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.InternalErrorTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "exceptionMessage", $.String);

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.MethodEnteredTraceRecord */ 

(function MethodEnteredTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.MethodEnteredTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "methodName", $.String);

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.MethodExitedTraceRecord */ 

(function MethodExitedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.MethodExitedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "methodName", $.String);

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.ConfiguredDefaultTimeoutAdjustedTraceRecord */ 

(function ConfiguredDefaultTimeoutAdjustedTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Diagnostics.TraceRecord"), 
      Name: "System.Transactions.Diagnostics.ConfiguredDefaultTimeoutAdjustedTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "record", $.Type);

    $.Field({Static:false, Public:false}, "traceSource", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TraceXPathNavigator */ 

(function TraceXPathNavigator$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm2F.TypeRef("System.Xml.XPath.XPathNavigator"), 
      Name: "System.Transactions.Diagnostics.TraceXPathNavigator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSamePosition", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveTo", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstChild", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToId", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToParent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToPrevious", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToRoot", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "root", $asm27.TypeRef("System.Transactions.Diagnostics.TraceXPathNavigator+ElementNode"));

    $.Field({Static:false, Public:false}, "current", $asm27.TypeRef("System.Transactions.Diagnostics.TraceXPathNavigator+ElementNode"));

    $.Field({Static:false, Public:false}, "closed", $.Boolean);

    $.Field({Static:false, Public:false}, "state", $asm2F.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm2F.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm2F.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TraceXPathNavigator+ElementNode */ 

(function ElementNode$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Diagnostics.TraceXPathNavigator+ElementNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentAttribute", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Diagnostics.TraceXPathNavigator+AttributeNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNext", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "xmlns", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "childNodes", $asm07.TypeRef("System.Collections.Generic.List`1", [$.Type]));

    $.Field({Static:false, Public:false}, "parent", $.Type);

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm27.TypeRef("System.Transactions.Diagnostics.TraceXPathNavigator+AttributeNode")]));

    $.Field({Static:false, Public:false}, "text", $asm27.TypeRef("System.Transactions.Diagnostics.TraceXPathNavigator+TextNode"));

    $.Field({Static:false, Public:false}, "movedToText", $.Boolean);

    $.Field({Static:false, Public:false}, "attributeIndex", $.Int32);

    $.Field({Static:false, Public:false}, "elementIndex", $.Int32);

    $.Property({Static:false, Public:false}, "CurrentAttribute", $asm27.TypeRef("System.Transactions.Diagnostics.TraceXPathNavigator+AttributeNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TraceXPathNavigator+AttributeNode */ 

(function AttributeNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Diagnostics.TraceXPathNavigator+AttributeNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "xmlns", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "nodeValue", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Diagnostics.TraceXPathNavigator+TextNode */ 

(function TextNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Diagnostics.TraceXPathNavigator+TextNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "nodeValue", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Transactions.Configuration");
/* class System.Transactions.Configuration.ConfigurationStrings */ 

(function ConfigurationStrings$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Transactions.Configuration.ConfigurationStrings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultSettingsSectionPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MachineSettingsSectionPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSectionPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidTimeSpan", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.TimeSpan")])
    );

    $.Constant({Static:true , Public:false}, "DefaultDistributedTransactionManagerName", $.String, "");

    $.Constant({Static:true , Public:false}, "DefaultMaxTimeout", $.String, "00:10:00");

    $.Constant({Static:true , Public:false}, "DefaultTimeout", $.String, "00:01:00");

    $.Constant({Static:true , Public:false}, "TimeSpanZero", $.String, "00:00:00");

    $.Constant({Static:true , Public:false}, "DefaultSettingsSectionName", $.String, "defaultSettings");

    $.Constant({Static:true , Public:false}, "DistributedTransactionManagerName", $.String, "distributedTransactionManagerName");

    $.Constant({Static:true , Public:false}, "MaxTimeout", $.String, "maxTimeout");

    $.Constant({Static:true , Public:false}, "MachineSettingsSectionName", $.String, "machineSettings");

    $.Constant({Static:true , Public:false}, "SectionGroupName", $.String, "system.transactions");

    $.Constant({Static:true , Public:false}, "Timeout", $.String, "timeout");

    $.Property({Static:true , Public:false}, "DefaultSettingsSectionPath", $.String);

    $.Property({Static:true , Public:false}, "MachineSettingsSectionPath", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Configuration.DefaultSettingsSection */ 

(function DefaultSettingsSection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Transactions.Configuration.DefaultSettingsSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DistributedTransactionManagerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Timeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DistributedTransactionManagerName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.Property({Static:false, Public:true }, "DistributedTransactionManagerName", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["distributedTransactionManagerName"]; });

    $.Property({Static:false, Public:true }, "Timeout", $asm07.TypeRef("System.TimeSpan"))
      .Attribute($asm0E.TypeRef("System.Configuration.TimeSpanValidatorAttribute"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["timeout"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Configuration.MachineSettingsSection */ 

(function MachineSettingsSection$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Transactions.Configuration.MachineSettingsSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxTimeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxTimeout", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.Property({Static:false, Public:true }, "MaxTimeout", $asm07.TypeRef("System.TimeSpan"))
      .Attribute($asm0E.TypeRef("System.Configuration.TimeSpanValidatorAttribute"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["maxTimeout"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Configuration.TransactionsSectionGroup */ 

(function TransactionsSectionGroup$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationSectionGroup"), 
      Name: "System.Transactions.Configuration.TransactionsSectionGroup", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultSettings", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Configuration.DefaultSettingsSection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MachineSettings", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Configuration.MachineSettingsSection"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSectionGroup", 
      new JSIL.MethodSignature($.Type, [$asm0E.TypeRef("System.Configuration.Configuration")])
    );

    $.Property({Static:false, Public:true }, "DefaultSettings", $asm27.TypeRef("System.Transactions.Configuration.DefaultSettingsSection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["defaultSettings"]; });

    $.Property({Static:false, Public:true }, "MachineSettings", $asm27.TypeRef("System.Transactions.Configuration.MachineSettingsSection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["machineSettings"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Configuration.AppSettings */ 

(function AppSettings$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Transactions.Configuration.AppSettings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EnsureSettingsLoaded", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncludeDistributedTxIdInExceptionMessage", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "settingsInitalized", $asm07.TypeRef("System.Boolean"), false);

    $.Field({Static:true , Public:false}, "appSettingsLock", $.Object);

    $.Field({Static:true , Public:false}, "includeDistributedTxIdInExceptionMessage", $.Boolean);

    $.Property({Static:true , Public:false}, "IncludeDistributedTxIdInExceptionMessage", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Transactions.Oletx");
/* class System.Transactions.Oletx.CoTaskMemHandle */ 

(function CoTaskMemHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Transactions.Oletx.CoTaskMemHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CoTaskMemFree", 
      JSIL.MethodSignature.Action($.IntPtr), 
      {
        Module: "ole32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Transactions.Oletx.NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "GetNotificationFactory", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.IDtcProxyShimFactory")])]), 
      {
        Module: "System.Transactions.Dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "IntF", 
            Out: true
          }
        ]
      }
    );

    $.Field({Static:true , Public:false}, "S_OK", $.Int32, 0);

    $.Field({Static:true , Public:false}, "E_FAIL", $.Int32, -2147467259);

    $.Field({Static:true , Public:false}, "XACT_S_READONLY", $.Int32, 315394);

    $.Field({Static:true , Public:false}, "XACT_S_SINGLEPHASE", $.Int32, 315401);

    $.Field({Static:true , Public:false}, "XACT_E_ABORTED", $.Int32, -2147168231);

    $.Field({Static:true , Public:false}, "XACT_E_NOTRANSACTION", $.Int32, -2147168242);

    $.Field({Static:true , Public:false}, "XACT_E_CONNECTION_DOWN", $.Int32, -2147168228);

    $.Field({Static:true , Public:false}, "XACT_E_REENLISTTIMEOUT", $.Int32, -2147168226);

    $.Field({Static:true , Public:false}, "XACT_E_RECOVERYALREADYDONE", $.Int32, -2147167996);

    $.Field({Static:true , Public:false}, "XACT_E_TMNOTAVAILABLE", $.Int32, -2147168229);

    $.Field({Static:true , Public:false}, "XACT_E_INDOUBT", $.Int32, -2147168234);

    $.Field({Static:true , Public:false}, "XACT_E_ALREADYINPROGRESS", $.Int32, -2147168232);

    $.Field({Static:true , Public:false}, "XACT_E_TOOMANY_ENLISTMENTS", $.Int32, -2147167999);

    $.Field({Static:true , Public:false}, "XACT_E_PROTOCOL", $.Int32, -2147167995);

    $.Field({Static:true , Public:false}, "XACT_E_FIRST", $.Int32, -2147168256);

    $.Field({Static:true , Public:false}, "XACT_E_LAST", $.Int32, -2147168215);

    $.Field({Static:true , Public:false}, "XACT_E_NOTSUPPORTED", $.Int32, -2147168241);

    $.Field({Static:true , Public:false}, "XACT_E_NETWORK_TX_DISABLED", $.Int32, -2147168220);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* enum System.Transactions.Oletx.ShimNotificationType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.Oletx.ShimNotificationType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Phase0RequestNotify: 1, 
    VoteRequestNotify: 2, 
    PrepareRequestNotify: 3, 
    CommitRequestNotify: 4, 
    AbortRequestNotify: 5, 
    CommittedNotify: 6, 
    AbortedNotify: 7, 
    InDoubtNotify: 8, 
    EnlistmentTmDownNotify: 9, 
    ResourceManagerTmDownNotify: 10, 
  }
);

/* enum System.Transactions.Oletx.OletxPrepareVoteType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.Oletx.OletxPrepareVoteType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ReadOnly: 0, 
    SinglePhase: 1, 
    Prepared: 2, 
    Failed: 3, 
    InDoubt: 4, 
  }
);

/* enum System.Transactions.Oletx.OletxTransactionOutcome */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.Oletx.OletxTransactionOutcome", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotKnownYet: 0, 
    Committed: 1, 
    Aborted: 2, 
  }
);

/* enum System.Transactions.Oletx.OletxTransactionIsolationLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.Oletx.OletxTransactionIsolationLevel", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ISOLATIONLEVEL_UNSPECIFIED: -1, 
    ISOLATIONLEVEL_CHAOS: 16, 
    ISOLATIONLEVEL_BROWSE: 256, 
    ISOLATIONLEVEL_READUNCOMMITTED: 256, 
    ISOLATIONLEVEL_CURSORSTABILITY: 4096, 
    ISOLATIONLEVEL_READCOMMITTED: 4096, 
    ISOLATIONLEVEL_REPEATABLEREAD: 65536, 
    ISOLATIONLEVEL_SERIALIZABLE: 1048576, 
    ISOLATIONLEVEL_ISOLATED: 1048576, 
  }
);

/* enum System.Transactions.Oletx.OletxTransactionIsoFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.Oletx.OletxTransactionIsoFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    ISOFLAG_NONE: 0, 
    ISOFLAG_RETAIN_COMMIT_DC: 1, 
    ISOFLAG_RETAIN_COMMIT: 2, 
    ISOFLAG_RETAIN_COMMIT_NO: 3, 
    ISOFLAG_RETAIN_ABORT_DC: 4, 
    ISOFLAG_RETAIN_DONTCARE: 5, 
    ISOFLAG_RETAIN_ABORT: 8, 
    ISOFLAG_RETAIN_BOTH: 10, 
    ISOFLAG_RETAIN_ABORT_NO: 12, 
    ISOFLAG_RETAIN_NONE: 15, 
    ISOFLAG_OPTIMISTIC: 16, 
    ISOFLAG_READONLY: 32, 
  }
);

/* enum System.Transactions.Oletx.OletxXacttc */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.Oletx.OletxXacttc", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    XACTTC_NONE: 0, 
    XACTTC_SYNC_PHASEONE: 1, 
    XACTTC_SYNC: 2, 
    XACTTC_SYNC_PHASETWO: 2, 
    XACTTC_ASYNC_PHASEONE: 4, 
    XACTTC_ASYNC: 4, 
  }
);

/* enum System.Transactions.Oletx.OletxTransactionStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.Oletx.OletxTransactionStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OLETX_TRANSACTION_STATUS_NONE: 0, 
    OLETX_TRANSACTION_STATUS_OPENNORMAL: 1, 
    OLETX_TRANSACTION_STATUS_OPENREFUSED: 2, 
    OLETX_TRANSACTION_STATUS_OPEN: 3, 
    OLETX_TRANSACTION_STATUS_PREPARING: 4, 
    OLETX_TRANSACTION_STATUS_PREPARED: 8, 
    OLETX_TRANSACTION_STATUS_PREPARERETAINING: 16, 
    OLETX_TRANSACTION_STATUS_PREPARERETAINED: 32, 
    OLETX_TRANSACTION_STATUS_COMMITTING: 64, 
    OLETX_TRANSACTION_STATUS_COMMITRETAINING: 128, 
    OLETX_TRANSACTION_STATUS_ABORTING: 256, 
    OLETX_TRANSACTION_STATUS_ABORTED: 512, 
    OLETX_TRANSACTION_STATUS_COMMITTED: 1024, 
    OLETX_TRANSACTION_STATUS_HEURISTIC_ABORT: 2048, 
    OLETX_TRANSACTION_STATUS_HEURISTIC_COMMIT: 4096, 
    OLETX_TRANSACTION_STATUS_HEURISTIC_DAMAGE: 8192, 
    OLETX_TRANSACTION_STATUS_HEURISTIC_DANGER: 16384, 
    OLETX_TRANSACTION_STATUS_FORCED_ABORT: 32768, 
    OLETX_TRANSACTION_STATUS_FORCED_COMMIT: 65536, 
    OLETX_TRANSACTION_STATUS_INDOUBT: 131072, 
    OLETX_TRANSACTION_STATUS_CLOSED: 262144, 
    OLETX_TRANSACTION_STATUS_NOTPREPARED: 524227, 
    OLETX_TRANSACTION_STATUS_ALL: 524287, 
  }
);

/* struct System.Transactions.Oletx.OletxXactTransInfo */ 

(function OletxXactTransInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Transactions.Oletx.OletxXactTransInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionIsolationLevel")])
    );

    $.Field({Static:false, Public:false}, "uow", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "isoLevel", $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionIsolationLevel"));

    $.Field({Static:false, Public:false}, "isoFlags", $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionIsoFlags"));

    $.Field({Static:false, Public:false}, "grfTCSupported", $.Int32);

    $.Field({Static:false, Public:false}, "grfRMSupported", $.Int32);

    $.Field({Static:false, Public:false}, "grfTCSupportedRetaining", $.Int32);

    $.Field({Static:false, Public:false}, "grfRMSupportedRetaining", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* interface System.Transactions.Oletx.IVoterBallotShim */ 

JSIL.MakeInterface(
  "System.Transactions.Oletx.IVoterBallotShim", false, [], function ($) {
    $.Method({}, "Vote", JSIL.MethodSignature.Action($.Boolean));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["A5FAB903-21CB-49eb-93AE-EF72CD45169E"]; });

/* interface System.Transactions.Oletx.IPhase0EnlistmentShim */ 

JSIL.MakeInterface(
  "System.Transactions.Oletx.IPhase0EnlistmentShim", false, [], function ($) {
    $.Method({}, "Unenlist", JSIL.MethodSignature.Void);
    $.Method({}, "Phase0Done", JSIL.MethodSignature.Action($.Boolean));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["55FF6514-948A-4307-A692-73B84E2AF53E"]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

/* interface System.Transactions.Oletx.IEnlistmentShim */ 

JSIL.MakeInterface(
  "System.Transactions.Oletx.IEnlistmentShim", false, [], function ($) {
    $.Method({}, "PrepareRequestDone", JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.OletxPrepareVoteType")));
    $.Method({}, "CommitRequestDone", JSIL.MethodSignature.Void);
    $.Method({}, "AbortRequestDone", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["5EC35E09-B285-422c-83F5-1372384A42CC"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* interface System.Transactions.Oletx.ITransactionShim */ 

JSIL.MakeInterface(
  "System.Transactions.Oletx.ITransactionShim", false, [], function ($) {
    $.Method({}, "Commit", JSIL.MethodSignature.Void);
    $.Method({}, "Abort", JSIL.MethodSignature.Void);
    $.Method({}, "GetITransactionNative", JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.IDtcTransaction")])));
    $.Method({}, "Export", new JSIL.MethodSignature(null, [
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.CoTaskMemHandle")])
        ]));
    $.Method({}, "CreateVoter", new JSIL.MethodSignature(null, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.IVoterBallotShim")])]));
    $.Method({}, "GetPropagationToken", new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.CoTaskMemHandle")])]));
    $.Method({}, "Phase0Enlist", new JSIL.MethodSignature(null, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.IPhase0EnlistmentShim")])]));
    $.Method({}, "GetTransactionDoNotUse", JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["279031AF-B00E-42e6-A617-79747E22DD22"]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

/* interface System.Transactions.Oletx.IResourceManagerShim */ 

JSIL.MakeInterface(
  "System.Transactions.Oletx.IResourceManagerShim", false, [], function ($) {
    $.Method({}, "Enlist", new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.Oletx.ITransactionShim"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.IEnlistmentShim")])
        ]));
    $.Method({}, "Reenlist", new JSIL.MethodSignature(null, [
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.OletxTransactionOutcome")])
        ]));
    $.Method({}, "ReenlistComplete", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["27C73B91-99F5-46d5-A247-732A1A16529E"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

/* interface System.Transactions.Oletx.IDtcProxyShimFactory */ 

JSIL.MakeInterface(
  "System.Transactions.Oletx.IDtcProxyShimFactory", false, [], function ($) {
    $.Method({}, "ConnectToProxy", new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Guid"), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.CoTaskMemHandle")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.IResourceManagerShim")])
        ]));
    $.Method({}, "GetNotification", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.ShimNotificationType")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.CoTaskMemHandle")])
        ]));
    $.Method({}, "ReleaseNotificationLock", JSIL.MethodSignature.Void);
    $.Method({}, "BeginTransaction", new JSIL.MethodSignature(null, [
          $.UInt32, $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionIsolationLevel"), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.ITransactionShim")])
        ]));
    $.Method({}, "CreateResourceManager", new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Guid"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.IResourceManagerShim")])
        ]));
    $.Method({}, "Import", new JSIL.MethodSignature(null, [
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.OletxTransactionIsolationLevel")]), $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.ITransactionShim")])
        ]));
    $.Method({}, "ReceiveTransaction", new JSIL.MethodSignature(null, [
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.OletxTransactionIsolationLevel")]), $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.ITransactionShim")])
        ]));
    $.Method({}, "CreateTransactionShim", new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.IDtcTransaction"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.OletxTransactionIsolationLevel")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.ITransactionShim")])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; })
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["467C8BCB-BDDE-4885-B143-317107468275"]; });

/* interface System.Transactions.Oletx.ITransactionNativeInternal */ 

JSIL.MakeInterface(
  "System.Transactions.Oletx.ITransactionNativeInternal", false, [], function ($) {
    $.Method({}, "Commit", new JSIL.MethodSignature(null, [
          $.Int32, $asm27.TypeRef("System.Transactions.Oletx.OletxXacttc"), 
          $.Int32
        ]));
    $.Method({}, "Abort", new JSIL.MethodSignature(null, [
          $.IntPtr, $.Int32, 
          $.Int32
        ]));
    $.Method({}, "GetTransactionInfo", JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm27.TypeRef("System.Transactions.Oletx.OletxXactTransInfo")])));
  }, [])
  .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0fb15084-af41-11ce-bd2b-204c4f4f5020"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* class System.Transactions.Oletx.DtcTransactionManager */ 

(function DtcTransactionManager$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Oletx.DtcTransactionManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AdjustTimeout", 
      new JSIL.MethodSignature($.UInt32, [$asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProxyShimFactory", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.IDtcProxyShimFactory"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Whereabouts", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseProxy", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nodeName", $.String);

    $.Field({Static:false, Public:false}, "oletxTm", $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"));

    $.Field({Static:false, Public:false}, "proxyShimFactory", $asm27.TypeRef("System.Transactions.Oletx.IDtcProxyShimFactory"));

    $.Field({Static:false, Public:false}, "whereaboutsSize", $.UInt32);

    $.Field({Static:false, Public:false}, "whereabouts", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "initialized", $.Boolean);

    $.Property({Static:false, Public:false}, "ProxyShimFactory", $asm27.TypeRef("System.Transactions.Oletx.IDtcProxyShimFactory"));

    $.Property({Static:false, Public:false}, "Whereabouts", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.HandleTable */ 

(function HandleTable$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Transactions.Oletx.HandleTable", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "AllocHandle", 
      new JSIL.MethodSignature($.IntPtr, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindAvailableHandle", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "FindHandle", 
      new JSIL.MethodSignature($.Object, [$.IntPtr])
    );

    $.ExternalMethod({Static:true , Public:true }, "FreeHandle", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr])
    );

    $.Field({Static:true , Public:false}, "handleTable", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.Object]));

    $.Field({Static:true , Public:false}, "syncRoot", $.Object);

    $.Field({Static:true , Public:false}, "currentHandle", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.OletxTransaction */ 

(function OletxTransaction$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Oletx.OletxTransaction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.RealOletxTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DependentClone", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Oletx.OletxDependentTransaction"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), [
          $asm07.TypeRef("System.Guid"), $asm27.TypeRef("System.Transactions.ISinglePhaseNotificationInternal"), 
          $.Boolean, $asm27.TypeRef("System.Transactions.EnlistmentOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), [$asm27.TypeRef("System.Transactions.ISinglePhaseNotificationInternal"), $asm27.TypeRef("System.Transactions.EnlistmentOptions")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), [$asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"), $asm27.TypeRef("System.Transactions.EnlistmentOptions")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DistributedTxId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Identifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerException", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsolationLevel", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.IsolationLevel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RealTransaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.RealOletxTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Status", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionTraceId", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRealObject", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Rollback", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "realOletxTransaction", $asm27.TypeRef("System.Transactions.Oletx.RealOletxTransaction"));

    $.Constant({Static:true , Public:false}, "propagationTokenString", $.String, "OletxTransactionPropagationToken");

    $.Field({Static:false, Public:false}, "propagationTokenForDeserialize", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "disposed", $.Int32);

    $.Field({Static:false, Public:false}, "savedLtmPromotedTransaction", $asm27.TypeRef("System.Transactions.Transaction"));

    $.Field({Static:false, Public:false}, "traceIdentifier", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Property({Static:false, Public:false}, "RealTransaction", $asm27.TypeRef("System.Transactions.Oletx.RealOletxTransaction"));

    $.Property({Static:false, Public:false}, "Identifier", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "DistributedTxId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "Status", $asm27.TypeRef("System.Transactions.TransactionStatus"));

    $.Property({Static:false, Public:false}, "InnerException", $asm07.TypeRef("System.Exception"));

    $.Property({Static:false, Public:false}, "TransactionTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsolationLevel", $asm27.TypeRef("System.Transactions.IsolationLevel"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 1 */ $asm07.TypeRef("System.Runtime.Serialization.IObjectReference")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.OletxCommittableTransaction */ 

(function OletxCommittableTransaction$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"), 
      Name: "System.Transactions.Oletx.OletxCommittableTransaction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.RealOletxTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginCommit", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CommitCalled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "commitCalled", $.Boolean);

    $.Property({Static:false, Public:false}, "CommitCalled", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.OletxDependentTransaction */ 

(function OletxDependentTransaction$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"), 
      Name: "System.Transactions.Oletx.OletxDependentTransaction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Oletx.RealOletxTransaction"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Complete", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "volatileEnlistmentContainer", $asm27.TypeRef("System.Transactions.Oletx.OletxVolatileEnlistmentContainer"));

    $.Field({Static:false, Public:false}, "completed", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.OletxRecoveryInformation */ 

(function OletxRecoveryInformation$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Oletx.OletxRecoveryInformation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:false}, "proxyRecoveryInformation", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.OletxBaseEnlistment */ 

(function OletxBaseEnlistment$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Oletx.OletxBaseEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Oletx.OletxResourceManager"), $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToEnlistmentTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DistributedTxId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalTraceIdentifier", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OletxTransaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveFromEnlistmentTable", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "enlistmentGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "oletxResourceManager", $asm27.TypeRef("System.Transactions.Oletx.OletxResourceManager"));

    $.Field({Static:false, Public:false}, "oletxTransaction", $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"));

    $.Field({Static:false, Public:false}, "transactionGuidString", $.String);

    $.Field({Static:false, Public:false}, "enlistmentId", $.Int32);

    $.Field({Static:false, Public:false}, "traceIdentifier", $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"));

    $.Field({Static:false, Public:false}, "internalEnlistment", $asm27.TypeRef("System.Transactions.InternalEnlistment"));

    $.Property({Static:false, Public:false}, "OletxTransaction", $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"));

    $.Property({Static:false, Public:false}, "DistributedTxId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "InternalTraceIdentifier", $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.OletxEnlistment */ 

(function OletxEnlistment$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Oletx.OletxBaseEnlistment"), 
      Name: "System.Transactions.Oletx.OletxEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"), 
          $asm07.TypeRef("System.Guid"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Oletx.OletxResourceManager"), $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"), $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionStatus"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm27.TypeRef("System.Transactions.Oletx.OletxResourceManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aborted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Aborted", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AbortRequest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CommitRequest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Committed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnlistmentDone", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishEnlistment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ForceRollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ForceRollback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnlistmentNotification", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnlistmentShim", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.IEnlistmentShim"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnlistmentTraceId", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InternalEnlistment", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Phase0EnlistmentShim", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.IPhase0EnlistmentShim"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProxyPrepareInfoByteArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_State", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.OletxEnlistment+OletxEnlistmentState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionIdentifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRecoveryInformation", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InDoubt", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InDoubt", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Phase0Request", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Prepared", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "PrepareRequest", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EnlistmentShim", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.IEnlistmentShim"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InternalEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Phase0EnlistmentShim", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.IPhase0EnlistmentShim"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_State", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.OletxEnlistment+OletxEnlistmentState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "TMDown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TMDownFromInternalRM", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"))
    );

    $.Field({Static:false, Public:false}, "enlistmentShim", $asm27.TypeRef("System.Transactions.Oletx.IEnlistmentShim"));

    $.Field({Static:false, Public:false}, "phase0Shim", $asm27.TypeRef("System.Transactions.Oletx.IPhase0EnlistmentShim"));

    $.Field({Static:false, Public:false}, "canDoSinglePhase", $.Boolean);

    $.Field({Static:false, Public:false}, "iEnlistmentNotification", $asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"));

    $.Field({Static:false, Public:false}, "proxyPrepareInfoByteArray", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "state", $asm27.TypeRef("System.Transactions.Oletx.OletxEnlistment+OletxEnlistmentState"));

    $.Field({Static:false, Public:false}, "isSinglePhase", $.Boolean);

    $.Field({Static:false, Public:false}, "transactionGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "phase1Handle", $.IntPtr);

    $.Field({Static:false, Public:false}, "fabricateRollback", $.Boolean);

    $.Field({Static:false, Public:false}, "tmWentDown", $.Boolean);

    $.Field({Static:false, Public:false}, "aborting", $.Boolean);

    $.Field({Static:false, Public:false}, "prepareInfoByteArray", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "TransactionIdentifier", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "EnlistmentNotification", $asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"));

    $.Property({Static:false, Public:false}, "EnlistmentShim", $asm27.TypeRef("System.Transactions.Oletx.IEnlistmentShim"));

    $.Property({Static:false, Public:false}, "Phase0EnlistmentShim", $asm27.TypeRef("System.Transactions.Oletx.IPhase0EnlistmentShim"));

    $.Property({Static:false, Public:false}, "State", $asm27.TypeRef("System.Transactions.Oletx.OletxEnlistment+OletxEnlistmentState"));

    $.Property({Static:false, Public:false}, "ProxyPrepareInfoByteArray", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "EnlistmentTraceId", $asm27.TypeRef("System.Transactions.EnlistmentTraceIdentifier"));

    $.Property({Static:false, Public:true , Virtual:true }, "InternalEnlistment", $asm27.TypeRef("System.Transactions.InternalEnlistment"));

    $.ImplementInterfaces(
      /* 0 */ $asm27.TypeRef("System.Transactions.IPromotedEnlistment")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Transactions.Oletx.OletxEnlistment+OletxEnlistmentState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.Oletx.OletxEnlistment+OletxEnlistmentState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Active: 0, 
    Phase0Preparing: 1, 
    Preparing: 2, 
    SinglePhaseCommitting: 3, 
    Prepared: 4, 
    Committing: 5, 
    Committed: 6, 
    Aborting: 7, 
    Aborted: 8, 
    InDoubt: 9, 
    Done: 10, 
  }
);

/* class System.Transactions.Oletx.OletxResourceManager */ 

(function OletxResourceManager$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Oletx.OletxResourceManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"), $asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallProxyReenlistComplete", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistDurable", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Oletx.OletxEnlistment"), [
          $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"), $.Boolean, 
          $asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"), $asm27.TypeRef("System.Transactions.EnlistmentOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RecoveryCompleteCalledByApplication", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResourceManagerShim", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.IResourceManagerShim"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RecoveryComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Reenlist", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Oletx.OletxEnlistment"), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReenlistThread", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveFromReenlistPending", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.OletxEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RecoveryCompleteCalledByApplication", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResourceManagerShim", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.IResourceManagerShim"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StartReenlistThread", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "TMDown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TMDownFromInternalRM", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"))
    );

    $.Field({Static:false, Public:false}, "resourceManagerIdentifier", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "resourceManagerShim", $asm27.TypeRef("System.Transactions.Oletx.IResourceManagerShim"));

    $.Field({Static:false, Public:false}, "enlistmentHashtable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "volatileEnlistmentHashtable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "oletxTransactionManager", $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"));

    $.Field({Static:false, Public:false}, "reenlistList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "reenlistPendingList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "reenlistThreadTimer", $asm07.TypeRef("System.Threading.Timer"));

    $.Field({Static:false, Public:false}, "reenlistThread", $asm07.TypeRef("System.Threading.Thread"));

    $.Field({Static:false, Public:false}, "recoveryCompleteCalledByApplication", $.Boolean);

    $.Property({Static:false, Public:false}, "ResourceManagerShim", $asm27.TypeRef("System.Transactions.Oletx.IResourceManagerShim"));

    $.Property({Static:false, Public:false}, "RecoveryCompleteCalledByApplication", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.RealOletxTransaction */ 

(function RealOletxTransaction$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Oletx.RealOletxTransaction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"), $asm27.TypeRef("System.Transactions.Oletx.ITransactionShim"), 
          $asm27.TypeRef("System.Transactions.Oletx.OutcomeEnlistment"), $asm07.TypeRef("System.Guid"), 
          $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionIsolationLevel"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDependentClone", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Oletx.OletxVolatileEnlistmentContainer"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Commit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CommonEnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), [
          $asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecrementUndecidedEnlistments", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), [
          $asm27.TypeRef("System.Transactions.ISinglePhaseNotificationInternal"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnlistVolatile", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), [
          $asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FireOutcome", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DistributedTxId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Doomed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Identifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalTransaction", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OletxTransactionManagerInstance", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Status", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TooLateForEnlistments", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionIsolationLevel", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.IsolationLevel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionShim", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.ITransactionShim"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionTraceId", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TxGuid", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UndecidedEnlistments", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementUndecidedEnlistments", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OletxTransactionCreated", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OletxTransactionDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseContainerLock", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Oletx.OletxPhase0VolatileEnlistmentContainer"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Rollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InternalTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TooLateForEnlistments", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "TakeContainerLock", 
      new JSIL.MethodSignature(null, [$asm27.TypeRef("System.Transactions.Oletx.OletxPhase0VolatileEnlistmentContainer"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TMDown", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "oletxTransactionManager", $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"));

    $.Field({Static:false, Public:false}, "transactionShim", $asm27.TypeRef("System.Transactions.Oletx.ITransactionShim"));

    $.Field({Static:false, Public:false}, "txGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "isolationLevel", $asm27.TypeRef("System.Transactions.IsolationLevel"));

    $.Field({Static:false, Public:false}, "innerException", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "status", $asm27.TypeRef("System.Transactions.TransactionStatus"));

    $.Field({Static:false, Public:false}, "undisposedOletxTransactionCount", $.Int32);

    $.Field({Static:false, Public:false}, "phase0EnlistVolatilementContainerList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "phase1EnlistVolatilementContainer", $asm27.TypeRef("System.Transactions.Oletx.OletxPhase1VolatileEnlistmentContainer"));

    $.Field({Static:false, Public:false}, "outcomeEnlistment", $asm27.TypeRef("System.Transactions.Oletx.OutcomeEnlistment"));

    $.Field({Static:false, Public:false}, "undecidedEnlistmentCount", $.Int32);

    $.Field({Static:false, Public:false}, "doomed", $.Boolean);

    $.Field({Static:false, Public:false}, "enlistmentCount", $.Int32);

    $.Field({Static:false, Public:false}, "creationTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "lastStateChangeTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "traceIdentifier", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));

    $.Field({Static:false, Public:false}, "committableTransaction", $asm27.TypeRef("System.Transactions.Oletx.OletxCommittableTransaction"));

    $.Field({Static:false, Public:false}, "internalClone", $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction"));

    $.Field({Static:false, Public:false}, "tooLateForEnlistments", $.Boolean);

    $.Field({Static:false, Public:false}, "internalTransaction", $asm27.TypeRef("System.Transactions.InternalTransaction"));

    $.Property({Static:false, Public:false}, "InternalTransaction", $asm27.TypeRef("System.Transactions.InternalTransaction"));

    $.Property({Static:false, Public:false}, "OletxTransactionManagerInstance", $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"));

    $.Property({Static:false, Public:false}, "Identifier", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "DistributedTxId", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "TransactionIsolationLevel", $asm27.TypeRef("System.Transactions.IsolationLevel"));

    $.Property({Static:false, Public:false}, "Status", $asm27.TypeRef("System.Transactions.TransactionStatus"));

    $.Property({Static:false, Public:false}, "TxGuid", $asm07.TypeRef("System.Guid"));

    $.Property({Static:false, Public:false}, "UndecidedEnlistments", $.Int32);

    $.Property({Static:false, Public:false}, "Doomed", $.Boolean);

    $.Property({Static:false, Public:false}, "TransactionShim", $asm27.TypeRef("System.Transactions.Oletx.ITransactionShim"));

    $.Property({Static:false, Public:false}, "TooLateForEnlistments", $.Boolean);

    $.Property({Static:false, Public:false}, "TransactionTraceId", $asm27.TypeRef("System.Transactions.TransactionTraceIdentifier"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.OutcomeEnlistment */ 

(function OutcomeEnlistment$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Oletx.OutcomeEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Aborted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Committed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionIdentifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "InDoubt", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOutcomeFunction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRealTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.RealOletxTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TMDown", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TransactionIsInDoubt", 
      new JSIL.MethodSignature($.Boolean, [$asm27.TypeRef("System.Transactions.Oletx.RealOletxTransaction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnregisterOutcomeCallback", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "weakRealTransaction", $asm07.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "txGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "haveIssuedOutcome", $.Boolean);

    $.Field({Static:false, Public:false}, "savedStatus", $asm27.TypeRef("System.Transactions.TransactionStatus"));

    $.Property({Static:false, Public:false}, "TransactionIdentifier", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.OletxTransactionManager */ 

(function OletxTransactionManager$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Oletx.OletxTransactionManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertIsolationLevel", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Oletx.OletxTransactionIsolationLevel"), [$asm27.TypeRef("System.Transactions.IsolationLevel")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertIsolationLevelFromProxyValue", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.IsolationLevel"), [$asm27.TypeRef("System.Transactions.Oletx.OletxTransactionIsolationLevel")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTransaction", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Oletx.OletxCommittableTransaction"), [$asm27.TypeRef("System.Transactions.TransactionOptions")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindOrRegisterResourceManager", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Oletx.OletxResourceManager"), [$asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ClassSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CreationNodeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtcTransactionManager", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.DtcTransactionManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NodeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShimWaitHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.EventWaitHandle"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ProxyException", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.InteropServices.COMException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReenlistTransaction", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Oletx.OletxEnlistment"), [
          $asm07.TypeRef("System.Guid"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterResourceManager", 
      new JSIL.MethodSignature($asm27.TypeRef("System.Transactions.Oletx.OletxResourceManager"), [$asm07.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReinitializeProxy", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResourceManagerRecoveryComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ShimNotificationCallback", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "isolationLevelProperty", $asm27.TypeRef("System.Transactions.IsolationLevel"));

    $.Field({Static:false, Public:false}, "timeoutProperty", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "configuredTransactionOptions", $asm27.TypeRef("System.Transactions.TransactionOptions"));

    $.Field({Static:true , Public:false}, "classSyncObject", $.Object);

    $.Field({Static:true , Public:false}, "resourceManagerHashTable", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "resourceManagerHashTableLock", $asm07.TypeRef("System.Threading.ReaderWriterLock"));

    $.Field({Static:true , Public:false}, "processingTmDown", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "dtcTransactionManagerLock", $asm07.TypeRef("System.Threading.ReaderWriterLock"));

    $.Field({Static:false, Public:false}, "dtcTransactionManager", $asm27.TypeRef("System.Transactions.Oletx.DtcTransactionManager"));

    $.Field({Static:false, Public:false}, "internalResourceManager", $asm27.TypeRef("System.Transactions.Oletx.OletxInternalResourceManager"));

    $.Field({Static:true , Public:false}, "proxyShimFactory", $asm27.TypeRef("System.Transactions.Oletx.IDtcProxyShimFactory"));

    $.Field({Static:true , Public:false}, "shimWaitHandle", $asm07.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "nodeNameField", $.String);

    $.Property({Static:true , Public:false}, "ShimWaitHandle", $asm07.TypeRef("System.Threading.EventWaitHandle"));

    $.Property({Static:false, Public:false}, "CreationNodeName", $.String);

    $.Property({Static:false, Public:false}, "DtcTransactionManager", $asm27.TypeRef("System.Transactions.Oletx.DtcTransactionManager"));

    $.Property({Static:false, Public:false}, "NodeName", $.String);

    $.Property({Static:true , Public:false}, "ClassSyncObject", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.OletxInternalResourceManager */ 

(function OletxInternalResourceManager$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Oletx.OletxInternalResourceManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CallReenlistComplete", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Identifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "TMDown", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "oletxTm", $asm27.TypeRef("System.Transactions.Oletx.OletxTransactionManager"));

    $.Field({Static:false, Public:false}, "myGuid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "resourceManagerShim", $asm27.TypeRef("System.Transactions.Oletx.IResourceManagerShim"));

    $.Property({Static:false, Public:false}, "Identifier", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.OletxVolatileEnlistmentContainer */ 

(function OletxVolatileEnlistmentContainer$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Transactions.Oletx.OletxVolatileEnlistmentContainer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Aborted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddDependentClone", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Committed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DecrementOutstandingNotifications", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DependentCloneCompleted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransactionIdentifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubt", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OutcomeFromTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RollbackFromTransaction", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "realOletxTransaction", $asm27.TypeRef("System.Transactions.Oletx.RealOletxTransaction"));

    $.Field({Static:false, Public:false}, "enlistmentList", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "phase", $.Int32);

    $.Field({Static:false, Public:false}, "outstandingNotifications", $.Int32);

    $.Field({Static:false, Public:false}, "collectedVoteYes", $.Boolean);

    $.Field({Static:false, Public:false}, "incompleteDependentClones", $.Int32);

    $.Field({Static:false, Public:false}, "alreadyVoted", $.Boolean);

    $.Property({Static:false, Public:false}, "TransactionIdentifier", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.OletxPhase0VolatileEnlistmentContainer */ 

(function OletxPhase0VolatileEnlistmentContainer$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Oletx.OletxVolatileEnlistmentContainer"), 
      Name: "System.Transactions.Oletx.OletxPhase0VolatileEnlistmentContainer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.RealOletxTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Aborted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddDependentClone", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.OletxVolatileEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Committed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DecrementOutstandingNotifications", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DependentCloneCompleted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NewEnlistmentsAllowed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Phase0EnlistmentShim", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.IPhase0EnlistmentShim"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubt", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OutcomeFromTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionStatus"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Phase0Request", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RollbackFromTransaction", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Phase0EnlistmentShim", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.IPhase0EnlistmentShim"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TMDown", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "phase0EnlistmentShim", $asm27.TypeRef("System.Transactions.Oletx.IPhase0EnlistmentShim"));

    $.Field({Static:false, Public:false}, "aborting", $.Boolean);

    $.Field({Static:false, Public:false}, "tmWentDown", $.Boolean);

    $.Property({Static:false, Public:false}, "NewEnlistmentsAllowed", $.Boolean);

    $.Property({Static:false, Public:false}, "Phase0EnlistmentShim", $asm27.TypeRef("System.Transactions.Oletx.IPhase0EnlistmentShim"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.OletxPhase1VolatileEnlistmentContainer */ 

(function OletxPhase1VolatileEnlistmentContainer$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Oletx.OletxVolatileEnlistmentContainer"), 
      Name: "System.Transactions.Oletx.OletxPhase1VolatileEnlistmentContainer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.RealOletxTransaction"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Aborted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddDependentClone", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.OletxVolatileEnlistment"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Committed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DecrementOutstandingNotifications", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DependentCloneCompleted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VoterBallotShim", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.Oletx.IVoterBallotShim"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InDoubt", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OutcomeFromTransaction", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.TransactionStatus"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RollbackFromTransaction", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_VoterBallotShim", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.IVoterBallotShim"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VoteRequest", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "voterBallotShim", $asm27.TypeRef("System.Transactions.Oletx.IVoterBallotShim"));

    $.Field({Static:false, Public:false}, "voterHandle", $.IntPtr);

    $.Property({Static:false, Public:false}, "VoterBallotShim", $asm27.TypeRef("System.Transactions.Oletx.IVoterBallotShim"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Transactions.Oletx.OletxVolatileEnlistment */ 

(function OletxVolatileEnlistment$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm27.TypeRef("System.Transactions.Oletx.OletxBaseEnlistment"), 
      Name: "System.Transactions.Oletx.OletxVolatileEnlistment", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"), $asm27.TypeRef("System.Transactions.EnlistmentOptions"), 
          $asm27.TypeRef("System.Transactions.Oletx.OletxTransaction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Commit", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InDoubt", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Prepare", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.Oletx.OletxVolatileEnlistmentContainer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Rollback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IPromotedEnlistment.Aborted", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), "Aborted");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IPromotedEnlistment.Aborted", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Overrides($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), "Aborted");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IPromotedEnlistment.Committed", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), "Committed");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IPromotedEnlistment.EnlistmentDone", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), "EnlistmentDone");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IPromotedEnlistment.ForceRollback", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), "ForceRollback");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IPromotedEnlistment.ForceRollback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Overrides($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), "ForceRollback");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IPromotedEnlistment.get_InternalEnlistment", 
      JSIL.MethodSignature.Return($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    )
      .Overrides($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), "get_InternalEnlistment");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IPromotedEnlistment.GetRecoveryInformation", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Overrides($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), "GetRecoveryInformation");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IPromotedEnlistment.InDoubt", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), "InDoubt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IPromotedEnlistment.InDoubt", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Overrides($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), "InDoubt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IPromotedEnlistment.Prepared", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), "Prepared");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Transactions.IPromotedEnlistment.set_InternalEnlistment", 
      JSIL.MethodSignature.Action($asm27.TypeRef("System.Transactions.InternalEnlistment"))
    )
      .Overrides($asm27.TypeRef("System.Transactions.IPromotedEnlistment"), "set_InternalEnlistment");

    $.Field({Static:false, Public:false}, "iEnlistmentNotification", $asm27.TypeRef("System.Transactions.IEnlistmentNotificationInternal"));

    $.Field({Static:false, Public:false}, "state", $asm27.TypeRef("System.Transactions.Oletx.OletxVolatileEnlistment+OletxVolatileEnlistmentState"));

    $.Field({Static:false, Public:false}, "container", $asm27.TypeRef("System.Transactions.Oletx.OletxVolatileEnlistmentContainer"));

    $.Field({Static:false, Public:false}, "enlistDuringPrepareRequired", $.Boolean);

    $.Field({Static:false, Public:false}, "pendingOutcome", $asm27.TypeRef("System.Transactions.TransactionStatus"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Transactions.IPromotedEnlistment.InternalEnlistment", $asm27.TypeRef("System.Transactions.InternalEnlistment"));

    $.ImplementInterfaces(
      /* 0 */ $asm27.TypeRef("System.Transactions.IPromotedEnlistment")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Transactions.Oletx.OletxVolatileEnlistment+OletxVolatileEnlistmentState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Transactions.Oletx.OletxVolatileEnlistment+OletxVolatileEnlistmentState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Active: 0, 
    Preparing: 1, 
    Committing: 2, 
    Aborting: 3, 
    Prepared: 4, 
    Aborted: 5, 
    InDoubt: 6, 
    Done: 7, 
  }
);

