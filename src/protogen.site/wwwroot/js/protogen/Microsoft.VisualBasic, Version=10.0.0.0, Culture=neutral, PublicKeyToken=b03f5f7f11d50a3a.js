/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm05 = JSIL.DeclareAssembly("Microsoft.VisualBasic, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.VisualBasic");
/* class Microsoft.VisualBasic.Collection */ 

(function Collection$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Collection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $.Object, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIterator", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.WeakReference"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustEnumeratorsHelper", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"), $asm05.TypeRef("Microsoft.VisualBasic.ForEachEnum+AdjustIndexType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustEnumeratorsOnNodeInserted", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustEnumeratorsOnNodeRemoved", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ICollectionCount", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ICollectionIsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ICollectionSyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IListIsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsFixedSize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IListIsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IListItem", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFirstListNode", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm07.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData")
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ICollectionCopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ICollectionGetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IListAdd", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IListClear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IListContains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IListIndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IListInsert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IListRemove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IListRemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "RemoveAt");

    $.ExternalMethod({Static:false, Public:false}, "IndexCheck", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Globalization.CultureInfo"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalItemsList", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Collection+FastList"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm07.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), "OnDeserialization");

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveIterator", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.WeakReference"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IListItem", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "set_Item");

    $.Constant({Static:true , Public:false}, "SERIALIZATIONKEY_KEYS", $.String, "Keys");

    $.Constant({Static:true , Public:false}, "SERIALIZATIONKEY_KEYSCOUNT", $.String, "KeysCount");

    $.Constant({Static:true , Public:false}, "SERIALIZATIONKEY_VALUES", $.String, "Values");

    $.Constant({Static:true , Public:false}, "SERIALIZATIONKEY_CULTUREINFO", $.String, "CultureInfo");

    $.Field({Static:false, Public:false}, "m_DeserializationInfo", $asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"));

    $.Field({Static:false, Public:false}, "m_KeyedNodesHash", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm05.TypeRef("Microsoft.VisualBasic.Collection+Node")]));

    $.Field({Static:false, Public:false}, "m_ItemsList", $asm05.TypeRef("Microsoft.VisualBasic.Collection+FastList"));

    $.Field({Static:false, Public:false}, "m_Iterators", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "m_CultureInfo", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Item", $.Object)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "ICollectionCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "ICollectionIsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ICollectionSyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "IListIsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IListIsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IListItem", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IList"), 
      /* 2 */ $asm07.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 3 */ $asm07.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm05.Microsoft.VisualBasic.Collection_CollectionDebugView.__Type__]; })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

/* class Microsoft.VisualBasic.Collection+Node */ 

(function Node$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Collection+Node", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.Field({Static:false, Public:false}, "m_Value", $.Object);

    $.Field({Static:false, Public:false}, "m_Key", $.String);

    $.Field({Static:false, Public:false}, "m_Next", $.Type);

    $.Field({Static:false, Public:false}, "m_Prev", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Collection+CollectionDebugView */ 

(function CollectionDebugView$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Collection+CollectionDebugView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Collection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.Field({Static:false, Public:false}, "m_InstanceBeingWatched", $asm05.TypeRef("Microsoft.VisualBasic.Collection"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm07.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm07.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Collection+FastList */ 

(function FastList$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Collection+FastList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "DataIsEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeleteNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"), $asm05.TypeRef("Microsoft.VisualBasic.Collection+Node")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFirstListNode", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNodeAtIndex", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.Collection+Node")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOfValue", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("Microsoft.VisualBasic.Collection+Node")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"), $asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"), 
          $asm05.TypeRef("Microsoft.VisualBasic.Collection+Node")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertAfter", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"), $asm05.TypeRef("Microsoft.VisualBasic.Collection+Node")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertBefore", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"), $asm05.TypeRef("Microsoft.VisualBasic.Collection+Node")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveAt", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveNode", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"))
    );

    $.Field({Static:false, Public:false}, "m_StartOfList", $asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"));

    $.Field({Static:false, Public:false}, "m_EndOfList", $asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"));

    $.Field({Static:false, Public:false}, "m_Count", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.VisualBasic.Collection+KeyValuePair */ 

(function KeyValuePair$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.Collection+KeyValuePair", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "m_Key", $.Object);

    $.Field({Static:false, Public:false}, "m_Value", $.Object);

    $.Property({Static:false, Public:true }, "Key", $.Object);

    $.Property({Static:false, Public:true }, "Value", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.ControlChars */ 

(function ControlChars$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.ControlChars", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:true }, "CrLf", $.String, "\r\n");

    $.Constant({Static:true , Public:true }, "NewLine", $.String, "\r\n");

    $.Constant({Static:true , Public:true }, "Cr", $.Char, "\r");

    $.Constant({Static:true , Public:true }, "Lf", $.Char, "\n");

    $.Constant({Static:true , Public:true }, "Back", $.Char, "\x08");

    $.Constant({Static:true , Public:true }, "FormFeed", $.Char, "\x0c");

    $.Constant({Static:true , Public:true }, "Tab", $.Char, "\t");

    $.Constant({Static:true , Public:true }, "VerticalTab", $.Char, "\x0b");

    $.Constant({Static:true , Public:true }, "NullChar", $.Char, "\x00");

    $.Constant({Static:true , Public:true }, "Quote", $.Char, "\"");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Conversion */ 

(function Conversion$Members () {
  var $, $thisType;












































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Conversion", 
      IsPublic: true, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CTypeDynamic", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CTypeDynamic", 
      new JSIL.MethodSignature("!!0", [$.Object], ["TargetType"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ErrorToString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "ErrorToString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Fix", 
      new JSIL.MethodSignature($.Int16, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "Fix", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Fix", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "Fix", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "Fix", 
      new JSIL.MethodSignature($.Single, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "Fix", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Fix", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Hex", 
      new JSIL.MethodSignature($.String, [$.SByte])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "Hex", 
      new JSIL.MethodSignature($.String, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "Hex", 
      new JSIL.MethodSignature($.String, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "Hex", 
      new JSIL.MethodSignature($.String, [$.UInt16])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "Hex", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Hex", 
      new JSIL.MethodSignature($.String, [$.UInt32])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "Hex", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "Hex", 
      new JSIL.MethodSignature($.String, [$.UInt64])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "Hex", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexOrOctValue", 
      new JSIL.MethodSignature($.Double, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Int", 
      new JSIL.MethodSignature($.Int16, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "Int", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Int", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "Int", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "Int", 
      new JSIL.MethodSignature($.Single, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "Int", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Int", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Oct", 
      new JSIL.MethodSignature($.String, [$.SByte])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "Oct", 
      new JSIL.MethodSignature($.String, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "Oct", 
      new JSIL.MethodSignature($.String, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "Oct", 
      new JSIL.MethodSignature($.String, [$.UInt16])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "Oct", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Oct", 
      new JSIL.MethodSignature($.String, [$.UInt32])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "Oct", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "Oct", 
      new JSIL.MethodSignature($.String, [$.UInt64])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "Oct", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseInputField", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm05.TypeRef("Microsoft.VisualBasic.VariantType")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ShiftVTBits", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Str", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Val", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Val", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "Val", 
      new JSIL.MethodSignature($.Double, [$.Object])
    );

    $.Constant({Static:true , Public:false}, "NUMPRS_LEADING_WHITE", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "NUMPRS_TRAILING_WHITE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "NUMPRS_LEADING_PLUS", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "NUMPRS_TRAILING_PLUS", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "NUMPRS_LEADING_MINUS", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "NUMPRS_TRAILING_MINUS", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "NUMPRS_HEX_OCT", $.Int32, 64);

    $.Constant({Static:true , Public:false}, "NUMPRS_PARENS", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "NUMPRS_DECIMAL", $.Int32, 256);

    $.Constant({Static:true , Public:false}, "NUMPRS_THOUSANDS", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "NUMPRS_CURRENCY", $.Int32, 1024);

    $.Constant({Static:true , Public:false}, "NUMPRS_EXPONENT", $.Int32, 2048);

    $.Constant({Static:true , Public:false}, "NUMPRS_USE_ALL", $.Int32, 4096);

    $.Constant({Static:true , Public:false}, "NUMPRS_STD", $.Int32, 8191);

    $.Constant({Static:true , Public:false}, "NUMPRS_NEG", $.Int32, 65536);

    $.Constant({Static:true , Public:false}, "NUMPRS_INEXACT", $.Int32, 131072);

    $.Constant({Static:true , Public:false}, "VTBIT_EMPTY", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "VTBIT_NULL", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "VTBIT_I2", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "VTBIT_I4", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "VTBIT_R4", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "VTBIT_R8", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "VTBIT_CY", $.Int32, 64);

    $.Constant({Static:true , Public:false}, "VTBIT_DATE", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "VTBIT_BSTR", $.Int32, 256);

    $.Constant({Static:true , Public:false}, "VTBIT_OBJECT", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "VTBIT_ERROR", $.Int32, 1024);

    $.Constant({Static:true , Public:false}, "VTBIT_BOOL", $.Int32, 2048);

    $.Constant({Static:true , Public:false}, "VTBIT_VARIANT", $.Int32, 4096);

    $.Constant({Static:true , Public:false}, "VTBIT_DATAOBJECT", $.Int32, 8192);

    $.Constant({Static:true , Public:false}, "VTBIT_DECIMAL", $.Int32, 16384);

    $.Constant({Static:true , Public:false}, "VTBIT_BYTE", $.Int32, 131072);

    $.Constant({Static:true , Public:false}, "VTBIT_CHAR", $.Int32, 262144);

    $.Constant({Static:true , Public:false}, "VTBIT_LONG", $.Int32, 1048576);

    $.Constant({Static:true , Public:false}, "MAX_ERR_NUMBER", $.Int32, 65535);

    $.Constant({Static:true , Public:false}, "LOCALE_NOUSEROVERRIDE", $.Int32, -2147483648);

    $.Constant({Static:true , Public:false}, "LCID_US_ENGLISH", $.Int32, 1033);

    $.Constant({Static:true , Public:false}, "PRSFLAGS", $.Int32, 2388);

    $.Constant({Static:true , Public:false}, "VTBITS", $.Int32, 16428);

    $.Constant({Static:true , Public:false}, "TYPE_INDICATOR_INT16", $.Char, "%");

    $.Constant({Static:true , Public:false}, "TYPE_INDICATOR_INT32", $.Char, "&");

    $.Constant({Static:true , Public:false}, "TYPE_INDICATOR_SINGLE", $.Char, "!");

    $.Constant({Static:true , Public:false}, "TYPE_INDICATOR_DECIMAL", $.Char, "@");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute"));

})();

/* class Microsoft.VisualBasic.DateAndTime */ 

(function DateAndTime$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.DateAndTime", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "DateAdd", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [
          $asm05.TypeRef("Microsoft.VisualBasic.DateInterval"), $.Double, 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DateAdd", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [
          $.String, $.Double, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DateDiff", 
      new JSIL.MethodSignature($.Int64, [
          $asm05.TypeRef("Microsoft.VisualBasic.DateInterval"), $asm07.TypeRef("System.DateTime"), 
          $asm07.TypeRef("System.DateTime"), $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FirstWeekOfYear")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DateDiff", 
      new JSIL.MethodSignature($.Int64, [
          $.String, $.Object, 
          $.Object, $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FirstWeekOfYear")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateIntervalFromString", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.DateInterval"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "DatePart", 
      new JSIL.MethodSignature($.Int32, [
          $asm05.TypeRef("Microsoft.VisualBasic.DateInterval"), $asm07.TypeRef("System.DateTime"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek"), $asm05.TypeRef("Microsoft.VisualBasic.FirstWeekOfYear")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DatePart", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Object, 
          $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek"), $asm05.TypeRef("Microsoft.VisualBasic.FirstWeekOfYear")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DateSerial", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DateValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Day", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentCalendar", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.Calendar"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DateString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Now", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TimeOfDay", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Timer", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TimeString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Today", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDayOfWeek", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime"), $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Hour", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDBCSCulture", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "Minute", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Month", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "MonthName", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "Second", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_DateString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "set_TimeOfDay", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:true , Public:true }, "set_TimeString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "set_Today", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TimeSerial", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TimeValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Weekday", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime"), $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WeekdayName", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $.Boolean, 
          $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Year", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime")])
    );

    $.Field({Static:true , Public:false}, "AcceptedDateFormatsDBCS", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "AcceptedDateFormatsSBCS", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:true , Public:true }, "Today", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:true , Public:true }, "Now", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:true , Public:true }, "TimeOfDay", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:true , Public:true }, "TimeString", $.String);

    $.Property({Static:true , Public:true }, "DateString", $.String);

    $.Property({Static:true , Public:true }, "Timer", $.Double);

    $.Property({Static:true , Public:false}, "CurrentCalendar", $asm07.TypeRef("System.Globalization.Calendar"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute"));

})();

/* class Microsoft.VisualBasic.ErrObject */ 

(function ErrObject$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.ErrObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CaptureException", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "CaptureException", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Exception"), $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FilterDefaultMessage", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Erl", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HelpContext", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HelpFile", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastDllError", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Number", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetException", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeHelpLink", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "MapErrorNumber", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "MapExceptionToNumber", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MapNumberToException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseHelpLink", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Raise", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HelpContext", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HelpFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Number", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Source", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUnmappedError", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_curException", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "m_curErl", $.Int32);

    $.Field({Static:false, Public:false}, "m_curNumber", $.Int32);

    $.Field({Static:false, Public:false}, "m_curSource", $.String);

    $.Field({Static:false, Public:false}, "m_curDescription", $.String);

    $.Field({Static:false, Public:false}, "m_curHelpFile", $.String);

    $.Field({Static:false, Public:false}, "m_curHelpContext", $.Int32);

    $.Field({Static:false, Public:false}, "m_NumberIsSet", $.Boolean);

    $.Field({Static:false, Public:false}, "m_ClearOnCapture", $.Boolean);

    $.Field({Static:false, Public:false}, "m_SourceIsSet", $.Boolean);

    $.Field({Static:false, Public:false}, "m_DescriptionIsSet", $.Boolean);

    $.Field({Static:false, Public:false}, "m_HelpFileIsSet", $.Boolean);

    $.Field({Static:false, Public:false}, "m_HelpContextIsSet", $.Boolean);

    $.Property({Static:false, Public:true }, "Erl", $.Int32);

    $.Property({Static:false, Public:true }, "Number", $.Int32);

    $.Property({Static:false, Public:true }, "Source", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "HelpFile", $.String);

    $.Property({Static:false, Public:true }, "HelpContext", $.Int32);

    $.Property({Static:false, Public:true }, "LastDllError", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.FileSystem */ 

(function FileSystem$Members () {
  var $, $thisType;








































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.FileSystem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AddFileToList", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.AssemblyData"), $.Int32, 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ChDir", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "ChDrive", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:true , Public:true }, "ChDrive", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckFileOpen", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.AssemblyData"), $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.OpenModeTypes")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckInputCapable", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CloseAllFiles", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CloseAllFiles", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.AssemblyData"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CurDir", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "CurDir", 
      new JSIL.MethodSignature($.String, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dir", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Dir", 
      new JSIL.MethodSignature($.String, [$.String, $asm05.TypeRef("Microsoft.VisualBasic.FileAttribute")])
    );

    $.ExternalMethod({Static:true , Public:true }, "EOF", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileAttr", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.OpenMode"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileClose", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Int32]))
    )
      .Parameter(0, "FileNumbers", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "FileCopy", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.ValueType")]), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Array")]), 
          $.Int64, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int16]), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Char]), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Single]), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Double]), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Decimal")]), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $.Int64, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")]), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileGetObject", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Object]), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileLen", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileOpen", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.OpenMode"), $asm05.TypeRef("Microsoft.VisualBasic.OpenAccess"), 
          $asm05.TypeRef("Microsoft.VisualBasic.OpenShare"), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $.Object
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202"]; });

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.ValueType"), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Array"), 
          $.Int64, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Boolean, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Byte, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int16, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int64, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Char, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Single, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Double, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Decimal"), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.Int64, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePut", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.DateTime"), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FilePutObject", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileWidth", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "FreeFile", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAttr", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.FileAttribute"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChannelObj", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File"), [$asm07.TypeRef("System.Reflection.Assembly"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChannelOrNull", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File"), [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.AssemblyData"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStream", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File"), [$asm07.TypeRef("System.Reflection.Assembly"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStream", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File"), [
          $asm07.TypeRef("System.Reflection.Assembly"), $.Int32, 
          $asm05.TypeRef("Microsoft.VisualBasic.OpenModeTypes")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeWriteDateFormatInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.DateTimeFormatInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Input", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Input", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Input", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Input", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int16])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Input", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Input", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Input", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Char])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Input", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Input", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Double])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Input", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Decimal")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Input", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Input", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "InputString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalCloseFile", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.AssemblyData"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Kill", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "LineInput", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Loc", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lock", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "Lock", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lock", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int64, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LOF", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "MkDir", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenModeTypesFromOpenMode", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.OpenModeTypes"), [$asm05.TypeRef("Microsoft.VisualBasic.OpenMode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PathContainsWildcards", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Print", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "Output", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "PrintLine", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "Output", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Rename", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "RmDir", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Seek", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetAttr", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("Microsoft.VisualBasic.FileAttribute")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SPC", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.SpcInfo"), [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "TAB", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.TabInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "TAB", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.TabInfo"), [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "Unlock", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "Unlock", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "Unlock", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int64, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsafeValidDrive", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateAccess", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.OpenAccess"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateGetPutRecordNumber", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMode", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.OpenMode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateShare", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.OpenShare"))
    );

    $.ExternalMethod({Static:true , Public:false}, "VB6CheckPathname", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.AssemblyData"), $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.OpenMode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "vbIOOpenFile", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.Assembly"), $.Int32, 
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.OpenMode"), 
          $asm05.TypeRef("Microsoft.VisualBasic.OpenAccess"), $asm05.TypeRef("Microsoft.VisualBasic.OpenShare"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Write", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "Output", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "WriteLine", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "Output", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Constant({Static:true , Public:false}, "ERROR_ACCESS_DENIED", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "ERROR_FILE_NOT_FOUND", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "ERROR_BAD_NETPATH", $.Int32, 53);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_PARAMETER", $.Int32, 87);

    $.Constant({Static:true , Public:false}, "ERROR_WRITE_PROTECT", $.Int32, 19);

    $.Constant({Static:true , Public:false}, "ERROR_FILE_EXISTS", $.Int32, 80);

    $.Constant({Static:true , Public:false}, "ERROR_ALREADY_EXISTS", $.Int32, 183);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_ACCESS", $.Int32, 12);

    $.Constant({Static:true , Public:false}, "ERROR_NOT_SAME_DEVICE", $.Int32, 17);

    $.Constant({Static:true , Public:false}, "FIRST_LOCAL_CHANNEL", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "LAST_LOCAL_CHANNEL", $.Int32, 255);

    $.Constant({Static:true , Public:false}, "A_NORMAL", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "A_RDONLY", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "A_HIDDEN", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "A_SYSTEM", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "A_VOLID", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "A_SUBDIR", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "A_ARCH", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "A_ALLBITS", $.Int32, 63);

    $.Constant({Static:true , Public:false}, "sTimeFormat", $.String, "T");

    $.Constant({Static:true , Public:false}, "sDateFormat", $.String, "d");

    $.Constant({Static:true , Public:false}, "sDateTimeFormat", $.String, "F");

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_WriteDateFormatInfo", $asm07.TypeRef("System.Globalization.DateTimeFormatInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute"))
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* enum Microsoft.VisualBasic.FileSystem+vbFileType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.FileSystem+vbFileType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    vbPrintFile: 0, 
    vbWriteFile: 1, 
  }
);

/* class Microsoft.VisualBasic.Financial */ 

(function Financial$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Financial", 
      IsPublic: true, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "DDB", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double, $.Double, 
          $.Double
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FV", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double, $.Double, 
          $asm05.TypeRef("Microsoft.VisualBasic.DueDate")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FV_Internal", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double, $.Double, 
          $asm05.TypeRef("Microsoft.VisualBasic.DueDate")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IPmt", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double, $.Double, 
          $.Double, $asm05.TypeRef("Microsoft.VisualBasic.DueDate")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IRR", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Double])]), $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "LDoNPV", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Double])]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LEvalRate", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double, $.Double, 
          $.Double, $asm05.TypeRef("Microsoft.VisualBasic.DueDate")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MIRR", 
      new JSIL.MethodSignature($.Double, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Double])]), $.Double, 
          $.Double
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "NPer", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double, $.Double, 
          $asm05.TypeRef("Microsoft.VisualBasic.DueDate")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "NPV", 
      new JSIL.MethodSignature($.Double, [$.Double, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Double])])])
    );

    $.ExternalMethod({Static:true , Public:false}, "OptPV2", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Double])]), $.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "Pmt", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double, $.Double, 
          $asm05.TypeRef("Microsoft.VisualBasic.DueDate")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PMT_Internal", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double, $.Double, 
          $asm05.TypeRef("Microsoft.VisualBasic.DueDate")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PPmt", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double, $.Double, 
          $.Double, $asm05.TypeRef("Microsoft.VisualBasic.DueDate")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PV", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double, $.Double, 
          $asm05.TypeRef("Microsoft.VisualBasic.DueDate")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Rate", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double, $.Double, 
          $asm05.TypeRef("Microsoft.VisualBasic.DueDate"), $.Double
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SLN", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SYD", 
      new JSIL.MethodSignature($.Double, [
          $.Double, $.Double, 
          $.Double, $.Double
        ])
    );

    $.Constant({Static:true , Public:false}, "cnL_IT_STEP", $.Double, 1E-05);

    $.Constant({Static:true , Public:false}, "cnL_IT_EPSILON", $.Double, 1E-07);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute"));

})();

/* enum Microsoft.VisualBasic.VariantType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.VariantType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    Null: 1, 
    Short: 2, 
    Integer: 3, 
    Single: 4, 
    Double: 5, 
    Currency: 6, 
    Date: 7, 
    String: 8, 
    Object: 9, 
    Error: 10, 
    Boolean: 11, 
    Variant: 12, 
    DataObject: 13, 
    Decimal: 14, 
    Byte: 17, 
    Char: 18, 
    Long: 20, 
    UserDefinedType: 36, 
    Array: 8192, 
  }
);

/* enum Microsoft.VisualBasic.AppWinStyle */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.AppWinStyle", 
    BaseType: $asm07.TypeRef("System.Int16"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Hide: 0, 
    NormalFocus: 1, 
    MinimizedFocus: 2, 
    MaximizedFocus: 3, 
    NormalNoFocus: 4, 
    MinimizedNoFocus: 6, 
  }
);

/* enum Microsoft.VisualBasic.CallType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CallType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Method: 1, 
    Get: 2, 
    Let: 4, 
    Set: 8, 
  }
);

/* enum Microsoft.VisualBasic.CompareMethod */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompareMethod", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Binary: 0, 
    Text: 1, 
  }
);

/* enum Microsoft.VisualBasic.DateFormat */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.DateFormat", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    GeneralDate: 0, 
    LongDate: 1, 
    ShortDate: 2, 
    LongTime: 3, 
    ShortTime: 4, 
  }
);

/* enum Microsoft.VisualBasic.FirstDayOfWeek */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.FirstDayOfWeek", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    System: 0, 
    Sunday: 1, 
    Monday: 2, 
    Tuesday: 3, 
    Wednesday: 4, 
    Thursday: 5, 
    Friday: 6, 
    Saturday: 7, 
  }
);

/* enum Microsoft.VisualBasic.FileAttribute */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.FileAttribute", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Normal: 0, 
    ReadOnly: 1, 
    Hidden: 2, 
    System: 4, 
    Volume: 8, 
    Directory: 16, 
    Archive: 32, 
  }
);

/* enum Microsoft.VisualBasic.FirstWeekOfYear */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.FirstWeekOfYear", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    System: 0, 
    Jan1: 1, 
    FirstFourDays: 2, 
    FirstFullWeek: 3, 
  }
);

/* enum Microsoft.VisualBasic.VbStrConv */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.VbStrConv", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Uppercase: 1, 
    Lowercase: 2, 
    ProperCase: 3, 
    Wide: 4, 
    Narrow: 8, 
    Katakana: 16, 
    Hiragana: 32, 
    SimplifiedChinese: 256, 
    TraditionalChinese: 512, 
    LinguisticCasing: 1024, 
  }
);

/* enum Microsoft.VisualBasic.TriState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.TriState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    UseDefault: -2, 
    True: -1, 
    False: 0, 
  }
);

/* enum Microsoft.VisualBasic.DateInterval */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.DateInterval", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Year: 0, 
    Quarter: 1, 
    Month: 2, 
    DayOfYear: 3, 
    Day: 4, 
    WeekOfYear: 5, 
    Weekday: 6, 
    Hour: 7, 
    Minute: 8, 
    Second: 9, 
  }
);

/* enum Microsoft.VisualBasic.DueDate */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.DueDate", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    EndOfPeriod: 0, 
    BegOfPeriod: 1, 
  }
);

/* enum Microsoft.VisualBasic.OpenMode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.OpenMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Input: 1, 
    Output: 2, 
    Random: 4, 
    Append: 8, 
    Binary: 32, 
  }
);

/* enum Microsoft.VisualBasic.OpenModeTypes */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.OpenModeTypes", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Any: -1, 
    Input: 1, 
    Output: 2, 
    Random: 4, 
    Append: 8, 
    Binary: 32, 
  }
);

/* enum Microsoft.VisualBasic.OpenAccess */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.OpenAccess", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: -1, 
    Read: 1, 
    Write: 2, 
    ReadWrite: 3, 
  }
);

/* enum Microsoft.VisualBasic.OpenShare */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.OpenShare", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: -1, 
    LockReadWrite: 0, 
    LockWrite: 1, 
    LockRead: 2, 
    Shared: 3, 
  }
);

/* struct Microsoft.VisualBasic.TabInfo */ 

(function TabInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.TabInfo", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Column", $.Int16);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* struct Microsoft.VisualBasic.SpcInfo */ 

(function SpcInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.SpcInfo", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Count", $.Int16);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* enum Microsoft.VisualBasic.MsgBoxResult */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.MsgBoxResult", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Ok: 1, 
    Cancel: 2, 
    Abort: 3, 
    Retry: 4, 
    Ignore: 5, 
    Yes: 6, 
    No: 7, 
  }
);

/* enum Microsoft.VisualBasic.MsgBoxStyle */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.MsgBoxStyle", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    OkOnly: 0, 
    ApplicationModal: 0, 
    DefaultButton1: 0, 
    OkCancel: 1, 
    AbortRetryIgnore: 2, 
    YesNoCancel: 3, 
    YesNo: 4, 
    RetryCancel: 5, 
    Critical: 16, 
    Question: 32, 
    Exclamation: 48, 
    Information: 64, 
    DefaultButton2: 256, 
    DefaultButton3: 512, 
    SystemModal: 4096, 
    MsgBoxHelp: 16384, 
    MsgBoxSetForeground: 65536, 
    MsgBoxRight: 524288, 
    MsgBoxRtlReading: 1048576, 
  }
);

/* class Microsoft.VisualBasic.VBFixedStringAttribute */ 

(function VBFixedStringAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.VisualBasic.VBFixedStringAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_Length", $.Int32);

    $.Property({Static:false, Public:true }, "Length", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Field]; });

})();

/* class Microsoft.VisualBasic.VBFixedArrayAttribute */ 

(function VBFixedArrayAttribute$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.VisualBasic.VBFixedArrayAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bounds", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "FirstBound", $.Int32);

    $.Field({Static:false, Public:false}, "SecondBound", $.Int32);

    $.Property({Static:false, Public:true }, "Bounds", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:true }, "Length", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Field]; });

})();

/* class Microsoft.VisualBasic.ComClassAttribute */ 

(function ComClassAttribute$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.VisualBasic.ComClassAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClassID", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventID", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InterfaceID", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InterfaceShadows", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InterfaceShadows", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_ClassID", $.String);

    $.Field({Static:false, Public:false}, "m_InterfaceID", $.String);

    $.Field({Static:false, Public:false}, "m_EventID", $.String);

    $.Field({Static:false, Public:false}, "m_InterfaceShadows", $.Boolean);

    $.Property({Static:false, Public:true }, "ClassID", $.String);

    $.Property({Static:false, Public:true }, "InterfaceID", $.String);

    $.Property({Static:false, Public:true }, "EventID", $.String);

    $.Property({Static:false, Public:true }, "InterfaceShadows", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class Microsoft.VisualBasic.MyGroupCollectionAttribute */ 

(function MyGroupCollectionAttribute$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.VisualBasic.MyGroupCollectionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreateMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultInstanceAlias", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisposeMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MyGroupName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_NameOfBaseTypeToCollect", $.String);

    $.Field({Static:false, Public:false}, "m_NameOfCreateMethod", $.String);

    $.Field({Static:false, Public:false}, "m_NameOfDisposeMethod", $.String);

    $.Field({Static:false, Public:false}, "m_DefaultInstanceAlias", $.String);

    $.Property({Static:false, Public:true }, "MyGroupName", $.String);

    $.Property({Static:false, Public:true }, "CreateMethod", $.String);

    $.Property({Static:false, Public:true }, "DisposeMethod", $.String);

    $.Property({Static:false, Public:true }, "DefaultInstanceAlias", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

})();

/* class Microsoft.VisualBasic.HideModuleNameAttribute */ 

(function HideModuleNameAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.VisualBasic.HideModuleNameAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.VisualBasic.Globals */ 

(function Globals$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Globals", 
      IsPublic: true, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_ScriptEngine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ScriptEngineBuildVersion", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ScriptEngineMajorVersion", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ScriptEngineMinorVersion", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Property({Static:true , Public:true }, "ScriptEngine", $.String);

    $.Property({Static:true , Public:true }, "ScriptEngineMajorVersion", $.Int32);

    $.Property({Static:true , Public:true }, "ScriptEngineMinorVersion", $.Int32);

    $.Property({Static:true , Public:true }, "ScriptEngineBuildVersion", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute"));

})();

/* class Microsoft.VisualBasic.Information */ 

(function Information$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Information", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Erl", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "Err", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.ErrObject"))
    );

    $.ExternalMethod({Static:true , Public:true }, "IsArray", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsDate", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsDBNull", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsError", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsNothing", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsNumeric", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOldNumericTypeCode", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsReference", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "LBound", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "LegacyTypeNameOfCOMObject", 
      new JSIL.MethodSignature($.String, [$.Object, $.Boolean])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OldVBFriendlyNameOfTypeName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "OldVbTypeName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "QBColor", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "RGB", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SystemTypeName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeName", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNameOfCOMObject", 
      new JSIL.MethodSignature($.String, [$.Object, $.Boolean])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "UBound", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "VarType", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.VariantType"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "VarTypeFromComType", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.VariantType"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "VbTypeName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "QBColorTable", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Constant({Static:true , Public:false}, "COMObjectName", $.String, "__ComObject");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute"));

})();

/* class Microsoft.VisualBasic.Interaction */ 

(function Interaction$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Interaction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "AppActivate", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AppActivate", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AppActivateHelper", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Beep", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CallByName", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.CallType"), $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(3, "Args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "CheckPathComponent", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Choose", 
      new JSIL.MethodSignature($.Object, [$.Double, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "Choice", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Command", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateObject", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DeleteSetting", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Environ", 
      new JSIL.MethodSignature($.String, [$.Int32])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Environ", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormRegKey", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAllSettings", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String, JSIL.ArrayDimensionParameter(2)]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetSetting", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTitleFromAssembly", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IIf", 
      new JSIL.MethodSignature($.Object, [
          $.Boolean, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IIf", 
      new JSIL.MethodSignature("!!0", [
          $.Boolean, "!!0", 
          "!!0"
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "InputBox", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InsertNumber", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Int64, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InsertSpaces", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalInputBox", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32, $asm2C.TypeRef("System.Windows.Forms.IWin32Window")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MsgBox", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.MsgBoxResult"), [
          $.Object, $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Partition", 
      new JSIL.MethodSignature($.String, [
          $.Int64, $.Int64, 
          $.Int64, $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SaveSetting", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Shell", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.AppWinStyle"), 
          $.Boolean, $.Int32
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(0, "VarExpr", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:true , Public:false}, "m_SortedEnvList", $asm07.TypeRef("System.Collections.SortedList"));

    $.Field({Static:true , Public:false}, "m_CommandLine", $.String);

    $.Field({Static:true , Public:false}, "m_EnvironSyncObject", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute"));

})();

/* class Microsoft.VisualBasic.Interaction+InputBoxHandler */ 

(function InputBoxHandler$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Interaction+InputBoxHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32, $asm2C.TypeRef("System.Windows.Forms.IWin32Window")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Exception", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "StartHere", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.STAThreadAttribute"));

    $.Field({Static:false, Public:false}, "m_Prompt", $.String);

    $.Field({Static:false, Public:false}, "m_Title", $.String);

    $.Field({Static:false, Public:false}, "m_DefaultResponse", $.String);

    $.Field({Static:false, Public:false}, "m_XPos", $.Int32);

    $.Field({Static:false, Public:false}, "m_YPos", $.Int32);

    $.Field({Static:false, Public:false}, "m_Result", $.String);

    $.Field({Static:false, Public:false}, "m_ParentWindow", $asm2C.TypeRef("System.Windows.Forms.IWin32Window"));

    $.Field({Static:false, Public:false}, "m_Exception", $asm07.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true }, "Result", $.String);

    $.Property({Static:false, Public:false}, "Exception", $asm07.TypeRef("System.Exception"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.VisualBasic.Interaction+IPersistFile */ 

JSIL.MakeInterface(
  "Microsoft.VisualBasic.Interaction+IPersistFile", false, [], function ($) {
    $.Method({}, "GetClassID", JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")])));
    $.Method({}, "IsDirty", JSIL.MethodSignature.Void);
    $.Method({}, "Load", new JSIL.MethodSignature(null, [$.String, $.Int32]));
    $.Method({}, "Save", new JSIL.MethodSignature(null, [$.String, $.Int32]));
    $.Method({}, "SaveCompleted", JSIL.MethodSignature.Action($.String));
    $.Method({}, "GetCurFile", JSIL.MethodSignature.Return($.String));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["0000010B-0000-0000-C000-000000000046"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* class Microsoft.VisualBasic.FormatInfoHolder */ 

(function FormatInfoHolder$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.FormatInfoHolder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Globalization.NumberFormatInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFormat", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    )
      .Overrides($asm07.TypeRef("System.IFormatProvider"), "GetFormat");

    $.Field({Static:false, Public:false}, "nfi", $asm07.TypeRef("System.Globalization.NumberFormatInfo"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IFormatProvider")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Strings */ 

(function Strings$Members () {
  var $, $thisType;













































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Strings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Asc", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "Asc", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "AscW", 
      new JSIL.MethodSignature($.Int32, [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AscW", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Chr", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ChrW", 
      new JSIL.MethodSignature($.Char, [$.Int32])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Filter", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.String, 
          $.Boolean, $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    )
      .Parameter(3, "Compare", function (_) {
          _.Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Filter", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $jsilcore.TypeRef("System.Array", [$.String]), $.String, 
          $.Boolean, $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    )
      .Parameter(3, "Compare", function (_) {
          _.Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Format", 
      new JSIL.MethodSignature($.String, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FormatCurrency", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Int32, 
          $asm05.TypeRef("Microsoft.VisualBasic.TriState"), $asm05.TypeRef("Microsoft.VisualBasic.TriState"), 
          $asm05.TypeRef("Microsoft.VisualBasic.TriState")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FormatDateTime", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.DateTime"), $asm05.TypeRef("Microsoft.VisualBasic.DateFormat")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatNamed", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FormatNumber", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Int32, 
          $asm05.TypeRef("Microsoft.VisualBasic.TriState"), $asm05.TypeRef("Microsoft.VisualBasic.TriState"), 
          $asm05.TypeRef("Microsoft.VisualBasic.TriState")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FormatPercent", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Int32, 
          $asm05.TypeRef("Microsoft.VisualBasic.TriState"), $asm05.TypeRef("Microsoft.VisualBasic.TriState"), 
          $asm05.TypeRef("Microsoft.VisualBasic.TriState")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CachedOnOffFormatStyle", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CachedTrueFalseFormatStyle", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CachedYesNoFormatStyle", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrencyFormatString", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("Microsoft.VisualBasic.TriState"), $.Int32, 
          $asm05.TypeRef("Microsoft.VisualBasic.TriState"), $asm05.TypeRef("Microsoft.VisualBasic.TriState"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.IFormatProvider")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFormatString", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $asm05.TypeRef("Microsoft.VisualBasic.TriState"), 
          $asm05.TypeRef("Microsoft.VisualBasic.TriState"), $asm05.TypeRef("Microsoft.VisualBasic.TriState"), 
          $asm05.TypeRef("Microsoft.VisualBasic.Strings+FormatType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNumberFormatString", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $asm05.TypeRef("Microsoft.VisualBasic.TriState"), 
          $asm05.TypeRef("Microsoft.VisualBasic.TriState"), $asm05.TypeRef("Microsoft.VisualBasic.TriState")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "InStr", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    )
      .Parameter(2, "Compare", function (_) {
          _.Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "InStr", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.String, 
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    )
      .Parameter(3, "Compare", function (_) {
          _.Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "InStrRev", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    )
      .Parameter(3, "Compare", function (_) {
          _.Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "InternalInStrBinary", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalInStrText", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalStrReverse", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsArrayEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Array")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidCodePage", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Object]), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.String]), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "LCase", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "LCase", 
      new JSIL.MethodSignature($.Char, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "Left", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.SByte])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.UInt16])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.UInt64])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Len", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LSet", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "LTrim", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Mid", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Mid", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PRIMARYLANGID", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProperCaseString", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Globalization.CultureInfo"), $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Replace", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32, $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    )
      .Parameter(5, "Compare", function (_) {
          _.Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "ReplaceInternal", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.Int32, 
          $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Right", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "RSet", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "RTrim", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Space", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Split", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $.String, $.String, 
          $.Int32, $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    )
      .Parameter(3, "Compare", function (_) {
          _.Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "SplitHelper", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StrComp", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    )
      .Parameter(2, "Compare", function (_) {
          _.Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "StrConv", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.VbStrConv"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StrDup", 
      new JSIL.MethodSignature($.Object, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "StrDup", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "StrDup", 
      new JSIL.MethodSignature($.String, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "StrReverse", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trim", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "UCase", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "UCase", 
      new JSIL.MethodSignature($.Char, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateTriState", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.TriState"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidLCID", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "vbLCMapString", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Globalization.CultureInfo"), $.Int32, 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "CurrencyPositiveFormatStrings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "CurrencyNegativeFormatStrings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumberNegativeFormatStrings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Constant({Static:true , Public:false}, "CODEPAGE_SIMPLIFIED_CHINESE", $.Int32, 936);

    $.Constant({Static:true , Public:false}, "CODEPAGE_TRADITIONAL_CHINESE", $.Int32, 950);

    $.Constant({Static:true , Public:false}, "STANDARD_COMPARE_FLAGS", $asm07.TypeRef("System.Globalization.CompareOptions"), 25);

    $.Constant({Static:true , Public:false}, "InvariantCultureID", $.Int32, 127);

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_FIXED", $.String, "fixed");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_YES_NO", $.String, "yes/no");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_ON_OFF", $.String, "on/off");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_PERCENT", $.String, "percent");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_STANDARD", $.String, "standard");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_CURRENCY", $.String, "currency");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_LONG_TIME", $.String, "long time");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_LONG_DATE", $.String, "long date");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_SCIENTIFIC", $.String, "scientific");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_TRUE_FALSE", $.String, "true/false");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_SHORT_TIME", $.String, "short time");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_SHORT_DATE", $.String, "short date");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_MEDIUM_DATE", $.String, "medium date");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_MEDIUM_TIME", $.String, "medium time");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_GENERAL_DATE", $.String, "general date");

    $.Constant({Static:true , Public:false}, "NAMEDFORMAT_GENERAL_NUMBER", $.String, "general number");

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_InvariantCompareInfo", $asm07.TypeRef("System.Globalization.CompareInfo"));

    $.Field({Static:true , Public:false}, "m_SyncObject", $.Object);

    $.Field({Static:true , Public:false}, "m_LastUsedYesNoCulture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:true , Public:false}, "m_CachedYesNoFormatStyle", $.String);

    $.Field({Static:true , Public:false}, "m_LastUsedOnOffCulture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:true , Public:false}, "m_CachedOnOffFormatStyle", $.String);

    $.Field({Static:true , Public:false}, "m_LastUsedTrueFalseCulture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:true , Public:false}, "m_CachedTrueFalseFormatStyle", $.String);

    $.Property({Static:true , Public:false}, "CachedYesNoFormatStyle", $.String);

    $.Property({Static:true , Public:false}, "CachedOnOffFormatStyle", $.String);

    $.Property({Static:true , Public:false}, "CachedTrueFalseFormatStyle", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute"))
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* enum Microsoft.VisualBasic.Strings+NamedFormats */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.Strings+NamedFormats", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    UNKNOWN: 0, 
    GENERAL_NUMBER: 1, 
    LONG_TIME: 2, 
    MEDIUM_TIME: 3, 
    SHORT_TIME: 4, 
    GENERAL_DATE: 5, 
    LONG_DATE: 6, 
    MEDIUM_DATE: 7, 
    SHORT_DATE: 8, 
    FIXED: 9, 
    STANDARD: 10, 
    PERCENT: 11, 
    SCIENTIFIC: 12, 
    CURRENCY: 13, 
    TRUE_FALSE: 14, 
    YES_NO: 15, 
    ON_OFF: 16, 
  }
);

/* enum Microsoft.VisualBasic.Strings+FormatType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.Strings+FormatType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Number: 0, 
    Percent: 1, 
    Currency: 2, 
  }
);

/* class Microsoft.VisualBasic.Constants */ 

(function Constants$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Constants", 
      IsPublic: true, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "vbObjectError", $.Int32, -2147221504);

    $.Constant({Static:true , Public:true }, "vbCrLf", $.String, "\r\n")
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:true }, "vbNewLine", $.String, "\r\n")
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:true }, "vbCr", $.String, "\r")
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:true }, "vbLf", $.String, "\n")
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:true }, "vbBack", $.String, "\x08")
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:true }, "vbFormFeed", $.String, "\x0c")
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:true }, "vbTab", $.String, "\t")
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:true }, "vbVerticalTab", $.String, "\x0b")
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:true }, "vbNullChar", $.String, "\x00")
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:true }, "vbNullString", $.String, null)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:true }, "vbHide", $asm05.TypeRef("Microsoft.VisualBasic.AppWinStyle"), 0);

    $.Constant({Static:true , Public:true }, "vbNormalFocus", $asm05.TypeRef("Microsoft.VisualBasic.AppWinStyle"), 1);

    $.Constant({Static:true , Public:true }, "vbMinimizedFocus", $asm05.TypeRef("Microsoft.VisualBasic.AppWinStyle"), 2);

    $.Constant({Static:true , Public:true }, "vbMaximizedFocus", $asm05.TypeRef("Microsoft.VisualBasic.AppWinStyle"), 3);

    $.Constant({Static:true , Public:true }, "vbNormalNoFocus", $asm05.TypeRef("Microsoft.VisualBasic.AppWinStyle"), 4);

    $.Constant({Static:true , Public:true }, "vbMinimizedNoFocus", $asm05.TypeRef("Microsoft.VisualBasic.AppWinStyle"), 6);

    $.Constant({Static:true , Public:true }, "vbMethod", $asm05.TypeRef("Microsoft.VisualBasic.CallType"), 1);

    $.Constant({Static:true , Public:true }, "vbGet", $asm05.TypeRef("Microsoft.VisualBasic.CallType"), 2);

    $.Constant({Static:true , Public:true }, "vbLet", $asm05.TypeRef("Microsoft.VisualBasic.CallType"), 4);

    $.Constant({Static:true , Public:true }, "vbSet", $asm05.TypeRef("Microsoft.VisualBasic.CallType"), 8);

    $.Constant({Static:true , Public:true }, "vbBinaryCompare", $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod"), 0);

    $.Constant({Static:true , Public:true }, "vbTextCompare", $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod"), 1);

    $.Constant({Static:true , Public:true }, "vbGeneralDate", $asm05.TypeRef("Microsoft.VisualBasic.DateFormat"), 0);

    $.Constant({Static:true , Public:true }, "vbLongDate", $asm05.TypeRef("Microsoft.VisualBasic.DateFormat"), 1);

    $.Constant({Static:true , Public:true }, "vbShortDate", $asm05.TypeRef("Microsoft.VisualBasic.DateFormat"), 2);

    $.Constant({Static:true , Public:true }, "vbLongTime", $asm05.TypeRef("Microsoft.VisualBasic.DateFormat"), 3);

    $.Constant({Static:true , Public:true }, "vbShortTime", $asm05.TypeRef("Microsoft.VisualBasic.DateFormat"), 4);

    $.Constant({Static:true , Public:true }, "vbUseSystemDayOfWeek", $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek"), 0);

    $.Constant({Static:true , Public:true }, "vbSunday", $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek"), 1);

    $.Constant({Static:true , Public:true }, "vbMonday", $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek"), 2);

    $.Constant({Static:true , Public:true }, "vbTuesday", $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek"), 3);

    $.Constant({Static:true , Public:true }, "vbWednesday", $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek"), 4);

    $.Constant({Static:true , Public:true }, "vbThursday", $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek"), 5);

    $.Constant({Static:true , Public:true }, "vbFriday", $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek"), 6);

    $.Constant({Static:true , Public:true }, "vbSaturday", $asm05.TypeRef("Microsoft.VisualBasic.FirstDayOfWeek"), 7);

    $.Constant({Static:true , Public:true }, "vbNormal", $asm05.TypeRef("Microsoft.VisualBasic.FileAttribute"), 0);

    $.Constant({Static:true , Public:true }, "vbReadOnly", $asm05.TypeRef("Microsoft.VisualBasic.FileAttribute"), 1);

    $.Constant({Static:true , Public:true }, "vbHidden", $asm05.TypeRef("Microsoft.VisualBasic.FileAttribute"), 2);

    $.Constant({Static:true , Public:true }, "vbSystem", $asm05.TypeRef("Microsoft.VisualBasic.FileAttribute"), 4);

    $.Constant({Static:true , Public:true }, "vbVolume", $asm05.TypeRef("Microsoft.VisualBasic.FileAttribute"), 8);

    $.Constant({Static:true , Public:true }, "vbDirectory", $asm05.TypeRef("Microsoft.VisualBasic.FileAttribute"), 16);

    $.Constant({Static:true , Public:true }, "vbArchive", $asm05.TypeRef("Microsoft.VisualBasic.FileAttribute"), 32);

    $.Constant({Static:true , Public:true }, "vbUseSystem", $asm05.TypeRef("Microsoft.VisualBasic.FirstWeekOfYear"), 0);

    $.Constant({Static:true , Public:true }, "vbFirstJan1", $asm05.TypeRef("Microsoft.VisualBasic.FirstWeekOfYear"), 1);

    $.Constant({Static:true , Public:true }, "vbFirstFourDays", $asm05.TypeRef("Microsoft.VisualBasic.FirstWeekOfYear"), 2);

    $.Constant({Static:true , Public:true }, "vbFirstFullWeek", $asm05.TypeRef("Microsoft.VisualBasic.FirstWeekOfYear"), 3);

    $.Constant({Static:true , Public:true }, "vbUpperCase", $asm05.TypeRef("Microsoft.VisualBasic.VbStrConv"), 1);

    $.Constant({Static:true , Public:true }, "vbLowerCase", $asm05.TypeRef("Microsoft.VisualBasic.VbStrConv"), 2);

    $.Constant({Static:true , Public:true }, "vbProperCase", $asm05.TypeRef("Microsoft.VisualBasic.VbStrConv"), 3);

    $.Constant({Static:true , Public:true }, "vbWide", $asm05.TypeRef("Microsoft.VisualBasic.VbStrConv"), 4);

    $.Constant({Static:true , Public:true }, "vbNarrow", $asm05.TypeRef("Microsoft.VisualBasic.VbStrConv"), 8);

    $.Constant({Static:true , Public:true }, "vbKatakana", $asm05.TypeRef("Microsoft.VisualBasic.VbStrConv"), 16);

    $.Constant({Static:true , Public:true }, "vbHiragana", $asm05.TypeRef("Microsoft.VisualBasic.VbStrConv"), 32);

    $.Constant({Static:true , Public:true }, "vbSimplifiedChinese", $asm05.TypeRef("Microsoft.VisualBasic.VbStrConv"), 256);

    $.Constant({Static:true , Public:true }, "vbTraditionalChinese", $asm05.TypeRef("Microsoft.VisualBasic.VbStrConv"), 512);

    $.Constant({Static:true , Public:true }, "vbLinguisticCasing", $asm05.TypeRef("Microsoft.VisualBasic.VbStrConv"), 1024);

    $.Constant({Static:true , Public:true }, "vbUseDefault", $asm05.TypeRef("Microsoft.VisualBasic.TriState"), -2);

    $.Constant({Static:true , Public:true }, "vbTrue", $asm05.TypeRef("Microsoft.VisualBasic.TriState"), -1);

    $.Constant({Static:true , Public:true }, "vbFalse", $asm05.TypeRef("Microsoft.VisualBasic.TriState"), 0);

    $.Constant({Static:true , Public:true }, "vbEmpty", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 0);

    $.Constant({Static:true , Public:true }, "vbNull", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 1);

    $.Constant({Static:true , Public:true }, "vbInteger", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 3);

    $.Constant({Static:true , Public:true }, "vbLong", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 20);

    $.Constant({Static:true , Public:true }, "vbSingle", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 4);

    $.Constant({Static:true , Public:true }, "vbDouble", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 5);

    $.Constant({Static:true , Public:true }, "vbCurrency", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 6);

    $.Constant({Static:true , Public:true }, "vbDate", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 7);

    $.Constant({Static:true , Public:true }, "vbString", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 8);

    $.Constant({Static:true , Public:true }, "vbObject", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 9);

    $.Constant({Static:true , Public:true }, "vbBoolean", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 11);

    $.Constant({Static:true , Public:true }, "vbVariant", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 12);

    $.Constant({Static:true , Public:true }, "vbDecimal", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 14);

    $.Constant({Static:true , Public:true }, "vbByte", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 17);

    $.Constant({Static:true , Public:true }, "vbUserDefinedType", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 36);

    $.Constant({Static:true , Public:true }, "vbArray", $asm05.TypeRef("Microsoft.VisualBasic.VariantType"), 8192);

    $.Constant({Static:true , Public:true }, "vbOK", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxResult"), 1);

    $.Constant({Static:true , Public:true }, "vbCancel", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxResult"), 2);

    $.Constant({Static:true , Public:true }, "vbAbort", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxResult"), 3);

    $.Constant({Static:true , Public:true }, "vbRetry", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxResult"), 4);

    $.Constant({Static:true , Public:true }, "vbIgnore", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxResult"), 5);

    $.Constant({Static:true , Public:true }, "vbYes", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxResult"), 6);

    $.Constant({Static:true , Public:true }, "vbNo", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxResult"), 7);

    $.Constant({Static:true , Public:true }, "vbOKOnly", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 0);

    $.Constant({Static:true , Public:true }, "vbOKCancel", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 1);

    $.Constant({Static:true , Public:true }, "vbAbortRetryIgnore", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 2);

    $.Constant({Static:true , Public:true }, "vbYesNoCancel", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 3);

    $.Constant({Static:true , Public:true }, "vbYesNo", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 4);

    $.Constant({Static:true , Public:true }, "vbRetryCancel", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 5);

    $.Constant({Static:true , Public:true }, "vbCritical", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 16);

    $.Constant({Static:true , Public:true }, "vbQuestion", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 32);

    $.Constant({Static:true , Public:true }, "vbExclamation", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 48);

    $.Constant({Static:true , Public:true }, "vbInformation", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 64);

    $.Constant({Static:true , Public:true }, "vbDefaultButton1", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 0);

    $.Constant({Static:true , Public:true }, "vbDefaultButton2", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 256);

    $.Constant({Static:true , Public:true }, "vbDefaultButton3", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 512);

    $.Constant({Static:true , Public:true }, "vbApplicationModal", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 0);

    $.Constant({Static:true , Public:true }, "vbSystemModal", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 4096);

    $.Constant({Static:true , Public:true }, "vbMsgBoxHelp", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 16384);

    $.Constant({Static:true , Public:true }, "vbMsgBoxRight", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 524288);

    $.Constant({Static:true , Public:true }, "vbMsgBoxRtlReading", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 1048576);

    $.Constant({Static:true , Public:true }, "vbMsgBoxSetForeground", $asm05.TypeRef("Microsoft.VisualBasic.MsgBoxStyle"), 65536);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute"))
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.VisualBasic.VBMath */ 

(function VBMath$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.VBMath", 
      IsPublic: true, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetTimer", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:true , Public:true }, "Randomize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Randomize", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:true , Public:true }, "Rnd", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:true , Public:true }, "Rnd", 
      new JSIL.MethodSignature($.Single, [$.Single])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute"));

})();

JSIL.DeclareNamespace("Microsoft.VisualBasic.ApplicationServices");
/* class Microsoft.VisualBasic.ApplicationServices.ApplicationBase */ 

(function ApplicationBase$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.ApplicationBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ChangeCulture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ChangeUICulture", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.AssemblyInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Log", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Logging.Log"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UICulture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnvironmentVariable", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:false, Public:false}, "m_Log", $asm05.TypeRef("Microsoft.VisualBasic.Logging.Log"));

    $.Field({Static:false, Public:false}, "m_Info", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.AssemblyInfo"));

    $.Property({Static:false, Public:true }, "Log", $asm05.TypeRef("Microsoft.VisualBasic.Logging.Log"));

    $.Property({Static:false, Public:true }, "Info", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.AssemblyInfo"));

    $.Property({Static:false, Public:true }, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:true }, "UICulture", $asm07.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.ApplicationServices.AssemblyInfo */ 

(function AssemblyInfo$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.AssemblyInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompanyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Copyright", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DirectoryPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LoadedAssemblies", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Reflection.Assembly")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProductName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StackTrace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Title", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Trademark", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WorkingSet", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false}, "m_Assembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:false, Public:false}, "m_Description", $.String);

    $.Field({Static:false, Public:false}, "m_Title", $.String);

    $.Field({Static:false, Public:false}, "m_ProductName", $.String);

    $.Field({Static:false, Public:false}, "m_CompanyName", $.String);

    $.Field({Static:false, Public:false}, "m_Trademark", $.String);

    $.Field({Static:false, Public:false}, "m_Copyright", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "CompanyName", $.String);

    $.Property({Static:false, Public:true }, "Title", $.String);

    $.Property({Static:false, Public:true }, "Copyright", $.String);

    $.Property({Static:false, Public:true }, "Trademark", $.String);

    $.Property({Static:false, Public:true }, "ProductName", $.String);

    $.Property({Static:false, Public:true }, "Version", $asm07.TypeRef("System.Version"));

    $.Property({Static:false, Public:true }, "AssemblyName", $.String);

    $.Property({Static:false, Public:true }, "DirectoryPath", $.String);

    $.Property({Static:false, Public:true }, "LoadedAssemblies", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Reflection.Assembly")]));

    $.Property({Static:false, Public:true }, "StackTrace", $.String);

    $.Property({Static:false, Public:true }, "WorkingSet", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase */ 

(function ConsoleApplicationBase$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.ApplicationBase"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CommandLineArgs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Deployment", 
      JSIL.MethodSignature.Return($asm13.TypeRef("System.Deployment.Application.ApplicationDeployment"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNetworkDeployed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InternalCommandLine", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
    );

    $.Field({Static:false, Public:false}, "m_CommandLineArgs", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Property({Static:false, Public:true }, "CommandLineArgs", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Property({Static:false, Public:true }, "Deployment", $asm13.TypeRef("System.Deployment.Application.ApplicationDeployment"));

    $.Property({Static:false, Public:true }, "IsNetworkDeployed", $.Boolean);

    $.Property({Static:false, Public:false}, "InternalCommandLine", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.ApplicationServices.User */ 

(function User$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.User", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentPrincipal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.IPrincipal"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_InternalPrincipal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.IPrincipal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAuthenticated", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "InitializeWithWindowsUser", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, "IsInRole", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsInRole", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.BuiltInRole")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsWindowsPrincipal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentPrincipal", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Principal.IPrincipal"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_InternalPrincipal", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Principal.IPrincipal"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateBuiltInRoleEnumValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.BuiltInRole"), $.String])
    );

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "CurrentPrincipal", $asm07.TypeRef("System.Security.Principal.IPrincipal"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:false, Public:true }, "IsAuthenticated", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "InternalPrincipal", $asm07.TypeRef("System.Security.Principal.IPrincipal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.VisualBasic.ApplicationServices.BuiltInRole */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.ApplicationServices.BuiltInRole", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Administrator: 544, 
    User: 545, 
    Guest: 546, 
    PowerUser: 547, 
    AccountOperator: 548, 
    SystemOperator: 549, 
    PrintOperator: 550, 
    BackupOperator: 551, 
    Replicator: 552, 
  }
);

/* class Microsoft.VisualBasic.ApplicationServices.BuiltInRoleConverter */ 

(function BuiltInRoleConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.BuiltInRoleConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWindowsBuiltInRole", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.WindowsBuiltInRole"), [$.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.ApplicationServices.WebUser */ 

(function WebUser$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.User"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.WebUser", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_InternalPrincipal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.IPrincipal"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_InternalPrincipal", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Principal.IPrincipal"))
    );

    $.Property({Static:false, Public:false, Virtual:true }, "InternalPrincipal", $asm07.TypeRef("System.Security.Principal.IPrincipal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.VisualBasic.ApplicationServices.AuthenticationMode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.ApplicationServices.AuthenticationMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Windows: 0, 
    ApplicationDefined: 1, 
  }
);

/* enum Microsoft.VisualBasic.ApplicationServices.ShutdownMode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.ApplicationServices.ShutdownMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    AfterMainFormCloses: 0, 
    AfterAllFormsClose: 1, 
  }
);

/* class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs */ 

(function UnhandledExceptionEventArgs$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Threading.ThreadExceptionEventArgs"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExitApplication", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExitApplication", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_ExitApplication", $.Boolean);

    $.Property({Static:false, Public:true }, "ExitApplication", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.VisualBasic.ApplicationServices.StartupEventArgs */ 

(function StartupEventArgs$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.CancelEventArgs"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.StartupEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CommandLine", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
    );

    $.Field({Static:false, Public:false}, "m_CommandLine", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Property({Static:false, Public:true }, "CommandLine", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs */ 

(function StartupNextInstanceEventArgs$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BringToForeground", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CommandLine", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BringToForeground", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_BringToForeground", $.Boolean);

    $.Field({Static:false, Public:false}, "m_CommandLine", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    $.Property({Static:false, Public:true }, "BringToForeground", $.Boolean);

    $.Property({Static:false, Public:true }, "CommandLine", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

})();

/* delegate Microsoft.VisualBasic.ApplicationServices.StartupEventHandler */ 

JSIL.MakeDelegate("Microsoft.VisualBasic.ApplicationServices.StartupEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.StartupEventArgs")]));

/* delegate Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler */ 

JSIL.MakeDelegate("Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs")]));

/* delegate Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler */ 

JSIL.MakeDelegate("Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm07.TypeRef("System.EventArgs")]));

/* delegate Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler */ 

JSIL.MakeDelegate("Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs")]));

/* class Microsoft.VisualBasic.ApplicationServices.NoStartupFormException */ 

(function NoStartupFormException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.NoStartupFormException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.ApplicationServices.CantStartSingleInstanceException */ 

(function CantStartSingleInstanceException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.CantStartSingleInstanceException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase */ 

(function WindowsFormsApplicationBase$Members () {
  var $, $thisType;


























































  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.AuthenticationMode"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "add_NetworkAvailabilityChanged", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Shutdown", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "add_Startup", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.StartupEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "add_StartupNextInstance", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "add_UnhandledException", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DisplaySplash", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoApplicationModel", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "DoEvents", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ApplicationContext", 
      JSIL.MethodSignature.Return($asm2C.TypeRef("System.Windows.Forms.ApplicationContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnableVisualStyles", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSingleInstance", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MainForm", 
      JSIL.MethodSignature.Return($asm2C.TypeRef("System.Windows.Forms.Form"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinimumSplashScreenDisplayTime", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OpenForms", 
      JSIL.MethodSignature.Return($asm2C.TypeRef("System.Windows.Forms.FormCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RunNextInstanceDelegate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.SendOrPostCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SaveMySettingsOnExit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ShutdownStyle", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.ShutdownMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SplashScreen", 
      JSIL.MethodSignature.Return($asm2C.TypeRef("System.Windows.Forms.Form"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UseCompatibleTextRendering", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetApplicationInstanceID", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.Assembly")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "HideSplashScreen", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; })
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "MainFormLoadingDone", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MinimumSplashExposureTimeIsUp", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.Timers.ElapsedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NetworkAvailableEventAdaptor", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnCreateMainForm", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnCreateSplashScreen", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInitialize", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String])])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; })
      .Attribute($asm07.TypeRef("System.STAThreadAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRun", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnShutdown", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnStartup", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.StartupEventArgs")])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnStartupNextInstance", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs"))
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; })
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "OnStartupNextInstanceMarshallingAdaptor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnUnhandledException", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs")])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false}, "OnUnhandledExceptionEventAdaptor", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.Threading.ThreadExceptionEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "raise_NetworkAvailabilityChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "raise_UnhandledException", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUrlFromMemoryMappedFile", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "RegisterChannel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Remoting.Channels.IChannel"), [$asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase+ChannelType"), $.Boolean])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "remove_NetworkAvailabilityChanged", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Shutdown", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "remove_Startup", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.StartupEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "remove_StartupNextInstance", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "remove_UnhandledException", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Run", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_EnableVisualStyles", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsSingleInstance", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MainForm", 
      JSIL.MethodSignature.Action($asm2C.TypeRef("System.Windows.Forms.Form"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinimumSplashScreenDisplayTime", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SaveMySettingsOnExit", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ShutdownStyle", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.ShutdownMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SplashScreen", 
      JSIL.MethodSignature.Action($asm2C.TypeRef("System.Windows.Forms.Form"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ShowSplashScreen", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false}, "ValidateAuthenticationModeEnumValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.AuthenticationMode"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateShutdownModeEnumValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.ShutdownMode"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUrlToMemoryMappedFile", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "StartupEvent", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.StartupEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "StartupNextInstanceEvent", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "ShutdownEvent", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Constant({Static:true , Public:false}, "HOST_NAME", $.String, "127.0.0.1");

    $.Constant({Static:true , Public:false}, "SECOND_INSTANCE_TIMEOUT", $.Int32, 2500);

    $.Constant({Static:true , Public:false}, "ATTACH_TIMEOUT", $.Int32, 2500);

    $.Field({Static:false, Public:false}, "m_UnhandledExceptionHandlers", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "m_ProcessingUnhandledExceptionEvent", $.Boolean);

    $.Field({Static:false, Public:false}, "m_TurnOnNetworkListener", $.Boolean);

    $.Field({Static:false, Public:false}, "m_FinishedOnInitilaize", $.Boolean);

    $.Field({Static:false, Public:false}, "m_NetworkAvailabilityEventHandlers", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "m_FirstInstanceSemaphore", $asm07.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "m_MessageRecievedSemaphore", $asm07.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "m_NetworkObject", $asm05.TypeRef("Microsoft.VisualBasic.Devices.Network"));

    $.Field({Static:false, Public:false}, "m_MemoryMappedID", $.String);

    $.Field({Static:false, Public:false}, "m_FirstInstanceMemoryMappedFileHandle", $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_IsSingleInstance", $.Boolean);

    $.Field({Static:false, Public:false}, "m_ShutdownStyle", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.ShutdownMode"));

    $.Field({Static:false, Public:false}, "m_EnableVisualStyles", $.Boolean);

    $.Field({Static:false, Public:false}, "m_DidSplashScreen", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Ok2CloseSplashScreen", $.Boolean);

    $.Field({Static:false, Public:false}, "m_SplashScreen", $asm2C.TypeRef("System.Windows.Forms.Form"));

    $.Field({Static:false, Public:false}, "m_MinimumSplashExposure", $.Int32);

    $.Field({Static:false, Public:false}, "m_SplashTimer", $asm0A.TypeRef("System.Timers.Timer"));

    $.Field({Static:false, Public:false}, "m_SplashLock", $.Object);

    $.Field({Static:false, Public:false}, "m_AppContext", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase+WinFormsAppContext"));

    $.Field({Static:false, Public:false}, "m_AppSyncronizationContext", $asm07.TypeRef("System.Threading.SynchronizationContext"));

    $.Field({Static:false, Public:false}, "m_NetworkAvailChangeLock", $.Object);

    $.Field({Static:false, Public:false}, "m_SaveMySettingsOnExit", $.Boolean);

    $.Field({Static:false, Public:false}, "m_StartNextInstanceCallback", $asm07.TypeRef("System.Threading.SendOrPostCallback"));

    $.Property({Static:false, Public:true }, "OpenForms", $asm2C.TypeRef("System.Windows.Forms.FormCollection"));

    $.Property({Static:false, Public:false}, "MainForm", $asm2C.TypeRef("System.Windows.Forms.Form"));

    $.Property({Static:false, Public:true }, "SplashScreen", $asm2C.TypeRef("System.Windows.Forms.Form"));

    $.Property({Static:false, Public:true }, "MinimumSplashScreenDisplayTime", $.Int32);

    $.Property({Static:true , Public:false}, "UseCompatibleTextRendering", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:false, Public:true }, "ApplicationContext", $asm2C.TypeRef("System.Windows.Forms.ApplicationContext"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:false, Public:true }, "SaveMySettingsOnExit", $.Boolean);

    $.Property({Static:false, Public:false}, "ShutdownStyle", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.ShutdownMode"));

    $.Property({Static:false, Public:false}, "EnableVisualStyles", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSingleInstance", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:false, Public:false}, "RunNextInstanceDelegate", $asm07.TypeRef("System.Threading.SendOrPostCallback"));

    $.Event({Static:false, Public:true }, "Startup", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.StartupEventHandler"));

    $.Event({Static:false, Public:true }, "StartupNextInstance", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler"));

    $.Event({Static:false, Public:true }, "Shutdown", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler"));

    $.Event({Static:false, Public:true }, "NetworkAvailabilityChanged", $asm05.TypeRef("Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler"));

    $.Event({Static:false, Public:true }, "UnhandledException", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase+WinFormsAppContext */ 

(function WinFormsAppContext$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm2C.TypeRef("System.Windows.Forms.ApplicationContext"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase+WinFormsAppContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnMainFormClosed", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_App", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase+DisposeDelegate */ 

JSIL.MakeDelegate("Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase+DisposeDelegate", false, [], 
  JSIL.MethodSignature.Void);

/* class Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase+RemoteCommunicator */ 

(function RemoteCommunicator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.MarshalByRefObject"), 
      Name: "Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase+RemoteCommunicator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase"), $asm07.TypeRef("System.Threading.EventWaitHandle")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitializeLifetimeService", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "RunNextInstance", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.Remoting.Messaging.OneWayAttribute"));

    $.Field({Static:false, Public:false}, "m_StartNextInstanceDelegate", $asm07.TypeRef("System.Threading.SendOrPostCallback"));

    $.Field({Static:false, Public:false}, "m_AsyncOp", $asm0A.TypeRef("System.ComponentModel.AsyncOperation"));

    $.Field({Static:false, Public:false}, "m_OriginalUser", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Field({Static:false, Public:false}, "m_ConnectionMadeSemaphore", $asm07.TypeRef("System.Threading.EventWaitHandle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase+ChannelType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase+ChannelType", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Server: 0, 
    Client: 1, 
  }
);

/* enum Microsoft.VisualBasic.AudioPlayMode */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.AudioPlayMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    WaitToComplete: 0, 
    Background: 1, 
    BackgroundLoop: 2, 
  }
);

JSIL.DeclareNamespace("Microsoft.VisualBasic.Devices");
/* class Microsoft.VisualBasic.Devices.Audio */ 

(function Audio$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Devices.Audio", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalStop", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Media.SoundPlayer"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Play", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Play", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("Microsoft.VisualBasic.AudioPlayMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Play", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm05.TypeRef("Microsoft.VisualBasic.AudioPlayMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Play", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $asm05.TypeRef("Microsoft.VisualBasic.AudioPlayMode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Play", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Media.SoundPlayer"), $asm05.TypeRef("Microsoft.VisualBasic.AudioPlayMode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "PlaySystemSound", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Media.SystemSound"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Stop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAudioPlayModeEnum", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.AudioPlayMode"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateFilename", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:false, Public:false}, "m_Sound", $asm0A.TypeRef("System.Media.SoundPlayer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Devices.Clock */ 

(function Clock$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Devices.Clock", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GmtTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TickCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Property({Static:false, Public:true }, "LocalTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "GmtTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "TickCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Devices.ServerComputer */ 

(function ServerComputer$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Devices.ServerComputer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Clock", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Devices.Clock"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileSystem", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.MyServices.FileSystemProxy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Info", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Devices.ComputerInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Network", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Devices.Network"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Registry", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.MyServices.RegistryProxy"))
    );

    $.Field({Static:false, Public:false}, "m_ComputerInfo", $asm05.TypeRef("Microsoft.VisualBasic.Devices.ComputerInfo"));

    $.Field({Static:false, Public:false}, "m_FileIO", $asm05.TypeRef("Microsoft.VisualBasic.MyServices.FileSystemProxy"));

    $.Field({Static:false, Public:false}, "m_Network", $asm05.TypeRef("Microsoft.VisualBasic.Devices.Network"));

    $.Field({Static:false, Public:false}, "m_RegistryInstance", $asm05.TypeRef("Microsoft.VisualBasic.MyServices.RegistryProxy"));

    $.Field({Static:true , Public:false}, "m_Clock", $asm05.TypeRef("Microsoft.VisualBasic.Devices.Clock"));

    $.Property({Static:false, Public:true }, "Clock", $asm05.TypeRef("Microsoft.VisualBasic.Devices.Clock"));

    $.Property({Static:false, Public:true }, "FileSystem", $asm05.TypeRef("Microsoft.VisualBasic.MyServices.FileSystemProxy"));

    $.Property({Static:false, Public:true }, "Info", $asm05.TypeRef("Microsoft.VisualBasic.Devices.ComputerInfo"));

    $.Property({Static:false, Public:true }, "Network", $asm05.TypeRef("Microsoft.VisualBasic.Devices.Network"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Registry", $asm05.TypeRef("Microsoft.VisualBasic.MyServices.RegistryProxy"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Devices.Computer */ 

(function Computer$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Microsoft.VisualBasic.Devices.ServerComputer"), 
      Name: "Microsoft.VisualBasic.Devices.Computer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Audio", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Devices.Audio"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Clipboard", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.MyServices.ClipboardProxy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keyboard", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Devices.Keyboard"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Mouse", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Devices.Mouse"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Ports", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Devices.Ports"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Screen", 
      JSIL.MethodSignature.Return($asm2C.TypeRef("System.Windows.Forms.Screen"))
    );

    $.Field({Static:false, Public:false}, "m_Audio", $asm05.TypeRef("Microsoft.VisualBasic.Devices.Audio"));

    $.Field({Static:false, Public:false}, "m_Ports", $asm05.TypeRef("Microsoft.VisualBasic.Devices.Ports"));

    $.Field({Static:true , Public:false}, "m_Clipboard", $asm05.TypeRef("Microsoft.VisualBasic.MyServices.ClipboardProxy"));

    $.Field({Static:true , Public:false}, "m_Mouse", $asm05.TypeRef("Microsoft.VisualBasic.Devices.Mouse"));

    $.Field({Static:true , Public:false}, "m_KeyboardInstance", $asm05.TypeRef("Microsoft.VisualBasic.Devices.Keyboard"));

    $.Property({Static:false, Public:true }, "Audio", $asm05.TypeRef("Microsoft.VisualBasic.Devices.Audio"));

    $.Property({Static:false, Public:true }, "Clipboard", $asm05.TypeRef("Microsoft.VisualBasic.MyServices.ClipboardProxy"));

    $.Property({Static:false, Public:true }, "Ports", $asm05.TypeRef("Microsoft.VisualBasic.Devices.Ports"));

    $.Property({Static:false, Public:true }, "Mouse", $asm05.TypeRef("Microsoft.VisualBasic.Devices.Mouse"));

    $.Property({Static:false, Public:true }, "Keyboard", $asm05.TypeRef("Microsoft.VisualBasic.Devices.Keyboard"));

    $.Property({Static:false, Public:true }, "Screen", $asm2C.TypeRef("System.Windows.Forms.Screen"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Devices.ComputerInfo */ 

(function ComputerInfo$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Devices.ComputerInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AvailablePhysicalMemory", 
      JSIL.MethodSignature.Return($.UInt64)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AvailableVirtualMemory", 
      JSIL.MethodSignature.Return($.UInt64)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_InstalledUICulture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemoryStatus", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Devices.ComputerInfo+InternalMemoryStatus"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OSFullName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_OSManagementBaseObject", 
      JSIL.MethodSignature.Return($asm1B.TypeRef("System.Management.ManagementBaseObject"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_OSPlatform", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OSVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TotalPhysicalMemory", 
      JSIL.MethodSignature.Return($.UInt64)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TotalVirtualMemory", 
      JSIL.MethodSignature.Return($.UInt64)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_OSManagementObject", $asm1B.TypeRef("System.Management.ManagementBaseObject"))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_InternalMemoryStatus", $asm05.TypeRef("Microsoft.VisualBasic.Devices.ComputerInfo+InternalMemoryStatus"));

    $.Property({Static:false, Public:true }, "TotalPhysicalMemory", $.UInt64)
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "AvailablePhysicalMemory", $.UInt64)
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "TotalVirtualMemory", $.UInt64)
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "AvailableVirtualMemory", $.UInt64)
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "InstalledUICulture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:true }, "OSFullName", $.String);

    $.Property({Static:false, Public:true }, "OSPlatform", $.String);

    $.Property({Static:false, Public:true }, "OSVersion", $.String);

    $.Property({Static:false, Public:false}, "MemoryStatus", $asm05.TypeRef("Microsoft.VisualBasic.Devices.ComputerInfo+InternalMemoryStatus"));

    $.Property({Static:false, Public:false}, "OSManagementBaseObject", $asm1B.TypeRef("System.Management.ManagementBaseObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm05.Microsoft.VisualBasic.Devices.ComputerInfo_ComputerInfoDebugView.__Type__]; });

})();

/* class Microsoft.VisualBasic.Devices.ComputerInfo+ComputerInfoDebugView */ 

(function ComputerInfoDebugView$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Devices.ComputerInfo+ComputerInfoDebugView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Devices.ComputerInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AvailablePhysicalMemory", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AvailableVirtualMemory", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InstalledUICulture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OSPlatform", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OSVersion", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TotalPhysicalMemory", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TotalVirtualMemory", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.Field({Static:false, Public:false}, "m_InstanceBeingWatched", $asm05.TypeRef("Microsoft.VisualBasic.Devices.ComputerInfo"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm07.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:true }, "TotalPhysicalMemory", $.UInt64)
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm07.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    $.Property({Static:false, Public:true }, "AvailablePhysicalMemory", $.UInt64)
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm07.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    $.Property({Static:false, Public:true }, "TotalVirtualMemory", $.UInt64)
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm07.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    $.Property({Static:false, Public:true }, "AvailableVirtualMemory", $.UInt64)
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm07.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    $.Property({Static:false, Public:true }, "InstalledUICulture", $asm07.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm07.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    $.Property({Static:false, Public:true }, "OSPlatform", $.String)
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm07.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    $.Property({Static:false, Public:true }, "OSVersion", $.String)
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm07.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Devices.ComputerInfo+InternalMemoryStatus */ 

(function InternalMemoryStatus$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Devices.ComputerInfo+InternalMemoryStatus", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AvailablePhysicalMemory", 
      JSIL.MethodSignature.Return($.UInt64)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_AvailableVirtualMemory", 
      JSIL.MethodSignature.Return($.UInt64)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_TotalPhysicalMemory", 
      JSIL.MethodSignature.Return($.UInt64)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_TotalVirtualMemory", 
      JSIL.MethodSignature.Return($.UInt64)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Refresh", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_IsOldOS", $.Boolean);

    $.Field({Static:false, Public:false}, "m_MemoryStatus", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+MEMORYSTATUS"));

    $.Field({Static:false, Public:false}, "m_MemoryStatusEx", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+MEMORYSTATUSEX"));

    $.Property({Static:false, Public:false}, "TotalPhysicalMemory", $.UInt64);

    $.Property({Static:false, Public:false}, "AvailablePhysicalMemory", $.UInt64);

    $.Property({Static:false, Public:false}, "TotalVirtualMemory", $.UInt64);

    $.Property({Static:false, Public:false}, "AvailableVirtualMemory", $.UInt64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Devices.Keyboard */ 

(function Keyboard$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Devices.Keyboard", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AltKeyDown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CapsLock", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CtrlKeyDown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NumLock", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ScrollLock", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ShiftKeyDown", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SendKeys", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "SendKeys", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.Property({Static:false, Public:true }, "ShiftKeyDown", $.Boolean);

    $.Property({Static:false, Public:true }, "AltKeyDown", $.Boolean);

    $.Property({Static:false, Public:true }, "CtrlKeyDown", $.Boolean);

    $.Property({Static:false, Public:true }, "CapsLock", $.Boolean);

    $.Property({Static:false, Public:true }, "NumLock", $.Boolean);

    $.Property({Static:false, Public:true }, "ScrollLock", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Devices.Mouse */ 

(function Mouse$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Devices.Mouse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ButtonsSwapped", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WheelExists", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WheelScrollLines", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Property({Static:false, Public:true }, "ButtonsSwapped", $.Boolean);

    $.Property({Static:false, Public:true }, "WheelExists", $.Boolean);

    $.Property({Static:false, Public:true }, "WheelScrollLines", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs */ 

(function NetworkAvailableEventArgs$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNetworkAvailable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_NetworkAvailable", $.Boolean);

    $.Property({Static:false, Public:true }, "IsNetworkAvailable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler */ 

JSIL.MakeDelegate("Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Object"), $asm05.TypeRef("Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs")]));

/* class Microsoft.VisualBasic.Devices.Network */ 

(function Network$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Devices.Network", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "add_NetworkAvailabilityChanged", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DisconnectListener", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "DownloadFile", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "DownloadFile", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Uri"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "DownloadFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DownloadFile", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Uri"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DownloadFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DownloadFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $.Int32, 
          $.Boolean, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DownloadFile", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Uri"), $.String, 
          $.String, $.String, 
          $.Boolean, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DownloadFile", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Uri"), $.String, 
          $.String, $.String, 
          $.Boolean, $.Int32, 
          $.Boolean, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DownloadFile", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Uri"), $.String, 
          $asm0A.TypeRef("System.Net.ICredentials"), $.Boolean, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DownloadFile", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Uri"), $.String, 
          $asm0A.TypeRef("System.Net.ICredentials"), $.Boolean, 
          $.Int32, $.Boolean, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsAvailable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PingBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNetworkCredentials", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.ICredentials"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUri", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Uri"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "NetworkAvailabilityChangedHandler", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "OS_NetworkAvailabilityChangedListener", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Ping", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Ping", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Ping", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Ping", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Uri"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "raise_NetworkAvailabilityChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_NetworkAvailabilityChanged", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "UploadFile", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "UploadFile", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true }, "UploadFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "UploadFile", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0A.TypeRef("System.Uri"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "UploadFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "UploadFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $.Int32, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "UploadFile", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0A.TypeRef("System.Uri"), 
          $.String, $.String, 
          $.Boolean, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "UploadFile", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0A.TypeRef("System.Uri"), 
          $.String, $.String, 
          $.Boolean, $.Int32, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "UploadFile", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0A.TypeRef("System.Uri"), 
          $asm0A.TypeRef("System.Net.ICredentials"), $.Boolean, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "UploadFile", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0A.TypeRef("System.Uri"), 
          $asm0A.TypeRef("System.Net.ICredentials"), $.Boolean, 
          $.Int32, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.Field({Static:false, Public:false}, "m_PingBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Constant({Static:true , Public:false}, "BUFFER_SIZE", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "DEFAULT_TIMEOUT", $.Int32, 100000);

    $.Constant({Static:true , Public:false}, "DEFAULT_PING_TIMEOUT", $.Int32, 1000);

    $.Constant({Static:true , Public:false}, "DEFAULT_USERNAME", $.String, "");

    $.Constant({Static:true , Public:false}, "DEFAULT_PASSWORD", $.String, "");

    $.Field({Static:false, Public:false}, "m_Connected", $.Boolean);

    $.Field({Static:false, Public:false}, "m_SyncObject", $.Object);

    $.Field({Static:false, Public:false}, "m_NetworkAvailabilityEventHandlers", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "m_SynchronizationContext", $asm07.TypeRef("System.Threading.SynchronizationContext"));

    $.Field({Static:false, Public:false}, "m_NetworkAvailabilityChangedCallback", $asm07.TypeRef("System.Threading.SendOrPostCallback"));

    $.Property({Static:false, Public:true }, "IsAvailable", $.Boolean);

    $.Property({Static:false, Public:false}, "PingBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Event({Static:false, Public:true }, "NetworkAvailabilityChanged", $asm05.TypeRef("Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Devices.WebClientExtended */ 

(function WebClientExtended$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Net.WebClient"), 
      Name: "Microsoft.VisualBasic.Devices.WebClientExtended", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetWebRequest", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.WebRequest"), [$asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseNonPassiveFtp", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_Timeout", $.Int32);

    $.Field({Static:false, Public:false}, "m_UseNonPassiveFtp", $.Boolean);

    $.Property({Static:false, Public:true }, "Timeout", $.Int32);

    $.Property({Static:false, Public:true }, "UseNonPassiveFtp", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Devices.Ports */ 

(function Ports$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Devices.Ports", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SerialPortNames", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenSerialPort", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.IO.Ports.SerialPort"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenSerialPort", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.IO.Ports.SerialPort"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenSerialPort", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.IO.Ports.SerialPort"), [
          $.String, $.Int32, 
          $asm0A.TypeRef("System.IO.Ports.Parity")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenSerialPort", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.IO.Ports.SerialPort"), [
          $.String, $.Int32, 
          $asm0A.TypeRef("System.IO.Ports.Parity"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenSerialPort", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.IO.Ports.SerialPort"), [
          $.String, $.Int32, 
          $asm0A.TypeRef("System.IO.Ports.Parity"), $.Int32, 
          $asm0A.TypeRef("System.IO.Ports.StopBits")
        ])
    );

    $.Property({Static:false, Public:true }, "SerialPortNames", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.VisualBasic.FileIO");
/* class Microsoft.VisualBasic.FileIO.FileSystem */ 

(function FileSystem$Members () {
  var $, $thisType;






























































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.FileIO.FileSystem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddToStringCollection", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.String]), $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckFilePathTrailingSeparator", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CombinePath", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CopyDirectory", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CopyDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CopyDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CopyDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CopyFile", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CopyFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CopyFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CopyFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CopyOrMoveDirectory", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+CopyOrMove"), $.String, 
          $.String, $.Boolean, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+UIOptionInternal"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CopyOrMoveDirectoryNode", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+CopyOrMove"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+DirectoryNode"), 
          $.Boolean, $asm0A.TypeRef("System.Collections.Specialized.ListDictionary")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CopyOrMoveFile", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+CopyOrMove"), $.String, 
          $.String, $.Boolean, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+UIOptionInternal"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateDirectory", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "DeleteDirectory", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.DeleteDirectoryOption")])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeleteDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.RecycleOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeleteDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.RecycleOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeleteDirectoryInternal", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.DeleteDirectoryOption"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+UIOptionInternal"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.RecycleOption"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DeleteFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "DeleteFile", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.RecycleOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DeleteFile", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.RecycleOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeleteFileInternal", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+UIOptionInternal"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.RecycleOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DemandDirectoryPermission", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Security.Permissions.FileIOPermissionAccess")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DirectoryExists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsurePathNotExist", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "FileContainsText", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FileExists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindFilesOrDirectories", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+FileOrDirectory"), $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.SearchOption"), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindFilesOrDirectories", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+FileOrDirectory"), $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.SearchOption"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindInFiles", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [
          $.String, $.String, 
          $.Boolean, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.SearchOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindInFiles", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [
          $.String, $.String, 
          $.Boolean, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.SearchOption"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(4, "fileWildcards", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "FindPaths", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+FileOrDirectory"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FxCopyOrMoveDirectory", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+CopyOrMove"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CurrentDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Drives", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.IO.DriveInfo")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDirectories", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDirectories", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.SearchOption"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(2, "wildcards", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetDirectoryInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.DirectoryInfo"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDriveInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.DriveInfo"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFileInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.FileInfo"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFiles", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFiles", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.SearchOption"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(2, "wildcards", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetFullPathFromNewName", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLongPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOperationFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+ShFileOperationFlags"), [$asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+UIOptionInternal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetParentPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetShellOperationInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFILEOPSTRUCT"), [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFileOperationType"), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+ShFileOperationFlags"), 
          $.String, $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetShellOperationInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFILEOPSTRUCT"), [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFileOperationType"), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+ShFileOperationFlags"), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetShellPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetShellPath", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTempFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOnSameDrive", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRoot", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoveDirectory", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoveDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoveDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoveDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoveFile", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoveFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoveFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoveFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NormalizeFilePath", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NormalizePath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenTextFieldParser", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.FileIO.TextFieldParser"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenTextFieldParser", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.FileIO.TextFieldParser"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(1, "delimiters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "OpenTextFieldParser", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.FileIO.TextFieldParser"), [$.String, $jsilcore.TypeRef("System.Array", [$.Int32])])
    )
      .Parameter(1, "fieldWidths", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "OpenTextFileReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.StreamReader"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenTextFileReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.StreamReader"), [$.String, $asm07.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenTextFileWriter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.StreamWriter"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenTextFileWriter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.StreamWriter"), [
          $.String, $.Boolean, 
          $asm07.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadAllBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadAllText", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadAllText", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveEndingSeparator", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "RenameDirectory", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "RenameFile", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_CurrentDirectory", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ShellCopyOrMove", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+CopyOrMove"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+FileOrDirectory"), 
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+UIOptionInternal"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ShellDelete", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+UIOptionInternal"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.RecycleOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+FileOrDirectory")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ShellFileOperation", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFileOperationType"), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+ShFileOperationFlags"), 
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+FileOrDirectory")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ThrowIfDevicePath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowWinIOError", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToUIOptionInternal", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.FileIO.FileSystem+UIOptionInternal"), [$asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyDeleteDirectoryOption", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.DeleteDirectoryOption")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyRecycleOption", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.RecycleOption")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifySearchOption", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.SearchOption")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyUICancelOption", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteAllBytes", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteAllText", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteAllText", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean, $asm07.TypeRef("System.Text.Encoding")
        ])
    );

    $.Constant({Static:true , Public:false}, "m_SHELL_OPERATION_FLAGS_BASE", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+ShFileOperationFlags"), 8704);

    $.Constant({Static:true , Public:false}, "m_SHELL_OPERATION_FLAGS_HIDE_UI", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+ShFileOperationFlags"), 20);

    $.Constant({Static:true , Public:false}, "m_MOVEFILEEX_FLAGS", $.Int32, 11);

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_SeparatorChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:true , Public:true }, "Drives", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.IO.DriveInfo")]));

    $.Property({Static:true , Public:true }, "CurrentDirectory", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.VisualBasic.FileIO.FileSystem+CopyOrMove */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.FileIO.FileSystem+CopyOrMove", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Copy: 0, 
    Move: 1, 
  }
);

/* enum Microsoft.VisualBasic.FileIO.FileSystem+FileOrDirectory */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.FileIO.FileSystem+FileOrDirectory", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    File: 0, 
    Directory: 1, 
  }
);

/* enum Microsoft.VisualBasic.FileIO.FileSystem+UIOptionInternal */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.FileIO.FileSystem+UIOptionInternal", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OnlyErrorDialogs: 2, 
    AllDialogs: 3, 
    NoUI: 4, 
  }
);

/* class Microsoft.VisualBasic.FileIO.FileSystem+DirectoryNode */ 

(function DirectoryNode$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.FileIO.FileSystem+DirectoryNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SubDirs", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TargetPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_Path", $.String);

    $.Field({Static:false, Public:false}, "m_TargetPath", $.String);

    $.Field({Static:false, Public:false}, "m_SubDirs", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.Type]));

    $.Property({Static:false, Public:false}, "Path", $.String);

    $.Property({Static:false, Public:false}, "TargetPath", $.String);

    $.Property({Static:false, Public:false}, "SubDirs", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.Type]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.FileIO.FileSystem+TextSearchHelper */ 

(function TextSearchHelper$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.FileIO.FileSystem+TextSearchHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Text.Encoding"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "BytesMatch", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsTextFound", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.Field({Static:false, Public:false}, "m_SearchText", $.String);

    $.Field({Static:false, Public:false}, "m_IgnoreCase", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Decoder", $asm07.TypeRef("System.Text.Decoder"));

    $.Field({Static:false, Public:false}, "m_PreviousCharBuffer", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "m_CheckPreamble", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Preamble", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.VisualBasic.FileIO.DeleteDirectoryOption */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.FileIO.DeleteDirectoryOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    ThrowIfDirectoryNonEmpty: 4, 
    DeleteAllContents: 5, 
  }
);

/* enum Microsoft.VisualBasic.FileIO.RecycleOption */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.FileIO.RecycleOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    DeletePermanently: 2, 
    SendToRecycleBin: 3, 
  }
);

/* enum Microsoft.VisualBasic.FileIO.SearchOption */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.FileIO.SearchOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    SearchTopLevelOnly: 2, 
    SearchAllSubDirectories: 3, 
  }
);

/* enum Microsoft.VisualBasic.FileIO.UICancelOption */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.FileIO.UICancelOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    DoNothing: 2, 
    ThrowException: 3, 
  }
);

/* enum Microsoft.VisualBasic.FileIO.UIOption */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.FileIO.UIOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    OnlyErrorDialogs: 2, 
    AllDialogs: 3, 
  }
);

/* class Microsoft.VisualBasic.FileIO.MalformedLineException */ 

(function MalformedLineException$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.VisualBasic.FileIO.MalformedLineException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int64, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, "set_LineNumber", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_LineNumber", $.Int64);

    $.Constant({Static:true , Public:false}, "LINE_NUMBER_PROPERTY", $.String, "LineNumber");

    $.Property({Static:false, Public:true }, "LineNumber", $.Int64)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Always]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.FileIO.SpecialDirectories */ 

(function SpecialDirectories$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.FileIO.SpecialDirectories", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AllUsersApplicationData", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CurrentUserApplicationData", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Desktop", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MyDocuments", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MyMusic", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MyPictures", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ProgramFiles", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Programs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Temp", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDirectoryPath", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.Property({Static:true , Public:true }, "MyDocuments", $.String);

    $.Property({Static:true , Public:true }, "MyMusic", $.String);

    $.Property({Static:true , Public:true }, "MyPictures", $.String);

    $.Property({Static:true , Public:true }, "Desktop", $.String);

    $.Property({Static:true , Public:true }, "Programs", $.String);

    $.Property({Static:true , Public:true }, "ProgramFiles", $.String);

    $.Property({Static:true , Public:true }, "Temp", $.String);

    $.Property({Static:true , Public:true }, "CurrentUserApplicationData", $.String);

    $.Property({Static:true , Public:true }, "AllUsersApplicationData", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.FileIO.TextFieldParser */ 

(function TextFieldParser$Members () {
  var $, $thisType;

































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.FileIO.TextFieldParser", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Text.Encoding"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.TextReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ArrayHasChanged", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CharacterIsInDelimiter", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCommentTokensForWhitespace", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseReader", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReading", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BeginQuotesRegex", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Text.RegularExpressions.Regex"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CommentTokens", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Delimiters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndOfData", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EndQuotePattern", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorLine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorLineNumber", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FieldWidths", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasFieldsEnclosedInQuotes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TextFieldType", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.FileIO.FieldType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrimWhiteSpace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WhitespaceCharacters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WhitespacePattern", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEndOfLineIndex", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFixedWidthField", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Globalization.StringInfo"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IgnoreLine", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncreaseBufferSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeFromPath", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeFromStream", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDelimitedLine", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseFixedWidthLine", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "PeekChars", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PeekNextDataLine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFields", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadLine", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:false}, "ReadNextDataLine", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNextLine", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.TextFieldParser+ChangeBufferFunction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadToBuffer", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadToEnd", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, "set_CommentTokens", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Delimiters", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FieldWidths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HasFieldsEnclosedInQuotes", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TextFieldType", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.FileIO.FieldType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrimWhiteSpace", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetDelimiters", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    )
      .Parameter(0, "delimiters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "SetFieldWidths", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Int32]))
    )
      .Parameter(0, "fieldWidths", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "SlideCursorToStartOfBuffer", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAndEscapeDelimiters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateDelimiters", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateFieldTypeEnumValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.FileIO.FieldType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateFieldWidths", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateFieldWidthsOnInput", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateFixedWidthLine", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Globalization.StringInfo"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidatePath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateReadyToRead", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_Disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Reader", $asm07.TypeRef("System.IO.TextReader"));

    $.Field({Static:false, Public:false}, "m_CommentTokens", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "m_LineNumber", $.Int64);

    $.Field({Static:false, Public:false}, "m_EndOfData", $.Boolean);

    $.Field({Static:false, Public:false}, "m_ErrorLine", $.String);

    $.Field({Static:false, Public:false}, "m_ErrorLineNumber", $.Int64);

    $.Field({Static:false, Public:false}, "m_TextFieldType", $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FieldType"));

    $.Field({Static:false, Public:false}, "m_FieldWidths", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_Delimiters", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "m_FieldWidthsCopy", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_DelimitersCopy", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "m_DelimiterRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:false, Public:false}, "m_DelimiterWithEndCharsRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Constant({Static:true , Public:false}, "REGEX_OPTIONS", $asm0A.TypeRef("System.Text.RegularExpressions.RegexOptions"), 512);

    $.Field({Static:false, Public:false}, "m_WhitespaceCodes", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_BeginQuotesRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:false, Public:false}, "m_WhiteSpaceRegEx", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:false, Public:false}, "m_TrimWhiteSpace", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Position", $.Int32);

    $.Field({Static:false, Public:false}, "m_PeekPosition", $.Int32);

    $.Field({Static:false, Public:false}, "m_CharsRead", $.Int32);

    $.Field({Static:false, Public:false}, "m_NeedPropertyCheck", $.Boolean);

    $.Constant({Static:true , Public:false}, "DEFAULT_BUFFER_LENGTH", $.Int32, 4096);

    $.Constant({Static:true , Public:false}, "DEFAULT_BUILDER_INCREASE", $.Int32, 10);

    $.Field({Static:false, Public:false}, "m_Buffer", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "m_LineLength", $.Int32);

    $.Field({Static:false, Public:false}, "m_HasFieldsEnclosedInQuotes", $.Boolean);

    $.Field({Static:false, Public:false}, "m_SpaceChars", $.String);

    $.Field({Static:false, Public:false}, "m_MaxLineSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_MaxBufferSize", $.Int32);

    $.Constant({Static:true , Public:false}, "BEGINS_WITH_QUOTE", $.String, "\\G[{0}]*\"");

    $.Constant({Static:true , Public:false}, "ENDING_QUOTE", $.String, "\"[{0}]*");

    $.Field({Static:false, Public:false}, "m_LeaveOpen", $.Boolean);

    $.Property({Static:false, Public:true }, "CommentTokens", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:false, Public:true }, "EndOfData", $.Boolean);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int64)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:false, Public:true }, "ErrorLine", $.String);

    $.Property({Static:false, Public:true }, "ErrorLineNumber", $.Int64);

    $.Property({Static:false, Public:true }, "TextFieldType", $asm05.TypeRef("Microsoft.VisualBasic.FileIO.FieldType"));

    $.Property({Static:false, Public:true }, "FieldWidths", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:true }, "Delimiters", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "TrimWhiteSpace", $.Boolean);

    $.Property({Static:false, Public:true }, "HasFieldsEnclosedInQuotes", $.Boolean)
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:false, Public:false}, "BeginQuotesRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Property({Static:false, Public:false}, "EndQuotePattern", $.String);

    $.Property({Static:false, Public:false}, "WhitespaceCharacters", $.String);

    $.Property({Static:false, Public:false}, "WhitespacePattern", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.VisualBasic.FileIO.TextFieldParser+ChangeBufferFunction */ 

JSIL.MakeDelegate("Microsoft.VisualBasic.FileIO.TextFieldParser+ChangeBufferFunction", false, [], 
  JSIL.MethodSignature.Return($asm07.TypeRef("System.Int32")));

/* enum Microsoft.VisualBasic.FileIO.FieldType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.FileIO.FieldType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Delimited: 0, 
    FixedWidth: 1, 
  }
);

/* class Microsoft.VisualBasic.FileIO.QuoteDelimitedFieldBuilder */ 

(function QuoteDelimitedFieldBuilder$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.FileIO.QuoteDelimitedFieldBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Text.RegularExpressions.Regex"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "BuildField", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DelimiterLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Field", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FieldFinished", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Index", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MalformedLine", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "m_Field", $asm07.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "m_FieldFinished", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Index", $.Int32);

    $.Field({Static:false, Public:false}, "m_DelimiterLength", $.Int32);

    $.Field({Static:false, Public:false}, "m_DelimiterRegex", $asm0A.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:false, Public:false}, "m_SpaceChars", $.String);

    $.Field({Static:false, Public:false}, "m_MalformedLine", $.Boolean);

    $.Property({Static:false, Public:true }, "FieldFinished", $.Boolean);

    $.Property({Static:false, Public:true }, "Field", $.String);

    $.Property({Static:false, Public:true }, "Index", $.Int32);

    $.Property({Static:false, Public:true }, "DelimiterLength", $.Int32);

    $.Property({Static:false, Public:true }, "MalformedLine", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.VisualBasic.CompilerServices");
/* class Microsoft.VisualBasic.CompilerServices.BooleanType */ 

(function BooleanType$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.BooleanType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DecimalToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.ByteType */ 

(function ByteType$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.ByteType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DecimalToByte", 
      new JSIL.MethodSignature($.Byte, [$asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($.Byte, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.CharType */ 

(function CharType$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.CharType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($.Char, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($.Char, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.CharArrayType */ 

(function CharArrayType$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.CharArrayType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.ConversionResolution */ 

(function ConversionResolution$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.ConversionResolution", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ClassifyCLRArrayToInterfaceConversion", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClassifyCLRConversionForArrayElementTypes", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClassifyConversion", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass"), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClassifyIntrinsicConversion", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass"), [$asm07.TypeRef("System.TypeCode"), $asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClassifyPredefinedCLRConversion", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClassifyPredefinedConversion", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClassifyUserDefinedConversion", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass"), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectConversionOperators", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DoClassifyUserDefinedConversion", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass"), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Encompasses", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindBestMatch", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InsertInOperatorListIfLessGenericThanExisting", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MostEncompassed", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MostEncompassing", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotEncompasses", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveConversion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyTypeCodeEnum", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConversionTable", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass")])]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NumericSpecificityRank", $jsilcore.TypeRef("System.Array", [$.Int32]), function ($pi) {
        return JSIL.Array.New($asm07.System.Int32, 19);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ForLoopWidestTypeCode", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.TypeCode")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass", 
    BaseType: $asm07.TypeRef("System.SByte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Bad: 0, 
    Identity: 1, 
    Widening: 2, 
    Narrowing: 3, 
    None: 4, 
    Ambiguous: 5, 
  }
);

/* class Microsoft.VisualBasic.CompilerServices.OperatorCaches */ 

(function OperatorCaches$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.OperatorCaches", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConversionCache", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OperatorCaches+FixedList"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "UnconvertibleTypeCache", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OperatorCaches+FixedExistanceList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.OperatorCaches+FixedList */ 

(function FixedList$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.OperatorCaches+FixedList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass"), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Lookup", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass")]), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToFront", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_List", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OperatorCaches+FixedList+Entry")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_Size", $.Int32);

    $.Field({Static:false, Public:false}, "m_First", $.Int32);

    $.Field({Static:false, Public:false}, "m_Last", $.Int32);

    $.Field({Static:false, Public:false}, "m_Count", $.Int32);

    $.Constant({Static:true , Public:false}, "DefaultSize", $.Int32, 50);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.VisualBasic.CompilerServices.OperatorCaches+FixedList+Entry */ 

(function Entry$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.CompilerServices.OperatorCaches+FixedList+Entry", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "TargetType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "SourceType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "Classification", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ConversionResolution+ConversionClass"));

    $.Field({Static:false, Public:false}, "OperatorMethod", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"));

    $.Field({Static:false, Public:false}, "Next", $.Int32);

    $.Field({Static:false, Public:false}, "Previous", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.OperatorCaches+FixedExistanceList */ 

(function FixedExistanceList$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.OperatorCaches+FixedExistanceList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Lookup", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToFront", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_List", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OperatorCaches+FixedExistanceList+Entry")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_Size", $.Int32);

    $.Field({Static:false, Public:false}, "m_First", $.Int32);

    $.Field({Static:false, Public:false}, "m_Last", $.Int32);

    $.Field({Static:false, Public:false}, "m_Count", $.Int32);

    $.Constant({Static:true , Public:false}, "DefaultSize", $.Int32, 50);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.VisualBasic.CompilerServices.OperatorCaches+FixedExistanceList+Entry */ 

(function Entry$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.CompilerServices.OperatorCaches+FixedExistanceList+Entry", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "Next", $.Int32);

    $.Field({Static:false, Public:false}, "Previous", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.Conversions */ 

(function Conversions$Members () {
  var $, $thisType;
















































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.Conversions", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CanUserDefinedConvert", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CastByteEnum", 
      new JSIL.MethodSignature($.Object, [$.Byte, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CastInt16Enum", 
      new JSIL.MethodSignature($.Object, [$.Int16, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CastInt32Enum", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CastInt64Enum", 
      new JSIL.MethodSignature($.Object, [$.Int64, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CastSByteEnum", 
      new JSIL.MethodSignature($.Object, [$.SByte, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CastUInt16Enum", 
      new JSIL.MethodSignature($.Object, [$.UInt16, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CastUInt32Enum", 
      new JSIL.MethodSignature($.Object, [$.UInt32, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CastUInt64Enum", 
      new JSIL.MethodSignature($.Object, [$.UInt64, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ChangeIntrinsicType", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.Type")])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FallbackUserDefinedConversion", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ForceValueCopy", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromCharAndCount", 
      new JSIL.MethodSignature($.String, [$.Char, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromCharArray", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Char])])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromCharArraySubset", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNormalizedNumberFormat", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Globalization.NumberFormatInfo"), [$asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjectUserDefinedConversion", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.Type")])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ParseDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.String, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseDouble", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseDouble", 
      new JSIL.MethodSignature($.Double, [$.String, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToCharArrayRankOne", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToCharArrayRankOne", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Boolean])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.String, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Object, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToGenericParameter", 
      new JSIL.MethodSignature("!!0", [$.Object], ["T"])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToInteger", 
      new JSIL.MethodSignature($.Int32, [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToInteger", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLong", 
      new JSIL.MethodSignature($.Int64, [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLong", 
      new JSIL.MethodSignature($.Int64, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToSByte", 
      new JSIL.MethodSignature($.SByte, [$.String])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToSByte", 
      new JSIL.MethodSignature($.SByte, [$.Object])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToShort", 
      new JSIL.MethodSignature($.Int16, [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToShort", 
      new JSIL.MethodSignature($.Int16, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Byte])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Char])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int16])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt32])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt64])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.DateTime")])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Decimal")])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Decimal"), $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToUInteger", 
      new JSIL.MethodSignature($.UInt32, [$.String])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToUInteger", 
      new JSIL.MethodSignature($.UInt32, [$.Object])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToULong", 
      new JSIL.MethodSignature($.UInt64, [$.String])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToULong", 
      new JSIL.MethodSignature($.UInt64, [$.Object])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToUShort", 
      new JSIL.MethodSignature($.UInt16, [$.String])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToUShort", 
      new JSIL.MethodSignature($.UInt16, [$.Object])
    )
      .Attribute($asm07.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryParseDate", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseDouble", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Double])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.ShortType */ 

(function ShortType$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.ShortType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DecimalToShort", 
      new JSIL.MethodSignature($.Int16, [$asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($.Int16, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($.Int16, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.IntegerType */ 

(function IntegerType$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.IntegerType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DecimalToInteger", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.InternalXmlHelper */ 

(function InternalXmlHelper$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.InternalXmlHelper", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateAttribute", 
      new JSIL.MethodSignature($asm30.TypeRef("System.Xml.Linq.XAttribute"), [$asm30.TypeRef("System.Xml.Linq.XName"), $.Object])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateNamespaceAttribute", 
      new JSIL.MethodSignature($asm30.TypeRef("System.Xml.Linq.XAttribute"), [$asm30.TypeRef("System.Xml.Linq.XName"), $asm30.TypeRef("System.Xml.Linq.XNamespace")])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "get_AttributeValue", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm30.TypeRef("System.Xml.Linq.XElement")]), $asm30.TypeRef("System.Xml.Linq.XName")])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AttributeValue", 
      new JSIL.MethodSignature($.String, [$asm30.TypeRef("System.Xml.Linq.XElement"), $asm30.TypeRef("System.Xml.Linq.XName")])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm30.TypeRef("System.Xml.Linq.XElement")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "RemoveNamespaceAttributes", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm30.TypeRef("System.Xml.Linq.XNamespace")]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm30.TypeRef("System.Xml.Linq.XAttribute")]), $.Object
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "RemoveNamespaceAttributes", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerable"), [
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm30.TypeRef("System.Xml.Linq.XNamespace")]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm30.TypeRef("System.Xml.Linq.XAttribute")]), $asm07.TypeRef("System.Collections.IEnumerable")
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "RemoveNamespaceAttributes", 
      new JSIL.MethodSignature($asm30.TypeRef("System.Xml.Linq.XElement"), [
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm30.TypeRef("System.Xml.Linq.XNamespace")]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm30.TypeRef("System.Xml.Linq.XAttribute")]), $asm30.TypeRef("System.Xml.Linq.XElement")
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "set_AttributeValue", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm30.TypeRef("System.Xml.Linq.XElement")]), $asm30.TypeRef("System.Xml.Linq.XName"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_AttributeValue", 
      new JSIL.MethodSignature(null, [
          $asm30.TypeRef("System.Xml.Linq.XElement"), $asm30.TypeRef("System.Xml.Linq.XName"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm30.TypeRef("System.Xml.Linq.XElement")]), $.String])
    );

    $.Property({Static:true , Public:true }, "Value", $.String);

    $.Property({Static:true , Public:true }, "AttributeValue", $.String);

    $.Property({Static:true , Public:true }, "AttributeValue", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"))
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.InternalXmlHelper+RemoveNamespaceAttributesClosure */ 

(function RemoveNamespaceAttributesClosure$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.InternalXmlHelper+RemoveNamespaceAttributesClosure", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm30.TypeRef("System.Xml.Linq.XNamespace")]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm30.TypeRef("System.Xml.Linq.XAttribute")])
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:false}, "ProcessObject", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:false}, "ProcessXElement", 
      new JSIL.MethodSignature($asm30.TypeRef("System.Xml.Linq.XElement"), [$asm30.TypeRef("System.Xml.Linq.XElement")])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_inScopePrefixes", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_inScopeNs", $jsilcore.TypeRef("System.Array", [$asm30.TypeRef("System.Xml.Linq.XNamespace")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_attributes", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm30.TypeRef("System.Xml.Linq.XAttribute")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"))
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.LongType */ 

(function LongType$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.LongType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DecimalToLong", 
      new JSIL.MethodSignature($.Int64, [$asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($.Int64, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.SingleType */ 

(function SingleType$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.SingleType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DecimalToSingle", 
      new JSIL.MethodSignature($.Single, [$asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($.Single, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($.Single, [$.Object, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($.Single, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($.Single, [$.String, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.DoubleType */ 

(function DoubleType$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.DoubleType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DecimalToDouble", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($.Double, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($.Double, [$.Object, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($.Double, [$.String, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Double, [$.String, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Double])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.DateType */ 

(function DateType$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.DateType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.String, $asm07.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.DecimalType */ 

(function DecimalType$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.DecimalType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "FromBoolean", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Object, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.String, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNormalizedNumberFormat", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Globalization.NumberFormatInfo"), [$asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.String, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.FlowControl */ 

(function FlowControl$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.FlowControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckContinueLoop", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.FlowControl+ObjectFor")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckForSyncLockOnValueType", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:true }, "ForEachInArr", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerator"), [$asm07.TypeRef("System.Array")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForEachInObj", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerator"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForEachNextObj", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Object]), $asm07.TypeRef("System.Collections.IEnumerator")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForLoopInitObj", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForNextCheckDec", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Decimal"), $asm07.TypeRef("System.Decimal"), 
          $asm07.TypeRef("System.Decimal")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForNextCheckObj", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForNextCheckR4", 
      new JSIL.MethodSignature($.Boolean, [
          $.Single, $.Single, 
          $.Single
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForNextCheckR8", 
      new JSIL.MethodSignature($.Boolean, [
          $.Double, $.Double, 
          $.Double
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.FlowControl+ObjectFor */ 

(function ObjectFor$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.FlowControl+ObjectFor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Counter", $.Object);

    $.Field({Static:false, Public:true }, "Limit", $.Object);

    $.Field({Static:false, Public:true }, "StepValue", $.Object);

    $.Field({Static:false, Public:true }, "PositiveStep", $.Boolean);

    $.Field({Static:false, Public:true }, "EnumType", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.ObjectFlowControl */ 

(function ObjectFlowControl$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.ObjectFlowControl", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckForSyncLockOnValueType", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.ObjectFlowControl+ForLoopControl */ 

(function ForLoopControl$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.ObjectFlowControl+ForLoopControl", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckContinueLoop", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertLoopElement", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForLoopInitObj", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $.Object, $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ForNextCheckDec", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Decimal"), $asm07.TypeRef("System.Decimal"), 
          $asm07.TypeRef("System.Decimal")
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ForNextCheckObj", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ForNextCheckR4", 
      new JSIL.MethodSignature($.Boolean, [
          $.Single, $.Single, 
          $.Single
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ForNextCheckR8", 
      new JSIL.MethodSignature($.Boolean, [
          $.Double, $.Double, 
          $.Double
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetWidestType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWidestType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyForLoopOperator", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"), $.Object, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.Field({Static:false, Public:false}, "Counter", $.Object);

    $.Field({Static:false, Public:false}, "Limit", $.Object);

    $.Field({Static:false, Public:false}, "StepValue", $.Object);

    $.Field({Static:false, Public:false}, "PositiveStep", $.Boolean);

    $.Field({Static:false, Public:false}, "EnumType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "WidestType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "WidestTypeCode", $asm07.TypeRef("System.TypeCode"));

    $.Field({Static:false, Public:false}, "UseUserDefinedOperators", $.Boolean);

    $.Field({Static:false, Public:false}, "OperatorPlus", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"));

    $.Field({Static:false, Public:false}, "OperatorGreaterEqual", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"));

    $.Field({Static:false, Public:false}, "OperatorLessEqual", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.IDOBinder */ 

(function IDOBinder$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.IDOBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCopyBack", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Boolean]))
    );

    $.ExternalMethod({Static:true , Public:false}, "IDOCall", 
      new JSIL.MethodSignature($.Object, [
          $asm10.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDOFallbackInvokeDefault", 
      new JSIL.MethodSignature($.Object, [
          $asm10.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDOGet", 
      new JSIL.MethodSignature($.Object, [
          $asm10.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDOIndexSet", 
      new JSIL.MethodSignature(null, [
          $asm10.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDOIndexSetComplex", 
      new JSIL.MethodSignature(null, [
          $asm10.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDOInvokeDefault", 
      new JSIL.MethodSignature($.Object, [
          $asm10.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDOSet", 
      new JSIL.MethodSignature(null, [
          $asm10.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDOSetComplex", 
      new JSIL.MethodSignature(null, [
          $asm10.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeUserDefinedOperator", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedConversion", 
      new JSIL.MethodSignature($.Object, [$asm10.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), $asm07.TypeRef("System.Type")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "missingMemberSentinel", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.VisualBasic.CompilerServices.IDOBinder+SaveCopyBack */ 

(function SaveCopyBack$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.CompilerServices.IDOBinder+SaveCopyBack", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose");

    $.ExternalMethod({Static:true , Public:false}, "GetCopyBack", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Boolean]))
    );

    $.Field({Static:true , Public:false}, "SavedCopyBack", $jsilcore.TypeRef("System.Array", [$.Boolean]))
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.Field({Static:false, Public:false}, "oldCopyBack", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBCallBinder */ 

(function VBCallBinder$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm10.TypeRef("System.Dynamic.InvokeMemberBinder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBCallBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm10.TypeRef("System.Dynamic.CallInfo"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvokeMember", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_ignoreReturn", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBGetBinder */ 

(function VBGetBinder$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm10.TypeRef("System.Dynamic.InvokeMemberBinder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBGetBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm10.TypeRef("System.Dynamic.CallInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvokeMember", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBInvokeBinder */ 

(function VBInvokeBinder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm10.TypeRef("System.Dynamic.InvokeBinder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBInvokeBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm10.TypeRef("System.Dynamic.CallInfo"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_lateCall", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBInvokeDefaultBinder */ 

(function VBInvokeDefaultBinder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm10.TypeRef("System.Dynamic.InvokeBinder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBInvokeDefaultBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm10.TypeRef("System.Dynamic.CallInfo"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_reportErrors", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBInvokeDefaultFallbackBinder */ 

(function VBInvokeDefaultFallbackBinder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm10.TypeRef("System.Dynamic.GetIndexBinder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBInvokeDefaultFallbackBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm10.TypeRef("System.Dynamic.CallInfo"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetIndex", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_reportErrors", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBSetBinder */ 

(function VBSetBinder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm10.TypeRef("System.Dynamic.SetMemberBinder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBSetBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackSetMember", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBSetComplexBinder */ 

(function VBSetComplexBinder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm10.TypeRef("System.Dynamic.SetMemberBinder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBSetComplexBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackSetMember", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_optimisticSet", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_rValueBase", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBGetMemberBinder */ 

(function VBGetMemberBinder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm10.TypeRef("System.Dynamic.GetMemberBinder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBGetMemberBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetMember", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $asm10.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBConversionBinder */ 

(function VBConversionBinder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm10.TypeRef("System.Dynamic.ConvertBinder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBConversionBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackConvert", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $asm10.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBUnaryOperatorBinder */ 

(function VBUnaryOperatorBinder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm10.TypeRef("System.Dynamic.UnaryOperationBinder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBUnaryOperatorBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"), $asm10.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackUnaryOperation", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $asm10.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_Op", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBBinaryOperatorBinder */ 

(function VBBinaryOperatorBinder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm10.TypeRef("System.Dynamic.BinaryOperationBinder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBBinaryOperatorBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"), $asm10.TypeRef("System.Linq.Expressions.ExpressionType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackBinaryOperation", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_Op", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBIndexSetBinder */ 

(function VBIndexSetBinder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm10.TypeRef("System.Dynamic.SetIndexBinder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBIndexSetBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm10.TypeRef("System.Dynamic.CallInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackSetIndex", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBIndexSetComplexBinder */ 

(function VBIndexSetComplexBinder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm10.TypeRef("System.Dynamic.SetIndexBinder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBIndexSetComplexBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm10.TypeRef("System.Dynamic.CallInfo"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackSetIndex", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_optimisticSet", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_rValueBase", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "_hash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.IDOUtils */ 

(function IDOUtils$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.IDOUtils", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertToObject", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Linq.Expressions.Expression"), [$asm10.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CopyBackArguments", 
      new JSIL.MethodSignature(null, [
          $asm10.TypeRef("System.Dynamic.CallInfo"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateConvertCallSiteAndInvoke", 
      new JSIL.MethodSignature($.Object, [$asm10.TypeRef("System.Dynamic.ConvertBinder"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFuncCallSiteAndInvoke", 
      new JSIL.MethodSignature($.Object, [
          $asm10.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvoker", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Func`4", [
            $asm10.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $.Object, 
            $jsilcore.TypeRef("System.Array", [$.Object]), $.Object
          ]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRefCallSiteAndInvoke", 
      new JSIL.MethodSignature($.Object, [
          $asm10.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateRestriction", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.BindingRestrictions"), [$asm10.TypeRef("System.Dynamic.DynamicMetaObject")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateRestrictions", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.BindingRestrictions"), [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCachedBinder", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), [$asm10.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetWriteBack", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Linq.Expressions.Expression"), [$jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Linq.Expressions.Expression")]), $asm10.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "LinqOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$asm10.TypeRef("System.Linq.Expressions.ExpressionType")]), [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NeedsDeferral", 
      new JSIL.MethodSignature($.Boolean, [
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm10.TypeRef("System.Dynamic.DynamicMetaObject")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PackArguments", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Object])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm10.TypeRef("System.Dynamic.CallInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryCastToIDMOP", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnpackArguments", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Dynamic.DynamicMetaObject")]), $asm10.TypeRef("System.Dynamic.CallInfo"), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm10.TypeRef("System.Linq.Expressions.Expression")])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.String])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Object])])
        ])
    );

    $.Field({Static:true , Public:false}, "binderCache", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.CacheSet`1", [$asm10.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")]));

    $.Field({Static:true , Public:false}, "Invokers", $asm05.TypeRef("CacheDict`2", [$.Int32, $asm07.TypeRef("System.Func`4", [
            $asm10.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $.Object, 
            $jsilcore.TypeRef("System.Array", [$.Object]), $.Object
          ])]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.CacheSet`1 */ 

(function CacheSet$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.CacheSet`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExistingOrAdd", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.GenericParameter("T")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dict", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("T"), $asm0A.TypeRef("System.Collections.Generic.LinkedListNode`1", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_list", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_maxSize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.StringType */ 

(function StringType$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.StringType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AsteriskSkip", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod"), 
          $asm07.TypeRef("System.Globalization.CompareInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromBoolean", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromByte", 
      new JSIL.MethodSignature($.String, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromChar", 
      new JSIL.MethodSignature($.String, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromDate", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromDecimal", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromDecimal", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Decimal"), $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromDouble", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromDouble", 
      new JSIL.MethodSignature($.String, [$.Double, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromInteger", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromLong", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromObject", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromShort", 
      new JSIL.MethodSignature($.String, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromSingle", 
      new JSIL.MethodSignature($.String, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromSingle", 
      new JSIL.MethodSignature($.String, [$.Single, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "MidStmtStr", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Int32, 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultipleAsteriskSkip", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StrCmp", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StrLike", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StrLikeBinary", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StrLikeCompare", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Globalization.CompareInfo"), $.Boolean, 
          $.Boolean, $.Char, 
          $.Char, $asm07.TypeRef("System.Globalization.CompareOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "StrLikeCompareBinary", 
      new JSIL.MethodSignature($.Boolean, [
          $.Boolean, $.Boolean, 
          $.Char, $.Char
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StrLikeText", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.Constant({Static:true , Public:false}, "GENERAL_FORMAT", $.String, "G");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.ObjectType */ 

(function ObjectType$Members () {
  var $, $thisType;































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.ObjectType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddByte", 
      new JSIL.MethodSignature($.Object, [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddDecimal", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddDouble", 
      new JSIL.MethodSignature($.Object, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddInt16", 
      new JSIL.MethodSignature($.Object, [$.Int16, $.Int16])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddSingle", 
      new JSIL.MethodSignature($.Object, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddString", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode"), 
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "BitAndObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "BitOrObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "BitXorObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CTypeHelper", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CTypeHelper", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DivDecimal", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DivDouble", 
      new JSIL.MethodSignature($.Object, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "DivSingle", 
      new JSIL.MethodSignature($.Object, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "DivString", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode"), 
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DivStringString", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNoValidOperatorException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNoValidOperatorException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObjectValuePrimitive", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWidestType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TypeCode"), [
          $.Object, $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWidestType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TypeCode"), [$.Object, $asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDivideByte", 
      new JSIL.MethodSignature($.Object, [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDivideInt16", 
      new JSIL.MethodSignature($.Object, [$.Int16, $.Int16])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDivideInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDivideInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDivideString", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode"), 
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IDivideStringString", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IDivObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalNegObj", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.IConvertible"), 
          $asm07.TypeRef("System.TypeCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWideningConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWiderNumeric", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "LikeObj", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModByte", 
      new JSIL.MethodSignature($.Object, [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModDecimal", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModDouble", 
      new JSIL.MethodSignature($.Object, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModInt16", 
      new JSIL.MethodSignature($.Object, [$.Int16, $.Int16])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ModObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModSingle", 
      new JSIL.MethodSignature($.Object, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModString", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode"), 
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModStringString", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MulByte", 
      new JSIL.MethodSignature($.Object, [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "MulDecimal", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MulDouble", 
      new JSIL.MethodSignature($.Object, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "MulInt16", 
      new JSIL.MethodSignature($.Object, [$.Int16, $.Int16])
    );

    $.ExternalMethod({Static:true , Public:false}, "MulInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "MulInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "MulObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MulSingle", 
      new JSIL.MethodSignature($.Object, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "MulString", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode"), 
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MulStringString", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "NegObj", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotObj", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ObjTst", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjTstBoolean", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjTstByte", 
      new JSIL.MethodSignature($.Int32, [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjTstChar", 
      new JSIL.MethodSignature($.Int32, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjTstDateTime", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjTstDecimal", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjTstDouble", 
      new JSIL.MethodSignature($.Int32, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjTstInt16", 
      new JSIL.MethodSignature($.Int32, [$.Int16, $.Int16])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjTstInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjTstInt64", 
      new JSIL.MethodSignature($.Int32, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjTstSingle", 
      new JSIL.MethodSignature($.Int32, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjTstString", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode"), 
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjTstStringString", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PlusObj", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "PowObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "ShiftLeftObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ShiftRightObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "StrCatObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubByte", 
      new JSIL.MethodSignature($.Object, [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubDecimal", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubDouble", 
      new JSIL.MethodSignature($.Object, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubInt16", 
      new JSIL.MethodSignature($.Object, [$.Int16, $.Int16])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubSingle", 
      new JSIL.MethodSignature($.Object, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubString", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode"), 
          $asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.TypeCode")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubStringString", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToVBBool", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToVBBoolConv", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IConvertible"), [$asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeCodeFromVType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TypeCode"), [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ObjectType+VType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeFromTypeCode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VType2FromTypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ObjectType+VType2"), [$asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VTypeFromTypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ObjectType+VType"), [$asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "XorObj", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    );

    $.Constant({Static:true , Public:false}, "TCMAX", $.Int32, 19);

    $.Field({Static:true , Public:false, ReadOnly:true }, "WiderType", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ObjectType+VType"), JSIL.ArrayDimensionParameter(2)]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ConversionClassTable", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.ObjectType+CC"), JSIL.ArrayDimensionParameter(2)]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* enum Microsoft.VisualBasic.CompilerServices.ObjectType+VType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.ObjectType+VType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    t_bad: 0, 
    t_bool: 1, 
    t_ui1: 2, 
    t_i2: 3, 
    t_i4: 4, 
    t_i8: 5, 
    t_dec: 6, 
    t_r4: 7, 
    t_r8: 8, 
    t_char: 9, 
    t_str: 10, 
    t_date: 11, 
  }
);

/* enum Microsoft.VisualBasic.CompilerServices.ObjectType+VType2 */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.ObjectType+VType2", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    t_bad: 0, 
    t_bool: 1, 
    t_ui1: 2, 
    t_char: 3, 
    t_i2: 4, 
    t_i4: 5, 
    t_i8: 6, 
    t_r4: 7, 
    t_r8: 8, 
    t_date: 9, 
    t_dec: 10, 
    t_ref: 11, 
    t_str: 12, 
  }
);

/* enum Microsoft.VisualBasic.CompilerServices.ObjectType+CC */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.ObjectType+CC", 
    BaseType: $asm07.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Err: 0, 
    Same: 1, 
    Narr: 2, 
    Wide: 3, 
  }
);

/* class Microsoft.VisualBasic.CompilerServices.Operators */ 

(function Operators$Members () {
  var $, $thisType;









































































































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.Operators", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddByte", 
      new JSIL.MethodSignature($.Object, [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddDecimal", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddDouble", 
      new JSIL.MethodSignature($.Object, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddInt16", 
      new JSIL.MethodSignature($.Object, [$.Int16, $.Int16])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AddSByte", 
      new JSIL.MethodSignature($.Object, [$.SByte, $.SByte])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddSingle", 
      new JSIL.MethodSignature($.Object, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddString", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddUInt16", 
      new JSIL.MethodSignature($.Object, [$.UInt16, $.UInt16])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddUInt32", 
      new JSIL.MethodSignature($.Object, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddUInt64", 
      new JSIL.MethodSignature($.Object, [$.UInt64, $.UInt64])
    );

    $.ExternalMethod({Static:true , Public:false}, "AndBoolean", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "AndByte", 
      new JSIL.MethodSignature($.Object, [
          $.Byte, $.Byte, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AndInt16", 
      new JSIL.MethodSignature($.Object, [
          $.Int16, $.Int16, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AndInt32", 
      new JSIL.MethodSignature($.Object, [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AndInt64", 
      new JSIL.MethodSignature($.Object, [
          $.Int64, $.Int64, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AndObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AndSByte", 
      new JSIL.MethodSignature($.Object, [
          $.SByte, $.SByte, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AndUInt16", 
      new JSIL.MethodSignature($.Object, [
          $.UInt16, $.UInt16, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AndUInt32", 
      new JSIL.MethodSignature($.Object, [
          $.UInt32, $.UInt32, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AndUInt64", 
      new JSIL.MethodSignature($.Object, [
          $.UInt64, $.UInt64, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsteriskSkip", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod"), 
          $asm07.TypeRef("System.Globalization.CompareInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectOperators", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareBoolean", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Operators+CompareClass"), [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareChar", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Operators+CompareClass"), [$.Char, $.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareDate", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Operators+CompareClass"), [$asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareDecimal", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Operators+CompareClass"), [$asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareDouble", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Operators+CompareClass"), [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareInt32", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Operators+CompareClass"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareInt64", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Operators+CompareClass"), [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompareObject", 
      new JSIL.MethodSignature($.Int32, [
          $.Object, $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareObject2", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Operators+CompareClass"), [
          $.Object, $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompareObjectEqual", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CompareObjectGreater", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CompareObjectGreaterEqual", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CompareObjectLess", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CompareObjectLessEqual", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CompareObjectNotEqual", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CompareSingle", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Operators+CompareClass"), [$.Single, $.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompareString", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Boolean
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CompareUInt32", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Operators+CompareClass"), [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareUInt64", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Operators+CompareClass"), [$.UInt64, $.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConcatenateObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConditionalCompareObjectEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConditionalCompareObjectGreater", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConditionalCompareObjectGreaterEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConditionalCompareObjectLess", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConditionalCompareObjectLessEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConditionalCompareObjectNotEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DivideDecimal", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DivideDouble", 
      new JSIL.MethodSignature($.Object, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivideObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DivideSingle", 
      new JSIL.MethodSignature($.Object, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExponentObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FallbackInvokeUserDefinedOperator", 
      new JSIL.MethodSignature($.Object, [$.Object, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCallableUserDefinedOperator", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "Arguments", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetEnumResult", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNoValidOperatorException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNoValidOperatorException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntDivideByte", 
      new JSIL.MethodSignature($.Object, [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntDivideInt16", 
      new JSIL.MethodSignature($.Object, [$.Int16, $.Int16])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntDivideInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntDivideInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "IntDivideObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IntDivideSByte", 
      new JSIL.MethodSignature($.Object, [$.SByte, $.SByte])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntDivideUInt16", 
      new JSIL.MethodSignature($.Object, [$.UInt16, $.UInt16])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntDivideUInt32", 
      new JSIL.MethodSignature($.Object, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntDivideUInt64", 
      new JSIL.MethodSignature($.Object, [$.UInt64, $.UInt64])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeObjectUserDefinedOperator", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeUserDefinedOperator", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "Arguments", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "InvokeUserDefinedOperator", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "Arguments", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "LeftShiftObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LikeObject", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LikeString", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LikeStringBinary", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LikeStringCompare", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Globalization.CompareInfo"), $.Boolean, 
          $.Boolean, $.Char, 
          $.Char, $asm07.TypeRef("System.Globalization.CompareOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LikeStringCompareBinary", 
      new JSIL.MethodSignature($.Boolean, [
          $.Boolean, $.Boolean, 
          $.Char, $.Char
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LikeStringText", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModByte", 
      new JSIL.MethodSignature($.Object, [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModDecimal", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModDouble", 
      new JSIL.MethodSignature($.Object, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModInt16", 
      new JSIL.MethodSignature($.Object, [$.Int16, $.Int16])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ModObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ModSByte", 
      new JSIL.MethodSignature($.Object, [$.SByte, $.SByte])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModSingle", 
      new JSIL.MethodSignature($.Object, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModUInt16", 
      new JSIL.MethodSignature($.Object, [$.UInt16, $.UInt16])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModUInt32", 
      new JSIL.MethodSignature($.Object, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModUInt64", 
      new JSIL.MethodSignature($.Object, [$.UInt64, $.UInt64])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultipleAsteriskSkip", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplyByte", 
      new JSIL.MethodSignature($.Object, [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplyDecimal", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplyDouble", 
      new JSIL.MethodSignature($.Object, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplyInt16", 
      new JSIL.MethodSignature($.Object, [$.Int16, $.Int16])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplyInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplyInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MultiplySByte", 
      new JSIL.MethodSignature($.Object, [$.SByte, $.SByte])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplySingle", 
      new JSIL.MethodSignature($.Object, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplyUInt16", 
      new JSIL.MethodSignature($.Object, [$.UInt16, $.UInt16])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplyUInt32", 
      new JSIL.MethodSignature($.Object, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplyUInt64", 
      new JSIL.MethodSignature($.Object, [$.UInt64, $.UInt64])
    );

    $.ExternalMethod({Static:true , Public:false}, "NegateBoolean", 
      new JSIL.MethodSignature($.Object, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "NegateByte", 
      new JSIL.MethodSignature($.Object, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "NegateDecimal", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NegateDouble", 
      new JSIL.MethodSignature($.Object, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "NegateInt16", 
      new JSIL.MethodSignature($.Object, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:false}, "NegateInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "NegateInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "NegateObject", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "NegateSByte", 
      new JSIL.MethodSignature($.Object, [$.SByte])
    );

    $.ExternalMethod({Static:true , Public:false}, "NegateSingle", 
      new JSIL.MethodSignature($.Object, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "NegateString", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "NegateUInt16", 
      new JSIL.MethodSignature($.Object, [$.UInt16])
    );

    $.ExternalMethod({Static:true , Public:false}, "NegateUInt32", 
      new JSIL.MethodSignature($.Object, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "NegateUInt64", 
      new JSIL.MethodSignature($.Object, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotBoolean", 
      new JSIL.MethodSignature($.Object, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotByte", 
      new JSIL.MethodSignature($.Object, [$.Byte, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotInt16", 
      new JSIL.MethodSignature($.Object, [$.Int16, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotObject", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "NotSByte", 
      new JSIL.MethodSignature($.Object, [$.SByte, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotUInt16", 
      new JSIL.MethodSignature($.Object, [$.UInt16, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotUInt32", 
      new JSIL.MethodSignature($.Object, [$.UInt32, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotUInt64", 
      new JSIL.MethodSignature($.Object, [$.UInt64, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OrBoolean", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "OrByte", 
      new JSIL.MethodSignature($.Object, [
          $.Byte, $.Byte, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OrInt16", 
      new JSIL.MethodSignature($.Object, [
          $.Int16, $.Int16, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OrInt32", 
      new JSIL.MethodSignature($.Object, [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OrInt64", 
      new JSIL.MethodSignature($.Object, [
          $.Int64, $.Int64, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OrSByte", 
      new JSIL.MethodSignature($.Object, [
          $.SByte, $.SByte, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OrUInt16", 
      new JSIL.MethodSignature($.Object, [
          $.UInt16, $.UInt16, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OrUInt32", 
      new JSIL.MethodSignature($.Object, [
          $.UInt32, $.UInt32, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OrUInt64", 
      new JSIL.MethodSignature($.Object, [
          $.UInt64, $.UInt64, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PlusObject", 
      new JSIL.MethodSignature($.Object, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ResolveUserDefinedOperator", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "RightShiftObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SubtractByte", 
      new JSIL.MethodSignature($.Object, [$.Byte, $.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubtractDecimal", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IConvertible"), $asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubtractDouble", 
      new JSIL.MethodSignature($.Object, [$.Double, $.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubtractInt16", 
      new JSIL.MethodSignature($.Object, [$.Int16, $.Int16])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubtractInt32", 
      new JSIL.MethodSignature($.Object, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubtractInt64", 
      new JSIL.MethodSignature($.Object, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SubtractSByte", 
      new JSIL.MethodSignature($.Object, [$.SByte, $.SByte])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubtractSingle", 
      new JSIL.MethodSignature($.Object, [$.Single, $.Single])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubtractUInt16", 
      new JSIL.MethodSignature($.Object, [$.UInt16, $.UInt16])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubtractUInt32", 
      new JSIL.MethodSignature($.Object, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubtractUInt64", 
      new JSIL.MethodSignature($.Object, [$.UInt64, $.UInt64])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToVBBool", 
      new JSIL.MethodSignature($.SByte, [$asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToVBBoolConv", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IConvertible"), [$asm07.TypeRef("System.IConvertible")])
    );

    $.ExternalMethod({Static:true , Public:false}, "XorBoolean", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "XorByte", 
      new JSIL.MethodSignature($.Object, [
          $.Byte, $.Byte, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XorInt16", 
      new JSIL.MethodSignature($.Object, [
          $.Int16, $.Int16, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XorInt32", 
      new JSIL.MethodSignature($.Object, [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XorInt64", 
      new JSIL.MethodSignature($.Object, [
          $.Int64, $.Int64, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "XorObject", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "XorSByte", 
      new JSIL.MethodSignature($.Object, [
          $.SByte, $.SByte, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XorUInt16", 
      new JSIL.MethodSignature($.Object, [
          $.UInt16, $.UInt16, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XorUInt32", 
      new JSIL.MethodSignature($.Object, [
          $.UInt32, $.UInt32, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XorUInt64", 
      new JSIL.MethodSignature($.Object, [
          $.UInt64, $.UInt64, 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Boxed_ZeroDouble", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Boxed_ZeroSinge", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Boxed_ZeroDecimal", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Boxed_ZeroLong", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Boxed_ZeroInteger", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Boxed_ZeroShort", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Boxed_ZeroULong", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Boxed_ZeroUInteger", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Boxed_ZeroUShort", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Boxed_ZeroSByte", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Boxed_ZeroByte", $.Object);

    $.Constant({Static:true , Public:false}, "TCMAX", $.Int32, 19);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* enum Microsoft.VisualBasic.CompilerServices.Operators+CompareClass */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.Operators+CompareClass", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Less: -1, 
    Equal: 0, 
    Greater: 1, 
    Unordered: 2, 
    UserDefined: 3, 
    Undefined: 4, 
  }
);

/* class Microsoft.VisualBasic.CompilerServices.LikeOperator */ 

(function LikeOperator$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.LikeOperator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildPatternGroups", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), 
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm07.TypeRef("System.Globalization.CompareInfo"), $asm07.TypeRef("System.Globalization.CompareOptions"), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+PatternGroup")])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanCharExpand", 
      new JSIL.MethodSignature($.Int32, [
          $.Char, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm07.TypeRef("System.Globalization.CompareInfo"), $asm07.TypeRef("System.Globalization.CompareOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareChars", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), $.String, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), 
          $asm07.TypeRef("System.Globalization.CompareInfo"), $asm07.TypeRef("System.Globalization.CompareOptions"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareChars", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $asm07.TypeRef("System.Globalization.CompareInfo"), $asm07.TypeRef("System.Globalization.CompareOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Char, $.Char, 
          $asm07.TypeRef("System.Globalization.CompareInfo"), $asm07.TypeRef("System.Globalization.CompareOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpandString", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")])]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm07.TypeRef("System.Globalization.CompareInfo"), $asm07.TypeRef("System.Globalization.CompareOptions"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCharExpansion", 
      new JSIL.MethodSignature($.String, [
          $.Char, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm07.TypeRef("System.Globalization.CompareInfo"), $asm07.TypeRef("System.Globalization.CompareOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LigatureIndex", 
      new JSIL.MethodSignature($.Byte, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "LikeObject", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Object, 
          $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LikeString", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.CompareMethod")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MatchAsterisk", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), 
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $asm07.TypeRef("System.Globalization.CompareInfo"), $asm07.TypeRef("System.Globalization.CompareOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MatchAsterisk", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), 
          $.String, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+PatternGroup")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $asm07.TypeRef("System.Globalization.CompareInfo"), $asm07.TypeRef("System.Globalization.CompareOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MatchRange", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), 
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $asm07.TypeRef("System.Globalization.CompareInfo"), 
          $asm07.TypeRef("System.Globalization.CompareOptions"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+Range")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MatchRangeAfterAsterisk", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), 
          $.String, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+PatternGroup"), $asm07.TypeRef("System.Globalization.CompareInfo"), 
          $asm07.TypeRef("System.Globalization.CompareOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SkipToEndOfExpandedChar", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubtractChars", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), $asm07.TypeRef("System.Globalization.CompareOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubtractOneCharInTextCompareMode", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), 
          $asm07.TypeRef("System.Globalization.CompareOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateRangePattern", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo")]), 
          $asm07.TypeRef("System.Globalization.CompareInfo"), $asm07.TypeRef("System.Globalization.CompareOptions"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+Range")])])
        ])
    );

    $.Field({Static:true , Public:false}, "LigatureExpansions", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "LigatureMap", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm07.System.Byte, 142);
      });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* enum Microsoft.VisualBasic.CompilerServices.LikeOperator+Ligatures */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.LikeOperator+Ligatures", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Invalid: 0, 
    aeUpper: 198, 
    Min: 198, 
    thUpper: 222, 
    szBeta: 223, 
    ssBeta: 223, 
    ae: 230, 
    th: 254, 
    oeUpper: 338, 
    Max: 339, 
    oe: 339, 
  }
);

/* enum Microsoft.VisualBasic.CompilerServices.LikeOperator+CharKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.LikeOperator+CharKind", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    ExpandedChar1: 1, 
    ExpandedChar2: 2, 
  }
);

/* struct Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo */ 

(function LigatureInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.CompilerServices.LikeOperator+LigatureInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Kind", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+CharKind"));

    $.Field({Static:false, Public:false}, "CharBeforeExpansion", $.Char);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.VisualBasic.CompilerServices.LikeOperator+PatternType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.LikeOperator+PatternType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    STRING: 0, 
    EXCLIST: 1, 
    INCLIST: 2, 
    DIGIT: 3, 
    ANYCHAR: 4, 
    STAR: 5, 
    NONE: 6, 
  }
);

/* struct Microsoft.VisualBasic.CompilerServices.LikeOperator+PatternGroup */ 

(function PatternGroup$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.CompilerServices.LikeOperator+PatternGroup", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "PatType", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+PatternType"));

    $.Field({Static:false, Public:false}, "MaxSourceIndex", $.Int32);

    $.Field({Static:false, Public:false}, "CharCount", $.Int32);

    $.Field({Static:false, Public:false}, "StringPatternStart", $.Int32);

    $.Field({Static:false, Public:false}, "StringPatternEnd", $.Int32);

    $.Field({Static:false, Public:false}, "MinSourceIndex", $.Int32);

    $.Field({Static:false, Public:false}, "RangeList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.LikeOperator+Range")]));

    $.Field({Static:false, Public:true }, "StartIndexOfPossibleMatch", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.VisualBasic.CompilerServices.LikeOperator+Range */ 

(function Range$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.CompilerServices.LikeOperator+Range", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Start", $.Int32);

    $.Field({Static:false, Public:false}, "StartLength", $.Int32);

    $.Field({Static:false, Public:false}, "End", $.Int32);

    $.Field({Static:false, Public:false}, "EndLength", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.OverloadResolution */ 

(function OverloadResolution$Members () {
  var $, $thisType;
















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.OverloadResolution", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CanConvert", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.Boolean, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), 
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CandidateIsNarrowing", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CandidateIsNotCallable", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CandidateIsUnspecific", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanMatchArguments", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $.Boolean, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanPassToParamArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $.Object, 
          $asm07.TypeRef("System.Reflection.ParameterInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanPassToParameter", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $.Object, 
          $asm07.TypeRef("System.Reflection.ParameterInfo"), $.Boolean, 
          $.Boolean, $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectOverloadCandidates", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $.Boolean, 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Container")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareGenericityBasedOnMethodGenericParams", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.ParameterInfo"), $asm07.TypeRef("System.Reflection.ParameterInfo"), 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $.Boolean, 
          $asm07.TypeRef("System.Reflection.ParameterInfo"), $asm07.TypeRef("System.Reflection.ParameterInfo"), 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareGenericityBasedOnTypeGenericParams", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.ParameterInfo"), $asm07.TypeRef("System.Reflection.ParameterInfo"), 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $.Boolean, 
          $asm07.TypeRef("System.Reflection.ParameterInfo"), $asm07.TypeRef("System.Reflection.ParameterInfo"), 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareNumericTypeSpecificity", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareParameterSpecificity", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Reflection.ParameterInfo"), 
          $asm07.TypeRef("System.Reflection.MethodBase"), $.Boolean, 
          $asm07.TypeRef("System.Reflection.ParameterInfo"), $asm07.TypeRef("System.Reflection.MethodBase"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMatchTable", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Boolean]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "DetectArgumentErrors", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DetectArgumentNarrowing", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DetectUnspecificity", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindParameterByName", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArgumentType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArgumentTypeInContextOfParameterType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Object, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InferTypeArguments", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InferTypeArgumentsFromArgument", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $asm07.TypeRef("System.Reflection.MethodBase"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InferTypeArgumentsFromArgument", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $.Object, 
          $asm07.TypeRef("System.Reflection.ParameterInfo"), $.Boolean, 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InferTypeArgumentsFromArgumentDirectly", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $asm07.TypeRef("System.Reflection.MethodBase"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InsertIfMethodAvailable", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), 
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $.Boolean, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Container")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstantiateGenericMethod", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsExactSignatureMatch", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LeastGenericProcedure", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OverloadResolution+ComparisonType"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LeastGenericProcedure", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MatchArguments", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoreSpecificProcedure", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OverloadResolution+ComparisonType"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MostSpecificProcedure", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PassToParameter", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.ParameterInfo"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RejectUncallableProcedure", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RejectUncallableProcedures", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveRedundantGenericProcedures", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReorderArgumentArray", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $asm07.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReportError", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), $.String, 
          $.String, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReportError", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), $.String, 
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReportError", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReportError", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$.String]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReportNarrowingProcedures", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OverloadResolution+ResolutionFailure")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReportOverloadResolutionFailure", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OverloadResolution+ResolutionFailure"), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OverloadResolution+ArgumentDetector"), 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OverloadResolution+CandidateProperty")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReportUncallableProcedures", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OverloadResolution+ResolutionFailure")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReportUnspecificProcedures", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OverloadResolution+ResolutionFailure")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveOverloadedCall", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), [
          $.String, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OverloadResolution+ResolutionFailure")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveOverloadedCall", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), [
          $.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OverloadResolution+ResolutionFailure")]), 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Container")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.VisualBasic.CompilerServices.OverloadResolution+ResolutionFailure */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.OverloadResolution+ResolutionFailure", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    MissingMember: 1, 
    InvalidArgument: 2, 
    AmbiguousMatch: 3, 
    InvalidTarget: 4, 
  }
);

/* enum Microsoft.VisualBasic.CompilerServices.OverloadResolution+ComparisonType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.OverloadResolution+ComparisonType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ParameterSpecificty: 0, 
    GenericSpecificityBasedOnMethodGenericParams: 1, 
    GenericSpecificityBasedOnTypeGenericParams: 2, 
  }
);

/* delegate Microsoft.VisualBasic.CompilerServices.OverloadResolution+ArgumentDetector */ 

JSIL.MakeDelegate("Microsoft.VisualBasic.CompilerServices.OverloadResolution+ArgumentDetector", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [
      $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Object")]), 
      $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.String")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
      $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.String")])
    ]));

/* delegate Microsoft.VisualBasic.CompilerServices.OverloadResolution+CandidateProperty */ 

JSIL.MakeDelegate("Microsoft.VisualBasic.CompilerServices.OverloadResolution+CandidateProperty", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method")]));

/* interface Microsoft.VisualBasic.CompilerServices.IRecordEnum */ 

JSIL.MakeInterface(
  "Microsoft.VisualBasic.CompilerServices.IRecordEnum", false, [], function ($) {
    $.Method({}, "Callback", new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.FieldInfo"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])]));
  }, []);

/* class Microsoft.VisualBasic.CompilerServices.StructUtils */ 

(function StructUtils$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.StructUtils", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumerateUDT", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.ValueType"), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.IRecordEnum"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRecordLength", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.StructUtils+FieldSorter */ 

(function FieldSorter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.StructUtils+FieldSorter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IComparer"), "Compare");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.StructUtils+StructByteLengthHandler */ 

(function StructByteLengthHandler$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.StructUtils+StructByteLengthHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Callback", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.FieldInfo"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    )
      .Overrides($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.IRecordEnum"), "Callback");

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFieldSize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.FieldInfo"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAlignment", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_StructLength", $.Int32);

    $.Field({Static:false, Public:false}, "m_PackSize", $.Int32);

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.IRecordEnum")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.Symbols */ 

(function Symbols$Members () {
  var $, $thisType;





















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.Symbols", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AreGenericMethodDefsEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodBase"), $asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreParametersAndReturnTypesValid", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAllParameterCounts", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClassConstraint", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetElementType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInterfaceConstraints", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeArguments", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeCode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TypeCode"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeParameters", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeParameters", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasFlag", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.BindingFlags"), $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Implements", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexIn", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsArrayType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBinaryOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCharArrayRankOne", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsClass", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsClassOrInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsClassOrValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollectionInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEnum", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEquivalentType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsGeneric", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsGeneric", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsGeneric", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsGenericParameter", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInstantiatedGeneric", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIntegralType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIntrinsicType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIntrinsicType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNarrowingConversionOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNonPublicRuntimeMember", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNumericType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNumericType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOrInheritsFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsParamArray", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRawGeneric", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsReferenceType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRootEnumType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRootObjectType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsShadows", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsShared", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsStringType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnaryOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUserDefinedOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MapToUserDefinedOperator", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator"), [$asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MapTypeCodeToType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.TypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RefersToGenericParameter", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:true , Public:false}, "RefersToGenericParameterCLRSemantics", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "NoArguments", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm07.System.Object, 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "NoArgumentNames", $jsilcore.TypeRef("System.Array", [$.String]), function ($pi) {
        return JSIL.Array.New($asm07.System.String, 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "NoTypeArguments", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), function ($pi) {
        return JSIL.Array.New($asm07.System.Type, 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "NoTypeParameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), function ($pi) {
        return JSIL.Array.New($asm07.System.Type, 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "OperatorCLSNames", $jsilcore.TypeRef("System.Array", [$.String]), function ($pi) {
        return JSIL.Array.New($asm07.System.String, 28);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "OperatorNames", $jsilcore.TypeRef("System.Array", [$.String]), function ($pi) {
        return JSIL.Array.New($asm07.System.String, 28);
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.Symbols+UserDefinedOperator", 
    BaseType: $asm07.TypeRef("System.SByte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    UNDEF: 0, 
    Narrow: 1, 
    Widen: 2, 
    IsTrue: 3, 
    IsFalse: 4, 
    Negate: 5, 
    Not: 6, 
    UnaryPlus: 7, 
    Plus: 8, 
    Minus: 9, 
    Multiply: 10, 
    Divide: 11, 
    Power: 12, 
    IntegralDivide: 13, 
    Concatenate: 14, 
    ShiftLeft: 15, 
    ShiftRight: 16, 
    Modulus: 17, 
    Or: 18, 
    Xor: 19, 
    And: 20, 
    Like: 21, 
    Equal: 22, 
    NotEqual: 23, 
    Less: 24, 
    LessEqual: 25, 
    GreaterEqual: 26, 
    Greater: 27, 
    MAX: 28, 
  }
);

/* class Microsoft.VisualBasic.CompilerServices.Symbols+Container */ 

(function Container$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.Symbols+Container", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForClassExtendingCOMClass", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "FilterInvalidMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsArray", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCOMObject", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValueType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWindowsRuntimeObject", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VBFriendlyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArrayValue", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFieldValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetIsInvokableDelegate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Reflection.MethodBase"), $.Boolean]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeMethod", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $asm07.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMethodDynamicallyInvokable", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDefaultMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamedMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupWinRTCollectionDefaultMembers", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupWinRTCollectionInterfaceMembers", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetArrayValue", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFieldValue", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Reflection.FieldInfo"), $.Object])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_Instance", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_Type", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_IReflect", $asm07.TypeRef("System.Reflection.IReflect"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_UseCustomReflection", $.Boolean);

    $.Field({Static:true , Public:false}, "s_IsInvokableDelegate", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Reflection.MethodBase"), $.Boolean]));

    $.Constant({Static:true , Public:false}, "DefaultLookupFlags", $asm07.TypeRef("System.Reflection.BindingFlags"), 93);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NoMembers", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), function ($pi) {
        return JSIL.Array.New($asm07.System.Reflection.MemberInfo, 0);
      });

    $.Property({Static:false, Public:false}, "IsCOMObject", $.Boolean);

    $.Property({Static:false, Public:false}, "IsWindowsRuntimeObject", $.Boolean);

    $.Property({Static:false, Public:false}, "VBFriendlyName", $.String);

    $.Property({Static:false, Public:false}, "IsArray", $.Boolean);

    $.Property({Static:false, Public:false}, "IsValueType", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.Symbols+Container+InheritanceSorter */ 

(function InheritanceSorter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.Symbols+Container+InheritanceSorter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IComparer"), "Compare");

    $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.Symbols+Method */ 

(function Method$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.Symbols+Method", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.MethodBase"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.PropertyInfo"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AsMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.MethodBase"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AsProperty", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.PropertyInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BindGenericArguments", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasByRefParameter", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasParamArray", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsGeneric", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsMethod", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsProperty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RawDeclaringType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RawParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RawParametersFromType", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeParameters", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_Item", $asm07.TypeRef("System.Reflection.MemberInfo"));

    $.Field({Static:false, Public:false}, "m_RawItem", $asm07.TypeRef("System.Reflection.MethodBase"));

    $.Field({Static:false, Public:false}, "m_Parameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Field({Static:false, Public:false}, "m_RawParameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Field({Static:false, Public:false}, "m_RawParametersFromType", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Field({Static:false, Public:false}, "m_RawDeclaringType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "ParamArrayIndex", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ParamArrayExpanded", $.Boolean);

    $.Field({Static:false, Public:false}, "NotCallable", $.Boolean);

    $.Field({Static:false, Public:false}, "RequiresNarrowingConversion", $.Boolean);

    $.Field({Static:false, Public:false}, "AllNarrowingIsFromObject", $.Boolean);

    $.Field({Static:false, Public:false}, "LessSpecific", $.Boolean);

    $.Field({Static:false, Public:false}, "ArgumentsValidated", $.Boolean);

    $.Field({Static:false, Public:false}, "NamedArgumentMapping", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "TypeArguments", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Field({Static:false, Public:false}, "UsedDefaultForAnOptionalParameter", $.Boolean);

    $.Field({Static:false, Public:false}, "ArgumentMatchingDone", $.Boolean);

    $.Property({Static:false, Public:false}, "Parameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Property({Static:false, Public:false}, "RawParameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Property({Static:false, Public:false}, "RawParametersFromType", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]));

    $.Property({Static:false, Public:false}, "DeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "RawDeclaringType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "HasParamArray", $.Boolean);

    $.Property({Static:false, Public:false}, "HasByRefParameter", $.Boolean);

    $.Property({Static:false, Public:false}, "IsProperty", $.Boolean);

    $.Property({Static:false, Public:false}, "IsMethod", $.Boolean);

    $.Property({Static:false, Public:false}, "IsGeneric", $.Boolean);

    $.Property({Static:false, Public:false}, "TypeParameters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.Symbols+TypedNothing */ 

(function TypedNothing$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.Symbols+TypedNothing", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBBinder */ 

(function VBBinder$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Reflection.Binder"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:false}, "BindingScore", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VBBinder+BindScore"), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $.Boolean, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindToField", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.FieldInfo"), [
          $asm07.TypeRef("System.Reflection.BindingFlags"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.FieldInfo")]), 
          $.Object, $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindToMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodBase"), [
          $asm07.TypeRef("System.Reflection.BindingFlags"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodBase")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Object])]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")]), 
          $asm07.TypeRef("System.Globalization.CultureInfo"), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheMember", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CalledMethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateParamOrder", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultMemberName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMethodsByName", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodBase")]), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Reflection.IReflect"), 
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMostSpecific", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.Reflection.MethodBase"), $asm07.TypeRef("System.Reflection.MethodBase"), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Boolean, $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropArgCount", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeMember", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Reflection.BindingFlags"), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Reflection.IReflect"), 
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsMemberPublic", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchesParamArraySignature", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), 
          $.Int32, $.Boolean, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MethodsDifferOnlyByReturnType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MethodBase"), $asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReorderArgumentArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Object])]), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReorderParams", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VBBinder+VBBinderState")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SecurityCheckForLateboundCalls", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Reflection.MemberInfo"), $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Reflection.IReflect")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodBase"), [
          $asm07.TypeRef("System.Reflection.BindingFlags"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MethodBase")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [
          $asm07.TypeRef("System.Reflection.BindingFlags"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.PropertyInfo")]), 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterModifier")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidCast", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $.Int32
        ])
    );

    $.Constant({Static:true , Public:false}, "PARAMARRAY_NONE", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "ARG_MISSING", $.Int32, -1);

    $.Field({Static:false, Public:false}, "m_BindToName", $.String);

    $.Field({Static:false, Public:false}, "m_objType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "m_state", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VBBinder+VBBinderState"));

    $.Field({Static:false, Public:false}, "m_CachedMember", $asm07.TypeRef("System.Reflection.MemberInfo"));

    $.Field({Static:false, Public:false}, "m_ByRefFlags", $jsilcore.TypeRef("System.Array", [$.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBBinder+VBBinderState */ 

(function VBBinderState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBBinder+VBBinderState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "m_OriginalArgs", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "m_ByRefFlags", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "m_OriginalByRefFlags", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:false}, "m_OriginalParamOrder", $jsilcore.TypeRef("System.Array", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* enum Microsoft.VisualBasic.CompilerServices.VBBinder+BindScore */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.VBBinder+BindScore", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Exact: 0, 
    Widening0: 1, 
    Widening1: 2, 
    Narrowing: 3, 
    Unknown: 4, 
  }
);

/* enum Microsoft.VisualBasic.CompilerServices.vbErrors */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.vbErrors", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    AccessViolation: -2147467261, 
    None: 0, 
    ReturnWOGoSub: 3, 
    IllegalFuncCall: 5, 
    Overflow: 6, 
    OutOfMemory: 7, 
    OutOfBounds: 9, 
    ArrayLocked: 10, 
    DivByZero: 11, 
    TypeMismatch: 13, 
    OutOfStrSpace: 14, 
    ExprTooComplex: 16, 
    CantContinue: 17, 
    UserInterrupt: 18, 
    ResumeWOErr: 20, 
    OutOfStack: 28, 
    UNDONE: 29, 
    UndefinedProc: 35, 
    TooManyClients: 47, 
    DLLLoadErr: 48, 
    DLLBadCallingConv: 49, 
    InternalError: 51, 
    BadFileNameOrNumber: 52, 
    FileNotFound: 53, 
    BadFileMode: 54, 
    FileAlreadyOpen: 55, 
    IOError: 57, 
    FileAlreadyExists: 58, 
    BadRecordLen: 59, 
    DiskFull: 61, 
    EndOfFile: 62, 
    BadRecordNum: 63, 
    TooManyFiles: 67, 
    DevUnavailable: 68, 
    PermissionDenied: 70, 
    DiskNotReady: 71, 
    DifferentDrive: 74, 
    PathFileAccess: 75, 
    PathNotFound: 76, 
    ObjNotSet: 91, 
    IllegalFor: 92, 
    BadPatStr: 93, 
    CantUseNull: 94, 
    UserDefined: 95, 
    AdviseLimit: 96, 
    BadCallToFriendFunction: 97, 
    CantPassPrivateObject: 98, 
    DLLCallException: 99, 
    DoesntImplementICollection: 100, 
    Abort: 287, 
    InvalidFileFormat: 321, 
    CantCreateTmpFile: 322, 
    InvalidResourceFormat: 325, 
    InvalidPropertyValue: 380, 
    InvalidPropertyArrayIndex: 381, 
    SetNotSupportedAtRuntime: 382, 
    SetNotSupported: 383, 
    NeedPropertyArrayIndex: 385, 
    SetNotPermitted: 387, 
    GetNotSupportedAtRuntime: 393, 
    GetNotSupported: 394, 
    PropertyNotFound: 422, 
    NoSuchControlOrProperty: 423, 
    NotObject: 424, 
    CantCreateObject: 429, 
    OLENotSupported: 430, 
    OLEFileNotFound: 432, 
    OLENoPropOrMethod: 438, 
    OLEAutomationError: 440, 
    LostTLB: 442, 
    OLENoDefault: 443, 
    ActionNotSupported: 445, 
    NamedArgsNotSupported: 446, 
    LocaleSettingNotSupported: 447, 
    NamedParamNotFound: 448, 
    ParameterNotOptional: 449, 
    FuncArityMismatch: 450, 
    NotEnum: 451, 
    InvalidOrdinal: 452, 
    InvalidDllFunctionName: 453, 
    CodeResourceNotFound: 454, 
    CodeResourceLockError: 455, 
    DuplicateKey: 457, 
    InvalidTypeLibVariable: 458, 
    ObjDoesNotSupportEvents: 459, 
    InvalidClipboardFormat: 460, 
    IdentNotMember: 461, 
    ServerNotFound: 462, 
    ObjNotRegistered: 463, 
    InvalidPicture: 481, 
    PrinterError: 482, 
    CantSaveFileToTemp: 735, 
    SearchTextNotFound: 744, 
    ReplacementsTooLong: 746, 
    LastTrappable: 746, 
    NotYetImplemented: 32768, 
    SeekErr: 32771, 
    ReadFault: 32772, 
    WriteFault: 32773, 
    BadFunctionId: 32774, 
    FileLockViolation: 32775, 
    ShareRequired: 32789, 
    BufferTooSmall: 32790, 
    InvDataRead: 32792, 
    UnsupFormat: 32793, 
    RegistryAccess: 32796, 
    LibNotRegistered: 32797, 
    Usage: 32799, 
    UndefinedType: 32807, 
    QualifiedNameDisallowed: 32808, 
    InvalidState: 32809, 
    WrongTypeKind: 32810, 
    ElementNotFound: 32811, 
    AmbiguousName: 32812, 
    ModNameConflict: 32813, 
    UnknownLcid: 32814, 
    BadModuleKind: 35005, 
    NoContainingLib: 35009, 
    BadTypeId: 35010, 
    BadLibId: 35011, 
    Eof: 35012, 
    SizeTooBig: 35013, 
    ExpectedFuncNotModule: 35015, 
    ExpectedFuncNotRecord: 35016, 
    ExpectedFuncNotProject: 35017, 
    ExpectedFuncNotVar: 35018, 
    ExpectedTypeNotProj: 35019, 
    UnsuitableFuncPropMatch: 35020, 
    BrokenLibRef: 35021, 
    UnsupportedTypeLibFeature: 35022, 
    ModuleAsType: 35024, 
    InvalidTypeInfoKind: 35025, 
    InvalidTypeLibFunction: 35026, 
    OperationNotAllowedInDll: 40035, 
    CompileError: 40036, 
    CantEvalWatch: 40037, 
    MissingVbaTypeLib: 40038, 
    UserReset: 40040, 
    MissingEndBrack: 40041, 
    IncorrectTypeChar: 40042, 
    InvalidNumLit: 40043, 
    IllegalChar: 40044, 
    IdTooLong: 40045, 
    StatementTooComplex: 40046, 
    ExpectedTokens: 40047, 
    InconsistentPropFuncs: 40067, 
    CircularType: 40068, 
    FileNotFoundWithName: 40243, 
    CantFindDllEntryPoint: 59201, 
  }
);

/* class Microsoft.VisualBasic.CompilerServices.ExceptionUtils */ 

(function ExceptionUtils$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.ExceptionUtils", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.Int32, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArgumentExceptionWithArgName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentException"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(2, "PlaceHolders", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetArgumentNullException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentNullException"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArgumentNullException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.ArgumentNullException"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(2, "PlaceHolders", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetDirectoryNotFoundException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.DirectoryNotFoundException"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(1, "PlaceHolders", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetFileNotFoundException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.FileNotFoundException"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(2, "PlaceHolders", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetInvalidOperationException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.InvalidOperationException"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(1, "PlaceHolders", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetIOException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.IOException"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(1, "PlaceHolders", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetWin32Exception", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.ComponentModel.Win32Exception"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Parameter(1, "PlaceHolders", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "MakeException1", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VbMakeException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "VbMakeException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "VbMakeExceptionEx", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32, $.String])
    );

    $.Constant({Static:true , Public:false}, "E_NOTIMPL", $.Int32, -2147467263);

    $.Constant({Static:true , Public:false}, "E_NOINTERFACE", $.Int32, -2147467262);

    $.Constant({Static:true , Public:false}, "E_POINTER", $.Int32, -2147467261);

    $.Constant({Static:true , Public:false}, "E_ABORT", $.Int32, -2147467260);

    $.Constant({Static:true , Public:false}, "DISP_E_UNKNOWNINTERFACE", $.Int32, -2147352575);

    $.Constant({Static:true , Public:false}, "DISP_E_MEMBERNOTFOUND", $.Int32, -2147352573);

    $.Constant({Static:true , Public:false}, "DISP_E_PARAMNOTFOUND", $.Int32, -2147352572);

    $.Constant({Static:true , Public:false}, "DISP_E_TYPEMISMATCH", $.Int32, -2147352571);

    $.Constant({Static:true , Public:false}, "DISP_E_UNKNOWNNAME", $.Int32, -2147352570);

    $.Constant({Static:true , Public:false}, "DISP_E_NONAMEDARGS", $.Int32, -2147352569);

    $.Constant({Static:true , Public:false}, "DISP_E_BADVARTYPE", $.Int32, -2147352568);

    $.Constant({Static:true , Public:false}, "DISP_E_OVERFLOW", $.Int32, -2147352566);

    $.Constant({Static:true , Public:false}, "DISP_E_BADINDEX", $.Int32, -2147352565);

    $.Constant({Static:true , Public:false}, "DISP_E_UNKNOWNLCID", $.Int32, -2147352564);

    $.Constant({Static:true , Public:false}, "DISP_E_ARRAYISLOCKED", $.Int32, -2147352563);

    $.Constant({Static:true , Public:false}, "DISP_E_BADPARAMCOUNT", $.Int32, -2147352562);

    $.Constant({Static:true , Public:false}, "DISP_E_PARAMNOTOPTIONAL", $.Int32, -2147352561);

    $.Constant({Static:true , Public:false}, "DISP_E_NOTACOLLECTION", $.Int32, -2147352559);

    $.Constant({Static:true , Public:false}, "DISP_E_DIVBYZERO", $.Int32, -2147352558);

    $.Constant({Static:true , Public:false}, "TYPE_E_BUFFERTOOSMALL", $.Int32, -2147319786);

    $.Constant({Static:true , Public:false}, "TYPE_E_INVDATAREAD", $.Int32, -2147319784);

    $.Constant({Static:true , Public:false}, "TYPE_E_UNSUPFORMAT", $.Int32, -2147319783);

    $.Constant({Static:true , Public:false}, "TYPE_E_REGISTRYACCESS", $.Int32, -2147319780);

    $.Constant({Static:true , Public:false}, "TYPE_E_LIBNOTREGISTERED", $.Int32, -2147319779);

    $.Constant({Static:true , Public:false}, "TYPE_E_UNDEFINEDTYPE", $.Int32, -2147319769);

    $.Constant({Static:true , Public:false}, "TYPE_E_QUALIFIEDNAMEDISALLOWED", $.Int32, -2147319768);

    $.Constant({Static:true , Public:false}, "TYPE_E_INVALIDSTATE", $.Int32, -2147319767);

    $.Constant({Static:true , Public:false}, "TYPE_E_WRONGTYPEKIND", $.Int32, -2147319766);

    $.Constant({Static:true , Public:false}, "TYPE_E_ELEMENTNOTFOUND", $.Int32, -2147319765);

    $.Constant({Static:true , Public:false}, "TYPE_E_AMBIGUOUSNAME", $.Int32, -2147319764);

    $.Constant({Static:true , Public:false}, "TYPE_E_NAMECONFLICT", $.Int32, -2147319763);

    $.Constant({Static:true , Public:false}, "TYPE_E_UNKNOWNLCID", $.Int32, -2147319762);

    $.Constant({Static:true , Public:false}, "TYPE_E_DLLFUNCTIONNOTFOUND", $.Int32, -2147319761);

    $.Constant({Static:true , Public:false}, "TYPE_E_BADMODULEKIND", $.Int32, -2147317571);

    $.Constant({Static:true , Public:false}, "TYPE_E_SIZETOOBIG", $.Int32, -2147317563);

    $.Constant({Static:true , Public:false}, "TYPE_E_TYPEMISMATCH", $.Int32, -2147316576);

    $.Constant({Static:true , Public:false}, "TYPE_E_OUTOFBOUNDS", $.Int32, -2147316575);

    $.Constant({Static:true , Public:false}, "TYPE_E_IOERROR", $.Int32, -2147316574);

    $.Constant({Static:true , Public:false}, "TYPE_E_CANTCREATETMPFILE", $.Int32, -2147316573);

    $.Constant({Static:true , Public:false}, "TYPE_E_CANTLOADLIBRARY", $.Int32, -2147312566);

    $.Constant({Static:true , Public:false}, "TYPE_E_INCONSISTENTPROPFUNCS", $.Int32, -2147312509);

    $.Constant({Static:true , Public:false}, "TYPE_E_CIRCULARTYPE", $.Int32, -2147312508);

    $.Constant({Static:true , Public:false}, "STG_E_INVALIDFUNCTION", $.Int32, -2147287039);

    $.Constant({Static:true , Public:false}, "STG_E_FILENOTFOUND", $.Int32, -2147287038);

    $.Constant({Static:true , Public:false}, "STG_E_PATHNOTFOUND", $.Int32, -2147287037);

    $.Constant({Static:true , Public:false}, "STG_E_TOOMANYOPENFILES", $.Int32, -2147287036);

    $.Constant({Static:true , Public:false}, "STG_E_ACCESSDENIED", $.Int32, -2147287035);

    $.Constant({Static:true , Public:false}, "STG_E_INVALIDHANDLE", $.Int32, -2147287034);

    $.Constant({Static:true , Public:false}, "STG_E_INSUFFICIENTMEMORY", $.Int32, -2147287032);

    $.Constant({Static:true , Public:false}, "STG_E_NOMOREFILES", $.Int32, -2147287022);

    $.Constant({Static:true , Public:false}, "STG_E_DISKISWRITEPROTECTED", $.Int32, -2147287021);

    $.Constant({Static:true , Public:false}, "STG_E_SEEKERROR", $.Int32, -2147287015);

    $.Constant({Static:true , Public:false}, "STG_E_WRITEFAULT", $.Int32, -2147287011);

    $.Constant({Static:true , Public:false}, "STG_E_READFAULT", $.Int32, -2147287010);

    $.Constant({Static:true , Public:false}, "STG_E_SHAREVIOLATION", $.Int32, -2147287008);

    $.Constant({Static:true , Public:false}, "STG_E_LOCKVIOLATION", $.Int32, -2147287007);

    $.Constant({Static:true , Public:false}, "STG_E_FILEALREADYEXISTS", $.Int32, -2147286960);

    $.Constant({Static:true , Public:false}, "STG_E_MEDIUMFULL", $.Int32, -2147286928);

    $.Constant({Static:true , Public:false}, "STG_E_INVALIDHEADER", $.Int32, -2147286789);

    $.Constant({Static:true , Public:false}, "STG_E_INVALIDNAME", $.Int32, -2147286788);

    $.Constant({Static:true , Public:false}, "STG_E_UNKNOWN", $.Int32, -2147286787);

    $.Constant({Static:true , Public:false}, "STG_E_UNIMPLEMENTEDFUNCTION", $.Int32, -2147286786);

    $.Constant({Static:true , Public:false}, "STG_E_INUSE", $.Int32, -2147286784);

    $.Constant({Static:true , Public:false}, "STG_E_NOTCURRENT", $.Int32, -2147286783);

    $.Constant({Static:true , Public:false}, "STG_E_REVERTED", $.Int32, -2147286782);

    $.Constant({Static:true , Public:false}, "STG_E_CANTSAVE", $.Int32, -2147286781);

    $.Constant({Static:true , Public:false}, "STG_E_OLDFORMAT", $.Int32, -2147286780);

    $.Constant({Static:true , Public:false}, "STG_E_OLDDLL", $.Int32, -2147286779);

    $.Constant({Static:true , Public:false}, "STG_E_SHAREREQUIRED", $.Int32, -2147286778);

    $.Constant({Static:true , Public:false}, "STG_E_NOTFILEBASEDSTORAGE", $.Int32, -2147286777);

    $.Constant({Static:true , Public:false}, "STG_E_EXTANTMARSHALLINGS", $.Int32, -2147286776);

    $.Constant({Static:true , Public:false}, "CLASS_E_NOTLICENSED", $.Int32, -2147221230);

    $.Constant({Static:true , Public:false}, "REGDB_E_CLASSNOTREG", $.Int32, -2147221164);

    $.Constant({Static:true , Public:false}, "MK_E_UNAVAILABLE", $.Int32, -2147221021);

    $.Constant({Static:true , Public:false}, "MK_E_INVALIDEXTENSION", $.Int32, -2147221018);

    $.Constant({Static:true , Public:false}, "MK_E_CANTOPENFILE", $.Int32, -2147221014);

    $.Constant({Static:true , Public:false}, "CO_E_CLASSSTRING", $.Int32, -2147221005);

    $.Constant({Static:true , Public:false}, "CO_E_APPNOTFOUND", $.Int32, -2147221003);

    $.Constant({Static:true , Public:false}, "CO_E_APPDIDNTREG", $.Int32, -2147220994);

    $.Constant({Static:true , Public:false}, "E_ACCESSDENIED", $.Int32, -2147024891);

    $.Constant({Static:true , Public:false}, "E_OUTOFMEMORY", $.Int32, -2147024882);

    $.Constant({Static:true , Public:false}, "E_INVALIDARG", $.Int32, -2147024809);

    $.Constant({Static:true , Public:false}, "CO_E_SERVER_EXEC_FAILURE", $.Int32, -2146959355);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.InternalErrorException */ 

(function InternalErrorException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.VisualBasic.CompilerServices.InternalErrorException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.Utils */ 

(function Utils$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.Utils", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AdjustArraySuffix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CopyArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Array"), [$asm07.TypeRef("System.Array"), $asm07.TypeRef("System.Array")])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FieldToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VBAResourceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VBRuntimeAssembly", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArraySuffixAndElementType", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCultureInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDateTimeFormatInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.DateTimeFormatInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileIOEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGenericArgsSuffix", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInvariantCultureInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLocaleCodePage", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetResourceString", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.vbErrors")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetResourceString", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:false}, "GetResourceString", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetResourceString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(1, "Args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "IsHexOrOctValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsHexOrOctValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MapHRESULT", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "MethodToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.MethodBase")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OctFromLong", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "OctFromULong", 
      new JSIL.MethodSignature($.String, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.ParameterInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.PropertyInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetCultureInfo", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetDate", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetTime", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "StdFormat", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowException", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "ToHalfwidthNumbers", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VBFriendlyName", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "VBFriendlyName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VBFriendlyName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "VBFriendlyNameOfType", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type"), $.Boolean])
    );

    $.Constant({Static:true , Public:false}, "SEVERITY_ERROR", $.Int32, -2147483648);

    $.Constant({Static:true , Public:false}, "FACILITY_CONTROL", $.Int32, 655360);

    $.Constant({Static:true , Public:false}, "FACILITY_RPC", $.Int32, 65536);

    $.Constant({Static:true , Public:false}, "FACILITY_ITF", $.Int32, 262144);

    $.Constant({Static:true , Public:false}, "SCODE_FACILITY", $.Int32, 536805376);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_PARAMETER", $.Int32, 87);

    $.Constant({Static:true , Public:false}, "chPeriod", $.Char, ".");

    $.Constant({Static:true , Public:false}, "chSpace", $.Char, " ");

    $.Constant({Static:true , Public:false}, "chIntlSpace", $.Char, "\u3000");

    $.Constant({Static:true , Public:false}, "chZero", $.Char, "0");

    $.Constant({Static:true , Public:false}, "chHyphen", $.Char, "-");

    $.Constant({Static:true , Public:false}, "chPlus", $.Char, "+");

    $.Constant({Static:true , Public:false}, "chLetterA", $.Char, "A");

    $.Constant({Static:true , Public:false}, "chLetterZ", $.Char, "Z");

    $.Constant({Static:true , Public:false}, "chColon", $.Char, ":");

    $.Constant({Static:true , Public:false}, "chSlash", $.Char, "/");

    $.Constant({Static:true , Public:false}, "chBackslash", $.Char, "\\");

    $.Constant({Static:true , Public:false}, "chTab", $.Char, "\t");

    $.Constant({Static:true , Public:false}, "chCharH0A", $.Char, "\n");

    $.Constant({Static:true , Public:false}, "chCharH0B", $.Char, "\x0b");

    $.Constant({Static:true , Public:false}, "chCharH0C", $.Char, "\x0c");

    $.Constant({Static:true , Public:false}, "chCharH0D", $.Char, "\r");

    $.Constant({Static:true , Public:false}, "chLineFeed", $.Char, "\n");

    $.Constant({Static:true , Public:false}, "chDblQuote", $.Char, "\"");

    $.Constant({Static:true , Public:false}, "chGenericManglingChar", $.Char, "`");

    $.Constant({Static:true , Public:false}, "OptionCompareTextFlags", $asm07.TypeRef("System.Globalization.CompareOptions"), 25);

    $.Field({Static:true , Public:false}, "m_VBAResourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "m_TriedLoadingResourceManager", $.Boolean);

    $.Constant({Static:true , Public:false}, "ResourceMsgDefault", $.String, "Message text unavailable.  Resource file 'Microsoft.VisualBasic resources' not found.");

    $.Constant({Static:true , Public:false}, "VBDefaultErrorID", $.String, "ID95");

    $.Field({Static:true , Public:false}, "m_achIntlSpace", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "VoidType", $asm07.TypeRef("System.Type"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ResourceManagerSyncObj", $.Object);

    $.Field({Static:true , Public:false}, "m_VBRuntimeAssembly", $asm07.TypeRef("System.Reflection.Assembly"));

    $.Property({Static:true , Public:false}, "VBAResourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "VBRuntimeAssembly", $asm07.TypeRef("System.Reflection.Assembly"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* enum Microsoft.VisualBasic.CompilerServices.Utils+PropertyKind */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.Utils+PropertyKind", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ReadWrite: 0, 
    ReadOnly: 1, 
    WriteOnly: 2, 
  }
);

/* class Microsoft.VisualBasic.CompilerServices.SafeMemoryMappedViewOfFileHandle */ 

(function SafeMemoryMappedViewOfFileHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.VisualBasic.CompilerServices.SafeMemoryMappedViewOfFileHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.IOUtils */ 

(function IOUtils$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.IOUtils", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "FindFileFilter", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.AssemblyData")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindFirstFile", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Reflection.Assembly"), $.String, 
          $asm07.TypeRef("System.IO.FileAttributes")
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FindNextFile", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Reflection.Assembly")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.LateBinding */ 

(function LateBinding$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.LateBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckForClassExtendingCOMClass", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DoesTargetObjectMatch", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FastCall", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Reflection.MethodBase"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Reflection.IReflect")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCorrectIReflect", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.IReflect"), [$.Object, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Reflection.IReflect"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMembersByName", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [
          $asm07.TypeRef("System.Reflection.IReflect"), $.String, 
          $asm07.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMostDerivedMemberInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MemberInfo"), [
          $asm07.TypeRef("System.Reflection.IReflect"), $.String, 
          $asm07.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonGenericMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyPutFlags", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.BindingFlags"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalLateCall", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "InternalLateSet", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")]), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $asm05.TypeRef("Microsoft.VisualBasic.CallType")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "InvokeMemberOnIReflect", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Reflection.IReflect"), $asm07.TypeRef("System.Reflection.MemberInfo"), 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMissingMemberException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:true }, "LateCall", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.Boolean])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateGet", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.Boolean])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateIndexGet", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateIndexSet", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateIndexSetComplex", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateSet", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateSetComplex", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "LegacyIsGeneric", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberIsField", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoByrefs", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ParameterInfo")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyObjRefPresentForInstanceCall", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.Constant({Static:true , Public:false}, "DefaultCallType", $asm05.TypeRef("Microsoft.VisualBasic.CallType"), 0);

    $.Constant({Static:true , Public:false}, "VBLateBindingFlags", $asm07.TypeRef("System.Reflection.BindingFlags"), 262237);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.AssemblyData */ 

(function AssemblyData$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.AssemblyData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChannelObj", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetChannelObj", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File")])
    );

    $.Field({Static:false, Public:true }, "m_Files", $asm07.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "m_DirFiles", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.IO.FileSystemInfo")]));

    $.Field({Static:false, Public:false}, "m_DirNextFileIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_DirAttributes", $asm07.TypeRef("System.IO.FileAttributes"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.ProjectData */ 

(function ProjectData$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.ProjectData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ClearProjectError", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateProjectError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "EndApp", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetAssemblyData", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.AssemblyData"), [$asm07.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProjectData", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "SetProjectError", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SetProjectError", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Exception"), $.Int32])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "m_Err", $asm05.TypeRef("Microsoft.VisualBasic.ErrObject"));

    $.Field({Static:false, Public:false}, "m_rndSeed", $.Int32);

    $.Field({Static:false, Public:false}, "m_numprsPtr", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_DigitArray", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_AssemblyData", $asm07.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "m_oProject", $.Type)
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute"));

    $.Field({Static:false, Public:false}, "m_CachedMSCoreLibAssembly", $asm07.TypeRef("System.Reflection.Assembly"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.NativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "AttachThreadInput", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "user32", 
        CharSet: 'ansi',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CloseHandle", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "kernel32", 
        CharSet: 'ansi',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "ConvertStringSecurityDescriptorToSecurityDescriptor", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.IntPtr
        ]), 
      {
        Module: "Advapi32.dll", 
        CharSet: 'unicode',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CreateProcess", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeTypes+SECURITY_ATTRIBUTES"), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeTypes+SECURITY_ATTRIBUTES"), 
          $.Boolean, $.Int32, 
          $.IntPtr, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeTypes+STARTUPINFO"), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeTypes+PROCESS_INFORMATION")
        ]), 
      {
        Module: "kernel32", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "Boolean"
          }, null
          , null
          , null
          , null
          , null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "FindWindow", 
      new JSIL.MethodSignature($.IntPtr, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])]), 
      {
        Module: "user32", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "ByValStr"
          }, 
          {
            NativeType: "ByValStr"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetDesktopWindow", 
      JSIL.MethodSignature.Return($.IntPtr), 
      {
        Module: "user32", 
        CharSet: 'ansi',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetStartupInfo", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeTypes+STARTUPINFO")), 
      {
        Module: "kernel32", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetVolumeInformation", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.IntPtr, $.Int32
        ]), 
      {
        Module: "kernel32", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPTStr"
          }, null
          , null
          , null
          , null
          , null
          , null
          , null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetWindow", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.Int32]), 
      {
        Module: "user32", 
        CharSet: 'ansi',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetWindowText", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $asm07.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ]), 
      {
        Module: "user32", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPTStr", 
            Out: true
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GlobalMemoryStatus", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+MEMORYSTATUS")])), 
      {
        Module: "Kernel32.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GlobalMemoryStatusEx", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+MEMORYSTATUSEX")])]), 
      {
        Module: "Kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "MoveFileEx", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Int32
        ]), 
      {
        Module: "kernel32", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "SetFocus", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "user32", 
        CharSet: 'ansi',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "SetForegroundWindow", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "user32", 
        CharSet: 'ansi',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "SHChangeNotify", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $.IntPtr, $.IntPtr
        ]), 
      {
        Module: "shell32.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SHFileOperation", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFILEOPSTRUCT")])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "SHFileOperation32", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFILEOPSTRUCT")])]), 
      {
        Module: "shell32.dll", 
        CharSet: 'auto',
        EntryPoint: "SHFileOperation", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "SHFileOperation64", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFILEOPSTRUCT64")])]), 
      {
        Module: "shell32.dll", 
        CharSet: 'auto',
        EntryPoint: "SHFileOperation", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "WaitForInputIdle", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeTypes+LateInitSafeHandleZeroOrMinusOneIsInvalid"), $.Int32]), 
      {
        Module: "user32", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "WaitForSingleObject", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeTypes+LateInitSafeHandleZeroOrMinusOneIsInvalid"), $.Int32]), 
      {
        Module: "kernel32", 
        CharSet: 'ansi',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* struct Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFILEOPSTRUCT */ 

(function SHFILEOPSTRUCT$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFILEOPSTRUCT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "hwnd", $.IntPtr);

    $.Field({Static:false, Public:false}, "wFunc", $.UInt32);

    $.Field({Static:false, Public:false}, "pFrom", $.String);

    $.Field({Static:false, Public:false}, "pTo", $.String);

    $.Field({Static:false, Public:false}, "fFlags", $.UInt16);

    $.Field({Static:false, Public:false}, "fAnyOperationsAborted", $.Boolean);

    $.Field({Static:false, Public:false}, "hNameMappings", $.IntPtr);

    $.Field({Static:false, Public:false}, "lpszProgressTitle", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFILEOPSTRUCT64 */ 

(function SHFILEOPSTRUCT64$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFILEOPSTRUCT64", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "hwnd", $.IntPtr);

    $.Field({Static:false, Public:false}, "wFunc", $.UInt32);

    $.Field({Static:false, Public:false}, "pFrom", $.String);

    $.Field({Static:false, Public:false}, "pTo", $.String);

    $.Field({Static:false, Public:false}, "fFlags", $.UInt16);

    $.Field({Static:false, Public:false}, "fAnyOperationsAborted", $.Boolean);

    $.Field({Static:false, Public:false}, "hNameMappings", $.IntPtr);

    $.Field({Static:false, Public:false}, "lpszProgressTitle", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFileOperationType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.NativeMethods+SHFileOperationType", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    FO_MOVE: 1, 
    FO_COPY: 2, 
    FO_DELETE: 3, 
    FO_RENAME: 4, 
  }
);

/* enum Microsoft.VisualBasic.CompilerServices.NativeMethods+ShFileOperationFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.NativeMethods+ShFileOperationFlags", 
    BaseType: $asm07.TypeRef("System.UInt16"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    FOF_MULTIDESTFILES: 1, 
    FOF_CONFIRMMOUSE: 2, 
    FOF_SILENT: 4, 
    FOF_RENAMEONCOLLISION: 8, 
    FOF_NOCONFIRMATION: 16, 
    FOF_WANTMAPPINGHANDLE: 32, 
    FOF_ALLOWUNDO: 64, 
    FOF_FILESONLY: 128, 
    FOF_SIMPLEPROGRESS: 256, 
    FOF_NOCONFIRMMKDIR: 512, 
    FOF_NOERRORUI: 1024, 
    FOF_NOCOPYSECURITYATTRIBS: 2048, 
    FOF_NORECURSION: 4096, 
    FOF_NO_CONNECTED_ELEMENTS: 8192, 
    FOF_WANTNUKEWARNING: 16384, 
    FOF_NORECURSEREPARSE: 32768, 
  }
);

/* enum Microsoft.VisualBasic.CompilerServices.NativeMethods+SHChangeEventTypes */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.NativeMethods+SHChangeEventTypes", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SHCNE_DISKEVENTS: 145439, 
    SHCNE_ALLEVENTS: 2147483647, 
  }
);

/* enum Microsoft.VisualBasic.CompilerServices.NativeMethods+SHChangeEventParameterFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.NativeMethods+SHChangeEventParameterFlags", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SHCNF_DWORD: 3, 
  }
);

/* struct Microsoft.VisualBasic.CompilerServices.NativeMethods+MEMORYSTATUS */ 

(function MEMORYSTATUS$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.CompilerServices.NativeMethods+MEMORYSTATUS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "dwLength", $.UInt32);

    $.Field({Static:false, Public:false}, "dwMemoryLoad", $.UInt32);

    $.Field({Static:false, Public:false}, "dwTotalPhys", $.UInt32);

    $.Field({Static:false, Public:false}, "dwAvailPhys", $.UInt32);

    $.Field({Static:false, Public:false}, "dwTotalPageFile", $.UInt32);

    $.Field({Static:false, Public:false}, "dwAvailPageFile", $.UInt32);

    $.Field({Static:false, Public:false}, "dwTotalVirtual", $.UInt32);

    $.Field({Static:false, Public:false}, "dwAvailVirtual", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.VisualBasic.CompilerServices.NativeMethods+MEMORYSTATUSEX */ 

(function MEMORYSTATUSEX$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.CompilerServices.NativeMethods+MEMORYSTATUSEX", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "dwLength", $.UInt32);

    $.Field({Static:false, Public:false}, "dwMemoryLoad", $.UInt32);

    $.Field({Static:false, Public:false}, "ullTotalPhys", $.UInt64);

    $.Field({Static:false, Public:false}, "ullAvailPhys", $.UInt64);

    $.Field({Static:false, Public:false}, "ullTotalPageFile", $.UInt64);

    $.Field({Static:false, Public:false}, "ullAvailPageFile", $.UInt64);

    $.Field({Static:false, Public:false}, "ullTotalVirtual", $.UInt64);

    $.Field({Static:false, Public:false}, "ullAvailVirtual", $.UInt64);

    $.Field({Static:false, Public:false}, "ullAvailExtendedVirtual", $.UInt64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.NativeTypes */ 

(function NativeTypes$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.NativeTypes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "INVALID_HANDLE", $.IntPtr);

    $.Constant({Static:true , Public:false}, "GW_HWNDFIRST", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "GW_HWNDLAST", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "GW_HWNDNEXT", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "GW_HWNDPREV", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "GW_OWNER", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "GW_CHILD", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "GW_MAX", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "STARTF_USESHOWWINDOW", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "NORMAL_PRIORITY_CLASS", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "LCMAP_TRADITIONAL_CHINESE", $.Int32, 67108864);

    $.Constant({Static:true , Public:false}, "LCMAP_SIMPLIFIED_CHINESE", $.Int32, 33554432);

    $.Constant({Static:true , Public:false}, "LCMAP_UPPERCASE", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "LCMAP_LOWERCASE", $.Int32, 256);

    $.Constant({Static:true , Public:false}, "LCMAP_FULLWIDTH", $.Int32, 8388608);

    $.Constant({Static:true , Public:false}, "LCMAP_HALFWIDTH", $.Int32, 4194304);

    $.Constant({Static:true , Public:false}, "LCMAP_KATAKANA", $.Int32, 2097152);

    $.Constant({Static:true , Public:false}, "LCMAP_HIRAGANA", $.Int32, 1048576);

    $.Constant({Static:true , Public:false}, "ERROR_FILE_NOT_FOUND", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "ERROR_PATH_NOT_FOUND", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "ERROR_ACCESS_DENIED", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "ERROR_ALREADY_EXISTS", $.Int32, 183);

    $.Constant({Static:true , Public:false}, "ERROR_FILENAME_EXCED_RANGE", $.Int32, 206);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_DRIVE", $.Int32, 15);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_PARAMETER", $.Int32, 87);

    $.Constant({Static:true , Public:false}, "ERROR_SHARING_VIOLATION", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "ERROR_FILE_EXISTS", $.Int32, 80);

    $.Constant({Static:true , Public:false}, "ERROR_OPERATION_ABORTED", $.Int32, 995);

    $.Constant({Static:true , Public:false}, "ERROR_CANCELLED", $.Int32, 1223);


    function NativeTypes__cctor () {
      $thisType.INVALID_HANDLE = new $asm07.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      NativeTypes__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.NativeTypes+SECURITY_ATTRIBUTES */ 

(function SECURITY_ATTRIBUTES$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.NativeTypes+SECURITY_ATTRIBUTES", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "nLength", $.Int32);

    $.Field({Static:false, Public:true }, "lpSecurityDescriptor", $.IntPtr);

    $.Field({Static:false, Public:true }, "bInheritHandle", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.NativeTypes+LateInitSafeHandleZeroOrMinusOneIsInvalid */ 

(function LateInitSafeHandleZeroOrMinusOneIsInvalid$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.VisualBasic.CompilerServices.NativeTypes+LateInitSafeHandleZeroOrMinusOneIsInvalid", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "InitialSetHandle", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.NativeTypes+PROCESS_INFORMATION */ 

(function PROCESS_INFORMATION$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.NativeTypes+PROCESS_INFORMATION", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "hProcess", $.IntPtr);

    $.Field({Static:false, Public:true }, "hThread", $.IntPtr);

    $.Field({Static:false, Public:true }, "dwProcessId", $.Int32);

    $.Field({Static:false, Public:true }, "dwThreadId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.NativeTypes+STARTUPINFO */ 

(function STARTUPINFO$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.NativeTypes+STARTUPINFO", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:true }, "cb", $.Int32);

    $.Field({Static:false, Public:true }, "lpReserved", $.IntPtr);

    $.Field({Static:false, Public:true }, "lpDesktop", $.IntPtr);

    $.Field({Static:false, Public:true }, "lpTitle", $.IntPtr);

    $.Field({Static:false, Public:true }, "dwX", $.Int32);

    $.Field({Static:false, Public:true }, "dwY", $.Int32);

    $.Field({Static:false, Public:true }, "dwXSize", $.Int32);

    $.Field({Static:false, Public:true }, "dwYSize", $.Int32);

    $.Field({Static:false, Public:true }, "dwXCountChars", $.Int32);

    $.Field({Static:false, Public:true }, "dwYCountChars", $.Int32);

    $.Field({Static:false, Public:true }, "dwFillAttribute", $.Int32);

    $.Field({Static:false, Public:true }, "dwFlags", $.Int32);

    $.Field({Static:false, Public:true }, "wShowWindow", $.Int16);

    $.Field({Static:false, Public:true }, "cbReserved2", $.Int16);

    $.Field({Static:false, Public:true }, "lpReserved2", $.IntPtr);

    $.Field({Static:false, Public:true }, "hStdInput", $.IntPtr);

    $.Field({Static:false, Public:true }, "hStdOutput", $.IntPtr);

    $.Field({Static:false, Public:true }, "hStdError", $.IntPtr);

    $.Field({Static:false, Public:false}, "m_HasBeenDisposed", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.NativeTypes+SystemTime */ 

(function SystemTime$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.NativeTypes+SystemTime", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "wYear", $.Int16);

    $.Field({Static:false, Public:true }, "wMonth", $.Int16);

    $.Field({Static:false, Public:true }, "wDayOfWeek", $.Int16);

    $.Field({Static:false, Public:true }, "wDay", $.Int16);

    $.Field({Static:false, Public:true }, "wHour", $.Int16);

    $.Field({Static:false, Public:true }, "wMinute", $.Int16);

    $.Field({Static:false, Public:true }, "wSecond", $.Int16);

    $.Field({Static:false, Public:true }, "wMilliseconds", $.Int16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.VisualBasic.CompilerServices.NativeTypes+MoveFileExFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.NativeTypes+MoveFileExFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    MOVEFILE_REPLACE_EXISTING: 1, 
    MOVEFILE_COPY_ALLOWED: 2, 
    MOVEFILE_DELAY_UNTIL_REBOOT: 4, 
    MOVEFILE_WRITE_THROUGH: 8, 
  }
);

/* class Microsoft.VisualBasic.CompilerServices.NewLateBinding */ 

(function NewLateBinding$Members () {
  var $, $thisType;












































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.NewLateBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CallMethod", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Container"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OverloadResolution+ResolutionFailure")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanBindCall", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanBindGet", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanBindInvokeDefault", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanBindSet", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.String, 
          $.Object, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanIndexSetComplex", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConstructCallArguments", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "FallbackCall", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FallbackGet", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FallbackIndexSet", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FallbackIndexSetComplex", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FallbackInvokeDefault1", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FallbackInvokeDefault2", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FallbackSet", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FallbackSetComplex", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Boolean, 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCallTarget", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodBase"), [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalLateIndexGet", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OverloadResolution+ResolutionFailure")]), $jsilcore.TypeRef("System.Array", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalLateInvokeDefault", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsZeroArgumentCall", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "LateCall", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateCallInvokeDefault", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateCanEvaluate", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Boolean, $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateGet", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateGetInvokeDefault", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean
        ])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateIndexGet", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "LateIndexGet", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LateIndexSet", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateIndexSetComplex", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateSet", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateSet", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $.Boolean, $.Boolean, 
          $asm05.TypeRef("Microsoft.VisualBasic.CallType")
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LateSetComplex", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $.Boolean, $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MatchesPropertyRequirements", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjectLateCall", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ObjectLateGet", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ObjectLateIndexSet", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ObjectLateIndexSetComplex", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ObjectLateInvokeDefault", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.Boolean])
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ObjectLateSet", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjectLateSetComplex", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $.Boolean, $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ReportPropertyMismatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), $asm07.TypeRef("System.Reflection.BindingFlags")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResetCopyback", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Boolean]))
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveCall", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Method"), [
          $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.Symbols+Container"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $asm07.TypeRef("System.Reflection.BindingFlags"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.OverloadResolution+ResolutionFailure")])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.SafeNativeMethods */ 

(function SafeNativeMethods$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.SafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetLocalTime", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeTypes+SystemTime")), 
      {
        Module: "kernel32", 
        CharSet: 'ansi',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetWindowThreadProcessId", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "user32", 
        CharSet: 'ansi',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "IsWindowEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "user32", 
        CharSet: 'ansi',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "IsWindowVisible", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "user32", 
        CharSet: 'ansi',
        Result: {
          NativeType: "Boolean"
        }
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag */ 

(function StaticLocalInitFlag$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:true }, "State", $.Int16)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.IncompleteInitialization */ 

(function IncompleteInitialization$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "Microsoft.VisualBasic.CompilerServices.IncompleteInitialization", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CreateFileMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), [
          $asm07.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeTypes+SECURITY_ATTRIBUTES"), 
          $.Int32, $.Int32, 
          $.Int32, $.String
        ]), 
      {
        Module: "kernel32", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPStruct"
          }, null
          , null
          , null
          , null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetDiskFreeSpaceEx", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "Kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetKeyState", 
      new JSIL.MethodSignature($.Int16, [$.Int32]), 
      {
        Module: "User32.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetLogicalDrives", 
      JSIL.MethodSignature.Return($.Int32), 
      {
        Module: "kernel32", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "LCMapString", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Int32
        ]), 
      {
        Module: "kernel32", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "ByValStr"
          }, null
          , 
          {
            NativeType: "ByValStr"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "LCMapStringA", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ]), 
      {
        Module: "kernel32", 
        CharSet: 'ansi',
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , 
          {
            NativeType: "Array"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "LocalFree", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "kernel32", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "MapViewOfFile", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.SafeMemoryMappedViewOfFileHandle"), [
          $.IntPtr, $.Int32, 
          $.Int32, $.Int32, 
          $.UIntPtr
        ]), 
      {
        Module: "kernel32", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "MessageBeep", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "user32", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "MoveFile", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String]), 
      {
        Module: "kernel32", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPTStr"
          }, 
          {
            NativeType: "LPTStr"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "OpenFileMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), [
          $.Int32, $.Boolean, 
          $.String
        ]), 
      {
        Module: "kernel32", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "Boolean"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "SetLocalTime", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.NativeTypes+SystemTime")]), 
      {
        Module: "kernel32", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "UnmapViewOfFile", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "VariantChangeType", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Reference", [$.Object]), 
          $.Int16, $.Int16
        ]), 
      {
        Module: "oleaut32", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "VarNumFromParseNum", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ]), 
      {
        Module: "oleaut32", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array"
          }, 
          {
            NativeType: "Array"
          }, null

        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "VarParseNumFromStr", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "oleaut32", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , null
          , 
          {
            NativeType: "Array"
          }, 
          {
            NativeType: "Array"
          }
        ]
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:true }, "MEMBERID_NIL", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "LCID_US_ENGLISH", $.Int32, 1033);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* enum Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+tagSYSKIND */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+tagSYSKIND", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SYS_WIN16: 0, 
    SYS_MAC: 2, 
  }
);

/* struct Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+tagTLIBATTR */ 

(function tagTLIBATTR$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+tagTLIBATTR", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "guid", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:true }, "lcid", $.Int32);

    $.Field({Static:false, Public:true }, "syskind", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+tagSYSKIND"));

    $.Field({Static:false, Public:true }, "wMajorVerNum", $.Int16);

    $.Field({Static:false, Public:true }, "wMinorVerNum", $.Int16);

    $.Field({Static:false, Public:true }, "wLibFlags", $.Int16);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* interface Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeComp */ 

JSIL.MakeInterface(
  "Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeComp", false, [], function ($) {
    $.Method({}, "RemoteBind", new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int16, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeInfo")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.DESCKIND")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.FUNCDESC")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.VARDESC")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]));
    $.Method({}, "RemoteBindType", new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeInfo")])
        ]));
  }, [])
  .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["00020403-0000-0000-C000-000000000046"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* interface Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+IDispatch */ 

JSIL.MakeInterface(
  "Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+IDispatch", false, [], function ($) {
    $.Method({}, "GetTypeInfoCount", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "GetTypeInfo", new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeInfo")])
        ]));
    $.Method({}, "GetIDsOfNames", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "Invoke", JSIL.MethodSignature.Return($.Int32));
  }, [])
  .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["00020400-0000-0000-C000-000000000046"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* interface Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeInfo */ 

JSIL.MakeInterface(
  "Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeInfo", false, [], function ($) {
    $.Method({}, "GetTypeAttr", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]));
    $.Method({}, "GetTypeComp", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeComp")])]));
    $.Method({}, "GetFuncDesc", new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]));
    $.Method({}, "GetVarDesc", new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])]));
    $.Method({}, "GetNames", new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]));
    $.Method({}, "GetRefTypeOfImplType", new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]));
    $.Method({}, "GetImplTypeFlags", new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32]));
    $.Method({}, "GetIDsOfNames", new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
    $.Method({}, "Invoke", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "GetDocumentation", new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ]));
    $.Method({}, "GetDllEntry", new JSIL.MethodSignature($.Int32, [
          $.Int32, $asm07.TypeRef("System.Runtime.InteropServices.ComTypes.INVOKEKIND"), 
          $.String, $.String, 
          $.Int16
        ]));
    $.Method({}, "GetRefTypeInfo", new JSIL.MethodSignature($.Int32, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Type])]));
    $.Method({}, "AddressOfMember", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "CreateInstance", new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), 
          $.Object
        ]));
    $.Method({}, "GetMops", new JSIL.MethodSignature($.Int32, [$.Int32, $.String]));
    $.Method({}, "GetContainingTypeLib", new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeLib")]), $jsilcore.TypeRef("System.Array", [$.Int32])]));
    $.Method({}, "ReleaseTypeAttr", JSIL.MethodSignature.Action($.IntPtr));
    $.Method({}, "ReleaseFuncDesc", JSIL.MethodSignature.Action($.IntPtr));
    $.Method({}, "ReleaseVarDesc", JSIL.MethodSignature.Action($.IntPtr));
  }, [])
  .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["00020401-0000-0000-C000-000000000046"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* interface Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+IProvideClassInfo */ 

JSIL.MakeInterface(
  "Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+IProvideClassInfo", false, [], function ($) {
    $.Method({}, "GetClassInfo", JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeInfo")));
  }, [])
  .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["B196B283-BAB4-101A-B69C-00AA00341D07"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* interface Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeLib */ 

JSIL.MakeInterface(
  "Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeLib", false, [], function ($) {
    $.Method({}, "RemoteGetTypeInfoCount", JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Int32])));
    $.Method({}, "GetTypeInfo", new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeInfo")])]));
    $.Method({}, "GetTypeInfoType", new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.TYPEKIND")])]));
    $.Method({}, "GetTypeInfoOfGuid", new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Guid")]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeInfo")])]));
    $.Method({}, "RemoteGetLibAttr", new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+tagTLIBATTR")]), $jsilcore.TypeRef("System.Array", [$.Int32])]));
    $.Method({}, "GetTypeComp", JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeComp")])));
    $.Method({}, "RemoteGetDocumentation", new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.String])
        ]));
    $.Method({}, "RemoteIsName", new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.IntPtr]), $jsilcore.TypeRef("System.Array", [$.String])
        ]));
    $.Method({}, "RemoteFindName", new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods+ITypeInfo")]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $jsilcore.TypeRef("System.Array", [$.String])
        ]));
    $.Method({}, "LocalReleaseTLibAttr", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["00020402-0000-0000-C000-000000000046"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* enum Microsoft.VisualBasic.CompilerServices.tagVT */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.tagVT", 
    BaseType: $asm07.TypeRef("System.Int16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    VT_RESERVED: -32768, 
    VT_ILLEGAL: -1, 
    VT_EMPTY: 0, 
    VT_NULL: 1, 
    VT_I2: 2, 
    VT_I4: 3, 
    VT_R4: 4, 
    VT_R8: 5, 
    VT_CY: 6, 
    VT_DATE: 7, 
    VT_BSTR: 8, 
    VT_DISPATCH: 9, 
    VT_ERROR: 10, 
    VT_BOOL: 11, 
    VT_VARIANT: 12, 
    VT_UNKNOWN: 13, 
    VT_DECIMAL: 14, 
    VT_I1: 16, 
    VT_UI1: 17, 
    VT_UI2: 18, 
    VT_UI4: 19, 
    VT_I8: 20, 
    VT_UI8: 21, 
    VT_INT: 22, 
    VT_UINT: 23, 
    VT_VOID: 24, 
    VT_HRESULT: 25, 
    VT_PTR: 26, 
    VT_SAFEARRAY: 27, 
    VT_CARRAY: 28, 
    VT_USERDEFINED: 29, 
    VT_LPSTR: 30, 
    VT_LPWSTR: 31, 
    VT_RECORD: 36, 
    VT_FILETIME: 64, 
    VT_BLOB: 65, 
    VT_STREAM: 66, 
    VT_STORAGE: 67, 
    VT_STREAMED_OBJECT: 68, 
    VT_STORED_OBJECT: 69, 
    VT_BLOB_OBJECT: 70, 
    VT_CF: 71, 
    VT_CLSID: 72, 
    VT_BSTR_BLOB: 4095, 
    VT_ILLEGALMASKED: 4095, 
    VT_TYPEMASK: 4095, 
    VT_VECTOR: 4096, 
    VT_ARRAY: 8192, 
    VT_BYREF: 16384, 
  }
);

/* enum Microsoft.VisualBasic.CompilerServices.VT */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.CompilerServices.VT", 
    BaseType: $asm07.TypeRef("System.Int16"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    DBNull: 1, 
    Short: 2, 
    Integer: 3, 
    Single: 4, 
    Double: 5, 
    Currency: 6, 
    Date: 7, 
    String: 8, 
    Error: 10, 
    Boolean: 11, 
    Variant: 12, 
    Decimal: 14, 
    Byte: 17, 
    Char: 18, 
    Long: 20, 
    Structure: 36, 
    Array: 8192, 
    ByteArray: 8209, 
    CharArray: 8210, 
  }
);

/* class Microsoft.VisualBasic.CompilerServices.PutHandler */ 

(function PutHandler$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.PutHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Callback", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.FieldInfo"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    )
      .Overrides($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.IRecordEnum"), "Callback");

    $.Field({Static:false, Public:true }, "m_oFile", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File"));

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.IRecordEnum")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.GetHandler */ 

(function GetHandler$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.GetHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Callback", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Reflection.FieldInfo"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    )
      .Overrides($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.IRecordEnum"), "Callback");

    $.Field({Static:false, Public:false}, "m_oFile", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File"));

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.IRecordEnum")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.VB6File */ 

(function VB6File$Members () {
  var $, $thisType;





















































































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VB6File", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.OpenAccess"), 
          $asm05.TypeRef("Microsoft.VisualBasic.OpenShare"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSpaces", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInput", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckEOF", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CloseFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseTheFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ComTypeFromVT", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VT")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FormatUniversalDate", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.DateTime")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.ValueType")]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Array")]), $.Int64, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Byte]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int16]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Char]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Single]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Double]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Decimal")]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Int64, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAbsolutePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArrayData", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Array"), $asm07.TypeRef("System.Type"), 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArrayDesc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Array"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetByteLength", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VT")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChar", 
      new JSIL.MethodSignature($.Char, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetColumn", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCurrency", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDynamicArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Array")]), $asm07.TypeRef("System.Type"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFileInTerm", 
      new JSIL.MethodSignature($.String, [$.Int16])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFixedArray", 
      new JSIL.MethodSignature(null, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Array")]), 
          $asm07.TypeRef("System.Type"), $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFixedLengthString", 
      new JSIL.MethodSignature($.String, [$.Int64, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInteger", 
      new JSIL.MethodSignature($.Int32, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLengthPrefixedString", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLong", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMode", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.OpenMode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObject", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $.Int64, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPos", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQuotedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRecord", 
      new JSIL.MethodSignature(null, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.ValueType")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetShort", 
      new JSIL.MethodSignature($.Int16, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSingle", 
      new JSIL.MethodSignature($.Single, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetStreamReader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.StreamReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWidth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Object]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int16]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Single]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Double]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Decimal")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InputNum", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("Microsoft.VisualBasic.VariantType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InputObject", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InputStr", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "InputString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteHelper", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Parameter(0, "Output", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "IntlIsComma", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IntlIsDoubleQuote", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IntlIsSpace", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IOStrFromDecimal", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Decimal"), $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IOStrFromDouble", 
      new JSIL.MethodSignature($.String, [$.Double, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IOStrFromSingle", 
      new JSIL.MethodSignature($.String, [$.Single, $asm07.TypeRef("System.Globalization.NumberFormatInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LengthCheck", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "LineInput", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LOC", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Lock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Lock", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Lock", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "LOF", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OpenFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Print", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    )
      .Parameter(0, "Output", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "PrintLine", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    )
      .Parameter(0, "Output", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "PrintTab", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.TabInfo"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Object, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.ValueType"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Array"), $.Int64, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Byte, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Int16, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Char, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Single, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Double, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Decimal"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int64, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutArrayData", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Array"), $asm07.TypeRef("System.Type"), 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutArrayDesc", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Array"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PutBoolean", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutByte", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Byte, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutChar", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Char, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutCurrency", 
      new JSIL.MethodSignature(null, [
          $.Int64, $asm07.TypeRef("System.Decimal"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutDate", 
      new JSIL.MethodSignature(null, [
          $.Int64, $asm07.TypeRef("System.DateTime"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutDecimal", 
      new JSIL.MethodSignature(null, [
          $.Int64, $asm07.TypeRef("System.Decimal"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutDouble", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Double, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutDynamicArray", 
      new JSIL.MethodSignature(null, [
          $.Int64, $asm07.TypeRef("System.Array"), 
          $.Boolean, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutEmpty", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "PutFixedArray", 
      new JSIL.MethodSignature(null, [
          $.Int64, $asm07.TypeRef("System.Array"), 
          $asm07.TypeRef("System.Type"), $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutFixedLengthString", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutInteger", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutLong", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PutObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int64, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutRecord", 
      new JSIL.MethodSignature(null, [$.Int64, $asm07.TypeRef("System.ValueType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutShort", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int16, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutSingle", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Single, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutString", 
      new JSIL.MethodSignature(null, [$.Int64, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutStringWithLength", 
      new JSIL.MethodSignature(null, [$.Int64, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PutVariantString", 
      new JSIL.MethodSignature(null, [$.Int64, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadInField", 
      new JSIL.MethodSignature($.String, [$.Int16])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Seek", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Seek", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SeekOffset", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetColumn", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPrintMode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRecord", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWidth", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipTrailingWhiteSpace", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipWhiteSpace", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipWhiteSpaceEOF", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SPC", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Tab", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Unlock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Unlock", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Unlock", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateReadable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateRec", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "VTFromComType", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VT"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VTType", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VT"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHelper", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Parameter(0, "Output", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLineHelper", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Object]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Parameter(0, "Output", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "m_lCurrentColumn", $.Int32);

    $.Field({Static:false, Public:false}, "m_lWidth", $.Int32);

    $.Field({Static:false, Public:false}, "m_lRecordLen", $.Int32);

    $.Field({Static:false, Public:false}, "m_lRecordStart", $.Int64);

    $.Field({Static:false, Public:false}, "m_sFullPath", $.String);

    $.Field({Static:false, Public:false}, "m_share", $asm05.TypeRef("Microsoft.VisualBasic.OpenShare"));

    $.Field({Static:false, Public:false}, "m_access", $asm05.TypeRef("Microsoft.VisualBasic.OpenAccess"));

    $.Field({Static:false, Public:false}, "m_eof", $.Boolean);

    $.Field({Static:false, Public:false}, "m_position", $.Int64);

    $.Field({Static:false, Public:false}, "m_file", $asm07.TypeRef("System.IO.FileStream"));

    $.Field({Static:false, Public:false}, "m_fAppend", $.Boolean);

    $.Field({Static:false, Public:false}, "m_bPrint", $.Boolean);

    $.Field({Static:false, Public:false}, "m_sw", $asm07.TypeRef("System.IO.StreamWriter"));

    $.Field({Static:false, Public:false}, "m_sr", $asm07.TypeRef("System.IO.StreamReader"));

    $.Field({Static:false, Public:false}, "m_bw", $asm07.TypeRef("System.IO.BinaryWriter"));

    $.Field({Static:false, Public:false}, "m_br", $asm07.TypeRef("System.IO.BinaryReader"));

    $.Field({Static:false, Public:false}, "m_Encoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Constant({Static:true , Public:false}, "lchTab", $.Int32, 9);

    $.Constant({Static:true , Public:false}, "lchCR", $.Int32, 13);

    $.Constant({Static:true , Public:false}, "lchLF", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "lchSpace", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "lchIntlSpace", $.Int32, 12288);

    $.Constant({Static:true , Public:false}, "lchDoubleQuote", $.Int32, 34);

    $.Constant({Static:true , Public:false}, "lchPound", $.Int32, 35);

    $.Constant({Static:true , Public:false}, "lchComma", $.Int32, 44);

    $.Constant({Static:true , Public:false}, "EOF_INDICATOR", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "EOF_CHAR", $.Int32, 26);

    $.Constant({Static:true , Public:false}, "FIN_NUMTERMCHAR", $.Int16, 6);

    $.Constant({Static:true , Public:false}, "FIN_LINEINP", $.Int16, 0);

    $.Constant({Static:true , Public:false}, "FIN_QSTRING", $.Int16, 1);

    $.Constant({Static:true , Public:false}, "FIN_STRING", $.Int16, 2);

    $.Constant({Static:true , Public:false}, "FIN_NUMBER", $.Int16, 3);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.VBInputBox */ 

(function VBInputBox$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm2C.TypeRef("System.Windows.Forms.Form"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VBInputBox", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeComponent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeInputBox", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MyCancelButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OKButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.Field({Static:false, Public:false}, "components", $asm0A.TypeRef("System.ComponentModel.Container"));

    $.Field({Static:false, Public:false}, "TextBox", $asm2C.TypeRef("System.Windows.Forms.TextBox"));

    $.Field({Static:false, Public:false}, "Label", $asm2C.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "OKButton", $asm2C.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "MyCancelButton", $asm2C.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:true }, "Output", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.CompilerServices.VB6InputFile */ 

(function VB6InputFile$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VB6InputFile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("Microsoft.VisualBasic.OpenShare")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInput", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMode", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.OpenMode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Object]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int16]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Single]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Double]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Decimal")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LOC", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OpenFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseInputString", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadLine", 
      JSIL.MethodSignature.Return($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.VB6OutputFile */ 

(function VB6OutputFile$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VB6OutputFile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.OpenShare"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMode", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.OpenMode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LOC", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OpenFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.VB6RandomFile */ 

(function VB6RandomFile$Members () {
  var $, $thisType;











































  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6File"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VB6RandomFile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.OpenAccess"), 
          $asm05.TypeRef("Microsoft.VisualBasic.OpenShare"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CloseFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.ValueType")]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Array")]), $.Int64, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Byte]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int16]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Char]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Single]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Double]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Decimal")]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Int64, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")]), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMode", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.OpenMode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObject", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $.Int64, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetStreamReader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.StreamReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LOC", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Lock", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OpenFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenFileHelper", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.FileMode"), $asm05.TypeRef("Microsoft.VisualBasic.OpenAccess")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.ValueType"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Array"), $.Int64, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Byte, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Int16, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Char, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Single, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$.Double, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Decimal"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int64, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PutObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int64, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Seek", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Seek", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Unlock", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateReadable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateWriteable", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.VB6BinaryFile */ 

(function VB6BinaryFile$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.VB6RandomFile"), 
      Name: "Microsoft.VisualBasic.CompilerServices.VB6BinaryFile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.OpenAccess"), 
          $asm05.TypeRef("Microsoft.VisualBasic.OpenShare")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInput", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Get", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Int64, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMode", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.OpenMode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Object]))
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int16]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Single]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Double]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Decimal")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Input", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InputStr", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "LOC", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Lock", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Put", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int64, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Seek", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Seek", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Unlock", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int64])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.ResID */ 

(function ResID$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.ResID", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "False", $.String, "False");

    $.Constant({Static:true , Public:false}, "True", $.String, "True");

    $.Constant({Static:true , Public:false}, "Argument_GEZero1", $.String, "Argument_GEZero1");

    $.Constant({Static:true , Public:false}, "Argument_GTZero1", $.String, "Argument_GTZero1");

    $.Constant({Static:true , Public:false}, "Argument_InvalidVbStrConv", $.String, "Argument_InvalidVbStrConv");

    $.Constant({Static:true , Public:false}, "Argument_StrConvSCandTC", $.String, "Argument_StrConvSCandTC");

    $.Constant({Static:true , Public:false}, "Argument_SCNotSupported", $.String, "Argument_SCNotSupported");

    $.Constant({Static:true , Public:false}, "Argument_TCNotSupported", $.String, "Argument_TCNotSupported");

    $.Constant({Static:true , Public:false}, "Argument_JPNNotSupported", $.String, "Argument_JPNNotSupported");

    $.Constant({Static:true , Public:false}, "Argument_IllegalWideNarrow", $.String, "Argument_IllegalWideNarrow");

    $.Constant({Static:true , Public:false}, "Argument_LocalNotSupported", $.String, "Argument_LocalNotSupported");

    $.Constant({Static:true , Public:false}, "Argument_WideNarrowNotApplicable", $.String, "Argument_WideNarrowNotApplicable");

    $.Constant({Static:true , Public:false}, "Argument_IllegalKataHira", $.String, "Argument_IllegalKataHira");

    $.Constant({Static:true , Public:false}, "Argument_LengthGTZero1", $.String, "Argument_LengthGTZero1");

    $.Constant({Static:true , Public:false}, "Argument_RangeTwoBytes1", $.String, "Argument_RangeTwoBytes1");

    $.Constant({Static:true , Public:false}, "Argument_MinusOneOrGTZero1", $.String, "Argument_MinusOneOrGTZero1");

    $.Constant({Static:true , Public:false}, "Argument_GEMinusOne1", $.String, "Argument_GEMinusOne1");

    $.Constant({Static:true , Public:false}, "Argument_GEOne1", $.String, "Argument_GEOne1");

    $.Constant({Static:true , Public:false}, "Argument_RankEQOne1", $.String, "Argument_RankEQOne1");

    $.Constant({Static:true , Public:false}, "Argument_IComparable2", $.String, "Argument_IComparable2");

    $.Constant({Static:true , Public:false}, "Argument_NotNumericType2", $.String, "Argument_NotNumericType2");

    $.Constant({Static:true , Public:false}, "Argument_InvalidValue1", $.String, "Argument_InvalidValue1");

    $.Constant({Static:true , Public:false}, "Argument_InvalidValueType2", $.String, "Argument_InvalidValueType2");

    $.Constant({Static:true , Public:false}, "Argument_PathNullOrEmpty", $.String, "Argument_PathNullOrEmpty");

    $.Constant({Static:true , Public:false}, "Argument_PathNullOrEmpty1", $.String, "Argument_PathNullOrEmpty1");

    $.Constant({Static:true , Public:false}, "Argument_InvalidPathChars1", $.String, "Argument_InvalidPathChars1");

    $.Constant({Static:true , Public:false}, "Argument_InvalidValue", $.String, "Argument_InvalidValue");

    $.Constant({Static:true , Public:false}, "Collection_BeforeAfterExclusive", $.String, "Collection_BeforeAfterExclusive");

    $.Constant({Static:true , Public:false}, "Collection_DuplicateKey", $.String, "Collection_DuplicateKey");

    $.Constant({Static:true , Public:false}, "FileSystem_IllegalInputAccess", $.String, "FileSystem_IllegalInputAccess");

    $.Constant({Static:true , Public:false}, "FileSystem_IllegalOutputAccess", $.String, "FileSystem_IllegalOutputAccess");

    $.Constant({Static:true , Public:false}, "FileSystem_IllegalAppendAccess", $.String, "FileSystem_IllegalAppendAccess");

    $.Constant({Static:true , Public:false}, "FileSystem_FileAlreadyOpen1", $.String, "FileSystem_FileAlreadyOpen1");

    $.Constant({Static:true , Public:false}, "ForLoop_CommonType2", $.String, "ForLoop_CommonType2");

    $.Constant({Static:true , Public:false}, "ForLoop_CommonType3", $.String, "ForLoop_CommonType3");

    $.Constant({Static:true , Public:false}, "ForLoop_ConvertToType3", $.String, "ForLoop_ConvertToType3");

    $.Constant({Static:true , Public:false}, "ForLoop_OperatorRequired2", $.String, "ForLoop_OperatorRequired2");

    $.Constant({Static:true , Public:false}, "ForLoop_UnacceptableOperator2", $.String, "ForLoop_UnacceptableOperator2");

    $.Constant({Static:true , Public:false}, "ForLoop_UnacceptableRelOperator2", $.String, "ForLoop_UnacceptableRelOperator2");

    $.Constant({Static:true , Public:false}, "InternalError", $.String, "InternalError");

    $.Constant({Static:true , Public:false}, "DIR_IllegalCall", $.String, "DIR_IllegalCall");

    $.Constant({Static:true , Public:false}, "KILL_NoFilesFound1", $.String, "KILL_NoFilesFound1");

    $.Constant({Static:true , Public:false}, "MaxErrNumber", $.String, "MaxErrNumber");

    $.Constant({Static:true , Public:false}, "FileSystem_DriveNotFound1", $.String, "FileSystem_DriveNotFound1");

    $.Constant({Static:true , Public:false}, "FileSystem_FileNotFound1", $.String, "FileSystem_FileNotFound1");

    $.Constant({Static:true , Public:false}, "FileSystem_PathNotFound1", $.String, "FileSystem_PathNotFound1");

    $.Constant({Static:true , Public:false}, "Financial_CalcDivByZero", $.String, "Financial_CalcDivByZero");

    $.Constant({Static:true , Public:false}, "Financial_CannotCalculateNPer", $.String, "Financial_CannotCalculateNPer");

    $.Constant({Static:true , Public:false}, "Financial_CannotCalculateRate", $.String, "Financial_CannotCalculateRate");

    $.Constant({Static:true , Public:false}, "Argument_InvalidNullValue1", $.String, "Argument_InvalidNullValue1");

    $.Constant({Static:true , Public:false}, "Rate_NPerMustBeGTZero", $.String, "Rate_NPerMustBeGTZero");

    $.Constant({Static:true , Public:false}, "PPMT_PerGT0AndLTNPer", $.String, "PPMT_PerGT0AndLTNPer");

    $.Constant({Static:true , Public:false}, "Financial_LifeNEZero", $.String, "Financial_LifeNEZero");

    $.Constant({Static:true , Public:false}, "Financial_ArgGEZero1", $.String, "Financial_ArgGEZero1");

    $.Constant({Static:true , Public:false}, "Financial_ArgGTZero1", $.String, "Financial_ArgGTZero1");

    $.Constant({Static:true , Public:false}, "Financial_PeriodLELife", $.String, "Financial_PeriodLELife");

    $.Constant({Static:true , Public:false}, "Argument_InvalidRank1", $.String, "Argument_InvalidRank1");

    $.Constant({Static:true , Public:false}, "Argument_Range1toFF1", $.String, "Argument_Range1toFF1");

    $.Constant({Static:true , Public:false}, "Argument_Range0to99_1", $.String, "Argument_Range0to99_1");

    $.Constant({Static:true , Public:false}, "Interaction_ResKeyNotCreated1", $.String, "Interaction_ResKeyNotCreated1");

    $.Constant({Static:true , Public:false}, "Argument_LCIDNotSupported1", $.String, "Argument_LCIDNotSupported1");

    $.Constant({Static:true , Public:false}, "ProcessNotFound", $.String, "ProcessNotFound");

    $.Constant({Static:true , Public:false}, "Array_RankMismatch", $.String, "Array_RankMismatch");

    $.Constant({Static:true , Public:false}, "Array_TypeMismatch", $.String, "Array_TypeMismatch");

    $.Constant({Static:true , Public:false}, "InvalidCast_FromTo", $.String, "InvalidCast_FromTo");

    $.Constant({Static:true , Public:false}, "InvalidCast_FromStringTo", $.String, "InvalidCast_FromStringTo");

    $.Constant({Static:true , Public:false}, "SetLocalDateFailure", $.String, "SetLocalDateFailure");

    $.Constant({Static:true , Public:false}, "SetLocalTimeFailure", $.String, "SetLocalTimeFailure");

    $.Constant({Static:true , Public:false}, "Argument_UnsupportedFieldType2", $.String, "Argument_UnsupportedFieldType2");

    $.Constant({Static:true , Public:false}, "Argument_UnsupportedIOType1", $.String, "Argument_UnsupportedIOType1");

    $.Constant({Static:true , Public:false}, "Argument_InvalidDateValue1", $.String, "Argument_InvalidDateValue1");

    $.Constant({Static:true , Public:false}, "UseFilePutObject", $.String, "UseFilePutObject");

    $.Constant({Static:true , Public:false}, "ArgumentNotNumeric1", $.String, "ArgumentNotNumeric1");

    $.Constant({Static:true , Public:false}, "FileIO_StringLengthExceeded", $.String, "FileIO_StringLengthExceeded");

    $.Constant({Static:true , Public:false}, "Argument_IndexLELength2", $.String, "Argument_IndexLELength2");

    $.Constant({Static:true , Public:false}, "MissingMember_NoDefaultMemberFound1", $.String, "MissingMember_NoDefaultMemberFound1");

    $.Constant({Static:true , Public:false}, "MissingMember_MemberNotFoundOnType2", $.String, "MissingMember_MemberNotFoundOnType2");

    $.Constant({Static:true , Public:false}, "MissingMember_MemberSetNotFoundOnType2", $.String, "MissingMember_MemberSetNotFoundOnType2");

    $.Constant({Static:true , Public:false}, "MissingMember_MemberLetNotFoundOnType2", $.String, "MissingMember_MemberLetNotFoundOnType2");

    $.Constant({Static:true , Public:false}, "IntermediateLateBoundNothingResult1", $.String, "IntermediateLateBoundNothingResult1");

    $.Constant({Static:true , Public:false}, "OnOffFormatStyle", $.String, "OnOffFormatStyle");

    $.Constant({Static:true , Public:false}, "YesNoFormatStyle", $.String, "YesNoFormatStyle");

    $.Constant({Static:true , Public:false}, "TrueFalseFormatStyle", $.String, "TrueFalseFormatStyle");

    $.Constant({Static:true , Public:false}, "Argument_CollectionIndex", $.String, "Argument_CollectionIndex");

    $.Constant({Static:true , Public:false}, "Argument_InvalidNamedArg2", $.String, "Argument_InvalidNamedArg2");

    $.Constant({Static:true , Public:false}, "NoMethodTakingXArguments2", $.String, "NoMethodTakingXArguments2");

    $.Constant({Static:true , Public:false}, "AmbiguousCall2", $.String, "AmbiguousCall2");

    $.Constant({Static:true , Public:false}, "AmbiguousCall_WideningConversion2", $.String, "AmbiguousCall_WideningConversion2");

    $.Constant({Static:true , Public:false}, "NamedArgumentAlreadyUsed1", $.String, "NamedArgumentAlreadyUsed1");

    $.Constant({Static:true , Public:false}, "NamedArgumentOnParamArray", $.String, "NamedArgumentOnParamArray");

    $.Constant({Static:true , Public:false}, "LinguisticRequirements", $.String, "LinguisticRequirements");

    $.Constant({Static:true , Public:false}, "Argument_ArrayNotInitialized", $.String, "Argument_ArrayNotInitialized");

    $.Constant({Static:true , Public:false}, "RValueBaseForValueType", $.String, "RValueBaseForValueType");

    $.Constant({Static:true , Public:false}, "InvalidCast_FromToArg4", $.String, "InvalidCast_FromToArg4");

    $.Constant({Static:true , Public:false}, "Argument_ArrayDimensionsDontMatch", $.String, "Argument_ArrayDimensionsDontMatch");

    $.Constant({Static:true , Public:false}, "ExpressionNotProcedure", $.String, "ExpressionNotProcedure");

    $.Constant({Static:true , Public:false}, "AmbiguousMatch_NarrowingConversion1", $.String, "AmbiguousMatch_NarrowingConversion1");

    $.Constant({Static:true , Public:false}, "LateboundCallToInheritedComClass", $.String, "LateboundCallToInheritedComClass");

    $.Constant({Static:true , Public:false}, "AmbiguousCall_ExactMatch2", $.String, "AmbiguousCall_ExactMatch2");

    $.Constant({Static:true , Public:false}, "MissingMember_ReadOnlyField2", $.String, "MissingMember_ReadOnlyField2");

    $.Constant({Static:true , Public:false}, "Invalid_VBFixedArray", $.String, "Invalid_VBFixedArray");

    $.Constant({Static:true , Public:false}, "Invalid_VBFixedString", $.String, "Invalid_VBFixedString");

    $.Constant({Static:true , Public:false}, "Argument_UnsupportedArrayDimensions", $.String, "Argument_UnsupportedArrayDimensions");

    $.Constant({Static:true , Public:false}, "Argument_InvalidFixedLengthString", $.String, "Argument_InvalidFixedLengthString");

    $.Constant({Static:true , Public:false}, "Argument_InvalidNamedArgs", $.String, "Argument_InvalidNamedArgs");

    $.Constant({Static:true , Public:false}, "Argument_IllegalNestedType2", $.String, "Argument_IllegalNestedType2");

    $.Constant({Static:true , Public:false}, "Argument_PutObjectOfValueType1", $.String, "Argument_PutObjectOfValueType1");

    $.Constant({Static:true , Public:false}, "SyncLockRequiresReferenceType1", $.String, "SyncLockRequiresReferenceType1");

    $.Constant({Static:true , Public:false}, "FileOpenedNoRead", $.String, "FileOpenedNoRead");

    $.Constant({Static:true , Public:false}, "FileOpenedNoWrite", $.String, "FileOpenedNoWrite");

    $.Constant({Static:true , Public:false}, "NullReference_InstanceReqToAccessMember1", $.String, "NullReference_InstanceReqToAccessMember1");

    $.Constant({Static:true , Public:false}, "Security_LateBoundCallsNotPermitted", $.String, "Security_LateBoundCallsNotPermitted");

    $.Constant({Static:true , Public:false}, "Serialization_MissingCultureInfo", $.String, "Serialization_MissingCultureInfo");

    $.Constant({Static:true , Public:false}, "Serialization_MissingKeys", $.String, "Serialization_MissingKeys");

    $.Constant({Static:true , Public:false}, "Serialization_MissingValues", $.String, "Serialization_MissingValues");

    $.Constant({Static:true , Public:false}, "Serialization_KeyValueDifferentSizes", $.String, "Serialization_KeyValueDifferentSizes");

    $.Constant({Static:true , Public:false}, "MatchArgumentFailure2", $.String, "MatchArgumentFailure2");

    $.Constant({Static:true , Public:false}, "NoGetProperty1", $.String, "NoGetProperty1");

    $.Constant({Static:true , Public:false}, "NoSetProperty1", $.String, "NoSetProperty1");

    $.Constant({Static:true , Public:false}, "MethodAssignment1", $.String, "MethodAssignment1");

    $.Constant({Static:true , Public:false}, "NoViableOverloadCandidates1", $.String, "NoViableOverloadCandidates1");

    $.Constant({Static:true , Public:false}, "NoArgumentCountOverloadCandidates1", $.String, "NoArgumentCountOverloadCandidates1");

    $.Constant({Static:true , Public:false}, "NoTypeArgumentCountOverloadCandidates1", $.String, "NoTypeArgumentCountOverloadCandidates1");

    $.Constant({Static:true , Public:false}, "NoCallableOverloadCandidates2", $.String, "NoCallableOverloadCandidates2");

    $.Constant({Static:true , Public:false}, "NoNonNarrowingOverloadCandidates2", $.String, "NoNonNarrowingOverloadCandidates2");

    $.Constant({Static:true , Public:false}, "NoMostSpecificOverload2", $.String, "NoMostSpecificOverload2");

    $.Constant({Static:true , Public:false}, "AmbiguousCast2", $.String, "AmbiguousCast2");

    $.Constant({Static:true , Public:false}, "NotMostSpecificOverload", $.String, "NotMostSpecificOverload");

    $.Constant({Static:true , Public:false}, "NamedParamNotFound2", $.String, "NamedParamNotFound2");

    $.Constant({Static:true , Public:false}, "NamedParamArrayArgument1", $.String, "NamedParamArrayArgument1");

    $.Constant({Static:true , Public:false}, "NamedArgUsedTwice2", $.String, "NamedArgUsedTwice2");

    $.Constant({Static:true , Public:false}, "OmittedArgument1", $.String, "OmittedArgument1");

    $.Constant({Static:true , Public:false}, "OmittedParamArrayArgument", $.String, "OmittedParamArrayArgument");

    $.Constant({Static:true , Public:false}, "ArgumentMismatch3", $.String, "ArgumentMismatch3");

    $.Constant({Static:true , Public:false}, "ArgumentMismatchAmbiguous3", $.String, "ArgumentMismatchAmbiguous3");

    $.Constant({Static:true , Public:false}, "ArgumentNarrowing3", $.String, "ArgumentNarrowing3");

    $.Constant({Static:true , Public:false}, "ArgumentMismatchCopyBack3", $.String, "ArgumentMismatchCopyBack3");

    $.Constant({Static:true , Public:false}, "ArgumentMismatchAmbiguousCopyBack3", $.String, "ArgumentMismatchAmbiguousCopyBack3");

    $.Constant({Static:true , Public:false}, "ArgumentNarrowingCopyBack3", $.String, "ArgumentNarrowingCopyBack3");

    $.Constant({Static:true , Public:false}, "UnboundTypeParam1", $.String, "UnboundTypeParam1");

    $.Constant({Static:true , Public:false}, "TypeInferenceFails1", $.String, "TypeInferenceFails1");

    $.Constant({Static:true , Public:false}, "FailedTypeArgumentBinding", $.String, "FailedTypeArgumentBinding");

    $.Constant({Static:true , Public:false}, "NoValidOperator_OneOperand", $.String, "NoValidOperator_OneOperand");

    $.Constant({Static:true , Public:false}, "NoValidOperator_TwoOperands", $.String, "NoValidOperator_TwoOperands");

    $.Constant({Static:true , Public:false}, "UnaryOperand2", $.String, "UnaryOperand2");

    $.Constant({Static:true , Public:false}, "BinaryOperands3", $.String, "BinaryOperands3");

    $.Constant({Static:true , Public:false}, "NoValidOperator_StringType1", $.String, "NoValidOperator_StringType1");

    $.Constant({Static:true , Public:false}, "NoValidOperator_NonStringType1", $.String, "NoValidOperator_NonStringType1");

    $.Constant({Static:true , Public:false}, "PropertySetMissingArgument1", $.String, "PropertySetMissingArgument1");

    $.Constant({Static:true , Public:false}, "EmptyPlaceHolderMessage", $.String, "EmptyPlaceHolderMessage");

    $.Constant({Static:true , Public:false}, "WebNotSupportedOnThisSKU", $.String, "WebNotSupportedOnThisSKU");


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.ResID+MyID */ 

(function MyID$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.ResID+MyID", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "Mouse_NoMouseIsPresent", $.String, "Mouse_NoMouseIsPresent");

    $.Constant({Static:true , Public:false}, "Mouse_NoWheelIsPresent", $.String, "Mouse_NoWheelIsPresent");

    $.Constant({Static:true , Public:false}, "IO_SpecialDirectoryNotExist", $.String, "IO_SpecialDirectoryNotExist");

    $.Constant({Static:true , Public:false}, "IO_SpecialDirectory_MyDocuments", $.String, "IO_SpecialDirectory_MyDocuments");

    $.Constant({Static:true , Public:false}, "IO_SpecialDirectory_MyMusic", $.String, "IO_SpecialDirectory_MyMusic");

    $.Constant({Static:true , Public:false}, "IO_SpecialDirectory_MyPictures", $.String, "IO_SpecialDirectory_MyPictures");

    $.Constant({Static:true , Public:false}, "IO_SpecialDirectory_Desktop", $.String, "IO_SpecialDirectory_Desktop");

    $.Constant({Static:true , Public:false}, "IO_SpecialDirectory_Programs", $.String, "IO_SpecialDirectory_Programs");

    $.Constant({Static:true , Public:false}, "IO_SpecialDirectory_ProgramFiles", $.String, "IO_SpecialDirectory_ProgramFiles");

    $.Constant({Static:true , Public:false}, "IO_SpecialDirectory_Temp", $.String, "IO_SpecialDirectory_Temp");

    $.Constant({Static:true , Public:false}, "IO_SpecialDirectory_AllUserAppData", $.String, "IO_SpecialDirectory_AllUserAppData");

    $.Constant({Static:true , Public:false}, "IO_SpecialDirectory_UserAppData", $.String, "IO_SpecialDirectory_UserAppData");

    $.Constant({Static:true , Public:false}, "IO_FileExists_Path", $.String, "IO_FileExists_Path");

    $.Constant({Static:true , Public:false}, "IO_FileNotFound_Path", $.String, "IO_FileNotFound_Path");

    $.Constant({Static:true , Public:false}, "IO_DirectoryExists_Path", $.String, "IO_DirectoryExists_Path");

    $.Constant({Static:true , Public:false}, "IO_DirectoryIsRoot_Path", $.String, "IO_DirectoryIsRoot_Path");

    $.Constant({Static:true , Public:false}, "IO_DirectoryNotFound_Path", $.String, "IO_DirectoryNotFound_Path");

    $.Constant({Static:true , Public:false}, "IO_GetParentPathIsRoot_Path", $.String, "IO_GetParentPathIsRoot_Path");

    $.Constant({Static:true , Public:false}, "IO_ArgumentIsPath_Name_Path", $.String, "IO_ArgumentIsPath_Name_Path");

    $.Constant({Static:true , Public:false}, "IO_CopyMoveRecursive", $.String, "IO_CopyMoveRecursive");

    $.Constant({Static:true , Public:false}, "IO_CyclicOperation", $.String, "IO_CyclicOperation");

    $.Constant({Static:true , Public:false}, "IO_SourceEqualsTargetDirectory", $.String, "IO_SourceEqualsTargetDirectory");

    $.Constant({Static:true , Public:false}, "IO_GetFiles_NullPattern", $.String, "IO_GetFiles_NullPattern");

    $.Constant({Static:true , Public:false}, "IO_DevicePath", $.String, "IO_DevicePath");

    $.Constant({Static:true , Public:false}, "IO_FilePathException", $.String, "IO_FilePathException");

    $.Constant({Static:true , Public:false}, "General_ArgumentNullException", $.String, "General_ArgumentNullException");

    $.Constant({Static:true , Public:false}, "General_ArgumentEmptyOrNothing_Name", $.String, "General_ArgumentEmptyOrNothing_Name");

    $.Constant({Static:true , Public:false}, "General_PropertyNothing", $.String, "General_PropertyNothing");

    $.Constant({Static:true , Public:false}, "ApplicationLog_FreeSpaceError", $.String, "ApplicationLog_FreeSpaceError");

    $.Constant({Static:true , Public:false}, "ApplicationLog_FileExceedsMaximumSize", $.String, "ApplicationLog_FileExceedsMaximumSize");

    $.Constant({Static:true , Public:false}, "ApplicationLog_ReservedSpaceEncroached", $.String, "ApplicationLog_ReservedSpaceEncroached");

    $.Constant({Static:true , Public:false}, "ApplicationLog_NegativeNumber", $.String, "ApplicationLog_NegativeNumber");

    $.Constant({Static:true , Public:false}, "ApplicationLogNumberTooSmall", $.String, "ApplicationLogNumberTooSmall");

    $.Constant({Static:true , Public:false}, "ApplicationLogBaseNameNull", $.String, "ApplicationLogBaseNameNull");

    $.Constant({Static:true , Public:false}, "ApplicationLog_ExhaustedPossibleStreamNames", $.String, "ApplicationLog_ExhaustedPossibleStreamNames");

    $.Constant({Static:true , Public:false}, "Network_InvalidUriString", $.String, "Network_InvalidUriString");

    $.Constant({Static:true , Public:false}, "Network_BadConnectionTimeout", $.String, "Network_BadConnectionTimeout");

    $.Constant({Static:true , Public:false}, "Network_NetworkNotAvailable", $.String, "Network_NetworkNotAvailable");

    $.Constant({Static:true , Public:false}, "Network_UploadAddressNeedsFilename", $.String, "Network_UploadAddressNeedsFilename");

    $.Constant({Static:true , Public:false}, "Network_DownloadNeedsFilename", $.String, "Network_DownloadNeedsFilename");

    $.Constant({Static:true , Public:false}, "ProgressDialogDownloadingTitle", $.String, "ProgressDialogDownloadingTitle");

    $.Constant({Static:true , Public:false}, "ProgressDialogUploadingTitle", $.String, "ProgressDialogUploadingTitle");

    $.Constant({Static:true , Public:false}, "ProgressDialogDownloadingLabel", $.String, "ProgressDialogDownloadingLabel");

    $.Constant({Static:true , Public:false}, "ProgressDialogUploadingLabel", $.String, "ProgressDialogUploadingLabel");

    $.Constant({Static:true , Public:false}, "DiagnosticInfo_Memory", $.String, "DiagnosticInfo_Memory");

    $.Constant({Static:true , Public:false}, "DiagnosticInfo_FullOSName", $.String, "DiagnosticInfo_FullOSName");

    $.Constant({Static:true , Public:false}, "TextFieldParser_StreamNotReadable", $.String, "TextFieldParser_StreamNotReadable");

    $.Constant({Static:true , Public:false}, "TextFieldParser_NumberOfCharsMustBePositive", $.String, "TextFieldParser_NumberOfCharsMustBePositive");

    $.Constant({Static:true , Public:false}, "TextFieldParser_BufferExceededMaxSize", $.String, "TextFieldParser_BufferExceededMaxSize");

    $.Constant({Static:true , Public:false}, "TextFieldParser_MaxLineSizeExceeded", $.String, "TextFieldParser_MaxLineSizeExceeded");

    $.Constant({Static:true , Public:false}, "TextFieldParser_FieldWidthsNothing", $.String, "TextFieldParser_FieldWidthsNothing");

    $.Constant({Static:true , Public:false}, "TextFieldParser_FieldWidthsMustPositive", $.String, "TextFieldParser_FieldWidthsMustPositive");

    $.Constant({Static:true , Public:false}, "TextFieldParser_DelimitersNothing", $.String, "TextFieldParser_DelimitersNothing");

    $.Constant({Static:true , Public:false}, "TextFieldParser_IllegalDelimiter", $.String, "TextFieldParser_IllegalDelimiter");

    $.Constant({Static:true , Public:false}, "TextFieldParser_DelimiterNothing", $.String, "TextFieldParser_DelimiterNothing");

    $.Constant({Static:true , Public:false}, "TextFieldParser_InvalidComment", $.String, "TextFieldParser_InvalidComment");

    $.Constant({Static:true , Public:false}, "TextFieldParser_MalFormedDelimitedLine", $.String, "TextFieldParser_MalFormedDelimitedLine");

    $.Constant({Static:true , Public:false}, "TextFieldParser_MalFormedFixedWidthLine", $.String, "TextFieldParser_MalFormedFixedWidthLine");

    $.Constant({Static:true , Public:false}, "TextFieldParser_MalformedExtraData", $.String, "TextFieldParser_MalformedExtraData");

    $.Constant({Static:true , Public:false}, "TextFieldParser_WhitespaceInToken", $.String, "TextFieldParser_WhitespaceInToken");

    $.Constant({Static:true , Public:false}, "TextFieldParser_EndCharsInDelimiter", $.String, "TextFieldParser_EndCharsInDelimiter");

    $.Constant({Static:true , Public:false}, "AppModel_CantGetMemoryMappedFile", $.String, "AppModel_CantGetMemoryMappedFile");

    $.Constant({Static:true , Public:false}, "AppModel_NoStartupForm", $.String, "AppModel_NoStartupForm");

    $.Constant({Static:true , Public:false}, "AppModel_SingleInstanceCantConnect", $.String, "AppModel_SingleInstanceCantConnect");

    $.Constant({Static:true , Public:false}, "AppModel_SplashAndMainFormTheSame", $.String, "AppModel_SplashAndMainFormTheSame");

    $.Constant({Static:true , Public:false}, "EnvVarNotFound_Name", $.String, "EnvVarNotFound_Name");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Microsoft.VisualBasic.CompilerServices.IVbHost */ 

JSIL.MakeInterface(
  "Microsoft.VisualBasic.CompilerServices.IVbHost", true, [], function ($) {
    $.Method({}, "GetParentWindow", JSIL.MethodSignature.Return($asm2C.TypeRef("System.Windows.Forms.IWin32Window")));
    $.Method({}, "GetWindowTitle", JSIL.MethodSignature.Return($.String));
  }, [])
  .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

/* class Microsoft.VisualBasic.CompilerServices.HostServices */ 

(function HostServices$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.HostServices", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_VBHost", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.IVbHost"))
    );

    $.ExternalMethod({Static:true , Public:true }, "set_VBHost", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.IVbHost"))
    );

    $.Field({Static:true , Public:false}, "m_host", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.IVbHost"));

    $.Property({Static:true , Public:true }, "VBHost", $asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.IVbHost"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute */ 

(function StandardModuleAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.OptionTextAttribute */ 

(function OptionTextAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.VisualBasic.CompilerServices.OptionTextAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute */ 

(function OptionCompareAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Parameter]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute */ 

(function DesignerGeneratedAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class Microsoft.VisualBasic.CompilerServices.Versioned */ 

(function Versioned$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices.Versioned", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CallByName", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.CallType"), $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(3, "Arguments", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "IsNumeric", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "SystemTypeName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeName", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "VbTypeName", 
      new JSIL.MethodSignature($.String, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.CompilerServices._Version */ 

(function _Version$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.CompilerServices._Version", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:true }, "Major", $.Int32, 14);

    $.Constant({Static:true , Public:true }, "Minor", $.Int32, 0);

    $.Constant({Static:true , Public:true }, "Build", $.Int32, 2046);

    $.Constant({Static:true , Public:true }, "Revision", $.Int32, 0);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.ForEachEnum */ 

(function ForEachEnum$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.ForEachEnum", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Collection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Adjust", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"), $asm05.TypeRef("Microsoft.VisualBasic.ForEachEnum+AdjustIndexType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustOnListCleared", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "mDisposed", $.Boolean);

    $.Field({Static:false, Public:false}, "mCollectionObject", $asm05.TypeRef("Microsoft.VisualBasic.Collection"));

    $.Field({Static:false, Public:false}, "mCurrent", $asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"));

    $.Field({Static:false, Public:false}, "mNext", $asm05.TypeRef("Microsoft.VisualBasic.Collection+Node"));

    $.Field({Static:false, Public:false}, "mAtBeginning", $.Boolean);

    $.Field({Static:false, Public:false}, "WeakRef", $asm07.TypeRef("System.WeakReference"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator"), 
      /* 1 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* enum Microsoft.VisualBasic.ForEachEnum+AdjustIndexType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.ForEachEnum+AdjustIndexType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Insert: 0, 
    Remove: 1, 
  }
);

JSIL.DeclareNamespace("Microsoft.VisualBasic.Logging");
/* class Microsoft.VisualBasic.Logging.Log */ 

(function Log$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Logging.Log", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CloseOnProcessExit", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultFileLogWriter", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Logging.FileLogTraceListener"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TraceSource", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Diagnostics.TraceSource"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeIDHash", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeWithDefaultsSinceNoConfigExists", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TraceEventTypeToId", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEntry", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEntry", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEntry", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0A.TypeRef("System.Diagnostics.TraceEventType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteException", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteException", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Exception"), $asm0A.TypeRef("System.Diagnostics.TraceEventType"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteException", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Exception"), $asm0A.TypeRef("System.Diagnostics.TraceEventType"), 
          $.String, $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "m_TraceSource", $asm05.TypeRef("Microsoft.VisualBasic.Logging.Log+DefaultTraceSource"));

    $.Field({Static:true , Public:false}, "m_IdHash", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32]));

    $.Constant({Static:true , Public:false}, "WINAPP_SOURCE_NAME", $.String, "DefaultSource");

    $.Constant({Static:true , Public:false}, "DEFAULT_FILE_LOG_TRACE_LISTENER_NAME", $.String, "FileLog");

    $.Property({Static:false, Public:true }, "TraceSource", $asm0A.TypeRef("System.Diagnostics.TraceSource"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:false, Public:true }, "DefaultFileLogWriter", $asm05.TypeRef("Microsoft.VisualBasic.Logging.FileLogTraceListener"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Logging.Log+DefaultTraceSource */ 

(function DefaultTraceSource$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Diagnostics.TraceSource"), 
      Name: "Microsoft.VisualBasic.Logging.Log+DefaultTraceSource", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasBeenConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.Field({Static:false, Public:false}, "m_HasBeenInitializedFromConfigFile", $.Boolean);

    $.Field({Static:false, Public:false}, "listenerAttributes", $asm0A.TypeRef("System.Collections.Specialized.StringDictionary"));

    $.Property({Static:false, Public:true }, "HasBeenConfigured", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.VisualBasic.Logging.AspLog */ 

(function AspLog$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Microsoft.VisualBasic.Logging.Log"), 
      Name: "Microsoft.VisualBasic.Logging.AspLog", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeWithDefaultsSinceNoConfigExists", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.VisualBasic.Logging.LogFileLocation */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.Logging.LogFileLocation", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    TempDirectory: 0, 
    LocalUserApplicationDirectory: 1, 
    CommonApplicationDirectory: 2, 
    ExecutableDirectory: 3, 
    Custom: 4, 
  }
);

/* enum Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Daily: 1, 
    Weekly: 2, 
  }
);

/* enum Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    ThrowException: 0, 
    DiscardMessages: 1, 
  }
);

/* class Microsoft.VisualBasic.Logging.FileLogTraceListener */ 

(function FileLogTraceListener$Members () {
  var $, $thisType;
























































  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Diagnostics.TraceListener"), 
      Name: "Microsoft.VisualBasic.Logging.FileLogTraceListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseCurrentStream", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DayChanged", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandWritePermission", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureStreamIsOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Append", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AutoFlush", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CustomLocation", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Delimiter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DiskSpaceExhaustedBehavior", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FullLogFileName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_HostName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeHostName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ListenerStream", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Logging.FileLogTraceListener+ReferencedStream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Logging.LogFileLocation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogFileCreationSchedule", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LogFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxFileSize", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReserveDiskSpace", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFileEncoding", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Text.Encoding"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFirstDayOfWeek", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFreeDiskSpace", 
      JSIL.MethodSignature.Return($.Int64)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetStream", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.Logging.FileLogTraceListener+ReferencedStream"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleDateChange", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResourcesAvailable", 
      new JSIL.MethodSignature($.Boolean, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Append", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_AutoFlush", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_BaseFileName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CustomLocation", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Delimiter", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DiskSpaceExhaustedBehavior", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IncludeHostName", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Logging.LogFileLocation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LogFileCreationSchedule", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxFileSize", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ReserveDiskSpace", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "StackToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Stack")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(4, "data", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(5, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "ValidateDiskSpaceExhaustedOptionEnumValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateLogFileCreationScheduleOptionEnumValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateLogFileLocationEnumValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("Microsoft.VisualBasic.Logging.LogFileLocation"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WeekChanged", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "m_Location", $asm05.TypeRef("Microsoft.VisualBasic.Logging.LogFileLocation"));

    $.Field({Static:false, Public:false}, "m_AutoFlush", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Append", $.Boolean);

    $.Field({Static:false, Public:false}, "m_IncludeHostName", $.Boolean);

    $.Field({Static:false, Public:false}, "m_DiskSpaceExhaustedBehavior", $asm05.TypeRef("Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption"));

    $.Field({Static:false, Public:false}, "m_BaseFileName", $.String);

    $.Field({Static:false, Public:false}, "m_LogFileDateStamp", $asm05.TypeRef("Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption"));

    $.Field({Static:false, Public:false}, "m_MaxFileSize", $.Int64);

    $.Field({Static:false, Public:false}, "m_ReserveDiskSpace", $.Int64);

    $.Field({Static:false, Public:false}, "m_Delimiter", $.String);

    $.Field({Static:false, Public:false}, "m_Encoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "m_FullFileName", $.String);

    $.Field({Static:false, Public:false}, "m_CustomLocation", $.String);

    $.Field({Static:false, Public:false}, "m_Stream", $asm05.TypeRef("Microsoft.VisualBasic.Logging.FileLogTraceListener+ReferencedStream"));

    $.Field({Static:false, Public:false}, "m_Day", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_Days", $.Int32);

    $.Field({Static:false, Public:false}, "m_FirstDayOfWeek", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_HostName", $.String);

    $.Field({Static:false, Public:false}, "m_PropertiesSet", $asm07.TypeRef("System.Collections.BitArray"));

    $.Field({Static:true , Public:false}, "m_Streams", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm05.TypeRef("Microsoft.VisualBasic.Logging.FileLogTraceListener+ReferencedStream")]));

    $.Field({Static:false, Public:false}, "m_SupportedAttributes", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Constant({Static:true , Public:false}, "PROPERTY_COUNT", $.Int32, 12);

    $.Constant({Static:true , Public:false}, "APPEND_INDEX", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "AUTOFLUSH_INDEX", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "BASEFILENAME_INDEX", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "CUSTOMLOCATION_INDEX", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "DELIMITER_INDEX", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "DISKSPACEEXHAUSTEDBEHAVIOR_INDEX", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "ENCODING_INDEX", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "INCLUDEHOSTNAME_INDEX", $.Int32, 7);

    $.Constant({Static:true , Public:false}, "LOCATION_INDEX", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "LOGFILECREATIONSCHEDULE_INDEX", $.Int32, 9);

    $.Constant({Static:true , Public:false}, "MAXFILESIZE_INDEX", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "RESERVEDISKSPACE_INDEX", $.Int32, 11);

    $.Constant({Static:true , Public:false}, "DATE_FORMAT", $.String, "yyyy-MM-dd");

    $.Constant({Static:true , Public:false}, "FILE_EXTENSION", $.String, ".log");

    $.Constant({Static:true , Public:false}, "MAX_OPEN_ATTEMPTS", $.Int32, 2147483647);

    $.Constant({Static:true , Public:false}, "DEFAULT_NAME", $.String, "FileLogTraceListener");

    $.Constant({Static:true , Public:false}, "MIN_FILE_SIZE", $.Int32, 1000);

    $.Constant({Static:true , Public:false}, "KEY_APPEND", $.String, "append");

    $.Constant({Static:true , Public:false}, "KEY_APPEND_PASCAL", $.String, "Append");

    $.Constant({Static:true , Public:false}, "KEY_AUTOFLUSH", $.String, "autoflush");

    $.Constant({Static:true , Public:false}, "KEY_AUTOFLUSH_PASCAL", $.String, "AutoFlush");

    $.Constant({Static:true , Public:false}, "KEY_AUTOFLUSH_CAMEL", $.String, "autoFlush");

    $.Constant({Static:true , Public:false}, "KEY_BASEFILENAME", $.String, "basefilename");

    $.Constant({Static:true , Public:false}, "KEY_BASEFILENAME_PASCAL", $.String, "BaseFilename");

    $.Constant({Static:true , Public:false}, "KEY_BASEFILENAME_CAMEL", $.String, "baseFilename");

    $.Constant({Static:true , Public:false}, "KEY_BASEFILENAME_PASCAL_ALT", $.String, "BaseFileName");

    $.Constant({Static:true , Public:false}, "KEY_BASEFILENAME_CAMEL_ALT", $.String, "baseFileName");

    $.Constant({Static:true , Public:false}, "KEY_CUSTOMLOCATION", $.String, "customlocation");

    $.Constant({Static:true , Public:false}, "KEY_CUSTOMLOCATION_PASCAL", $.String, "CustomLocation");

    $.Constant({Static:true , Public:false}, "KEY_CUSTOMLOCATION_CAMEL", $.String, "customLocation");

    $.Constant({Static:true , Public:false}, "KEY_DELIMITER", $.String, "delimiter");

    $.Constant({Static:true , Public:false}, "KEY_DELIMITER_PASCAL", $.String, "Delimiter");

    $.Constant({Static:true , Public:false}, "KEY_DISKSPACEEXHAUSTEDBEHAVIOR", $.String, "diskspaceexhaustedbehavior");

    $.Constant({Static:true , Public:false}, "KEY_DISKSPACEEXHAUSTEDBEHAVIOR_PASCAL", $.String, "DiskSpaceExhaustedBehavior");

    $.Constant({Static:true , Public:false}, "KEY_DISKSPACEEXHAUSTEDBEHAVIOR_CAMEL", $.String, "diskSpaceExhaustedBehavior");

    $.Constant({Static:true , Public:false}, "KEY_ENCODING", $.String, "encoding");

    $.Constant({Static:true , Public:false}, "KEY_ENCODING_PASCAL", $.String, "Encoding");

    $.Constant({Static:true , Public:false}, "KEY_INCLUDEHOSTNAME", $.String, "includehostname");

    $.Constant({Static:true , Public:false}, "KEY_INCLUDEHOSTNAME_PASCAL", $.String, "IncludeHostName");

    $.Constant({Static:true , Public:false}, "KEY_INCLUDEHOSTNAME_CAMEL", $.String, "includeHostName");

    $.Constant({Static:true , Public:false}, "KEY_LOCATION", $.String, "location");

    $.Constant({Static:true , Public:false}, "KEY_LOCATION_PASCAL", $.String, "Location");

    $.Constant({Static:true , Public:false}, "KEY_LOGFILECREATIONSCHEDULE", $.String, "logfilecreationschedule");

    $.Constant({Static:true , Public:false}, "KEY_LOGFILECREATIONSCHEDULE_PASCAL", $.String, "LogFileCreationSchedule");

    $.Constant({Static:true , Public:false}, "KEY_LOGFILECREATIONSCHEDULE_CAMEL", $.String, "logFileCreationSchedule");

    $.Constant({Static:true , Public:false}, "KEY_MAXFILESIZE", $.String, "maxfilesize");

    $.Constant({Static:true , Public:false}, "KEY_MAXFILESIZE_PASCAL", $.String, "MaxFileSize");

    $.Constant({Static:true , Public:false}, "KEY_MAXFILESIZE_CAMEL", $.String, "maxFileSize");

    $.Constant({Static:true , Public:false}, "KEY_RESERVEDISKSPACE", $.String, "reservediskspace");

    $.Constant({Static:true , Public:false}, "KEY_RESERVEDISKSPACE_PASCAL", $.String, "ReserveDiskSpace");

    $.Constant({Static:true , Public:false}, "KEY_RESERVEDISKSPACE_CAMEL", $.String, "reserveDiskSpace");

    $.Constant({Static:true , Public:false}, "STACK_DELIMITER", $.String, ", ");

    $.Property({Static:false, Public:true }, "Location", $asm05.TypeRef("Microsoft.VisualBasic.Logging.LogFileLocation"));

    $.Property({Static:false, Public:true }, "AutoFlush", $.Boolean);

    $.Property({Static:false, Public:true }, "IncludeHostName", $.Boolean);

    $.Property({Static:false, Public:true }, "Append", $.Boolean);

    $.Property({Static:false, Public:true }, "DiskSpaceExhaustedBehavior", $asm05.TypeRef("Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption"));

    $.Property({Static:false, Public:true }, "BaseFileName", $.String);

    $.Property({Static:false, Public:true }, "FullLogFileName", $.String);

    $.Property({Static:false, Public:true }, "LogFileCreationSchedule", $asm05.TypeRef("Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption"));

    $.Property({Static:false, Public:true }, "MaxFileSize", $.Int64);

    $.Property({Static:false, Public:true }, "ReserveDiskSpace", $.Int64);

    $.Property({Static:false, Public:true }, "Delimiter", $.String);

    $.Property({Static:false, Public:true }, "Encoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true }, "CustomLocation", $.String);

    $.Property({Static:false, Public:false}, "LogFileName", $.String);

    $.Property({Static:false, Public:false}, "ListenerStream", $asm05.TypeRef("Microsoft.VisualBasic.Logging.FileLogTraceListener+ReferencedStream"));

    $.Property({Static:false, Public:false}, "HostName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.VisualBasic.Logging.FileLogTraceListener+ReferencedStream */ 

(function ReferencedStream$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.Logging.FileLogTraceListener+ReferencedStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.StreamWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReference", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseStream", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileSize", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInUse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "m_Stream", $asm07.TypeRef("System.IO.StreamWriter"));

    $.Field({Static:false, Public:false}, "m_ReferenceCount", $.Int32);

    $.Field({Static:false, Public:false}, "m_SyncObject", $.Object);

    $.Field({Static:false, Public:false}, "m_Disposed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsInUse", $.Boolean);

    $.Property({Static:false, Public:false}, "FileSize", $.Int64);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.VisualBasic.MyServices");
/* class Microsoft.VisualBasic.MyServices.ClipboardProxy */ 

(function ClipboardProxy$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.MyServices.ClipboardProxy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsAudio", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsData", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsFileDropList", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsImage", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsText", 
      new JSIL.MethodSignature($.Boolean, [$asm2C.TypeRef("System.Windows.Forms.TextDataFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAudioStream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDataObject", 
      JSIL.MethodSignature.Return($asm2C.TypeRef("System.Windows.Forms.IDataObject"))
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, "GetFileDropList", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetImage", 
      JSIL.MethodSignature.Return($asm17.TypeRef("System.Drawing.Image"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetText", 
      new JSIL.MethodSignature($.String, [$asm2C.TypeRef("System.Windows.Forms.TextDataFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAudio", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAudio", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetData", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetDataObject", 
      JSIL.MethodSignature.Action($asm2C.TypeRef("System.Windows.Forms.DataObject"))
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.ExternalMethod({Static:false, Public:true }, "SetFileDropList", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetImage", 
      JSIL.MethodSignature.Action($asm17.TypeRef("System.Drawing.Image"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetText", 
      new JSIL.MethodSignature(null, [$.String, $asm2C.TypeRef("System.Windows.Forms.TextDataFormat")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.MyServices.FileSystemProxy */ 

(function FileSystemProxy$Members () {
  var $, $thisType;



























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.MyServices.FileSystemProxy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CombinePath", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyDirectory", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyFile", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateDirectory", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteDirectory", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.DeleteDirectoryOption")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.RecycleOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.RecycleOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteFile", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteFile", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.RecycleOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteFile", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.RecycleOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "DirectoryExists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FileExists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindInFiles", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [
          $.String, $.String, 
          $.Boolean, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.SearchOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindInFiles", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [
          $.String, $.String, 
          $.Boolean, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.SearchOption"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(4, "fileWildcards", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentDirectory", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Drives", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.IO.DriveInfo")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SpecialDirectories", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectories", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDirectories", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.SearchOption"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(2, "wildcards", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "GetDirectoryInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.DirectoryInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDriveInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.DriveInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFileInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.FileInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFiles", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFiles", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [
          $.String, $asm05.TypeRef("Microsoft.VisualBasic.FileIO.SearchOption"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(2, "wildcards", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "GetName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParentPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTempFileName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveDirectory", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveDirectory", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveFile", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveFile", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UIOption"), $asm05.TypeRef("Microsoft.VisualBasic.FileIO.UICancelOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenTextFieldParser", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.FileIO.TextFieldParser"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenTextFieldParser", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.FileIO.TextFieldParser"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(1, "delimiters", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "OpenTextFieldParser", 
      new JSIL.MethodSignature($asm05.TypeRef("Microsoft.VisualBasic.FileIO.TextFieldParser"), [$.String, $jsilcore.TypeRef("System.Array", [$.Int32])])
    )
      .Parameter(1, "fieldWidths", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "OpenTextFileReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.StreamReader"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenTextFileReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.StreamReader"), [$.String, $asm07.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenTextFileWriter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.StreamWriter"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenTextFileWriter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.StreamWriter"), [
          $.String, $.Boolean, 
          $asm07.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadAllBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadAllText", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadAllText", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RenameDirectory", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "RenameFile", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CurrentDirectory", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteAllBytes", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteAllText", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteAllText", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean, $asm07.TypeRef("System.Text.Encoding")
        ])
    );

    $.Field({Static:false, Public:false}, "m_SpecialDirectoriesProxy", $asm05.TypeRef("Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy"));

    $.Property({Static:false, Public:true }, "Drives", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.IO.DriveInfo")]));

    $.Property({Static:false, Public:true }, "SpecialDirectories", $asm05.TypeRef("Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy"));

    $.Property({Static:false, Public:true }, "CurrentDirectory", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.MyServices.RegistryProxy */ 

(function RegistryProxy$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.MyServices.RegistryProxy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClassesRoot", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.RegistryKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentConfig", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.RegistryKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentUser", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.RegistryKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DynData", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.RegistryKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalMachine", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.RegistryKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PerformanceData", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.RegistryKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Users", 
      JSIL.MethodSignature.Return($asm07.TypeRef("Microsoft.Win32.RegistryKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $asm07.TypeRef("Microsoft.Win32.RegistryValueKind")
        ])
    );

    $.Property({Static:false, Public:true }, "CurrentUser", $asm07.TypeRef("Microsoft.Win32.RegistryKey"));

    $.Property({Static:false, Public:true }, "LocalMachine", $asm07.TypeRef("Microsoft.Win32.RegistryKey"));

    $.Property({Static:false, Public:true }, "ClassesRoot", $asm07.TypeRef("Microsoft.Win32.RegistryKey"));

    $.Property({Static:false, Public:true }, "Users", $asm07.TypeRef("Microsoft.Win32.RegistryKey"));

    $.Property({Static:false, Public:true }, "PerformanceData", $asm07.TypeRef("Microsoft.Win32.RegistryKey"));

    $.Property({Static:false, Public:true }, "CurrentConfig", $asm07.TypeRef("Microsoft.Win32.RegistryKey"));

    $.Property({Static:false, Public:true }, "DynData", $asm07.TypeRef("Microsoft.Win32.RegistryKey"))
      .Attribute($asm07.TypeRef("System.ObsoleteAttribute"), function () { return ["The DynData registry key works only on Win9x, which is not supported by this version of the .NET Framework.  Use the PerformanceData registry key instead.  This property will be removed from a future version of the framework."]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy */ 

(function SpecialDirectoriesProxy$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllUsersApplicationData", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentUserApplicationData", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Desktop", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MyDocuments", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MyMusic", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MyPictures", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProgramFiles", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Programs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Temp", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true }, "MyDocuments", $.String);

    $.Property({Static:false, Public:true }, "MyMusic", $.String);

    $.Property({Static:false, Public:true }, "MyPictures", $.String);

    $.Property({Static:false, Public:true }, "Desktop", $.String);

    $.Property({Static:false, Public:true }, "Programs", $.String);

    $.Property({Static:false, Public:true }, "ProgramFiles", $.String);

    $.Property({Static:false, Public:true }, "Temp", $.String);

    $.Property({Static:false, Public:true }, "CurrentUserApplicationData", $.String);

    $.Property({Static:false, Public:true }, "AllUsersApplicationData", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

JSIL.DeclareNamespace("Microsoft.VisualBasic.MyServices.Internal");
/* class Microsoft.VisualBasic.MyServices.Internal.SkuSafeHttpContext */ 

(function SkuSafeHttpContext$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.MyServices.Internal.SkuSafeHttpContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "InitContext", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Reflection.PropertyInfo"))
    );

    $.Field({Static:true , Public:false}, "m_HttpContextCurrent", $asm07.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:true }, "Current", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.MyServices.Internal.ContextValue`1 */ 

(function ContextValue$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.MyServices.Internal.ContextValue`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_ContextKey", $.String);

    $.Property({Static:false, Public:true }, "Value", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class Microsoft.VisualBasic.MyServices.Internal.WebClientCopy */ 

(function WebClientCopy$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm05.Microsoft.VisualBasic.MyServices.Internal.ProgressDialog)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm05.Microsoft.VisualBasic.MyServices.Internal.ProgressDialog_UserHitCancelEventHandler)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.System.Net.WebClient)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.System.ComponentModel.AsyncCompletedEventHandler)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.System.Net.DownloadProgressChangedEventHandler)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.System.Net.UploadFileCompletedEventHandler)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.System.Net.UploadProgressChangedEventHandler)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Void)) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Object, $asm0A.System.ComponentModel.AsyncCompletedEventArgs]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Object, $asm0A.System.Net.DownloadProgressChangedEventArgs]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Object, $asm0A.System.Net.UploadFileCompletedEventArgs]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Object, $asm0A.System.Net.UploadProgressChangedEventArgs]))) ();
  };





  function WebClientCopy_get_m_ProgressDialog () {
    return this._m_ProgressDialog;
  }; 

  function WebClientCopy_get_m_WebClient () {
    return this._m_WebClient;
  }; 







  function WebClientCopy_set_m_ProgressDialog (value) {
    var obj = $T01().New(this, null, new JSIL.MethodPointerInfo($thisType, "m_ProgressDialog_UserCancelledEvent", $S00(), false, false));
    var m_ProgressDialog = this._m_ProgressDialog;
    if (m_ProgressDialog !== null) {
      m_ProgressDialog.remove_UserHitCancel(obj);
    }
    this._m_ProgressDialog = value;
    m_ProgressDialog = this._m_ProgressDialog;
    if (m_ProgressDialog !== null) {
      m_ProgressDialog.add_UserHitCancel(obj);
    }
  }; 

  function WebClientCopy_set_m_WebClient (value) {
    var value2 = $T03().New(this, null, new JSIL.MethodPointerInfo($thisType, "m_WebClient_DownloadFileCompleted", $S01(), false, false));
    var value3 = $T04().New(this, null, new JSIL.MethodPointerInfo($thisType, "m_WebClient_DownloadProgressChanged", $S02(), false, false));
    var value4 = $T05().New(this, null, new JSIL.MethodPointerInfo($thisType, "m_WebClient_UploadFileCompleted", $S03(), false, false));
    var value5 = $T06().New(this, null, new JSIL.MethodPointerInfo($thisType, "m_WebClient_UploadProgressChanged", $S04(), false, false));
    var m_WebClient = this._m_WebClient;
    if (m_WebClient !== null) {
      m_WebClient.remove_DownloadFileCompleted(value2);
      m_WebClient.remove_DownloadProgressChanged(value3);
      m_WebClient.remove_UploadFileCompleted(value4);
      m_WebClient.remove_UploadProgressChanged(value5);
    }
    this._m_WebClient = value;
    m_WebClient = this._m_WebClient;
    if (m_WebClient !== null) {
      m_WebClient.add_DownloadFileCompleted(value2);
      m_WebClient.add_DownloadProgressChanged(value3);
      m_WebClient.add_UploadFileCompleted(value4);
      m_WebClient.add_UploadProgressChanged(value5);
    }
  }; 


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Microsoft.VisualBasic.MyServices.Internal.WebClientCopy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.WebClient"), $asm05.TypeRef("Microsoft.VisualBasic.MyServices.Internal.ProgressDialog")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseProgressDialog", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "DownloadFile", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Uri"), $.String])
    );

    $.Method({Static:false, Public:false, Virtual:true }, "get_m_ProgressDialog", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.MyServices.Internal.ProgressDialog")), 
      WebClientCopy_get_m_ProgressDialog
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "get_m_WebClient", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.WebClient")), 
      WebClientCopy_get_m_WebClient
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "InvokeIncrement", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "m_ProgressDialog_UserCancelledEvent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "m_WebClient_DownloadFileCompleted", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.ComponentModel.AsyncCompletedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "m_WebClient_DownloadProgressChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.Net.DownloadProgressChangedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "m_WebClient_UploadFileCompleted", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.Net.UploadFileCompletedEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "m_WebClient_UploadProgressChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm0A.TypeRef("System.Net.UploadProgressChangedEventArgs")])
    );

    $.Method({Static:false, Public:false, Virtual:true }, "set_m_ProgressDialog", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.MyServices.Internal.ProgressDialog")), 
      WebClientCopy_set_m_ProgressDialog
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "set_m_WebClient", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.WebClient")), 
      WebClientCopy_set_m_WebClient
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "UploadFile", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("System.Uri")])
    );

    $.Field({Static:false, Public:false}, "_m_WebClient", $asm0A.TypeRef("System.Net.WebClient"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.AccessedThroughPropertyAttribute"), function () { return ["m_WebClient"]; });

    $.Field({Static:false, Public:false}, "_m_ProgressDialog", $asm05.TypeRef("Microsoft.VisualBasic.MyServices.Internal.ProgressDialog"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.AccessedThroughPropertyAttribute"), function () { return ["m_ProgressDialog"]; });

    $.Field({Static:false, Public:false}, "m_ExceptionEncounteredDuringFileTransfer", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "m_Percentage", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "m_WebClient", $asm0A.TypeRef("System.Net.WebClient"));

    $.Property({Static:false, Public:false, Virtual:true }, "m_ProgressDialog", $asm05.TypeRef("Microsoft.VisualBasic.MyServices.Internal.ProgressDialog"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.VisualBasic.MyServices.Internal.WebClientCopy+DoIncrement */ 

JSIL.MakeDelegate("Microsoft.VisualBasic.MyServices.Internal.WebClientCopy+DoIncrement", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.Int32")));

/* class Microsoft.VisualBasic.MyServices.Internal.ProgressDialog */ 

(function ProgressDialog$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm2C.System.Windows.Forms.Button)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.EventHandler)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm2C.System.Windows.Forms.Control)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm2C.System.Windows.Forms.Label)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm2C.System.Windows.Forms.ProgressBar)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.System.Object, $asm07.System.EventArgs]))) ();
  };







  function ProgressDialog_get_ButtonCloseDialog () {
    return this._ButtonCloseDialog;
  }; 



  function ProgressDialog_get_LabelInfo () {
    return this._LabelInfo;
  }; 


  function ProgressDialog_get_ProgressBarWork () {
    return this._ProgressBarWork;
  }; 









  function ProgressDialog_set_ButtonCloseDialog (value) {
    var value2 = $T01().New(this, null, new JSIL.MethodPointerInfo($thisType, "ButtonCloseDialog_Click", $S00(), false, false));
    var buttonCloseDialog = this._ButtonCloseDialog;
    if (buttonCloseDialog !== null) {
      $T02().prototype.remove_Click.call(buttonCloseDialog, value2);
    }
    this._ButtonCloseDialog = value;
    buttonCloseDialog = this._ButtonCloseDialog;
    if (buttonCloseDialog !== null) {
      $T02().prototype.add_Click.call(buttonCloseDialog, value2);
    }
  }; 

  function ProgressDialog_set_LabelInfo (value) {
    this._LabelInfo = value;
  }; 


  function ProgressDialog_set_ProgressBarWork (value) {
    this._ProgressBarWork = value;
  }; 


  JSIL.MakeType({
      BaseType: $asm2C.TypeRef("System.Windows.Forms.Form"), 
      Name: "Microsoft.VisualBasic.MyServices.Internal.ProgressDialog", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "add_UserHitCancel", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.MyServices.Internal.ProgressDialog+UserHitCancelEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ButtonCloseDialog_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CloseDialog", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:false, Virtual:true }, "get_ButtonCloseDialog", 
      JSIL.MethodSignature.Return($asm2C.TypeRef("System.Windows.Forms.Button")), 
      ProgressDialog_get_ButtonCloseDialog
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CreateParams", 
      JSIL.MethodSignature.Return($asm2C.TypeRef("System.Windows.Forms.CreateParams"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_FormClosableSemaphore", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.ManualResetEvent"))
    );

    $.Method({Static:false, Public:false, Virtual:true }, "get_LabelInfo", 
      JSIL.MethodSignature.Return($asm2C.TypeRef("System.Windows.Forms.Label")), 
      ProgressDialog_get_LabelInfo
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_LabelText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Method({Static:false, Public:false, Virtual:true }, "get_ProgressBarWork", 
      JSIL.MethodSignature.Return($asm2C.TypeRef("System.Windows.Forms.ProgressBar")), 
      ProgressDialog_get_ProgressBarWork
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UserCanceledTheDialog", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Increment", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "IndicateClosing", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeComponent", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ProgressDialog_Activated", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProgressDialog_FormClosing", 
      new JSIL.MethodSignature(null, [$.Object, $asm2C.TypeRef("System.Windows.Forms.FormClosingEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProgressDialog_Resize", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.EventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_UserHitCancel", 
      JSIL.MethodSignature.Action($asm05.TypeRef("Microsoft.VisualBasic.MyServices.Internal.ProgressDialog+UserHitCancelEventHandler"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "set_ButtonCloseDialog", 
      JSIL.MethodSignature.Action($asm2C.TypeRef("System.Windows.Forms.Button")), 
      ProgressDialog_set_ButtonCloseDialog
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "set_LabelInfo", 
      JSIL.MethodSignature.Action($asm2C.TypeRef("System.Windows.Forms.Label")), 
      ProgressDialog_set_LabelInfo
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_LabelText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Method({Static:false, Public:false, Virtual:true }, "set_ProgressBarWork", 
      JSIL.MethodSignature.Action($asm2C.TypeRef("System.Windows.Forms.ProgressBar")), 
      ProgressDialog_set_ProgressBarWork
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ShowProgressDialog", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "UserHitCancelEvent", $asm05.TypeRef("Microsoft.VisualBasic.MyServices.Internal.ProgressDialog+UserHitCancelEventHandler"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "m_Closing", $.Boolean);

    $.Field({Static:false, Public:false}, "m_Canceled", $.Boolean);

    $.Field({Static:false, Public:false}, "m_FormClosableSemaphore", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "m_CloseDialogInvoked", $.Boolean);

    $.Constant({Static:true , Public:false}, "WS_THICKFRAME", $.Int32, 262144);

    $.Constant({Static:true , Public:false}, "BORDER_SIZE", $.Int32, 20);

    $.Field({Static:false, Public:false}, "_LabelInfo", $asm2C.TypeRef("System.Windows.Forms.Label"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.AccessedThroughPropertyAttribute"), function () { return ["LabelInfo"]; });

    $.Field({Static:false, Public:false}, "_ProgressBarWork", $asm2C.TypeRef("System.Windows.Forms.ProgressBar"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.AccessedThroughPropertyAttribute"), function () { return ["ProgressBarWork"]; });

    $.Field({Static:false, Public:false}, "_ButtonCloseDialog", $asm2C.TypeRef("System.Windows.Forms.Button"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.AccessedThroughPropertyAttribute"), function () { return ["ButtonCloseDialog"]; });

    $.Field({Static:false, Public:false}, "components", $asm0A.TypeRef("System.ComponentModel.IContainer"));

    $.Property({Static:false, Public:true }, "LabelText", $.String);

    $.Property({Static:false, Public:true }, "FormClosableSemaphore", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Property({Static:false, Public:true }, "UserCanceledTheDialog", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "CreateParams", $asm2C.TypeRef("System.Windows.Forms.CreateParams"));

    $.Property({Static:false, Public:false, Virtual:true }, "LabelInfo", $asm2C.TypeRef("System.Windows.Forms.Label"));

    $.Property({Static:false, Public:false, Virtual:true }, "ProgressBarWork", $asm2C.TypeRef("System.Windows.Forms.ProgressBar"));

    $.Property({Static:false, Public:false, Virtual:true }, "ButtonCloseDialog", $asm2C.TypeRef("System.Windows.Forms.Button"));

    $.Event({Static:false, Public:true }, "UserHitCancel", $asm05.TypeRef("Microsoft.VisualBasic.MyServices.Internal.ProgressDialog+UserHitCancelEventHandler"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.VisualBasic.MyServices.Internal.ProgressDialog+UserHitCancelEventHandler */ 

JSIL.MakeDelegate("Microsoft.VisualBasic.MyServices.Internal.ProgressDialog+UserHitCancelEventHandler", false, [], 
  JSIL.MethodSignature.Void);

/* class CacheDict`2 */ 

(function CacheDict$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "CacheDict`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TKey"), $.GenericParameter("TValue")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey"), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("TValue")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dict", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $asm05.TypeRef("CacheDict`2+KeyInfo", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_list", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "_maxSize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct CacheDict`2+KeyInfo */ 

(function KeyInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "CacheDict`2+KeyInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TValue"), $asm0A.TypeRef("System.Collections.Generic.LinkedListNode`1", [$.GenericParameter("TKey")])])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Value", $.GenericParameter("TValue"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "List", $asm0A.TypeRef("System.Collections.Generic.LinkedListNode`1", [$.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("My");
/* class My.MyApplication */ 

(function MyApplication$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.ApplicationBase"), 
      Name: "My.MyApplication", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["MyTemplate", "11.0.0.0"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class My.MyComputer */ 

(function MyComputer$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm05.TypeRef("Microsoft.VisualBasic.Devices.Computer"), 
      Name: "My.MyComputer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["MyTemplate", "11.0.0.0"]; })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

})();

/* class My.MyProject */ 

(function MyProject$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "My.MyProject", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_Application", 
      JSIL.MethodSignature.Return($asm05.TypeRef("My.MyApplication"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_Computer", 
      JSIL.MethodSignature.Return($asm05.TypeRef("My.MyComputer"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_User", 
      JSIL.MethodSignature.Return($asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.User"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WebServices", 
      JSIL.MethodSignature.Return($asm05.TypeRef("My.MyProject+MyWebServices"))
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_ComputerObjectProvider", $asm05.TypeRef("My.MyProject+ThreadSafeObjectProvider`1", [$asm05.TypeRef("My.MyComputer")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_AppObjectProvider", $asm05.TypeRef("My.MyProject+ThreadSafeObjectProvider`1", [$asm05.TypeRef("My.MyApplication")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_UserObjectProvider", $asm05.TypeRef("My.MyProject+ThreadSafeObjectProvider`1", [$asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.User")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "m_MyWebServicesObjectProvider", $asm05.TypeRef("My.MyProject+ThreadSafeObjectProvider`1", [$asm05.TypeRef("My.MyProject+MyWebServices")]));

    $.Property({Static:true , Public:false}, "Computer", $asm05.TypeRef("My.MyComputer"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.Design.HelpKeywordAttribute"), function () { return ["My.Computer"]; });

    $.Property({Static:true , Public:false}, "Application", $asm05.TypeRef("My.MyApplication"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.Design.HelpKeywordAttribute"), function () { return ["My.Application"]; });

    $.Property({Static:true , Public:false}, "User", $asm05.TypeRef("Microsoft.VisualBasic.ApplicationServices.User"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.Design.HelpKeywordAttribute"), function () { return ["My.User"]; });

    $.Property({Static:true , Public:false}, "WebServices", $asm05.TypeRef("My.MyProject+MyWebServices"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.Design.HelpKeywordAttribute"), function () { return ["My.WebServices"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute"))
    .Attribute($asm05.TypeRef("Microsoft.VisualBasic.HideModuleNameAttribute"))
    .Attribute($asm0A.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["MyTemplate", "11.0.0.0"]; });

})();

/* class My.MyProject+MyWebServices */ 

(function MyWebServices$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "My.MyProject+MyWebServices", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:false}, "Create__Instance__", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["T"])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Dispose__Instance__", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["T"])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm05.TypeRef("Microsoft.VisualBasic.MyGroupCollectionAttribute"), function () { return ["System.Web.Services.Protocols.SoapHttpClientProtocol", "Create__Instance__", "Dispose__Instance__", ""]; });

})();

/* class My.MyProject+ThreadSafeObjectProvider`1 */ 

(function ThreadSafeObjectProvider$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "My.MyProject+ThreadSafeObjectProvider`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:false, Public:false}, "get_GetInstance", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_Context", $asm05.TypeRef("Microsoft.VisualBasic.MyServices.Internal.ContextValue`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false}, "GetInstance", $.GenericParameter("T"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ComputeStringHash", 
      new JSIL.MethodSignature($.UInt32, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class __DynamicallyInvokableAttribute */ 

(function __DynamicallyInvokableAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "__DynamicallyInvokableAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

