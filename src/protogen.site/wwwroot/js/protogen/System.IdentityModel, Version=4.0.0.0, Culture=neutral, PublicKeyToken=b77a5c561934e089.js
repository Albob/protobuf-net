/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm19 = JSIL.DeclareAssembly("System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "System.IdentityModel.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "System.IdentityModel.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "System.IdentityModel.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "4.7.2046.0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", $.String, "30319");

    $.Constant({Static:true , Public:false}, "BuildRevisionStr", $.String, "0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 30319);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", $.String, "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB");

    $.Constant({Static:true , Public:false}, "PlatformPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "Mscorlib", $.String, "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemData", $.String, "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", $.String, "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "System", $.String, "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemCore", $.String, "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemNumerics", $.String, "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", $.String, "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemThreadingTasksDataflow", $.String, "System.Threading.Tasks.Dataflow, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWindowsForms", $.String, "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemXml", $.String, "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", $.String, "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", $.String, "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemConfiguration", $.String, "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", $.String, "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDeployment", $.String, "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDesign", $.String, "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", $.String, "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", $.String, "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawing", $.String, "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", $.String, "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemManagement", $.String, "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemMessaging", $.String, "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttp", $.String, "System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttpWebRequest", $.String, "System.Net.Http.WebRequest, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", $.String, "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntime", $.String, "System.Runtime.WindowsRuntime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntimeUIXaml", $.String, "System.Runtime.WindowsRuntimeUIXaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemSecurity", $.String, "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemServiceModelWeb", $.String, "System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemServiceProcess", $.String, "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWeb", $.String, "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", $.String, "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", $.String, "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", $.String, "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", $.String, "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWebExtensions", $.String, "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", $.String, "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebMobile", $.String, "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", $.String, "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRouting", $.String, "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebServices", $.String, "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "WindowsBase", $.String, "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", $.String, "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", $.String, "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", $.String, "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", $.String, "b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", $.String, "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", $.String, "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", $.String, "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", $.String, "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", $.String, "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftJScript", $.String, "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
/* class System.AppContextDefaultValues */ 

(function AppContextDefaultValues$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.AppContextDefaultValues", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ParseTargetFrameworkName", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "PopulateDefaultValues", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "PopulateDefaultValuesPartial", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseFrameworkName", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.LocalAppContext */ 

(function LocalAppContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };



  function LocalAppContext_get_DisableCaching () {
    return $thisType.LocalAppContext$DisableCaching$value;
  }; 





  function LocalAppContext_set_DisableCaching (value) {
    $thisType.LocalAppContext$DisableCaching$value = value;
  }; 


  JSIL.MakeStaticClass("System.LocalAppContext", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DefineSwitchDefault", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.Method({Static:true , Public:false}, "get_DisableCaching", 
      JSIL.MethodSignature.Return($.Boolean), 
      LocalAppContext_get_DisableCaching
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCachedSwitchValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCachedSwitchValueInternal", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsSwitchEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSwitchEnabledLocal", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Method({Static:true , Public:false}, "set_DisableCaching", 
      JSIL.MethodSignature.Action($.Boolean), 
      LocalAppContext_set_DisableCaching
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetupDelegate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "TryGetSwitchFromCentralAppContext", $asm19.TypeRef("System.LocalAppContext+TryGetSwitchDelegate"));

    $.Field({Static:true , Public:false}, "s_canForwardCalls", $.Boolean);

    $.Field({Static:true , Public:false}, "s_switchMap", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Boolean]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_syncLock", $.Object);

    $.Field({Static:true , Public:false}, "LocalAppContext$DisableCaching$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:true , Public:false}, "DisableCaching", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.LocalAppContext+TryGetSwitchDelegate */ 

JSIL.MakeDelegate("System.LocalAppContext+TryGetSwitchDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.String"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Boolean")])]));

JSIL.DeclareNamespace("System.ServiceModel");
JSIL.DeclareNamespace("System.ServiceModel.Security");
JSIL.DeclareNamespace("System.IdentityModel");
JSIL.DeclareNamespace("System.IdentityModel.Tokens");
/* class System.IdentityModel.Tokens.SecurityKeyIdentifierClause */ 

(function SecurityKeyIdentifierClause$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SecurityKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCreateKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClauseType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DerivationLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDerivationNonce", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "clauseType", $.String);

    $.Field({Static:false, Public:false}, "derivationNonce", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "derivationLength", $.Int32);

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanCreateKey", $.Boolean);

    $.Property({Static:false, Public:true }, "ClauseType", $.String);

    $.Property({Static:false, Public:true }, "Id", $.String);

    $.Property({Static:false, Public:true }, "DerivationLength", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.BinaryKeyIdentifierClause */ 

(function BinaryKeyIdentifierClause$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.BinaryKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRawBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToBase64String", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToHexString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "identificationData", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Security.BinarySecretKeyIdentifierClause */ 

(function BinarySecretKeyIdentifierClause$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.BinaryKeyIdentifierClause"), 
      Name: "System.ServiceModel.Security.BinarySecretKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCreateKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKeyBytes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "symmetricKey", $asm19.TypeRef("System.IdentityModel.Tokens.InMemorySymmetricSecurityKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanCreateKey", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* class System.ServiceModel.Security.EncryptedType */ 

(function EncryptedType$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Security.EncryptedType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ForceEncryption", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncryptionMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncryptionMethodDictionaryString", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasId", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyIdentifier", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MimeType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OpeningElementName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ShouldReadXmlReferenceKeyInfoClause", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_State", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.ServiceModel.Security.EncryptedType+EncryptionState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WsuId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAdditionalAttributes", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAdditionalElements", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadCipherData", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadCipherData", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadGenericXmlSecurityKeyIdentifier", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EncryptionMethod", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EncryptionMethodDictionaryString", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyIdentifier", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MimeType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityTokenSerializer", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ShouldReadXmlReferenceKeyInfoClause", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_State", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.ServiceModel.Security.EncryptedType+EncryptionState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WsuId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateReadState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateWriteState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAdditionalAttributes", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAdditionalElements", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteCipherData", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "EncodingAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MimeTypeAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "TypeAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "CipherDataElementName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "CipherValueElementName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "encoding", $.String);

    $.Field({Static:false, Public:false}, "encryptionMethod", $asm19.TypeRef("System.ServiceModel.Security.EncryptedType+EncryptionMethodElement"));

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "wsuId", $.String);

    $.Field({Static:false, Public:false}, "keyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Field({Static:false, Public:false}, "mimeType", $.String);

    $.Field({Static:false, Public:false}, "state", $asm19.TypeRef("System.ServiceModel.Security.EncryptedType+EncryptionState"));

    $.Field({Static:false, Public:false}, "type", $.String);

    $.Field({Static:false, Public:false}, "tokenSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Field({Static:false, Public:false}, "shouldReadXmlReferenceKeyInfoClause", $.Boolean);

    $.Property({Static:false, Public:true }, "Encoding", $.String);

    $.Property({Static:false, Public:true }, "EncryptionMethod", $.String);

    $.Property({Static:false, Public:true }, "EncryptionMethodDictionaryString", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasId", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true }, "ShouldReadXmlReferenceKeyInfoClause", $.Boolean);

    $.Property({Static:false, Public:true }, "WsuId", $.String);

    $.Property({Static:false, Public:true }, "KeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Property({Static:false, Public:true }, "MimeType", $.String);

    $.Property({Static:false, Public:true }, "Type", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "OpeningElementName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false}, "State", $asm19.TypeRef("System.ServiceModel.Security.EncryptedType+EncryptionState"));

    $.Property({Static:false, Public:true }, "SecurityTokenSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.ISecurityElement")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* enum System.ServiceModel.Security.EncryptedType+EncryptionState */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceModel.Security.EncryptedType+EncryptionState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    New: 0, 
    Read: 1, 
    DecryptionSetup: 2, 
    Decrypted: 3, 
    EncryptionSetup: 4, 
    Encrypted: 5, 
  }
);

/* struct System.ServiceModel.Security.EncryptedType+EncryptionMethodElement */ 

(function EncryptionMethodElement$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.ServiceModel.Security.EncryptedType+EncryptionMethodElement", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.Field({Static:false, Public:false}, "algorithm", $.String);

    $.Field({Static:false, Public:false}, "algorithmDictionaryString", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ElementName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Security.EncryptedKey */ 

(function EncryptedKey$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.ServiceModel.Security.EncryptedType"), 
      Name: "System.ServiceModel.Security.EncryptedKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ForceEncryption", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CarriedKeyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OpeningElementName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Recipient", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferenceList", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.ServiceModel.Security.ReferenceList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetWrappedKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAdditionalAttributes", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAdditionalElements", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadCipherData", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadCipherData", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CarriedKeyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Recipient", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReferenceList", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.ServiceModel.Security.ReferenceList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetUpKeyWrap", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAdditionalAttributes", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAdditionalElements", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteCipherData", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "CarriedKeyElementName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ElementName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "RecipientAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "carriedKeyName", $.String);

    $.Field({Static:false, Public:false}, "recipient", $.String);

    $.Field({Static:false, Public:false}, "referenceList", $asm19.TypeRef("System.ServiceModel.Security.ReferenceList"));

    $.Field({Static:false, Public:false}, "wrappedKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "CarriedKeyName", $.String);

    $.Property({Static:false, Public:true }, "Recipient", $.String);

    $.Property({Static:false, Public:true }, "ReferenceList", $asm19.TypeRef("System.ServiceModel.Security.ReferenceList"));

    $.Property({Static:false, Public:false, Virtual:true }, "OpeningElementName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* class System.ServiceModel.Security.EncryptedKeyHashIdentifierClause */ 

(function EncryptedKeyHashIdentifierClause$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.BinaryKeyIdentifierClause"), 
      Name: "System.ServiceModel.Security.EncryptedKeyHashIdentifierClause", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEncryptedKeyHash", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* interface System.ServiceModel.Security.ISspiNegotiation */ 

JSIL.MakeInterface(
  "System.ServiceModel.Security.ISspiNegotiation", false, [], function ($) {
    $.Method({}, "get_ExpirationTimeUtc", JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime")));
    $.Method({}, "get_IsCompleted", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_IsValidContext", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_KeyEncryptionAlgorithm", JSIL.MethodSignature.Return($.String));
    $.Method({}, "Decrypt", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])]));
    $.Method({}, "Encrypt", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])]));
    $.Method({}, "GetOutgoingBlob", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"), 
          $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy")
        ]));
    $.Method({}, "GetRemoteIdentityName", JSIL.MethodSignature.Return($.String));
    $.Property({}, "ExpirationTimeUtc");
    $.Property({}, "IsCompleted");
    $.Property({}, "IsValidContext");
    $.Property({}, "KeyEncryptionAlgorithm");
  }, [$asm07.TypeRef("System.IDisposable")])
  .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

/* interface System.ServiceModel.Security.ISspiNegotiationInfo */ 

JSIL.MakeInterface(
  "System.ServiceModel.Security.ISspiNegotiationInfo", false, [], function ($) {
    $.Method({}, "get_SspiNegotiation", JSIL.MethodSignature.Return($asm19.TypeRef("System.ServiceModel.Security.ISspiNegotiation")));
    $.Property({}, "SspiNegotiation");
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

/* class System.ServiceModel.Security.KeyNameIdentifierClause */ 

(function KeyNameIdentifierClause$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.ServiceModel.Security.KeyNameIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "keyName", $.String);

    $.Property({Static:false, Public:true }, "KeyName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* class System.ServiceModel.Security.ReferenceList */ 

(function ReferenceList$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.ServiceModel.Security.ReferenceList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddReferredId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsReferredId", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataReferenceCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasId", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetReferredId", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "TryRemoveReferredId", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ElementName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Constant({Static:true , Public:false}, "NamespacePrefix", $.String, "e");

    $.Field({Static:true , Public:false, ReadOnly:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"), function ($pi) {
        return $asm19.System.ServiceModel.Security.EncryptedType.NamespaceUri;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "UriAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "referredIds", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Property({Static:false, Public:true }, "DataReferenceCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "HasId", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.ISecurityElement")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* class System.ServiceModel.Security.ReferenceList+DataReference */ 

(function DataReference$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.ServiceModel.Security.ReferenceList+DataReference", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature($.String, [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ElementName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"), function ($pi) {
        return $asm19.System.ServiceModel.Security.EncryptedType.NamespaceUri;
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Security.RelAssertionDirectKeyIdentifierClause */ 

(function RelAssertionDirectKeyIdentifierClause$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.ServiceModel.Security.RelAssertionDirectKeyIdentifierClause", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssertionId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "assertionId", $.String);

    $.Property({Static:false, Public:true }, "AssertionId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* class System.ServiceModel.Security.SamlAssertionDirectKeyIdentifierClause */ 

(function SamlAssertionDirectKeyIdentifierClause$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.ServiceModel.Security.SamlAssertionDirectKeyIdentifierClause", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SamlUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "samlUri", $.String);

    $.Property({Static:false, Public:true }, "SamlUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* class System.ServiceModel.Security.SecurityContextKeyIdentifierClause */ 

(function SecurityContextKeyIdentifierClause$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.ServiceModel.Security.SecurityContextKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.UniqueId"), $asm21.TypeRef("System.Xml.UniqueId")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.UniqueId"), $asm21.TypeRef("System.Xml.UniqueId"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextId", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Generation", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.UniqueId"), $asm21.TypeRef("System.Xml.UniqueId")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "contextId", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "generation", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Property({Static:false, Public:true }, "ContextId", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Property({Static:false, Public:true }, "Generation", $asm21.TypeRef("System.Xml.UniqueId"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* enum System.ServiceModel.Security.X509CertificateValidationMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.ServiceModel.Security.X509CertificateValidationMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    PeerTrust: 1, 
    ChainTrust: 2, 
    PeerOrChainTrust: 3, 
    Custom: 4, 
  }
);

JSIL.DeclareNamespace("System.ServiceModel.Security.Tokens");
/* class System.IdentityModel.Tokens.SecurityToken */ 

(function SecurityToken$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanCreateKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanCreateLocalKeyIdentifierClause", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKeyIdentifierClause", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchesKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveKeyIdentifierClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Security.Tokens.BinarySecretSecurityToken */ 

(function BinarySecretSecurityToken$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
      Name: "System.ServiceModel.Security.Tokens.BinarySecretSecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKeyBytes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "effectiveTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "securityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "KeySize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* class System.IdentityModel.Tokens.GenericXmlSecurityToken */ 

(function GenericXmlSecurityToken$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
      Name: "System.IdentityModel.Tokens.GenericXmlSecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
          $asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.DateTime"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
          $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanCreateKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKeyIdentifierClause", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthorizationPolicies", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExternalTokenReference", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InternalTokenReference", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProofToken", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenXml", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetId", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchesKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "SupportedPersistanceVersion", $.Int32, 1);

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "proofToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Field({Static:false, Public:false}, "internalTokenReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"));

    $.Field({Static:false, Public:false}, "externalTokenReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"));

    $.Field({Static:false, Public:false}, "tokenXml", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Field({Static:false, Public:false}, "authorizationPolicies", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]));

    $.Field({Static:false, Public:false}, "effectiveTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "expirationTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "InternalTokenReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"));

    $.Property({Static:false, Public:true }, "ExternalTokenReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"));

    $.Property({Static:false, Public:true }, "TokenXml", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true }, "ProofToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true }, "AuthorizationPolicies", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]));

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.ServiceModel.Security.Tokens.BufferedGenericXmlSecurityToken */ 

(function BufferedGenericXmlSecurityToken$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.GenericXmlSecurityToken"), 
      Name: "System.ServiceModel.Security.Tokens.BufferedGenericXmlSecurityToken", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
          $asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.DateTime"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
          $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), $asm19.TypeRef("System.IdentityModel.XmlBuffer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenXmlBuffer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.XmlBuffer"))
    );

    $.Field({Static:false, Public:false}, "tokenXmlBuffer", $asm19.TypeRef("System.IdentityModel.XmlBuffer"));

    $.Property({Static:false, Public:true }, "TokenXmlBuffer", $asm19.TypeRef("System.IdentityModel.XmlBuffer"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

/* class System.ServiceModel.Security.Tokens.WrappedKeySecurityToken */ 

(function WrappedKeySecurityToken$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
      Name: "System.ServiceModel.Security.Tokens.WrappedKeySecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm19.TypeRef("System.ServiceModel.Security.ISspiNegotiation")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String, $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String, $asm19.TypeRef("System.ServiceModel.Security.ISspiNegotiation"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String, $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanCreateKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKeyIdentifierClause", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureEncryptedKeySetUp", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CarriedKeyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncryptedKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.ServiceModel.Security.EncryptedKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferenceList", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.ServiceModel.Security.ReferenceList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WrappingAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WrappingSecurityKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WrappingToken", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WrappingTokenReference", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHash", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetWrappedKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchesKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EncryptedKey", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.ServiceModel.Security.EncryptedKey"))
    );

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "effectiveTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "encryptedKey", $asm19.TypeRef("System.ServiceModel.Security.EncryptedKey"));

    $.Field({Static:false, Public:false}, "securityKey", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Field({Static:false, Public:false}, "wrappedKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "wrappingAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "wrappingSspiContext", $asm19.TypeRef("System.ServiceModel.Security.ISspiNegotiation"));

    $.Field({Static:false, Public:false}, "wrappingToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Field({Static:false, Public:false}, "wrappingSecurityKey", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"));

    $.Field({Static:false, Public:false}, "wrappingTokenReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Field({Static:false, Public:false}, "serializeCarriedKeyName", $.Boolean);

    $.Field({Static:false, Public:false}, "wrappedKeyHash", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "wrappingAlgorithmDictionaryString", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "EncryptedKey", $asm19.TypeRef("System.ServiceModel.Security.EncryptedKey"));

    $.Property({Static:false, Public:false}, "ReferenceList", $asm19.TypeRef("System.ServiceModel.Security.ReferenceList"));

    $.Property({Static:false, Public:true }, "WrappingAlgorithm", $.String);

    $.Property({Static:false, Public:false}, "WrappingSecurityKey", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"));

    $.Property({Static:false, Public:true }, "WrappingToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true }, "WrappingTokenReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Property({Static:false, Public:false}, "CarriedKeyName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"]; });

})();

JSIL.DeclareNamespace("System.Security");
JSIL.DeclareNamespace("System.Security.Cryptography");
/* class System.Security.Cryptography.CngLightup */ 

(function CngLightup$Members () {
  var $, $thisType;




















  JSIL.MakeStaticClass("System.Security.Cryptography.CngLightup", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "BindCoreDelegate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Func`2", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), "!!0"]), [$.String, $.Boolean], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindGetCapiPrivateKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Func`2", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), "!!0"]), [$.String, $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Cryptography.CspParameters"), "!!0"])], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindGetCapiPublicKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Func`2", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), "!!0"]), [$.String], ["T", "TCryptoServiceProvider"])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindRsaCryptMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Delegate"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CopyCspParameters", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.CspParameters"), [$asm07.TypeRef("System.Security.Cryptography.ICspAsymmetricAlgorithm")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DetectRsaCngSupport", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDSAPrivateKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.DSA"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDSAPublicKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.DSA"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetECDsaPrivateKey", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Security.Cryptography.ECDsa"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetECDsaPublicKey", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Security.Cryptography.ECDsa"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRSAPrivateKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.RSA"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRSAPublicKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.RSA"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSystemCoreType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "OaepSha1Decrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "OaepSha1Encrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "Pkcs1Decrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "Pkcs1Encrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "Pkcs1SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Pkcs1VerifyData", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String
        ])
    );

    $.Constant({Static:true , Public:false}, "DsaOid", $.String, "1.2.840.10040.4.1");

    $.Constant({Static:true , Public:false}, "RsaOid", $.String, "1.2.840.113549.1.1.1");

    $.Constant({Static:true , Public:false}, "HashAlgorithmNameTypeName", $.String, "System.Security.Cryptography.HashAlgorithmName");

    $.Constant({Static:true , Public:false}, "RSASignaturePaddingTypeName", $.String, "System.Security.Cryptography.RSASignaturePadding");

    $.Constant({Static:true , Public:false}, "RSAEncryptionPaddingTypeName", $.String, "System.Security.Cryptography.RSAEncryptionPadding");

    $.Constant({Static:true , Public:false}, "RSACngTypeName", $.String, "System.Security.Cryptography.RSACng");

    $.Constant({Static:true , Public:false}, "DSACngTypeName", $.String, "System.Security.Cryptography.DSACng");

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_hashAlgorithmNameType", $asm07.TypeRef("System.Type"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_rsaSignaturePaddingType", $asm07.TypeRef("System.Type"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_rsaEncryptionPaddingType", $asm07.TypeRef("System.Type"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_pkcs1SignaturePadding", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_pkcs1EncryptionPadding", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_oaepSha1EncryptionPadding", $.Object);

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_preferRsaCng", $asm07.TypeRef("System.Lazy`1", [$.Boolean]));

    $.Field({Static:true , Public:false}, "s_getDsaPublicKey", $asm07.TypeRef("System.Func`2"));

    $.Field({Static:true , Public:false}, "s_getDsaPrivateKey", $asm07.TypeRef("System.Func`2"));

    $.Field({Static:true , Public:false}, "s_getRsaPublicKey", $asm07.TypeRef("System.Func`2"));

    $.Field({Static:true , Public:false}, "s_getRsaPrivateKey", $asm07.TypeRef("System.Func`2"));

    $.Field({Static:true , Public:false}, "s_rsaPkcs1SignMethod", $asm07.TypeRef("System.Func`4"));

    $.Field({Static:true , Public:false}, "s_rsaPkcs1VerifyMethod", $asm07.TypeRef("System.Func`5"));

    $.Field({Static:true , Public:false}, "s_rsaPkcs1EncryptMethod", $asm07.TypeRef("System.Func`3"));

    $.Field({Static:true , Public:false}, "s_rsaPkcs1DecryptMethod", $asm07.TypeRef("System.Func`3"));

    $.Field({Static:true , Public:false}, "s_rsaOaepSha1EncryptMethod", $asm07.TypeRef("System.Func`3"));

    $.Field({Static:true , Public:false}, "s_rsaOaepSha1DecryptMethod", $asm07.TypeRef("System.Func`3"));

    $.Field({Static:true , Public:false}, "s_getECDsaPublicKey", $asm07.TypeRef("System.Func`2"));

    $.Field({Static:true , Public:false}, "s_getECDsaPrivateKey", $asm07.TypeRef("System.Func`2"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngLightup+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetDSAPrivateKey$gb__29_0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.DSA"), [$asm07.TypeRef("System.Security.Cryptography.CspParameters")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetECDsaPrivateKey$gb__31_0", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Security.Cryptography.ECDsa"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetECDsaPublicKey$gb__30_0", 
      new JSIL.MethodSignature($asm10.TypeRef("System.Security.Cryptography.ECDsa"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetRSAPrivateKey$gb__27_0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.RSA"), [$asm07.TypeRef("System.Security.Cryptography.CspParameters")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetRSAPrivateKey$gb__27_1", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.RSA"), [$asm07.TypeRef("System.Security.Cryptography.CspParameters")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__27_0", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Cryptography.CspParameters"), $asm07.TypeRef("System.Security.Cryptography.RSA")]));

    $.Field({Static:true , Public:true }, "$l$g9__27_1", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Cryptography.CspParameters"), $asm07.TypeRef("System.Security.Cryptography.RSA")]));

    $.Field({Static:true , Public:true }, "$l$g9__29_0", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Cryptography.CspParameters"), $asm07.TypeRef("System.Security.Cryptography.DSA")]));

    $.Field({Static:true , Public:true }, "$l$g9__30_0", $asm07.TypeRef("System.Func`2", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm10.TypeRef("System.Security.Cryptography.ECDsa")]));

    $.Field({Static:true , Public:true }, "$l$g9__31_0", $asm07.TypeRef("System.Func`2", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm10.TypeRef("System.Security.Cryptography.ECDsa")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass32_0 */ 

(function $l$gc__DisplayClass32_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass32_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPkcs1SignData$gb__0", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    );

    $.Field({Static:false, Public:true }, "openDelegate", $asm07.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass33_0 */ 

(function $l$gc__DisplayClass33_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass33_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPkcs1VerifyData$gb__0", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String
        ])
    );

    $.Field({Static:false, Public:true }, "openDelegate", $asm07.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass34_0 */ 

(function $l$gc__DisplayClass34_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass34_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPkcs1Encrypt$gb__0", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Field({Static:false, Public:true }, "openDelegate", $asm07.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass35_0 */ 

(function $l$gc__DisplayClass35_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass35_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPkcs1Decrypt$gb__0", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Field({Static:false, Public:true }, "openDelegate", $asm07.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass36_0 */ 

(function $l$gc__DisplayClass36_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass36_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOaepSha1Encrypt$gb__0", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Field({Static:false, Public:true }, "openDelegate", $asm07.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass37_0 */ 

(function $l$gc__DisplayClass37_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass37_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lOaepSha1Decrypt$gb__0", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.RSA"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Field({Static:false, Public:true }, "openDelegate", $asm07.TypeRef("System.Delegate"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass40_0`2 */ 

(function $l$gc__DisplayClass40_0$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass40_0`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T", "TCryptoServiceProvider"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindGetCapiPublicKey$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.Field({Static:false, Public:true }, "algorithmOid", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Security.Cryptography.CngLightup+<>c__DisplayClass41_0`1 */ 

(function $l$gc__DisplayClass41_0$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngLightup+<>c__DisplayClass41_0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lBindGetCapiPrivateKey$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.Field({Static:false, Public:true }, "algorithmOid", $.String);

    $.Field({Static:false, Public:true }, "instanceFactory", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Cryptography.CspParameters"), $.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("System.Security.Claims");
/* class System.Security.Claims.AuthenticationInformation */ 

(function AuthenticationInformation$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Claims.AuthenticationInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Address", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthorizationContexts", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.AuthenticationContext")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DnsName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotOnOrAfter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Session", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Address", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DnsName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NotOnOrAfter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Session", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_address", $.String);

    $.Field({Static:false, Public:false}, "_authContexts", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.AuthenticationContext")]));

    $.Field({Static:false, Public:false}, "_dnsName", $.String);

    $.Field({Static:false, Public:false}, "_notOnOrAfter", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "_session", $.String);

    $.Property({Static:false, Public:true }, "Address", $.String);

    $.Property({Static:false, Public:true }, "AuthorizationContexts", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.AuthenticationContext")]));

    $.Property({Static:false, Public:true }, "DnsName", $.String);

    $.Property({Static:false, Public:true }, "NotOnOrAfter", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "Session", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Claims.AuthenticationTypes */ 

(function AuthenticationTypes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Claims.AuthenticationTypes", true, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Basic", $.String, "Basic");

    $.Constant({Static:true , Public:true }, "Federation", $.String, "Federation");

    $.Constant({Static:true , Public:true }, "Kerberos", $.String, "Kerberos");

    $.Constant({Static:true , Public:true }, "Negotiate", $.String, "Negotiate");

    $.Constant({Static:true , Public:true }, "Password", $.String, "Password");

    $.Constant({Static:true , Public:true }, "Signature", $.String, "Signature");

    $.Constant({Static:true , Public:true }, "Windows", $.String, "Windows");

    $.Constant({Static:true , Public:true }, "X509", $.String, "X509");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Claims.AuthenticationTypeMaps */ 

(function AuthenticationTypeMaps$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Security.Claims.AuthenticationTypeMaps", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Denormalize", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.Security.Claims.AuthenticationTypeMaps+Mapping")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.Security.Claims.AuthenticationTypeMaps+Mapping")])])
    );

    $.Field({Static:true , Public:true }, "Saml", $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.Security.Claims.AuthenticationTypeMaps+Mapping")]));

    $.Field({Static:true , Public:true }, "Saml2", $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.Security.Claims.AuthenticationTypeMaps+Mapping")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Claims.AuthenticationTypeMaps+Mapping */ 

(function Mapping$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Security.Claims.AuthenticationTypeMaps+Mapping", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:true }, "Normalized", $.String);

    $.Field({Static:false, Public:true }, "Unnormalized", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Claims.AuthorizationContext */ 

(function AuthorizationContext$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Claims.AuthorizationContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm07.TypeRef("System.Security.Claims.Claim")]), 
          $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm07.TypeRef("System.Security.Claims.Claim")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Action", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm07.TypeRef("System.Security.Claims.Claim")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Principal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Resource", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm07.TypeRef("System.Security.Claims.Claim")]))
    );

    $.Field({Static:false, Public:false}, "_action", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm07.TypeRef("System.Security.Claims.Claim")]));

    $.Field({Static:false, Public:false}, "_resource", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm07.TypeRef("System.Security.Claims.Claim")]));

    $.Field({Static:false, Public:false}, "_principal", $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"));

    $.Property({Static:false, Public:true }, "Action", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm07.TypeRef("System.Security.Claims.Claim")]));

    $.Property({Static:false, Public:true }, "Resource", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm07.TypeRef("System.Security.Claims.Claim")]));

    $.Property({Static:false, Public:true }, "Principal", $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Claims.ClaimsAuthenticationManager */ 

(function ClaimsAuthenticationManager$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Claims.ClaimsAuthenticationManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Authenticate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), [$.String, $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCustomConfiguration", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.Configuration.ICustomIdentityConfiguration")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Claims.ClaimsAuthorizationManager */ 

(function ClaimsAuthorizationManager$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Security.Claims.ClaimsAuthorizationManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CheckAccess", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.Security.Claims.AuthorizationContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCustomConfiguration", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.Configuration.ICustomIdentityConfiguration")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Claims.ClaimsConversionHelper */ 

(function ClaimsConversionHelper$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Security.Claims.ClaimsConversionHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AssignClaimFromStringResourceSysClaim", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Claims.Claim"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AssignClaimFromSysClaim", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Claims.Claim"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateClaimFromWcfClaim", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.Claim"), [$asm19.TypeRef("System.IdentityModel.Claims.Claim")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateClaimFromWcfClaim", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.Claim"), [$asm19.TypeRef("System.IdentityModel.Claims.Claim"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateClaimsIdentityFromClaimSet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateClaimsIdentityFromClaimSet", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Claims.ClaimsHelper */ 

(function ClaimsHelper$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Security.Claims.ClaimsHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CertificateLogon", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.WindowsIdentity"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FindUpn", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Claims.ClaimProperties */ 

(function ClaimProperties$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Claims.ClaimProperties", true, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties");

    $.Constant({Static:true , Public:true }, "SamlAttributeDisplayName", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/displayname");

    $.Constant({Static:true , Public:true }, "SamlAttributeNameFormat", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/attributename");

    $.Constant({Static:true , Public:true }, "SamlNameIdentifierFormat", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/format");

    $.Constant({Static:true , Public:true }, "SamlNameIdentifierNameQualifier", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/namequalifier");

    $.Constant({Static:true , Public:true }, "SamlNameIdentifierSPNameQualifier", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/spnamequalifier");

    $.Constant({Static:true , Public:true }, "SamlNameIdentifierSPProvidedId", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/spprovidedid");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.DiagnosticUtility */ 

(function DiagnosticUtility$Members () {
  var $, $thisType;































  JSIL.MakeStaticClass("System.IdentityModel.DiagnosticUtility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "DebugAssert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "DebugAssert", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "FailFast", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DiagnosticTrace", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExceptionUtility", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceCritical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceInformation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceVerbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceWarning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldUseActivity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TracingEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Utility", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.Utility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExceptionUtility", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUtility", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.Utility"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InitDiagnosticTraceImpl", 
      new JSIL.MethodSignature(null, [$asm33.TypeRef("System.ServiceModel.Diagnostics.TraceSourceKind"), $.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "InitializeTracing", 
      JSIL.MethodSignature.Return($asm33.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeFinalHandler", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldTrace", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperArgumentNullOrEmptyString", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperArgumentOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperArgumentOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperArgumentOutOfRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $.String, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperConfigurationError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm0E.TypeRef("System.Configuration.ConfigurationElement"), $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperConfigurationError", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm0E.TypeRef("System.Configuration.ConfigurationElement"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperInvalidOperation", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperXml", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm2F.TypeRef("System.Xml.XmlReader"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowHelperXml", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [
          $asm2F.TypeRef("System.Xml.XmlReader"), $.String, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceHandledException", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Exception"), $asm0A.TypeRef("System.Diagnostics.TraceEventType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "TraceSourceName", $.String, "System.IdentityModel");

    $.Constant({Static:true , Public:false}, "EventSourceName", $.String, "System.IdentityModel 4.0.0.0");

    $.Constant({Static:true , Public:false}, "DefaultTraceListenerName", $.String, "Default");

    $.Field({Static:true , Public:false}, "level", $asm0A.TypeRef("System.Diagnostics.SourceLevels"), function ($pi) {
        return $asm0A.System.Diagnostics.SourceLevels.Off;
      });

    $.Field({Static:true , Public:false}, "tracingEnabled", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldUseActivity", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceVerbose", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceInformation", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceWarning", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceError", $.Boolean, false);

    $.Field({Static:true , Public:false}, "shouldTraceCritical", $.Boolean, false);

    $.Field({Static:true , Public:false}, "diagnosticTrace", $asm33.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"));

    $.Field({Static:true , Public:false}, "lockObject", $.Object);

    $.Field({Static:true , Public:false}, "exceptionUtility", $asm33.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"), null);

    $.Field({Static:true , Public:false}, "utility", $asm33.TypeRef("System.ServiceModel.Diagnostics.Utility"), null);

    $.Property({Static:true , Public:false}, "DiagnosticTrace", $asm33.TypeRef("System.ServiceModel.Diagnostics.LegacyDiagnosticTrace"));

    $.Property({Static:true , Public:false}, "ExceptionUtility", $asm33.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"));

    $.Property({Static:true , Public:false}, "Utility", $asm33.TypeRef("System.ServiceModel.Diagnostics.Utility"));

    $.Property({Static:true , Public:false}, "TracingEnabled", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceCritical", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldUseActivity", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceError", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceWarning", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceInformation", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceVerbose", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Asn1IntegerConverter */ 

(function Asn1IntegerConverter$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.IdentityModel.Asn1IntegerConverter", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AddSecondDecimalToFirst", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Asn1IntegerToDecimalString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubtractSecondDecimalFromFirst", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$.Byte]), $asm07.TypeRef("System.Collections.Generic.List`1", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TwoToThePowerOf", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32])
    );

    $.Field({Static:true , Public:false}, "powersOfTwo", $asm07.TypeRef("System.Collections.Generic.List`1", [$jsilcore.TypeRef("System.Array", [$.Byte])]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "digitMap", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.AsynchronousOperationException */ 

(function AsynchronousOperationException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.AsynchronousOperationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.AsyncResult */ 

(function AsyncResult$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.AsyncResult", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Complete", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Complete", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.WaitHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "callback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "completed", $.Boolean);

    $.Field({Static:false, Public:false}, "completedSync", $.Boolean);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "endCalled", $.Boolean);

    $.Field({Static:false, Public:false}, "exception", $asm07.TypeRef("System.Exception"));

    $.Field({Static:false, Public:false}, "resetEvent", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "state", $.Object);

    $.Field({Static:false, Public:false}, "thisLock", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm07.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IAsyncResult"), 
      /* 1 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.RequestException */ 

(function RequestException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.RequestException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.BadRequestException */ 

(function BadRequestException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.RequestException"), 
      Name: "System.IdentityModel.BadRequestException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.BoundedCache`1 */ 

(function BoundedCache$b1$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.BoundedCache`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.TimeSpan"), 
          $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnforceQuota", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CacheLock", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.ReaderWriterLock"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Capacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Items", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm19.TypeRef("System.IdentityModel.BoundedCache`1+ExpirableItem`1", [$.GenericParameter("T"), $.GenericParameter("T")])]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PurgeInterval", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IncreaseCapacity", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Purge", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Capacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PurgeInterval", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryAdd", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.GenericParameter("T"), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryFind", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGet", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryRemove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:false}, "_items", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm19.TypeRef("System.IdentityModel.BoundedCache`1+ExpirableItem`1", [$.GenericParameter("T"), $.GenericParameter("T")])]));

    $.Field({Static:false, Public:false}, "_capacity", $.Int32);

    $.Field({Static:false, Public:false}, "_purgeInterval", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "_readWriteLock", $asm07.TypeRef("System.Threading.ReaderWriterLock"));

    $.Field({Static:false, Public:false}, "_nextPurgeTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "CacheLock", $asm07.TypeRef("System.Threading.ReaderWriterLock"));

    $.Property({Static:false, Public:true , Virtual:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:false}, "Items", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm19.TypeRef("System.IdentityModel.BoundedCache`1+ExpirableItem`1", [$.GenericParameter("T"), $.GenericParameter("T")])]));

    $.Property({Static:false, Public:true }, "PurgeInterval", $asm07.TypeRef("System.TimeSpan"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.BoundedCache`1+ExpirableItem`1 */ 

(function ExpirableItem$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.BoundedCache`1+ExpirableItem`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T", "ET"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("ET"), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("ET"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsExpired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_expirationTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_item", $.GenericParameter("ET"));

    $.Property({Static:false, Public:true }, "Item", $.GenericParameter("ET"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.BoundedCache`1+CachingMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.BoundedCache`1+CachingMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Time: 0, 
    MRU: 1, 
    FIFO: 2, 
  }
);

/* class System.IdentityModel.BufferManager */ 

(function BufferManager$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.BufferManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateBufferManager", 
      new JSIL.MethodSignature($.Type, [$.Int64, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInternalBufferManager", 
      new JSIL.MethodSignature($asm25.TypeRef("System.Runtime.InternalBufferManager"), [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReturnBuffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TakeBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.BufferManager+WrappingBufferManager */ 

(function WrappingBufferManager$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.BufferManager"), 
      Name: "System.IdentityModel.BufferManager+WrappingBufferManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.InternalBufferManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InternalBufferManager", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.InternalBufferManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReturnBuffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TakeBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32])
    );

    $.Field({Static:false, Public:false}, "innerBufferManager", $asm25.TypeRef("System.Runtime.InternalBufferManager"));

    $.Property({Static:false, Public:true }, "InternalBufferManager", $asm25.TypeRef("System.Runtime.InternalBufferManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.BufferManager+WrappingInternalBufferManager */ 

(function WrappingInternalBufferManager$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.InternalBufferManager"), 
      Name: "System.IdentityModel.BufferManager+WrappingInternalBufferManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.BufferManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReturnBuffer", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TakeBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32])
    );

    $.Field({Static:false, Public:false}, "innerBufferManager", $asm19.TypeRef("System.IdentityModel.BufferManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.BufferManagerOutputStream */ 

(function BufferManagerOutputStream$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.BufferedOutputStream"), 
      Name: "System.IdentityModel.BufferManagerOutputStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $asm19.TypeRef("System.IdentityModel.BufferManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateQuotaExceededException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Init", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm19.TypeRef("System.IdentityModel.BufferManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Init", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $asm19.TypeRef("System.IdentityModel.BufferManager")
        ])
    );

    $.Field({Static:false, Public:false}, "quotaExceededString", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.CanonicalFormWriter */ 

(function CanonicalFormWriter$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.CanonicalFormWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Base64EncodeAndWrite", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Char]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeAndWrite", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeAndWrite", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Char])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeAndWrite", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeAndWrite", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeAndWrite", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Utf8WithoutPreamble", $asm07.TypeRef("System.Text.UTF8Encoding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.CanonicalizationDriver */ 

(function CanonicalizationDriver$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.CanonicalizationDriver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CloseReadersAfterProcessing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeComments", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBytes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInclusivePrefixes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMemoryStream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.MemoryStream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CloseReadersAfterProcessing", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IncludeComments", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetInclusivePrefixes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetInput", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetInput", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.Field({Static:false, Public:false}, "closeReadersAfterProcessing", $.Boolean);

    $.Field({Static:false, Public:false}, "reader", $asm2F.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "inclusivePrefixes", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "includeComments", $.Boolean);

    $.Property({Static:false, Public:true }, "CloseReadersAfterProcessing", $.Boolean);

    $.Property({Static:false, Public:true }, "IncludeComments", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.CipherDataElement */ 

(function CipherDataElement$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.CipherDataElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CipherValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CipherValue", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetCipherValueFragments", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "_iv", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_cipherText", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "CipherValue", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.CookieTransform */ 

(function CookieTransform$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.CookieTransform", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Encode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.CAPI */ 

(function CAPI$Members () {
  var $, $thisType;











  JSIL.MakeStaticClass("System.IdentityModel.CAPI", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "BCryptGetFipsAlgorithmMode", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])]), 
      {
        Module: "bcrypt.dll", 
        Parameters: [
          {
            NativeType: "U1", 
            Out: true
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertAddCertificateLinkToStore", 
      new JSIL.MethodSignature($.Boolean, [
          $asm19.TypeRef("System.IdentityModel.SafeCertStoreHandle"), $.IntPtr, 
          $.UInt32, $asm19.TypeRef("System.IdentityModel.SafeCertContextHandle")
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertCloseStore", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $.UInt32]), 
      {
        Module: "crypt32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "CertCreateCertificateContext", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.SafeCertContextHandle"), [
          $.UInt32, $.IntPtr, 
          $.UInt32
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertFindCertificateInStore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.SafeCertContextHandle"), [
          $asm19.TypeRef("System.IdentityModel.SafeCertStoreHandle"), $.UInt32, 
          $.UInt32, $.UInt32, 
          $asm19.TypeRef("System.IdentityModel.SafeHGlobalHandle"), $asm19.TypeRef("System.IdentityModel.SafeCertContextHandle")
        ]), 
      {
        Module: "crypt32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "CertFreeCertificateChain", 
      JSIL.MethodSignature.Action($.IntPtr), 
      {
        Module: "crypt32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "CertFreeCertificateContext", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "crypt32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "CertGetCertificateChain", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME")]), $asm19.TypeRef("System.IdentityModel.SafeCertStoreHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.CAPI+CERT_CHAIN_PARA")]), $.UInt32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeCertChainHandle")])
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertOpenStore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.SafeCertStoreHandle"), [
          $.IntPtr, $.UInt32, 
          $.IntPtr, $.UInt32, 
          $.String
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertVerifyCertificateChainPolicy", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $asm19.TypeRef("System.IdentityModel.SafeCertChainHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.CAPI+CERT_CHAIN_POLICY_PARA")]), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.CAPI+CERT_CHAIN_POLICY_STATUS")])
        ]), 
      {
        Module: "crypt32.dll", 
        CharSet: 'auto',
      }
    );

    $.Constant({Static:true , Public:false}, "CRYPT32", $.String, "crypt32.dll");

    $.Constant({Static:true , Public:false}, "BCRYPT", $.String, "bcrypt.dll");

    $.Constant({Static:true , Public:false}, "SubjectKeyIdentifierOid", $.String, "2.5.29.14");

    $.Constant({Static:true , Public:false}, "S_OK", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "S_FALSE", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "szOID_CRL_DIST_POINTS", $.String, "2.5.29.31");

    $.Constant({Static:true , Public:false}, "szOID_AUTHORITY_INFO_ACCESS", $.String, "1.3.6.1.5.5.7.1.1");

    $.Constant({Static:true , Public:false}, "CERT_STORE_ENUM_ARCHIVED_FLAG", $.UInt32, 512);

    $.Constant({Static:true , Public:false}, "CERT_STORE_READONLY_FLAG", $.UInt32, 32768);

    $.Constant({Static:true , Public:false}, "CERT_STORE_OPEN_EXISTING_FLAG", $.UInt32, 16384);

    $.Constant({Static:true , Public:false}, "CERT_STORE_CREATE_NEW_FLAG", $.UInt32, 8192);

    $.Constant({Static:true , Public:false}, "CERT_STORE_MAXIMUM_ALLOWED_FLAG", $.UInt32, 4096);

    $.Constant({Static:true , Public:false}, "CERT_STORE_ADD_ALWAYS", $.UInt32, 4);

    $.Constant({Static:true , Public:false}, "CERT_CHAIN_POLICY_BASE", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "CERT_CHAIN_POLICY_NT_AUTH", $.UInt32, 6);

    $.Constant({Static:true , Public:false}, "X509_ASN_ENCODING", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "PKCS_7_ASN_ENCODING", $.UInt32, 65536);

    $.Constant({Static:true , Public:false}, "CERT_STORE_PROV_MEMORY", $.UInt32, 2);

    $.Constant({Static:true , Public:false}, "CERT_STORE_PROV_SYSTEM", $.UInt32, 10);

    $.Constant({Static:true , Public:false}, "CERT_SYSTEM_STORE_CURRENT_USER_ID", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "CERT_SYSTEM_STORE_LOCAL_MACHINE_ID", $.UInt32, 2);

    $.Constant({Static:true , Public:false}, "CERT_SYSTEM_STORE_LOCATION_SHIFT", $.UInt32, 16);

    $.Constant({Static:true , Public:false}, "CERT_SYSTEM_STORE_CURRENT_USER", $.UInt32, 65536);

    $.Constant({Static:true , Public:false}, "CERT_SYSTEM_STORE_LOCAL_MACHINE", $.UInt32, 131072);

    $.Constant({Static:true , Public:false}, "CERT_INFO_ISSUER_FLAG", $.UInt32, 4);

    $.Constant({Static:true , Public:false}, "CERT_INFO_SUBJECT_FLAG", $.UInt32, 7);

    $.Constant({Static:true , Public:false}, "CERT_COMPARE_SHIFT", $.UInt32, 16);

    $.Constant({Static:true , Public:false}, "CERT_COMPARE_ANY", $.UInt32, 0);

    $.Constant({Static:true , Public:false}, "CERT_COMPARE_SHA1_HASH", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "CERT_COMPARE_NAME_STR_A", $.UInt32, 7);

    $.Constant({Static:true , Public:false}, "CERT_COMPARE_NAME_STR_W", $.UInt32, 8);

    $.Constant({Static:true , Public:false}, "CERT_FIND_ANY", $.UInt32, 0);

    $.Constant({Static:true , Public:false}, "CERT_FIND_SHA1_HASH", $.UInt32, 65536);

    $.Constant({Static:true , Public:false}, "CERT_FIND_HASH", $.UInt32, 65536);

    $.Constant({Static:true , Public:false}, "CERT_FIND_SUBJECT_STR_A", $.UInt32, 458759);

    $.Constant({Static:true , Public:false}, "CERT_FIND_SUBJECT_STR_W", $.UInt32, 524295);

    $.Constant({Static:true , Public:false}, "CERT_FIND_SUBJECT_STR", $.UInt32, 524295);

    $.Constant({Static:true , Public:false}, "CERT_FIND_ISSUER_STR_A", $.UInt32, 458756);

    $.Constant({Static:true , Public:false}, "CERT_FIND_ISSUER_STR_W", $.UInt32, 524292);

    $.Constant({Static:true , Public:false}, "CERT_FIND_ISSUER_STR", $.UInt32, 524292);

    $.Constant({Static:true , Public:false}, "CERT_CHAIN_REVOCATION_CHECK_END_CERT", $.UInt32, 268435456);

    $.Constant({Static:true , Public:false}, "CERT_CHAIN_REVOCATION_CHECK_CHAIN", $.UInt32, 536870912);

    $.Constant({Static:true , Public:false}, "CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT", $.UInt32, 1073741824);

    $.Constant({Static:true , Public:false}, "CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY", $.UInt32, 2147483648);

    $.Constant({Static:true , Public:false}, "CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT", $.UInt32, 134217728);

    $.Constant({Static:true , Public:false}, "CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG", $.UInt32, 4096);

    $.Constant({Static:true , Public:false}, "USAGE_MATCH_TYPE_AND", $.UInt32, 0);

    $.Constant({Static:true , Public:false}, "USAGE_MATCH_TYPE_OR", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "HCCE_CURRENT_USER", $.UInt32, 0);

    $.Constant({Static:true , Public:false}, "HCCE_LOCAL_MACHINE", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "CERT_TRUST_IS_PEER_TRUSTED", $.UInt32, 2048);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* struct System.IdentityModel.CAPI+CERT_CONTEXT */ 

(function CERT_CONTEXT$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.CAPI+CERT_CONTEXT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "dwCertEncodingType", $.UInt32);

    $.Field({Static:false, Public:false}, "pbCertEncoded", $.IntPtr);

    $.Field({Static:false, Public:false}, "cbCertEncoded", $.UInt32);

    $.Field({Static:false, Public:false}, "pCertInfo", $.IntPtr);

    $.Field({Static:false, Public:false}, "hCertStore", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.CAPI+CRYPTOAPI_BLOB */ 

(function CRYPTOAPI_BLOB$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.CAPI+CRYPTOAPI_BLOB", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cbData", $.UInt32);

    $.Field({Static:false, Public:false}, "pbData", $.IntPtr);

    $.Field({Static:true , Public:false}, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.CAPI+CERT_ENHKEY_USAGE */ 

(function CERT_ENHKEY_USAGE$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.CAPI+CERT_ENHKEY_USAGE", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cUsageIdentifier", $.UInt32);

    $.Field({Static:false, Public:false}, "rgpszUsageIdentifier", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.CAPI+CERT_USAGE_MATCH */ 

(function CERT_USAGE_MATCH$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.CAPI+CERT_USAGE_MATCH", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "dwType", $.UInt32);

    $.Field({Static:false, Public:false}, "Usage", $asm19.TypeRef("System.IdentityModel.CAPI+CERT_ENHKEY_USAGE"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.CAPI+CERT_CHAIN_PARA */ 

(function CERT_CHAIN_PARA$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.CAPI+CERT_CHAIN_PARA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "RequestedUsage", $asm19.TypeRef("System.IdentityModel.CAPI+CERT_USAGE_MATCH"));

    $.Field({Static:false, Public:false}, "RequestedIssuancePolicy", $asm19.TypeRef("System.IdentityModel.CAPI+CERT_USAGE_MATCH"));

    $.Field({Static:false, Public:false}, "dwUrlRetrievalTimeout", $.UInt32);

    $.Field({Static:false, Public:false}, "fCheckRevocationFreshnessTime", $.Boolean);

    $.Field({Static:false, Public:false}, "dwRevocationFreshnessTime", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.CAPI+CERT_CHAIN_POLICY_PARA */ 

(function CERT_CHAIN_POLICY_PARA$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.CAPI+CERT_CHAIN_POLICY_PARA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "dwFlags", $.UInt32);

    $.Field({Static:false, Public:false}, "pvExtraPolicyPara", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.CAPI+CERT_CHAIN_POLICY_STATUS */ 

(function CERT_CHAIN_POLICY_STATUS$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.CAPI+CERT_CHAIN_POLICY_STATUS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "dwError", $.UInt32);

    $.Field({Static:false, Public:false}, "lChainIndex", $.IntPtr);

    $.Field({Static:false, Public:false}, "lElementIndex", $.IntPtr);

    $.Field({Static:false, Public:false}, "pvExtraPolicyStatus", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.CAPI+CERT_CHAIN_CONTEXT */ 

(function CERT_CHAIN_CONTEXT$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.CAPI+CERT_CHAIN_CONTEXT", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "cbSize", $.UInt32);

    $.Field({Static:false, Public:false}, "dwErrorStatus", $.UInt32);

    $.Field({Static:false, Public:false}, "dwInfoStatus", $.UInt32);

    $.Field({Static:false, Public:false}, "cChain", $.UInt32);

    $.Field({Static:false, Public:false}, "rgpChain", $.IntPtr);

    $.Field({Static:false, Public:false}, "cLowerQualityChainContext", $.UInt32);

    $.Field({Static:false, Public:false}, "rgpLowerQualityChainContext", $.IntPtr);

    $.Field({Static:false, Public:false}, "fHasRevocationFreshnessTime", $.UInt32);

    $.Field({Static:false, Public:false}, "dwRevocationFreshnessTime", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SafeCertStoreHandle */ 

(function SafeCertStoreHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IdentityModel.SafeCertStoreHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:true , Public:true }, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm07.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.IdentityModel.SafeCertContextHandle */ 

(function SafeCertContextHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IdentityModel.SafeCertContextHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm07.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.IdentityModel.SafeCertChainHandle */ 

(function SafeCertChainHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IdentityModel.SafeCertChainHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm07.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.IdentityModel.CryptoHelper */ 

(function CryptoHelper$Members () {
  var $, $thisType;








































  JSIL.MakeStaticClass("System.IdentityModel.CryptoHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CeilingDivide", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDecryptor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateEncryptor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateHashAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateKeyedHashAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.KeyedHashAlgorithm"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSignatureForSha256", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureFormatter"), $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FillRandomBytes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateDerivedKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateRandomBytes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateRandomBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RandomNumberGenerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.RandomNumberGenerator"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Rijndael", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.Rijndael"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TripleDES", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.TripleDES"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAlgorithmFromConfig", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultAlgorithm", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIVSize", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSignatureDeFormatterForSha256", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureDeformatter"), [$asm19.TypeRef("System.IdentityModel.Tokens.AsymmetricSecurityKey")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSignatureDeFormatterForSha256", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureDeformatter"), [$asm07.TypeRef("System.Security.Cryptography.RSACryptoServiceProvider")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSignatureFormatterForSha256", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureFormatter"), [$asm19.TypeRef("System.IdentityModel.Tokens.AsymmetricSecurityKey")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSignatureFormatterForSha256", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureFormatter"), [$asm07.TypeRef("System.Security.Cryptography.RSACryptoServiceProvider")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSymmetricAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.SymmetricAlgorithm"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAsymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEqual", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSymmetricSupportedAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "NewDefaultEncryption", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.SymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NewHmacSha1KeyedHashAlgorithm", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.KeyedHashAlgorithm"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NewHmacSha1KeyedHashAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.KeyedHashAlgorithm"), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "NewHmacSha256KeyedHashAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.KeyedHashAlgorithm"), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "NewRijndaelSymmetricAlgorithm", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.Rijndael"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NewSha1HashAlgorithm", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NewSha256HashAlgorithm", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ResetAllCertificates", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnwrapKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateBufferBounds", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifySignatureForSha256", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureDeformatter"), $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    );

    $.Field({Static:true , Public:false}, "emptyBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "random", $asm07.TypeRef("System.Security.Cryptography.RandomNumberGenerator"));

    $.Field({Static:true , Public:false}, "rijndael", $asm07.TypeRef("System.Security.Cryptography.Rijndael"));

    $.Field({Static:true , Public:false}, "tripleDES", $asm07.TypeRef("System.Security.Cryptography.TripleDES"));

    $.Field({Static:true , Public:false}, "algorithmDelegateDictionary", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Func`1", [$.Object])]));

    $.Field({Static:true , Public:false}, "AlgorithmDictionaryLock", $.Object);

    $.Constant({Static:true , Public:true }, "WindowsVistaMajorNumber", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "SHAString", $.String, "SHA");

    $.Constant({Static:true , Public:false}, "SHA1String", $.String, "SHA1");

    $.Constant({Static:true , Public:false}, "SHA256String", $.String, "SHA256");

    $.Constant({Static:true , Public:false}, "SystemSecurityCryptographySha1String", $.String, "System.Security.Cryptography.SHA1");

    $.Property({Static:true , Public:false}, "EmptyBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:true , Public:false}, "Rijndael", $asm07.TypeRef("System.Security.Cryptography.Rijndael"));

    $.Property({Static:true , Public:false}, "TripleDES", $asm07.TypeRef("System.Security.Cryptography.TripleDES"));

    $.Property({Static:true , Public:false}, "RandomNumberGenerator", $asm07.TypeRef("System.Security.Cryptography.RandomNumberGenerator"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.CryptoHelper+KeyGenerator */ 

(function KeyGenerator$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.IdentityModel.CryptoHelper+KeyGenerator", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ComputeCombinedKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateDESKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateDESKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateSymmetricKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateSymmetricKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSecurityKeyIdentifier", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateKeySizeInBytes", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Field({Static:true , Public:false}, "_random", $asm07.TypeRef("System.Security.Cryptography.RandomNumberGenerator"));

    $.Constant({Static:true , Public:false}, "_maxKeyIterations", $.Int32, 20);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.DateTimeUtil */ 

(function DateTimeUtil$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.IdentityModel.DateTimeUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddNonNegative", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetMaxValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm07.TypeRef("System.DateTimeKind")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetMinValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm07.TypeRef("System.DateTimeKind")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUniversalTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]), [$asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUniversalTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm07.TypeRef("System.DateTime")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.DateTimeFormats */ 

(function DateTimeFormats$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.DateTimeFormats", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "Accepted", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "Generated", $.String, "yyyy-MM-ddTHH:mm:ss.fffZ");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.DeflateCookieTransform */ 

(function DeflateCookieTransform$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.CookieTransform"), 
      Name: "System.IdentityModel.DeflateCookieTransform", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Encode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxDecompressedSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxDecompressedSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "_maxDecompressedSize", $.Int32);

    $.Property({Static:false, Public:true }, "MaxDecompressedSize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.DelegatingXmlDictionaryReader */ 

(function DelegatingXmlDictionaryReader$Members () {
  var $, $thisType;












































  JSIL.MakeType({
      BaseType: $asm21.TypeRef("System.Xml.XmlDictionaryReader"), 
      Name: "System.IdentityModel.DelegatingXmlDictionaryReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerReader", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeInnerReader", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsUniqueId", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_innerReader", $asm21.TypeRef("System.Xml.XmlDictionaryReader"));

    $.Property({Static:false, Public:false}, "InnerReader", $asm21.TypeRef("System.Xml.XmlDictionaryReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm2F.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm2F.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm2F.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm2F.TypeRef("System.Xml.XmlSpace"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.IdentityModel.DelegatingXmlDictionaryWriter */ 

(function DelegatingXmlDictionaryWriter$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), 
      Name: "System.IdentityModel.DelegatingXmlDictionaryWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCanonicalization", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCanonicalize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerWriter", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeInnerWriter", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeTracingWriter", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartCanonicalization", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "_innerWriter", $asm21.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.Field({Static:false, Public:false}, "_tracingWriter", $asm2F.TypeRef("System.Xml.XmlWriter"));

    $.Property({Static:false, Public:false}, "InnerWriter", $asm21.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm2F.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanCanonicalize", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.DictionaryManager */ 

(function DictionaryManager$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.DictionaryManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExclusiveC14NDictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.ExclusiveC14NDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentDictionary", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SamlDictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SamlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecureConversationDec2005Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SecureConversationDec2005Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecureConversationFeb2005Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SecureConversationFeb2005Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityAlgorithmDec2005Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDec2005Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityAlgorithmDictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityJan2004Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SecurityJan2004Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityJanXXX2005Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SecurityXXX2005Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustDec2005Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.TrustDec2005Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustFeb2005Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.TrustFeb2005Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UtilityDictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.UtilityDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlEncryptionDictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.XmlEncryptionDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSignatureDictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.XmlSignatureDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExclusiveC14NDictionary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.ExclusiveC14NDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParentDictionary", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SamlDictionary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.SamlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecureConversationDec2005Dictionary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.SecureConversationDec2005Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecureConversationFeb2005Dictionary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.SecureConversationFeb2005Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityAlgorithmDec2005Dictionary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDec2005Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityAlgorithmDictionary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityJan2004Dictionary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.SecurityJan2004Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityJanXXX2005Dictionary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.SecurityXXX2005Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrustDec2005Dictionary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.TrustDec2005Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrustFeb2005Dictionary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.TrustFeb2005Dictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UtilityDictionary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.UtilityDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlEncryptionDictionary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.XmlEncryptionDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSignatureDictionary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.XmlSignatureDictionary"))
    );

    $.Field({Static:false, Public:false}, "samlDictionary", $asm19.TypeRef("System.IdentityModel.SamlDictionary"));

    $.Field({Static:false, Public:false}, "sigantureDictionary", $asm19.TypeRef("System.IdentityModel.XmlSignatureDictionary"));

    $.Field({Static:false, Public:false}, "utilityDictionary", $asm19.TypeRef("System.IdentityModel.UtilityDictionary"));

    $.Field({Static:false, Public:false}, "exclusiveC14NDictionary", $asm19.TypeRef("System.IdentityModel.ExclusiveC14NDictionary"));

    $.Field({Static:false, Public:false}, "securityAlgorithmDec2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDec2005Dictionary"));

    $.Field({Static:false, Public:false}, "securityAlgorithmDictionary", $asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDictionary"));

    $.Field({Static:false, Public:false}, "securityJan2004Dictionary", $asm19.TypeRef("System.IdentityModel.SecurityJan2004Dictionary"));

    $.Field({Static:false, Public:false}, "securityJanXXX2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecurityXXX2005Dictionary"));

    $.Field({Static:false, Public:false}, "secureConversationDec2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecureConversationDec2005Dictionary"));

    $.Field({Static:false, Public:false}, "secureConversationFeb2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecureConversationFeb2005Dictionary"));

    $.Field({Static:false, Public:false}, "trustFeb2005Dictionary", $asm19.TypeRef("System.IdentityModel.TrustFeb2005Dictionary"));

    $.Field({Static:false, Public:false}, "trustDec2005Dictionary", $asm19.TypeRef("System.IdentityModel.TrustDec2005Dictionary"));

    $.Field({Static:false, Public:false}, "xmlEncryptionDictionary", $asm19.TypeRef("System.IdentityModel.XmlEncryptionDictionary"));

    $.Field({Static:false, Public:false}, "parentDictionary", $asm21.TypeRef("System.Xml.IXmlDictionary"));

    $.Property({Static:false, Public:true }, "SamlDictionary", $asm19.TypeRef("System.IdentityModel.SamlDictionary"));

    $.Property({Static:false, Public:true }, "XmlSignatureDictionary", $asm19.TypeRef("System.IdentityModel.XmlSignatureDictionary"));

    $.Property({Static:false, Public:true }, "UtilityDictionary", $asm19.TypeRef("System.IdentityModel.UtilityDictionary"));

    $.Property({Static:false, Public:true }, "ExclusiveC14NDictionary", $asm19.TypeRef("System.IdentityModel.ExclusiveC14NDictionary"));

    $.Property({Static:false, Public:true }, "SecurityAlgorithmDec2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDec2005Dictionary"));

    $.Property({Static:false, Public:true }, "SecurityAlgorithmDictionary", $asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDictionary"));

    $.Property({Static:false, Public:true }, "SecurityJan2004Dictionary", $asm19.TypeRef("System.IdentityModel.SecurityJan2004Dictionary"));

    $.Property({Static:false, Public:true }, "SecurityJanXXX2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecurityXXX2005Dictionary"));

    $.Property({Static:false, Public:true }, "SecureConversationDec2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecureConversationDec2005Dictionary"));

    $.Property({Static:false, Public:true }, "SecureConversationFeb2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecureConversationFeb2005Dictionary"));

    $.Property({Static:false, Public:true }, "TrustDec2005Dictionary", $asm19.TypeRef("System.IdentityModel.TrustDec2005Dictionary"));

    $.Property({Static:false, Public:true }, "TrustFeb2005Dictionary", $asm19.TypeRef("System.IdentityModel.TrustFeb2005Dictionary"));

    $.Property({Static:false, Public:true }, "XmlEncryptionDictionary", $asm19.TypeRef("System.IdentityModel.XmlEncryptionDictionary"));

    $.Property({Static:false, Public:true }, "ParentDictionary", $asm21.TypeRef("System.Xml.IXmlDictionary"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.EncryptedTypeElement */ 

(function EncryptedTypeElement$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.EncryptedTypeElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CipherData", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.CipherDataElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncryptionMethod", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.EncryptionMethodElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyIdentifier", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadExtensions", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Algorithm", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CipherData", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.CipherDataElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EncryptionMethod", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.EncryptionMethodElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyIdentifier", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_keyInfo", $asm19.TypeRef("System.IdentityModel.KeyInfo"));

    $.Field({Static:false, Public:false}, "_encryptionMethod", $asm19.TypeRef("System.IdentityModel.EncryptionMethodElement"));

    $.Field({Static:false, Public:false}, "_cipherData", $asm19.TypeRef("System.IdentityModel.CipherDataElement"));

    $.Field({Static:false, Public:false}, "_properties", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "_keyInfoSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Field({Static:false, Public:false}, "_id", $.String);

    $.Field({Static:false, Public:false}, "_type", $.String);

    $.Field({Static:false, Public:false}, "_mimeType", $.String);

    $.Field({Static:false, Public:false}, "_encoding", $.String);

    $.Property({Static:false, Public:true }, "Algorithm", $.String);

    $.Property({Static:false, Public:true }, "Id", $.String);

    $.Property({Static:false, Public:true }, "EncryptionMethod", $asm19.TypeRef("System.IdentityModel.EncryptionMethodElement"));

    $.Property({Static:false, Public:true }, "CipherData", $asm19.TypeRef("System.IdentityModel.CipherDataElement"));

    $.Property({Static:false, Public:true }, "KeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Property({Static:false, Public:true }, "TokenSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Property({Static:false, Public:true }, "Type", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.EncryptedDataElement */ 

(function EncryptedDataElement$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.EncryptedTypeElement"), 
      Name: "System.IdentityModel.EncryptedDataElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CanReadFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Decrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.SymmetricAlgorithm")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Encrypt", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Cryptography.SymmetricAlgorithm"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtractIVAndDecrypt", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm07.TypeRef("System.Security.Cryptography.SymmetricAlgorithm"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateIVAndEncrypt", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Cryptography.SymmetricAlgorithm"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadExtensions", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.EncryptedKeyElement */ 

(function EncryptedKeyElement$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.EncryptedTypeElement"), 
      Name: "System.IdentityModel.EncryptedKeyElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CarriedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataReferences", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyReferences", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetClause", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.EncryptedKeyIdentifierClause"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadExtensions", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.Field({Static:false, Public:false}, "_carriedName", $.String);

    $.Field({Static:false, Public:false}, "_recipient", $.String);

    $.Field({Static:false, Public:false}, "_keyReferences", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "_dataReferences", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Property({Static:false, Public:true }, "CarriedName", $.String);

    $.Property({Static:false, Public:true }, "DataReferences", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]));

    $.Property({Static:false, Public:true }, "KeyReferences", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.EncryptionMethodElement */ 

(function EncryptionMethodElement$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.EncryptionMethodElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadXml", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Algorithm", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Parameters", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXml", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "_algorithm", $.String);

    $.Field({Static:false, Public:false}, "_parameters", $.String);

    $.Property({Static:false, Public:true }, "Algorithm", $.String);

    $.Property({Static:false, Public:true }, "Parameters", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.EnvelopedSignatureReader */ 

(function EnvelopedSignatureReader$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.DelegatingXmlDictionaryReader"), 
      Name: "System.IdentityModel.EnvelopedSignatureReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlTokens", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.XmlTokenStream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnEndOfRootElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSignature", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveSigningCredentials", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "TryReadSignature", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_automaticallyReadSignature", $.Boolean);

    $.Field({Static:false, Public:false}, "_dictionaryManager", $asm19.TypeRef("System.IdentityModel.DictionaryManager"));

    $.Field({Static:false, Public:false}, "_elementCount", $.Int32);

    $.Field({Static:false, Public:false}, "_resolveIntrinsicSigningKeys", $.Boolean);

    $.Field({Static:false, Public:false}, "_requireSignature", $.Boolean);

    $.Field({Static:false, Public:false}, "_signingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Field({Static:false, Public:false}, "_signingTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Field({Static:false, Public:false}, "_signedXml", $asm19.TypeRef("System.IdentityModel.SignedXml"));

    $.Field({Static:false, Public:false}, "_tokenSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Field({Static:false, Public:false}, "_wrappedReader", $asm19.TypeRef("System.IdentityModel.WrappedReader"));

    $.Field({Static:false, Public:false}, "_disposed", $.Boolean);

    $.Property({Static:false, Public:true }, "SigningCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Property({Static:false, Public:false}, "XmlTokens", $asm19.TypeRef("System.IdentityModel.XmlTokenStream"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Transform */ 

(function Transform$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Transform", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Algorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NeedsInclusiveContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Process", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"), 
          $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessAndDigest", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Object, $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"), 
          $.String, $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.DictionaryManager"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Algorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NeedsInclusiveContext", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.EnvelopedSignatureTransform */ 

(function EnvelopedSignatureTransform$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Transform"), 
      Name: "System.IdentityModel.EnvelopedSignatureTransform", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Algorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Process", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"), 
          $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessAndDigest", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Object, $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"), 
          $.String, $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.DictionaryManager"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Algorithm", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.EnvelopedSignatureWriter */ 

(function EnvelopedSignatureWriter$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.DelegatingXmlDictionaryWriter"), 
      Name: "System.IdentityModel.EnvelopedSignatureWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"), 
          $.String, $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeSignature", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnEndRootElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteSignature", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.Field({Static:false, Public:false}, "_dictionaryManager", $asm19.TypeRef("System.IdentityModel.DictionaryManager"));

    $.Field({Static:false, Public:false}, "_innerWriter", $asm2F.TypeRef("System.Xml.XmlWriter"));

    $.Field({Static:false, Public:false}, "_signingCreds", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Field({Static:false, Public:false}, "_referenceId", $.String);

    $.Field({Static:false, Public:false}, "_tokenSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Field({Static:false, Public:false}, "_hashStream", $asm19.TypeRef("System.IdentityModel.HashStream"));

    $.Field({Static:false, Public:false}, "_hashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"));

    $.Field({Static:false, Public:false}, "_elementCount", $.Int32);

    $.Field({Static:false, Public:false}, "_signatureFragment", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "_endFragment", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "_hasSignatureBeenMarkedForInsert", $.Boolean);

    $.Field({Static:false, Public:false}, "_writerStream", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "_preCanonicalTracingStream", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "_disposed", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.ExclusiveCanonicalizationTransform */ 

(function ExclusiveCanonicalizationTransform$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Transform"), 
      Name: "System.IdentityModel.ExclusiveCanonicalizationTransform", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Algorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeComments", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InclusiveNamespacesPrefixList", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NeedsInclusiveContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConfiguredDriver", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.CanonicalizationDriver"), [$asm19.TypeRef("System.IdentityModel.SignatureResourcePool")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInclusivePrefixes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Process", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"), 
          $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessAndDigest", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Object, $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"), 
          $.String, $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ProcessAndDigest", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"), 
          $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessReaderInput", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"), 
          $asm19.TypeRef("System.IdentityModel.HashStream")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.DictionaryManager"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InclusiveNamespacesPrefixList", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "TokenizeInclusivePrefixList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:false, Public:false}, "includeComments", $.Boolean);

    $.Field({Static:false, Public:false}, "algorithm", $.String);

    $.Field({Static:false, Public:false}, "inclusiveNamespacesPrefixList", $.String);

    $.Field({Static:false, Public:false}, "inclusivePrefixes", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "inclusiveListElementPrefix", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "isCanonicalizationMethod", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Algorithm", $.String);

    $.Property({Static:false, Public:true }, "IncludeComments", $.Boolean);

    $.Property({Static:false, Public:true }, "InclusiveNamespacesPrefixList", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NeedsInclusiveContext", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.TransformFactory */ 

(function TransformFactory$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.TransformFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateTransform", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Transform"), [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.StandardTransformFactory */ 

(function StandardTransformFactory$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.TransformFactory"), 
      Name: "System.IdentityModel.StandardTransformFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateTransform", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Transform"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:true , Public:false}, "instance", $.Type);

    $.Property({Static:true , Public:false}, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.ExtendedTransformFactory */ 

(function ExtendedTransformFactory$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.StandardTransformFactory"), 
      Name: "System.IdentityModel.ExtendedTransformFactory", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateTransform", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Transform"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:true , Public:false}, "instance", $.Type);

    $.Property({Static:true , Public:false}, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.HashStream */ 

(function HashStream$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.IdentityModel.HashStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "FlushHash", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "FlushHash", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.MemoryStream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "FlushHashAndGetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "FlushHashAndGetValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.IO.MemoryStream")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Hash", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "hash", $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"));

    $.Field({Static:false, Public:false}, "$length", $.Int64);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "hashNeedsReset", $.Boolean);

    $.Field({Static:false, Public:false}, "logStream", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true }, "Hash", $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"));

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.IdentityModelDictionary */ 

(function IdentityModelDictionary$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.IdentityModelDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelStrings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CurrentVersion", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm21.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm21.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$asm21.TypeRef("System.Xml.XmlDictionaryString")])])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Version1", $.Type);

    $.Field({Static:false, Public:false}, "strings", $asm19.TypeRef("System.IdentityModel.IdentityModelStrings"));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "dictionaryStrings", $jsilcore.TypeRef("System.Array", [$asm21.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Field({Static:false, Public:false}, "dictionary", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false}, "versionedDictionaryStrings", $jsilcore.TypeRef("System.Array", [$asm21.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Property({Static:true , Public:true }, "CurrentVersion", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm21.TypeRef("System.Xml.IXmlDictionary")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.IdentityModelStrings */ 

(function IdentityModelStrings$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.IdentityModelStrings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.IdentityModel.IdentityModelStringsVersion1 */ 

(function IdentityModelStringsVersion1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.IdentityModelStrings"), 
      Name: "System.IdentityModel.IdentityModelStringsVersion1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.Constant({Static:true , Public:true }, "String0", $.String, "Algorithm");

    $.Constant({Static:true , Public:true }, "String1", $.String, "URI");

    $.Constant({Static:true , Public:true }, "String2", $.String, "Reference");

    $.Constant({Static:true , Public:true }, "String3", $.String, "Id");

    $.Constant({Static:true , Public:true }, "String4", $.String, "Transforms");

    $.Constant({Static:true , Public:true }, "String5", $.String, "Transform");

    $.Constant({Static:true , Public:true }, "String6", $.String, "DigestMethod");

    $.Constant({Static:true , Public:true }, "String7", $.String, "DigestValue");

    $.Constant({Static:true , Public:true }, "String8", $.String, "http://www.w3.org/2000/09/xmldsig#");

    $.Constant({Static:true , Public:true }, "String9", $.String, "http://www.w3.org/2000/09/xmldsig#enveloped-signature");

    $.Constant({Static:true , Public:true }, "String10", $.String, "KeyInfo");

    $.Constant({Static:true , Public:true }, "String11", $.String, "Signature");

    $.Constant({Static:true , Public:true }, "String12", $.String, "SignedInfo");

    $.Constant({Static:true , Public:true }, "String13", $.String, "CanonicalizationMethod");

    $.Constant({Static:true , Public:true }, "String14", $.String, "SignatureMethod");

    $.Constant({Static:true , Public:true }, "String15", $.String, "SignatureValue");

    $.Constant({Static:true , Public:true }, "String16", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd");

    $.Constant({Static:true , Public:true }, "String17", $.String, "Timestamp");

    $.Constant({Static:true , Public:true }, "String18", $.String, "Created");

    $.Constant({Static:true , Public:true }, "String19", $.String, "Expires");

    $.Constant({Static:true , Public:true }, "String20", $.String, "http://www.w3.org/2001/10/xml-exc-c14n#");

    $.Constant({Static:true , Public:true }, "String21", $.String, "PrefixList");

    $.Constant({Static:true , Public:true }, "String22", $.String, "InclusiveNamespaces");

    $.Constant({Static:true , Public:true }, "String23", $.String, "ec");

    $.Constant({Static:true , Public:true }, "String24", $.String, "Access");

    $.Constant({Static:true , Public:true }, "String25", $.String, "AccessDecision");

    $.Constant({Static:true , Public:true }, "String26", $.String, "Action");

    $.Constant({Static:true , Public:true }, "String27", $.String, "Advice");

    $.Constant({Static:true , Public:true }, "String28", $.String, "Assertion");

    $.Constant({Static:true , Public:true }, "String29", $.String, "AssertionID");

    $.Constant({Static:true , Public:true }, "String30", $.String, "AssertionIDReference");

    $.Constant({Static:true , Public:true }, "String31", $.String, "Attribute");

    $.Constant({Static:true , Public:true }, "String32", $.String, "AttributeName");

    $.Constant({Static:true , Public:true }, "String33", $.String, "AttributeNamespace");

    $.Constant({Static:true , Public:true }, "String34", $.String, "AttributeStatement");

    $.Constant({Static:true , Public:true }, "String35", $.String, "AttributeValue");

    $.Constant({Static:true , Public:true }, "String36", $.String, "Audience");

    $.Constant({Static:true , Public:true }, "String37", $.String, "AudienceRestrictionCondition");

    $.Constant({Static:true , Public:true }, "String38", $.String, "AuthenticationInstant");

    $.Constant({Static:true , Public:true }, "String39", $.String, "AuthenticationMethod");

    $.Constant({Static:true , Public:true }, "String40", $.String, "AuthenticationStatement");

    $.Constant({Static:true , Public:true }, "String41", $.String, "AuthorityBinding");

    $.Constant({Static:true , Public:true }, "String42", $.String, "AuthorityKind");

    $.Constant({Static:true , Public:true }, "String43", $.String, "AuthorizationDecisionStatement");

    $.Constant({Static:true , Public:true }, "String44", $.String, "Binding");

    $.Constant({Static:true , Public:true }, "String45", $.String, "Condition");

    $.Constant({Static:true , Public:true }, "String46", $.String, "Conditions");

    $.Constant({Static:true , Public:true }, "String47", $.String, "Decision");

    $.Constant({Static:true , Public:true }, "String48", $.String, "DoNotCacheCondition");

    $.Constant({Static:true , Public:true }, "String49", $.String, "Evidence");

    $.Constant({Static:true , Public:true }, "String50", $.String, "IssueInstant");

    $.Constant({Static:true , Public:true }, "String51", $.String, "Issuer");

    $.Constant({Static:true , Public:true }, "String52", $.String, "Location");

    $.Constant({Static:true , Public:true }, "String53", $.String, "MajorVersion");

    $.Constant({Static:true , Public:true }, "String54", $.String, "MinorVersion");

    $.Constant({Static:true , Public:true }, "String55", $.String, "urn:oasis:names:tc:SAML:1.0:assertion");

    $.Constant({Static:true , Public:true }, "String56", $.String, "NameIdentifier");

    $.Constant({Static:true , Public:true }, "String57", $.String, "Format");

    $.Constant({Static:true , Public:true }, "String58", $.String, "NameQualifier");

    $.Constant({Static:true , Public:true }, "String59", $.String, "Namespace");

    $.Constant({Static:true , Public:true }, "String60", $.String, "NotBefore");

    $.Constant({Static:true , Public:true }, "String61", $.String, "NotOnOrAfter");

    $.Constant({Static:true , Public:true }, "String62", $.String, "saml");

    $.Constant({Static:true , Public:true }, "String63", $.String, "Statement");

    $.Constant({Static:true , Public:true }, "String64", $.String, "Subject");

    $.Constant({Static:true , Public:true }, "String65", $.String, "SubjectConfirmation");

    $.Constant({Static:true , Public:true }, "String66", $.String, "SubjectConfirmationData");

    $.Constant({Static:true , Public:true }, "String67", $.String, "ConfirmationMethod");

    $.Constant({Static:true , Public:true }, "String68", $.String, "urn:oasis:names:tc:SAML:1.0:cm:holder-of-key");

    $.Constant({Static:true , Public:true }, "String69", $.String, "urn:oasis:names:tc:SAML:1.0:cm:sender-vouches");

    $.Constant({Static:true , Public:true }, "String70", $.String, "SubjectLocality");

    $.Constant({Static:true , Public:true }, "String71", $.String, "DNSAddress");

    $.Constant({Static:true , Public:true }, "String72", $.String, "IPAddress");

    $.Constant({Static:true , Public:true }, "String73", $.String, "SubjectStatement");

    $.Constant({Static:true , Public:true }, "String74", $.String, "urn:oasis:names:tc:SAML:1.0:am:unspecified");

    $.Constant({Static:true , Public:true }, "String75", $.String, "xmlns");

    $.Constant({Static:true , Public:true }, "String76", $.String, "Resource");

    $.Constant({Static:true , Public:true }, "String77", $.String, "UserName");

    $.Constant({Static:true , Public:true }, "String78", $.String, "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName");

    $.Constant({Static:true , Public:true }, "String79", $.String, "EmailName");

    $.Constant({Static:true , Public:true }, "String80", $.String, "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress");

    $.Constant({Static:true , Public:true }, "String81", $.String, "u");

    $.Constant({Static:true , Public:true }, "String82", $.String, "KeyName");

    $.Constant({Static:true , Public:true }, "String83", $.String, "Type");

    $.Constant({Static:true , Public:true }, "String84", $.String, "MgmtData");

    $.Constant({Static:true , Public:true }, "String85", $.String, "");

    $.Constant({Static:true , Public:true }, "String86", $.String, "KeyValue");

    $.Constant({Static:true , Public:true }, "String87", $.String, "RSAKeyValue");

    $.Constant({Static:true , Public:true }, "String88", $.String, "Modulus");

    $.Constant({Static:true , Public:true }, "String89", $.String, "Exponent");

    $.Constant({Static:true , Public:true }, "String90", $.String, "X509Data");

    $.Constant({Static:true , Public:true }, "String91", $.String, "X509IssuerSerial");

    $.Constant({Static:true , Public:true }, "String92", $.String, "X509IssuerName");

    $.Constant({Static:true , Public:true }, "String93", $.String, "X509SerialNumber");

    $.Constant({Static:true , Public:true }, "String94", $.String, "X509Certificate");

    $.Constant({Static:true , Public:true }, "String95", $.String, "http://www.w3.org/2001/04/xmlenc#aes128-cbc");

    $.Constant({Static:true , Public:true }, "String96", $.String, "http://www.w3.org/2001/04/xmlenc#kw-aes128");

    $.Constant({Static:true , Public:true }, "String97", $.String, "http://www.w3.org/2001/04/xmlenc#aes192-cbc");

    $.Constant({Static:true , Public:true }, "String98", $.String, "http://www.w3.org/2001/04/xmlenc#kw-aes192");

    $.Constant({Static:true , Public:true }, "String99", $.String, "http://www.w3.org/2001/04/xmlenc#aes256-cbc");

    $.Constant({Static:true , Public:true }, "String100", $.String, "http://www.w3.org/2001/04/xmlenc#kw-aes256");

    $.Constant({Static:true , Public:true }, "String101", $.String, "http://www.w3.org/2001/04/xmlenc#des-cbc");

    $.Constant({Static:true , Public:true }, "String102", $.String, "http://www.w3.org/2000/09/xmldsig#dsa-sha1");

    $.Constant({Static:true , Public:true }, "String103", $.String, "http://www.w3.org/2001/10/xml-exc-c14n#WithComments");

    $.Constant({Static:true , Public:true }, "String104", $.String, "http://www.w3.org/2000/09/xmldsig#hmac-sha1");

    $.Constant({Static:true , Public:true }, "String105", $.String, "http://www.w3.org/2001/04/xmldsig-more#hmac-sha256");

    $.Constant({Static:true , Public:true }, "String106", $.String, "http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");

    $.Constant({Static:true , Public:true }, "String107", $.String, "http://www.w3.org/2001/04/xmlenc#ripemd160");

    $.Constant({Static:true , Public:true }, "String108", $.String, "http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p");

    $.Constant({Static:true , Public:true }, "String109", $.String, "http://www.w3.org/2000/09/xmldsig#rsa-sha1");

    $.Constant({Static:true , Public:true }, "String110", $.String, "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256");

    $.Constant({Static:true , Public:true }, "String111", $.String, "http://www.w3.org/2001/04/xmlenc#rsa-1_5");

    $.Constant({Static:true , Public:true }, "String112", $.String, "http://www.w3.org/2000/09/xmldsig#sha1");

    $.Constant({Static:true , Public:true }, "String113", $.String, "http://www.w3.org/2001/04/xmlenc#sha256");

    $.Constant({Static:true , Public:true }, "String114", $.String, "http://www.w3.org/2001/04/xmlenc#sha512");

    $.Constant({Static:true , Public:true }, "String115", $.String, "http://www.w3.org/2001/04/xmlenc#tripledes-cbc");

    $.Constant({Static:true , Public:true }, "String116", $.String, "http://www.w3.org/2001/04/xmlenc#kw-tripledes");

    $.Constant({Static:true , Public:true }, "String117", $.String, "http://schemas.xmlsoap.org/2005/02/trust/tlsnego#TLS_Wrap");

    $.Constant({Static:true , Public:true }, "String118", $.String, "http://schemas.xmlsoap.org/2005/02/trust/spnego#GSS_Wrap");

    $.Constant({Static:true , Public:true }, "String119", $.String, "o");

    $.Constant({Static:true , Public:true }, "String120", $.String, "Nonce");

    $.Constant({Static:true , Public:true }, "String121", $.String, "Password");

    $.Constant({Static:true , Public:true }, "String122", $.String, "PasswordText");

    $.Constant({Static:true , Public:true }, "String123", $.String, "Username");

    $.Constant({Static:true , Public:true }, "String124", $.String, "UsernameToken");

    $.Constant({Static:true , Public:true }, "String125", $.String, "BinarySecurityToken");

    $.Constant({Static:true , Public:true }, "String126", $.String, "EncodingType");

    $.Constant({Static:true , Public:true }, "String127", $.String, "KeyIdentifier");

    $.Constant({Static:true , Public:true }, "String128", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary");

    $.Constant({Static:true , Public:true }, "String129", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#HexBinary");

    $.Constant({Static:true , Public:true }, "String130", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Text");

    $.Constant({Static:true , Public:true }, "String131", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509SubjectKeyIdentifier");

    $.Constant({Static:true , Public:true }, "String132", $.String, "http://docs.oasis-open.org/wss/oasis-wss-kerberos-token-profile-1.1#GSS_Kerberosv5_AP_REQ");

    $.Constant({Static:true , Public:true }, "String133", $.String, "http://docs.oasis-open.org/wss/oasis-wss-kerberos-token-profile-1.1#GSS_Kerberosv5_AP_REQ1510");

    $.Constant({Static:true , Public:true }, "String134", $.String, "http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.0#SAMLAssertionID");

    $.Constant({Static:true , Public:true }, "String135", $.String, "http://docs.oasis-open.org/wss/oasis-wss-rel-token-profile-1.0.pdf#license");

    $.Constant({Static:true , Public:true }, "String136", $.String, "FailedAuthentication");

    $.Constant({Static:true , Public:true }, "String137", $.String, "InvalidSecurityToken");

    $.Constant({Static:true , Public:true }, "String138", $.String, "InvalidSecurity");

    $.Constant({Static:true , Public:true }, "String139", $.String, "SecurityTokenReference");

    $.Constant({Static:true , Public:true }, "String140", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");

    $.Constant({Static:true , Public:true }, "String141", $.String, "Security");

    $.Constant({Static:true , Public:true }, "String142", $.String, "ValueType");

    $.Constant({Static:true , Public:true }, "String143", $.String, "http://docs.oasis-open.org/wss/oasis-wss-kerberos-token-profile-1.1#Kerberosv5APREQSHA1");

    $.Constant({Static:true , Public:true }, "String144", $.String, "k");

    $.Constant({Static:true , Public:true }, "String145", $.String, "SignatureConfirmation");

    $.Constant({Static:true , Public:true }, "String146", $.String, "Value");

    $.Constant({Static:true , Public:true }, "String147", $.String, "TokenType");

    $.Constant({Static:true , Public:true }, "String148", $.String, "http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1#ThumbprintSHA1");

    $.Constant({Static:true , Public:true }, "String149", $.String, "http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1#EncryptedKey");

    $.Constant({Static:true , Public:true }, "String150", $.String, "http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1#EncryptedKeySHA1");

    $.Constant({Static:true , Public:true }, "String151", $.String, "http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1");

    $.Constant({Static:true , Public:true }, "String152", $.String, "http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0");

    $.Constant({Static:true , Public:true }, "String153", $.String, "http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID");

    $.Constant({Static:true , Public:true }, "String154", $.String, "EncryptedHeader");

    $.Constant({Static:true , Public:true }, "String155", $.String, "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd");

    $.Constant({Static:true , Public:true }, "String156", $.String, "http://www.w3.org/2001/04/xmlenc#");

    $.Constant({Static:true , Public:true }, "String157", $.String, "DataReference");

    $.Constant({Static:true , Public:true }, "String158", $.String, "EncryptedData");

    $.Constant({Static:true , Public:true }, "String159", $.String, "EncryptionMethod");

    $.Constant({Static:true , Public:true }, "String160", $.String, "CipherData");

    $.Constant({Static:true , Public:true }, "String161", $.String, "CipherValue");

    $.Constant({Static:true , Public:true }, "String162", $.String, "ReferenceList");

    $.Constant({Static:true , Public:true }, "String163", $.String, "Encoding");

    $.Constant({Static:true , Public:true }, "String164", $.String, "MimeType");

    $.Constant({Static:true , Public:true }, "String165", $.String, "CarriedKeyName");

    $.Constant({Static:true , Public:true }, "String166", $.String, "Recipient");

    $.Constant({Static:true , Public:true }, "String167", $.String, "EncryptedKey");

    $.Constant({Static:true , Public:true }, "String168", $.String, "KeyReference");

    $.Constant({Static:true , Public:true }, "String169", $.String, "e");

    $.Constant({Static:true , Public:true }, "String170", $.String, "http://www.w3.org/2001/04/xmlenc#Element");

    $.Constant({Static:true , Public:true }, "String171", $.String, "http://www.w3.org/2001/04/xmlenc#Content");

    $.Constant({Static:true , Public:true }, "String172", $.String, "http://schemas.xmlsoap.org/ws/2005/02/sc");

    $.Constant({Static:true , Public:true }, "String173", $.String, "DerivedKeyToken");

    $.Constant({Static:true , Public:true }, "String174", $.String, "Length");

    $.Constant({Static:true , Public:true }, "String175", $.String, "SecurityContextToken");

    $.Constant({Static:true , Public:true }, "String176", $.String, "Generation");

    $.Constant({Static:true , Public:true }, "String177", $.String, "Label");

    $.Constant({Static:true , Public:true }, "String178", $.String, "Offset");

    $.Constant({Static:true , Public:true }, "String179", $.String, "Properties");

    $.Constant({Static:true , Public:true }, "String180", $.String, "Identifier");

    $.Constant({Static:true , Public:true }, "String181", $.String, "Cookie");

    $.Constant({Static:true , Public:true }, "String182", $.String, "RenewNeeded");

    $.Constant({Static:true , Public:true }, "String183", $.String, "BadContextToken");

    $.Constant({Static:true , Public:true }, "String184", $.String, "c");

    $.Constant({Static:true , Public:true }, "String185", $.String, "http://schemas.xmlsoap.org/ws/2005/02/sc/dk");

    $.Constant({Static:true , Public:true }, "String186", $.String, "http://schemas.xmlsoap.org/ws/2005/02/sc/sct");

    $.Constant({Static:true , Public:true }, "String187", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/SCT");

    $.Constant({Static:true , Public:true }, "String188", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/SCT");

    $.Constant({Static:true , Public:true }, "String189", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/SCT/Renew");

    $.Constant({Static:true , Public:true }, "String190", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/SCT/Renew");

    $.Constant({Static:true , Public:true }, "String191", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/SCT/Cancel");

    $.Constant({Static:true , Public:true }, "String192", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/SCT/Cancel");

    $.Constant({Static:true , Public:true }, "String193", $.String, "RequestSecurityTokenResponseCollection");

    $.Constant({Static:true , Public:true }, "String194", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust");

    $.Constant({Static:true , Public:true }, "String195", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust#BinarySecret");

    $.Constant({Static:true , Public:true }, "String196", $.String, "AUTH-HASH");

    $.Constant({Static:true , Public:true }, "String197", $.String, "RequestSecurityTokenResponse");

    $.Constant({Static:true , Public:true }, "String198", $.String, "KeySize");

    $.Constant({Static:true , Public:true }, "String199", $.String, "RequestedTokenReference");

    $.Constant({Static:true , Public:true }, "String200", $.String, "AppliesTo");

    $.Constant({Static:true , Public:true }, "String201", $.String, "Authenticator");

    $.Constant({Static:true , Public:true }, "String202", $.String, "CombinedHash");

    $.Constant({Static:true , Public:true }, "String203", $.String, "BinaryExchange");

    $.Constant({Static:true , Public:true }, "String204", $.String, "Lifetime");

    $.Constant({Static:true , Public:true }, "String205", $.String, "RequestedSecurityToken");

    $.Constant({Static:true , Public:true }, "String206", $.String, "Entropy");

    $.Constant({Static:true , Public:true }, "String207", $.String, "RequestedProofToken");

    $.Constant({Static:true , Public:true }, "String208", $.String, "ComputedKey");

    $.Constant({Static:true , Public:true }, "String209", $.String, "RequestSecurityToken");

    $.Constant({Static:true , Public:true }, "String210", $.String, "RequestType");

    $.Constant({Static:true , Public:true }, "String211", $.String, "Context");

    $.Constant({Static:true , Public:true }, "String212", $.String, "BinarySecret");

    $.Constant({Static:true , Public:true }, "String213", $.String, "http://schemas.microsoft.com/net/2004/07/secext/WS-SPNego");

    $.Constant({Static:true , Public:true }, "String214", $.String, "http://schemas.microsoft.com/net/2004/07/secext/TLSNego");

    $.Constant({Static:true , Public:true }, "String215", $.String, "t");

    $.Constant({Static:true , Public:true }, "String216", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue");

    $.Constant({Static:true , Public:true }, "String217", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Issue");

    $.Constant({Static:true , Public:true }, "String218", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/Issue");

    $.Constant({Static:true , Public:true }, "String219", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/SymmetricKey");

    $.Constant({Static:true , Public:true }, "String220", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/CK/PSHA1");

    $.Constant({Static:true , Public:true }, "String221", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/Nonce");

    $.Constant({Static:true , Public:true }, "String222", $.String, "RenewTarget");

    $.Constant({Static:true , Public:true }, "String223", $.String, "CancelTarget");

    $.Constant({Static:true , Public:true }, "String224", $.String, "RequestedTokenCancelled");

    $.Constant({Static:true , Public:true }, "String225", $.String, "RequestedAttachedReference");

    $.Constant({Static:true , Public:true }, "String226", $.String, "RequestedUnattachedReference");

    $.Constant({Static:true , Public:true }, "String227", $.String, "IssuedTokens");

    $.Constant({Static:true , Public:true }, "String228", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/Renew");

    $.Constant({Static:true , Public:true }, "String229", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/Cancel");

    $.Constant({Static:true , Public:true }, "String230", $.String, "KeyType");

    $.Constant({Static:true , Public:true }, "String231", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/PublicKey");

    $.Constant({Static:true , Public:true }, "String232", $.String, "Claims");

    $.Constant({Static:true , Public:true }, "String233", $.String, "InvalidRequest");

    $.Constant({Static:true , Public:true }, "String234", $.String, "UseKey");

    $.Constant({Static:true , Public:true }, "String235", $.String, "SignWith");

    $.Constant({Static:true , Public:true }, "String236", $.String, "EncryptWith");

    $.Constant({Static:true , Public:true }, "String237", $.String, "EncryptionAlgorithm");

    $.Constant({Static:true , Public:true }, "String238", $.String, "CanonicalizationAlgorithm");

    $.Constant({Static:true , Public:true }, "String239", $.String, "ComputedKeyAlgorithm");

    $.Constant({Static:true , Public:true }, "String240", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/spnego");

    $.Constant({Static:true , Public:true }, "String241", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/tlsnego");

    $.Constant({Static:true , Public:true }, "String242", $.String, "trust");

    $.Constant({Static:true , Public:true }, "String243", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue");

    $.Constant({Static:true , Public:true }, "String244", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Issue");

    $.Constant({Static:true , Public:true }, "String245", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue");

    $.Constant({Static:true , Public:true }, "String246", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/AsymmetricKey");

    $.Constant({Static:true , Public:true }, "String247", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/SymmetricKey");

    $.Constant({Static:true , Public:true }, "String248", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Nonce");

    $.Constant({Static:true , Public:true }, "String249", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/CK/PSHA1");

    $.Constant({Static:true , Public:true }, "String250", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/PublicKey");

    $.Constant({Static:true , Public:true }, "String251", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512");

    $.Constant({Static:true , Public:true }, "String252", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512#BinarySecret");

    $.Constant({Static:true , Public:true }, "String253", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTRC/IssueFinal");

    $.Constant({Static:true , Public:true }, "String254", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Renew");

    $.Constant({Static:true , Public:true }, "String255", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Renew");

    $.Constant({Static:true , Public:true }, "String256", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/RenewFinal");

    $.Constant({Static:true , Public:true }, "String257", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Cancel");

    $.Constant({Static:true , Public:true }, "String258", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Cancel");

    $.Constant({Static:true , Public:true }, "String259", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/CancelFinal");

    $.Constant({Static:true , Public:true }, "String260", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Renew");

    $.Constant({Static:true , Public:true }, "String261", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Cancel");

    $.Constant({Static:true , Public:true }, "String262", $.String, "KeyWrapAlgorithm");

    $.Constant({Static:true , Public:true }, "String263", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer");

    $.Constant({Static:true , Public:true }, "String264", $.String, "SecondaryParameters");

    $.Constant({Static:true , Public:true }, "String265", $.String, "Dialect");

    $.Constant({Static:true , Public:true }, "String266", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity");

    $.Constant({Static:true , Public:true }, "String267", $.String, "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/dk/p_sha1");

    $.Constant({Static:true , Public:true }, "String268", $.String, "sc");

    $.Constant({Static:true , Public:true }, "String269", $.String, "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/dk");

    $.Constant({Static:true , Public:true }, "String270", $.String, "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/sct");

    $.Constant({Static:true , Public:true }, "String271", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/SCT");

    $.Constant({Static:true , Public:true }, "String272", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/SCT");

    $.Constant({Static:true , Public:true }, "String273", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/SCT/Renew");

    $.Constant({Static:true , Public:true }, "String274", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/SCT/Renew");

    $.Constant({Static:true , Public:true }, "String275", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/SCT/Cancel");

    $.Constant({Static:true , Public:true }, "String276", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/SCT/Cancel");

    $.Constant({Static:true , Public:true }, "String277", $.String, "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512");

    $.Constant({Static:true , Public:true }, "String278", $.String, "Instance");

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.IdentityModel.IdentityModelWrappedXmlDictionaryReader */ 

(function IdentityModelWrappedXmlDictionaryReader$Members () {
  var $, $thisType;




































































  JSIL.MakeType({
      BaseType: $asm21.TypeRef("System.Xml.XmlDictionaryReader"), 
      Name: "System.IdentityModel.IdentityModelWrappedXmlDictionaryReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Quotas", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $asm2F.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOuterXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_reader", $asm2F.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "_xmlDictionaryReaderQuotas", $asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm2F.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm2F.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm2F.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm2F.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Quotas", $asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.ImplementInterfaces(
      /* 1 */ $asm2F.TypeRef("System.Xml.IXmlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.IdentityModel.ImmutableCollection`1 */ 

(function ImmutableCollection$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [new JSIL.GenericParameter("T", "System.IdentityModel.ImmutableCollection`1")]), 
      Name: "System.IdentityModel.ImmutableCollection`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ClearItems", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InsertItem", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RemoveItem", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItem", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IList"), "get_IsReadOnly");

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 8 */ $asm07.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), 
      /* 9 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 10 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.IdentityModel.IPrefixGenerator */ 

JSIL.MakeInterface(
  "System.IdentityModel.IPrefixGenerator", false, [], function ($) {
    $.Method({}, "GetPrefix", new JSIL.MethodSignature($.String, [
          $.String, $.Int32, 
          $.Boolean
        ]));
  }, []);

/* interface System.IdentityModel.ISecurityElement */ 

JSIL.MakeInterface(
  "System.IdentityModel.ISecurityElement", false, [], function ($) {
    $.Method({}, "get_HasId", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_Id", JSIL.MethodSignature.Return($.String));
    $.Method({}, "WriteTo", new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")]));
    $.Property({}, "HasId");
    $.Property({}, "Id");
  }, []);

/* interface System.IdentityModel.ISignatureValueSecurityElement */ 

JSIL.MakeInterface(
  "System.IdentityModel.ISignatureValueSecurityElement", false, [], function ($) {
    $.Method({}, "GetSignatureValue", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte])));
  }, [$asm19.TypeRef("System.IdentityModel.ISecurityElement")]);

/* interface System.IdentityModel.IWrappedTokenKeyResolver */ 

JSIL.MakeInterface(
  "System.IdentityModel.IWrappedTokenKeyResolver", false, [], function ($) {
    $.Method({}, "get_ExpectedWrapper", JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")));
    $.Method({}, "set_ExpectedWrapper", JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")));
    $.Method({}, "CheckExternalWrapperMatch", new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")]));
    $.Property({}, "ExpectedWrapper");
  }, []);

/* class System.IdentityModel.KeyInfo */ 

(function KeyInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.KeyInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyIdentifier", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RetrievalMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyIdentifier", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.Field({Static:false, Public:false}, "_keyInfoSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Field({Static:false, Public:false}, "_ski", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Field({Static:false, Public:false}, "_retrieval", $.String);

    $.Property({Static:false, Public:true }, "RetrievalMethod", $.String);

    $.Property({Static:false, Public:true }, "KeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.LimitExceededException */ 

(function LimitExceededException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.SystemException"), 
      Name: "System.IdentityModel.LimitExceededException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.LocalAppContextSwitches */ 

(function LocalAppContextSwitches$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.IdentityModel.LocalAppContextSwitches", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_DisableCngCertificates", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DisableMultipleDNSEntriesInSANCertificate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DisableUpdatingRsaProviderType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EnableCachedEmptyDefaultAuthorizationContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "SetDefaultsLessOrEqual_452", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "SetDefaultsLessOrEqual_46", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "SetDefaultsLessOrEqual_462", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "EnableCachedEmptyDefaultAuthorizationContextString", $.String, "Switch.System.IdentityModel.EnableCachedEmptyDefaultAuthorizationContext");

    $.Constant({Static:true , Public:false}, "DisableMultipleDNSEntriesInSANCertificateString", $.String, "Switch.System.IdentityModel.DisableMultipleDNSEntriesInSANCertificate");

    $.Constant({Static:true , Public:false}, "DisableUpdatingRsaProviderTypeString", $.String, "Switch.System.IdentityModel.DisableUpdatingRsaProviderType");

    $.Constant({Static:true , Public:false}, "DisableCngCertificatesString", $.String, "Switch.System.IdentityModel.DisableCngCertificates");

    $.Field({Static:true , Public:false}, "enableCachedEmptyDefaultAuthorizationContext", $.Int32);

    $.Field({Static:true , Public:false}, "disableMultipleDNSEntriesInSANCertificate", $.Int32);

    $.Field({Static:true , Public:false}, "disableUpdatingRsaProviderType", $.Int32);

    $.Field({Static:true , Public:false}, "disableCngCertificatesString", $.Int32);

    $.Property({Static:true , Public:true }, "EnableCachedEmptyDefaultAuthorizationContext", $.Boolean);

    $.Property({Static:true , Public:true }, "DisableMultipleDNSEntriesInSANCertificate", $.Boolean);

    $.Property({Static:true , Public:true }, "DisableUpdatingRsaProviderType", $.Boolean);

    $.Property({Static:true , Public:true }, "DisableCngCertificates", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.MostlySingletonList`1 */ 

(function MostlySingletonList$b1$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.MostlySingletonList`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Compare", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T"), $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureValidSingletonIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchesSingleton", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "singleton", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Item", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.IdentityModel.EXTENDED_NAME_FORMAT */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.EXTENDED_NAME_FORMAT", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NameUnknown: 0, 
    NameFullyQualifiedDN: 1, 
    NameSamCompatible: 2, 
    NameDisplay: 3, 
    NameUniqueId: 6, 
    NameCanonical: 7, 
    NameUserPrincipalName: 8, 
    NameCanonicalEx: 9, 
    NameServicePrincipalName: 10, 
    NameDnsDomainName: 12, 
  }
);

/* enum System.IdentityModel.TokenInformationClass */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.TokenInformationClass", 
    BaseType: $asm07.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    TokenUser: 1, 
    TokenGroups: 2, 
    TokenPrivileges: 3, 
    TokenOwner: 4, 
    TokenPrimaryGroup: 5, 
    TokenDefaultDacl: 6, 
    TokenSource: 7, 
    TokenType: 8, 
    TokenImpersonationLevel: 9, 
    TokenStatistics: 10, 
    TokenRestrictedSids: 11, 
    TokenSessionId: 12, 
    TokenGroupsAndPrivileges: 13, 
    TokenSessionReference: 14, 
    TokenSandBoxInert: 15, 
  }
);

/* enum System.IdentityModel.Win32Error */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.Win32Error", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ERROR_SUCCESS: 0, 
    ERROR_INSUFFICIENT_BUFFER: 122, 
    ERROR_NO_TOKEN: 1008, 
    ERROR_NONE_MAPPED: 1332, 
  }
);

/* struct System.IdentityModel.CREDUI_INFO */ 

(function CREDUI_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.CREDUI_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbSize", $.Int32);

    $.Field({Static:false, Public:true }, "hwndParent", $.IntPtr);

    $.Field({Static:false, Public:true }, "pszMessageText", $.String);

    $.Field({Static:false, Public:true }, "pszCaptionText", $.String);

    $.Field({Static:false, Public:true }, "hbmBanner", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SEC_WINNT_AUTH_IDENTITY_EX */ 

(function SEC_WINNT_AUTH_IDENTITY_EX$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SEC_WINNT_AUTH_IDENTITY_EX", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "Version", $.UInt32);

    $.Field({Static:false, Public:true }, "Length", $.UInt32);

    $.Field({Static:false, Public:true }, "User", $.String);

    $.Field({Static:false, Public:true }, "UserLength", $.UInt32);

    $.Field({Static:false, Public:true }, "Domain", $.String);

    $.Field({Static:false, Public:true }, "DomainLength", $.UInt32);

    $.Field({Static:false, Public:true }, "Password", $.String);

    $.Field({Static:false, Public:true }, "PasswordLength", $.UInt32);

    $.Field({Static:false, Public:true }, "Flags", $.UInt32);

    $.Field({Static:false, Public:true }, "PackageList", $.String);

    $.Field({Static:false, Public:true }, "PackageListLength", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.SID_AND_ATTRIBUTES */ 

(function SID_AND_ATTRIBUTES$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.SID_AND_ATTRIBUTES", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Sid", $.IntPtr);

    $.Field({Static:false, Public:false}, "Attributes", $.UInt32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SizeOf", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.TOKEN_GROUPS */ 

(function TOKEN_GROUPS$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.TOKEN_GROUPS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "GroupCount", $.UInt32);

    $.Field({Static:false, Public:false}, "Groups", $asm19.TypeRef("System.IdentityModel.SID_AND_ATTRIBUTES"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.PLAINTEXTKEYBLOBHEADER */ 

(function PLAINTEXTKEYBLOBHEADER$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.PLAINTEXTKEYBLOBHEADER", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "bType", $.Byte);

    $.Field({Static:false, Public:false}, "bVersion", $.Byte);

    $.Field({Static:false, Public:false}, "reserved", $.Int16);

    $.Field({Static:false, Public:false}, "aiKeyAlg", $.Int32);

    $.Field({Static:false, Public:false}, "keyLength", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SizeOf", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.LUID */ 

(function LUID$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.LUID", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "LowPart", $.UInt32);

    $.Field({Static:false, Public:false}, "HighPart", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.LUID_AND_ATTRIBUTES */ 

(function LUID_AND_ATTRIBUTES$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.LUID_AND_ATTRIBUTES", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Luid", $asm19.TypeRef("System.IdentityModel.LUID"));

    $.Field({Static:false, Public:false}, "Attributes", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.TOKEN_PRIVILEGE */ 

(function TOKEN_PRIVILEGE$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.TOKEN_PRIVILEGE", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "PrivilegeCount", $.UInt32);

    $.Field({Static:false, Public:false}, "Privilege", $asm19.TypeRef("System.IdentityModel.LUID_AND_ATTRIBUTES"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Size", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.UNICODE_INTPTR_STRING */ 

(function UNICODE_INTPTR_STRING$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.UNICODE_INTPTR_STRING", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.IntPtr
        ])
    );

    $.Field({Static:false, Public:false}, "Length", $.UInt16);

    $.Field({Static:false, Public:false}, "MaxLength", $.UInt16);

    $.Field({Static:false, Public:false}, "Buffer", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.KERB_CERTIFICATE_S4U_LOGON */ 

(function KERB_CERTIFICATE_S4U_LOGON$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.KERB_CERTIFICATE_S4U_LOGON", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "MessageType", $asm19.TypeRef("System.IdentityModel.KERB_LOGON_SUBMIT_TYPE"));

    $.Field({Static:false, Public:false}, "Flags", $.UInt32);

    $.Field({Static:false, Public:false}, "UserPrincipalName", $asm19.TypeRef("System.IdentityModel.UNICODE_INTPTR_STRING"));

    $.Field({Static:false, Public:false}, "DomainName", $asm19.TypeRef("System.IdentityModel.UNICODE_INTPTR_STRING"));

    $.Field({Static:false, Public:false}, "CertificateLength", $.UInt32);

    $.Field({Static:false, Public:false}, "Certificate", $.IntPtr);

    $.Field({Static:true , Public:false}, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.TOKEN_SOURCE */ 

(function TOKEN_SOURCE$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.TOKEN_SOURCE", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "TOKEN_SOURCE_LENGTH", $.Int32, 8);

    $.Field({Static:false, Public:false}, "Name", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "SourceIdentifier", $asm19.TypeRef("System.IdentityModel.LUID"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.KERB_LOGON_SUBMIT_TYPE */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.KERB_LOGON_SUBMIT_TYPE", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    KerbInteractiveLogon: 2, 
    KerbSmartCardLogon: 6, 
    KerbWorkstationUnlockLogon: 7, 
    KerbSmartCardUnlockLogon: 8, 
    KerbProxyLogon: 9, 
    KerbTicketLogon: 10, 
    KerbTicketUnlockLogon: 11, 
    KerbS4ULogon: 12, 
    KerbCertificateLogon: 13, 
    KerbCertificateS4ULogon: 14, 
    KerbCertificateUnlockLogon: 15, 
  }
);

/* struct System.IdentityModel.QUOTA_LIMITS */ 

(function QUOTA_LIMITS$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.QUOTA_LIMITS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "PagedPoolLimit", $.IntPtr);

    $.Field({Static:false, Public:false}, "NonPagedPoolLimit", $.IntPtr);

    $.Field({Static:false, Public:false}, "MinimumWorkingSetSize", $.IntPtr);

    $.Field({Static:false, Public:false}, "MaximumWorkingSetSize", $.IntPtr);

    $.Field({Static:false, Public:false}, "PagefileLimit", $.IntPtr);

    $.Field({Static:false, Public:false}, "TimeLimit", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.SECURITY_IMPERSONATION_LEVEL */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.SECURITY_IMPERSONATION_LEVEL", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Anonymous: 0, 
    Identification: 1, 
    Impersonation: 2, 
    Delegation: 3, 
  }
);

/* enum System.IdentityModel.TokenType */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.TokenType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    TokenPrimary: 1, 
    TokenImpersonation: 2, 
  }
);

/* enum System.IdentityModel.SecurityLogonType */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.SecurityLogonType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Interactive: 2, 
    Network: 3, 
    Batch: 4, 
    Service: 5, 
    Proxy: 6, 
    Unlock: 7, 
  }
);

/* class System.IdentityModel.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;































  JSIL.MakeStaticClass("System.IdentityModel.NativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "AdjustTokenPrivileges", 
      new JSIL.MethodSignature($.Boolean, [
          $asm19.TypeRef("System.IdentityModel.SafeCloseHandle"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.TOKEN_PRIVILEGE")]), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.TOKEN_PRIVILEGE")]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "advapi32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "AllocateLocallyUniqueId", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.LUID")])]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptAcquireContextW", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeProvHandle")]), $.String, 
          $.String, $.UInt32, 
          $.UInt32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptDecrypt", 
      new JSIL.MethodSignature($.Boolean, [
          $asm19.TypeRef("System.IdentityModel.SafeKeyHandle"), $.IntPtr, 
          $.Boolean, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptDestroyKey", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "CryptEncrypt", 
      new JSIL.MethodSignature($.Boolean, [
          $asm19.TypeRef("System.IdentityModel.SafeKeyHandle"), $.IntPtr, 
          $.Boolean, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptGetKeyParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm19.TypeRef("System.IdentityModel.SafeKeyHandle"), $.UInt32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $.UInt32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptImportKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm19.TypeRef("System.IdentityModel.SafeProvHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), 
          $.UInt32, $.IntPtr, 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeKeyHandle")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "CryptReleaseContext", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $.UInt32]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "CryptSetKeyParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm19.TypeRef("System.IdentityModel.SafeKeyHandle"), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), $.UInt32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DuplicateTokenEx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm19.TypeRef("System.IdentityModel.SafeCloseHandle"), $asm07.TypeRef("System.Security.Principal.TokenAccessLevels"), 
          $.IntPtr, $asm19.TypeRef("System.IdentityModel.SECURITY_IMPERSONATION_LEVEL"), 
          $asm19.TypeRef("System.IdentityModel.TokenType"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeCloseHandle")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetCurrentProcess", 
      JSIL.MethodSignature.Return($.IntPtr), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetCurrentThread", 
      JSIL.MethodSignature.Return($.IntPtr), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetTokenInformation", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.UInt32, 
          $asm19.TypeRef("System.IdentityModel.SafeHGlobalHandle"), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LogonUser", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String, $.UInt32, 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeCloseHandle")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LookupPrivilegeValueW", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.LUID")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LsaConnectUntrusted", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeLsaLogonProcessHandle")])]), 
      {
        Module: "secur32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LsaDeregisterLogonProcess", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "secur32.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "LsaFreeReturnBuffer", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "secur32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "LsaLogonUser", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeLsaLogonProcessHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.UNICODE_INTPTR_STRING")]), 
          $asm19.TypeRef("System.IdentityModel.SecurityLogonType"), $.UInt32, 
          $.IntPtr, $.UInt32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.TOKEN_SOURCE")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeLsaReturnBufferHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.LUID")]), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeCloseHandle")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.QUOTA_LIMITS")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "secur32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LsaLookupAuthenticationPackage", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeLsaLogonProcessHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.UNICODE_INTPTR_STRING")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "secur32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LsaNtStatusToWinError", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "LsaRegisterLogonProcess", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.UNICODE_INTPTR_STRING")]), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeLsaLogonProcessHandle")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]), 
      {
        Module: "secur32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "OpenProcessToken", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $asm07.TypeRef("System.Security.Principal.TokenAccessLevels"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeCloseHandle")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "OpenThreadToken", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $asm07.TypeRef("System.Security.Principal.TokenAccessLevels"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeCloseHandle")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "RevertToSelf", 
      JSIL.MethodSignature.Return($.Boolean), 
      {
        Module: "advapi32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "SetThreadToken", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $asm19.TypeRef("System.IdentityModel.SafeCloseHandle")]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'auto',
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "SspiIsPromptingNeeded", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32]), 
      {
        Module: "credui.dll", 
        CharSet: 'unicode',
        Result: {
          NativeType: "U1"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SspiPromptForCredentials", 
      new JSIL.MethodSignature($.UInt32, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.CREDUI_INFO")]), 
          $.UInt32, $.String, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.UInt32
        ]), 
      {
        Module: "credui.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Boolean"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "TranslateName", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm19.TypeRef("System.IdentityModel.EXTENDED_NAME_FORMAT"), 
          $asm19.TypeRef("System.IdentityModel.EXTENDED_NAME_FORMAT"), $asm07.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ]), 
      {
        Module: "secur32.dll", 
        CharSet: 'unicode',
        Result: {
          NativeType: "U1"
        }
      }
    );

    $.Constant({Static:true , Public:false}, "ADVAPI32", $.String, "advapi32.dll");

    $.Constant({Static:true , Public:false}, "KERNEL32", $.String, "kernel32.dll");

    $.Constant({Static:true , Public:false}, "SECUR32", $.String, "secur32.dll");

    $.Constant({Static:true , Public:false}, "CREDUI", $.String, "credui.dll");

    $.Constant({Static:true , Public:false}, "STATUS_NO_MEMORY", $.UInt32, 3221225495);

    $.Constant({Static:true , Public:false}, "STATUS_INSUFFICIENT_RESOURCES", $.UInt32, 3221225626);

    $.Constant({Static:true , Public:false}, "STATUS_ACCESS_DENIED", $.UInt32, 3221225506);

    $.Constant({Static:true , Public:false}, "STATUS_ACCOUNT_RESTRICTION", $.UInt32, 3221225582);

    $.Field({Static:true , Public:false}, "LsaSourceName", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "LsaKerberosName", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Constant({Static:true , Public:false}, "KERB_CERTIFICATE_S4U_LOGON_FLAG_CHECK_DUPLICATES", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "KERB_CERTIFICATE_S4U_LOGON_FLAG_CHECK_LOGONHOURS", $.UInt32, 2);

    $.Constant({Static:true , Public:false}, "ERROR_ACCESS_DENIED", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "ERROR_BAD_LENGTH", $.Int32, 24);

    $.Constant({Static:true , Public:false}, "ERROR_INSUFFICIENT_BUFFER", $.Int32, 122);

    $.Constant({Static:true , Public:false}, "SE_GROUP_ENABLED", $.UInt32, 4);

    $.Constant({Static:true , Public:false}, "SE_GROUP_USE_FOR_DENY_ONLY", $.UInt32, 16);

    $.Constant({Static:true , Public:false}, "SE_GROUP_LOGON_ID", $.UInt32, 3221225472);

    $.Constant({Static:true , Public:false}, "PROV_RSA_AES", $.Int32, 24);

    $.Constant({Static:true , Public:false}, "KP_IV", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "CRYPT_DELETEKEYSET", $.UInt32, 16);

    $.Constant({Static:true , Public:false}, "CRYPT_VERIFYCONTEXT", $.UInt32, 4026531840);

    $.Constant({Static:true , Public:false}, "PLAINTEXTKEYBLOB", $.Byte, 8);

    $.Constant({Static:true , Public:false}, "CUR_BLOB_VERSION", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "ALG_CLASS_DATA_ENCRYPT", $.Int32, 24576);

    $.Constant({Static:true , Public:false}, "ALG_TYPE_BLOCK", $.Int32, 1536);

    $.Constant({Static:true , Public:false}, "CALG_AES_128", $.Int32, 26126);

    $.Constant({Static:true , Public:false}, "CALG_AES_192", $.Int32, 26127);

    $.Constant({Static:true , Public:false}, "CALG_AES_256", $.Int32, 26128);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.IdentityModel.OpenObject */ 

(function OpenObject$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.OpenObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]))
    );

    $.Field({Static:false, Public:false}, "_properties", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Property({Static:false, Public:true }, "Properties", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Pool`1 */ 

(function Pool$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Pool`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Return", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Take", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.Field({Static:false, Public:false}, "items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Property({Static:false, Public:true }, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SignedInfo */ 

(function SignedInfo$Members () {
  var $, $thisType;







































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SignedInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.DictionaryManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ComputeHash", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ComputeHash", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.HashStream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ComputeReferenceDigests", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnsureAllReferencesVerified", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureDigestValidity", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnsureDigestValidityIfIdMatches", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanonicalizationMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanonicalStream", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IO.MemoryStream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DictionaryManager", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.DictionaryManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasId", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReaderProvider", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.ISignatureReaderProvider"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReferenceCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResourcePool", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SignatureResourcePool"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SendSide", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureMethodDictionaryString", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureReaderProviderCallbackContext", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInclusivePrefixes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetNamespaceForInclusivePrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasUnverifiedReference", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCanonicalizationMethod", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.TransformFactory"), 
          $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSignatureMethod", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CanonicalizationMethod", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CanonicalizationMethodDictionaryString", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CanonicalStream", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.MemoryStream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReaderProvider", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.ISignatureReaderProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResourcePool", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.SignatureResourcePool"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SendSide", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SignatureMethod", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SignatureMethodDictionaryString", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SignatureReaderProviderCallbackContext", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCanonicalizationMethod", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSignatureMethod", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "canonicalizationMethodElement", $asm19.TypeRef("System.IdentityModel.ExclusiveCanonicalizationTransform"));

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "signatureMethodElement", $asm19.TypeRef("System.IdentityModel.ElementWithAlgorithmAttribute"));

    $.Field({Static:false, Public:false}, "resourcePool", $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"));

    $.Field({Static:false, Public:false}, "dictionaryManager", $asm19.TypeRef("System.IdentityModel.DictionaryManager"));

    $.Field({Static:false, Public:false}, "canonicalStream", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "readerProvider", $asm19.TypeRef("System.IdentityModel.ISignatureReaderProvider"));

    $.Field({Static:false, Public:false}, "signatureReaderProviderCallbackContext", $.Object);

    $.Field({Static:false, Public:false}, "sendSide", $.Boolean);

    $.Property({Static:false, Public:false}, "DictionaryManager", $asm19.TypeRef("System.IdentityModel.DictionaryManager"));

    $.Property({Static:false, Public:false}, "CanonicalStream", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Property({Static:false, Public:false}, "SendSide", $.Boolean);

    $.Property({Static:false, Public:true }, "ReaderProvider", $asm19.TypeRef("System.IdentityModel.ISignatureReaderProvider"));

    $.Property({Static:false, Public:true }, "SignatureReaderProviderCallbackContext", $.Object);

    $.Property({Static:false, Public:true }, "CanonicalizationMethod", $.String);

    $.Property({Static:false, Public:true }, "CanonicalizationMethodDictionaryString", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasId", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReferenceCount", $.Int32);

    $.Property({Static:false, Public:true }, "SignatureMethod", $.String);

    $.Property({Static:false, Public:true }, "SignatureMethodDictionaryString", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ResourcePool", $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"));

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.ISecurityElement")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.PreDigestedSignedInfo */ 

(function PreDigestedSignedInfo$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.SignedInfo"), 
      Name: "System.IdentityModel.PreDigestedSignedInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.DictionaryManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.DictionaryManager"), $.String, 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $.String, 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $.String, 
          $asm21.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddReference", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddReference", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ComputeHash", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.HashStream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ComputeReferenceDigests", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnsureAllReferencesVerified", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnsureDigestValidityIfIdMatches", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AddEnvelopedSignatureTransform", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DigestMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReferenceCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.TransformFactory"), 
          $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AddEnvelopedSignatureTransform", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DigestMethod", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Constant({Static:true , Public:false}, "InitialReferenceArraySize", $.Int32, 8);

    $.Field({Static:false, Public:false}, "addEnvelopedSignatureTransform", $.Boolean);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "digestMethod", $.String);

    $.Field({Static:false, Public:false}, "digestMethodDictionaryString", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "references", $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.PreDigestedSignedInfo+ReferenceEntry")]));

    $.Property({Static:false, Public:true }, "AddEnvelopedSignatureTransform", $.Boolean);

    $.Property({Static:false, Public:true }, "DigestMethod", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReferenceCount", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.PreDigestedSignedInfo+ReferenceEntry */ 

(function ReferenceEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.PreDigestedSignedInfo+ReferenceEntry", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "digest", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "useStrTransform", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.PreDigestedSignedInfo+SignedInfoCanonicalFormWriter */ 

(function SignedInfoCanonicalFormWriter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.CanonicalFormWriter"), 
      Name: "System.IdentityModel.PreDigestedSignedInfo+SignedInfoCanonicalFormWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeDigestAlgorithm", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeSignatureAlgorithm", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteSignedInfoCanonicalForm", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.PreDigestedSignedInfo+ReferenceEntry")]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Char])
        ])
    );

    $.Constant({Static:true , Public:false}, "xml1", $.String, "<SignedInfo xmlns=\"http://www.w3.org/2000/09/xmldsig#\"><CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></CanonicalizationMethod><SignatureMethod Algorithm=\"");

    $.Constant({Static:true , Public:false}, "xml2", $.String, "\"></SignatureMethod>");

    $.Constant({Static:true , Public:false}, "xml3", $.String, "<Reference URI=\"#");

    $.Constant({Static:true , Public:false}, "xml4", $.String, "\"><Transforms><Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></Transform></Transforms><DigestMethod Algorithm=\"");

    $.Constant({Static:true , Public:false}, "xml4WithStrTransform", $.String, "\"><Transforms><Transform Algorithm=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#STR-Transform\"><o:TransformationParameters xmlns:o=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"><CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></CanonicalizationMethod></o:TransformationParameters></Transform></Transforms><DigestMethod Algorithm=\"");

    $.Constant({Static:true , Public:false}, "xml5", $.String, "\"></DigestMethod><DigestValue>");

    $.Constant({Static:true , Public:false}, "xml6", $.String, "</DigestValue></Reference>");

    $.Constant({Static:true , Public:false}, "xml7", $.String, "</SignedInfo>");

    $.Field({Static:false, Public:false, ReadOnly:true }, "fragment1", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fragment2", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fragment3", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fragment4", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fragment4StrTransform", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fragment5", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fragment6", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "fragment7", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "sha1Digest", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "sha256Digest", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "hmacSha1Signature", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "rsaSha1Signature", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "instance", $.Type);

    $.Property({Static:true , Public:true }, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Privilege */ 

(function Privilege$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Privilege", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Enable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnableTokenPrivilege", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.SafeCloseHandle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetThreadToken", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SafeCloseHandle"))
    );

    $.ExternalMethod({Static:true , Public:false}, "LuidFromPrivilege", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.LUID"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Revert", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "SetThreadToken", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.SafeCloseHandle"))
    );

    $.Field({Static:true , Public:false}, "luids", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm19.TypeRef("System.IdentityModel.LUID")]));

    $.Constant({Static:true , Public:true }, "SeAuditPrivilege", $.String, "SeAuditPrivilege");

    $.Constant({Static:true , Public:true }, "SeTcbPrivilege", $.String, "SeTcbPrivilege");

    $.Constant({Static:true , Public:false}, "SE_PRIVILEGE_DISABLED", $.UInt32, 0);

    $.Constant({Static:true , Public:false}, "SE_PRIVILEGE_ENABLED_BY_DEFAULT", $.UInt32, 1);

    $.Constant({Static:true , Public:false}, "SE_PRIVILEGE_ENABLED", $.UInt32, 2);

    $.Constant({Static:true , Public:false}, "SE_PRIVILEGE_USED_FOR_ACCESS", $.UInt32, 2147483648);

    $.Constant({Static:true , Public:false}, "ERROR_SUCCESS", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "ERROR_NO_TOKEN", $.Int32, 1008);

    $.Constant({Static:true , Public:false}, "ERROR_NOT_ALL_ASSIGNED", $.Int32, 1300);

    $.Field({Static:false, Public:false}, "privilege", $.String);

    $.Field({Static:false, Public:false}, "luid", $asm19.TypeRef("System.IdentityModel.LUID"));

    $.Field({Static:false, Public:false}, "needToRevert", $.Boolean);

    $.Field({Static:false, Public:false}, "initialEnabled", $.Boolean);

    $.Field({Static:false, Public:false}, "isImpersonating", $.Boolean);

    $.Field({Static:false, Public:false}, "threadToken", $asm19.TypeRef("System.IdentityModel.SafeCloseHandle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.ProductConstants */ 

(function ProductConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.ProductConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "NamespaceUri", $.String, "http://schemas.microsoft.com/ws/2008/06/identity");

    $.Constant({Static:true , Public:true }, "ClaimValueTypeSerializationPrefix", $.String, "tn");

    $.Constant({Static:true , Public:true }, "ClaimValueTypeSerializationPrefixWithColon", $.String, "tn:");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.ProtectedDataCookieTransform */ 

(function ProtectedDataCookieTransform$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.CookieTransform"), 
      Name: "System.IdentityModel.ProtectedDataCookieTransform", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Encode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Constant({Static:true , Public:false}, "entropyString", $.String, "System.IdentityModel.ProtectedDataCookieTransform");

    $.Field({Static:false, Public:false}, "entropy", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Psha1DerivedKeyGenerator */ 

(function Psha1DerivedKeyGenerator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Psha1DerivedKeyGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateDerivedKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "key", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Psha1DerivedKeyGenerator+ManagedPsha1 */ 

(function ManagedPsha1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Psha1DerivedKeyGenerator+ManagedPsha1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetByte", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDerivedKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "aValue", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "chunk", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "hmac", $asm07.TypeRef("System.Security.Cryptography.KeyedHashAlgorithm"));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Field({Static:false, Public:false}, "secret", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "seed", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.RequestFailedException */ 

(function RequestFailedException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.RequestException"), 
      Name: "System.IdentityModel.RequestFailedException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.RijndaelCryptoServiceProvider */ 

(function RijndaelCryptoServiceProvider$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Cryptography.Rijndael"), 
      Name: "System.IdentityModel.RijndaelCryptoServiceProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateIV", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateKey", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.RijndaelCryptoServiceProvider+RijndaelCryptoTransform */ 

(function RijndaelCryptoTransform$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.RijndaelCryptoServiceProvider+RijndaelCryptoTransform", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm07.TypeRef("System.Security.Cryptography.PaddingMode"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecryptData", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DoPadding", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncryptData", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReuseTransform", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTransformMultipleBlocks", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InputBlockSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutputBlockSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowIfFalse", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformBlock", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformFinalBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TruncateBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.Field({Static:false, Public:false}, "provHandle", $asm19.TypeRef("System.IdentityModel.SafeProvHandle"));

    $.Field({Static:false, Public:false}, "keyHandle", $asm19.TypeRef("System.IdentityModel.SafeKeyHandle"));

    $.Field({Static:false, Public:false}, "paddingMode", $asm07.TypeRef("System.Security.Cryptography.PaddingMode"));

    $.Field({Static:false, Public:false}, "depadBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "blockSize", $.Int32);

    $.Field({Static:false, Public:false}, "encrypt", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReuseTransform", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTransformMultipleBlocks", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "InputBlockSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OutputBlockSize", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), 
      /* 1 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.RsaEncryptionCookieTransform */ 

(function RsaEncryptionCookieTransform$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.CookieTransform"), 
      Name: "System.IdentityModel.RsaEncryptionCookieTransform", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.RSA"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Encode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DecryptionKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Cryptography.RSA")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EncryptionKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.RSA"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_EncryptionKey", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.RSA"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HashName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_encryptionKey", $asm07.TypeRef("System.Security.Cryptography.RSA"));

    $.Field({Static:false, Public:false}, "_decryptionKeys", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Security.Cryptography.RSA")]));

    $.Field({Static:false, Public:false}, "_hashName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EncryptionKey", $asm07.TypeRef("System.Security.Cryptography.RSA"));

    $.Property({Static:false, Public:false, Virtual:true }, "DecryptionKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Cryptography.RSA")]));

    $.Property({Static:false, Public:true }, "HashName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.RsaSignatureCookieTransform */ 

(function RsaSignatureCookieTransform$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.CookieTransform"), 
      Name: "System.IdentityModel.RsaSignatureCookieTransform", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.RSA"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Encode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SigningKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.RSA"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_VerificationKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Cryptography.RSA")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSignatureDeformatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureDeformatter"), [$asm07.TypeRef("System.Security.Cryptography.RSA")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSignatureFormatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureFormatter"), [$asm07.TypeRef("System.Security.Cryptography.RSA")])
    );

    $.ExternalMethod({Static:false, Public:false}, "isSha256", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HashName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SigningKey", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.RSA"))
    );

    $.Field({Static:false, Public:false}, "_signingKey", $asm07.TypeRef("System.Security.Cryptography.RSA"));

    $.Field({Static:false, Public:false}, "_verificationKeys", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Security.Cryptography.RSA")]));

    $.Field({Static:false, Public:false}, "_hashName", $.String);

    $.Property({Static:false, Public:true }, "HashName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SigningKey", $asm07.TypeRef("System.Security.Cryptography.RSA"));

    $.Property({Static:false, Public:false, Virtual:true }, "VerificationKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Cryptography.RSA")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SafeProvHandle */ 

(function SafeProvHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IdentityModel.SafeProvHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SafeKeyHandle */ 

(function SafeKeyHandle$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IdentityModel.SafeKeyHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeCryptImportKey", 
      new JSIL.MethodSignature($.Type, [
          $asm19.TypeRef("System.IdentityModel.SafeProvHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "provHandle", $asm19.TypeRef("System.IdentityModel.SafeProvHandle"));

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SamlDelegatingWriter */ 

(function SamlDelegatingWriter$Members () {
  var $, $thisType;














































































  JSIL.MakeType({
      BaseType: $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), 
      Name: "System.IdentityModel.SamlDelegatingWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm07.TypeRef("System.IO.Stream"), 
          $asm19.TypeRef("System.IdentityModel.ICanonicalWriterEndRootElementCallback"), $asm21.TypeRef("System.Xml.IXmlDictionary")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnEndOfRootElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAttributes", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryString"), $asm21.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IStreamProvider"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryString"), $asm21.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm21.TypeRef("System.Xml.XmlDictionaryString")])
    );

    $.Field({Static:false, Public:false}, "innerWriter", $asm21.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.Field({Static:false, Public:false}, "canonicalStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "callback", $asm19.TypeRef("System.IdentityModel.ICanonicalWriterEndRootElementCallback"));

    $.Field({Static:false, Public:false}, "dictionary", $asm21.TypeRef("System.Xml.IXmlDictionary"));

    $.Field({Static:false, Public:false}, "elementCount", $.Int32);

    $.Field({Static:false, Public:false}, "startFragment", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "signatureFragment", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "endFragment", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "effectiveWriter", $asm21.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.Field({Static:false, Public:false}, "writerStream", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm2F.TypeRef("System.Xml.WriteState"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.IdentityModel.ICanonicalWriterEndRootElementCallback */ 

JSIL.MakeInterface(
  "System.IdentityModel.ICanonicalWriterEndRootElementCallback", false, [], function ($) {
    $.Method({}, "OnEndOfRootElement", JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter")));
  }, []);

/* class System.IdentityModel.Scope */ 

(function Scope$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Scope", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AppliesToAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EncryptingCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReplyToAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SigningCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SymmetricKeyEncryptionRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenEncryptionRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_AppliesToAddress", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_EncryptingCredentials", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReplyToAddress", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SigningCredentials", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SymmetricKeyEncryptionRequired", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_TokenEncryptionRequired", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_appliesToAddress", $.String);

    $.Field({Static:false, Public:false}, "_replyToAddress", $.String);

    $.Field({Static:false, Public:false}, "_encryptingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Field({Static:false, Public:false}, "_signingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Field({Static:false, Public:false}, "_symmetricKeyEncryptionRequired", $.Boolean);

    $.Field({Static:false, Public:false}, "_tokenEncryptionRequired", $.Boolean);

    $.Field({Static:false, Public:false}, "_properties", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Property({Static:false, Public:true , Virtual:true }, "AppliesToAddress", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EncryptingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReplyToAddress", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SigningCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Property({Static:false, Public:true , Virtual:true }, "SymmetricKeyEncryptionRequired", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TokenEncryptionRequired", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityMessageSerializationException */ 

(function SecurityMessageSerializationException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.SystemException"), 
      Name: "System.IdentityModel.SecurityMessageSerializationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityTokenService */ 

(function SecurityTokenService$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm19.System.IdentityModel.Scope)) ();
  };



















  function SecurityTokenService_get_Scope () {
    return this.SecurityTokenService$Scope$value;
  }; 



















  function SecurityTokenService_set_Scope (value) {
    this.SecurityTokenService$Scope$value = value;
  }; 





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SecurityTokenService", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.SecurityTokenServiceConfiguration"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginCancel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginGetOutputClaimsIdentity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm19.TypeRef("System.IdentityModel.Scope"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginGetScope", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginIssue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRenew", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginValidate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Cancel", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), [$asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSecurityTokenDescriptor", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor"), [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), $asm19.TypeRef("System.IdentityModel.Scope")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCancel", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndGetOutputClaimsIdentity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndGetScope", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Scope"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndIssue", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRenew", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndValidate", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Principal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Request", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"))
    );

    $.Method({Static:false, Public:true }, "get_Scope", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Scope")), 
      SecurityTokenService_get_Scope
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SecurityTokenDescriptor", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenServiceConfiguration", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.SecurityTokenServiceConfiguration"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetIssuerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOutputClaimsIdentity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm19.TypeRef("System.IdentityModel.Scope")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetProofToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.ProofDescriptor"), [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), $asm19.TypeRef("System.IdentityModel.Scope")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRequestorProofEncryptingCredentials", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetResponse", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetScope", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Scope"), [$asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSecurityTokenHandler", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenLifetime", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime"), [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValidIssuerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKnownType", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Issue", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), [$asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnGetOutputClaimsIdentityComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnGetScopeComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Renew", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), [$asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Principal", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Request", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"))
    );

    $.Method({Static:false, Public:true }, "set_Scope", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Scope")), 
      SecurityTokenService_set_Scope
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_SecurityTokenDescriptor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), [$asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateRequest", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyComputedLifetime", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.DateTime")])
    );

    $.Field({Static:false, Public:false}, "_securityTokenServiceConfiguration", $asm19.TypeRef("System.IdentityModel.Configuration.SecurityTokenServiceConfiguration"));

    $.Field({Static:false, Public:false}, "_principal", $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"));

    $.Field({Static:false, Public:false}, "_request", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"));

    $.Field({Static:false, Public:false}, "_tokenDescriptor", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor"));

    $.Field({Static:false, Public:false}, "SecurityTokenService$Scope$value", $asm19.TypeRef("System.IdentityModel.Scope"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "SecurityTokenServiceConfiguration", $asm19.TypeRef("System.IdentityModel.Configuration.SecurityTokenServiceConfiguration"));

    $.Property({Static:false, Public:true }, "Principal", $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"));

    $.Property({Static:false, Public:true }, "Request", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"));

    $.Property({Static:false, Public:true }, "Scope", $asm19.TypeRef("System.IdentityModel.Scope"));

    $.Property({Static:false, Public:false}, "SecurityTokenDescriptor", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityTokenService+FederatedAsyncState */ 

(function FederatedAsyncState$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SecurityTokenService+FederatedAsyncState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), 
          $asm07.TypeRef("System.IAsyncResult")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimsPrincipal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Request", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenHandler", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityTokenHandler", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"))
    );

    $.Field({Static:false, Public:false}, "_request", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"));

    $.Field({Static:false, Public:false}, "_claimsPrincipal", $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"));

    $.Field({Static:false, Public:false}, "_securityTokenHandler", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"));

    $.Field({Static:false, Public:false}, "_result", $asm07.TypeRef("System.IAsyncResult"));

    $.Property({Static:false, Public:true }, "Request", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"));

    $.Property({Static:false, Public:true }, "ClaimsPrincipal", $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"));

    $.Property({Static:false, Public:true }, "SecurityTokenHandler", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"));

    $.Property({Static:false, Public:true }, "Result", $asm07.TypeRef("System.IAsyncResult"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityUniqueId */ 

(function SecurityUniqueId$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SecurityUniqueId", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "nextId", $.Int64, function ($pi) {
        return $asm07.System.Int64.FromNumber(0);
      });

    $.Field({Static:true , Public:false}, "commonPrefix", $.String);

    $.Field({Static:false, Public:false}, "id", $.Int64);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "val", $.String);

    $.Property({Static:false, Public:true }, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityUtils */ 

(function SecurityUtils$Members () {
  var $, $thisType;









































  JSIL.MakeStaticClass("System.IdentityModel.SecurityUtils", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ClaimSetToString", 
      new JSIL.MethodSignature($.String, [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneAuthorizationPoliciesIfNecessary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), [$asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneClaimSetIfNecessary", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneClaimSetsIfNecessary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]), [$asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneIdentityIfNecessary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.IIdentity"), [$asm07.TypeRef("System.Security.Principal.IIdentity")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneWindowsIdentityIfNecessary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.WindowsIdentity"), [$asm07.TypeRef("System.Security.Principal.WindowsIdentity")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CloneWindowsIdentityIfNecessary", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.WindowsIdentity"), [$asm07.TypeRef("System.Security.Principal.WindowsIdentity"), $.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ConvertHexDigit", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAuthorizationPolicies", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAuthorizationPolicies", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDefaultAuthorizationContext", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Policy.AuthorizationContext"), [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateIdentity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.IIdentity"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateIdentity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.IIdentity"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSymmetricSecurityKeys", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecodeHexString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DisposeAuthorizationPoliciesIfNecessary", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "DisposeClaimSetIfNecessary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DisposeClaimSetsIfNecessary", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "DisposeIfNecessary", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IDisposable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "EncryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AnonymousIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.IIdentity"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MaxUtcDateTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MinUtcDateTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RequiresFipsCompliance", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCertificateId", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFipsAlgorithmPolicyKeyFromRegistry", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsCurrentlyTimeEffective", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.DateTime"), 
          $asm07.TypeRef("System.TimeSpan")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSupportedAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MatchesBuffer", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MatchesBuffer", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadContentAsBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResetAllCertificates", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ResetCertificate", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryCreateX509CertificateFromRawData", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsafeCreateWindowsIdentityFromToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.WindowsIdentity"), [$.IntPtr, $.String])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnsafeGetWindowsIdentityToken", 
      new JSIL.MethodSignature($.IntPtr, [$asm07.TypeRef("System.Security.Principal.WindowsIdentity")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:true }, "Identities", $.String, "Identities");

    $.Field({Static:true , Public:false}, "fipsAlgorithmPolicy", $.Int32, -1);

    $.Constant({Static:true , Public:true }, "WindowsVistaMajorNumber", $.Int32, 6);

    $.Field({Static:true , Public:false}, "anonymousIdentity", $asm07.TypeRef("System.Security.Principal.IIdentity"));

    $.Constant({Static:true , Public:true }, "AuthTypeNTLM", $.String, "NTLM");

    $.Constant({Static:true , Public:true }, "AuthTypeNegotiate", $.String, "Negotiate");

    $.Constant({Static:true , Public:true }, "AuthTypeKerberos", $.String, "Kerberos");

    $.Constant({Static:true , Public:true }, "AuthTypeAnonymous", $.String, "");

    $.Constant({Static:true , Public:true }, "AuthTypeCertMap", $.String, "SSL/PCT");

    $.Constant({Static:true , Public:true }, "AuthTypeBasic", $.String, "Basic");

    $.Constant({Static:true , Public:false}, "fipsPolicyRegistryKey", $.String, "System\\CurrentControlSet\\Control\\Lsa");

    $.Property({Static:true , Public:false}, "AnonymousIdentity", $asm07.TypeRef("System.Security.Principal.IIdentity"));

    $.Property({Static:true , Public:true }, "MaxUtcDateTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:true , Public:true }, "MinUtcDateTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:true , Public:false}, "RequiresFipsCompliance", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IdentityModel.Policy");
/* class System.IdentityModel.Policy.AuthorizationContext */ 

(function AuthorizationContext$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Policy.AuthorizationContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDefaultAuthorizationContext", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ClaimSets", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ExpirationTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ClaimSets", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpirationTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]));

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationComponent")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityUtils+SimpleAuthorizationContext */ 

(function SimpleAuthorizationContext$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Policy.AuthorizationContext"), 
      Name: "System.IdentityModel.SecurityUtils+SimpleAuthorizationContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ClaimSets", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ExpirationTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]))
    );

    $.Field({Static:false, Public:false}, "id", $asm19.TypeRef("System.IdentityModel.SecurityUniqueId"));

    $.Field({Static:false, Public:false}, "policy", $asm19.TypeRef("System.IdentityModel.Policy.UnconditionalPolicy"));

    $.Field({Static:false, Public:false}, "properties", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ClaimSets", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpirationTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.ExtendedProtectionPolicyHelper */ 

(function ExtendedProtectionPolicyHelper$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.ExtendedProtectionPolicyHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"), $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckServiceBinding", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.SafeDeleteContext"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChannelBinding", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultPolicy", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PolicyEnforcement", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.PolicyEnforcement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtectionScenario", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ProtectionScenario"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceNameCollection", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ServiceNameCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ShouldCheckServiceBinding", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ShouldAddChannelBindingToASC", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "disabledPolicy", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"));

    $.Field({Static:false, Public:false}, "_policyEnforcement", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.PolicyEnforcement"));

    $.Field({Static:false, Public:false}, "_protectionScenario", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ProtectionScenario"));

    $.Field({Static:false, Public:false}, "_channelBinding", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"));

    $.Field({Static:false, Public:false}, "_serviceNameCollection", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ServiceNameCollection"));

    $.Field({Static:false, Public:false}, "_checkServiceBinding", $.Boolean);

    $.Property({Static:false, Public:true }, "ChannelBinding", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"));

    $.Property({Static:false, Public:true }, "ShouldCheckServiceBinding", $.Boolean);

    $.Property({Static:false, Public:true }, "ServiceNameCollection", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ServiceNameCollection"));

    $.Property({Static:false, Public:true }, "ProtectionScenario", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ProtectionScenario"));

    $.Property({Static:false, Public:true }, "PolicyEnforcement", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.PolicyEnforcement"));

    $.Property({Static:true , Public:true }, "DefaultPolicy", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.EmptyReadOnlyCollection`1 */ 

(function EmptyReadOnlyCollection$b1$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.EmptyReadOnlyCollection`1", false, ["T"], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true }, "Instance", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SignatureResourcePool */ 

(function SignatureResourcePool$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SignatureResourcePool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "TakeBase64Buffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:true }, "TakeCanonicalizationDriver", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.CanonicalizationDriver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "TakeEncodingBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "TakeHashAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "TakeHashStream", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.HashStream"), [$asm07.TypeRef("System.Security.Cryptography.HashAlgorithm")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TakeHashStream", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.HashStream"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "TakeUtf8Writer", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.Constant({Static:true , Public:false}, "BufferSize", $.Int32, 64);

    $.Field({Static:false, Public:false}, "canonicalizationDriver", $asm19.TypeRef("System.IdentityModel.CanonicalizationDriver"));

    $.Field({Static:false, Public:false}, "hashStream", $asm19.TypeRef("System.IdentityModel.HashStream"));

    $.Field({Static:false, Public:false}, "hashAlgorithm", $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"));

    $.Field({Static:false, Public:false}, "utf8Writer", $asm21.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.Field({Static:false, Public:false}, "encodingBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "base64Buffer", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SignatureTargetIdManager */ 

(function SignatureTargetIdManager$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SignatureTargetIdManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExtractId", 
      new JSIL.MethodSignature($.String, [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultIdNamespacePrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultIdNamespaceUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteIdAttribute", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultIdNamespacePrefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultIdNamespaceUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityTokenException */ 

(function SecurityTokenException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.SystemException"), 
      Name: "System.IdentityModel.Tokens.SecurityTokenException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SignatureVerificationFailedException */ 

(function SignatureVerificationFailedException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenException"), 
      Name: "System.IdentityModel.SignatureVerificationFailedException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SignedXml */ 

(function SignedXml$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SignedXml", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.DictionaryManager"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.SignedInfo"), $asm19.TypeRef("System.IdentityModel.DictionaryManager"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompleteSignatureVerification", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeSignature", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"), $asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureFormatter"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeSignature", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.KeyedHashAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ComputeSignature", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureDigestValidity", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureDigestValidityIfIdMatches", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasId", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Signature", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Signature"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransformFactory", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.TransformFactory"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSignatureValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TransformFactory", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.TransformFactory"))
    );

    $.ExternalMethod({Static:false, Public:true }, "StartSignatureVerification", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifySignature", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.KeyedHashAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifySignature", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"), $asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureDeformatter"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Constant({Static:true , Public:false}, "DefaultPrefix", $.String, "");

    $.Field({Static:false, Public:false}, "tokenSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "signature", $asm19.TypeRef("System.IdentityModel.Signature"));

    $.Field({Static:false, Public:false}, "transformFactory", $asm19.TypeRef("System.IdentityModel.TransformFactory"));

    $.Field({Static:false, Public:false}, "dictionaryManager", $asm19.TypeRef("System.IdentityModel.DictionaryManager"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasId", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true }, "SecurityTokenSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Property({Static:false, Public:true }, "Signature", $asm19.TypeRef("System.IdentityModel.Signature"));

    $.Property({Static:false, Public:true }, "TransformFactory", $asm19.TypeRef("System.IdentityModel.TransformFactory"));

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.ISignatureValueSecurityElement"), 
      /* 1 */ $asm19.TypeRef("System.IdentityModel.ISecurityElement")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Signature */ 

(function Signature$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Signature", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.SignedXml"), $asm19.TypeRef("System.IdentityModel.SignedInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyIdentifier", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureValue", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.ISignatureValueSecurityElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignedInfo", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SignedInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSignatureBytes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyIdentifier", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSignatureValue", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:false, Public:false}, "signedXml", $asm19.TypeRef("System.IdentityModel.SignedXml"));

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "keyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "signatureValueElement", $asm19.TypeRef("System.IdentityModel.Signature+SignatureValueElement"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "signedInfo", $asm19.TypeRef("System.IdentityModel.SignedInfo"));

    $.Property({Static:false, Public:true }, "Id", $.String);

    $.Property({Static:false, Public:true }, "KeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Property({Static:false, Public:true }, "SignedInfo", $asm19.TypeRef("System.IdentityModel.SignedInfo"));

    $.Property({Static:false, Public:true }, "SignatureValue", $asm19.TypeRef("System.IdentityModel.ISignatureValueSecurityElement"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Signature+SignatureValueElement */ 

(function SignatureValueElement$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Signature+SignatureValueElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasId", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Value", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.ISignatureValueSecurityElement.GetSignatureValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.ISignatureValueSecurityElement"), "GetSignatureValue");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "signatureValue", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "signatureText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasId", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:false}, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.ISignatureValueSecurityElement"), 
      /* 1 */ $asm19.TypeRef("System.IdentityModel.ISecurityElement")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.IdentityModel.ISignatureReaderProvider */ 

JSIL.MakeInterface(
  "System.IdentityModel.ISignatureReaderProvider", false, [], function ($) {
    $.Method({}, "GetReader", new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryReader"), [$.Object]));
  }, []);

/* class System.IdentityModel.StandardSignedInfo */ 

(function StandardSignedInfo$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.SignedInfo"), 
      Name: "System.IdentityModel.StandardSignedInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.DictionaryManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddReference", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Reference"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ComputeReferenceDigests", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnsureAllReferencesVerified", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EnsureDigestValidityIfIdMatches", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Context", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Reference"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReferenceCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetNamespaceForInclusivePrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasUnverifiedReference", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.TransformFactory"), 
          $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Context", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "references", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Reference")]));

    $.Field({Static:false, Public:false}, "context", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "ReferenceCount", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm19.TypeRef("System.IdentityModel.Reference"));

    $.Property({Static:false, Public:false}, "Prefix", $.String);

    $.Property({Static:false, Public:false}, "Context", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.IdentityModel.WifSignedInfo */ 

(function WifSignedInfo$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.StandardSignedInfo"), 
      Name: "System.IdentityModel.WifSignedInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.DictionaryManager"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ComputeHash", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.HashStream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.TransformFactory"), 
          $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.Field({Static:false, Public:false}, "_bufferedStream", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "_defaultNamespace", $.String);

    $.Field({Static:false, Public:false}, "_disposed", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Reference */ 

(function Reference$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Reference", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.DictionaryManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.DictionaryManager"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.DictionaryManager"), $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddTransform", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Transform"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckDigest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ComputeAndSetDigest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ComputeDigest", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureDigestValidity", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureDigestValidity", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureDigestValidityIfIdMatches", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureDigestValidityIfIdMatches", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExtractReferredId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DigestMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DigestMethodDictionaryString", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResourcePool", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SignatureResourcePool"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransformChain", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.TransformChain"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransformCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Uri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Verified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDigestValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsStrTranform", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.TransformFactory"), 
          $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DigestMethod", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DigestMethodDictionaryString", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResourcePool", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.SignatureResourcePool"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Uri", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetResolvedXmlSource", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldPreserveComments", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:false, Public:false}, "digestMethodElement", $asm19.TypeRef("System.IdentityModel.ElementWithAlgorithmAttribute"));

    $.Field({Static:false, Public:false}, "digestValueElement", $asm19.TypeRef("System.IdentityModel.Reference+DigestValueElement"));

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "resolvedXmlSource", $.Object);

    $.Field({Static:false, Public:false, ReadOnly:true }, "transformChain", $asm19.TypeRef("System.IdentityModel.TransformChain"));

    $.Field({Static:false, Public:false}, "type", $.String);

    $.Field({Static:false, Public:false}, "uri", $.String);

    $.Field({Static:false, Public:false}, "resourcePool", $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"));

    $.Field({Static:false, Public:false}, "verified", $.Boolean);

    $.Field({Static:false, Public:false}, "referredId", $.String);

    $.Field({Static:false, Public:false}, "dictionaryManager", $asm19.TypeRef("System.IdentityModel.DictionaryManager"));

    $.Property({Static:false, Public:true }, "DigestMethod", $.String);

    $.Property({Static:false, Public:true }, "DigestMethodDictionaryString", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Id", $.String);

    $.Property({Static:false, Public:true }, "ResourcePool", $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"));

    $.Property({Static:false, Public:true }, "TransformChain", $asm19.TypeRef("System.IdentityModel.TransformChain"));

    $.Property({Static:false, Public:true }, "TransformCount", $.Int32);

    $.Property({Static:false, Public:true }, "Type", $.String);

    $.Property({Static:false, Public:true }, "Uri", $.String);

    $.Property({Static:false, Public:true }, "Verified", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.Reference+DigestValueElement */ 

(function DigestValueElement$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.Reference+DigestValueElement", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Value", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:false, Public:false}, "digestValue", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "digestText", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Property({Static:false, Public:false}, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.TransformChain */ 

(function TransformChain$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.TransformChain", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Transform"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Transform"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NeedsInclusiveContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransformCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.TransformFactory"), 
          $asm19.TypeRef("System.IdentityModel.DictionaryManager"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "TransformToDigest", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Object, $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"), 
          $.String, $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "transforms", $asm19.TypeRef("System.IdentityModel.MostlySingletonList`1", [$asm19.TypeRef("System.IdentityModel.Transform")]));

    $.Property({Static:false, Public:true }, "TransformCount", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm19.TypeRef("System.IdentityModel.Transform"));

    $.Property({Static:false, Public:true }, "NeedsInclusiveContext", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct System.IdentityModel.ElementWithAlgorithmAttribute */ 

(function ElementWithAlgorithmAttribute$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.ElementWithAlgorithmAttribute", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AlgorithmDictionaryString", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Algorithm", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AlgorithmDictionaryString", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "elementName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "algorithm", $.String);

    $.Field({Static:false, Public:false}, "algorithmDictionaryString", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Property({Static:false, Public:true }, "Algorithm", $.String);

    $.Property({Static:false, Public:true }, "AlgorithmDictionaryString", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.SspiContextFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.SspiContextFlags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Zero: 0, 
    Delegate: 1, 
    MutualAuth: 2, 
    ReplayDetect: 4, 
    SequenceDetect: 8, 
    Confidentiality: 16, 
    UseSessionKey: 32, 
    AllocateMemory: 256, 
    InitExtendedError: 16384, 
    InitStream: 32768, 
    AcceptExtendedError: 32768, 
    AcceptStream: 65536, 
    InitIdentify: 131072, 
    InitAnonymous: 262144, 
    InitManualCredValidation: 524288, 
    AcceptIdentify: 524288, 
    AcceptAnonymous: 1048576, 
    ChannelBindingProxyBindings: 67108864, 
    ChannelBindingAllowMissingBindings: 268435456, 
  }
);

/* enum System.IdentityModel.CredentialUse */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.CredentialUse", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Inbound: 1, 
    Outbound: 2, 
    Both: 3, 
  }
);

/* enum System.IdentityModel.Endianness */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.Endianness", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Network: 0, 
    Native: 16, 
  }
);

/* enum System.IdentityModel.CertificateEncoding */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.CertificateEncoding", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Zero: 0, 
    X509AsnEncoding: 1, 
    X509NdrEncoding: 2, 
    Pkcs7AsnEncoding: 65536, 
    AnyAsnEncoding: 65537, 
    Pkcs7NdrEncoding: 131072, 
  }
);

/* enum System.IdentityModel.BufferType */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.BufferType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    Data: 1, 
    Token: 2, 
    Parameters: 3, 
    Missing: 4, 
    Extra: 5, 
    Trailer: 6, 
    Header: 7, 
    Padding: 9, 
    Stream: 10, 
    ChannelBindings: 14, 
  }
);

/* enum System.IdentityModel.SecurityStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.SecurityStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OutOfMemory: -2146893056, 
    InvalidHandle: -2146893055, 
    Unsupported: -2146893054, 
    TargetUnknown: -2146893053, 
    InternalError: -2146893052, 
    PackageNotFound: -2146893051, 
    NotOwner: -2146893050, 
    CannotInstall: -2146893049, 
    InvalidToken: -2146893048, 
    LogonDenied: -2146893044, 
    UnknownCredential: -2146893043, 
    NoCredentials: -2146893042, 
    MessageAltered: -2146893041, 
    IncompleteMessage: -2146893032, 
    IncompleteCred: -2146893024, 
    BufferNotEnough: -2146893023, 
    WrongPrincipal: -2146893022, 
    UntrustedRoot: -2146893019, 
    UnknownCertificate: -2146893017, 
    OK: 0, 
    ContinueNeeded: 590610, 
    CompleteNeeded: 590611, 
    CompAndContinue: 590612, 
    ContextExpired: 590615, 
    CredentialsNeeded: 590624, 
    Renegotiate: 590625, 
  }
);

/* enum System.IdentityModel.ContextAttribute */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.ContextAttribute", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Sizes: 0, 
    Names: 1, 
    Lifespan: 2, 
    DceInfo: 3, 
    StreamSizes: 4, 
    Authority: 6, 
    SessionKey: 9, 
    PackageInfo: 10, 
    NegotiationInfo: 12, 
    Flags: 14, 
    SpecifiedTarget: 27, 
    RemoteCertificate: 83, 
    LocalCertificate: 84, 
    RootStore: 85, 
    IssuerListInfoEx: 89, 
    ConnectionInfo: 90, 
    EapKey: 91, 
  }
);

/* enum System.IdentityModel.CredentialStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.CredentialStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Success: 0, 
    NotSupported: 50, 
    InValidParameter: 87, 
    Cancelled: 1223, 
    NoSuchPackage: 1364, 
  }
);

/* struct System.IdentityModel.SecurityBufferStruct */ 

(function SecurityBufferStruct$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.SecurityBufferStruct", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "count", $.Int32);

    $.Field({Static:false, Public:true }, "type", $asm19.TypeRef("System.IdentityModel.BufferType"));

    $.Field({Static:false, Public:true }, "token", $.IntPtr);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.AuthIdentityEx */ 

(function AuthIdentityEx$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.AuthIdentityEx", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(3, "additionalPackages", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:false, Public:false}, "Version", $.Int32);

    $.Field({Static:false, Public:false}, "Length", $.Int32);

    $.Field({Static:false, Public:false}, "UserName", $.String);

    $.Field({Static:false, Public:false}, "UserNameLength", $.Int32);

    $.Field({Static:false, Public:false}, "Domain", $.String);

    $.Field({Static:false, Public:false}, "DomainLength", $.Int32);

    $.Field({Static:false, Public:false}, "Password", $.String);

    $.Field({Static:false, Public:false}, "PasswordLength", $.Int32);

    $.Field({Static:false, Public:false}, "Flags", $.Int32);

    $.Field({Static:false, Public:false}, "PackageList", $.String);

    $.Field({Static:false, Public:false}, "PackageListLength", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "WinNTAuthIdentityVersion", $.Int32, 512);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.SecureCredential */ 

(function SecureCredential$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.SecureCredential", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), 
          $asm19.TypeRef("System.IdentityModel.SecureCredential+Flags"), $asm19.TypeRef("System.IdentityModel.SchProtocols")
        ])
    );

    $.Constant({Static:true , Public:true }, "CurrentVersion", $.Int32, 4);

    $.Field({Static:false, Public:true }, "version", $.Int32);

    $.Field({Static:false, Public:true }, "cCreds", $.Int32);

    $.Field({Static:false, Public:true }, "certContextArray", $.IntPtr);

    $.Field({Static:false, Public:false}, "rootStore", $.IntPtr);

    $.Field({Static:false, Public:true }, "cMappers", $.Int32);

    $.Field({Static:false, Public:false}, "phMappers", $.IntPtr);

    $.Field({Static:false, Public:true }, "cSupportedAlgs", $.Int32);

    $.Field({Static:false, Public:false}, "palgSupportedAlgs", $.IntPtr);

    $.Field({Static:false, Public:true }, "grbitEnabledProtocols", $asm19.TypeRef("System.IdentityModel.SchProtocols"));

    $.Field({Static:false, Public:true }, "dwMinimumCipherStrength", $.Int32);

    $.Field({Static:false, Public:true }, "dwMaximumCipherStrength", $.Int32);

    $.Field({Static:false, Public:true }, "dwSessionLifespan", $.Int32);

    $.Field({Static:false, Public:true }, "dwFlags", $asm19.TypeRef("System.IdentityModel.SecureCredential+Flags"));

    $.Field({Static:false, Public:true }, "reserved", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.SecureCredential+Flags */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.SecureCredential+Flags", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Zero: 0, 
    NoSystemMapper: 2, 
    NoNameCheck: 4, 
    ValidateManual: 8, 
    NoDefaultCred: 16, 
    ValidateAuto: 32, 
  }
);

/* class System.IdentityModel.IntPtrHelper */ 

(function IntPtrHelper$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.IdentityModel.IntPtrHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "Add", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.Int32])
    );

    $.Constant({Static:true , Public:false}, "KERNEL32", $.String, "kernel32.dll");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityBufferDescriptor */ 

(function SecurityBufferDescriptor$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SecurityBufferDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Version", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "Count", $.Int32);

    $.Field({Static:false, Public:true }, "UnmanagedPointer", $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityBuffer */ 

(function SecurityBuffer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SecurityBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm19.TypeRef("System.IdentityModel.BufferType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm19.TypeRef("System.IdentityModel.BufferType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm19.TypeRef("System.IdentityModel.BufferType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"))
    );

    $.Field({Static:false, Public:true }, "size", $.Int32);

    $.Field({Static:false, Public:true }, "type", $asm19.TypeRef("System.IdentityModel.BufferType"));

    $.Field({Static:false, Public:true }, "token", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "offset", $.Int32);

    $.Field({Static:false, Public:true }, "unmanagedToken", $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.SSPIHandle */ 

(function SSPIHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.SSPIHandle", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_IsZero", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToInvalid", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Field({Static:false, Public:false}, "HandleHi", $.IntPtr);

    $.Field({Static:false, Public:false}, "HandleLo", $.IntPtr);

    $.Property({Static:false, Public:true }, "IsZero", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SafeDeleteContext */ 

(function SafeDeleteContext$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.IdentityModel.SafeDeleteContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AcceptSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $asm19.TypeRef("System.IdentityModel.SspiContextFlags"), $asm19.TypeRef("System.IdentityModel.Endianness"), 
          $asm19.TypeRef("System.IdentityModel.SecurityBuffer"), $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.SecurityBuffer")]), 
          $asm19.TypeRef("System.IdentityModel.SecurityBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SspiContextFlags")])
        ])
    );

    $.PInvokeMethod({Static:true , Public:false}, "AcceptSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")]), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), 
          $asm19.TypeRef("System.IdentityModel.SecurityBufferDescriptor"), $asm19.TypeRef("System.IdentityModel.SspiContextFlags"), 
          $asm19.TypeRef("System.IdentityModel.Endianness"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")]), 
          $asm19.TypeRef("System.IdentityModel.SecurityBufferDescriptor"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SspiContextFlags")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "security.Dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:true }, "DecryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $asm19.TypeRef("System.IdentityModel.SecurityBufferDescriptor"), 
          $.UInt32
        ])
    );

    $.PInvokeMethod({Static:true , Public:false}, "DecryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")]), $asm19.TypeRef("System.IdentityModel.SecurityBufferDescriptor"), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$.UInt32])
        ]), 
      {
        Module: "security.Dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "DeleteSecurityContext", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")])]), 
      {
        Module: "security.Dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "EncryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $asm19.TypeRef("System.IdentityModel.SecurityBufferDescriptor"), 
          $.UInt32
        ])
    );

    $.PInvokeMethod({Static:true , Public:false}, "EncryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")]), $.UInt32, 
          $asm19.TypeRef("System.IdentityModel.SecurityBufferDescriptor"), $.UInt32
        ]), 
      {
        Module: "security.Dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSecurityContextToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeCloseHandle")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ImpersonateSecurityContext", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.PInvokeMethod({Static:true , Public:false}, "ImpersonateSecurityContext", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")])]), 
      {
        Module: "security.Dll", 
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.String, $asm19.TypeRef("System.IdentityModel.SspiContextFlags"), 
          $asm19.TypeRef("System.IdentityModel.Endianness"), $asm19.TypeRef("System.IdentityModel.SecurityBuffer"), 
          $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.SecurityBuffer")]), $asm19.TypeRef("System.IdentityModel.SecurityBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SspiContextFlags")])
        ])
    );

    $.PInvokeMethod({Static:true , Public:false}, "InitializeSecurityContextW", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")]), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $asm19.TypeRef("System.IdentityModel.SspiContextFlags"), 
          $.Int32, $asm19.TypeRef("System.IdentityModel.Endianness"), 
          $asm19.TypeRef("System.IdentityModel.SecurityBufferDescriptor"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")]), $asm19.TypeRef("System.IdentityModel.SecurityBufferDescriptor"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SspiContextFlags")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "security.Dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "MustRunAcceptSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), 
          $asm19.TypeRef("System.IdentityModel.SecurityBufferDescriptor"), $asm19.TypeRef("System.IdentityModel.SspiContextFlags"), 
          $asm19.TypeRef("System.IdentityModel.Endianness"), $.Type, 
          $asm19.TypeRef("System.IdentityModel.SecurityBufferDescriptor"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SspiContextFlags")]), 
          $asm19.TypeRef("System.IdentityModel.SafeFreeContextBuffer")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRunInitializeSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $asm19.TypeRef("System.IdentityModel.SspiContextFlags"), 
          $asm19.TypeRef("System.IdentityModel.Endianness"), $asm19.TypeRef("System.IdentityModel.SecurityBufferDescriptor"), 
          $.Type, $asm19.TypeRef("System.IdentityModel.SecurityBufferDescriptor"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SspiContextFlags")]), $asm19.TypeRef("System.IdentityModel.SafeFreeContextBuffer")
        ])
    );

    $.PInvokeMethod({Static:true , Public:false}, "QuerySecurityContextToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeCloseHandle")])]), 
      {
        Module: "security.Dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Constant({Static:true , Public:false}, "SECURITY", $.String, "security.Dll");

    $.Constant({Static:true , Public:false}, "dummyStr", $.String, " ");

    $.Field({Static:true , Public:false, ReadOnly:true }, "dummyBytes", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm07.System.Byte, 1);
      });

    $.Field({Static:false, Public:false}, "_handle", $asm19.TypeRef("System.IdentityModel.SSPIHandle"));

    $.Field({Static:false, Public:false}, "_EffectiveCredential", $asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SafeFreeCredentials */ 

(function SafeFreeCredentials$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.IdentityModel.SafeFreeCredentials", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm19.TypeRef("System.IdentityModel.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.AuthIdentityEx")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm19.TypeRef("System.IdentityModel.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SecureCredential")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm19.TypeRef("System.IdentityModel.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.PInvokeMethod({Static:true , Public:false}, "AcquireCredentialsHandleW", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.AuthIdentityEx")]), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "security.Dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "AcquireCredentialsHandleW", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "security.Dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "AcquireCredentialsHandleW", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SecureCredential")]), $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "security.Dll", 
        CharSet: 'unicode',
      }
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireDefaultCredential", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $asm19.TypeRef("System.IdentityModel.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.AuthIdentityEx")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.PInvokeMethod({Static:true , Public:false}, "FreeCredentialsHandle", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")])]), 
      {
        Module: "security.Dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Constant({Static:true , Public:false}, "SECURITY", $.String, "security.Dll");

    $.Field({Static:false, Public:false}, "_handle", $asm19.TypeRef("System.IdentityModel.SSPIHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SafeFreeCertContext */ 

(function SafeFreeCertContext$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IdentityModel.SafeFreeCertContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CertFreeCertificateContext", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "crypt32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Constant({Static:true , Public:false}, "CRYPT32", $.String, "crypt32.dll");

    $.Constant({Static:true , Public:false}, "ADVAPI32", $.String, "advapi32.dll");

    $.Constant({Static:true , Public:false}, "CRYPT_ACQUIRE_SILENT_FLAG", $.UInt32, 64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SafeFreeContextBuffer */ 

(function SafeFreeContextBuffer$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IdentityModel.SafeFreeContextBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateEmptyHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumeratePackages", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.PInvokeMethod({Static:true , Public:false}, "EnumerateSecurityPackagesW", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])]), 
      {
        Module: "security.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "FreeContextBuffer", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "security.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "QueryContextAttributes", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeDeleteContext"), $asm19.TypeRef("System.IdentityModel.ContextAttribute"), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $asm07.TypeRef("System.Runtime.InteropServices.SafeHandle")
        ])
    );

    $.PInvokeMethod({Static:true , Public:false}, "QueryContextAttributesW", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SSPIHandle")]), $asm19.TypeRef("System.IdentityModel.ContextAttribute"), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm07.TypeRef("System.Void")])
        ]), 
      {
        Module: "security.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Constant({Static:true , Public:false}, "SECURITY", $.String, "security.dll");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SafeCloseHandle */ 

(function SafeCloseHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IdentityModel.SafeCloseHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.PInvokeMethod({Static:true , Public:false}, "CloseHandle", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    )
      .Attribute($asm07.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm07.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm07.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm07.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Constant({Static:true , Public:false}, "KERNEL32", $.String, "kernel32.dll");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SafeHGlobalHandle */ 

(function SafeHGlobalHandle$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IdentityModel.SafeHGlobalHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:true }, "AllocHGlobal", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "AllocHGlobal", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "AllocHGlobal", 
      new JSIL.MethodSignature($.Type, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "AllocHGlobal", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:true , Public:true }, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm07.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.IdentityModel.SafeLsaLogonProcessHandle */ 

(function SafeLsaLogonProcessHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IdentityModel.SafeLsaLogonProcessHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SafeLsaReturnBufferHandle */ 

(function SafeLsaReturnBufferHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.IdentityModel.SafeLsaReturnBufferHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.SchProtocols */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.SchProtocols", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    UniClient: -2147483648, 
    ClientMask: -2147480918, 
    Unified: -1073741824, 
    Zero: 0, 
    PctServer: 1, 
    PctClient: 2, 
    Pct: 3, 
    Ssl2Server: 4, 
    Ssl2Client: 8, 
    Ssl2: 12, 
    Ssl3Server: 16, 
    Ssl3Client: 32, 
    Ssl3: 48, 
    TlsServer: 64, 
    TlsClient: 128, 
    Tls: 192, 
    Ssl3Tls: 240, 
    Tls11Server: 256, 
    Tls11Client: 512, 
    Tls11: 768, 
    Tls12Server: 1024, 
    Tls12Client: 2048, 
    Tls12: 3072, 
    UniServer: 1073741824, 
    ServerMask: 1073743189, 
  }
);

/* enum System.IdentityModel.Alg */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.Alg", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Any: 0, 
    NameRC4: 1, 
    NameDES: 1, 
    NameRC2: 2, 
    NameDH_Ephem: 2, 
    NameSHA: 4, 
    Fortezza: 4, 
    NameSkipJack: 10, 
    TypeRSA: 1024, 
    TypeBlock: 1536, 
    TypeStream: 2048, 
    TypeDH: 2560, 
    ClassSignture: 8192, 
    ClassEncrypt: 24576, 
    ClassHash: 32768, 
    ClassKeyXch: 40960, 
  }
);

/* struct System.IdentityModel.SecurityPackageInfo */ 

(function SecurityPackageInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.SecurityPackageInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "Capabilities", $.Int32);

    $.Field({Static:false, Public:false}, "Version", $.Int16);

    $.Field({Static:false, Public:false}, "RPCID", $.Int16);

    $.Field({Static:false, Public:false}, "MaxToken", $.Int32);

    $.Field({Static:false, Public:false}, "Name", $.IntPtr);

    $.Field({Static:false, Public:false}, "Comment", $.IntPtr);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Size", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NameOffest", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.LifeSpan_Struct */ 

(function LifeSpan_Struct$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.LifeSpan_Struct", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "start", $.Int64);

    $.Field({Static:false, Public:false}, "end", $.Int64);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Size", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.NegotiationInfo */ 

(function NegotiationInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.NegotiationInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "PackageInfo", $.IntPtr);

    $.Field({Static:false, Public:false}, "NegotiationState", $.UInt32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Size", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NegotiationStateOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.SecPkgContext_SessionKey */ 

(function SecPkgContext_SessionKey$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.SecPkgContext_SessionKey", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "SessionKeyLength", $.UInt32);

    $.Field({Static:false, Public:false}, "Sessionkey", $.IntPtr);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Size", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SessionkeyOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.LifeSpan */ 

(function LifeSpan$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.LifeSpan", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EffectiveTimeUtc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExpiryTimeUtc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.Field({Static:false, Public:false}, "effectiveTimeUtc", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "expiryTimeUtc", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "EffectiveTimeUtc", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "ExpiryTimeUtc", $asm07.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityPackageInfoClass */ 

(function SecurityPackageInfoClass$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SecurityPackageInfoClass", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.Int32])
    );

    $.Field({Static:false, Public:false}, "Capabilities", $.Int32);

    $.Field({Static:false, Public:false}, "Version", $.Int16);

    $.Field({Static:false, Public:false}, "RPCID", $.Int16);

    $.Field({Static:false, Public:false}, "MaxToken", $.Int32);

    $.Field({Static:false, Public:false}, "Name", $.String);

    $.Field({Static:false, Public:false}, "Comment", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.NegotiationInfoClass */ 

(function NegotiationInfoClass$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.NegotiationInfoClass", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.Int32])
    );

    $.Constant({Static:true , Public:false}, "NTLM", $.String, "NTLM");

    $.Constant({Static:true , Public:false}, "Kerberos", $.String, "Kerberos");

    $.Field({Static:false, Public:false}, "AuthenticationPackage", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecuritySessionKeyClass */ 

(function SecuritySessionKeyClass$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SecuritySessionKeyClass", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SessionKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:false}, "sessionKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "SessionKey", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.StreamSizes */ 

(function StreamSizes$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.StreamSizes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:true }, "header", $.Int32);

    $.Field({Static:false, Public:true }, "trailer", $.Int32);

    $.Field({Static:false, Public:true }, "maximumMessage", $.Int32);

    $.Field({Static:false, Public:true }, "buffersCount", $.Int32);

    $.Field({Static:false, Public:true }, "blockSize", $.Int32);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SizeOf", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SspiWrapper */ 

(function SspiWrapper$Members () {
  var $, $thisType;
























  JSIL.MakeStaticClass("System.IdentityModel.SspiWrapper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AcceptSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeDeleteContext")]), 
          $asm19.TypeRef("System.IdentityModel.SspiContextFlags"), $asm19.TypeRef("System.IdentityModel.Endianness"), 
          $asm19.TypeRef("System.IdentityModel.SecurityBuffer"), $asm19.TypeRef("System.IdentityModel.SecurityBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SspiContextFlags")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AcceptSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeDeleteContext")]), 
          $asm19.TypeRef("System.IdentityModel.SspiContextFlags"), $asm19.TypeRef("System.IdentityModel.Endianness"), 
          $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.SecurityBuffer")]), $asm19.TypeRef("System.IdentityModel.SecurityBuffer"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SspiContextFlags")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), [
          $.String, $asm19.TypeRef("System.IdentityModel.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.AuthIdentityEx")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), [
          $.String, $asm19.TypeRef("System.IdentityModel.CredentialUse"), 
          $asm19.TypeRef("System.IdentityModel.SecureCredential")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireCredentialsHandle", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), [
          $.String, $asm19.TypeRef("System.IdentityModel.CredentialUse"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AcquireDefaultCredential", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), [
          $.String, $asm19.TypeRef("System.IdentityModel.CredentialUse"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(2, "additionalPackages", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "DecryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeDeleteContext"), $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.SecurityBuffer")]), 
          $.UInt32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "EncryptDecryptHelper", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeDeleteContext"), $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.SecurityBuffer")]), 
          $.UInt32, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "EncryptMessage", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeDeleteContext"), $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.SecurityBuffer")]), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumerateSecurityPackages", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.SecurityPackageInfoClass")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SecurityPackages", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.SecurityPackageInfoClass")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetVerifyPackageInfo", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.SecurityPackageInfoClass"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ImpersonateSecurityContext", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.SafeDeleteContext"))
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeDeleteContext")]), 
          $.String, $asm19.TypeRef("System.IdentityModel.SspiContextFlags"), 
          $asm19.TypeRef("System.IdentityModel.Endianness"), $asm19.TypeRef("System.IdentityModel.SecurityBuffer"), 
          $asm19.TypeRef("System.IdentityModel.SecurityBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SspiContextFlags")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeSecurityContext", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeDeleteContext")]), 
          $.String, $asm19.TypeRef("System.IdentityModel.SspiContextFlags"), 
          $asm19.TypeRef("System.IdentityModel.Endianness"), $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.SecurityBuffer")]), 
          $asm19.TypeRef("System.IdentityModel.SecurityBuffer"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SspiContextFlags")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsNegotiateExPackagePresent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "IsSspiPromptingNeeded", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "QueryContextAttributes", 
      new JSIL.MethodSignature($.Int32, [
          $asm19.TypeRef("System.IdentityModel.SafeDeleteContext"), $asm19.TypeRef("System.IdentityModel.ContextAttribute"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Runtime.InteropServices.SafeHandle")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "QueryContextAttributes", 
      new JSIL.MethodSignature($.Object, [$asm19.TypeRef("System.IdentityModel.SafeDeleteContext"), $asm19.TypeRef("System.IdentityModel.ContextAttribute")])
    );

    $.ExternalMethod({Static:true , Public:true }, "QuerySecurityContextToken", 
      new JSIL.MethodSignature($.Int32, [$asm19.TypeRef("System.IdentityModel.SafeDeleteContext"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeCloseHandle")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "QuerySpecifiedTarget", 
      new JSIL.MethodSignature($.Int32, [$asm19.TypeRef("System.IdentityModel.SafeDeleteContext"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_SecurityPackages", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.SecurityPackageInfoClass")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "SspiPromptForCredential", 
      new JSIL.MethodSignature($.UInt32, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.Constant({Static:true , Public:false}, "SECPKG_FLAG_NEGOTIABLE2", $.Int32, 2097152);

    $.Field({Static:true , Public:false}, "securityPackages", $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.SecurityPackageInfoClass")]));

    $.Property({Static:true , Public:true }, "SecurityPackages", $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.SecurityPackageInfoClass")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SslConnectionInfo */ 

(function SslConnectionInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SslConnectionInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "Protocol", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "DataCipherAlg", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "DataKeySize", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "DataHashAlg", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "DataHashKeySize", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "KeyExchangeAlg", $.Int32);

    $.Field({Static:false, Public:true , ReadOnly:true }, "KeyExchKeySize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecSizes */ 

(function SecSizes$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SecSizes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:true }, "MaxToken", $.Int32);

    $.Field({Static:false, Public:true }, "MaxSignature", $.Int32);

    $.Field({Static:false, Public:true }, "BlockSize", $.Int32);

    $.Field({Static:false, Public:true }, "SecurityTrailer", $.Int32);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SizeOf", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.Bindings */ 

(function Bindings$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.Bindings", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "BindingsLength", $.Int32);

    $.Field({Static:false, Public:false}, "pBindings", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.StringUtil */ 

(function StringUtil$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.IdentityModel.StringUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "OptimizeString", 
      new JSIL.MethodSignature($.String, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.StrTransform */ 

(function StrTransform$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Transform"), 
      Name: "System.IdentityModel.StrTransform", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Algorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeComments", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InclusiveNamespacesPrefixList", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NeedsInclusiveContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConfiguredDriver", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.CanonicalizationDriver"), [$asm19.TypeRef("System.IdentityModel.SignatureResourcePool")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInclusivePrefixes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Process", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"), 
          $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ProcessAndDigest", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Object, $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"), 
          $.String, $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ProcessAndDigest", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"), 
          $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessReaderInput", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.SignatureResourcePool"), 
          $asm19.TypeRef("System.IdentityModel.HashStream")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.DictionaryManager"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InclusiveNamespacesPrefixList", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "TokenizeInclusivePrefixList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "includeComments", $.Boolean);

    $.Field({Static:false, Public:false}, "inclusiveNamespacesPrefixList", $.String);

    $.Field({Static:false, Public:false}, "inclusivePrefixes", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "transformationParameters", $asm19.TypeRef("System.IdentityModel.TranformationParameters"));

    $.Property({Static:false, Public:true , Virtual:true }, "Algorithm", $.String);

    $.Property({Static:false, Public:true }, "IncludeComments", $.Boolean);

    $.Property({Static:false, Public:true }, "InclusiveNamespacesPrefixList", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NeedsInclusiveContext", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.TranformationParameters */ 

(function TranformationParameters$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.TranformationParameters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanonicalizationAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadFrom", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Property({Static:false, Public:true }, "CanonicalizationAlgorithm", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.TypedAsyncResult`1 */ 

(function TypedAsyncResult$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.AsyncResult"), 
      Name: "System.IdentityModel.TypedAsyncResult`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.AsyncCallback"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Complete", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Complete", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T"), $.Boolean, 
          $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.Field({Static:false, Public:false}, "_result", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "Result", $.GenericParameter("T"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.UnsupportedTokenTypeBadRequestException */ 

(function UnsupportedTokenTypeBadRequestException$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.BadRequestException"), 
      Name: "System.IdentityModel.UnsupportedTokenTypeBadRequestException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TokenType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "TokenTypeProperty", $.String, "TokenType");

    $.Field({Static:false, Public:false}, "_tokenType", $.String);

    $.Property({Static:false, Public:true }, "TokenType", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.UniqueId */ 

(function UniqueId$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.IdentityModel.UniqueId", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CreateRandomId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRandomId", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRandomUri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateUniqueId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateUniqueId", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNextId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRandomUuid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "RandomSaltSize", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "NcNamePrefix", $.String, "_");

    $.Constant({Static:true , Public:false}, "UuidUriPrefix", $.String, "urn:uuid:");

    $.Field({Static:true , Public:false, ReadOnly:true }, "reusableUuid", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "optimizedNcNamePrefix", $.String, function ($pi) {
        return ("_" + $pi.reusableUuid + "-");
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.UriUtil */ 

(function UriUtil$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.IdentityModel.UriUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CanCreateValidUri", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm0A.TypeRef("System.UriKind")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCreateValidUri", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm0A.TypeRef("System.UriKind"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Uri")])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WrappedReader */ 

(function WrappedReader$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.DelegatingXmlDictionaryReader"), 
      Name: "System.IdentityModel.WrappedReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlTokens", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.XmlTokenStream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnEndOfContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBinaryContent", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Record", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "xmlTokens", $asm19.TypeRef("System.IdentityModel.XmlTokenStream"));

    $.Field({Static:false, Public:false}, "contentStream", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "contentReader", $asm07.TypeRef("System.IO.TextReader"));

    $.Field({Static:false, Public:false}, "recordDone", $.Boolean);

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "XmlTokens", $asm19.TypeRef("System.IdentityModel.XmlTokenStream"));

    $.ImplementInterfaces(
      /* 1 */ $asm2F.TypeRef("System.Xml.IXmlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlTokenStream */ 

(function XmlTokenStream$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.XmlTokenStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNodeType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureCapacityToAdd", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetWriter", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.XmlTokenStream+XmlTokenStreamWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetElementExclusion", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetElementExclusion", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Nullable`1", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.ISecurityElement.get_HasId", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.ISecurityElement"), "get_HasId");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.ISecurityElement.get_Id", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.ISecurityElement"), "get_Id");

    $.ExternalMethod({Static:false, Public:true }, "Trim", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "entries", $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.XmlTokenStream+XmlTokenEntry")]));

    $.Field({Static:false, Public:false}, "excludedElement", $.String);

    $.Field({Static:false, Public:false}, "excludedElementDepth", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "excludedElementNamespace", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IdentityModel.ISecurityElement.HasId", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IdentityModel.ISecurityElement.Id", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.ISecurityElement")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlTokenStream+XmlTokenStreamWriter */ 

(function XmlTokenStreamWriter$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.XmlTokenStream+XmlTokenStreamWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.XmlTokenStream+XmlTokenEntry")]), $.Int32, 
          $.String, $asm07.TypeRef("System.Nullable`1", [$.Int32]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExcludedElement", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExcludedElementNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToFirst", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.ISecurityElement.get_HasId", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.ISecurityElement"), "get_HasId");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.ISecurityElement.get_Id", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.ISecurityElement"), "get_Id");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.DictionaryManager")])
    );

    $.Field({Static:false, Public:false}, "entries", $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.XmlTokenStream+XmlTokenEntry")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Field({Static:false, Public:false}, "excludedElement", $.String);

    $.Field({Static:false, Public:false}, "excludedElementDepth", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "excludedElementNamespace", $.String);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Position", $.Int32);

    $.Property({Static:false, Public:true }, "NodeType", $asm2F.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "NamespaceUri", $.String);

    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "ExcludedElement", $.String);

    $.Property({Static:false, Public:true }, "ExcludedElementNamespace", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IdentityModel.ISecurityElement.HasId", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IdentityModel.ISecurityElement.Id", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.ISecurityElement")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.XmlTokenStream+XmlTokenEntry */ 

(function XmlTokenEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.XmlTokenStream+XmlTokenEntry", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlNodeType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsEmptyElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "nodeType", $asm2F.TypeRef("System.Xml.XmlNodeType"));

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "namespaceUri", $.String);

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Property({Static:false, Public:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WrappedXmlDictionaryReader */ 

(function WrappedXmlDictionaryReader$Members () {
  var $, $thisType;




































































  JSIL.MakeType({
      BaseType: $asm21.TypeRef("System.Xml.XmlDictionaryReader"), 
      Name: "System.IdentityModel.WrappedXmlDictionaryReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Quotas", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $asm2F.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOuterXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "reader", $asm2F.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "xmlDictionaryReaderQuotas", $asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm2F.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm2F.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm2F.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm2F.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Quotas", $asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.ImplementInterfaces(
      /* 1 */ $asm2F.TypeRef("System.Xml.IXmlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.IdentityModel.WSAddressing10Constants */ 

(function WSAddressing10Constants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSAddressing10Constants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "wsa");

    $.Constant({Static:true , Public:true }, "NamespaceUri", $.String, "http://www.w3.org/2005/08/addressing");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSAddressing10Constants+Elements */ 

(function Elements$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSAddressing10Constants+Elements", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Action", $.String, "Action");

    $.Constant({Static:true , Public:true }, "Address", $.String, "Address");

    $.Constant({Static:true , Public:true }, "ReplyTo", $.String, "ReplyTo");

    $.Constant({Static:true , Public:true }, "EndpointReference", $.String, "EndpointReference");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSAddressing200408Constants */ 

(function WSAddressing200408Constants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSAddressing200408Constants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "wsa");

    $.Constant({Static:true , Public:true }, "NamespaceUri", $.String, "http://schemas.xmlsoap.org/ws/2004/08/addressing");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSAddressing200408Constants+Elements */ 

(function Elements$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSAddressing200408Constants+Elements", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Action", $.String, "Action");

    $.Constant({Static:true , Public:true }, "ReplyTo", $.String, "ReplyTo");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecureConversation13Constants */ 

(function WSSecureConversation13Constants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecureConversation13Constants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512");

    $.Field({Static:true , Public:true , ReadOnly:true }, "NamespaceUri", $asm0A.TypeRef("System.Uri"));

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "sc");

    $.Constant({Static:true , Public:true }, "TokenTypeURI", $.String, "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/sct");

    $.Constant({Static:true , Public:true }, "DefaultDerivedKeyLength", $.Int32, 32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecureConversation13Constants+ElementNames */ 

(function ElementNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecureConversation13Constants+ElementNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Name", $.String, "SecurityContextToken");

    $.Constant({Static:true , Public:true }, "Identifier", $.String, "Identifier");

    $.Constant({Static:true , Public:true }, "Instance", $.String, "Instance");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecureConversation13Constants+Attributes */ 

(function Attributes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecureConversation13Constants+Attributes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Length", $.String, "Length");

    $.Constant({Static:true , Public:true }, "Nonce", $.String, "Nonce");

    $.Constant({Static:true , Public:true }, "Instance", $.String, "Instance");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecureConversationFeb2005Constants */ 

(function WSSecureConversationFeb2005Constants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecureConversationFeb2005Constants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/ws/2005/02/sc");

    $.Field({Static:true , Public:true , ReadOnly:true }, "NamespaceUri", $asm0A.TypeRef("System.Uri"));

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "sc");

    $.Constant({Static:true , Public:true }, "TokenTypeURI", $.String, "http://schemas.xmlsoap.org/ws/2005/02/sc/sct");

    $.Constant({Static:true , Public:true }, "DefaultDerivedKeyLength", $.Int32, 32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecureConversationFeb2005Constants+ElementNames */ 

(function ElementNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecureConversationFeb2005Constants+ElementNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Name", $.String, "SecurityContextToken");

    $.Constant({Static:true , Public:true }, "Identifier", $.String, "Identifier");

    $.Constant({Static:true , Public:true }, "Instance", $.String, "Instance");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecureConversationFeb2005Constants+Attributes */ 

(function Attributes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecureConversationFeb2005Constants+Attributes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Length", $.String, "Length");

    $.Constant({Static:true , Public:true }, "Nonce", $.String, "Nonce");

    $.Constant({Static:true , Public:true }, "Instance", $.String, "Instance");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecurity10Constants */ 

(function WSSecurity10Constants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecurity10Constants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "FragmentBaseAddress", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "wsse");

    $.Constant({Static:true , Public:true }, "Base64EncodingType", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary");

    $.Constant({Static:true , Public:true }, "HexBinaryEncodingType", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#HexBinary");

    $.Constant({Static:true , Public:true }, "KerberosTokenType1510", $.String, "http://docs.oasis-open.org/wss/oasis-wss-kerberos-token-profile-1.1#GSS_Kerberosv5_AP_REQ1510");

    $.Constant({Static:true , Public:true }, "KerberosTokenTypeGSS", $.String, "http://docs.oasis-open.org/wss/oasis-wss-kerberos-token-profile-1.1#GSS_Kerberosv5_AP_REQ");

    $.Constant({Static:true , Public:true }, "TextEncodingType", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Text");

    $.Constant({Static:true , Public:true }, "X509TokenType", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3");

    $.Constant({Static:true , Public:true }, "UPTokenPasswordTextValue", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecurity10Constants+Attributes */ 

(function Attributes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecurity10Constants+Attributes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "ValueType", $.String, "ValueType");

    $.Constant({Static:true , Public:true }, "EncodingType", $.String, "EncodingType");

    $.Constant({Static:true , Public:true }, "URI", $.String, "URI");

    $.Constant({Static:true , Public:true }, "Type", $.String, "Type");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecurity10Constants+Elements */ 

(function Elements$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecurity10Constants+Elements", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "BinarySecurityToken", $.String, "BinarySecurityToken");

    $.Constant({Static:true , Public:true }, "Reference", $.String, "Reference");

    $.Constant({Static:true , Public:true }, "KeyIdentifier", $.String, "KeyIdentifier");

    $.Constant({Static:true , Public:true }, "SecurityTokenReference", $.String, "SecurityTokenReference");

    $.Constant({Static:true , Public:true }, "UsernameToken", $.String, "UsernameToken");

    $.Constant({Static:true , Public:true }, "Username", $.String, "Username");

    $.Constant({Static:true , Public:true }, "Password", $.String, "Password");

    $.Constant({Static:true , Public:true }, "Nonce", $.String, "Nonce");

    $.Constant({Static:true , Public:true }, "Created", $.String, "Created");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecurity10Constants+EncodingTypes */ 

(function EncodingTypes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecurity10Constants+EncodingTypes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Base64", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary");

    $.Constant({Static:true , Public:true }, "HexBinary", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#HexBinary");

    $.Constant({Static:true , Public:true }, "Text", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Text");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecurity10Constants+FaultCodes */ 

(function FaultCodes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecurity10Constants+FaultCodes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "FailedAuthentication", $.String, "FailedAuthentication");

    $.Constant({Static:true , Public:true }, "FailedCheck", $.String, "FailedCheck");

    $.Constant({Static:true , Public:true }, "InvalidSecurity", $.String, "InvalidSecurity");

    $.Constant({Static:true , Public:true }, "InvalidSecurityToken", $.String, "InvalidSecurityToken");

    $.Constant({Static:true , Public:true }, "MessageExpired", $.String, "MessageExpired");

    $.Constant({Static:true , Public:true }, "SecurityTokenUnavailable", $.String, "SecurityTokenUnavailable");

    $.Constant({Static:true , Public:true }, "UnsupportedAlgorithm", $.String, "UnsupportedAlgorithm");

    $.Constant({Static:true , Public:true }, "UnsupportedSecurityToken", $.String, "UnsupportedSecurityToken");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecurity11Constants */ 

(function WSSecurity11Constants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecurity11Constants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "FragmentBaseAddress", $.String, "http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "wsse11");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecurity11Constants+Attributes */ 

(function Attributes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecurity11Constants+Attributes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "TokenType", $.String, "TokenType");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecurity11Constants+KeyTypes */ 

(function KeyTypes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecurity11Constants+KeyTypes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "CardSpaceV1Sha1Thumbprint", $.String, "http://docs.oasis-open.org/wss/2004/xx/oasis-2004xx-wss-soap-message-security-1.1#ThumbprintSHA1");

    $.Constant({Static:true , Public:true }, "Sha1Thumbprint", $.String, "http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1#ThumbprintSHA1");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecurityUtilityConstants */ 

(function WSSecurityUtilityConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecurityUtilityConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "wsu");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSSecurityUtilityConstants+Attributes */ 

(function Attributes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSSecurityUtilityConstants+Attributes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Id", $.String, "Id");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSUtilityConstants */ 

(function WSUtilityConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSUtilityConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "NamespaceURI", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "wsu");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSUtilityConstants+Attributes */ 

(function Attributes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSUtilityConstants+Attributes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "IdAttribute", $.String, "Id");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.WSUtilityConstants+ElementNames */ 

(function ElementNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.WSUtilityConstants+ElementNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Created", $.String, "Created");

    $.Constant({Static:true , Public:true }, "Expires", $.String, "Expires");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IdentityModel.Selectors");
/* class System.IdentityModel.Selectors.X509CertificateValidator */ 

(function X509CertificateValidator$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.X509CertificateValidator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateChainTrustValidator", 
      new JSIL.MethodSignature($.Type, [$.Boolean, $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreatePeerOrChainTrustValidator", 
      new JSIL.MethodSignature($.Type, [$.Boolean, $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy")])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ChainTrust", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_None", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NTAuthChainTrust", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PeerOrChainTrust", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PeerTrust", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCustomConfiguration", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.Field({Static:true , Public:false}, "peerTrust", $.Type);

    $.Field({Static:true , Public:false}, "chainTrust", $.Type);

    $.Field({Static:true , Public:false}, "ntAuthChainTrust", $.Type);

    $.Field({Static:true , Public:false}, "peerOrChainTrust", $.Type);

    $.Field({Static:true , Public:false}, "none", $.Type);

    $.Property({Static:true , Public:true }, "None", $.Type);

    $.Property({Static:true , Public:true }, "PeerTrust", $.Type);

    $.Property({Static:true , Public:true }, "ChainTrust", $.Type);

    $.Property({Static:true , Public:false}, "NTAuthChainTrust", $.Type);

    $.Property({Static:true , Public:true }, "PeerOrChainTrust", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.Configuration.ICustomIdentityConfiguration")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.X509CertificateValidator+NoneX509CertificateValidator */ 

(function NoneX509CertificateValidator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"), 
      Name: "System.IdentityModel.Selectors.X509CertificateValidator+NoneX509CertificateValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.X509CertificateValidator+PeerTrustValidator */ 

(function PeerTrustValidator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"), 
      Name: "System.IdentityModel.Selectors.X509CertificateValidator+PeerTrustValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "StoreContainsCertificate", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreName"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Exception")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.X509CertificateValidator+ChainTrustValidator */ 

(function ChainTrustValidator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"), 
      Name: "System.IdentityModel.Selectors.X509CertificateValidator+ChainTrustValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy"), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChainStatusInformation", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatus")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.Field({Static:false, Public:false}, "useMachineContext", $.Boolean);

    $.Field({Static:false, Public:false}, "chainPolicy", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy"));

    $.Field({Static:false, Public:false}, "chainPolicyOID", $.UInt32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.X509CertificateValidator+PeerOrChainTrustValidator */ 

(function PeerOrChainTrustValidator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"), 
      Name: "System.IdentityModel.Selectors.X509CertificateValidator+PeerOrChainTrustValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.Field({Static:false, Public:false}, "chain", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.Field({Static:false, Public:false}, "peer", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator+PeerTrustValidator"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.X509CertificateValidatorEx */ 

(function X509CertificateValidatorEx$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"), 
      Name: "System.IdentityModel.X509CertificateValidatorEx", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"), 
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.Field({Static:false, Public:false}, "certificateValidationMode", $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"));

    $.Field({Static:false, Public:false}, "chainPolicy", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy"));

    $.Field({Static:false, Public:false}, "validator", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.X509Util */ 

(function X509Util$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.IdentityModel.X509Util", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "CreateCertificateValidator", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"), [
          $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"), 
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureAndGetPrivateRSAKey", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.RSA"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCertificateId", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCertificateIssuerName", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm19.TypeRef("System.IdentityModel.Tokens.IssuerNameRegistry")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetClaimsFromCertificate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Security.Claims.Claim")]), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveCertificate", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreName"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"), 
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509FindType"), $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryResolveCertificate", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreName"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"), 
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509FindType"), $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XD */ 

(function XD$Members () {
  var $, $thisType;















  JSIL.MakeStaticClass("System.IdentityModel.XD", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ExclusiveC14NDictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.ExclusiveC14NDictionary"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SamlDictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SamlDictionary"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SecureConversationDec2005Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SecureConversationDec2005Dictionary"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SecureConversationFeb2005Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SecureConversationFeb2005Dictionary"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SecurityAlgorithmDec2005Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDec2005Dictionary"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SecurityAlgorithmDictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDictionary"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SecurityJan2004Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SecurityJan2004Dictionary"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SecurityXXX2005Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SecurityXXX2005Dictionary"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TrustDec2005Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.TrustDec2005Dictionary"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TrustFeb2005Dictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.TrustFeb2005Dictionary"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UtilityDictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.UtilityDictionary"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XmlEncryptionDictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.XmlEncryptionDictionary"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XmlSignatureDictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.XmlSignatureDictionary"))
    );

    $.Field({Static:true , Public:false}, "exclusiveC14NDictionary", $asm19.TypeRef("System.IdentityModel.ExclusiveC14NDictionary"));

    $.Field({Static:true , Public:false}, "samlDictionary", $asm19.TypeRef("System.IdentityModel.SamlDictionary"));

    $.Field({Static:true , Public:false}, "secureConversationDec2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecureConversationDec2005Dictionary"));

    $.Field({Static:true , Public:false}, "secureConversationFeb2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecureConversationFeb2005Dictionary"));

    $.Field({Static:true , Public:false}, "securityAlgorithmDictionary", $asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDictionary"));

    $.Field({Static:true , Public:false}, "securityAlgorithmDec2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDec2005Dictionary"));

    $.Field({Static:true , Public:false}, "securityJan2004Dictionary", $asm19.TypeRef("System.IdentityModel.SecurityJan2004Dictionary"));

    $.Field({Static:true , Public:false}, "securityXXX2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecurityXXX2005Dictionary"));

    $.Field({Static:true , Public:false}, "trustDec2005Dictionary", $asm19.TypeRef("System.IdentityModel.TrustDec2005Dictionary"));

    $.Field({Static:true , Public:false}, "trustFeb2005Dictionary", $asm19.TypeRef("System.IdentityModel.TrustFeb2005Dictionary"));

    $.Field({Static:true , Public:false}, "utilityDictionary", $asm19.TypeRef("System.IdentityModel.UtilityDictionary"));

    $.Field({Static:true , Public:false}, "xmlEncryptionDictionary", $asm19.TypeRef("System.IdentityModel.XmlEncryptionDictionary"));

    $.Field({Static:true , Public:false}, "xmlSignatureDictionary", $asm19.TypeRef("System.IdentityModel.XmlSignatureDictionary"));

    $.Property({Static:true , Public:true }, "Dictionary", $asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"));

    $.Property({Static:true , Public:true }, "ExclusiveC14NDictionary", $asm19.TypeRef("System.IdentityModel.ExclusiveC14NDictionary"));

    $.Property({Static:true , Public:true }, "SamlDictionary", $asm19.TypeRef("System.IdentityModel.SamlDictionary"));

    $.Property({Static:true , Public:true }, "SecureConversationDec2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecureConversationDec2005Dictionary"));

    $.Property({Static:true , Public:true }, "SecureConversationFeb2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecureConversationFeb2005Dictionary"));

    $.Property({Static:true , Public:true }, "SecurityAlgorithmDictionary", $asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDictionary"));

    $.Property({Static:true , Public:true }, "SecurityAlgorithmDec2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecurityAlgorithmDec2005Dictionary"));

    $.Property({Static:true , Public:true }, "SecurityJan2004Dictionary", $asm19.TypeRef("System.IdentityModel.SecurityJan2004Dictionary"));

    $.Property({Static:true , Public:true }, "SecurityXXX2005Dictionary", $asm19.TypeRef("System.IdentityModel.SecurityXXX2005Dictionary"));

    $.Property({Static:true , Public:true }, "TrustDec2005Dictionary", $asm19.TypeRef("System.IdentityModel.TrustDec2005Dictionary"));

    $.Property({Static:true , Public:true }, "TrustFeb2005Dictionary", $asm19.TypeRef("System.IdentityModel.TrustFeb2005Dictionary"));

    $.Property({Static:true , Public:true }, "UtilityDictionary", $asm19.TypeRef("System.IdentityModel.UtilityDictionary"));

    $.Property({Static:true , Public:true }, "XmlEncryptionDictionary", $asm19.TypeRef("System.IdentityModel.XmlEncryptionDictionary"));

    $.Property({Static:true , Public:true }, "XmlSignatureDictionary", $asm19.TypeRef("System.IdentityModel.XmlSignatureDictionary"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.ExclusiveC14NDictionary */ 

(function ExclusiveC14NDictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.ExclusiveC14NDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );

    $.Field({Static:false, Public:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "PrefixList", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "InclusiveNamespaces", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Prefix", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SamlDictionary */ 

(function SamlDictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SamlDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );

    $.Field({Static:false, Public:true }, "Access", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AccessDecision", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Action", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Advice", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Assertion", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AssertionId", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AssertionIdReference", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Attribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AttributeName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AttributeNamespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AttributeStatement", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AttributeValue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Audience", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AudienceRestrictionCondition", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AuthenticationInstant", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AuthenticationMethod", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AuthenticationStatement", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AuthorityBinding", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AuthorityKind", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AuthorizationDecisionStatement", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Binding", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Condition", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Conditions", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Decision", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "DoNotCacheCondition", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Evidence", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "IssueInstant", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Issuer", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Location", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "MajorVersion", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "MinorVersion", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "NameIdentifier", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "NameIdentifierFormat", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "NameIdentifierNameQualifier", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "ActionNamespaceAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "NotBefore", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "NotOnOrAfter", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "PreferredPrefix", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Statement", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Subject", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SubjectConfirmation", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SubjectConfirmationData", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SubjectConfirmationMethod", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "HolderOfKey", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SenderVouches", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SubjectLocality", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SubjectLocalityDNSAddress", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SubjectLocalityIPAddress", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SubjectStatement", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "UnspecifiedAuthenticationMethod", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "NamespaceAttributePrefix", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Resource", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "UserName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "UserNameNamespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EmailName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EmailNamespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecureConversationDictionary */ 

(function SecureConversationDictionary$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SecureConversationDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );

    $.Field({Static:false, Public:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "DerivedKeyToken", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Nonce", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Length", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SecurityContextToken", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AlgorithmAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Generation", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Label", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Offset", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Properties", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Identifier", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Cookie", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RenewNeededFaultCode", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "BadContextTokenFaultCode", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Prefix", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "DerivedKeyTokenType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SecurityContextTokenType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SecurityContextTokenReferenceValueType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityContextIssuance", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityContextIssuanceResponse", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityContextRenew", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityContextRenewResponse", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityContextClose", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityContextCloseResponse", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Instance", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecureConversationDec2005Dictionary */ 

(function SecureConversationDec2005Dictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.SecureConversationDictionary"), 
      Name: "System.IdentityModel.SecureConversationDec2005Dictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecureConversationFeb2005Dictionary */ 

(function SecureConversationFeb2005Dictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.SecureConversationDictionary"), 
      Name: "System.IdentityModel.SecureConversationFeb2005Dictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityAlgorithmDictionary */ 

(function SecurityAlgorithmDictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SecurityAlgorithmDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );

    $.Field({Static:false, Public:true }, "Aes128Encryption", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Aes128KeyWrap", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Aes192Encryption", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Aes192KeyWrap", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Aes256Encryption", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Aes256KeyWrap", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "DesEncryption", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "DsaSha1Signature", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "ExclusiveC14n", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "ExclusiveC14nWithComments", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "HmacSha1Signature", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "HmacSha256Signature", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Psha1KeyDerivation", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Ripemd160Digest", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RsaOaepKeyWrap", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RsaSha1Signature", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RsaSha256Signature", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RsaV15KeyWrap", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Sha1Digest", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Sha256Digest", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Sha512Digest", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "TripleDesEncryption", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "TripleDesKeyWrap", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "TlsSspiKeyWrap", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "WindowsSspiKeyWrap", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityAlgorithmDec2005Dictionary */ 

(function SecurityAlgorithmDec2005Dictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SecurityAlgorithmDec2005Dictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );

    $.Field({Static:false, Public:true }, "Psha1KeyDerivationDec2005", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityJan2004Dictionary */ 

(function SecurityJan2004Dictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SecurityJan2004Dictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );

    $.Field({Static:false, Public:true }, "Prefix", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "NonceElement", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "PasswordElement", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "PasswordTextName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "UserNameElement", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "UserNameTokenElement", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "BinarySecurityToken", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EncodingType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Reference", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "URI", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "KeyIdentifier", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EncodingTypeValueBase64Binary", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EncodingTypeValueHexBinary", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EncodingTypeValueText", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "X509SKIValueType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "KerberosTokenTypeGSS", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "KerberosTokenType1510", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SamlAssertionIdValueType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SamlAssertion", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SamlUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RelAssertionValueType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "FailedAuthenticationFaultCode", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "InvalidSecurityTokenFaultCode", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "InvalidSecurityFaultCode", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SecurityTokenReference", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Security", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "ValueType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "TypeAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "KerberosHashValueType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityXXX2005Dictionary */ 

(function SecurityXXX2005Dictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SecurityXXX2005Dictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );

    $.Field({Static:false, Public:true }, "Prefix", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SignatureConfirmation", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "ValueAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "TokenTypeAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "ThumbprintSha1ValueType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EncryptedKeyTokenType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EncryptedKeyHashValueType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SamlTokenType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Saml20TokenType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Saml11AssertionValueType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EncryptedHeader", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.TrustDictionary */ 

(function TrustDictionary$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.TrustDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );

    $.Field({Static:false, Public:true }, "RequestSecurityTokenResponseCollection", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "BinarySecretClauseType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "CombinedHashLabel", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityTokenResponse", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "TokenType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "KeySize", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestedTokenReference", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AppliesTo", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Authenticator", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "CombinedHash", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "BinaryExchange", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Lifetime", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestedSecurityToken", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Entropy", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestedProofToken", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "ComputedKey", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityToken", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Context", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "BinarySecret", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Type", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SpnegoValueTypeUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "TlsnegoValueTypeUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Prefix", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityTokenIssuance", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityTokenIssuanceResponse", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestTypeIssue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SymmetricKeyBinarySecret", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Psha1ComputedKeyUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "NonceBinarySecret", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RenewTarget", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "CloseTarget", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestedTokenClosed", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestedAttachedReference", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestedUnattachedReference", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "IssuedTokensHeader", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestTypeRenew", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestTypeClose", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "KeyType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SymmetricKeyType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "PublicKeyType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Claims", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "InvalidRequestFaultCode", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "FailedAuthenticationFaultCode", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "UseKey", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SignWith", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EncryptWith", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EncryptionAlgorithm", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "CanonicalizationAlgorithm", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "ComputedKeyAlgorithm", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AsymmetricKeyBinarySecret", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityTokenCollectionIssuanceFinalResponse", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityTokenRenewal", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityTokenRenewalResponse", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityTokenCollectionRenewalFinalResponse", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityTokenCancellation", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityTokenCancellationResponse", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RequestSecurityTokenCollectionCancellationFinalResponse", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "KeyWrapAlgorithm", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "BearerKeyType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SecondaryParameters", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Dialect", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "DialectType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.TrustDec2005Dictionary */ 

(function TrustDec2005Dictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.TrustDictionary"), 
      Name: "System.IdentityModel.TrustDec2005Dictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.TrustFeb2005Dictionary */ 

(function TrustFeb2005Dictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.TrustDictionary"), 
      Name: "System.IdentityModel.TrustFeb2005Dictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.UtilityDictionary */ 

(function UtilityDictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.UtilityDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );

    $.Field({Static:false, Public:true }, "IdAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Timestamp", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "CreatedElement", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "ExpiresElement", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Prefix", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlEncryptionDictionary */ 

(function XmlEncryptionDictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.XmlEncryptionDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );

    $.Field({Static:false, Public:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "DataReference", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EncryptedData", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EncryptionMethod", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "CipherData", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "CipherValue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "ReferenceList", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Encoding", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "MimeType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Type", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Id", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "CarriedKeyName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Recipient", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EncryptedKey", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "URI", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "KeyReference", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Prefix", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "ElementType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "ContentType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "AlgorithmAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlSignatureDictionary */ 

(function XmlSignatureDictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.XmlSignatureDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.IdentityModelDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupDictionaryString", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryString"), [$asm21.TypeRef("System.Xml.IXmlDictionary"), $.String])
    );

    $.Field({Static:false, Public:true }, "Algorithm", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "URI", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Reference", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Transforms", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Transform", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "DigestMethod", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "DigestValue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Namespace", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "EnvelopedSignature", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "KeyInfo", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Signature", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SignedInfo", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "CanonicalizationMethod", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SignatureMethod", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "SignatureValue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "KeyName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Type", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "MgmtData", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Prefix", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "KeyValue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "RsaKeyValue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Modulus", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "Exponent", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "X509Data", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "X509IssuerSerial", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "X509IssuerName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "X509SerialNumber", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:true }, "X509Certificate", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.ExclusiveC14NStrings */ 

(function ExclusiveC14NStrings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.ExclusiveC14NStrings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://www.w3.org/2001/10/xml-exc-c14n#");

    $.Constant({Static:true , Public:true }, "PrefixList", $.String, "PrefixList");

    $.Constant({Static:true , Public:true }, "InclusiveNamespaces", $.String, "InclusiveNamespaces");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "ec");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SamlStrings */ 

(function SamlStrings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.SamlStrings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Access", $.String, "Access");

    $.Constant({Static:true , Public:true }, "AccessDecision", $.String, "AccessDecision");

    $.Constant({Static:true , Public:true }, "Action", $.String, "Action");

    $.Constant({Static:true , Public:true }, "Advice", $.String, "Advice");

    $.Constant({Static:true , Public:true }, "Assertion", $.String, "Assertion");

    $.Constant({Static:true , Public:true }, "AssertionId", $.String, "AssertionID");

    $.Constant({Static:true , Public:true }, "AssertionIdReference", $.String, "AssertionIDReference");

    $.Constant({Static:true , Public:true }, "Attribute", $.String, "Attribute");

    $.Constant({Static:true , Public:true }, "AttributeName", $.String, "AttributeName");

    $.Constant({Static:true , Public:true }, "AttributeNamespace", $.String, "AttributeNamespace");

    $.Constant({Static:true , Public:true }, "AttributeStatement", $.String, "AttributeStatement");

    $.Constant({Static:true , Public:true }, "AttributeValue", $.String, "AttributeValue");

    $.Constant({Static:true , Public:true }, "Audience", $.String, "Audience");

    $.Constant({Static:true , Public:true }, "AudienceRestrictionCondition", $.String, "AudienceRestrictionCondition");

    $.Constant({Static:true , Public:true }, "AuthenticationInstant", $.String, "AuthenticationInstant");

    $.Constant({Static:true , Public:true }, "AuthenticationMethod", $.String, "AuthenticationMethod");

    $.Constant({Static:true , Public:true }, "AuthenticationStatement", $.String, "AuthenticationStatement");

    $.Constant({Static:true , Public:true }, "AuthorityBinding", $.String, "AuthorityBinding");

    $.Constant({Static:true , Public:true }, "AuthorityKind", $.String, "AuthorityKind");

    $.Constant({Static:true , Public:true }, "AuthorizationDecisionStatement", $.String, "AuthorizationDecisionStatement");

    $.Constant({Static:true , Public:true }, "Binding", $.String, "Binding");

    $.Constant({Static:true , Public:true }, "Condition", $.String, "Condition");

    $.Constant({Static:true , Public:true }, "Conditions", $.String, "Conditions");

    $.Constant({Static:true , Public:true }, "Decision", $.String, "Decision");

    $.Constant({Static:true , Public:true }, "DoNotCacheCondition", $.String, "DoNotCacheCondition");

    $.Constant({Static:true , Public:true }, "Evidence", $.String, "Evidence");

    $.Constant({Static:true , Public:true }, "IssueInstant", $.String, "IssueInstant");

    $.Constant({Static:true , Public:true }, "Issuer", $.String, "Issuer");

    $.Constant({Static:true , Public:true }, "Location", $.String, "Location");

    $.Constant({Static:true , Public:true }, "MajorVersion", $.String, "MajorVersion");

    $.Constant({Static:true , Public:true }, "MinorVersion", $.String, "MinorVersion");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "urn:oasis:names:tc:SAML:1.0:assertion");

    $.Constant({Static:true , Public:true }, "NameIdentifier", $.String, "NameIdentifier");

    $.Constant({Static:true , Public:true }, "NameIdentifierFormat", $.String, "Format");

    $.Constant({Static:true , Public:true }, "NameIdentifierNameQualifier", $.String, "NameQualifier");

    $.Constant({Static:true , Public:true }, "ActionNamespaceAttribute", $.String, "Namespace");

    $.Constant({Static:true , Public:true }, "NotBefore", $.String, "NotBefore");

    $.Constant({Static:true , Public:true }, "NotOnOrAfter", $.String, "NotOnOrAfter");

    $.Constant({Static:true , Public:true }, "PreferredPrefix", $.String, "saml");

    $.Constant({Static:true , Public:true }, "Statement", $.String, "Statement");

    $.Constant({Static:true , Public:true }, "Subject", $.String, "Subject");

    $.Constant({Static:true , Public:true }, "SubjectConfirmation", $.String, "SubjectConfirmation");

    $.Constant({Static:true , Public:true }, "SubjectConfirmationData", $.String, "SubjectConfirmationData");

    $.Constant({Static:true , Public:true }, "SubjectConfirmationMethod", $.String, "ConfirmationMethod");

    $.Constant({Static:true , Public:true }, "HolderOfKey", $.String, "urn:oasis:names:tc:SAML:1.0:cm:holder-of-key");

    $.Constant({Static:true , Public:true }, "SenderVouches", $.String, "urn:oasis:names:tc:SAML:1.0:cm:sender-vouches");

    $.Constant({Static:true , Public:true }, "SubjectLocality", $.String, "SubjectLocality");

    $.Constant({Static:true , Public:true }, "SubjectLocalityDNSAddress", $.String, "DNSAddress");

    $.Constant({Static:true , Public:true }, "SubjectLocalityIPAddress", $.String, "IPAddress");

    $.Constant({Static:true , Public:true }, "SubjectStatement", $.String, "SubjectStatement");

    $.Constant({Static:true , Public:true }, "UnspecifiedAuthenticationMethod", $.String, "urn:oasis:names:tc:SAML:1.0:am:unspecified");

    $.Constant({Static:true , Public:true }, "NamespaceAttributePrefix", $.String, "xmlns");

    $.Constant({Static:true , Public:true }, "Resource", $.String, "Resource");

    $.Constant({Static:true , Public:true }, "UserName", $.String, "UserName");

    $.Constant({Static:true , Public:true }, "UserNameNamespace", $.String, "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName");

    $.Constant({Static:true , Public:true }, "EmailName", $.String, "EmailName");

    $.Constant({Static:true , Public:true }, "EmailNamespace", $.String, "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecureConversationStrings */ 

(function SecureConversationStrings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.SecureConversationStrings", false, [], function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecureConversationDec2005Strings */ 

(function SecureConversationDec2005Strings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.SecureConversationDec2005Strings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "SecurityContextToken", $.String, "SecurityContextToken");

    $.Constant({Static:true , Public:true }, "AlgorithmAttribute", $.String, "Algorithm");

    $.Constant({Static:true , Public:true }, "Generation", $.String, "Generation");

    $.Constant({Static:true , Public:true }, "Label", $.String, "Label");

    $.Constant({Static:true , Public:true }, "Offset", $.String, "Offset");

    $.Constant({Static:true , Public:true }, "Properties", $.String, "Properties");

    $.Constant({Static:true , Public:true }, "Identifier", $.String, "Identifier");

    $.Constant({Static:true , Public:true }, "Cookie", $.String, "Cookie");

    $.Constant({Static:true , Public:true }, "RenewNeededFaultCode", $.String, "RenewNeeded");

    $.Constant({Static:true , Public:true }, "BadContextTokenFaultCode", $.String, "BadContextToken");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "sc");

    $.Constant({Static:true , Public:true }, "DerivedKeyTokenType", $.String, "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/dk");

    $.Constant({Static:true , Public:true }, "SecurityContextTokenType", $.String, "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/sct");

    $.Constant({Static:true , Public:true }, "SecurityContextTokenReferenceValueType", $.String, "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/sct");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextIssuance", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/SCT");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextIssuanceResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/SCT");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextRenew", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/SCT/Renew");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextRenewResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/SCT/Renew");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextClose", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/SCT/Cancel");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextCloseResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/SCT/Cancel");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512");

    $.Constant({Static:true , Public:true }, "DerivedKeyToken", $.String, "DerivedKeyToken");

    $.Constant({Static:true , Public:true }, "Nonce", $.String, "Nonce");

    $.Constant({Static:true , Public:true }, "Length", $.String, "Length");

    $.Constant({Static:true , Public:true }, "Instance", $.String, "Instance");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecureConversationFeb2005Strings */ 

(function SecureConversationFeb2005Strings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.SecureConversationFeb2005Strings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/ws/2005/02/sc");

    $.Constant({Static:true , Public:true }, "DerivedKeyToken", $.String, "DerivedKeyToken");

    $.Constant({Static:true , Public:true }, "Nonce", $.String, "Nonce");

    $.Constant({Static:true , Public:true }, "Length", $.String, "Length");

    $.Constant({Static:true , Public:true }, "SecurityContextToken", $.String, "SecurityContextToken");

    $.Constant({Static:true , Public:true }, "AlgorithmAttribute", $.String, "Algorithm");

    $.Constant({Static:true , Public:true }, "Generation", $.String, "Generation");

    $.Constant({Static:true , Public:true }, "Label", $.String, "Label");

    $.Constant({Static:true , Public:true }, "Offset", $.String, "Offset");

    $.Constant({Static:true , Public:true }, "Properties", $.String, "Properties");

    $.Constant({Static:true , Public:true }, "Identifier", $.String, "Identifier");

    $.Constant({Static:true , Public:true }, "Cookie", $.String, "Cookie");

    $.Constant({Static:true , Public:true }, "RenewNeededFaultCode", $.String, "RenewNeeded");

    $.Constant({Static:true , Public:true }, "BadContextTokenFaultCode", $.String, "BadContextToken");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "c");

    $.Constant({Static:true , Public:true }, "DerivedKeyTokenType", $.String, "http://schemas.xmlsoap.org/ws/2005/02/sc/dk");

    $.Constant({Static:true , Public:true }, "SecurityContextTokenType", $.String, "http://schemas.xmlsoap.org/ws/2005/02/sc/sct");

    $.Constant({Static:true , Public:true }, "SecurityContextTokenReferenceValueType", $.String, "http://schemas.xmlsoap.org/ws/2005/02/sc/sct");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextIssuance", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/SCT");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextIssuanceResponse", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/SCT");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextRenew", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/SCT/Renew");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextRenewResponse", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/SCT/Renew");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextClose", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/SCT/Cancel");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextCloseResponse", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/SCT/Cancel");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityAlgorithmStrings */ 

(function SecurityAlgorithmStrings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.SecurityAlgorithmStrings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Aes128Encryption", $.String, "http://www.w3.org/2001/04/xmlenc#aes128-cbc");

    $.Constant({Static:true , Public:true }, "Aes128KeyWrap", $.String, "http://www.w3.org/2001/04/xmlenc#kw-aes128");

    $.Constant({Static:true , Public:true }, "Aes192Encryption", $.String, "http://www.w3.org/2001/04/xmlenc#aes192-cbc");

    $.Constant({Static:true , Public:true }, "Aes192KeyWrap", $.String, "http://www.w3.org/2001/04/xmlenc#kw-aes192");

    $.Constant({Static:true , Public:true }, "Aes256Encryption", $.String, "http://www.w3.org/2001/04/xmlenc#aes256-cbc");

    $.Constant({Static:true , Public:true }, "Aes256KeyWrap", $.String, "http://www.w3.org/2001/04/xmlenc#kw-aes256");

    $.Constant({Static:true , Public:true }, "DesEncryption", $.String, "http://www.w3.org/2001/04/xmlenc#des-cbc");

    $.Constant({Static:true , Public:true }, "DsaSha1Signature", $.String, "http://www.w3.org/2000/09/xmldsig#dsa-sha1");

    $.Constant({Static:true , Public:true }, "ExclusiveC14n", $.String, "http://www.w3.org/2001/10/xml-exc-c14n#");

    $.Constant({Static:true , Public:true }, "ExclusiveC14nWithComments", $.String, "http://www.w3.org/2001/10/xml-exc-c14n#WithComments");

    $.Constant({Static:true , Public:true }, "HmacSha1Signature", $.String, "http://www.w3.org/2000/09/xmldsig#hmac-sha1");

    $.Constant({Static:true , Public:true }, "HmacSha256Signature", $.String, "http://www.w3.org/2001/04/xmldsig-more#hmac-sha256");

    $.Constant({Static:true , Public:true }, "Psha1KeyDerivation", $.String, "http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");

    $.Constant({Static:true , Public:true }, "Ripemd160Digest", $.String, "http://www.w3.org/2001/04/xmlenc#ripemd160");

    $.Constant({Static:true , Public:true }, "RsaOaepKeyWrap", $.String, "http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p");

    $.Constant({Static:true , Public:true }, "RsaSha1Signature", $.String, "http://www.w3.org/2000/09/xmldsig#rsa-sha1");

    $.Constant({Static:true , Public:true }, "RsaSha256Signature", $.String, "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256");

    $.Constant({Static:true , Public:true }, "RsaV15KeyWrap", $.String, "http://www.w3.org/2001/04/xmlenc#rsa-1_5");

    $.Constant({Static:true , Public:true }, "Sha1Digest", $.String, "http://www.w3.org/2000/09/xmldsig#sha1");

    $.Constant({Static:true , Public:true }, "Sha256Digest", $.String, "http://www.w3.org/2001/04/xmlenc#sha256");

    $.Constant({Static:true , Public:true }, "Sha512Digest", $.String, "http://www.w3.org/2001/04/xmlenc#sha512");

    $.Constant({Static:true , Public:true }, "TripleDesEncryption", $.String, "http://www.w3.org/2001/04/xmlenc#tripledes-cbc");

    $.Constant({Static:true , Public:true }, "TripleDesKeyWrap", $.String, "http://www.w3.org/2001/04/xmlenc#kw-tripledes");

    $.Constant({Static:true , Public:true }, "TlsSspiKeyWrap", $.String, "http://schemas.xmlsoap.org/2005/02/trust/tlsnego#TLS_Wrap");

    $.Constant({Static:true , Public:true }, "WindowsSspiKeyWrap", $.String, "http://schemas.xmlsoap.org/2005/02/trust/spnego#GSS_Wrap");

    $.Constant({Static:true , Public:true }, "StrTransform", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#STR-Transform");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityAlgorithmDec2005Strings */ 

(function SecurityAlgorithmDec2005Strings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.SecurityAlgorithmDec2005Strings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Psha1KeyDerivationDec2005", $.String, "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/dk/p_sha1");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityJan2004Strings */ 

(function SecurityJan2004Strings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.SecurityJan2004Strings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "o");

    $.Constant({Static:true , Public:true }, "NonceElement", $.String, "Nonce");

    $.Constant({Static:true , Public:true }, "PasswordElement", $.String, "Password");

    $.Constant({Static:true , Public:true }, "PasswordTextName", $.String, "PasswordText");

    $.Constant({Static:true , Public:true }, "UserNameElement", $.String, "Username");

    $.Constant({Static:true , Public:true }, "UserNameTokenElement", $.String, "UsernameToken");

    $.Constant({Static:true , Public:true }, "BinarySecurityToken", $.String, "BinarySecurityToken");

    $.Constant({Static:true , Public:true }, "EncodingType", $.String, "EncodingType");

    $.Constant({Static:true , Public:true }, "Reference", $.String, "Reference");

    $.Constant({Static:true , Public:true }, "URI", $.String, "URI");

    $.Constant({Static:true , Public:true }, "KeyIdentifier", $.String, "KeyIdentifier");

    $.Constant({Static:true , Public:true }, "EncodingTypeValueBase64Binary", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary");

    $.Constant({Static:true , Public:true }, "EncodingTypeValueHexBinary", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#HexBinary");

    $.Constant({Static:true , Public:true }, "EncodingTypeValueText", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Text");

    $.Constant({Static:true , Public:true }, "X509SKIValueType", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509SubjectKeyIdentifier");

    $.Constant({Static:true , Public:true }, "KerberosTokenTypeGSS", $.String, "http://docs.oasis-open.org/wss/oasis-wss-kerberos-token-profile-1.1#GSS_Kerberosv5_AP_REQ");

    $.Constant({Static:true , Public:true }, "KerberosTokenType1510", $.String, "http://docs.oasis-open.org/wss/oasis-wss-kerberos-token-profile-1.1#GSS_Kerberosv5_AP_REQ1510");

    $.Constant({Static:true , Public:true }, "SamlAssertionIdValueType", $.String, "http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.0#SAMLAssertionID");

    $.Constant({Static:true , Public:true }, "SamlAssertion", $.String, "Assertion");

    $.Constant({Static:true , Public:true }, "SamlUri", $.String, "urn:oasis:names:tc:SAML:1.0:assertion");

    $.Constant({Static:true , Public:true }, "RelAssertionValueType", $.String, "http://docs.oasis-open.org/wss/oasis-wss-rel-token-profile-1.0.pdf#license");

    $.Constant({Static:true , Public:true }, "FailedAuthenticationFaultCode", $.String, "FailedAuthentication");

    $.Constant({Static:true , Public:true }, "InvalidSecurityTokenFaultCode", $.String, "InvalidSecurityToken");

    $.Constant({Static:true , Public:true }, "InvalidSecurityFaultCode", $.String, "InvalidSecurity");

    $.Constant({Static:true , Public:true }, "SecurityTokenReference", $.String, "SecurityTokenReference");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");

    $.Constant({Static:true , Public:true }, "Security", $.String, "Security");

    $.Constant({Static:true , Public:true }, "ValueType", $.String, "ValueType");

    $.Constant({Static:true , Public:true }, "TypeAttribute", $.String, "Type");

    $.Constant({Static:true , Public:true }, "KerberosHashValueType", $.String, "http://docs.oasis-open.org/wss/oasis-wss-kerberos-token-profile-1.1#Kerberosv5APREQSHA1");

    $.Constant({Static:true , Public:true }, "SecurityProfileNamespace", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0");

    $.Constant({Static:true , Public:true }, "X509TokenProfileNamespace", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0");

    $.Constant({Static:true , Public:true }, "UPTokenProfileNamespace", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0");

    $.Constant({Static:true , Public:true }, "SamlTokenProfileNamespace", $.String, "http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.0");

    $.Constant({Static:true , Public:true }, "KerberosTokenProfileNamespace", $.String, "http://www.docs.oasis-open.org/wss/2004/07/oasis-000000-wss-kerberos-token-profile-1.0");

    $.Constant({Static:true , Public:true }, "UPTokenType", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#UsernameToken");

    $.Constant({Static:true , Public:true }, "X509TokenType", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3");

    $.Constant({Static:true , Public:true }, "UPTokenPasswordTextValue", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SecurityXXX2005Strings */ 

(function SecurityXXX2005Strings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.SecurityXXX2005Strings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "k");

    $.Constant({Static:true , Public:true }, "SignatureConfirmation", $.String, "SignatureConfirmation");

    $.Constant({Static:true , Public:true }, "ValueAttribute", $.String, "Value");

    $.Constant({Static:true , Public:true }, "TokenTypeAttribute", $.String, "TokenType");

    $.Constant({Static:true , Public:true }, "ThumbprintSha1ValueType", $.String, "http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1#ThumbprintSHA1");

    $.Constant({Static:true , Public:true }, "EncryptedKeyTokenType", $.String, "http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1#EncryptedKey");

    $.Constant({Static:true , Public:true }, "EncryptedKeyHashValueType", $.String, "http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1#EncryptedKeySHA1");

    $.Constant({Static:true , Public:true }, "SamlTokenType", $.String, "http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1");

    $.Constant({Static:true , Public:true }, "Saml20TokenType", $.String, "http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0");

    $.Constant({Static:true , Public:true }, "Saml11AssertionValueType", $.String, "http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID");

    $.Constant({Static:true , Public:true }, "EncryptedHeader", $.String, "EncryptedHeader");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd");

    $.Constant({Static:true , Public:true }, "SecurityProfileNamespace", $.String, "http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1");

    $.Constant({Static:true , Public:true }, "SamlTokenProfileNamespace", $.String, "http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1");

    $.Constant({Static:true , Public:true }, "X509TokenProfileNamespace", $.String, "http://docs.oasis-open.org/wss/2004/xx/oasis-2004xx-wss-x509-token-profile-1.1");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.TrustStrings */ 

(function TrustStrings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.TrustStrings", false, [], function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.TrustDec2005Strings */ 

(function TrustDec2005Strings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.TrustDec2005Strings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "CombinedHashLabel", $.String, "AUTH-HASH");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenResponse", $.String, "RequestSecurityTokenResponse");

    $.Constant({Static:true , Public:true }, "TokenType", $.String, "TokenType");

    $.Constant({Static:true , Public:true }, "KeySize", $.String, "KeySize");

    $.Constant({Static:true , Public:true }, "RequestedTokenReference", $.String, "RequestedTokenReference");

    $.Constant({Static:true , Public:true }, "AppliesTo", $.String, "AppliesTo");

    $.Constant({Static:true , Public:true }, "Authenticator", $.String, "Authenticator");

    $.Constant({Static:true , Public:true }, "CombinedHash", $.String, "CombinedHash");

    $.Constant({Static:true , Public:true }, "BinaryExchange", $.String, "BinaryExchange");

    $.Constant({Static:true , Public:true }, "Lifetime", $.String, "Lifetime");

    $.Constant({Static:true , Public:true }, "RequestedSecurityToken", $.String, "RequestedSecurityToken");

    $.Constant({Static:true , Public:true }, "Entropy", $.String, "Entropy");

    $.Constant({Static:true , Public:true }, "RequestedProofToken", $.String, "RequestedProofToken");

    $.Constant({Static:true , Public:true }, "ComputedKey", $.String, "ComputedKey");

    $.Constant({Static:true , Public:true }, "RequestSecurityToken", $.String, "RequestSecurityToken");

    $.Constant({Static:true , Public:true }, "RequestType", $.String, "RequestType");

    $.Constant({Static:true , Public:true }, "Context", $.String, "Context");

    $.Constant({Static:true , Public:true }, "BinarySecret", $.String, "BinarySecret");

    $.Constant({Static:true , Public:true }, "Type", $.String, "Type");

    $.Constant({Static:true , Public:true }, "SpnegoValueTypeUri", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/spnego");

    $.Constant({Static:true , Public:true }, "TlsnegoValueTypeUri", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/tlsnego");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "trust");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenIssuance", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenIssuanceResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Issue");

    $.Constant({Static:true , Public:true }, "RequestTypeIssue", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue");

    $.Constant({Static:true , Public:true }, "AsymmetricKeyBinarySecret", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/AsymmetricKey");

    $.Constant({Static:true , Public:true }, "SymmetricKeyBinarySecret", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/SymmetricKey");

    $.Constant({Static:true , Public:true }, "NonceBinarySecret", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Nonce");

    $.Constant({Static:true , Public:true }, "Psha1ComputedKeyUri", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/CK/PSHA1");

    $.Constant({Static:true , Public:true }, "KeyType", $.String, "KeyType");

    $.Constant({Static:true , Public:true }, "SymmetricKeyType", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/SymmetricKey");

    $.Constant({Static:true , Public:true }, "PublicKeyType", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/PublicKey");

    $.Constant({Static:true , Public:true }, "Claims", $.String, "Claims");

    $.Constant({Static:true , Public:true }, "InvalidRequestFaultCode", $.String, "InvalidRequest");

    $.Constant({Static:true , Public:true }, "FailedAuthenticationFaultCode", $.String, "FailedAuthentication");

    $.Constant({Static:true , Public:true }, "UseKey", $.String, "UseKey");

    $.Constant({Static:true , Public:true }, "SignWith", $.String, "SignWith");

    $.Constant({Static:true , Public:true }, "EncryptWith", $.String, "EncryptWith");

    $.Constant({Static:true , Public:true }, "EncryptionAlgorithm", $.String, "EncryptionAlgorithm");

    $.Constant({Static:true , Public:true }, "CanonicalizationAlgorithm", $.String, "CanonicalizationAlgorithm");

    $.Constant({Static:true , Public:true }, "ComputedKeyAlgorithm", $.String, "ComputedKeyAlgorithm");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenResponseCollection", $.String, "RequestSecurityTokenResponseCollection");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512");

    $.Constant({Static:true , Public:true }, "BinarySecretClauseType", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512#BinarySecret");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenCollectionIssuanceFinalResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTRC/IssueFinal");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenRenewal", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Renew");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenRenewalResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Renew");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenCollectionRenewalFinalResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/RenewFinal");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenCancellation", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Cancel");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenCancellationResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Cancel");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenCollectionCancellationFinalResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/CancelFinal");

    $.Constant({Static:true , Public:true }, "RequestTypeRenew", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Renew");

    $.Constant({Static:true , Public:true }, "RequestTypeClose", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Cancel");

    $.Constant({Static:true , Public:true }, "RenewTarget", $.String, "RenewTarget");

    $.Constant({Static:true , Public:true }, "CloseTarget", $.String, "CancelTarget");

    $.Constant({Static:true , Public:true }, "RequestedTokenClosed", $.String, "RequestedTokenCancelled");

    $.Constant({Static:true , Public:true }, "RequestedAttachedReference", $.String, "RequestedAttachedReference");

    $.Constant({Static:true , Public:true }, "RequestedUnattachedReference", $.String, "RequestedUnattachedReference");

    $.Constant({Static:true , Public:true }, "IssuedTokensHeader", $.String, "IssuedTokens");

    $.Constant({Static:true , Public:true }, "KeyWrapAlgorithm", $.String, "KeyWrapAlgorithm");

    $.Constant({Static:true , Public:true }, "BearerKeyType", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer");

    $.Constant({Static:true , Public:true }, "SecondaryParameters", $.String, "SecondaryParameters");

    $.Constant({Static:true , Public:true }, "Dialect", $.String, "Dialect");

    $.Constant({Static:true , Public:true }, "DialectType", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.TrustFeb2005Strings */ 

(function TrustFeb2005Strings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.TrustFeb2005Strings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenResponseCollection", $.String, "RequestSecurityTokenResponseCollection");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust");

    $.Constant({Static:true , Public:true }, "BinarySecretClauseType", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust#BinarySecret");

    $.Constant({Static:true , Public:true }, "CombinedHashLabel", $.String, "AUTH-HASH");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenResponse", $.String, "RequestSecurityTokenResponse");

    $.Constant({Static:true , Public:true }, "TokenType", $.String, "TokenType");

    $.Constant({Static:true , Public:true }, "KeySize", $.String, "KeySize");

    $.Constant({Static:true , Public:true }, "RequestedTokenReference", $.String, "RequestedTokenReference");

    $.Constant({Static:true , Public:true }, "AppliesTo", $.String, "AppliesTo");

    $.Constant({Static:true , Public:true }, "Authenticator", $.String, "Authenticator");

    $.Constant({Static:true , Public:true }, "CombinedHash", $.String, "CombinedHash");

    $.Constant({Static:true , Public:true }, "BinaryExchange", $.String, "BinaryExchange");

    $.Constant({Static:true , Public:true }, "Lifetime", $.String, "Lifetime");

    $.Constant({Static:true , Public:true }, "RequestedSecurityToken", $.String, "RequestedSecurityToken");

    $.Constant({Static:true , Public:true }, "Entropy", $.String, "Entropy");

    $.Constant({Static:true , Public:true }, "RequestedProofToken", $.String, "RequestedProofToken");

    $.Constant({Static:true , Public:true }, "ComputedKey", $.String, "ComputedKey");

    $.Constant({Static:true , Public:true }, "RequestSecurityToken", $.String, "RequestSecurityToken");

    $.Constant({Static:true , Public:true }, "RequestType", $.String, "RequestType");

    $.Constant({Static:true , Public:true }, "Context", $.String, "Context");

    $.Constant({Static:true , Public:true }, "BinarySecret", $.String, "BinarySecret");

    $.Constant({Static:true , Public:true }, "Type", $.String, "Type");

    $.Constant({Static:true , Public:true }, "SpnegoValueTypeUri", $.String, "http://schemas.microsoft.com/net/2004/07/secext/WS-SPNego");

    $.Constant({Static:true , Public:true }, "TlsnegoValueTypeUri", $.String, "http://schemas.microsoft.com/net/2004/07/secext/TLSNego");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "t");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenIssuance", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenIssuanceResponse", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Issue");

    $.Constant({Static:true , Public:true }, "RequestTypeIssue", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/Issue");

    $.Constant({Static:true , Public:true }, "SymmetricKeyBinarySecret", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/SymmetricKey");

    $.Constant({Static:true , Public:true }, "Psha1ComputedKeyUri", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/CK/PSHA1");

    $.Constant({Static:true , Public:true }, "NonceBinarySecret", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/Nonce");

    $.Constant({Static:true , Public:true }, "RenewTarget", $.String, "RenewTarget");

    $.Constant({Static:true , Public:true }, "CloseTarget", $.String, "CancelTarget");

    $.Constant({Static:true , Public:true }, "RequestedTokenClosed", $.String, "RequestedTokenCancelled");

    $.Constant({Static:true , Public:true }, "RequestedAttachedReference", $.String, "RequestedAttachedReference");

    $.Constant({Static:true , Public:true }, "RequestedUnattachedReference", $.String, "RequestedUnattachedReference");

    $.Constant({Static:true , Public:true }, "IssuedTokensHeader", $.String, "IssuedTokens");

    $.Constant({Static:true , Public:true }, "RequestTypeRenew", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/Renew");

    $.Constant({Static:true , Public:true }, "RequestTypeClose", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/Cancel");

    $.Constant({Static:true , Public:true }, "KeyType", $.String, "KeyType");

    $.Constant({Static:true , Public:true }, "SymmetricKeyType", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/SymmetricKey");

    $.Constant({Static:true , Public:true }, "PublicKeyType", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/PublicKey");

    $.Constant({Static:true , Public:true }, "Claims", $.String, "Claims");

    $.Constant({Static:true , Public:true }, "InvalidRequestFaultCode", $.String, "InvalidRequest");

    $.Constant({Static:true , Public:true }, "FailedAuthenticationFaultCode", $.String, "FailedAuthentication");

    $.Constant({Static:true , Public:true }, "UseKey", $.String, "UseKey");

    $.Constant({Static:true , Public:true }, "SignWith", $.String, "SignWith");

    $.Constant({Static:true , Public:true }, "EncryptWith", $.String, "EncryptWith");

    $.Constant({Static:true , Public:true }, "EncryptionAlgorithm", $.String, "EncryptionAlgorithm");

    $.Constant({Static:true , Public:true }, "CanonicalizationAlgorithm", $.String, "CanonicalizationAlgorithm");

    $.Constant({Static:true , Public:true }, "ComputedKeyAlgorithm", $.String, "ComputedKeyAlgorithm");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.UtilityStrings */ 

(function UtilityStrings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.UtilityStrings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "IdAttribute", $.String, "Id");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd");

    $.Constant({Static:true , Public:true }, "Timestamp", $.String, "Timestamp");

    $.Constant({Static:true , Public:true }, "CreatedElement", $.String, "Created");

    $.Constant({Static:true , Public:true }, "ExpiresElement", $.String, "Expires");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "u");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlEncryptionStrings */ 

(function XmlEncryptionStrings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.XmlEncryptionStrings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://www.w3.org/2001/04/xmlenc#");

    $.Constant({Static:true , Public:true }, "DataReference", $.String, "DataReference");

    $.Constant({Static:true , Public:true }, "EncryptedData", $.String, "EncryptedData");

    $.Constant({Static:true , Public:true }, "EncryptionMethod", $.String, "EncryptionMethod");

    $.Constant({Static:true , Public:true }, "CipherData", $.String, "CipherData");

    $.Constant({Static:true , Public:true }, "CipherValue", $.String, "CipherValue");

    $.Constant({Static:true , Public:true }, "ReferenceList", $.String, "ReferenceList");

    $.Constant({Static:true , Public:true }, "Encoding", $.String, "Encoding");

    $.Constant({Static:true , Public:true }, "MimeType", $.String, "MimeType");

    $.Constant({Static:true , Public:true }, "Type", $.String, "Type");

    $.Constant({Static:true , Public:true }, "Id", $.String, "Id");

    $.Constant({Static:true , Public:true }, "CarriedKeyName", $.String, "CarriedKeyName");

    $.Constant({Static:true , Public:true }, "Recipient", $.String, "Recipient");

    $.Constant({Static:true , Public:true }, "EncryptedKey", $.String, "EncryptedKey");

    $.Constant({Static:true , Public:true }, "URI", $.String, "URI");

    $.Constant({Static:true , Public:true }, "KeyReference", $.String, "KeyReference");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "e");

    $.Constant({Static:true , Public:true }, "ElementType", $.String, "http://www.w3.org/2001/04/xmlenc#Element");

    $.Constant({Static:true , Public:true }, "ContentType", $.String, "http://www.w3.org/2001/04/xmlenc#Content");

    $.Constant({Static:true , Public:true }, "AlgorithmAttribute", $.String, "Algorithm");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlSignatureStrings */ 

(function XmlSignatureStrings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.XmlSignatureStrings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Algorithm", $.String, "Algorithm");

    $.Constant({Static:true , Public:true }, "URI", $.String, "URI");

    $.Constant({Static:true , Public:true }, "Reference", $.String, "Reference");

    $.Constant({Static:true , Public:true }, "Transforms", $.String, "Transforms");

    $.Constant({Static:true , Public:true }, "Transform", $.String, "Transform");

    $.Constant({Static:true , Public:true }, "DigestMethod", $.String, "DigestMethod");

    $.Constant({Static:true , Public:true }, "DigestValue", $.String, "DigestValue");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://www.w3.org/2000/09/xmldsig#");

    $.Constant({Static:true , Public:true }, "EnvelopedSignature", $.String, "http://www.w3.org/2000/09/xmldsig#enveloped-signature");

    $.Constant({Static:true , Public:true }, "KeyInfo", $.String, "KeyInfo");

    $.Constant({Static:true , Public:true }, "Signature", $.String, "Signature");

    $.Constant({Static:true , Public:true }, "SignedInfo", $.String, "SignedInfo");

    $.Constant({Static:true , Public:true }, "CanonicalizationMethod", $.String, "CanonicalizationMethod");

    $.Constant({Static:true , Public:true }, "SignatureMethod", $.String, "SignatureMethod");

    $.Constant({Static:true , Public:true }, "SignatureValue", $.String, "SignatureValue");

    $.Constant({Static:true , Public:true }, "KeyName", $.String, "KeyName");

    $.Constant({Static:true , Public:true }, "Type", $.String, "Type");

    $.Constant({Static:true , Public:true }, "MgmtData", $.String, "MgmtData");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "");

    $.Constant({Static:true , Public:true }, "KeyValue", $.String, "KeyValue");

    $.Constant({Static:true , Public:true }, "RsaKeyValue", $.String, "RSAKeyValue");

    $.Constant({Static:true , Public:true }, "Modulus", $.String, "Modulus");

    $.Constant({Static:true , Public:true }, "Exponent", $.String, "Exponent");

    $.Constant({Static:true , Public:true }, "X509Data", $.String, "X509Data");

    $.Constant({Static:true , Public:true }, "X509IssuerSerial", $.String, "X509IssuerSerial");

    $.Constant({Static:true , Public:true }, "X509IssuerName", $.String, "X509IssuerName");

    $.Constant({Static:true , Public:true }, "X509SerialNumber", $.String, "X509SerialNumber");

    $.Constant({Static:true , Public:true }, "X509Certificate", $.String, "X509Certificate");

    $.Constant({Static:true , Public:true }, "SecurityJan2004Namespace", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");

    $.Constant({Static:true , Public:true }, "SecurityJan2004Prefix", $.String, "o");

    $.Constant({Static:true , Public:true }, "X509Ski", $.String, "X509SKI");

    $.Constant({Static:true , Public:true }, "TransformationParameters", $.String, "TransformationParameters");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.IdentityModel.XmlAttributeHolder */ 

(function XmlAttributeHolder$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.XmlAttributeHolder", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Deduct", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Type]), $asm2F.TypeRef("System.Xml.XmlWriter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Field({Static:true , Public:true }, "emptyArray", $jsilcore.TypeRef("System.Array", [$.Type]), function ($pi) {
        return JSIL.Array.New($thisType, 0);
      });

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "NamespaceUri", $.String);

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlBuffer */ 

(function XmlBuffer$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.XmlBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CloseSection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidStateException", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BufferSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SectionCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetReader", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryReader"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenSection", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryWriter"), [$asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$.Int32, $asm2F.TypeRef("System.Xml.XmlWriter")])
    );

    $.Field({Static:false, Public:false}, "sections", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.XmlBuffer+Section")]));

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "stream", $asm25.TypeRef("System.Runtime.BufferedOutputStream"));

    $.Field({Static:false, Public:false}, "bufferState", $asm19.TypeRef("System.IdentityModel.XmlBuffer+BufferState"));

    $.Field({Static:false, Public:false}, "writer", $asm21.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.Field({Static:false, Public:false}, "quotas", $asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Property({Static:false, Public:true }, "BufferSize", $.Int32);

    $.Property({Static:false, Public:true }, "SectionCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.XmlBuffer+BufferState */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.XmlBuffer+BufferState", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Created: 0, 
    Writing: 1, 
    Reading: 2, 
  }
);

/* struct System.IdentityModel.XmlBuffer+Section */ 

(function Section$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.IdentityModel.XmlBuffer+Section", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Offset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Quotas", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "size", $.Int32);

    $.Field({Static:false, Public:false}, "quotas", $asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Property({Static:false, Public:true }, "Offset", $.Int32);

    $.Property({Static:false, Public:true }, "Size", $.Int32);

    $.Property({Static:false, Public:true }, "Quotas", $asm21.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlEncryptionConstants */ 

(function XmlEncryptionConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.XmlEncryptionConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://www.w3.org/2001/04/xmlenc#");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "xenc");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlEncryptionConstants+Attributes */ 

(function Attributes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.XmlEncryptionConstants+Attributes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Algorithm", $.String, "Algorithm");

    $.Constant({Static:true , Public:true }, "Encoding", $.String, "Encoding");

    $.Constant({Static:true , Public:true }, "Id", $.String, "Id");

    $.Constant({Static:true , Public:true }, "MimeType", $.String, "MimeType");

    $.Constant({Static:true , Public:true }, "Recipient", $.String, "Recipient");

    $.Constant({Static:true , Public:true }, "Type", $.String, "Type");

    $.Constant({Static:true , Public:true }, "Uri", $.String, "URI");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlEncryptionConstants+Elements */ 

(function Elements$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.XmlEncryptionConstants+Elements", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "CarriedKeyName", $.String, "CarriedKeyName");

    $.Constant({Static:true , Public:true }, "CipherData", $.String, "CipherData");

    $.Constant({Static:true , Public:true }, "CipherReference", $.String, "CiperReference");

    $.Constant({Static:true , Public:true }, "CipherValue", $.String, "CipherValue");

    $.Constant({Static:true , Public:true }, "DataReference", $.String, "DataReference");

    $.Constant({Static:true , Public:true }, "EncryptedData", $.String, "EncryptedData");

    $.Constant({Static:true , Public:true }, "EncryptedKey", $.String, "EncryptedKey");

    $.Constant({Static:true , Public:true }, "EncryptionMethod", $.String, "EncryptionMethod");

    $.Constant({Static:true , Public:true }, "EncryptionProperties", $.String, "EncryptionProperties");

    $.Constant({Static:true , Public:true }, "KeyReference", $.String, "KeyReference");

    $.Constant({Static:true , Public:true }, "KeySize", $.String, "KeySize");

    $.Constant({Static:true , Public:true }, "OaepParams", $.String, "OAEPparams");

    $.Constant({Static:true , Public:true }, "Recipient", $.String, "Recipient");

    $.Constant({Static:true , Public:true }, "ReferenceList", $.String, "ReferenceList");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlEncryptionConstants+EncryptedDataTypes */ 

(function EncryptedDataTypes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.XmlEncryptionConstants+EncryptedDataTypes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Element", $.String, "http://www.w3.org/2001/04/xmlenc#Element");

    $.Constant({Static:true , Public:true }, "Content", $.String, "http://www.w3.org/2001/04/xmlenc#Content");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlHelper */ 

(function XmlHelper$Members () {
  var $, $thisType;












  JSIL.MakeStaticClass("System.IdentityModel.XmlHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetAttributeAsUniqueId", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.UniqueId"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAttributeAsUniqueId", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.UniqueId"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWhiteSpace", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnRequiredAttributeMissing", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnRequiredElementMissing", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnUnexpectedChildNodeError", 
      new JSIL.MethodSignature(null, [$.String, $asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnUnexpectedChildNodeError", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlElement"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadElementContentAsInt64", 
      new JSIL.MethodSignature($.Int64, [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadEmptyElementAndRequiredAttribute", 
      new JSIL.MethodSignature($.String, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadTextElementAsTrimmedString", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteAttributeStringAsUniqueId", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.UniqueId")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlSignatureConstants */ 

(function XmlSignatureConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.XmlSignatureConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://www.w3.org/2000/09/xmldsig#");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "ds");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlSignatureConstants+Algorithms */ 

(function Algorithms$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.XmlSignatureConstants+Algorithms", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "ExcC14N", $.String, "http://www.w3.org/2001/10/xml-exc-c14n#");

    $.Constant({Static:true , Public:true }, "ExcC14NWithComments", $.String, "http://www.w3.org/2001/10/xml-exc-c14n#WithComments");

    $.Constant({Static:true , Public:true }, "Sha1", $.String, "http://www.w3.org/2000/09/xmldsig#sha1");

    $.Constant({Static:true , Public:true }, "EnvelopedSignature", $.String, "http://www.w3.org/2000/09/xmldsig#enveloped-signature");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlSignatureConstants+Attributes */ 

(function Attributes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.XmlSignatureConstants+Attributes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Algorithm", $.String, "Algorithm");

    $.Constant({Static:true , Public:true }, "Id", $.String, "Id");

    $.Constant({Static:true , Public:true }, "Type", $.String, "Type");

    $.Constant({Static:true , Public:true }, "URI", $.String, "URI");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlSignatureConstants+Elements */ 

(function Elements$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.XmlSignatureConstants+Elements", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "CanonicalizationMethod", $.String, "CanonicalizationMethod");

    $.Constant({Static:true , Public:true }, "DigestMethod", $.String, "DigestMethod");

    $.Constant({Static:true , Public:true }, "DigestValue", $.String, "DigestValue");

    $.Constant({Static:true , Public:true }, "Exponent", $.String, "Exponent");

    $.Constant({Static:true , Public:true }, "KeyInfo", $.String, "KeyInfo");

    $.Constant({Static:true , Public:true }, "KeyName", $.String, "KeyName");

    $.Constant({Static:true , Public:true }, "KeyValue", $.String, "KeyValue");

    $.Constant({Static:true , Public:true }, "Modulus", $.String, "Modulus");

    $.Constant({Static:true , Public:true }, "Object", $.String, "Object");

    $.Constant({Static:true , Public:true }, "Reference", $.String, "Reference");

    $.Constant({Static:true , Public:true }, "RetrievalMethod", $.String, "RetrievalMethod");

    $.Constant({Static:true , Public:true }, "RsaKeyValue", $.String, "RsaKeyValue");

    $.Constant({Static:true , Public:true }, "Signature", $.String, "Signature");

    $.Constant({Static:true , Public:true }, "SignatureMethod", $.String, "SignatureMethod");

    $.Constant({Static:true , Public:true }, "SignatureValue", $.String, "SignatureValue");

    $.Constant({Static:true , Public:true }, "SignedInfo", $.String, "SignedInfo");

    $.Constant({Static:true , Public:true }, "Transform", $.String, "Transform");

    $.Constant({Static:true , Public:true }, "Transforms", $.String, "Transforms");

    $.Constant({Static:true , Public:true }, "X509Data", $.String, "X509Data");

    $.Constant({Static:true , Public:true }, "X509IssuerName", $.String, "X509IssuerName");

    $.Constant({Static:true , Public:true }, "X509IssuerSerial", $.String, "X509IssuerSerial");

    $.Constant({Static:true , Public:true }, "X509SerialNumber", $.String, "X509SerialNumber");

    $.Constant({Static:true , Public:true }, "X509SubjectName", $.String, "X509SubjectName");

    $.Constant({Static:true , Public:true }, "X509Certificate", $.String, "X509Certificate");

    $.Constant({Static:true , Public:true }, "X509SKI", $.String, "X509SKI");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.XmlUtil */ 

(function XmlUtil$Members () {
  var $, $thisType;


















  JSIL.MakeStaticClass("System.IdentityModel.XmlUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "EqualsQName", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2F.TypeRef("System.Xml.XmlQualifiedName"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXmlElements", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm2F.TypeRef("System.Xml.XmlElement")]), [$asm2F.TypeRef("System.Xml.XmlNodeList")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXsiType", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsNil", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsValidXmlIDValue", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "NormalizeEmptyString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadElementContentAsInt64", 
      new JSIL.MethodSignature($.Int64, [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ResolveQName", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlQualifiedName"), [$asm2F.TypeRef("System.Xml.XmlReader"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "SerializeSecurityKeyIdentifier", 
      new JSIL.MethodSignature($.String, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Trim", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrimEnd", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrimStart", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateXsiType", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateXsiType", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteElementContentAsInt64", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $.Int64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteElementStringAsUniqueId", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm21.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryString"), $.String
        ])
    );

    $.Constant({Static:true , Public:true }, "XmlNs", $.String, "http://www.w3.org/XML/1998/namespace");

    $.Constant({Static:true , Public:true }, "XmlNsNs", $.String, "http://www.w3.org/2000/xmlns/");

    $.Constant({Static:true , Public:true }, "LanguagePrefix", $.String, "xml");

    $.Constant({Static:true , Public:true }, "LanguageLocalname", $.String, "lang");

    $.Constant({Static:true , Public:true }, "LanguageAttribute", $.String, "xml:lang");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.IdentityModel.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.IdentityModel.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.IdentityModel.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

/* class System.IdentityModel.SR */ 

(function SR$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "SspiLoginPromptHeaderMessage", $.String, "SspiLoginPromptHeaderMessage");

    $.Constant({Static:true , Public:false}, "ValueMustBeNonNegative", $.String, "ValueMustBeNonNegative");

    $.Constant({Static:true , Public:false}, "ValueMustBeInRange", $.String, "ValueMustBeInRange");

    $.Constant({Static:true , Public:false}, "ValueMustBeOne", $.String, "ValueMustBeOne");

    $.Constant({Static:true , Public:false}, "ValueMustBeZero", $.String, "ValueMustBeZero");

    $.Constant({Static:true , Public:false}, "ValueMustBeGreaterThanZero", $.String, "ValueMustBeGreaterThanZero");

    $.Constant({Static:true , Public:false}, "ValueMustBeOf2Types", $.String, "ValueMustBeOf2Types");

    $.Constant({Static:true , Public:false}, "LengthOfArrayToConvertMustGreaterThanZero", $.String, "LengthOfArrayToConvertMustGreaterThanZero");

    $.Constant({Static:true , Public:false}, "LengthMustBeGreaterThanZero", $.String, "LengthMustBeGreaterThanZero");

    $.Constant({Static:true , Public:false}, "ArgumentCannotBeEmptyString", $.String, "ArgumentCannotBeEmptyString");

    $.Constant({Static:true , Public:false}, "AuthorizationContextCreated", $.String, "AuthorizationContextCreated");

    $.Constant({Static:true , Public:false}, "AuthorizationPolicyEvaluated", $.String, "AuthorizationPolicyEvaluated");

    $.Constant({Static:true , Public:false}, "RequiredAttributeMissing", $.String, "RequiredAttributeMissing");

    $.Constant({Static:true , Public:false}, "UnsupportedCryptoAlgorithm", $.String, "UnsupportedCryptoAlgorithm");

    $.Constant({Static:true , Public:false}, "CustomCryptoAlgorithmIsNotValidSymmetricAlgorithm", $.String, "CustomCryptoAlgorithmIsNotValidSymmetricAlgorithm");

    $.Constant({Static:true , Public:false}, "CustomCryptoAlgorithmIsNotValidHashAlgorithm", $.String, "CustomCryptoAlgorithmIsNotValidHashAlgorithm");

    $.Constant({Static:true , Public:false}, "CustomCryptoAlgorithmIsNotValidKeyedHashAlgorithm", $.String, "CustomCryptoAlgorithmIsNotValidKeyedHashAlgorithm");

    $.Constant({Static:true , Public:false}, "CryptoAlgorithmIsNotFipsCompliant", $.String, "CryptoAlgorithmIsNotFipsCompliant");

    $.Constant({Static:true , Public:false}, "InvalidCustomKeyWrapAlgorithm", $.String, "InvalidCustomKeyWrapAlgorithm");

    $.Constant({Static:true , Public:false}, "AlgorithmMismatchForTransform", $.String, "AlgorithmMismatchForTransform");

    $.Constant({Static:true , Public:false}, "SecurityTokenRequirementDoesNotContainProperty", $.String, "SecurityTokenRequirementDoesNotContainProperty");

    $.Constant({Static:true , Public:false}, "SecurityTokenRequirementHasInvalidTypeForProperty", $.String, "SecurityTokenRequirementHasInvalidTypeForProperty");

    $.Constant({Static:true , Public:false}, "UnableToResolveKeyReference", $.String, "UnableToResolveKeyReference");

    $.Constant({Static:true , Public:false}, "UnableToResolveTokenReference", $.String, "UnableToResolveTokenReference");

    $.Constant({Static:true , Public:false}, "NoInputIsSetForCanonicalization", $.String, "NoInputIsSetForCanonicalization");

    $.Constant({Static:true , Public:false}, "RequiredTargetNotSigned", $.String, "RequiredTargetNotSigned");

    $.Constant({Static:true , Public:false}, "XmlBufferQuotaExceeded", $.String, "XmlBufferQuotaExceeded");

    $.Constant({Static:true , Public:false}, "XmlLangAttributeMissing", $.String, "XmlLangAttributeMissing");

    $.Constant({Static:true , Public:false}, "InvalidXmlQualifiedName", $.String, "InvalidXmlQualifiedName");

    $.Constant({Static:true , Public:false}, "UnboundPrefixInQName", $.String, "UnboundPrefixInQName");

    $.Constant({Static:true , Public:false}, "ExpectedElementMissing", $.String, "ExpectedElementMissing");

    $.Constant({Static:true , Public:false}, "UnexpectedXmlChildNode", $.String, "UnexpectedXmlChildNode");

    $.Constant({Static:true , Public:false}, "TokenCancellationNotSupported", $.String, "TokenCancellationNotSupported");

    $.Constant({Static:true , Public:false}, "TokenRenewalNotSupported", $.String, "TokenRenewalNotSupported");

    $.Constant({Static:true , Public:false}, "TokenProviderUnableToGetToken", $.String, "TokenProviderUnableToGetToken");

    $.Constant({Static:true , Public:false}, "TokenProviderUnableToRenewToken", $.String, "TokenProviderUnableToRenewToken");

    $.Constant({Static:true , Public:false}, "CannotValidateSecurityTokenType", $.String, "CannotValidateSecurityTokenType");

    $.Constant({Static:true , Public:false}, "UserNameCannotBeEmpty", $.String, "UserNameCannotBeEmpty");

    $.Constant({Static:true , Public:false}, "LocalIdCannotBeEmpty", $.String, "LocalIdCannotBeEmpty");

    $.Constant({Static:true , Public:false}, "ProvidedNetworkCredentialsForKerberosHasInvalidUserName", $.String, "ProvidedNetworkCredentialsForKerberosHasInvalidUserName");

    $.Constant({Static:true , Public:false}, "UnableToCreateKerberosCredentials", $.String, "UnableToCreateKerberosCredentials");

    $.Constant({Static:true , Public:false}, "UnsupportedTransformAlgorithm", $.String, "UnsupportedTransformAlgorithm");

    $.Constant({Static:true , Public:false}, "AtLeastOneReferenceRequired", $.String, "AtLeastOneReferenceRequired");

    $.Constant({Static:true , Public:false}, "DigestVerificationFailedForReference", $.String, "DigestVerificationFailedForReference");

    $.Constant({Static:true , Public:false}, "SignatureVerificationFailed", $.String, "SignatureVerificationFailed");

    $.Constant({Static:true , Public:false}, "AtLeastOneTransformRequired", $.String, "AtLeastOneTransformRequired");

    $.Constant({Static:true , Public:false}, "AsyncCallbackException", $.String, "AsyncCallbackException");

    $.Constant({Static:true , Public:false}, "UserNameAuthenticationFailed", $.String, "UserNameAuthenticationFailed");

    $.Constant({Static:true , Public:false}, "ObjectIsReadOnly", $.String, "ObjectIsReadOnly");

    $.Constant({Static:true , Public:false}, "UnsupportedKeyDerivationAlgorithm", $.String, "UnsupportedKeyDerivationAlgorithm");

    $.Constant({Static:true , Public:false}, "UnsupportedNodeTypeInReader", $.String, "UnsupportedNodeTypeInReader");

    $.Constant({Static:true , Public:false}, "UnknownICryptoType", $.String, "UnknownICryptoType");

    $.Constant({Static:true , Public:false}, "NoPrivateKeyAvailable", $.String, "NoPrivateKeyAvailable");

    $.Constant({Static:true , Public:false}, "UnsupportedAlgorithmForCryptoOperation", $.String, "UnsupportedAlgorithmForCryptoOperation");

    $.Constant({Static:true , Public:false}, "KeyIdentifierCannotCreateKey", $.String, "KeyIdentifierCannotCreateKey");

    $.Constant({Static:true , Public:false}, "KeyIdentifierClauseDoesNotSupportKeyCreation", $.String, "KeyIdentifierClauseDoesNotSupportKeyCreation");

    $.Constant({Static:true , Public:false}, "TokenDoesNotSupportKeyIdentifierClauseCreation", $.String, "TokenDoesNotSupportKeyIdentifierClauseCreation");

    $.Constant({Static:true , Public:false}, "XmlTokenBufferIsEmpty", $.String, "XmlTokenBufferIsEmpty");

    $.Constant({Static:true , Public:false}, "NoKeyIdentifierClauseFound", $.String, "NoKeyIdentifierClauseFound");

    $.Constant({Static:true , Public:false}, "UnableToCreateKeyedHashAlgorithm", $.String, "UnableToCreateKeyedHashAlgorithm");

    $.Constant({Static:true , Public:false}, "UnableToCreateKeyedHashAlgorithmFromSymmetricCrypto", $.String, "UnableToCreateKeyedHashAlgorithmFromSymmetricCrypto");

    $.Constant({Static:true , Public:false}, "UnableToCreateHashAlgorithmFromAsymmetricCrypto", $.String, "UnableToCreateHashAlgorithmFromAsymmetricCrypto");

    $.Constant({Static:true , Public:false}, "UnableToCreateSignatureDeformatterFromAsymmetricCrypto", $.String, "UnableToCreateSignatureDeformatterFromAsymmetricCrypto");

    $.Constant({Static:true , Public:false}, "UnableToCreateSignatureFormatterFromAsymmetricCrypto", $.String, "UnableToCreateSignatureFormatterFromAsymmetricCrypto");

    $.Constant({Static:true , Public:false}, "InnerReaderMustBeAtElement", $.String, "InnerReaderMustBeAtElement");

    $.Constant({Static:true , Public:false}, "CannotFindCert", $.String, "CannotFindCert");

    $.Constant({Static:true , Public:false}, "FoundMultipleCerts", $.String, "FoundMultipleCerts");

    $.Constant({Static:true , Public:false}, "X509FindValueMismatch", $.String, "X509FindValueMismatch");

    $.Constant({Static:true , Public:false}, "X509FindValueMismatchMulti", $.String, "X509FindValueMismatchMulti");

    $.Constant({Static:true , Public:false}, "X509CertStoreLocationNotValid", $.String, "X509CertStoreLocationNotValid");

    $.Constant({Static:true , Public:false}, "EmptyTransformChainNotSupported", $.String, "EmptyTransformChainNotSupported");

    $.Constant({Static:true , Public:false}, "UnsupportedInputTypeForTransform", $.String, "UnsupportedInputTypeForTransform");

    $.Constant({Static:true , Public:false}, "UnsupportedLastTransform", $.String, "UnsupportedLastTransform");

    $.Constant({Static:true , Public:false}, "UnableToResolveReferenceUriForSignature", $.String, "UnableToResolveReferenceUriForSignature");

    $.Constant({Static:true , Public:false}, "UnsupportedEncryptionAlgorithm", $.String, "UnsupportedEncryptionAlgorithm");

    $.Constant({Static:true , Public:false}, "UnsupportedKeyWrapAlgorithm", $.String, "UnsupportedKeyWrapAlgorithm");

    $.Constant({Static:true , Public:false}, "InvalidAsyncResult", $.String, "InvalidAsyncResult");

    $.Constant({Static:true , Public:false}, "UnableToCreateTokenReference", $.String, "UnableToCreateTokenReference");

    $.Constant({Static:true , Public:false}, "BadEncryptionState", $.String, "BadEncryptionState");

    $.Constant({Static:true , Public:false}, "XmlBufferInInvalidState", $.String, "XmlBufferInInvalidState");

    $.Constant({Static:true , Public:false}, "ReferenceListCannotBeEmpty", $.String, "ReferenceListCannotBeEmpty");

    $.Constant({Static:true , Public:false}, "InvalidDataReferenceInReferenceList", $.String, "InvalidDataReferenceInReferenceList");

    $.Constant({Static:true , Public:false}, "InvalidX509RawData", $.String, "InvalidX509RawData");

    $.Constant({Static:true , Public:false}, "CannotReadKeyIdentifierClause", $.String, "CannotReadKeyIdentifierClause");

    $.Constant({Static:true , Public:false}, "StandardsManagerCannotWriteObject", $.String, "StandardsManagerCannotWriteObject");

    $.Constant({Static:true , Public:false}, "UnknownEncodingInKeyIdentifier", $.String, "UnknownEncodingInKeyIdentifier");

    $.Constant({Static:true , Public:false}, "MultipleSamlAuthorityBindingsInReference", $.String, "MultipleSamlAuthorityBindingsInReference");

    $.Constant({Static:true , Public:false}, "MultipleKeyIdentifiersInReference", $.String, "MultipleKeyIdentifiersInReference");

    $.Constant({Static:true , Public:false}, "DidNotFindKeyIdentifierInReference", $.String, "DidNotFindKeyIdentifierInReference");

    $.Constant({Static:true , Public:false}, "SamlUriCannotBeNullOrEmpty", $.String, "SamlUriCannotBeNullOrEmpty");

    $.Constant({Static:true , Public:false}, "CannotFindMatchingCrypto", $.String, "CannotFindMatchingCrypto");

    $.Constant({Static:true , Public:false}, "AssertionIdCannotBeNullOrEmpty", $.String, "AssertionIdCannotBeNullOrEmpty");

    $.Constant({Static:true , Public:false}, "BufferQuotaExceededReadingBase64", $.String, "BufferQuotaExceededReadingBase64");

    $.Constant({Static:true , Public:false}, "CannotReadToken", $.String, "CannotReadToken");

    $.Constant({Static:true , Public:false}, "ErrorDeserializingKeyIdentifierClause", $.String, "ErrorDeserializingKeyIdentifierClause");

    $.Constant({Static:true , Public:false}, "ErrorSerializingKeyIdentifier", $.String, "ErrorSerializingKeyIdentifier");

    $.Constant({Static:true , Public:false}, "ErrorSerializingKeyIdentifierClause", $.String, "ErrorSerializingKeyIdentifierClause");

    $.Constant({Static:true , Public:false}, "NoKeyInfoClausesToWrite", $.String, "NoKeyInfoClausesToWrite");

    $.Constant({Static:true , Public:false}, "CollectionWasModified", $.String, "CollectionWasModified");

    $.Constant({Static:true , Public:false}, "XDCannotFindValueInDictionaryString", $.String, "XDCannotFindValueInDictionaryString");

    $.Constant({Static:true , Public:false}, "AlgorithmAndKeyMisMatch", $.String, "AlgorithmAndKeyMisMatch");

    $.Constant({Static:true , Public:false}, "AlgorithmAndPrivateKeyMisMatch", $.String, "AlgorithmAndPrivateKeyMisMatch");

    $.Constant({Static:true , Public:false}, "AlgorithmAndPublicKeyMisMatch", $.String, "AlgorithmAndPublicKeyMisMatch");

    $.Constant({Static:true , Public:false}, "ArgumentInvalidCertificate", $.String, "ArgumentInvalidCertificate");

    $.Constant({Static:true , Public:false}, "X509ChainBuildFail", $.String, "X509ChainBuildFail");

    $.Constant({Static:true , Public:false}, "X509IsInUntrustedStore", $.String, "X509IsInUntrustedStore");

    $.Constant({Static:true , Public:false}, "X509IsNotInTrustedStore", $.String, "X509IsNotInTrustedStore");

    $.Constant({Static:true , Public:false}, "X509InvalidUsageTime", $.String, "X509InvalidUsageTime");

    $.Constant({Static:true , Public:false}, "IncorrectUserNameFormat", $.String, "IncorrectUserNameFormat");

    $.Constant({Static:true , Public:false}, "InvalidNtMapping", $.String, "InvalidNtMapping");

    $.Constant({Static:true , Public:false}, "ImpersonationLevelNotSupported", $.String, "ImpersonationLevelNotSupported");

    $.Constant({Static:true , Public:false}, "MissingPrivateKey", $.String, "MissingPrivateKey");

    $.Constant({Static:true , Public:false}, "PrivateKeyExchangeNotSupported", $.String, "PrivateKeyExchangeNotSupported");

    $.Constant({Static:true , Public:false}, "PrivateKeyNotDSA", $.String, "PrivateKeyNotDSA");

    $.Constant({Static:true , Public:false}, "PrivateKeyNotRSA", $.String, "PrivateKeyNotRSA");

    $.Constant({Static:true , Public:false}, "PublicKeyNotDSA", $.String, "PublicKeyNotDSA");

    $.Constant({Static:true , Public:false}, "PublicKeyNotRSA", $.String, "PublicKeyNotRSA");

    $.Constant({Static:true , Public:false}, "InclusiveNamespacePrefixRequiresSignatureReader", $.String, "InclusiveNamespacePrefixRequiresSignatureReader");

    $.Constant({Static:true , Public:false}, "FailedToDeleteKeyContainerFile", $.String, "FailedToDeleteKeyContainerFile");

    $.Constant({Static:true , Public:false}, "EmptyOrNullArgumentString", $.String, "EmptyOrNullArgumentString");

    $.Constant({Static:true , Public:false}, "SecurityChannelBindingMissing", $.String, "SecurityChannelBindingMissing");

    $.Constant({Static:true , Public:false}, "ServiceNameFromClient", $.String, "ServiceNameFromClient");

    $.Constant({Static:true , Public:false}, "ServiceNameOnService", $.String, "ServiceNameOnService");

    $.Constant({Static:true , Public:false}, "SamlSerializerRequiresExternalSerializers", $.String, "SamlSerializerRequiresExternalSerializers");

    $.Constant({Static:true , Public:false}, "SamlSerializerUnableToWriteSecurityKeyIdentifier", $.String, "SamlSerializerUnableToWriteSecurityKeyIdentifier");

    $.Constant({Static:true , Public:false}, "SamlSerializerUnableToReadSecurityKeyIdentifier", $.String, "SamlSerializerUnableToReadSecurityKeyIdentifier");

    $.Constant({Static:true , Public:false}, "SamlAssertionMissingSigningCredentials", $.String, "SamlAssertionMissingSigningCredentials");

    $.Constant({Static:true , Public:false}, "SamlTokenMissingSignature", $.String, "SamlTokenMissingSignature");

    $.Constant({Static:true , Public:false}, "SamlInvalidSigningToken", $.String, "SamlInvalidSigningToken");

    $.Constant({Static:true , Public:false}, "SamlSigningTokenNotFound", $.String, "SamlSigningTokenNotFound");

    $.Constant({Static:true , Public:false}, "SamlSigningTokenMissing", $.String, "SamlSigningTokenMissing");

    $.Constant({Static:true , Public:false}, "SamlTokenAuthenticatorCanOnlyProcessSamlTokens", $.String, "SamlTokenAuthenticatorCanOnlyProcessSamlTokens");

    $.Constant({Static:true , Public:false}, "SamlUnableToExtractSubjectKey", $.String, "SamlUnableToExtractSubjectKey");

    $.Constant({Static:true , Public:false}, "SamlAttributeClaimResourceShouldBeAString", $.String, "SamlAttributeClaimResourceShouldBeAString");

    $.Constant({Static:true , Public:false}, "SamlAttributeClaimRightShouldBePossessProperty", $.String, "SamlAttributeClaimRightShouldBePossessProperty");

    $.Constant({Static:true , Public:false}, "SAMLAssertionIDIsInvalid", $.String, "SAMLAssertionIDIsInvalid");

    $.Constant({Static:true , Public:false}, "SAMLAssertionIdRequired", $.String, "SAMLAssertionIdRequired");

    $.Constant({Static:true , Public:false}, "SAMLAssertionMissingMajorVersionAttributeOnRead", $.String, "SAMLAssertionMissingMajorVersionAttributeOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAssertionMissingMinorVersionAttributeOnRead", $.String, "SAMLAssertionMissingMinorVersionAttributeOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAssertionIssuerRequired", $.String, "SAMLAssertionIssuerRequired");

    $.Constant({Static:true , Public:false}, "SAMLAssertionMissingIssuerAttributeOnRead", $.String, "SAMLAssertionMissingIssuerAttributeOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAssertionRequireOneStatement", $.String, "SAMLAssertionRequireOneStatement");

    $.Constant({Static:true , Public:false}, "SAMLAssertionRequireOneStatementOnRead", $.String, "SAMLAssertionRequireOneStatementOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAttributeValueCannotBeNull", $.String, "SAMLAttributeValueCannotBeNull");

    $.Constant({Static:true , Public:false}, "SAMLAttributeShouldHaveOneValue", $.String, "SAMLAttributeShouldHaveOneValue");

    $.Constant({Static:true , Public:false}, "SAMLAttributeNameAttributeRequired", $.String, "SAMLAttributeNameAttributeRequired");

    $.Constant({Static:true , Public:false}, "SAMLAttributeMissingNameAttributeOnRead", $.String, "SAMLAttributeMissingNameAttributeOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAttributeNamespaceAttributeRequired", $.String, "SAMLAttributeNamespaceAttributeRequired");

    $.Constant({Static:true , Public:false}, "SAMLAttributeMissingNamespaceAttributeOnRead", $.String, "SAMLAttributeMissingNamespaceAttributeOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAudienceRestrictionShouldHaveOneAudience", $.String, "SAMLAudienceRestrictionShouldHaveOneAudience");

    $.Constant({Static:true , Public:false}, "SAMLAudienceRestrictionShouldHaveOneAudienceOnRead", $.String, "SAMLAudienceRestrictionShouldHaveOneAudienceOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAudienceRestrictionInvalidAudienceValueOnRead", $.String, "SAMLAudienceRestrictionInvalidAudienceValueOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAudienceUrisNotFound", $.String, "SAMLAudienceUrisNotFound");

    $.Constant({Static:true , Public:false}, "SAMLAudienceUriValidationFailed", $.String, "SAMLAudienceUriValidationFailed");

    $.Constant({Static:true , Public:false}, "SAMLAuthorizationDecisionShouldHaveOneAction", $.String, "SAMLAuthorizationDecisionShouldHaveOneAction");

    $.Constant({Static:true , Public:false}, "SAMLAuthorizationDecisionShouldHaveOneActionOnRead", $.String, "SAMLAuthorizationDecisionShouldHaveOneActionOnRead");

    $.Constant({Static:true , Public:false}, "SAMLActionNameRequired", $.String, "SAMLActionNameRequired");

    $.Constant({Static:true , Public:false}, "SAMLActionNameRequiredOnRead", $.String, "SAMLActionNameRequiredOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAuthorizationDecisionHasMoreThanOneEvidence", $.String, "SAMLAuthorizationDecisionHasMoreThanOneEvidence");

    $.Constant({Static:true , Public:false}, "SAMLAuthorizationDecisionResourceRequired", $.String, "SAMLAuthorizationDecisionResourceRequired");

    $.Constant({Static:true , Public:false}, "SAMLAuthenticationStatementMissingAuthenticationInstanceOnRead", $.String, "SAMLAuthenticationStatementMissingAuthenticationInstanceOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAuthenticationStatementMissingAuthenticationMethod", $.String, "SAMLAuthenticationStatementMissingAuthenticationMethod");

    $.Constant({Static:true , Public:false}, "SAMLAuthenticationStatementMissingAuthenticationMethodOnRead", $.String, "SAMLAuthenticationStatementMissingAuthenticationMethodOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAuthenticationStatementMissingSubject", $.String, "SAMLAuthenticationStatementMissingSubject");

    $.Constant({Static:true , Public:false}, "SAMLAuthorityBindingInvalidAuthorityKind", $.String, "SAMLAuthorityBindingInvalidAuthorityKind");

    $.Constant({Static:true , Public:false}, "SAMLAuthorityBindingMissingAuthorityKind", $.String, "SAMLAuthorityBindingMissingAuthorityKind");

    $.Constant({Static:true , Public:false}, "SAMLAuthorityBindingMissingAuthorityKindOnRead", $.String, "SAMLAuthorityBindingMissingAuthorityKindOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAuthorityKindMissingName", $.String, "SAMLAuthorityKindMissingName");

    $.Constant({Static:true , Public:false}, "SAMLAuthorityBindingRequiresBinding", $.String, "SAMLAuthorityBindingRequiresBinding");

    $.Constant({Static:true , Public:false}, "SAMLAuthorityBindingMissingBindingOnRead", $.String, "SAMLAuthorityBindingMissingBindingOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAuthorityBindingRequiresLocation", $.String, "SAMLAuthorityBindingRequiresLocation");

    $.Constant({Static:true , Public:false}, "SAMLAuthorityBindingMissingLocationOnRead", $.String, "SAMLAuthorityBindingMissingLocationOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAuthorizationDecisionStatementMissingResourceAttributeOnRead", $.String, "SAMLAuthorizationDecisionStatementMissingResourceAttributeOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAuthorizationDecisionStatementMissingDecisionAttributeOnRead", $.String, "SAMLAuthorizationDecisionStatementMissingDecisionAttributeOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAuthorizationDecisionStatementMissingSubjectOnRead", $.String, "SAMLAuthorizationDecisionStatementMissingSubjectOnRead");

    $.Constant({Static:true , Public:false}, "SAMLAttributeStatementMissingSubjectOnRead", $.String, "SAMLAttributeStatementMissingSubjectOnRead");

    $.Constant({Static:true , Public:false}, "SAMLSubjectStatementRequiresSubject", $.String, "SAMLSubjectStatementRequiresSubject");

    $.Constant({Static:true , Public:false}, "SAMLAttributeStatementMissingAttributeOnRead", $.String, "SAMLAttributeStatementMissingAttributeOnRead");

    $.Constant({Static:true , Public:false}, "SAMLBadSchema", $.String, "SAMLBadSchema");

    $.Constant({Static:true , Public:false}, "SAMLElementNotRecognized", $.String, "SAMLElementNotRecognized");

    $.Constant({Static:true , Public:false}, "SAMLEntityCannotBeNullOrEmpty", $.String, "SAMLEntityCannotBeNullOrEmpty");

    $.Constant({Static:true , Public:false}, "SAMLEvidenceShouldHaveOneAssertion", $.String, "SAMLEvidenceShouldHaveOneAssertion");

    $.Constant({Static:true , Public:false}, "SAMLEvidenceShouldHaveOneAssertionOnRead", $.String, "SAMLEvidenceShouldHaveOneAssertionOnRead");

    $.Constant({Static:true , Public:false}, "SAMLNameIdentifierMissingIdentifierValueOnRead", $.String, "SAMLNameIdentifierMissingIdentifierValueOnRead");

    $.Constant({Static:true , Public:false}, "SAMLSubjectNameIdentifierRequiresNameValue", $.String, "SAMLSubjectNameIdentifierRequiresNameValue");

    $.Constant({Static:true , Public:false}, "SAMLSubjectRequiresNameIdentifierOrConfirmationMethod", $.String, "SAMLSubjectRequiresNameIdentifierOrConfirmationMethod");

    $.Constant({Static:true , Public:false}, "SAMLSubjectRequiresNameIdentifierOrConfirmationMethodOnRead", $.String, "SAMLSubjectRequiresNameIdentifierOrConfirmationMethodOnRead");

    $.Constant({Static:true , Public:false}, "SAMLSubjectRequiresConfirmationMethodWhenConfirmationDataOrKeyInfoIsSpecified", $.String, "SAMLSubjectRequiresConfirmationMethodWhenConfirmationDataOrKeyInfoIsSpecified");

    $.Constant({Static:true , Public:false}, "SAMLSubjectConfirmationClauseMissingConfirmationMethodOnRead", $.String, "SAMLSubjectConfirmationClauseMissingConfirmationMethodOnRead");

    $.Constant({Static:true , Public:false}, "SAMLTokenNotSerialized", $.String, "SAMLTokenNotSerialized");

    $.Constant({Static:true , Public:false}, "SAMLTokenTimeInvalid", $.String, "SAMLTokenTimeInvalid");

    $.Constant({Static:true , Public:false}, "SAMLTokenVersionNotSupported", $.String, "SAMLTokenVersionNotSupported");

    $.Constant({Static:true , Public:false}, "SAMLSignatureAlreadyRead", $.String, "SAMLSignatureAlreadyRead");

    $.Constant({Static:true , Public:false}, "SAMLUnableToLoadUnknownElement", $.String, "SAMLUnableToLoadUnknownElement");

    $.Constant({Static:true , Public:false}, "SAMLUnableToResolveSignatureKey", $.String, "SAMLUnableToResolveSignatureKey");

    $.Constant({Static:true , Public:false}, "SAMLUnableToLoadAssertion", $.String, "SAMLUnableToLoadAssertion");

    $.Constant({Static:true , Public:false}, "SAMLUnableToLoadCondtion", $.String, "SAMLUnableToLoadCondtion");

    $.Constant({Static:true , Public:false}, "SAMLUnableToLoadCondtions", $.String, "SAMLUnableToLoadCondtions");

    $.Constant({Static:true , Public:false}, "SAMLUnableToLoadAdvice", $.String, "SAMLUnableToLoadAdvice");

    $.Constant({Static:true , Public:false}, "SAMLUnableToLoadStatement", $.String, "SAMLUnableToLoadStatement");

    $.Constant({Static:true , Public:false}, "SAMLUnableToLoadAttribute", $.String, "SAMLUnableToLoadAttribute");

    $.Constant({Static:true , Public:false}, "SymmetricKeyLengthTooShort", $.String, "SymmetricKeyLengthTooShort");

    $.Constant({Static:true , Public:false}, "InvalidHexString", $.String, "InvalidHexString");

    $.Constant({Static:true , Public:false}, "FailInitializeSecurityContext", $.String, "FailInitializeSecurityContext");

    $.Constant({Static:true , Public:false}, "FailAcceptSecurityContext", $.String, "FailAcceptSecurityContext");

    $.Constant({Static:true , Public:false}, "FailLogonUser", $.String, "FailLogonUser");

    $.Constant({Static:true , Public:false}, "KerberosMultilegsNotSupported", $.String, "KerberosMultilegsNotSupported");

    $.Constant({Static:true , Public:false}, "KerberosApReqInvalidOrOutOfMemory", $.String, "KerberosApReqInvalidOrOutOfMemory");

    $.Constant({Static:true , Public:false}, "SspiPayloadNotEncrypted", $.String, "SspiPayloadNotEncrypted");

    $.Constant({Static:true , Public:false}, "SSPIPackageNotSupported", $.String, "SSPIPackageNotSupported");

    $.Constant({Static:true , Public:false}, "SspiWrapperEncryptDecryptAssert1", $.String, "SspiWrapperEncryptDecryptAssert1");

    $.Constant({Static:true , Public:false}, "SspiWrapperEncryptDecryptAssert2", $.String, "SspiWrapperEncryptDecryptAssert2");

    $.Constant({Static:true , Public:false}, "RevertingPrivilegeFailed", $.String, "RevertingPrivilegeFailed");

    $.Constant({Static:true , Public:false}, "InvalidServiceBindingInSspiNegotiationServiceBindingNotMatched", $.String, "InvalidServiceBindingInSspiNegotiationServiceBindingNotMatched");

    $.Constant({Static:true , Public:false}, "InvalidServiceBindingInSspiNegotiationNoServiceBinding", $.String, "InvalidServiceBindingInSspiNegotiationNoServiceBinding");

    $.Constant({Static:true , Public:false}, "AESCipherModeNotSupported", $.String, "AESCipherModeNotSupported");

    $.Constant({Static:true , Public:false}, "AESKeyLengthNotSupported", $.String, "AESKeyLengthNotSupported");

    $.Constant({Static:true , Public:false}, "AESIVLengthNotSupported", $.String, "AESIVLengthNotSupported");

    $.Constant({Static:true , Public:false}, "AESPaddingModeNotSupported", $.String, "AESPaddingModeNotSupported");

    $.Constant({Static:true , Public:false}, "AESCryptAcquireContextFailed", $.String, "AESCryptAcquireContextFailed");

    $.Constant({Static:true , Public:false}, "AESCryptImportKeyFailed", $.String, "AESCryptImportKeyFailed");

    $.Constant({Static:true , Public:false}, "AESCryptGetKeyParamFailed", $.String, "AESCryptGetKeyParamFailed");

    $.Constant({Static:true , Public:false}, "AESCryptSetKeyParamFailed", $.String, "AESCryptSetKeyParamFailed");

    $.Constant({Static:true , Public:false}, "AESCryptEncryptFailed", $.String, "AESCryptEncryptFailed");

    $.Constant({Static:true , Public:false}, "AESCryptDecryptFailed", $.String, "AESCryptDecryptFailed");

    $.Constant({Static:true , Public:false}, "AESInvalidInputBlockSize", $.String, "AESInvalidInputBlockSize");

    $.Constant({Static:true , Public:false}, "AESInsufficientOutputBuffer", $.String, "AESInsufficientOutputBuffer");

    $.Constant({Static:true , Public:false}, "ID0001", $.String, "ID0001");

    $.Constant({Static:true , Public:false}, "ID0002", $.String, "ID0002");

    $.Constant({Static:true , Public:false}, "ID0003", $.String, "ID0003");

    $.Constant({Static:true , Public:false}, "ID0005", $.String, "ID0005");

    $.Constant({Static:true , Public:false}, "ID0006", $.String, "ID0006");

    $.Constant({Static:true , Public:false}, "ID0008", $.String, "ID0008");

    $.Constant({Static:true , Public:false}, "ID0009", $.String, "ID0009");

    $.Constant({Static:true , Public:false}, "ID0011", $.String, "ID0011");

    $.Constant({Static:true , Public:false}, "ID0012", $.String, "ID0012");

    $.Constant({Static:true , Public:false}, "ID0013", $.String, "ID0013");

    $.Constant({Static:true , Public:false}, "ID0014", $.String, "ID0014");

    $.Constant({Static:true , Public:false}, "ID0016", $.String, "ID0016");

    $.Constant({Static:true , Public:false}, "ID0018", $.String, "ID0018");

    $.Constant({Static:true , Public:false}, "ID0019", $.String, "ID0019");

    $.Constant({Static:true , Public:false}, "ID0021", $.String, "ID0021");

    $.Constant({Static:true , Public:false}, "ID0022", $.String, "ID0022");

    $.Constant({Static:true , Public:false}, "ID0023", $.String, "ID0023");

    $.Constant({Static:true , Public:false}, "ID1001", $.String, "ID1001");

    $.Constant({Static:true , Public:false}, "ID1002", $.String, "ID1002");

    $.Constant({Static:true , Public:false}, "ID1005", $.String, "ID1005");

    $.Constant({Static:true , Public:false}, "ID1006", $.String, "ID1006");

    $.Constant({Static:true , Public:false}, "ID1007", $.String, "ID1007");

    $.Constant({Static:true , Public:false}, "ID1008", $.String, "ID1008");

    $.Constant({Static:true , Public:false}, "ID1009", $.String, "ID1009");

    $.Constant({Static:true , Public:false}, "ID1012", $.String, "ID1012");

    $.Constant({Static:true , Public:false}, "ID1013", $.String, "ID1013");

    $.Constant({Static:true , Public:false}, "ID1014", $.String, "ID1014");

    $.Constant({Static:true , Public:false}, "ID1024", $.String, "ID1024");

    $.Constant({Static:true , Public:false}, "ID1025", $.String, "ID1025");

    $.Constant({Static:true , Public:false}, "ID1029", $.String, "ID1029");

    $.Constant({Static:true , Public:false}, "ID1032", $.String, "ID1032");

    $.Constant({Static:true , Public:false}, "ID1033", $.String, "ID1033");

    $.Constant({Static:true , Public:false}, "ID1034", $.String, "ID1034");

    $.Constant({Static:true , Public:false}, "ID1035", $.String, "ID1035");

    $.Constant({Static:true , Public:false}, "ID1036", $.String, "ID1036");

    $.Constant({Static:true , Public:false}, "ID1037", $.String, "ID1037");

    $.Constant({Static:true , Public:false}, "ID1038", $.String, "ID1038");

    $.Constant({Static:true , Public:false}, "ID1039", $.String, "ID1039");

    $.Constant({Static:true , Public:false}, "ID1043", $.String, "ID1043");

    $.Constant({Static:true , Public:false}, "ID1053", $.String, "ID1053");

    $.Constant({Static:true , Public:false}, "ID1054", $.String, "ID1054");

    $.Constant({Static:true , Public:false}, "ID1062", $.String, "ID1062");

    $.Constant({Static:true , Public:false}, "ID1063", $.String, "ID1063");

    $.Constant({Static:true , Public:false}, "ID1064", $.String, "ID1064");

    $.Constant({Static:true , Public:false}, "ID1065", $.String, "ID1065");

    $.Constant({Static:true , Public:false}, "ID1066", $.String, "ID1066");

    $.Constant({Static:true , Public:false}, "ID1067", $.String, "ID1067");

    $.Constant({Static:true , Public:false}, "ID1068", $.String, "ID1068");

    $.Constant({Static:true , Public:false}, "ID1069", $.String, "ID1069");

    $.Constant({Static:true , Public:false}, "ID1070", $.String, "ID1070");

    $.Constant({Static:true , Public:false}, "ID1072", $.String, "ID1072");

    $.Constant({Static:true , Public:false}, "ID1073", $.String, "ID1073");

    $.Constant({Static:true , Public:false}, "ID1074", $.String, "ID1074");

    $.Constant({Static:true , Public:false}, "ID2000", $.String, "ID2000");

    $.Constant({Static:true , Public:false}, "ID2001", $.String, "ID2001");

    $.Constant({Static:true , Public:false}, "ID2002", $.String, "ID2002");

    $.Constant({Static:true , Public:false}, "ID2003", $.String, "ID2003");

    $.Constant({Static:true , Public:false}, "ID2004", $.String, "ID2004");

    $.Constant({Static:true , Public:false}, "ID2005", $.String, "ID2005");

    $.Constant({Static:true , Public:false}, "ID2008", $.String, "ID2008");

    $.Constant({Static:true , Public:false}, "ID2009", $.String, "ID2009");

    $.Constant({Static:true , Public:false}, "ID2011", $.String, "ID2011");

    $.Constant({Static:true , Public:false}, "ID2012", $.String, "ID2012");

    $.Constant({Static:true , Public:false}, "ID2013", $.String, "ID2013");

    $.Constant({Static:true , Public:false}, "ID2014", $.String, "ID2014");

    $.Constant({Static:true , Public:false}, "ID2015", $.String, "ID2015");

    $.Constant({Static:true , Public:false}, "ID2016", $.String, "ID2016");

    $.Constant({Static:true , Public:false}, "ID2050", $.String, "ID2050");

    $.Constant({Static:true , Public:false}, "ID2051", $.String, "ID2051");

    $.Constant({Static:true , Public:false}, "ID2052", $.String, "ID2052");

    $.Constant({Static:true , Public:false}, "ID2053", $.String, "ID2053");

    $.Constant({Static:true , Public:false}, "ID2055", $.String, "ID2055");

    $.Constant({Static:true , Public:false}, "ID2056", $.String, "ID2056");

    $.Constant({Static:true , Public:false}, "ID2057", $.String, "ID2057");

    $.Constant({Static:true , Public:false}, "ID2058", $.String, "ID2058");

    $.Constant({Static:true , Public:false}, "ID2059", $.String, "ID2059");

    $.Constant({Static:true , Public:false}, "ID2064", $.String, "ID2064");

    $.Constant({Static:true , Public:false}, "ID2069", $.String, "ID2069");

    $.Constant({Static:true , Public:false}, "ID2070", $.String, "ID2070");

    $.Constant({Static:true , Public:false}, "ID2073", $.String, "ID2073");

    $.Constant({Static:true , Public:false}, "ID2074", $.String, "ID2074");

    $.Constant({Static:true , Public:false}, "ID2079", $.String, "ID2079");

    $.Constant({Static:true , Public:false}, "ID2080", $.String, "ID2080");

    $.Constant({Static:true , Public:false}, "ID2072", $.String, "ID2072");

    $.Constant({Static:true , Public:false}, "ID2075", $.String, "ID2075");

    $.Constant({Static:true , Public:false}, "ID2076", $.String, "ID2076");

    $.Constant({Static:true , Public:false}, "ID2077", $.String, "ID2077");

    $.Constant({Static:true , Public:false}, "ID2078", $.String, "ID2078");

    $.Constant({Static:true , Public:false}, "ID2081", $.String, "ID2081");

    $.Constant({Static:true , Public:false}, "ID2082", $.String, "ID2082");

    $.Constant({Static:true , Public:false}, "ID2083", $.String, "ID2083");

    $.Constant({Static:true , Public:false}, "ID2084", $.String, "ID2084");

    $.Constant({Static:true , Public:false}, "ID2100", $.String, "ID2100");

    $.Constant({Static:true , Public:false}, "ID3006", $.String, "ID3006");

    $.Constant({Static:true , Public:false}, "ID3007", $.String, "ID3007");

    $.Constant({Static:true , Public:false}, "ID3009", $.String, "ID3009");

    $.Constant({Static:true , Public:false}, "ID3010", $.String, "ID3010");

    $.Constant({Static:true , Public:false}, "ID3011", $.String, "ID3011");

    $.Constant({Static:true , Public:false}, "ID3012", $.String, "ID3012");

    $.Constant({Static:true , Public:false}, "ID3013", $.String, "ID3013");

    $.Constant({Static:true , Public:false}, "ID3017", $.String, "ID3017");

    $.Constant({Static:true , Public:false}, "ID3020", $.String, "ID3020");

    $.Constant({Static:true , Public:false}, "ID3021", $.String, "ID3021");

    $.Constant({Static:true , Public:false}, "ID3025", $.String, "ID3025");

    $.Constant({Static:true , Public:false}, "ID3026", $.String, "ID3026");

    $.Constant({Static:true , Public:false}, "ID3027", $.String, "ID3027");

    $.Constant({Static:true , Public:false}, "ID3032", $.String, "ID3032");

    $.Constant({Static:true , Public:false}, "ID3057", $.String, "ID3057");

    $.Constant({Static:true , Public:false}, "ID3061", $.String, "ID3061");

    $.Constant({Static:true , Public:false}, "ID3063", $.String, "ID3063");

    $.Constant({Static:true , Public:false}, "ID3064", $.String, "ID3064");

    $.Constant({Static:true , Public:false}, "ID3089", $.String, "ID3089");

    $.Constant({Static:true , Public:false}, "ID3091", $.String, "ID3091");

    $.Constant({Static:true , Public:false}, "ID3092", $.String, "ID3092");

    $.Constant({Static:true , Public:false}, "ID3130", $.String, "ID3130");

    $.Constant({Static:true , Public:false}, "ID3135", $.String, "ID3135");

    $.Constant({Static:true , Public:false}, "ID3136", $.String, "ID3136");

    $.Constant({Static:true , Public:false}, "ID3141", $.String, "ID3141");

    $.Constant({Static:true , Public:false}, "ID3151", $.String, "ID3151");

    $.Constant({Static:true , Public:false}, "ID3152", $.String, "ID3152");

    $.Constant({Static:true , Public:false}, "ID3153", $.String, "ID3153");

    $.Constant({Static:true , Public:false}, "ID3154", $.String, "ID3154");

    $.Constant({Static:true , Public:false}, "ID3155", $.String, "ID3155");

    $.Constant({Static:true , Public:false}, "ID3158", $.String, "ID3158");

    $.Constant({Static:true , Public:false}, "ID3159", $.String, "ID3159");

    $.Constant({Static:true , Public:false}, "ID3160", $.String, "ID3160");

    $.Constant({Static:true , Public:false}, "ID3161", $.String, "ID3161");

    $.Constant({Static:true , Public:false}, "ID3162", $.String, "ID3162");

    $.Constant({Static:true , Public:false}, "ID3164", $.String, "ID3164");

    $.Constant({Static:true , Public:false}, "ID3165", $.String, "ID3165");

    $.Constant({Static:true , Public:false}, "ID3166", $.String, "ID3166");

    $.Constant({Static:true , Public:false}, "ID3198", $.String, "ID3198");

    $.Constant({Static:true , Public:false}, "ID3199", $.String, "ID3199");

    $.Constant({Static:true , Public:false}, "ID3200", $.String, "ID3200");

    $.Constant({Static:true , Public:false}, "ID3201", $.String, "ID3201");

    $.Constant({Static:true , Public:false}, "ID3202", $.String, "ID3202");

    $.Constant({Static:true , Public:false}, "ID3203", $.String, "ID3203");

    $.Constant({Static:true , Public:false}, "ID3207", $.String, "ID3207");

    $.Constant({Static:true , Public:false}, "ID3215", $.String, "ID3215");

    $.Constant({Static:true , Public:false}, "ID3216", $.String, "ID3216");

    $.Constant({Static:true , Public:false}, "ID3217", $.String, "ID3217");

    $.Constant({Static:true , Public:false}, "ID3218", $.String, "ID3218");

    $.Constant({Static:true , Public:false}, "ID3219", $.String, "ID3219");

    $.Constant({Static:true , Public:false}, "ID3220", $.String, "ID3220");

    $.Constant({Static:true , Public:false}, "ID3221", $.String, "ID3221");

    $.Constant({Static:true , Public:false}, "ID3222", $.String, "ID3222");

    $.Constant({Static:true , Public:false}, "ID3223", $.String, "ID3223");

    $.Constant({Static:true , Public:false}, "ID3249", $.String, "ID3249");

    $.Constant({Static:true , Public:false}, "ID3257", $.String, "ID3257");

    $.Constant({Static:true , Public:false}, "ID3258", $.String, "ID3258");

    $.Constant({Static:true , Public:false}, "ID3260", $.String, "ID3260");

    $.Constant({Static:true , Public:false}, "ID3264", $.String, "ID3264");

    $.Constant({Static:true , Public:false}, "ID3265", $.String, "ID3265");

    $.Constant({Static:true , Public:false}, "ID3268", $.String, "ID3268");

    $.Constant({Static:true , Public:false}, "ID3274", $.String, "ID3274");

    $.Constant({Static:true , Public:false}, "ID3275", $.String, "ID3275");

    $.Constant({Static:true , Public:false}, "ID3276", $.String, "ID3276");

    $.Constant({Static:true , Public:false}, "ID3284", $.String, "ID3284");

    $.Constant({Static:true , Public:false}, "ID4001", $.String, "ID4001");

    $.Constant({Static:true , Public:false}, "ID4002", $.String, "ID4002");

    $.Constant({Static:true , Public:false}, "ID4003", $.String, "ID4003");

    $.Constant({Static:true , Public:false}, "ID4004", $.String, "ID4004");

    $.Constant({Static:true , Public:false}, "ID4005", $.String, "ID4005");

    $.Constant({Static:true , Public:false}, "ID4007", $.String, "ID4007");

    $.Constant({Static:true , Public:false}, "ID4008", $.String, "ID4008");

    $.Constant({Static:true , Public:false}, "ID4010", $.String, "ID4010");

    $.Constant({Static:true , Public:false}, "ID4011", $.String, "ID4011");

    $.Constant({Static:true , Public:false}, "ID4013", $.String, "ID4013");

    $.Constant({Static:true , Public:false}, "ID4014", $.String, "ID4014");

    $.Constant({Static:true , Public:false}, "ID4020", $.String, "ID4020");

    $.Constant({Static:true , Public:false}, "ID4022", $.String, "ID4022");

    $.Constant({Static:true , Public:false}, "ID4023", $.String, "ID4023");

    $.Constant({Static:true , Public:false}, "ID4024", $.String, "ID4024");

    $.Constant({Static:true , Public:false}, "ID4025", $.String, "ID4025");

    $.Constant({Static:true , Public:false}, "ID4026", $.String, "ID4026");

    $.Constant({Static:true , Public:false}, "ID4034", $.String, "ID4034");

    $.Constant({Static:true , Public:false}, "ID4036", $.String, "ID4036");

    $.Constant({Static:true , Public:false}, "ID4037", $.String, "ID4037");

    $.Constant({Static:true , Public:false}, "ID4038", $.String, "ID4038");

    $.Constant({Static:true , Public:false}, "ID4046", $.String, "ID4046");

    $.Constant({Static:true , Public:false}, "ID4050", $.String, "ID4050");

    $.Constant({Static:true , Public:false}, "ID4051", $.String, "ID4051");

    $.Constant({Static:true , Public:false}, "ID4052", $.String, "ID4052");

    $.Constant({Static:true , Public:false}, "ID4059", $.String, "ID4059");

    $.Constant({Static:true , Public:false}, "ID4060", $.String, "ID4060");

    $.Constant({Static:true , Public:false}, "ID4061", $.String, "ID4061");

    $.Constant({Static:true , Public:false}, "ID4062", $.String, "ID4062");

    $.Constant({Static:true , Public:false}, "ID4063", $.String, "ID4063");

    $.Constant({Static:true , Public:false}, "ID4065", $.String, "ID4065");

    $.Constant({Static:true , Public:false}, "ID4066", $.String, "ID4066");

    $.Constant({Static:true , Public:false}, "ID4067", $.String, "ID4067");

    $.Constant({Static:true , Public:false}, "ID4068", $.String, "ID4068");

    $.Constant({Static:true , Public:false}, "ID4070", $.String, "ID4070");

    $.Constant({Static:true , Public:false}, "ID4073", $.String, "ID4073");

    $.Constant({Static:true , Public:false}, "ID4075", $.String, "ID4075");

    $.Constant({Static:true , Public:false}, "ID4076", $.String, "ID4076");

    $.Constant({Static:true , Public:false}, "ID4077", $.String, "ID4077");

    $.Constant({Static:true , Public:false}, "ID4078", $.String, "ID4078");

    $.Constant({Static:true , Public:false}, "ID4079", $.String, "ID4079");

    $.Constant({Static:true , Public:false}, "ID4080", $.String, "ID4080");

    $.Constant({Static:true , Public:false}, "ID4081", $.String, "ID4081");

    $.Constant({Static:true , Public:false}, "ID4082", $.String, "ID4082");

    $.Constant({Static:true , Public:false}, "ID4083", $.String, "ID4083");

    $.Constant({Static:true , Public:false}, "ID4084", $.String, "ID4084");

    $.Constant({Static:true , Public:false}, "ID4085", $.String, "ID4085");

    $.Constant({Static:true , Public:false}, "ID4086", $.String, "ID4086");

    $.Constant({Static:true , Public:false}, "ID4087", $.String, "ID4087");

    $.Constant({Static:true , Public:false}, "ID4088", $.String, "ID4088");

    $.Constant({Static:true , Public:false}, "ID4089", $.String, "ID4089");

    $.Constant({Static:true , Public:false}, "ID4090", $.String, "ID4090");

    $.Constant({Static:true , Public:false}, "ID4091", $.String, "ID4091");

    $.Constant({Static:true , Public:false}, "ID4092", $.String, "ID4092");

    $.Constant({Static:true , Public:false}, "ID4093", $.String, "ID4093");

    $.Constant({Static:true , Public:false}, "ID4094", $.String, "ID4094");

    $.Constant({Static:true , Public:false}, "ID4095", $.String, "ID4095");

    $.Constant({Static:true , Public:false}, "ID4096", $.String, "ID4096");

    $.Constant({Static:true , Public:false}, "ID4097", $.String, "ID4097");

    $.Constant({Static:true , Public:false}, "ID4098", $.String, "ID4098");

    $.Constant({Static:true , Public:false}, "ID4099", $.String, "ID4099");

    $.Constant({Static:true , Public:false}, "ID4100", $.String, "ID4100");

    $.Constant({Static:true , Public:false}, "ID4102", $.String, "ID4102");

    $.Constant({Static:true , Public:false}, "ID4104", $.String, "ID4104");

    $.Constant({Static:true , Public:false}, "ID4105", $.String, "ID4105");

    $.Constant({Static:true , Public:false}, "ID4106", $.String, "ID4106");

    $.Constant({Static:true , Public:false}, "ID4107", $.String, "ID4107");

    $.Constant({Static:true , Public:false}, "ID4108", $.String, "ID4108");

    $.Constant({Static:true , Public:false}, "ID4110", $.String, "ID4110");

    $.Constant({Static:true , Public:false}, "ID4111", $.String, "ID4111");

    $.Constant({Static:true , Public:false}, "ID4112", $.String, "ID4112");

    $.Constant({Static:true , Public:false}, "ID4113", $.String, "ID4113");

    $.Constant({Static:true , Public:false}, "ID4114", $.String, "ID4114");

    $.Constant({Static:true , Public:false}, "ID4115", $.String, "ID4115");

    $.Constant({Static:true , Public:false}, "ID4116", $.String, "ID4116");

    $.Constant({Static:true , Public:false}, "ID4117", $.String, "ID4117");

    $.Constant({Static:true , Public:false}, "ID4118", $.String, "ID4118");

    $.Constant({Static:true , Public:false}, "ID4119", $.String, "ID4119");

    $.Constant({Static:true , Public:false}, "ID4120", $.String, "ID4120");

    $.Constant({Static:true , Public:false}, "ID4121", $.String, "ID4121");

    $.Constant({Static:true , Public:false}, "ID4122", $.String, "ID4122");

    $.Constant({Static:true , Public:false}, "ID4123", $.String, "ID4123");

    $.Constant({Static:true , Public:false}, "ID4124", $.String, "ID4124");

    $.Constant({Static:true , Public:false}, "ID4125", $.String, "ID4125");

    $.Constant({Static:true , Public:false}, "ID4126", $.String, "ID4126");

    $.Constant({Static:true , Public:false}, "ID4127", $.String, "ID4127");

    $.Constant({Static:true , Public:false}, "ID4128", $.String, "ID4128");

    $.Constant({Static:true , Public:false}, "ID4129", $.String, "ID4129");

    $.Constant({Static:true , Public:false}, "ID4130", $.String, "ID4130");

    $.Constant({Static:true , Public:false}, "ID4131", $.String, "ID4131");

    $.Constant({Static:true , Public:false}, "ID4132", $.String, "ID4132");

    $.Constant({Static:true , Public:false}, "ID4133", $.String, "ID4133");

    $.Constant({Static:true , Public:false}, "ID4134", $.String, "ID4134");

    $.Constant({Static:true , Public:false}, "ID4136", $.String, "ID4136");

    $.Constant({Static:true , Public:false}, "ID4138", $.String, "ID4138");

    $.Constant({Static:true , Public:false}, "ID4139", $.String, "ID4139");

    $.Constant({Static:true , Public:false}, "ID4140", $.String, "ID4140");

    $.Constant({Static:true , Public:false}, "ID4141", $.String, "ID4141");

    $.Constant({Static:true , Public:false}, "ID4142", $.String, "ID4142");

    $.Constant({Static:true , Public:false}, "ID4147", $.String, "ID4147");

    $.Constant({Static:true , Public:false}, "ID4148", $.String, "ID4148");

    $.Constant({Static:true , Public:false}, "ID4149", $.String, "ID4149");

    $.Constant({Static:true , Public:false}, "ID4150", $.String, "ID4150");

    $.Constant({Static:true , Public:false}, "ID4151", $.String, "ID4151");

    $.Constant({Static:true , Public:false}, "ID4152", $.String, "ID4152");

    $.Constant({Static:true , Public:false}, "ID4153", $.String, "ID4153");

    $.Constant({Static:true , Public:false}, "ID4154", $.String, "ID4154");

    $.Constant({Static:true , Public:false}, "ID4157", $.String, "ID4157");

    $.Constant({Static:true , Public:false}, "ID4158", $.String, "ID4158");

    $.Constant({Static:true , Public:false}, "ID4159", $.String, "ID4159");

    $.Constant({Static:true , Public:false}, "ID4160", $.String, "ID4160");

    $.Constant({Static:true , Public:false}, "ID4161", $.String, "ID4161");

    $.Constant({Static:true , Public:false}, "ID4162", $.String, "ID4162");

    $.Constant({Static:true , Public:false}, "ID4172", $.String, "ID4172");

    $.Constant({Static:true , Public:false}, "ID4173", $.String, "ID4173");

    $.Constant({Static:true , Public:false}, "ID4175", $.String, "ID4175");

    $.Constant({Static:true , Public:false}, "ID4176", $.String, "ID4176");

    $.Constant({Static:true , Public:false}, "ID4177", $.String, "ID4177");

    $.Constant({Static:true , Public:false}, "ID4178", $.String, "ID4178");

    $.Constant({Static:true , Public:false}, "ID4179", $.String, "ID4179");

    $.Constant({Static:true , Public:false}, "ID4180", $.String, "ID4180");

    $.Constant({Static:true , Public:false}, "ID4181", $.String, "ID4181");

    $.Constant({Static:true , Public:false}, "ID4182", $.String, "ID4182");

    $.Constant({Static:true , Public:false}, "ID4183", $.String, "ID4183");

    $.Constant({Static:true , Public:false}, "ID4184", $.String, "ID4184");

    $.Constant({Static:true , Public:false}, "ID4185", $.String, "ID4185");

    $.Constant({Static:true , Public:false}, "ID4187", $.String, "ID4187");

    $.Constant({Static:true , Public:false}, "ID4188", $.String, "ID4188");

    $.Constant({Static:true , Public:false}, "ID4189", $.String, "ID4189");

    $.Constant({Static:true , Public:false}, "ID4190", $.String, "ID4190");

    $.Constant({Static:true , Public:false}, "ID4191", $.String, "ID4191");

    $.Constant({Static:true , Public:false}, "ID4192", $.String, "ID4192");

    $.Constant({Static:true , Public:false}, "ID4193", $.String, "ID4193");

    $.Constant({Static:true , Public:false}, "ID4200", $.String, "ID4200");

    $.Constant({Static:true , Public:false}, "ID4201", $.String, "ID4201");

    $.Constant({Static:true , Public:false}, "ID4202", $.String, "ID4202");

    $.Constant({Static:true , Public:false}, "ID4203", $.String, "ID4203");

    $.Constant({Static:true , Public:false}, "ID4204", $.String, "ID4204");

    $.Constant({Static:true , Public:false}, "ID4205", $.String, "ID4205");

    $.Constant({Static:true , Public:false}, "ID4206", $.String, "ID4206");

    $.Constant({Static:true , Public:false}, "ID4207", $.String, "ID4207");

    $.Constant({Static:true , Public:false}, "ID4208", $.String, "ID4208");

    $.Constant({Static:true , Public:false}, "ID4209", $.String, "ID4209");

    $.Constant({Static:true , Public:false}, "ID4210", $.String, "ID4210");

    $.Constant({Static:true , Public:false}, "ID4211", $.String, "ID4211");

    $.Constant({Static:true , Public:false}, "ID4212", $.String, "ID4212");

    $.Constant({Static:true , Public:false}, "ID4213", $.String, "ID4213");

    $.Constant({Static:true , Public:false}, "ID4216", $.String, "ID4216");

    $.Constant({Static:true , Public:false}, "ID4217", $.String, "ID4217");

    $.Constant({Static:true , Public:false}, "ID4218", $.String, "ID4218");

    $.Constant({Static:true , Public:false}, "ID4220", $.String, "ID4220");

    $.Constant({Static:true , Public:false}, "ID4221", $.String, "ID4221");

    $.Constant({Static:true , Public:false}, "ID4222", $.String, "ID4222");

    $.Constant({Static:true , Public:false}, "ID4223", $.String, "ID4223");

    $.Constant({Static:true , Public:false}, "ID4224", $.String, "ID4224");

    $.Constant({Static:true , Public:false}, "ID4225", $.String, "ID4225");

    $.Constant({Static:true , Public:false}, "ID4227", $.String, "ID4227");

    $.Constant({Static:true , Public:false}, "ID4229", $.String, "ID4229");

    $.Constant({Static:true , Public:false}, "ID4230", $.String, "ID4230");

    $.Constant({Static:true , Public:false}, "ID4232", $.String, "ID4232");

    $.Constant({Static:true , Public:false}, "ID4237", $.String, "ID4237");

    $.Constant({Static:true , Public:false}, "ID4239", $.String, "ID4239");

    $.Constant({Static:true , Public:false}, "ID4242", $.String, "ID4242");

    $.Constant({Static:true , Public:false}, "ID4243", $.String, "ID4243");

    $.Constant({Static:true , Public:false}, "ID4248", $.String, "ID4248");

    $.Constant({Static:true , Public:false}, "ID4249", $.String, "ID4249");

    $.Constant({Static:true , Public:false}, "ID4250", $.String, "ID4250");

    $.Constant({Static:true , Public:false}, "ID4251", $.String, "ID4251");

    $.Constant({Static:true , Public:false}, "ID4252", $.String, "ID4252");

    $.Constant({Static:true , Public:false}, "ID4254", $.String, "ID4254");

    $.Constant({Static:true , Public:false}, "ID4255", $.String, "ID4255");

    $.Constant({Static:true , Public:false}, "ID4256", $.String, "ID4256");

    $.Constant({Static:true , Public:false}, "ID4257", $.String, "ID4257");

    $.Constant({Static:true , Public:false}, "ID4258", $.String, "ID4258");

    $.Constant({Static:true , Public:false}, "ID4259", $.String, "ID4259");

    $.Constant({Static:true , Public:false}, "ID4261", $.String, "ID4261");

    $.Constant({Static:true , Public:false}, "ID4262", $.String, "ID4262");

    $.Constant({Static:true , Public:false}, "ID4263", $.String, "ID4263");

    $.Constant({Static:true , Public:false}, "ID4264", $.String, "ID4264");

    $.Constant({Static:true , Public:false}, "ID4265", $.String, "ID4265");

    $.Constant({Static:true , Public:false}, "ID4269", $.String, "ID4269");

    $.Constant({Static:true , Public:false}, "ID4270", $.String, "ID4270");

    $.Constant({Static:true , Public:false}, "ID4272", $.String, "ID4272");

    $.Constant({Static:true , Public:false}, "ID4274", $.String, "ID4274");

    $.Constant({Static:true , Public:false}, "ID4275", $.String, "ID4275");

    $.Constant({Static:true , Public:false}, "ID4276", $.String, "ID4276");

    $.Constant({Static:true , Public:false}, "ID4277", $.String, "ID4277");

    $.Constant({Static:true , Public:false}, "ID4278", $.String, "ID4278");

    $.Constant({Static:true , Public:false}, "ID4279", $.String, "ID4279");

    $.Constant({Static:true , Public:false}, "ID4280", $.String, "ID4280");

    $.Constant({Static:true , Public:false}, "ID4283", $.String, "ID4283");

    $.Constant({Static:true , Public:false}, "ID4289", $.String, "ID4289");

    $.Constant({Static:true , Public:false}, "ID4290", $.String, "ID4290");

    $.Constant({Static:true , Public:false}, "ID4291", $.String, "ID4291");

    $.Constant({Static:true , Public:false}, "ID4292", $.String, "ID4292");

    $.Constant({Static:true , Public:false}, "ID4294", $.String, "ID4294");

    $.Constant({Static:true , Public:false}, "ID4296", $.String, "ID4296");

    $.Constant({Static:true , Public:false}, "ID6000", $.String, "ID6000");

    $.Constant({Static:true , Public:false}, "ID6001", $.String, "ID6001");

    $.Constant({Static:true , Public:false}, "ID6002", $.String, "ID6002");

    $.Constant({Static:true , Public:false}, "ID6005", $.String, "ID6005");

    $.Constant({Static:true , Public:false}, "ID6019", $.String, "ID6019");

    $.Constant({Static:true , Public:false}, "ID6029", $.String, "ID6029");

    $.Constant({Static:true , Public:false}, "ID6030", $.String, "ID6030");

    $.Constant({Static:true , Public:false}, "ID6031", $.String, "ID6031");

    $.Constant({Static:true , Public:false}, "ID6033", $.String, "ID6033");

    $.Constant({Static:true , Public:false}, "ID6034", $.String, "ID6034");

    $.Constant({Static:true , Public:false}, "ID6035", $.String, "ID6035");

    $.Constant({Static:true , Public:false}, "ID6036", $.String, "ID6036");

    $.Constant({Static:true , Public:false}, "ID6037", $.String, "ID6037");

    $.Constant({Static:true , Public:false}, "ID6039", $.String, "ID6039");

    $.Constant({Static:true , Public:false}, "ID6040", $.String, "ID6040");

    $.Constant({Static:true , Public:false}, "ID6041", $.String, "ID6041");

    $.Constant({Static:true , Public:false}, "ID6042", $.String, "ID6042");

    $.Constant({Static:true , Public:false}, "ID6043", $.String, "ID6043");

    $.Constant({Static:true , Public:false}, "ID6044", $.String, "ID6044");

    $.Constant({Static:true , Public:false}, "ID6045", $.String, "ID6045");

    $.Constant({Static:true , Public:false}, "ID6046", $.String, "ID6046");

    $.Constant({Static:true , Public:false}, "ID6047", $.String, "ID6047");

    $.Constant({Static:true , Public:false}, "ID6048", $.String, "ID6048");

    $.Constant({Static:true , Public:false}, "ID7000", $.String, "ID7000");

    $.Constant({Static:true , Public:false}, "ID7001", $.String, "ID7001");

    $.Constant({Static:true , Public:false}, "ID7002", $.String, "ID7002");

    $.Constant({Static:true , Public:false}, "ID7004", $.String, "ID7004");

    $.Constant({Static:true , Public:false}, "ID7007", $.String, "ID7007");

    $.Constant({Static:true , Public:false}, "ID7009", $.String, "ID7009");

    $.Constant({Static:true , Public:false}, "ID7010", $.String, "ID7010");

    $.Constant({Static:true , Public:false}, "ID7011", $.String, "ID7011");

    $.Constant({Static:true , Public:false}, "ID7012", $.String, "ID7012");

    $.Constant({Static:true , Public:false}, "ID7013", $.String, "ID7013");

    $.Constant({Static:true , Public:false}, "ID7017", $.String, "ID7017");

    $.Constant({Static:true , Public:false}, "ID7018", $.String, "ID7018");

    $.Constant({Static:true , Public:false}, "ID7019", $.String, "ID7019");

    $.Constant({Static:true , Public:false}, "ID7022", $.String, "ID7022");

    $.Constant({Static:true , Public:false}, "ID7026", $.String, "ID7026");

    $.Constant({Static:true , Public:false}, "ID7027", $.String, "ID7027");

    $.Constant({Static:true , Public:false}, "ID7028", $.String, "ID7028");

    $.Constant({Static:true , Public:false}, "ID7029", $.String, "ID7029");

    $.Constant({Static:true , Public:false}, "ID8003", $.String, "ID8003");

    $.Constant({Static:true , Public:false}, "ID8004", $.String, "ID8004");

    $.Constant({Static:true , Public:false}, "ID8005", $.String, "ID8005");

    $.Constant({Static:true , Public:false}, "ID8006", $.String, "ID8006");

    $.Constant({Static:true , Public:false}, "ID8007", $.String, "ID8007");

    $.Constant({Static:true , Public:false}, "ID8023", $.String, "ID8023");

    $.Constant({Static:true , Public:false}, "ID8024", $.String, "ID8024");

    $.Constant({Static:true , Public:false}, "ID8025", $.String, "ID8025");

    $.Constant({Static:true , Public:false}, "ID8026", $.String, "ID8026");

    $.Constant({Static:true , Public:false}, "ID8027", $.String, "ID8027");

    $.Constant({Static:true , Public:false}, "ID8028", $.String, "ID8028");

    $.Constant({Static:true , Public:false}, "ID8029", $.String, "ID8029");

    $.Constant({Static:true , Public:false}, "ID8030", $.String, "ID8030");

    $.Constant({Static:true , Public:false}, "KeyLengthMustBeMultipleOfEight", $.String, "KeyLengthMustBeMultipleOfEight");

    $.Constant({Static:true , Public:false}, "GivenNameText", $.String, "GivenNameText");

    $.Constant({Static:true , Public:false}, "SurnameText", $.String, "SurnameText");

    $.Constant({Static:true , Public:false}, "EmailAddressText", $.String, "EmailAddressText");

    $.Constant({Static:true , Public:false}, "StreetAddressText", $.String, "StreetAddressText");

    $.Constant({Static:true , Public:false}, "LocalityText", $.String, "LocalityText");

    $.Constant({Static:true , Public:false}, "StateOrProvinceText", $.String, "StateOrProvinceText");

    $.Constant({Static:true , Public:false}, "PostalCodeText", $.String, "PostalCodeText");

    $.Constant({Static:true , Public:false}, "CountryText", $.String, "CountryText");

    $.Constant({Static:true , Public:false}, "HomePhoneText", $.String, "HomePhoneText");

    $.Constant({Static:true , Public:false}, "OtherPhoneText", $.String, "OtherPhoneText");

    $.Constant({Static:true , Public:false}, "MobilePhoneText", $.String, "MobilePhoneText");

    $.Constant({Static:true , Public:false}, "DateOfBirthText", $.String, "DateOfBirthText");

    $.Constant({Static:true , Public:false}, "GenderText", $.String, "GenderText");

    $.Constant({Static:true , Public:false}, "PPIDText", $.String, "PPIDText");

    $.Constant({Static:true , Public:false}, "WebPageText", $.String, "WebPageText");

    $.Constant({Static:true , Public:false}, "NameText", $.String, "NameText");

    $.Constant({Static:true , Public:false}, "RoleText", $.String, "RoleText");

    $.Constant({Static:true , Public:false}, "GivenNameDescription", $.String, "GivenNameDescription");

    $.Constant({Static:true , Public:false}, "SurnameDescription", $.String, "SurnameDescription");

    $.Constant({Static:true , Public:false}, "EmailAddressDescription", $.String, "EmailAddressDescription");

    $.Constant({Static:true , Public:false}, "StreetAddressDescription", $.String, "StreetAddressDescription");

    $.Constant({Static:true , Public:false}, "LocalityDescription", $.String, "LocalityDescription");

    $.Constant({Static:true , Public:false}, "StateOrProvinceDescription", $.String, "StateOrProvinceDescription");

    $.Constant({Static:true , Public:false}, "PostalCodeDescription", $.String, "PostalCodeDescription");

    $.Constant({Static:true , Public:false}, "CountryDescription", $.String, "CountryDescription");

    $.Constant({Static:true , Public:false}, "HomePhoneDescription", $.String, "HomePhoneDescription");

    $.Constant({Static:true , Public:false}, "OtherPhoneDescription", $.String, "OtherPhoneDescription");

    $.Constant({Static:true , Public:false}, "MobilePhoneDescription", $.String, "MobilePhoneDescription");

    $.Constant({Static:true , Public:false}, "DateOfBirthDescription", $.String, "DateOfBirthDescription");

    $.Constant({Static:true , Public:false}, "GenderDescription", $.String, "GenderDescription");

    $.Constant({Static:true , Public:false}, "PPIDDescription", $.String, "PPIDDescription");

    $.Constant({Static:true , Public:false}, "WebPageDescription", $.String, "WebPageDescription");

    $.Constant({Static:true , Public:false}, "NameDescription", $.String, "NameDescription");

    $.Constant({Static:true , Public:false}, "RoleDescription", $.String, "RoleDescription");

    $.Constant({Static:true , Public:false}, "TraceCodeIdentityModel", $.String, "TraceCodeIdentityModel");

    $.Constant({Static:true , Public:false}, "TraceCodeDiagnostics", $.String, "TraceCodeDiagnostics");

    $.Constant({Static:true , Public:false}, "TraceCodeServiceBindingCheck", $.String, "TraceCodeServiceBindingCheck");

    $.Constant({Static:true , Public:false}, "TraceCodeChannelBindingCheck", $.String, "TraceCodeChannelBindingCheck");

    $.Constant({Static:true , Public:false}, "TraceSetPrincipalOnEvaluationContext", $.String, "TraceSetPrincipalOnEvaluationContext");

    $.Constant({Static:true , Public:false}, "TraceUnableToWriteToken", $.String, "TraceUnableToWriteToken");

    $.Constant({Static:true , Public:false}, "TraceValidateToken", $.String, "TraceValidateToken");

    $.Constant({Static:true , Public:false}, "TraceDeflateCookieEncode", $.String, "TraceDeflateCookieEncode");

    $.Constant({Static:true , Public:false}, "PrivateKeyNotSupported", $.String, "PrivateKeyNotSupported");

    $.Constant({Static:true , Public:false}, "PublicKeyNotSupported", $.String, "PublicKeyNotSupported");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm07.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IdentityModel.Metadata");
/* class System.IdentityModel.Metadata.RoleDescriptor */ 

(function RoleDescriptor$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Metadata.RoleDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Contacts", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.ContactPerson")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorUrl", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.KeyDescriptor")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Organization", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.Organization"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolsSupported", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidUntil", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ErrorUrl", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Organization", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Metadata.Organization"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ValidUntil", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.Field({Static:false, Public:false}, "contacts", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.ContactPerson")]));

    $.Field({Static:false, Public:false}, "errorUrl", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "keys", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.KeyDescriptor")]));

    $.Field({Static:false, Public:false}, "organization", $asm19.TypeRef("System.IdentityModel.Metadata.Organization"));

    $.Field({Static:false, Public:false}, "protocolsSupported", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]));

    $.Field({Static:false, Public:false}, "validUntil", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "Contacts", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.ContactPerson")]));

    $.Property({Static:false, Public:true }, "ErrorUrl", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "Keys", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.KeyDescriptor")]));

    $.Property({Static:false, Public:true }, "Organization", $asm19.TypeRef("System.IdentityModel.Metadata.Organization"));

    $.Property({Static:false, Public:true }, "ProtocolsSupported", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Uri")]));

    $.Property({Static:false, Public:true }, "ValidUntil", $asm07.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.WebServiceDescriptor */ 

(function WebServiceDescriptor$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Metadata.RoleDescriptor"), 
      Name: "System.IdentityModel.Metadata.WebServiceDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimTypesOffered", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.DisplayClaim")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimTypesRequested", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.DisplayClaim")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDescription", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceDisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetScopes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenTypesOffered", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServiceDescription", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServiceDisplayName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_claimTypesOffered", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.DisplayClaim")]));

    $.Field({Static:false, Public:false}, "_claimTypesRequested", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.DisplayClaim")]));

    $.Field({Static:false, Public:false}, "_serviceDisplayName", $.String);

    $.Field({Static:false, Public:false}, "_serviceDescription", $.String);

    $.Field({Static:false, Public:false}, "_targetScopes", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]));

    $.Field({Static:false, Public:false}, "_tokenTypesOffered", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]));

    $.Property({Static:false, Public:true }, "ClaimTypesOffered", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.DisplayClaim")]));

    $.Property({Static:false, Public:true }, "ClaimTypesRequested", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.DisplayClaim")]));

    $.Property({Static:false, Public:true }, "ServiceDescription", $.String);

    $.Property({Static:false, Public:true }, "ServiceDisplayName", $.String);

    $.Property({Static:false, Public:true }, "TargetScopes", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]));

    $.Property({Static:false, Public:true }, "TokenTypesOffered", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Uri")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.ApplicationServiceDescriptor */ 

(function ApplicationServiceDescriptor$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Metadata.WebServiceDescriptor"), 
      Name: "System.IdentityModel.Metadata.ApplicationServiceDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Endpoints", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PassiveRequestorEndpoints", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]))
    );

    $.Field({Static:false, Public:false}, "endpoints", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]));

    $.Field({Static:false, Public:false}, "passiveRequestorEndpoints", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]));

    $.Property({Static:false, Public:true }, "Endpoints", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]));

    $.Property({Static:false, Public:true }, "PassiveRequestorEndpoints", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.ContactPerson */ 

(function ContactPerson$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Metadata.ContactPerson", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Metadata.ContactType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Company", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EmailAddresses", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GivenName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Surname", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TelephoneNumbers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.ContactType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Company", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_GivenName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Surname", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Metadata.ContactType"))
    );

    $.Field({Static:false, Public:false}, "_type", $asm19.TypeRef("System.IdentityModel.Metadata.ContactType"));

    $.Field({Static:false, Public:false}, "_company", $.String);

    $.Field({Static:false, Public:false}, "_givenName", $.String);

    $.Field({Static:false, Public:false}, "_surname", $.String);

    $.Field({Static:false, Public:false}, "_emailAddresses", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.String]));

    $.Field({Static:false, Public:false}, "_telephoneNumbers", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.String]));

    $.Property({Static:false, Public:true }, "Company", $.String);

    $.Property({Static:false, Public:true }, "EmailAddresses", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]));

    $.Property({Static:false, Public:true }, "GivenName", $.String);

    $.Property({Static:false, Public:true }, "Surname", $.String);

    $.Property({Static:false, Public:true }, "TelephoneNumbers", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]));

    $.Property({Static:false, Public:true }, "Type", $asm19.TypeRef("System.IdentityModel.Metadata.ContactType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.Metadata.ContactType */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.Metadata.ContactType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unspecified: 0, 
    Technical: 1, 
    Support: 2, 
    Administrative: 3, 
    Billing: 4, 
    Other: 5, 
  }
);

/* class System.IdentityModel.Metadata.DisplayClaim */ 

(function DisplayClaim$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };














  function DisplayClaim_get_WriteOptionalAttribute () {
    return this.DisplayClaim$WriteOptionalAttribute$value;
  }; 







  function DisplayClaim_set_WriteOptionalAttribute (value) {
    this.DisplayClaim$WriteOptionalAttribute$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Metadata.DisplayClaim", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClaimDescriptionForClaimType", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClaimTagForClaimType", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDisplayClaimFromClaimType", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayTag", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Optional", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Method({Static:false, Public:true }, "get_WriteOptionalAttribute", 
      JSIL.MethodSignature.Return($.Boolean), 
      DisplayClaim_get_WriteOptionalAttribute
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PopulateClaimDescriptionMap", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "PopulateClaimTagMap", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Description", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisplayTag", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisplayValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Optional", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Method({Static:false, Public:true }, "set_WriteOptionalAttribute", 
      JSIL.MethodSignature.Action($.Boolean), 
      DisplayClaim_set_WriteOptionalAttribute
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false}, "claimDescriptionMap", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:true , Public:false}, "claimTagMap", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "claimType", $.String);

    $.Field({Static:false, Public:false}, "displayTag", $.String);

    $.Field({Static:false, Public:false}, "displayValue", $.String);

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "optional", $.Boolean);

    $.Field({Static:false, Public:false}, "DisplayClaim$WriteOptionalAttribute$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "ClaimType", $.String);

    $.Property({Static:false, Public:true }, "DisplayTag", $.String);

    $.Property({Static:false, Public:true }, "DisplayValue", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "Optional", $.Boolean);

    $.Property({Static:false, Public:true }, "WriteOptionalAttribute", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.EncryptionMethod */ 

(function EncryptionMethod$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Metadata.EncryptionMethod", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Algorithm", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:false}, "_algorithm", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "Algorithm", $asm0A.TypeRef("System.Uri"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.MetadataBase */ 

(function MetadataBase$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Metadata.MetadataBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SigningCredentials", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.Field({Static:false, Public:false}, "_signingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Property({Static:false, Public:true }, "SigningCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.EntitiesDescriptor */ 

(function EntitiesDescriptor$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Metadata.MetadataBase"), 
      Name: "System.IdentityModel.Metadata.EntitiesDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.EntityDescriptor")]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.EntityDescriptor")]), $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChildEntities", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.EntityDescriptor")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChildEntityGroups", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "entityGroupCollection", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.Type]));

    $.Field({Static:false, Public:false}, "entityCollection", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.EntityDescriptor")]));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "ChildEntities", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.EntityDescriptor")]));

    $.Property({Static:false, Public:true }, "ChildEntityGroups", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.Type]));

    $.Property({Static:false, Public:true }, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.EntityDescriptor */ 

(function EntityDescriptor$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Metadata.MetadataBase"), 
      Name: "System.IdentityModel.Metadata.EntityDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Metadata.EntityId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Contacts", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.ContactPerson")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EntityId", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.EntityId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FederationId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Organization", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.Organization"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RoleDescriptors", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.RoleDescriptor")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EntityId", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Metadata.EntityId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FederationId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Organization", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Metadata.Organization"))
    );

    $.Field({Static:false, Public:false}, "contacts", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.ContactPerson")]));

    $.Field({Static:false, Public:false}, "entityId", $asm19.TypeRef("System.IdentityModel.Metadata.EntityId"));

    $.Field({Static:false, Public:false}, "federationId", $.String);

    $.Field({Static:false, Public:false}, "organization", $asm19.TypeRef("System.IdentityModel.Metadata.Organization"));

    $.Field({Static:false, Public:false}, "roleDescriptors", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.RoleDescriptor")]));

    $.Property({Static:false, Public:true }, "Contacts", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.ContactPerson")]));

    $.Property({Static:false, Public:true }, "EntityId", $asm19.TypeRef("System.IdentityModel.Metadata.EntityId"));

    $.Property({Static:false, Public:true }, "FederationId", $.String);

    $.Property({Static:false, Public:true }, "Organization", $asm19.TypeRef("System.IdentityModel.Metadata.Organization"));

    $.Property({Static:false, Public:true }, "RoleDescriptors", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.RoleDescriptor")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.EntityId */ 

(function EntityId$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Metadata.EntityId", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "MaximumLength", $.Int32, 1024);

    $.Field({Static:false, Public:false}, "_id", $.String);

    $.Property({Static:false, Public:true }, "Id", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.FederationMetadataConstants */ 

(function FederationMetadataConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Metadata.FederationMetadataConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://docs.oasis-open.org/wsfed/federation/200706");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "fed");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.FederationMetadataConstants+Elements */ 

(function Elements$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Metadata.FederationMetadataConstants+Elements", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "ClaimTypesOffered", $.String, "ClaimTypesOffered");

    $.Constant({Static:true , Public:true }, "ClaimTypesRequested", $.String, "ClaimTypesRequested");

    $.Constant({Static:true , Public:true }, "TargetScopes", $.String, "TargetScopes");

    $.Constant({Static:true , Public:true }, "TokenTypesOffered", $.String, "TokenTypesOffered");

    $.Constant({Static:true , Public:true }, "ApplicationServiceType", $.String, "ApplicationServiceType");

    $.Constant({Static:true , Public:true }, "SecurityTokenServiceType", $.String, "SecurityTokenServiceType");

    $.Constant({Static:true , Public:true }, "ApplicationServiceEndpoint", $.String, "ApplicationServiceEndpoint");

    $.Constant({Static:true , Public:true }, "PassiveRequestorEndpoint", $.String, "PassiveRequestorEndpoint");

    $.Constant({Static:true , Public:true }, "SecurityTokenServiceEndpoint", $.String, "SecurityTokenServiceEndpoint");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.SingleSignOnDescriptor */ 

(function SingleSignOnDescriptor$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Metadata.RoleDescriptor"), 
      Name: "System.IdentityModel.Metadata.SingleSignOnDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ArtifactResolutionServices", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameIdentifierFormats", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SingleLogoutServices", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.ProtocolEndpoint")]))
    );

    $.Field({Static:false, Public:false}, "artifactResolutionServices", $asm19.TypeRef("System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary"));

    $.Field({Static:false, Public:false}, "singleLogoutServices", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.ProtocolEndpoint")]));

    $.Field({Static:false, Public:false}, "nameIdFormats", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]));

    $.Property({Static:false, Public:true }, "NameIdentifierFormats", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm0A.TypeRef("System.Uri")]));

    $.Property({Static:false, Public:true }, "ArtifactResolutionServices", $asm19.TypeRef("System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary"));

    $.Property({Static:false, Public:true }, "SingleLogoutServices", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.ProtocolEndpoint")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor */ 

(function IdentityProviderSingleSignOnDescriptor$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Metadata.SingleSignOnDescriptor"), 
      Name: "System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SingleSignOnServices", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.ProtocolEndpoint")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportedAttributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WantAuthenticationRequestsSigned", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WantAuthenticationRequestsSigned", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_wantAuthenticationRequestsSigned", $.Boolean);

    $.Field({Static:false, Public:false}, "_singleSignOnServices", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.ProtocolEndpoint")]));

    $.Field({Static:false, Public:false}, "_supportedAttributes", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")]));

    $.Property({Static:false, Public:true }, "SingleSignOnServices", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.ProtocolEndpoint")]));

    $.Property({Static:false, Public:true }, "SupportedAttributes", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")]));

    $.Property({Static:false, Public:true }, "WantAuthenticationRequestsSigned", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.ProtocolEndpoint */ 

(function ProtocolEndpoint$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Metadata.ProtocolEndpoint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Uri"), $asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binding", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResponseLocation", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Binding", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ResponseLocation", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:false}, "binding", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "location", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "responseLocation", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "Binding", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "Location", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "ResponseLocation", $asm0A.TypeRef("System.Uri"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.IndexedProtocolEndpoint */ 

(function IndexedProtocolEndpoint$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Metadata.ProtocolEndpoint"), 
      Name: "System.IdentityModel.Metadata.IndexedProtocolEndpoint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0A.TypeRef("System.Uri"), 
          $asm0A.TypeRef("System.Uri")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Index", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Index", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsDefault", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.Field({Static:false, Public:false}, "_index", $.Int32);

    $.Field({Static:false, Public:false}, "_isDefault", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:true }, "Index", $.Int32);

    $.Property({Static:false, Public:true }, "IsDefault", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary */ 

(function IndexedProtocolEndpointDictionary$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.Collections.Generic.SortedList`2", [$asm07.TypeRef("System.Int32"), $asm19.TypeRef("System.IdentityModel.Metadata.IndexedProtocolEndpoint")]), 
      Name: "System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Default", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.IndexedProtocolEndpoint"))
    );

    $.Property({Static:false, Public:true }, "Default", $asm19.TypeRef("System.IdentityModel.Metadata.IndexedProtocolEndpoint"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.KeyDescriptor */ 

(function KeyDescriptor$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Metadata.KeyDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncryptionMethods", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.EncryptionMethod")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyInfo", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Use", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.KeyType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyInfo", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Use", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Metadata.KeyType"))
    );

    $.Field({Static:false, Public:false}, "_ski", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Field({Static:false, Public:false}, "_use", $asm19.TypeRef("System.IdentityModel.Metadata.KeyType"));

    $.Field({Static:false, Public:false}, "_encryptionMethods", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.EncryptionMethod")]));

    $.Property({Static:false, Public:true }, "KeyInfo", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Property({Static:false, Public:true }, "Use", $asm19.TypeRef("System.IdentityModel.Metadata.KeyType"));

    $.Property({Static:false, Public:true }, "EncryptionMethods", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.EncryptionMethod")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.Metadata.KeyType */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.Metadata.KeyType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Unspecified: 0, 
    Signing: 1, 
    Encryption: 2, 
  }
);

/* class System.IdentityModel.Metadata.LocalizedEntry */ 

(function LocalizedEntry$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Metadata.LocalizedEntry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Language", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Language", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.Field({Static:false, Public:false}, "language", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:true }, "Language", $asm07.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.LocalizedEntryCollection`1 */ 

(function LocalizedEntryCollection$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ObjectModel.KeyedCollection`2", [$asm07.TypeRef("System.Globalization.CultureInfo"), new JSIL.GenericParameter("T", "System.IdentityModel.Metadata.LocalizedEntryCollection`1")]), 
      Name: "System.IdentityModel.Metadata.LocalizedEntryCollection`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetKeyForItem", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Globalization.CultureInfo"), [$.GenericParameter("T")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.LocalizedName */ 

(function LocalizedName$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntry"), 
      Name: "System.IdentityModel.Metadata.LocalizedName", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.LocalizedUri */ 

(function LocalizedUri$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntry"), 
      Name: "System.IdentityModel.Metadata.LocalizedUri", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Uri"), $asm07.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Uri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Uri", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:false}, "_uri", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "Uri", $asm0A.TypeRef("System.Uri"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.MetadataSerializationException */ 

(function MetadataSerializationException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.Metadata.MetadataSerializationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.MetadataSerializer */ 

(function MetadataSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm19.System.ServiceModel.Security.X509CertificateValidationMode)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm19.System.IdentityModel.Selectors.X509CertificateValidator)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.System.Security.Cryptography.X509Certificates.X509RevocationMode)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.System.Security.Cryptography.X509Certificates.StoreLocation)) ();
  };

















  function MetadataSerializer_get_CertificateValidationMode () {
    return this.MetadataSerializer$CertificateValidationMode$value;
  }; 

  function MetadataSerializer_get_CertificateValidator () {
    return this.MetadataSerializer$CertificateValidator$value;
  }; 

  function MetadataSerializer_get_RevocationMode () {
    return this.MetadataSerializer$RevocationMode$value;
  }; 



  function MetadataSerializer_get_TrustedStoreLocation () {
    return this.MetadataSerializer$TrustedStoreLocation$value;
  }; 
































  function MetadataSerializer_set_CertificateValidationMode (value) {
    this.MetadataSerializer$CertificateValidationMode$value = value;
  }; 

  function MetadataSerializer_set_CertificateValidator (value) {
    this.MetadataSerializer$CertificateValidator$value = value;
  }; 

  function MetadataSerializer_set_RevocationMode (value) {
    this.MetadataSerializer$RevocationMode$value = value;
  }; 

  function MetadataSerializer_set_TrustedStoreLocation (value) {
    this.MetadataSerializer$TrustedStoreLocation$value = value;
  }; 






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Metadata.MetadataSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateApplicationServiceInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.ApplicationServiceDescriptor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateContactPersonInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.ContactPerson"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEntitiesDescriptorInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.EntitiesDescriptor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEntityDescriptorInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.EntityDescriptor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateIdentityProviderSingleSignOnDescriptorInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateIndexedProtocolEndpointInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.IndexedProtocolEndpoint"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateKeyDescriptorInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.KeyDescriptor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateLocalizedNameInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.LocalizedName"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateLocalizedUriInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.LocalizedUri"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateOrganizationInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.Organization"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateProtocolEndpointInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.ProtocolEndpoint"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSecurityTokenServiceDescriptorInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.SecurityTokenServiceDescriptor"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateServiceProviderSingleSignOnDescriptorInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor"))
    );

    $.Method({Static:false, Public:true }, "get_CertificateValidationMode", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode")), 
      MetadataSerializer_get_CertificateValidationMode
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_CertificateValidator", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator")), 
      MetadataSerializer_get_CertificateValidator
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_RevocationMode", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")), 
      MetadataSerializer_get_RevocationMode
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustedIssuers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$.String]))
    );

    $.Method({Static:false, Public:true }, "get_TrustedStoreLocation", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation")), 
      MetadataSerializer_get_TrustedStoreLocation
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetContactPersonType", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.ContactType"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKeyDescriptorType", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.KeyType"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMetadataSigningCertificate", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadApplicationServiceDescriptor", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.ApplicationServiceDescriptor"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAttribute", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContactPerson", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.ContactPerson"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadCustomAttributes", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), "!!0"], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadCustomElement", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader"), "!!0"], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadCustomRoleDescriptor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm2F.TypeRef("System.Xml.XmlReader"), 
          $asm19.TypeRef("System.IdentityModel.Metadata.EntityDescriptor")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadDisplayClaim", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.DisplayClaim"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadEntitiesDescriptor", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.EntitiesDescriptor"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadEntityDescriptor", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.EntityDescriptor"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadIdentityProviderSingleSignOnDescriptor", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadIndexedProtocolEndpoint", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.IndexedProtocolEndpoint"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadKeyDescriptor", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.KeyDescriptor"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadLocalizedName", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.LocalizedName"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadLocalizedUri", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.LocalizedUri"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadMetadata", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.MetadataBase"), [$asm07.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadMetadata", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.MetadataBase"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadMetadata", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.MetadataBase"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadMetadataCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.MetadataBase"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadOrganization", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.Organization"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadProtocolEndpoint", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.ProtocolEndpoint"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadRoleDescriptorAttributes", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Metadata.RoleDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadRoleDescriptorElement", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Metadata.RoleDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSecurityTokenServiceDescriptor", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.SecurityTokenServiceDescriptor"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadServiceProviderSingleSignOnDescriptor", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSingleSignOnDescriptorAttributes", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Metadata.SingleSignOnDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSingleSignOnDescriptorElement", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Metadata.SingleSignOnDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadWebServiceDescriptorAttributes", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Metadata.WebServiceDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadWebServiceDescriptorElement", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Metadata.WebServiceDescriptor")])
    );

    $.Method({Static:false, Public:true }, "set_CertificateValidationMode", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode")), 
      MetadataSerializer_set_CertificateValidationMode
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_CertificateValidator", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator")), 
      MetadataSerializer_set_CertificateValidator
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_RevocationMode", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")), 
      MetadataSerializer_set_RevocationMode
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TrustedStoreLocation", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation")), 
      MetadataSerializer_set_TrustedStoreLocation
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryWrapReadException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateIssuer", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateSigningCredential", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteApplicationServiceDescriptor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.ApplicationServiceDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAttribute", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteContactPerson", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.ContactPerson")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteCustomAttributes", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), "!!0"], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteCustomElements", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), "!!0"], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDisplayClaim", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.DisplayClaim")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEntitiesDescriptor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.EntitiesDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEntityDescriptor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.EntityDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteIdentityProviderSingleSignOnDescriptor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.IdentityProviderSingleSignOnDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteIndexedProtocolEndpoint", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.IndexedProtocolEndpoint"), 
          $asm2F.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteKeyDescriptor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.KeyDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteLocalizedName", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.LocalizedName"), 
          $asm2F.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteLocalizedUri", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.LocalizedUri"), 
          $asm2F.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteMetadata", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $asm19.TypeRef("System.IdentityModel.Metadata.MetadataBase")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteMetadata", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.MetadataBase")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteMetadataCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.MetadataBase")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteOrganization", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.Organization")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteProtocolEndpoint", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.ProtocolEndpoint"), 
          $asm2F.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteRoleDescriptorAttributes", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.RoleDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteRoleDescriptorElements", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.RoleDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSecurityTokenServiceDescriptor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.SecurityTokenServiceDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteServiceProviderSingleSignOnDescriptor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSingleSignOnDescriptorAttributes", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.SingleSignOnDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSingleSignOnDescriptorElements", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.SingleSignOnDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteWebServiceDescriptorAttributes", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.WebServiceDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteWebServiceDescriptorElements", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Metadata.WebServiceDescriptor")])
    );

    $.Constant({Static:true , Public:true }, "LanguagePrefix", $.String, "xml");

    $.Constant({Static:true , Public:true }, "LanguageLocalName", $.String, "lang");

    $.Constant({Static:true , Public:true }, "LanguageAttribute", $.String, "xml:lang");

    $.Constant({Static:true , Public:true }, "LanguageNamespaceUri", $.String, "http://www.w3.org/XML/1998/namespace");

    $.Constant({Static:true , Public:false}, "_uriReference", $.String, "_metadata");

    $.Field({Static:false, Public:false}, "_trustedIssuers", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "_tokenSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Field({Static:false, Public:false}, "MetadataSerializer$CertificateValidationMode$value", $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MetadataSerializer$RevocationMode$value", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MetadataSerializer$TrustedStoreLocation$value", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MetadataSerializer$CertificateValidator$value", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "CertificateValidationMode", $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"));

    $.Property({Static:false, Public:true }, "RevocationMode", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"));

    $.Property({Static:false, Public:true }, "TrustedStoreLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"));

    $.Property({Static:false, Public:true }, "CertificateValidator", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.Property({Static:false, Public:true }, "TrustedIssuers", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Property({Static:false, Public:true }, "SecurityTokenSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.Organization */ 

(function Organization$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Metadata.Organization", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntryCollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.LocalizedName")]), $asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntryCollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.LocalizedName")]), 
          $asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntryCollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.LocalizedUri")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayNames", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntryCollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.LocalizedName")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Names", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntryCollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.LocalizedName")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Urls", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntryCollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.LocalizedUri")]))
    );

    $.Field({Static:false, Public:false}, "displayNames", $asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntryCollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.LocalizedName")]));

    $.Field({Static:false, Public:false}, "names", $asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntryCollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.LocalizedName")]));

    $.Field({Static:false, Public:false}, "urls", $asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntryCollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.LocalizedUri")]));

    $.Property({Static:false, Public:true }, "DisplayNames", $asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntryCollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.LocalizedName")]));

    $.Property({Static:false, Public:true }, "Names", $asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntryCollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.LocalizedName")]));

    $.Property({Static:false, Public:true }, "Urls", $asm19.TypeRef("System.IdentityModel.Metadata.LocalizedEntryCollection`1", [$asm19.TypeRef("System.IdentityModel.Metadata.LocalizedUri")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.Saml2MetadataConstants */ 

(function Saml2MetadataConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Metadata.Saml2MetadataConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "urn:oasis:names:tc:SAML:2.0:metadata");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.Saml2MetadataConstants+Attributes */ 

(function Attributes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Metadata.Saml2MetadataConstants+Attributes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Id", $.String, "ID");

    $.Constant({Static:true , Public:true }, "ContactType", $.String, "contactType");

    $.Constant({Static:true , Public:true }, "Algorithm", $.String, "Algorithm");

    $.Constant({Static:true , Public:true }, "Use", $.String, "use");

    $.Constant({Static:true , Public:true }, "Binding", $.String, "Binding");

    $.Constant({Static:true , Public:true }, "EndpointIndex", $.String, "index");

    $.Constant({Static:true , Public:true }, "EndpointIsDefault", $.String, "isDefault");

    $.Constant({Static:true , Public:true }, "Location", $.String, "Location");

    $.Constant({Static:true , Public:true }, "ResponseLocation", $.String, "ResponseLocation");

    $.Constant({Static:true , Public:true }, "EntityId", $.String, "entityID");

    $.Constant({Static:true , Public:true }, "ErrorUrl", $.String, "errorURL");

    $.Constant({Static:true , Public:true }, "ProtocolsSupported", $.String, "protocolSupportEnumeration");

    $.Constant({Static:true , Public:true }, "ValidUntil", $.String, "validUntil");

    $.Constant({Static:true , Public:true }, "EntityGroupName", $.String, "Name");

    $.Constant({Static:true , Public:true }, "ServiceDescription", $.String, "ServiceDescription");

    $.Constant({Static:true , Public:true }, "ServiceDisplayName", $.String, "ServiceDisplayName");

    $.Constant({Static:true , Public:true }, "WantAuthenticationRequestsSigned", $.String, "WantAuthnRequestsSigned");

    $.Constant({Static:true , Public:true }, "AuthenticationRequestsSigned", $.String, "AuthnRequestsSigned");

    $.Constant({Static:true , Public:true }, "WantAssertionsSigned", $.String, "WantAssertionsSigned");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.Saml2MetadataConstants+Elements */ 

(function Elements$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Metadata.Saml2MetadataConstants+Elements", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "EntitiesDescriptor", $.String, "EntitiesDescriptor");

    $.Constant({Static:true , Public:true }, "EntityDescriptor", $.String, "EntityDescriptor");

    $.Constant({Static:true , Public:true }, "IdpssoDescriptor", $.String, "IDPSSODescriptor");

    $.Constant({Static:true , Public:true }, "RoleDescriptor", $.String, "RoleDescriptor");

    $.Constant({Static:true , Public:true }, "SpssoDescriptor", $.String, "SPSSODescriptor");

    $.Constant({Static:true , Public:true }, "Company", $.String, "Company");

    $.Constant({Static:true , Public:true }, "ContactPerson", $.String, "ContactPerson");

    $.Constant({Static:true , Public:true }, "EmailAddress", $.String, "EmailAddress");

    $.Constant({Static:true , Public:true }, "GivenName", $.String, "GivenName");

    $.Constant({Static:true , Public:true }, "Surname", $.String, "SurName");

    $.Constant({Static:true , Public:true }, "TelephoneNumber", $.String, "TelephoneNumber");

    $.Constant({Static:true , Public:true }, "Organization", $.String, "Organization");

    $.Constant({Static:true , Public:true }, "OrganizationDisplayName", $.String, "OrganizationDisplayName");

    $.Constant({Static:true , Public:true }, "OrganizationName", $.String, "OrganizationName");

    $.Constant({Static:true , Public:true }, "OrganizationUrl", $.String, "OrganizationURL");

    $.Constant({Static:true , Public:true }, "EncryptionMethod", $.String, "EncryptionMethod");

    $.Constant({Static:true , Public:true }, "KeyDescriptor", $.String, "KeyDescriptor");

    $.Constant({Static:true , Public:true }, "ArtifactResolutionService", $.String, "ArtifactResolutionService");

    $.Constant({Static:true , Public:true }, "NameIDFormat", $.String, "NameIDFormat");

    $.Constant({Static:true , Public:true }, "SingleLogoutService", $.String, "SingleLogoutService");

    $.Constant({Static:true , Public:true }, "SingleSignOnService", $.String, "SingleSignOnService");

    $.Constant({Static:true , Public:true }, "AssertionConsumerService", $.String, "AssertionConsumerService");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.SecurityTokenServiceDescriptor */ 

(function SecurityTokenServiceDescriptor$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Metadata.WebServiceDescriptor"), 
      Name: "System.IdentityModel.Metadata.SecurityTokenServiceDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PassiveRequestorEndpoints", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenServiceEndpoints", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]))
    );

    $.Field({Static:false, Public:false}, "securityTokenServiceEndpoints", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]));

    $.Field({Static:false, Public:false}, "passiveRequestorEndpoints", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]));

    $.Property({Static:false, Public:true }, "SecurityTokenServiceEndpoints", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]));

    $.Property({Static:false, Public:true }, "PassiveRequestorEndpoints", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor */ 

(function ServiceProviderSingleSignOnDescriptor$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Metadata.SingleSignOnDescriptor"), 
      Name: "System.IdentityModel.Metadata.ServiceProviderSingleSignOnDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssertionConsumerServices", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationRequestsSigned", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WantAssertionsSigned", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AuthenticationRequestsSigned", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WantAssertionsSigned", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_authenticationRequestsSigned", $.Boolean);

    $.Field({Static:false, Public:false}, "_wantAssertionsSigned", $.Boolean);

    $.Field({Static:false, Public:false}, "_assertionConsumerServices", $asm19.TypeRef("System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary"));

    $.Property({Static:false, Public:true }, "AssertionConsumerServices", $asm19.TypeRef("System.IdentityModel.Metadata.IndexedProtocolEndpointDictionary"));

    $.Property({Static:false, Public:true }, "AuthenticationRequestsSigned", $.Boolean);

    $.Property({Static:false, Public:true }, "WantAssertionsSigned", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IdentityModel.Security");
/* class System.IdentityModel.Selectors.SecurityTokenSerializer */ 

(function SecurityTokenSerializer$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CanReadKeyIdentifier", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanReadKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadKeyIdentifierCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanReadToken", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanWriteKeyIdentifier", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanWriteKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteKeyIdentifierCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanWriteToken", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadKeyIdentifier", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadKeyIdentifierClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadKeyIdentifierCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadTokenCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteKeyIdentifier", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteKeyIdentifierClause", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteKeyIdentifierCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToken", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTokenCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry */ 

(function KeyIdentifierClauseEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry */ 

(function StrEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadClause", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContent", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierEntry */ 

(function KeyIdentifierEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadKeyIdentifierCore", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierCore", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry */ 

(function TokenEntry$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTokenTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenTypesCore", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsTokenTypeUri", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:false}, "tokenTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenTypeUri", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ValueTypeUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SecurityTokenSerializer+SerializerEntries */ 

(function SerializerEntries$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenSerializer+SerializerEntries", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateKeyIdentifierClauseEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateKeyIdentifierEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateStrEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateTokenEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry")]))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Security.WSTrust */ 

(function WSTrust$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+SerializerEntries"), 
      Name: "System.IdentityModel.Security.WSTrust", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"), $asm19.TypeRef("System.IdentityModel.TrustDictionary")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckElement", 
      new JSIL.MethodSignature($.Boolean, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SerializerDictionary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.TrustDictionary"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateKeyIdentifierClauseEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateTokenEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry")]))
    );

    $.Field({Static:false, Public:false}, "securityTokenSerializer", $asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"));

    $.Field({Static:false, Public:false}, "serializerDictionary", $asm19.TypeRef("System.IdentityModel.TrustDictionary"));

    $.Property({Static:false, Public:true }, "SerializerDictionary", $asm19.TypeRef("System.IdentityModel.TrustDictionary"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Security.WSTrust+BinarySecretTokenEntry */ 

(function BinarySecretTokenEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry"), 
      Name: "System.IdentityModel.Security.WSTrust+BinarySecretTokenEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Security.WSTrust"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenTypesCore", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.Field({Static:false, Public:false}, "parent", $asm19.TypeRef("System.IdentityModel.Security.WSTrust"));

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenTypeUri", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ValueTypeUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Security.WSTrust+BinarySecretClauseEntry */ 

(function BinarySecretClauseEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry"), 
      Name: "System.IdentityModel.Security.WSTrust+BinarySecretClauseEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Security.WSTrust"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "parent", $asm19.TypeRef("System.IdentityModel.Security.WSTrust"));

    $.Field({Static:false, Public:false}, "otherDictionary", $asm19.TypeRef("System.IdentityModel.TrustDictionary"));

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Security.WSTrust+GenericXmlSecurityKeyIdentifierClauseEntry */ 

(function GenericXmlSecurityKeyIdentifierClauseEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry"), 
      Name: "System.IdentityModel.Security.WSTrust+GenericXmlSecurityKeyIdentifierClauseEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Security.WSTrust"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "parent", $asm19.TypeRef("System.IdentityModel.Security.WSTrust"));

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.AbsoluteUriCollection */ 

(function AbsoluteUriCollection$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]), 
      Name: "System.IdentityModel.Tokens.AbsoluteUriCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InsertItem", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItem", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0A.TypeRef("System.Uri")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SecurityTokenResolver */ 

(function SecurityTokenResolver$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenResolver", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDefaultSecurityTokenResolver", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCustomConfiguration", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ResolveSecurityKey", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResolveToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResolveToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryResolveSecurityKey", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveSecurityKeyCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryResolveToken", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryResolveToken", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.Configuration.ICustomIdentityConfiguration")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SecurityTokenResolver+SimpleTokenResolver */ 

(function SimpleTokenResolver$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenResolver+SimpleTokenResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveSecurityToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveSecurityKeyCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.Field({Static:false, Public:false}, "tokens", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")]));

    $.Field({Static:false, Public:false}, "canMatchLocalId", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.AggregateTokenResolver */ 

(function AggregateTokenResolver$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), 
      Name: "System.IdentityModel.Tokens.AggregateTokenResolver", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNonEmptyResolvers", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenResolvers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveSecurityKeyCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.Field({Static:false, Public:false}, "_tokenResolvers", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")]));

    $.Property({Static:false, Public:true }, "TokenResolvers", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.ProofDescriptor */ 

(function ProofDescriptor$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.ProofDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ApplyTo", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyIdentifier", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "KeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.AsymmetricProofDescriptor */ 

(function AsymmetricProofDescriptor$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.ProofDescriptor"), 
      Name: "System.IdentityModel.Tokens.AsymmetricProofDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.RSA"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ApplyTo", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyIdentifier", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.Field({Static:false, Public:false}, "_keyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Property({Static:false, Public:true , Virtual:true }, "KeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.AudienceRestriction */ 

(function AudienceRestriction$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.AudienceRestriction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowedAudienceUris", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AudienceMode", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AudienceMode", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"))
    );

    $.Field({Static:false, Public:false}, "_audienceMode", $asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"));

    $.Field({Static:false, Public:false}, "_audience", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]));

    $.Property({Static:false, Public:true }, "AudienceMode", $asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"));

    $.Property({Static:false, Public:true }, "AllowedAudienceUris", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityTokenValidationException */ 

(function SecurityTokenValidationException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenException"), 
      Name: "System.IdentityModel.Tokens.SecurityTokenValidationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.AudienceUriValidationFailedException */ 

(function AudienceUriValidationFailedException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenValidationException"), 
      Name: "System.IdentityModel.Tokens.AudienceUriValidationFailedException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.AuthenticationContext */ 

(function AuthenticationContext$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.AuthenticationContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Authorities", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextClass", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextDeclaration", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContextClass", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContextDeclaration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_authorities", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.String]));

    $.Field({Static:false, Public:false}, "_contextClass", $.String);

    $.Field({Static:false, Public:false}, "_contextDeclaration", $.String);

    $.Property({Static:false, Public:true }, "Authorities", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.String]));

    $.Property({Static:false, Public:true }, "ContextClass", $.String);

    $.Property({Static:false, Public:true }, "ContextDeclaration", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.AuthenticationMethods */ 

(function AuthenticationMethods$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.AuthenticationMethods", true, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/");

    $.Constant({Static:true , Public:true }, "HardwareToken", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/hardwaretoken");

    $.Constant({Static:true , Public:true }, "Kerberos", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/kerberos");

    $.Constant({Static:true , Public:true }, "Password", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/password");

    $.Constant({Static:true , Public:true }, "Pgp", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/pgp");

    $.Constant({Static:true , Public:true }, "SecureRemotePassword", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/secureremotepassword");

    $.Constant({Static:true , Public:true }, "Signature", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/signature");

    $.Constant({Static:true , Public:true }, "Smartcard", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/smartcard");

    $.Constant({Static:true , Public:true }, "SmartcardPki", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/smartcardpki");

    $.Constant({Static:true , Public:true }, "Spki", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/spki");

    $.Constant({Static:true , Public:true }, "TlsClient", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/tlsclient");

    $.Constant({Static:true , Public:true }, "Unspecified", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/unspecified");

    $.Constant({Static:true , Public:true }, "Windows", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/windows");

    $.Constant({Static:true , Public:true }, "Xkms", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/xkms");

    $.Constant({Static:true , Public:true }, "X509", $.String, "http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/x509");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.AuthorizationPolicy */ 

(function AuthorizationPolicy$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.AuthorizationPolicy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Claims.ClaimsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateClaimsPrincipalFromIdentities", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFromIdentity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), [$asm07.TypeRef("System.Security.Principal.IIdentity")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Policy.EvaluationContext"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IdentityCollection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Issuer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectPrimaryIdentity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")])])
    );

    $.Constant({Static:true , Public:true }, "ClaimsPrincipalKey", $.String, "ClaimsPrincipal");

    $.Constant({Static:true , Public:true }, "IdentitiesKey", $.String, "Identities");

    $.Field({Static:false, Public:false}, "_identityCollection", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]));

    $.Field({Static:false, Public:false}, "_issuer", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"));

    $.Field({Static:false, Public:false}, "_id", $.String);

    $.Property({Static:false, Public:true }, "IdentityCollection", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Issuer", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy"), 
      /* 1 */ $asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationComponent")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityKey */ 

(function SecurityKey$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SecurityKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsAsymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSupportedAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.AsymmetricSecurityKey */ 

(function AsymmetricSecurityKey$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"), 
      Name: "System.IdentityModel.Tokens.AsymmetricSecurityKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAsymmetricAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashAlgorithmForSignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSignatureDeformatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureDeformatter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSignatureFormatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureFormatter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasPrivateKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.BootstrapContext */ 

(function BootstrapContext$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.BootstrapContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityToken", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenHandler", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Token", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenBytes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "_token", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Field({Static:false, Public:false}, "_tokenString", $.String);

    $.Field({Static:false, Public:false}, "_tokenBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_tokenHandler", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"));

    $.Constant({Static:true , Public:false}, "_tokenTypeKey", $.String, "K");

    $.Constant({Static:true , Public:false}, "_tokenKey", $.String, "T");

    $.Constant({Static:true , Public:false}, "_securityTokenType", $.Char, "T");

    $.Constant({Static:true , Public:false}, "_stringTokenType", $.Char, "S");

    $.Constant({Static:true , Public:false}, "_byteTokenType", $.Char, "B");

    $.Property({Static:false, Public:true }, "TokenBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Token", $.String);

    $.Property({Static:false, Public:true }, "SecurityToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true }, "SecurityTokenHandler", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.ComputedKeyAlgorithms */ 

(function ComputedKeyAlgorithms$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.ComputedKeyAlgorithms", true, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Psha1", $.String, "http://schemas.microsoft.com/idfx/computedkeyalgorithm/psha1");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.IssuerNameRegistry */ 

(function IssuerNameRegistry$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.IssuerNameRegistry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIssuerName", 
      new JSIL.MethodSignature($.String, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIssuerName", 
      new JSIL.MethodSignature($.String, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetWindowsIssuerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCustomConfiguration", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.Configuration.ICustomIdentityConfiguration")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry */ 

(function ConfigurationBasedIssuerNameRegistry$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.IssuerNameRegistry"), 
      Name: "System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddTrustedIssuer", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConfiguredTrustedIssuers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIssuerName", 
      new JSIL.MethodSignature($.String, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCustomConfiguration", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.Field({Static:false, Public:false}, "_configuredTrustedIssuers", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:true }, "ConfiguredTrustedIssuers", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry+ThumbprintKeyComparer */ 

(function ThumbprintKeyComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry+ThumbprintKeyComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.TokenReplayCache */ 

(function TokenReplayCache$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.TokenReplayCache", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddOrUpdate", 
      new JSIL.MethodSignature(null, [
          $.String, $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCustomConfiguration", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.Configuration.ICustomIdentityConfiguration")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.DefaultTokenReplayCache */ 

(function DefaultTokenReplayCache$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.TokenReplayCache"), 
      Name: "System.IdentityModel.Tokens.DefaultTokenReplayCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddOrUpdate", 
      new JSIL.MethodSignature(null, [
          $.String, $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Capacity", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PurgeInterval", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IncreaseCapacity", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Capacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PurgeInterval", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultTokenReplayCacheCapacity", $.Int32, 500000);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultTokenReplayCachePurgeInterval", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "_internalCache", $asm19.TypeRef("System.IdentityModel.BoundedCache`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")]));


    function DefaultTokenReplayCache__cctor () {
      $thisType.DefaultTokenReplayCachePurgeInterval = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      DefaultTokenReplayCache__cctor
    );

    $.Property({Static:false, Public:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:true }, "PurgeInterval", $asm07.TypeRef("System.TimeSpan"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.DEREncoding */ 

(function DEREncoding$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.IdentityModel.Tokens.DEREncoding", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "BufferIsEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LengthSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeTokenHeader", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadLength", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TokenSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifyTokenHeader", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLength", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ])
    );

    $.Field({Static:true , Public:false}, "mech", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "type", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause */ 

(function EmptySecurityKeyIdentifierClause$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "_context", $.Object);

    $.Property({Static:false, Public:true }, "Context", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.EncryptingCredentials */ 

(function EncryptingCredentials$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.EncryptingCredentials", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityKeyIdentifier", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Algorithm", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityKey", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityKeyIdentifier", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.Field({Static:false, Public:false}, "_algorithm", $.String);

    $.Field({Static:false, Public:false}, "_key", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"));

    $.Field({Static:false, Public:false}, "_keyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Property({Static:false, Public:true }, "Algorithm", $.String);

    $.Property({Static:false, Public:true }, "SecurityKey", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"));

    $.Property({Static:false, Public:true }, "SecurityKeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials */ 

(function EncryptedKeyEncryptingCredentials$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), 
      Name: "System.IdentityModel.Tokens.EncryptedKeyEncryptingCredentials", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $.String, 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WrappingCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.Field({Static:false, Public:false}, "_wrappingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Field({Static:false, Public:false}, "_keyBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "WrappingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.EncryptedKeyIdentifierClause */ 

(function EncryptedKeyIdentifierClause$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.BinaryKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.EncryptedKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String, 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String, 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String, 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String, 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $.String, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CarriedKeyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncryptingKeyIdentifier", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncryptionMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEncryptedKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "carriedKeyName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "encryptionMethod", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "encryptingKeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Property({Static:false, Public:true }, "CarriedKeyName", $.String);

    $.Property({Static:false, Public:true }, "EncryptingKeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Property({Static:false, Public:true }, "EncryptionMethod", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.EncryptedSecurityToken */ 

(function EncryptedSecurityToken$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
      Name: "System.IdentityModel.Tokens.EncryptedSecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanCreateKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKeyIdentifierClause", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncryptingCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Token", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchesKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveKeyIdentifierClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "_encryptingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Field({Static:false, Public:false}, "_realToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true }, "EncryptingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Property({Static:false, Public:true }, "Token", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityTokenHandler */ 

(function SecurityTokenHandler$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SecurityTokenHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadToken", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadToken", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanWriteKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSecurityTokenReference", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DetectReplayedToken", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanValidateToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWriteToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Configuration", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContainingCollection", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EventTraceActivity", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeIdentifiers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCustomConfiguration", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Configuration", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ContainingCollection", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceTokenValidationFailure", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceTokenValidationSuccess", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClause", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteToken", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteToken", 
      new JSIL.MethodSignature($.String, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:false, Public:false}, "collection", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"));

    $.Field({Static:false, Public:false}, "configuration", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"));

    $.Field({Static:false, Public:false}, "eventTraceActivity", $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"));

    $.Property({Static:false, Public:false}, "EventTraceActivity", $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanValidateToken", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWriteToken", $.Boolean);

    $.Property({Static:false, Public:true }, "Configuration", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"));

    $.Property({Static:false, Public:true }, "ContainingCollection", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.Configuration.ICustomIdentityConfiguration")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.EncryptedSecurityTokenHandler */ 

(function EncryptedSecurityTokenHandler$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"), 
      Name: "System.IdentityModel.Tokens.EncryptedSecurityTokenHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadToken", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DebugEncryptedTokenClearText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Text.Encoding")])
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWriteToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyInfoSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeIdentifiers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyInfoSerializer", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteToken", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:true , Public:false}, "_tokenTypeIdentifiers", $jsilcore.TypeRef("System.Array", [$.String]), function ($pi) {
        return JSIL.Array.New($asm07.System.String, 1);
      });

    $.Field({Static:false, Public:false}, "_keyInfoSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Field({Static:false, Public:false}, "_syncObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWriteToken", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyInfoSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException */ 

(function EncryptedTokenDecryptionFailedException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenException"), 
      Name: "System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.EndpointAuthorizationPolicy */ 

(function EndpointAuthorizationPolicy$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.EndpointAuthorizationPolicy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndpointId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IAuthorizationComponent.get_Id", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationComponent"), "get_Id");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Policy.EvaluationContext"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy"), "Evaluate");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IAuthorizationPolicy.get_Issuer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"))
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy"), "get_Issuer");

    $.Field({Static:false, Public:false}, "_endpointId", $.String);

    $.Field({Static:false, Public:false}, "_id", $.String);

    $.Property({Static:false, Public:true }, "EndpointId", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IAuthorizationPolicy.Issuer", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IAuthorizationComponent.Id", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy"), 
      /* 1 */ $asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationComponent")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause */ 

(function GenericXmlSecurityKeyIdentifierClause$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlElement"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareNodes", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlNode"), $asm2F.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferenceXml", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlElement")])
    );

    $.Field({Static:false, Public:false}, "referenceXml", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true }, "ReferenceXml", $asm2F.TypeRef("System.Xml.XmlElement"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.IssuerTokenResolver */ 

(function IssuerTokenResolver$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), 
      Name: "System.IdentityModel.Tokens.IssuerTokenResolver", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WrappedTokenResolver", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveSecurityKeyCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultStoreName", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreName"), function ($pi) {
        return $asm0A.System.Security.Cryptography.X509Certificates.StoreName.TrustedPeople;
      });

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultStoreLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"), function ($pi) {
        return $asm0A.System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine;
      });

    $.Field({Static:false, Public:false}, "_wrappedTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Field({Static:true , Public:false}, "DefaultInstance", $.Type);

    $.Property({Static:false, Public:true }, "WrappedTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WindowsSecurityToken */ 

(function WindowsSecurityToken$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
      Name: "System.IdentityModel.Tokens.WindowsSecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Principal.WindowsIdentity"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.WindowsIdentity"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WindowsIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.DateTime"), 
          $asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.Security.Principal.WindowsIdentity"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.DateTime"), 
          $asm07.TypeRef("System.Security.Principal.WindowsIdentity"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "authenticationType", $.String);

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "effectiveTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "expirationTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "windowsIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true }, "AuthenticationType", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "WindowsIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.KerberosReceiverSecurityToken */ 

(function KerberosReceiverSecurityToken$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.WindowsSecurityToken"), 
      Name: "System.IdentityModel.Tokens.KerberosReceiverSecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String, 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String, 
          $.Boolean, $.String, 
          $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"), $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanCreateKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKeyIdentifierClause", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SymmetricSecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValueTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WindowsIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRequest", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"), 
          $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchesKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "request", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "symmetricSecurityKey", $asm19.TypeRef("System.IdentityModel.Tokens.SymmetricSecurityKey"));

    $.Field({Static:false, Public:false}, "securityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Field({Static:false, Public:false}, "isAuthenticated", $.Boolean);

    $.Field({Static:false, Public:false}, "valueTypeUri", $.String);

    $.Field({Static:false, Public:false}, "channelBinding", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"));

    $.Field({Static:false, Public:false}, "extendedProtectionPolicy", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy"));

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Property({Static:false, Public:true }, "SecurityKey", $asm19.TypeRef("System.IdentityModel.Tokens.SymmetricSecurityKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "WindowsIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Property({Static:false, Public:true }, "ValueTypeUri", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.KerberosRequestorSecurityToken */ 

(function KerberosRequestorSecurityToken$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
      Name: "System.IdentityModel.Tokens.KerberosRequestorSecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Security.Principal.TokenImpersonationLevel"), 
          $asm0A.TypeRef("System.Net.NetworkCredential"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Security.Principal.TokenImpersonationLevel"), 
          $asm0A.TypeRef("System.Net.NetworkCredential"), $.String, 
          $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Security.Principal.TokenImpersonationLevel"), 
          $asm0A.TypeRef("System.Net.NetworkCredential"), $.String, 
          $asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanCreateKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKeyIdentifierClause", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SymmetricSecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServicePrincipalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRequest", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.TokenImpersonationLevel"), $asm0A.TypeRef("System.Net.NetworkCredential"), 
          $asm19.TypeRef("System.IdentityModel.SafeFreeCredentials"), $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchesKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "apreq", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "servicePrincipalName", $.String);

    $.Field({Static:false, Public:false}, "symmetricSecurityKey", $asm19.TypeRef("System.IdentityModel.Tokens.SymmetricSecurityKey"));

    $.Field({Static:false, Public:false}, "securityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Field({Static:false, Public:false}, "effectiveTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "expirationTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "ServicePrincipalName", $.String);

    $.Property({Static:false, Public:true }, "SecurityKey", $asm19.TypeRef("System.IdentityModel.Tokens.SymmetricSecurityKey"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.KerberosSecurityTokenHandler */ 

(function KerberosSecurityTokenHandler$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"), 
      Name: "System.IdentityModel.Tokens.KerberosSecurityTokenHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanValidateToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeIdentifiers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:true , Public:false}, "_tokenTypeIdentifiers", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "CanValidateToken", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause */ 

(function KerberosTicketHashKeyIdentifierClause$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.BinaryKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.KerberosTicketHashKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKerberosTicketHash", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.KeyInfoSerializer */ 

(function KeyInfoSerializer$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
      Name: "System.IdentityModel.Tokens.KeyInfoSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm19.TypeRef("System.IdentityModel.DictionaryManager"), 
          $asm19.TypeRef("System.IdentityModel.TrustDictionary"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm19.TypeRef("System.IdentityModel.DictionaryManager"), 
          $asm19.TypeRef("System.IdentityModel.TrustDictionary"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
          $asm07.TypeRef("System.Func`2", [$.Type, $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+SerializerEntries")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadKeyIdentifierCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteKeyIdentifierCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DictionaryManager", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.DictionaryManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EmitBspRequiredAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InnerSecurityTokenSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTokenTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenTypeUri", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateStrEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadKeyIdentifierCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadTokenCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InnerSecurityTokenSerializer", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldWrapException", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteKeyIdentifierCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTokenCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "keyIdentifierEntries", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierEntry")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "keyIdentifierClauseEntries", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "serializerEntries", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+SerializerEntries")]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "tokenEntries", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry")]));

    $.Field({Static:false, Public:false}, "dictionaryManager", $asm19.TypeRef("System.IdentityModel.DictionaryManager"));

    $.Field({Static:false, Public:false}, "emitBspRequiredAttributes", $.Boolean);

    $.Field({Static:false, Public:false}, "innerSecurityTokenSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Property({Static:false, Public:true }, "DictionaryManager", $asm19.TypeRef("System.IdentityModel.DictionaryManager"));

    $.Property({Static:false, Public:true }, "EmitBspRequiredAttributes", $.Boolean);

    $.Property({Static:false, Public:true }, "InnerSecurityTokenSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.LocalIdKeyIdentifierClause */ 

(function LocalIdKeyIdentifierClause$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.LocalIdKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $asm07.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OwnerType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "localId", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "ownerTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "LocalId", $.String);

    $.Property({Static:false, Public:true }, "OwnerType", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SessionSecurityTokenCache */ 

(function SessionSecurityTokenCache$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SessionSecurityTokenCache", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddOrUpdate", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey"), $asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken"), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken"), [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAll", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken")]), [$.String, $asm21.TypeRef("System.Xml.UniqueId")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCustomConfiguration", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAll", 
      new JSIL.MethodSignature(null, [$.String, $asm21.TypeRef("System.Xml.UniqueId")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAll", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.Configuration.ICustomIdentityConfiguration")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.MruSessionSecurityTokenCache */ 

(function MruSessionSecurityTokenCache$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCache"), 
      Name: "System.IdentityModel.Tokens.MruSessionSecurityTokenCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddOrUpdate", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey"), $asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken"), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken"), [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAll", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken")]), [$.String, $asm21.TypeRef("System.Xml.UniqueId")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Purge", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAll", 
      new JSIL.MethodSignature(null, [$.String, $asm21.TypeRef("System.Xml.UniqueId")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAll", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:true }, "DefaultTokenCacheSize", $.Int32, 20000);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultPurgeInterval", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "nextPurgeTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "items", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey"), $asm19.TypeRef("System.IdentityModel.Tokens.MruSessionSecurityTokenCache+CacheEntry")]));

    $.Field({Static:false, Public:false}, "maximumSize", $.Int32);

    $.Field({Static:false, Public:false}, "mruEntry", $asm19.TypeRef("System.IdentityModel.Tokens.MruSessionSecurityTokenCache+CacheEntry"));

    $.Field({Static:false, Public:false}, "mruList", $asm0A.TypeRef("System.Collections.Generic.LinkedList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey")]));

    $.Field({Static:false, Public:false}, "sizeAfterPurge", $.Int32);

    $.Field({Static:false, Public:false}, "syncRoot", $.Object);

    $.Field({Static:false, Public:false}, "purgeLock", $.Object);


    function MruSessionSecurityTokenCache__cctor () {
      $thisType.DefaultPurgeInterval = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      MruSessionSecurityTokenCache__cctor
    );

    $.Property({Static:false, Public:true }, "MaximumSize", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.MruSessionSecurityTokenCache+CacheEntry */ 

(function CacheEntry$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.System.Collections.Generic.LinkedListNode$b1.Of($asm19.System.IdentityModel.Tokens.SessionSecurityTokenCacheKey))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm19.System.IdentityModel.Tokens.SessionSecurityToken)) ();
  };



  function CacheEntry_get_Node () {
    return this.CacheEntry$Node$value;
  }; 

  function CacheEntry_get_Value () {
    return this.CacheEntry$Value$value;
  }; 

  function CacheEntry_set_Node (value) {
    this.CacheEntry$Node$value = value;
  }; 

  function CacheEntry_set_Value (value) {
    this.CacheEntry$Value$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.MruSessionSecurityTokenCache+CacheEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:true }, "get_Node", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Collections.Generic.LinkedListNode`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey")])), 
      CacheEntry_get_Node
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken")), 
      CacheEntry_get_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Node", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Collections.Generic.LinkedListNode`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey")])), 
      CacheEntry_set_Node
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken")), 
      CacheEntry_set_Value
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "CacheEntry$Value$value", $asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "CacheEntry$Node$value", $asm0A.TypeRef("System.Collections.Generic.LinkedListNode`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey")]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:true }, "Value", $asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken"));

    $.Property({Static:false, Public:true }, "Node", $asm0A.TypeRef("System.Collections.Generic.LinkedListNode`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCacheKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.RsaKeyIdentifierClause */ 

(function RsaKeyIdentifierClause$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.RsaKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.RSA"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCreateKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Rsa", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.RSA"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetExponent", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetModulus", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.Cryptography.RSA")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteExponentAsBase64", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteModulusAsBase64", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:true , Public:false}, "clauseType", $.String, "http://www.w3.org/2000/09/xmldsig#RSAKeyValue");

    $.Field({Static:false, Public:false, ReadOnly:true }, "rsa", $asm07.TypeRef("System.Security.Cryptography.RSA"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "rsaParameters", $asm07.TypeRef("System.Security.Cryptography.RSAParameters"));

    $.Field({Static:false, Public:false}, "rsaSecurityKey", $asm19.TypeRef("System.IdentityModel.Tokens.RsaSecurityKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanCreateKey", $.Boolean);

    $.Property({Static:false, Public:true }, "Rsa", $asm07.TypeRef("System.Security.Cryptography.RSA"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.RsaSecurityKey */ 

(function RsaSecurityKey$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.AsymmetricSecurityKey"), 
      Name: "System.IdentityModel.Tokens.RsaSecurityKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.RSA"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAsymmetricAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashAlgorithmForSignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSignatureDeformatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureDeformatter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSignatureFormatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureFormatter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasPrivateKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsAsymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSupportedAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:false}, "privateKeyStatus", $asm19.TypeRef("System.IdentityModel.Tokens.RsaSecurityKey+PrivateKeyStatus"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "rsa", $asm07.TypeRef("System.Security.Cryptography.RSA"));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.Tokens.RsaSecurityKey+PrivateKeyStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.Tokens.RsaSecurityKey+PrivateKeyStatus", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    AvailabilityNotDetermined: 0, 
    HasPrivateKey: 1, 
    DoesNotHavePrivateKey: 2, 
  }
);

/* class System.IdentityModel.Tokens.RsaSecurityToken */ 

(function RsaSecurityToken$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
      Name: "System.IdentityModel.Tokens.RsaSecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Cryptography.RSA"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Cryptography.RSA"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Cryptography.RSACryptoServiceProvider"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanCreateKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKeyIdentifierClause", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSafeRsaSecurityToken", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Object"), "Finalize");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Rsa", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.RSA"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchesKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "effectiveTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "rsaKey", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Field({Static:false, Public:false}, "rsa", $asm07.TypeRef("System.Security.Cryptography.RSA"));

    $.Field({Static:false, Public:false}, "keyContainerInfo", $asm07.TypeRef("System.Security.Cryptography.CspKeyContainerInfo"));

    $.Field({Static:false, Public:false}, "rsaHandle", $asm07.TypeRef("System.Runtime.InteropServices.GCHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Property({Static:false, Public:true }, "Rsa", $asm07.TypeRef("System.Security.Cryptography.RSA"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.RsaSecurityTokenHandler */ 

(function RsaSecurityTokenHandler$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"), 
      Name: "System.IdentityModel.Tokens.RsaSecurityTokenHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadToken", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanValidateToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWriteToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeIdentifiers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteToken", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:true , Public:false}, "_tokenTypeIdentifiers", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "CanValidateToken", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWriteToken", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Action */ 

(function Saml2Action$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2Action", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "actionNamespace", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Advice */ 

(function Saml2Advice$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2Advice", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssertionIdReferences", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assertions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssertionUriReferences", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.Field({Static:false, Public:false}, "assertionIdReferences", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id")]));

    $.Field({Static:false, Public:false}, "assertions", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion")]));

    $.Field({Static:false, Public:false}, "assertionUriReferences", $asm19.TypeRef("System.IdentityModel.Tokens.AbsoluteUriCollection"));

    $.Property({Static:false, Public:true }, "AssertionIdReferences", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id")]));

    $.Property({Static:false, Public:true }, "Assertions", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion")]));

    $.Property({Static:false, Public:true }, "AssertionUriReferences", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Assertion */ 

(function Saml2Assertion$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2Assertion", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CaptureSourceData", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.EnvelopedSignatureReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Advice", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Advice"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWriteSourceData", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Conditions", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Conditions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncryptingCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExternalEncryptedKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.EncryptedKeyIdentifierClause")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssueInstant", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Issuer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Statements", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Statement")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Subject", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Subject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Advice", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Advice"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Conditions", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Conditions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EncryptingCredentials", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IssueInstant", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Issuer", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SigningCredentials", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Subject", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Subject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSourceData", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "advice", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Advice"));

    $.Field({Static:false, Public:false}, "conditions", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Conditions"));

    $.Field({Static:false, Public:false}, "encryptingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Field({Static:false, Public:false}, "externalEncryptedKeys", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.EncryptedKeyIdentifierClause")]));

    $.Field({Static:false, Public:false}, "id", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id"));

    $.Field({Static:false, Public:false}, "issueInstant", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "issuer", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"));

    $.Field({Static:false, Public:false}, "signingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Field({Static:false, Public:false}, "sourceData", $asm19.TypeRef("System.IdentityModel.XmlTokenStream"));

    $.Field({Static:false, Public:false}, "statements", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Statement")]));

    $.Field({Static:false, Public:false}, "subject", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Subject"));

    $.Field({Static:false, Public:false}, "version", $.String);

    $.Property({Static:false, Public:true }, "Advice", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Advice"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanWriteSourceData", $.Boolean);

    $.Property({Static:false, Public:true }, "Conditions", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Conditions"));

    $.Property({Static:false, Public:true }, "EncryptingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Property({Static:false, Public:true }, "ExternalEncryptedKeys", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.EncryptedKeyIdentifierClause")]));

    $.Property({Static:false, Public:true }, "Id", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id"));

    $.Property({Static:false, Public:true }, "IssueInstant", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "Issuer", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"));

    $.Property({Static:false, Public:true }, "SigningCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Property({Static:false, Public:true }, "Subject", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Subject"));

    $.Property({Static:false, Public:true }, "Statements", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Statement")]));

    $.Property({Static:false, Public:true }, "Version", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause */ 

(function Saml2AssertionKeyIdentifierClause$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Attribute */ 

(function Saml2Attribute$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2Attribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeValueXsiType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FriendlyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameFormat", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginalIssuer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttributeValueXsiType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FriendlyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NameFormat", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OriginalIssuer", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "friendlyName", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "nameFormat", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "values", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.String]));

    $.Field({Static:false, Public:false}, "originalIssuer", $.String);

    $.Field({Static:false, Public:false}, "attributeValueXsiType", $.String);

    $.Property({Static:false, Public:true }, "FriendlyName", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "NameFormat", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "OriginalIssuer", $.String);

    $.Property({Static:false, Public:true }, "AttributeValueXsiType", $.String);

    $.Property({Static:false, Public:true }, "Values", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Statement */ 

(function Saml2Statement$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2Statement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2AttributeStatement */ 

(function Saml2AttributeStatement$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Statement"), 
      Name: "System.IdentityModel.Tokens.Saml2AttributeStatement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")]))
    );

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")]));

    $.Property({Static:false, Public:true }, "Attributes", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2AudienceRestriction */ 

(function Saml2AudienceRestriction$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2AudienceRestriction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Audiences", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.Field({Static:false, Public:false}, "audiences", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]));

    $.Property({Static:false, Public:true }, "Audiences", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2AuthenticationContext */ 

(function Saml2AuthenticationContext$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2AuthenticationContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Uri"), $asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticatingAuthorities", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClassReference", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DeclarationReference", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ClassReference", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DeclarationReference", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:false}, "authenticatingAuthorities", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]));

    $.Field({Static:false, Public:false}, "classReference", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "declarationReference", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "AuthenticatingAuthorities", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]));

    $.Property({Static:false, Public:true }, "ClassReference", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "DeclarationReference", $asm0A.TypeRef("System.Uri"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2AuthenticationStatement */ 

(function Saml2AuthenticationStatement$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Statement"), 
      Name: "System.IdentityModel.Tokens.Saml2AuthenticationStatement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthenticationContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthenticationContext"), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationContext", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthenticationContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationInstant", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SessionIndex", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SessionNotOnOrAfter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubjectLocality", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectLocality"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AuthenticationContext", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthenticationContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AuthenticationInstant", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SessionIndex", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SessionNotOnOrAfter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SubjectLocality", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectLocality"))
    );

    $.Field({Static:false, Public:false}, "authnContext", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthenticationContext"));

    $.Field({Static:false, Public:false}, "authnInstant", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "sessionIndex", $.String);

    $.Field({Static:false, Public:false}, "sessionNotOnOrAfter", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "subjectLocality", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectLocality"));

    $.Property({Static:false, Public:true }, "AuthenticationContext", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthenticationContext"));

    $.Property({Static:false, Public:true }, "AuthenticationInstant", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "SessionIndex", $.String);

    $.Property({Static:false, Public:true }, "SessionNotOnOrAfter", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "SubjectLocality", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectLocality"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement */ 

(function Saml2AuthorizationDecisionStatement$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Statement"), 
      Name: "System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Uri"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Uri"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"), 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Action")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Actions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Action")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Decision", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Evidence", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Evidence"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Resource", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Decision", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Evidence", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Evidence"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Resource", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "EmptyResource", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "actions", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Action")]));

    $.Field({Static:false, Public:false}, "evidence", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Evidence"));

    $.Field({Static:false, Public:false}, "decision", $asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"));

    $.Field({Static:false, Public:false}, "resource", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "Actions", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Action")]));

    $.Property({Static:false, Public:true }, "Decision", $asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"));

    $.Property({Static:false, Public:true }, "Evidence", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Evidence"));

    $.Property({Static:false, Public:true }, "Resource", $asm0A.TypeRef("System.Uri"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Conditions */ 

(function Saml2Conditions$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2Conditions", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AudienceRestrictions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2AudienceRestriction")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotBefore", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotOnOrAfter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OneTimeUse", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProxyRestriction", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2ProxyRestriction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NotBefore", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NotOnOrAfter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OneTimeUse", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProxyRestriction", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2ProxyRestriction"))
    );

    $.Field({Static:false, Public:false}, "audienceRestrictions", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2AudienceRestriction")]));

    $.Field({Static:false, Public:false}, "notBefore", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "notOnOrAfter", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "oneTimeUse", $.Boolean);

    $.Field({Static:false, Public:false}, "proxyRestriction", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2ProxyRestriction"));

    $.Property({Static:false, Public:true }, "AudienceRestrictions", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2AudienceRestriction")]));

    $.Property({Static:false, Public:true }, "NotBefore", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "NotOnOrAfter", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "OneTimeUse", $.Boolean);

    $.Property({Static:false, Public:true }, "ProxyRestriction", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2ProxyRestriction"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Constants */ 

(function Saml2Constants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.Saml2Constants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "saml");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "urn:oasis:names:tc:SAML:2.0:assertion");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Constants+ActionNamespaces */ 

(function ActionNamespaces$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.Saml2Constants+ActionNamespaces", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "Rwedc", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "RwedcNegation", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Ghpp", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Unix", $asm0A.TypeRef("System.Uri"));

    $.Constant({Static:true , Public:true }, "RwedcString", $.String, "urn:oasis:names:tc:SAML:1.0:action:rwedc");

    $.Constant({Static:true , Public:true }, "RwedcNegationString", $.String, "urn:oasis:names:tc:SAML:1.0:action:rwedc-negation");

    $.Constant({Static:true , Public:true }, "GhppString", $.String, "urn:oasis:names:tc:SAML:1.0:action:ghpp");

    $.Constant({Static:true , Public:true }, "UnixString", $.String, "urn:oasis:names:tc:SAML:1.0:action:unix");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Constants+Attributes */ 

(function Attributes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.Saml2Constants+Attributes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Address", $.String, "Address");

    $.Constant({Static:true , Public:true }, "AuthnInstant", $.String, "AuthnInstant");

    $.Constant({Static:true , Public:true }, "Count", $.String, "Count");

    $.Constant({Static:true , Public:true }, "Decision", $.String, "Decision");

    $.Constant({Static:true , Public:true }, "DNSName", $.String, "DNSName");

    $.Constant({Static:true , Public:true }, "Format", $.String, "Format");

    $.Constant({Static:true , Public:true }, "FriendlyName", $.String, "FriendlyName");

    $.Constant({Static:true , Public:true }, "ID", $.String, "ID");

    $.Constant({Static:true , Public:true }, "InResponseTo", $.String, "InResponseTo");

    $.Constant({Static:true , Public:true }, "IssueInstant", $.String, "IssueInstant");

    $.Constant({Static:true , Public:true }, "Method", $.String, "Method");

    $.Constant({Static:true , Public:true }, "Name", $.String, "Name");

    $.Constant({Static:true , Public:true }, "NameFormat", $.String, "NameFormat");

    $.Constant({Static:true , Public:true }, "NameQualifier", $.String, "NameQualifier");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "Namespace");

    $.Constant({Static:true , Public:true }, "NotBefore", $.String, "NotBefore");

    $.Constant({Static:true , Public:true }, "NotOnOrAfter", $.String, "NotOnOrAfter");

    $.Constant({Static:true , Public:true }, "OriginalIssuer", $.String, "OriginalIssuer");

    $.Constant({Static:true , Public:true }, "Recipient", $.String, "Recipient");

    $.Constant({Static:true , Public:true }, "Resource", $.String, "Resource");

    $.Constant({Static:true , Public:true }, "SessionIndex", $.String, "SessionIndex");

    $.Constant({Static:true , Public:true }, "SessionNotOnOrAfter", $.String, "SessionNotOnOrAfter");

    $.Constant({Static:true , Public:true }, "SPNameQualifier", $.String, "SPNameQualifier");

    $.Constant({Static:true , Public:true }, "SPProvidedID", $.String, "SPProvidedID");

    $.Constant({Static:true , Public:true }, "Version", $.String, "Version");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Constants+AuthenticationContextClasses */ 

(function AuthenticationContextClasses$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.Saml2Constants+AuthenticationContextClasses", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "InternetProtocol", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "InternetProtocolPassword", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Kerberos", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "MobileOneFactorUnregistered", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "MobileTwoFactorUnregistered", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "MobileOneFactorContract", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "MobileTwoFactorContract", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Password", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "PasswordProtectedTransport", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "PreviousSession", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "X509", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Pgp", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Spki", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "XmlDSig", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Smartcard", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "SmartcardPki", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "SoftwarePki", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Telephony", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "NomadTelephony", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "PersonalTelephony", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "AuthenticatedTelephony", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "SecureRemotePassword", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "TlsClient", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "TimeSyncToken", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Unspecified", $asm0A.TypeRef("System.Uri"));

    $.Constant({Static:true , Public:true }, "InternetProtocolString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocol");

    $.Constant({Static:true , Public:true }, "InternetProtocolPasswordString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:InternetProtocolPassword");

    $.Constant({Static:true , Public:true }, "KerberosString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:Kerberos");

    $.Constant({Static:true , Public:true }, "MobileOneFactorUnregisteredString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:MobileOneFactorUnregistered");

    $.Constant({Static:true , Public:true }, "MobileTwoFactorUnregisteredString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorUnregistered");

    $.Constant({Static:true , Public:true }, "MobileOneFactorContractString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:MobileOneFactorContract");

    $.Constant({Static:true , Public:true }, "MobileTwoFactorContractString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorContract");

    $.Constant({Static:true , Public:true }, "PasswordString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:Password");

    $.Constant({Static:true , Public:true }, "PasswordProtectedTransportString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport");

    $.Constant({Static:true , Public:true }, "PreviousSessionString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:PreviousSession");

    $.Constant({Static:true , Public:true }, "X509String", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:X509");

    $.Constant({Static:true , Public:true }, "PgpString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:PGP");

    $.Constant({Static:true , Public:true }, "SpkiString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:SPKI");

    $.Constant({Static:true , Public:true }, "XmlDsigString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:XMLDSig");

    $.Constant({Static:true , Public:true }, "SecureRempotePasswordString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:SecureRemotePassword");

    $.Constant({Static:true , Public:true }, "SmartcardString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:Smartcard");

    $.Constant({Static:true , Public:true }, "SmartcardPkiString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:SmartcardPKI");

    $.Constant({Static:true , Public:true }, "SoftwarePkiString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:SoftwarePKI");

    $.Constant({Static:true , Public:true }, "TelephonyString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:Telephony");

    $.Constant({Static:true , Public:true }, "NomadTelephonyString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:NomadTelephony");

    $.Constant({Static:true , Public:true }, "PersonalTelephonyString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:PersonalTelephony");

    $.Constant({Static:true , Public:true }, "AuthenticatedTelephonyString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:AuthenticatedTelephony");

    $.Constant({Static:true , Public:true }, "SecureRemotePasswordString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:SecureRemotePassword");

    $.Constant({Static:true , Public:true }, "TlsClientString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:TLSClient");

    $.Constant({Static:true , Public:true }, "TimeSyncTokenString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:TimeSyncToken");

    $.Constant({Static:true , Public:true }, "UnspecifiedString", $.String, "urn:oasis:names:tc:SAML:2.0:ac:classes:Unspecified");

    $.Constant({Static:true , Public:true }, "WindowsString", $.String, "urn:federation:authentication:windows");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Constants+ConfirmationMethods */ 

(function ConfirmationMethods$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.Saml2Constants+ConfirmationMethods", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "BearerString", $.String, "urn:oasis:names:tc:SAML:2.0:cm:bearer");

    $.Constant({Static:true , Public:true }, "HolderOfKeyString", $.String, "urn:oasis:names:tc:SAML:2.0:cm:holder-of-key");

    $.Constant({Static:true , Public:true }, "SenderVouchesString", $.String, "urn:oasis:names:tc:SAML:2.0:cm:sender-vouches");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Bearer", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "HolderOfKey", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "SenderVouches", $asm0A.TypeRef("System.Uri"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Constants+Elements */ 

(function Elements$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.Saml2Constants+Elements", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Action", $.String, "Action");

    $.Constant({Static:true , Public:true }, "Advice", $.String, "Advice");

    $.Constant({Static:true , Public:true }, "Assertion", $.String, "Assertion");

    $.Constant({Static:true , Public:true }, "AssertionIDRef", $.String, "AssertionIDRef");

    $.Constant({Static:true , Public:true }, "AssertionURIRef", $.String, "AssertionURIRef");

    $.Constant({Static:true , Public:true }, "Attribute", $.String, "Attribute");

    $.Constant({Static:true , Public:true }, "AttributeStatement", $.String, "AttributeStatement");

    $.Constant({Static:true , Public:true }, "AttributeValue", $.String, "AttributeValue");

    $.Constant({Static:true , Public:true }, "Audience", $.String, "Audience");

    $.Constant({Static:true , Public:true }, "AudienceRestriction", $.String, "AudienceRestriction");

    $.Constant({Static:true , Public:true }, "AuthenticatingAuthority", $.String, "AuthenticatingAuthority");

    $.Constant({Static:true , Public:true }, "AuthnContext", $.String, "AuthnContext");

    $.Constant({Static:true , Public:true }, "AuthnContextClassRef", $.String, "AuthnContextClassRef");

    $.Constant({Static:true , Public:true }, "AuthnContextDecl", $.String, "AuthnContextDecl");

    $.Constant({Static:true , Public:true }, "AuthnContextDeclRef", $.String, "AuthnContextDeclRef");

    $.Constant({Static:true , Public:true }, "AuthnStatement", $.String, "AuthnStatement");

    $.Constant({Static:true , Public:true }, "AuthzDecisionStatement", $.String, "AuthzDecisionStatement");

    $.Constant({Static:true , Public:true }, "BaseID", $.String, "BaseID");

    $.Constant({Static:true , Public:true }, "Condition", $.String, "Condition");

    $.Constant({Static:true , Public:true }, "Conditions", $.String, "Conditions");

    $.Constant({Static:true , Public:true }, "EncryptedAssertion", $.String, "EncryptedAssertion");

    $.Constant({Static:true , Public:true }, "EncryptedAttribute", $.String, "EncryptedAttribute");

    $.Constant({Static:true , Public:true }, "EncryptedID", $.String, "EncryptedID");

    $.Constant({Static:true , Public:true }, "Evidence", $.String, "Evidence");

    $.Constant({Static:true , Public:true }, "Issuer", $.String, "Issuer");

    $.Constant({Static:true , Public:true }, "NameID", $.String, "NameID");

    $.Constant({Static:true , Public:true }, "OneTimeUse", $.String, "OneTimeUse");

    $.Constant({Static:true , Public:true }, "ProxyRestricton", $.String, "ProxyRestriction");

    $.Constant({Static:true , Public:true }, "Statement", $.String, "Statement");

    $.Constant({Static:true , Public:true }, "Subject", $.String, "Subject");

    $.Constant({Static:true , Public:true }, "SubjectConfirmation", $.String, "SubjectConfirmation");

    $.Constant({Static:true , Public:true }, "SubjectConfirmationData", $.String, "SubjectConfirmationData");

    $.Constant({Static:true , Public:true }, "SubjectLocality", $.String, "SubjectLocality");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Constants+NameIdentifierFormats */ 

(function NameIdentifierFormats$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.Saml2Constants+NameIdentifierFormats", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "Unspecified", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "EmailAddress", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "X509SubjectName", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "WindowsDomainQualifiedName", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Kerberos", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Entity", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Persistent", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Transient", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Encrypted", $asm0A.TypeRef("System.Uri"));

    $.Constant({Static:true , Public:true }, "UnspecifiedString", $.String, "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified");

    $.Constant({Static:true , Public:true }, "EmailAddressString", $.String, "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress");

    $.Constant({Static:true , Public:true }, "X509SubjectNameString", $.String, "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName");

    $.Constant({Static:true , Public:true }, "WindowsDomainQualifiedNameString", $.String, "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName");

    $.Constant({Static:true , Public:true }, "KerberosString", $.String, "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos");

    $.Constant({Static:true , Public:true }, "EntityString", $.String, "urn:oasis:names:tc:SAML:2.0:nameid-format:entity");

    $.Constant({Static:true , Public:true }, "PersistentString", $.String, "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent");

    $.Constant({Static:true , Public:true }, "TransientString", $.String, "urn:oasis:names:tc:SAML:2.0:nameid-format:transient");

    $.Constant({Static:true , Public:true }, "EncryptedString", $.String, "urn:oasis:names:tc:SAML:2.0:nameid-format:encrypted");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Constants+Types */ 

(function Types$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.Saml2Constants+Types", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "ActionType", $.String, "ActionType");

    $.Constant({Static:true , Public:true }, "AdviceType", $.String, "AdviceType");

    $.Constant({Static:true , Public:true }, "AssertionType", $.String, "AssertionType");

    $.Constant({Static:true , Public:true }, "AttributeStatementType", $.String, "AttributeStatementType");

    $.Constant({Static:true , Public:true }, "AttributeType", $.String, "AttributeType");

    $.Constant({Static:true , Public:true }, "AudienceRestrictionType", $.String, "AudienceRestrictionType");

    $.Constant({Static:true , Public:true }, "AuthnContextType", $.String, "AuthnContextType");

    $.Constant({Static:true , Public:true }, "AuthnStatementType", $.String, "AuthnStatementType");

    $.Constant({Static:true , Public:true }, "AuthzDecisionStatementType", $.String, "AuthzDecisionStatementType");

    $.Constant({Static:true , Public:true }, "BaseIDAbstractType", $.String, "BaseIDAbstractType");

    $.Constant({Static:true , Public:true }, "ConditionAbstractType", $.String, "ConditionAbstractType");

    $.Constant({Static:true , Public:true }, "ConditionsType", $.String, "ConditionsType");

    $.Constant({Static:true , Public:true }, "EncryptedElementType", $.String, "EncryptedElementType");

    $.Constant({Static:true , Public:true }, "EvidenceType", $.String, "EvidenceType");

    $.Constant({Static:true , Public:true }, "KeyInfoConfirmationDataType", $.String, "KeyInfoConfirmationDataType");

    $.Constant({Static:true , Public:true }, "NameIDType", $.String, "NameIDType");

    $.Constant({Static:true , Public:true }, "OneTimeUseType", $.String, "OneTimeUseType");

    $.Constant({Static:true , Public:true }, "ProxyRestrictionType", $.String, "ProxyRestrictionType");

    $.Constant({Static:true , Public:true }, "SubjectType", $.String, "SubjectType");

    $.Constant({Static:true , Public:true }, "SubjectConfirmationDataType", $.String, "SubjectConfirmationDataType");

    $.Constant({Static:true , Public:true }, "SubjectConfirmationType", $.String, "SubjectConfirmationType");

    $.Constant({Static:true , Public:true }, "SubjectLocalityType", $.String, "SubjectLocalityType");

    $.Constant({Static:true , Public:true }, "StatementAbstractType", $.String, "StatementAbstractType");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Evidence */ 

(function Saml2Evidence$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2Evidence", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssertionIdReferences", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assertions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssertionUriReferences", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.Field({Static:false, Public:false}, "assertionIdReferences", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id")]));

    $.Field({Static:false, Public:false}, "assertions", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion")]));

    $.Field({Static:false, Public:false}, "assertionUriReferences", $asm19.TypeRef("System.IdentityModel.Tokens.AbsoluteUriCollection"));

    $.Property({Static:false, Public:true }, "AssertionIdReferences", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id")]));

    $.Property({Static:false, Public:true }, "Assertions", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion")]));

    $.Property({Static:false, Public:true }, "AssertionUriReferences", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2Id */ 

(function Saml2Id$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2Id", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Property({Static:false, Public:true }, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2NameIdentifier */ 

(function Saml2NameIdentifier$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2NameIdentifier", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncryptingCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExternalEncryptedKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.EncryptedKeyIdentifierClause")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Format", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameQualifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SPNameQualifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SPProvidedId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EncryptingCredentials", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Format", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NameQualifier", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SPNameQualifier", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SPProvidedId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "format", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "nameQualifier", $.String);

    $.Field({Static:false, Public:false}, "serviceProviderPointNameQualifier", $.String);

    $.Field({Static:false, Public:false}, "serviceProviderdId", $.String);

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Field({Static:false, Public:false}, "encryptingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Field({Static:false, Public:false}, "externalEncryptedKeys", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.EncryptedKeyIdentifierClause")]));

    $.Property({Static:false, Public:true }, "EncryptingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Property({Static:false, Public:true }, "ExternalEncryptedKeys", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.EncryptedKeyIdentifierClause")]));

    $.Property({Static:false, Public:true }, "Format", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "NameQualifier", $.String);

    $.Property({Static:false, Public:true }, "SPNameQualifier", $.String);

    $.Property({Static:false, Public:true }, "SPProvidedId", $.String);

    $.Property({Static:false, Public:true }, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2ProxyRestriction */ 

(function Saml2ProxyRestriction$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2ProxyRestriction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Audiences", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Count", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.Field({Static:false, Public:false}, "audiences", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]));

    $.Field({Static:false, Public:false}, "count", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "Audiences", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0A.TypeRef("System.Uri")]));

    $.Property({Static:false, Public:true }, "Count", $asm07.TypeRef("System.Nullable`1", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause */ 

(function Saml2SecurityKeyIdentifierClause$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.Saml2SecurityKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assertion", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"))
    );

    $.Field({Static:false, Public:false}, "assertion", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"));

    $.Property({Static:false, Public:true }, "Assertion", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2SecurityToken */ 

(function Saml2SecurityToken$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
      Name: "System.IdentityModel.Tokens.Saml2SecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"), $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanCreateKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKeyIdentifierClause", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assertion", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuerToken", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchesKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "assertion", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"));

    $.Field({Static:false, Public:false}, "keys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Field({Static:false, Public:false}, "issuerToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true }, "Assertion", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true }, "IssuerToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2SecurityTokenHandler */ 

(function Saml2SecurityTokenHandler$Members () {
  var $, $thisType;
















































































































  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"), 
      Name: "System.IdentityModel.Tokens.Saml2SecurityTokenHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityTokenRequirement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddDelegateToAttributes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")]), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadToken", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanWriteKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CollectAttributeValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")]), [$asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAdvice", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Advice"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAttribute", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute"), [$asm07.TypeRef("System.Security.Claims.Claim"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAttributeStatement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2AttributeStatement"), [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAuthenticationStatement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthenticationStatement"), [$asm19.TypeRef("System.Security.Claims.AuthenticationInformation"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateClaims", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConditions", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Conditions"), [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime"), $.String, 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateIssuerNameIdentifier", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePlaintextReaderFromEncryptedData", 
      new JSIL.MethodSignature($asm21.TypeRef("System.Xml.XmlDictionaryReader"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.EncryptedKeyIdentifierClause")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSamlSubject", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Subject"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSecurityTokenReference", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateStatements", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Statement")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateWindowsIdentity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.WindowsIdentity"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateXmlStringFromAttributes", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DenormalizeAuthenticationType", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DetectReplayedToken", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindUpn", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanValidateToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWriteToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateValidator", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyInfoSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SamlSecurityTokenRequirement", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityTokenRequirement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEncryptingCredentials", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSigningCredentials", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenReplayCacheEntryExpirationTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeIdentifiers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSaml2Assertion", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSaml2KeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCustomConfiguration", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NormalizeAuthenticationContextClassReference", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessAttributeStatement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.Saml2AttributeStatement"), $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessAuthenticationStatement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthenticationStatement"), $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessAuthorizationDecisionStatement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement"), $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessSamlSubject", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Subject"), $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessStatement", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Statement")]), $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAction", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Action"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAdvice", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Advice"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAssertion", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAttribute", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAttributeStatement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2AttributeStatement"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAudienceRestriction", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2AudienceRestriction"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAuthenticationContext", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthenticationContext"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAuthenticationStatement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthenticationStatement"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAuthorizationDecisionStatement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadConditions", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Conditions"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadEmptyContentElement", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadEncryptedId", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadEvidence", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Evidence"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadIssuer", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadNameId", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadNameIdType", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadProxyRestriction", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2ProxyRestriction"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSigningKeyInfo", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadSimpleNCNameElement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadSimpleUriElement", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Uri"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadSimpleUriElement", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Uri"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm0A.TypeRef("System.UriKind")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadSimpleUriElement", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Uri"), [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm0A.TypeRef("System.UriKind"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadStatement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Statement"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSubject", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Subject"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSubjectConfirmation", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmation"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSubjectConfirmationData", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmationData"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSubjectId", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSubjectKeyInfo", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSubjectLocality", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectLocality"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveIssuerToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveSecurityKeys", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]), [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateValidator", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyInfoSerializer", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SamlSecurityTokenRequirement", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityTokenRequirement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetDelegateFromAttribute", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute"), $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveIssuerToken", 
      new JSIL.MethodSignature($.Boolean, [
          $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryWrapReadException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateConditions", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2Conditions"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateConfirmationData", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmationData"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAction", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Action")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAdvice", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Advice")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAssertion", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAttribute", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAttributeStatement", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2AttributeStatement")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAttributeValue", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String, 
          $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAudienceRestriction", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2AudienceRestriction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAuthenticationContext", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthenticationContext")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAuthenticationStatement", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthenticationStatement")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAuthorizationDecisionStatement", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2AuthorizationDecisionStatement")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteConditions", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Conditions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEvidence", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Evidence")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteIssuer", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClause", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNameId", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNameIdType", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteProxyRestriction", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2ProxyRestriction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSigningKeyInfo", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteStatement", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Statement")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSubject", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Subject")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSubjectConfirmation", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmation")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSubjectConfirmationData", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmationData")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSubjectKeyInfo", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSubjectLocality", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectLocality")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteToken", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Constant({Static:true , Public:true }, "TokenProfile11ValueType", $.String, "http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID");

    $.Constant({Static:true , Public:false}, "Actor", $.String, "Actor");

    $.Constant({Static:true , Public:false}, "Attribute", $.String, "Attribute");

    $.Field({Static:true , Public:false}, "tokenTypeIdentifiers", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "samlSecurityTokenRequirement", $asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityTokenRequirement"));

    $.Field({Static:false, Public:false}, "keyInfoSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Constant({Static:true , Public:false}, "ClaimType2009Namespace", $.String, "http://schemas.xmlsoap.org/ws/2009/09/identity/claims");

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "CanValidateToken", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "CertificateValidator", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.Property({Static:false, Public:true }, "KeyInfoSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanWriteToken", $.Boolean);

    $.Property({Static:false, Public:true }, "SamlSecurityTokenRequirement", $asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityTokenRequirement"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2SecurityTokenHandler+WrappedSerializer */ 

(function WrappedSerializer$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
      Name: "System.IdentityModel.Tokens.Saml2SecurityTokenHandler+WrappedSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2SecurityTokenHandler"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadKeyIdentifierCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteKeyIdentifierCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadKeyIdentifierCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadTokenCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteKeyIdentifierCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTokenCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:false, Public:false}, "parent", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2SecurityTokenHandler"));

    $.Field({Static:false, Public:false}, "assertion", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Assertion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2SecurityTokenHandler+ReceivedEncryptingCredentials */ 

(function ReceivedEncryptingCredentials$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), 
      Name: "System.IdentityModel.Tokens.Saml2SecurityTokenHandler+ReceivedEncryptingCredentials", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), 
          $.String
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2SecurityTokenHandler+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2SecurityTokenHandler+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateAuthenticationStatement$gb__56_0", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.Claims.Claim")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateAuthenticationStatement$gb__56_1", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.Claims.Claim")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__56_0", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Claims.Claim"), $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__56_1", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Claims.Claim"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.IdentityModel.Tokens.Saml2Subject */ 

(function Saml2Subject$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2Subject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameId", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubjectConfirmations", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmation")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NameId", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"))
    );

    $.Field({Static:false, Public:false}, "nameId", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"));

    $.Field({Static:false, Public:false}, "subjectConfirmations", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmation")]));

    $.Property({Static:false, Public:true }, "NameId", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"));

    $.Property({Static:false, Public:true }, "SubjectConfirmations", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmation")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2SubjectConfirmation */ 

(function Saml2SubjectConfirmation$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2SubjectConfirmation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Uri"), $asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmationData")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameIdentifier", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubjectConfirmationData", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmationData"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Method", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NameIdentifier", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SubjectConfirmationData", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmationData"))
    );

    $.Field({Static:false, Public:false}, "data", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmationData"));

    $.Field({Static:false, Public:false}, "method", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "nameId", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"));

    $.Property({Static:false, Public:true }, "Method", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "NameIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2NameIdentifier"));

    $.Property({Static:false, Public:true }, "SubjectConfirmationData", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2SubjectConfirmationData"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2SubjectConfirmationData */ 

(function Saml2SubjectConfirmationData$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2SubjectConfirmationData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Address", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InResponseTo", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyIdentifiers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotBefore", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotOnOrAfter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Recipient", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Address", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InResponseTo", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NotBefore", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NotOnOrAfter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Recipient", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:false}, "address", $.String);

    $.Field({Static:false, Public:false}, "inResponseTo", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id"));

    $.Field({Static:false, Public:false}, "keyIdentifiers", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")]));

    $.Field({Static:false, Public:false}, "notBefore", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "notOnOrAfter", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "recipient", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "Address", $.String);

    $.Property({Static:false, Public:true }, "InResponseTo", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2Id"));

    $.Property({Static:false, Public:true }, "KeyIdentifiers", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")]));

    $.Property({Static:false, Public:true }, "NotBefore", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "NotOnOrAfter", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "Recipient", $asm0A.TypeRef("System.Uri"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.Saml2SubjectLocality */ 

(function Saml2SubjectLocality$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.Saml2SubjectLocality", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Address", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DnsName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Address", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DnsName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "address", $.String);

    $.Field({Static:false, Public:false}, "dnsName", $.String);

    $.Property({Static:false, Public:true }, "Address", $.String);

    $.Property({Static:false, Public:true }, "DnsName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.Tokens.SamlAccessDecision */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.Tokens.SamlAccessDecision", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Permit: 0, 
    Deny: 1, 
    Indeterminate: 2, 
  }
);

/* class System.IdentityModel.Tokens.SamlAction */ 

(function SamlAction$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlAction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckObjectValidity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Action", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Action", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "action", $.String);

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Action", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlAdvice */ 

(function SamlAdvice$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlAdvice", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion")]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssertionIdReferences", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assertions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "assertionIdReferences", $asm19.TypeRef("System.IdentityModel.ImmutableCollection`1", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "assertions", $asm19.TypeRef("System.IdentityModel.ImmutableCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion")]));

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "AssertionIdReferences", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]));

    $.Property({Static:false, Public:true }, "Assertions", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion")]));

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlAssertion */ 

(function SamlAssertion$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlAssertion", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.DateTime"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlConditions"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlAdvice"), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlStatement")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddSamlClaimTypes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildCryptoList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CaptureSourceData", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.EnvelopedSignatureReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckObjectValidity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Advice", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SamlAdvice"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssertionId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWriteSourceData", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Conditions", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SamlConditions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssueInstant", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Issuer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MajorVersion", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinorVersion", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Signature", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SignedXml"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SignatureVerificationKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningToken", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Statements", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlStatement")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAssertionIdValid", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSignature", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Advice", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlAdvice"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssertionId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Conditions", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlConditions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IssueInstant", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Issuer", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SigningCredentials", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SigningToken", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.ICanonicalWriterEndRootElementCallback.OnEndOfRootElement", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.XmlDictionaryWriter"))
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.ICanonicalWriterEndRootElementCallback"), "OnEndOfRootElement");

    $.ExternalMethod({Static:false, Public:false}, "VerifySignature", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.SignedXml"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSourceData", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTo", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false}, "assertionId", $.String);

    $.Field({Static:false, Public:false}, "issuer", $.String);

    $.Field({Static:false, Public:false}, "issueInstant", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "conditions", $asm19.TypeRef("System.IdentityModel.Tokens.SamlConditions"));

    $.Field({Static:false, Public:false}, "advice", $asm19.TypeRef("System.IdentityModel.Tokens.SamlAdvice"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "statements", $asm19.TypeRef("System.IdentityModel.ImmutableCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlStatement")]));

    $.Field({Static:false, Public:false}, "cryptoList", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Field({Static:false, Public:false}, "signature", $asm19.TypeRef("System.IdentityModel.SignedXml"));

    $.Field({Static:false, Public:false}, "signingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Field({Static:false, Public:false}, "verificationKey", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"));

    $.Field({Static:false, Public:false}, "signingToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Field({Static:false, Public:false}, "hashStream", $asm19.TypeRef("System.IdentityModel.HashStream"));

    $.Field({Static:false, Public:false}, "tokenStream", $asm19.TypeRef("System.IdentityModel.XmlTokenStream"));

    $.Field({Static:false, Public:false}, "keyInfoSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Field({Static:false, Public:false}, "dictionaryManager", $asm19.TypeRef("System.IdentityModel.DictionaryManager"));

    $.Field({Static:false, Public:false}, "sourceData", $asm19.TypeRef("System.IdentityModel.XmlTokenStream"));

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "MinorVersion", $.Int32);

    $.Property({Static:false, Public:true }, "MajorVersion", $.Int32);

    $.Property({Static:false, Public:true }, "AssertionId", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWriteSourceData", $.Boolean);

    $.Property({Static:false, Public:true }, "Issuer", $.String);

    $.Property({Static:false, Public:true }, "IssueInstant", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "Conditions", $asm19.TypeRef("System.IdentityModel.Tokens.SamlConditions"));

    $.Property({Static:false, Public:true }, "Advice", $asm19.TypeRef("System.IdentityModel.Tokens.SamlAdvice"));

    $.Property({Static:false, Public:true }, "Statements", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlStatement")]));

    $.Property({Static:false, Public:true }, "SigningCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Property({Static:false, Public:false}, "Signature", $asm19.TypeRef("System.IdentityModel.SignedXml"));

    $.Property({Static:false, Public:false}, "SignatureVerificationKey", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"));

    $.Property({Static:false, Public:true }, "SigningToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.ICanonicalWriterEndRootElementCallback")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause */ 

(function SamlAssertionKeyIdentifierClause$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.String, 
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssertionId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AuthorityKind", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Binding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Location", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "assertionId", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "valueType", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "tokenTypeUri", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "binding", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "location", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "authorityKind", $.String);

    $.Property({Static:false, Public:true }, "AssertionId", $.String);

    $.Property({Static:false, Public:false}, "TokenTypeUri", $.String);

    $.Property({Static:false, Public:false}, "ValueType", $.String);

    $.Property({Static:false, Public:false}, "Binding", $.String);

    $.Property({Static:false, Public:false}, "Location", $.String);

    $.Property({Static:false, Public:false}, "AuthorityKind", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlAttribute */ 

(function SamlAttribute$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Claims.Claim"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckObjectValidity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExtractClaims", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeValues", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeValueXsiType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginalIssuer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttributeValueXsiType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OriginalIssuer", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "nameSpace", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "attributeValues", $asm19.TypeRef("System.IdentityModel.ImmutableCollection`1", [$.String]));

    $.Field({Static:false, Public:false}, "originalIssuer", $.String);

    $.Field({Static:false, Public:false}, "attributeValueXsiType", $.String);

    $.Field({Static:false, Public:false}, "claims", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Field({Static:false, Public:false}, "claimType", $.String);

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "AttributeValues", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]));

    $.Property({Static:false, Public:true }, "OriginalIssuer", $.String);

    $.Property({Static:false, Public:true }, "AttributeValueXsiType", $.String);

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlAttributeKeyComparer */ 

(function SamlAttributeKeyComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlAttributeKeyComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAttributeKeyComparer+AttributeKey"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAttributeKeyComparer+AttributeKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAttributeKeyComparer+AttributeKey")])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAttributeKeyComparer+AttributeKey")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlAttributeKeyComparer+AttributeKey */ 

(function AttributeKey$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlAttributeKeyComparer+AttributeKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2Attribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeHashCode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FriendlyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameFormat", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OriginalIssuer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "_friendlyName", $.String);

    $.Field({Static:false, Public:false}, "_hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "_name", $.String);

    $.Field({Static:false, Public:false}, "_nameFormat", $.String);

    $.Field({Static:false, Public:false}, "_namespace", $.String);

    $.Field({Static:false, Public:false}, "_valueType", $.String);

    $.Field({Static:false, Public:false}, "_originalIssuer", $.String);

    $.Property({Static:false, Public:false}, "FriendlyName", $.String);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "NameFormat", $.String);

    $.Property({Static:false, Public:false}, "Namespace", $.String);

    $.Property({Static:false, Public:false}, "ValueType", $.String);

    $.Property({Static:false, Public:false}, "OriginalIssuer", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlStatement */ 

(function SamlStatement$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlStatement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePolicy", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy"), [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), $asm19.TypeRef("System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlSubjectStatement */ 

(function SamlSubjectStatement$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SamlStatement"), 
      Name: "System.IdentityModel.Tokens.SamlSubjectStatement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddClaimsToList", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePolicy", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy"), [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), $asm19.TypeRef("System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SamlSubject", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SamlSubject", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSubject", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"))
    );

    $.Field({Static:false, Public:false}, "subject", $asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"));

    $.Field({Static:false, Public:false}, "policy", $asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy"));

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "SamlSubject", $asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlAttributeStatement */ 

(function SamlAttributeStatement$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SamlSubjectStatement"), 
      Name: "System.IdentityModel.Tokens.SamlAttributeStatement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddClaimsToList", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckObjectValidity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "attributes", $asm19.TypeRef("System.IdentityModel.ImmutableCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute")]));

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Attributes", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute")]));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlCondition */ 

(function SamlCondition$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlCondition", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlAudienceRestrictionCondition */ 

(function SamlAudienceRestrictionCondition$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SamlCondition"), 
      Name: "System.IdentityModel.Tokens.SamlAudienceRestrictionCondition", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckObjectValidity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Audiences", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Uri")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "audiences", $asm19.TypeRef("System.IdentityModel.ImmutableCollection`1", [$asm0A.TypeRef("System.Uri")]));

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Audiences", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Uri")]));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlAuthenticationClaimResource */ 

(function SamlAuthenticationClaimResource$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlAuthenticationClaimResource", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.DateTime"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.DateTime"), $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.DateTime"), $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationInstant", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthorityBindings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DnsAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IPAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SamlAuthorityBindings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDeserialized", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.Serialization.StreamingContext"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.Serialization.OnDeserializedAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_SamlAuthorityBindings", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding")]))
    );

    $.Field({Static:false, Public:false}, "authenticationInstant", $asm07.TypeRef("System.DateTime"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "authenticationMethod", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "authorityBindings", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding")]));

    $.Field({Static:false, Public:false}, "dnsAddress", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "ipAddress", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:true }, "AuthenticationInstant", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "AuthenticationMethod", $.String);

    $.Property({Static:false, Public:true }, "AuthorityBindings", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding")]));

    $.Property({Static:false, Public:false}, "SamlAuthorityBindings", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding")]))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:true }, "IPAddress", $.String);

    $.Property({Static:false, Public:true }, "DnsAddress", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class System.IdentityModel.Tokens.SamlAuthenticationStatement */ 

(function SamlAuthenticationStatement$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SamlSubjectStatement"), 
      Name: "System.IdentityModel.Tokens.SamlAuthenticationStatement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"), $.String, 
          $asm07.TypeRef("System.DateTime"), $.String, 
          $.String, $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddClaimsToList", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckObjectValidity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationInstant", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthorityBindings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ClaimType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DnsAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IPAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AuthenticationInstant", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AuthenticationMethod", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DnsAddress", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IPAddress", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false}, "authenticationInstant", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "authenticationMethod", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "authorityBindings", $asm19.TypeRef("System.IdentityModel.ImmutableCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding")]));

    $.Field({Static:false, Public:false}, "dnsAddress", $.String);

    $.Field({Static:false, Public:false}, "ipAddress", $.String);

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "AuthenticationInstant", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "AuthenticationMethod", $.String);

    $.Property({Static:true , Public:true }, "ClaimType", $.String);

    $.Property({Static:false, Public:true }, "AuthorityBindings", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding")]));

    $.Property({Static:false, Public:true }, "DnsAddress", $.String);

    $.Property({Static:false, Public:true }, "IPAddress", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlAuthorityBinding */ 

(function SamlAuthorityBinding$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlAuthorityBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlQualifiedName"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckObjectValidity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthorityKind", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AuthorityKind", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Binding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false}, "authorityKind", $asm2F.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "binding", $.String);

    $.Field({Static:false, Public:false}, "location", $.String);

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:true }, "AuthorityKind", $asm2F.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:true }, "Binding", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:true }, "Location", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource */ 

(function SamlAuthorizationDecisionClaimResource$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AccessDecision", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActionName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActionNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Resource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDeserialized", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.Serialization.StreamingContext"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.Serialization.OnDeserializedAttribute"));

    $.Field({Static:false, Public:false}, "resource", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "accessDecision", $asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "actionNamespace", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "actionName", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:true }, "Resource", $.String);

    $.Property({Static:false, Public:true }, "AccessDecision", $asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"));

    $.Property({Static:false, Public:true }, "ActionNamespace", $.String);

    $.Property({Static:false, Public:true }, "ActionName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement */ 

(function SamlAuthorizationDecisionStatement$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SamlSubjectStatement"), 
      Name: "System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"), $.String, 
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAction")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"), $.String, 
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAction")]), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlEvidence")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddClaimsToList", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckObjectValidity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AccessDecision", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ClaimType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Evidence", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SamlEvidence"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Resource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SamlActions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAction")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AccessDecision", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Evidence", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlEvidence"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Resource", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false}, "evidence", $asm19.TypeRef("System.IdentityModel.Tokens.SamlEvidence"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "actions", $asm19.TypeRef("System.IdentityModel.ImmutableCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAction")]));

    $.Field({Static:false, Public:false}, "accessDecision", $asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"));

    $.Field({Static:false, Public:false}, "resource", $.String);

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:true , Public:true }, "ClaimType", $.String);

    $.Property({Static:false, Public:true }, "SamlActions", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAction")]));

    $.Property({Static:false, Public:true }, "AccessDecision", $asm19.TypeRef("System.IdentityModel.Tokens.SamlAccessDecision"));

    $.Property({Static:false, Public:true }, "Evidence", $asm19.TypeRef("System.IdentityModel.Tokens.SamlEvidence"));

    $.Property({Static:false, Public:true }, "Resource", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlConditions */ 

(function SamlConditions$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlConditions", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.DateTime"), 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlCondition")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Conditions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlCondition")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotBefore", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotOnOrAfter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NotBefore", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NotOnOrAfter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "conditions", $asm19.TypeRef("System.IdentityModel.ImmutableCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlCondition")]));

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "notBefore", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "notOnOrAfter", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "Conditions", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlCondition")]));

    $.Property({Static:false, Public:true }, "NotBefore", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "NotOnOrAfter", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlConstants */ 

(function SamlConstants$Members () {
  var $, $thisType;










  JSIL.MakeStaticClass("System.IdentityModel.Tokens.SamlConstants", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_EmailName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EmailNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_HolderOfKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MajorVersionValue", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MinorVersionValue", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SenderVouches", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UserName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UserNameNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "saml");

    $.Field({Static:true , Public:false}, "AcceptedDateTimeFormats", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Constant({Static:true , Public:false}, "AssertionIdPrefix", $.String, "SamlSecurityToken-");

    $.Constant({Static:true , Public:false}, "GeneratedDateTimeFormat", $.String, "yyyy-MM-ddTHH:mm:ss.fffZ");

    $.Property({Static:true , Public:true }, "MajorVersionValue", $.Int32);

    $.Property({Static:true , Public:true }, "MinorVersionValue", $.Int32);

    $.Property({Static:true , Public:true }, "Namespace", $.String);

    $.Property({Static:true , Public:true }, "HolderOfKey", $.String);

    $.Property({Static:true , Public:true }, "SenderVouches", $.String);

    $.Property({Static:true , Public:true }, "UserName", $.String);

    $.Property({Static:true , Public:true }, "UserNameNamespace", $.String);

    $.Property({Static:true , Public:true }, "EmailName", $.String);

    $.Property({Static:true , Public:true }, "EmailNamespace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlConstants+AuthenticationMethods */ 

(function AuthenticationMethods$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.SamlConstants+AuthenticationMethods", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "HardwareTokenString", $.String, "URI:urn:oasis:names:tc:SAML:1.0:am:HardwareToken");

    $.Constant({Static:true , Public:true }, "KerberosString", $.String, "urn:ietf:rfc:1510");

    $.Constant({Static:true , Public:true }, "PasswordString", $.String, "urn:oasis:names:tc:SAML:1.0:am:password");

    $.Constant({Static:true , Public:true }, "PgpString", $.String, "urn:oasis:names:tc:SAML:1.0:am:PGP");

    $.Constant({Static:true , Public:true }, "SecureRemotePasswordString", $.String, "urn:ietf:rfc:2945");

    $.Constant({Static:true , Public:true }, "SignatureString", $.String, "urn:ietf:rfc:3075");

    $.Constant({Static:true , Public:true }, "SpkiString", $.String, "urn:oasis:names:tc:SAML:1.0:am:SPKI");

    $.Constant({Static:true , Public:true }, "TlsClientString", $.String, "urn:ietf:rfc:2246");

    $.Constant({Static:true , Public:true }, "UnspecifiedString", $.String, "urn:oasis:names:tc:SAML:1.0:am:unspecified");

    $.Constant({Static:true , Public:true }, "WindowsString", $.String, "urn:federation:authentication:windows");

    $.Constant({Static:true , Public:true }, "X509String", $.String, "urn:oasis:names:tc:SAML:1.0:am:X509-PKI");

    $.Constant({Static:true , Public:true }, "XkmsString", $.String, "urn:oasis:names:tc:SAML:1.0:am:XKMS");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlConstants+ElementNames */ 

(function ElementNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.SamlConstants+ElementNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Action", $.String, "Action");

    $.Constant({Static:true , Public:true }, "Advice", $.String, "Advice");

    $.Constant({Static:true , Public:true }, "Assertion", $.String, "Assertion");

    $.Constant({Static:true , Public:true }, "AssertionIdReference", $.String, "AssertionIDReference");

    $.Constant({Static:true , Public:true }, "Attribute", $.String, "Attribute");

    $.Constant({Static:true , Public:true }, "AttributeStatement", $.String, "AttributeStatement");

    $.Constant({Static:true , Public:true }, "AttributeValue", $.String, "AttributeValue");

    $.Constant({Static:true , Public:true }, "Audience", $.String, "Audience");

    $.Constant({Static:true , Public:true }, "AudienceRestrictionCondition", $.String, "AudienceRestrictionCondition");

    $.Constant({Static:true , Public:true }, "AuthenticationStatement", $.String, "AuthenticationStatement");

    $.Constant({Static:true , Public:true }, "AuthorityBinding", $.String, "AuthorityBinding");

    $.Constant({Static:true , Public:true }, "AuthorizationDecisionStatement", $.String, "AuthorizationDecisionStatement");

    $.Constant({Static:true , Public:true }, "Conditions", $.String, "Conditions");

    $.Constant({Static:true , Public:true }, "DoNotCacheCondition", $.String, "DoNotCacheCondition");

    $.Constant({Static:true , Public:true }, "Evidence", $.String, "Evidence");

    $.Constant({Static:true , Public:true }, "NameIdentifier", $.String, "NameIdentifier");

    $.Constant({Static:true , Public:true }, "SubjectConfirmation", $.String, "SubjectConfirmation");

    $.Constant({Static:true , Public:true }, "Subject", $.String, "Subject");

    $.Constant({Static:true , Public:true }, "SubjectConfirmationData", $.String, "SubjectConfirmationData");

    $.Constant({Static:true , Public:true }, "SubjectConfirmationMethod", $.String, "ConfirmationMethod");

    $.Constant({Static:true , Public:true }, "SubjectLocality", $.String, "SubjectLocality");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlConstants+AttributeNames */ 

(function AttributeNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.SamlConstants+AttributeNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "AssertionId", $.String, "AssertionID");

    $.Constant({Static:true , Public:true }, "AttributeName", $.String, "AttributeName");

    $.Constant({Static:true , Public:true }, "AttributeNamespace", $.String, "AttributeNamespace");

    $.Constant({Static:true , Public:true }, "AuthenticationInstant", $.String, "AuthenticationInstant");

    $.Constant({Static:true , Public:true }, "AuthenticationMethod", $.String, "AuthenticationMethod");

    $.Constant({Static:true , Public:true }, "AuthorityBinding", $.String, "AuthorityBinding");

    $.Constant({Static:true , Public:true }, "AuthorityKind", $.String, "AuthorityKind");

    $.Constant({Static:true , Public:true }, "Binding", $.String, "Binding");

    $.Constant({Static:true , Public:true }, "Decision", $.String, "Decision");

    $.Constant({Static:true , Public:true }, "Issuer", $.String, "Issuer");

    $.Constant({Static:true , Public:true }, "IssueInstant", $.String, "IssueInstant");

    $.Constant({Static:true , Public:true }, "Location", $.String, "Location");

    $.Constant({Static:true , Public:true }, "MajorVersion", $.String, "MajorVersion");

    $.Constant({Static:true , Public:true }, "MinorVersion", $.String, "MinorVersion");

    $.Constant({Static:true , Public:true }, "OriginalIssuer", $.String, "OriginalIssuer");

    $.Constant({Static:true , Public:true }, "NamespaceAttributePrefix", $.String, "xmlns");

    $.Constant({Static:true , Public:true }, "NameIdentifierFormat", $.String, "Format");

    $.Constant({Static:true , Public:true }, "NameIdentifierNameQualifier", $.String, "NameQualifier");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "Namespace");

    $.Constant({Static:true , Public:true }, "NotBefore", $.String, "NotBefore");

    $.Constant({Static:true , Public:true }, "NotOnOrAfter", $.String, "NotOnOrAfter");

    $.Constant({Static:true , Public:true }, "Resource", $.String, "Resource");

    $.Constant({Static:true , Public:true }, "SubjectLocalityDNSAddress", $.String, "DNSAddress");

    $.Constant({Static:true , Public:true }, "SubjectLocalityIPAddress", $.String, "IPAddress");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlDoNotCacheCondition */ 

(function SamlDoNotCacheCondition$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SamlCondition"), 
      Name: "System.IdentityModel.Tokens.SamlDoNotCacheCondition", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlEvidence */ 

(function SamlEvidence$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlEvidence", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion")]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckObjectValidity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssertionIdReferences", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assertions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "assertionIdReferences", $asm19.TypeRef("System.IdentityModel.ImmutableCollection`1", [$.String]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "assertions", $asm19.TypeRef("System.IdentityModel.ImmutableCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion")]));

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "AssertionIdReferences", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]));

    $.Property({Static:false, Public:true }, "Assertions", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion")]));

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlNameIdentifierClaimResource */ 

(function SamlNameIdentifierClaimResource$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlNameIdentifierClaimResource", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Format", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameQualifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDeserialized", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.Serialization.StreamingContext"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.Serialization.OnDeserializedAttribute"));

    $.Field({Static:false, Public:false}, "nameQualifier", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "format", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "$name", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:true }, "NameQualifier", $.String);

    $.Property({Static:false, Public:true }, "Format", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause */ 

(function SamlSecurityKeyIdentifierClause$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.SamlSecurityKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assertion", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"))
    );

    $.Field({Static:false, Public:false}, "assertion", $asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"));

    $.Property({Static:false, Public:true }, "Assertion", $asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlSecurityToken */ 

(function SamlSecurityToken$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
      Name: "System.IdentityModel.Tokens.SamlSecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanCreateKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKeyIdentifierClause", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assertion", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchesKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "assertion", $asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Property({Static:false, Public:true }, "Assertion", $asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlSecurityTokenHandler */ 

(function SamlSecurityTokenHandler$Members () {
  var $, $thisType;
























































































  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"), 
      Name: "System.IdentityModel.Tokens.SamlSecurityTokenHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityTokenRequirement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddDelegateToAttributes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute")]), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadToken", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CollectAttributeValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute")]), [$asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAdvice", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAdvice"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAssertion", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"), [
          $.String, $asm19.TypeRef("System.IdentityModel.Tokens.SamlConditions"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlAdvice"), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlStatement")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAttribute", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute"), [$asm07.TypeRef("System.Security.Claims.Claim"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAttributeStatement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAttributeStatement"), [
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"), $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateAuthenticationStatement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthenticationStatement"), [
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"), $asm19.TypeRef("System.Security.Claims.AuthenticationInformation"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateClaims", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), [$asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateConditions", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlConditions"), [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime"), $.String, 
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSamlSubject", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSecurityTokenReference", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateStatements", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlStatement")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateWindowsIdentity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.WindowsIdentity"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateXmlStringFromAttributes", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DenormalizeAuthenticationType", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DetectReplayedToken", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindUpn", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanValidateToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWriteToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateValidator", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyInfoSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SamlSecurityTokenRequirement", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityTokenRequirement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClaim", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.Claim"), [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEncryptingCredentials", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSigningCredentials", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenReplayCacheEntryExpirationTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeIdentifiers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCustomConfiguration", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "NormalizeAuthenticationType", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessAttributeStatement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlAttributeStatement"), $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessAuthenticationStatement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthenticationStatement"), $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessAuthorizationDecisionStatement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement"), $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessSamlSubject", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"), $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessStatement", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlStatement")]), $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAction", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAction"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAdvice", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAdvice"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAssertion", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAttribute", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAttributeStatement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAttributeStatement"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAudienceRestrictionCondition", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAudienceRestrictionCondition"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAuthenticationStatement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthenticationStatement"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAuthorityBinding", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAuthorizationDecisionStatement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadCondition", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlCondition"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadConditions", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlConditions"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadDoNotCacheCondition", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlDoNotCacheCondition"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadEvidence", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlEvidence"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSigningKeyInfo", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadStatement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlStatement"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSubject", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSubjectKeyInfo", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveIssuerToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveSubjectKeyIdentifier", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateValidator", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyInfoSerializer", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SamlSecurityTokenRequirement", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityTokenRequirement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetDelegateFromAttribute", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute"), $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveIssuerToken", 
      new JSIL.MethodSignature($.Boolean, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateConditions", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.SamlConditions"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateStatements", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SamlStatement")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAction", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAction")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAdvice", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAdvice")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAssertion", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAttribute", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAttributeStatement", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAttributeStatement")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAttributeValue", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String, 
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAudienceRestrictionCondition", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAudienceRestrictionCondition")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAuthenticationStatement", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthenticationStatement")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAuthorityBinding", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorityBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteAuthorizationDecisionStatement", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteCondition", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlCondition")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteConditions", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlConditions")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDoNotCacheCondition", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlDoNotCacheCondition")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEvidence", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlEvidence")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSigningKeyInfo", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteStatement", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlStatement")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSubject", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSubject")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSubjectKeyInfo", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteToken", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "urn:oasis:names:tc:SAML:1.0");

    $.Constant({Static:true , Public:true }, "BearerConfirmationMethod", $.String, "urn:oasis:names:tc:SAML:1.0:cm:bearer");

    $.Constant({Static:true , Public:true }, "UnspecifiedAuthenticationMethod", $.String, "urn:oasis:names:tc:SAML:1.0:am:unspecified");

    $.Constant({Static:true , Public:true }, "Assertion", $.String, "urn:oasis:names:tc:SAML:1.0:assertion");

    $.Constant({Static:true , Public:false}, "Attribute", $.String, "saml:Attribute");

    $.Constant({Static:true , Public:false}, "Actor", $.String, "Actor");

    $.Constant({Static:true , Public:false}, "ClaimType2009Namespace", $.String, "http://schemas.xmlsoap.org/ws/2009/09/identity/claims");

    $.Field({Static:true , Public:false}, "WCFMinValue", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false}, "WCFMaxValue", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:true , Public:false}, "_tokenTypeIdentifiers", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "_samlSecurityTokenRequirement", $asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityTokenRequirement"));

    $.Field({Static:false, Public:false}, "_keyInfoSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Field({Static:false, Public:false}, "_syncObject", $.Object);


    function SamlSecurityTokenHandler__cctor () {
      $thisType.WCFMinValue = new $asm07.System.DateTime();
      $thisType.WCFMaxValue = new $asm07.System.DateTime();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SamlSecurityTokenHandler__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CanValidateToken", $.Boolean);

    $.Property({Static:false, Public:true }, "CertificateValidator", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanWriteToken", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyInfoSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "SamlSecurityTokenRequirement", $asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityTokenRequirement"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlSecurityTokenHandler+WrappedSerializer */ 

(function WrappedSerializer$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
      Name: "System.IdentityModel.Tokens.SamlSecurityTokenHandler+WrappedSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityTokenHandler"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadKeyIdentifierCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteKeyIdentifierCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadKeyIdentifierCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadTokenCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteKeyIdentifierCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTokenCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:false, Public:false}, "_parent", $asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityTokenHandler"));

    $.Field({Static:false, Public:false}, "_assertion", $asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlSecurityTokenHandler+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlSecurityTokenHandler+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateAuthenticationStatement$gb__24_0", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.Claims.Claim")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateAuthenticationStatement$gb__24_1", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.Claims.Claim")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__24_0", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Claims.Claim"), $.Boolean]));

    $.Field({Static:true , Public:true }, "$l$g9__24_1", $asm07.TypeRef("System.Func`2", [$asm07.TypeRef("System.Security.Claims.Claim"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.IdentityModel.Tokens.SamlSecurityTokenRequirement */ 

(function SamlSecurityTokenRequirement$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlSecurityTokenRequirement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateValidator", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MapToWindows", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameClaimType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RoleClaimType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateValidator", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MapToWindows", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NameClaimType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RoleClaimType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldEnforceAudienceRestriction", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateAudienceRestriction", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Uri")]), $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm0A.TypeRef("System.Uri")])])
    );

    $.Field({Static:true , Public:false}, "DefaultRevocationMode", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"), function ($pi) {
        return $asm0A.System.Security.Cryptography.X509Certificates.X509RevocationMode.Online;
      });

    $.Field({Static:true , Public:false}, "DefaultValidationMode", $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"), function ($pi) {
        return $asm19.System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust;
      });

    $.Field({Static:true , Public:false}, "DefaultStoreLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"), function ($pi) {
        return $asm0A.System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine;
      });

    $.Field({Static:false, Public:false}, "_nameClaimType", $.String);

    $.Field({Static:false, Public:false}, "_roleClaimType", $.String);

    $.Field({Static:false, Public:false}, "_mapToWindows", $.Boolean);

    $.Field({Static:false, Public:false}, "_certificateValidator", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.Property({Static:false, Public:true }, "CertificateValidator", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.Property({Static:false, Public:true }, "NameClaimType", $.String);

    $.Property({Static:false, Public:true }, "RoleClaimType", $.String);

    $.Property({Static:false, Public:true }, "MapToWindows", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlSerializer */ 

(function SamlSerializer$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DictionaryManager", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.DictionaryManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadAdvice", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAdvice"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadAssertion", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertion"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadAttribute", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlAttribute"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCondition", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlCondition"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadConditions", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlConditions"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadStatement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlStatement"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "PopulateDictionary", 
      JSIL.MethodSignature.Action($asm21.TypeRef("System.Xml.IXmlDictionary"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadSecurityKeyIdentifier", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityToken"), [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveSecurityKey", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveSecurityToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteSecurityKeyIdentifier", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteToken", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityToken"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false}, "dictionaryManager", $asm19.TypeRef("System.IdentityModel.DictionaryManager"));

    $.Property({Static:false, Public:false}, "DictionaryManager", $asm19.TypeRef("System.IdentityModel.DictionaryManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SamlSubject */ 

(function SamlSubject$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SamlSubject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), 
          $.String, $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckObjectValidity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExtractClaims", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExtractSubjectKeyClaimSet", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), [$asm19.TypeRef("System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConfirmationMethods", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Crypto", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Identity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.IIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyIdentifier", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_NameClaimType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameFormat", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameQualifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubjectConfirmationData", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Crypto", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyIdentifier", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NameFormat", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NameQualifier", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SubjectConfirmationData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SamlSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer")
        ])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "confirmationMethods", $asm19.TypeRef("System.IdentityModel.ImmutableCollection`1", [$.String]));

    $.Field({Static:false, Public:false}, "confirmationData", $.String);

    $.Field({Static:false, Public:false}, "securityKeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Field({Static:false, Public:false}, "crypto", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"));

    $.Field({Static:false, Public:false}, "subjectToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "nameFormat", $.String);

    $.Field({Static:false, Public:false}, "nameQualifier", $.String);

    $.Field({Static:false, Public:false}, "claims", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Field({Static:false, Public:false}, "identity", $asm07.TypeRef("System.Security.Principal.IIdentity"));

    $.Field({Static:false, Public:false}, "subjectKeyClaimset", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"));

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "NameFormat", $.String);

    $.Property({Static:false, Public:true }, "NameQualifier", $.String);

    $.Property({Static:true , Public:true }, "NameClaimType", $.String);

    $.Property({Static:false, Public:true }, "ConfirmationMethods", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]));

    $.Property({Static:false, Public:false}, "Identity", $asm07.TypeRef("System.Security.Principal.IIdentity"));

    $.Property({Static:false, Public:true }, "SubjectConfirmationData", $.String);

    $.Property({Static:false, Public:true }, "KeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Property({Static:false, Public:true }, "Crypto", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"));

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SctAuthorizationPolicy */ 

(function SctAuthorizationPolicy$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SctAuthorizationPolicy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Claims.Claim"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IAuthorizationComponent.get_Id", 
      JSIL.MethodSignature.Return($.String)
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationComponent"), "get_Id");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Policy.EvaluationContext"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy"), "Evaluate");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IAuthorizationPolicy.get_Issuer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"))
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy"), "get_Issuer");

    $.Field({Static:false, Public:false}, "_issuer", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"));

    $.Field({Static:false, Public:false}, "_id", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IAuthorizationPolicy.Issuer", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IAuthorizationComponent.Id", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy"), 
      /* 1 */ $asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationComponent")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityAlgorithms */ 

(function SecurityAlgorithms$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.SecurityAlgorithms", true, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Aes128Encryption", $.String, "http://www.w3.org/2001/04/xmlenc#aes128-cbc");

    $.Constant({Static:true , Public:true }, "Aes128KeyWrap", $.String, "http://www.w3.org/2001/04/xmlenc#kw-aes128");

    $.Constant({Static:true , Public:true }, "Aes192Encryption", $.String, "http://www.w3.org/2001/04/xmlenc#aes192-cbc");

    $.Constant({Static:true , Public:true }, "Aes192KeyWrap", $.String, "http://www.w3.org/2001/04/xmlenc#kw-aes192");

    $.Constant({Static:true , Public:true }, "Aes256Encryption", $.String, "http://www.w3.org/2001/04/xmlenc#aes256-cbc");

    $.Constant({Static:true , Public:true }, "Aes256KeyWrap", $.String, "http://www.w3.org/2001/04/xmlenc#kw-aes256");

    $.Constant({Static:true , Public:true }, "DesEncryption", $.String, "http://www.w3.org/2001/04/xmlenc#des-cbc");

    $.Constant({Static:true , Public:true }, "DsaSha1Signature", $.String, "http://www.w3.org/2000/09/xmldsig#dsa-sha1");

    $.Constant({Static:true , Public:true }, "ExclusiveC14n", $.String, "http://www.w3.org/2001/10/xml-exc-c14n#");

    $.Constant({Static:true , Public:true }, "ExclusiveC14nWithComments", $.String, "http://www.w3.org/2001/10/xml-exc-c14n#WithComments");

    $.Constant({Static:true , Public:true }, "HmacSha1Signature", $.String, "http://www.w3.org/2000/09/xmldsig#hmac-sha1");

    $.Constant({Static:true , Public:true }, "HmacSha256Signature", $.String, "http://www.w3.org/2001/04/xmldsig-more#hmac-sha256");

    $.Constant({Static:true , Public:true }, "Psha1KeyDerivation", $.String, "http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1");

    $.Constant({Static:true , Public:true }, "Psha1KeyDerivationDec2005", $.String, "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/dk/p_sha1");

    $.Constant({Static:true , Public:true }, "Ripemd160Digest", $.String, "http://www.w3.org/2001/04/xmlenc#ripemd160");

    $.Constant({Static:true , Public:true }, "RsaOaepKeyWrap", $.String, "http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p");

    $.Constant({Static:true , Public:true }, "RsaSha1Signature", $.String, "http://www.w3.org/2000/09/xmldsig#rsa-sha1");

    $.Constant({Static:true , Public:true }, "RsaSha256Signature", $.String, "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256");

    $.Constant({Static:true , Public:true }, "RsaV15KeyWrap", $.String, "http://www.w3.org/2001/04/xmlenc#rsa-1_5");

    $.Constant({Static:true , Public:true }, "Sha1Digest", $.String, "http://www.w3.org/2000/09/xmldsig#sha1");

    $.Constant({Static:true , Public:true }, "Sha256Digest", $.String, "http://www.w3.org/2001/04/xmlenc#sha256");

    $.Constant({Static:true , Public:true }, "Sha512Digest", $.String, "http://www.w3.org/2001/04/xmlenc#sha512");

    $.Constant({Static:true , Public:true }, "StrTransform", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#STR-Transform");

    $.Constant({Static:true , Public:true }, "TripleDesEncryption", $.String, "http://www.w3.org/2001/04/xmlenc#tripledes-cbc");

    $.Constant({Static:true , Public:true }, "TripleDesKeyWrap", $.String, "http://www.w3.org/2001/04/xmlenc#kw-tripledes");

    $.Constant({Static:true , Public:true }, "TlsSspiKeyWrap", $.String, "http://schemas.xmlsoap.org/2005/02/trust/tlsnego#TLS_Wrap");

    $.Constant({Static:true , Public:true }, "WindowsSspiKeyWrap", $.String, "http://schemas.xmlsoap.org/2005/02/trust/spnego#GSS_Wrap");

    $.Constant({Static:true , Public:false}, "DefaultSymmetricKeyLength", $.Int32, 256);

    $.Constant({Static:true , Public:false}, "DefaultEncryptionAlgorithm", $.String, "http://www.w3.org/2001/04/xmlenc#aes256-cbc");

    $.Constant({Static:true , Public:false}, "DefaultAsymmetricKeyWrapAlgorithm", $.String, "http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p");

    $.Constant({Static:true , Public:false}, "DefaultAsymmetricSignatureAlgorithm", $.String, "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256");

    $.Constant({Static:true , Public:false}, "DefaultDigestAlgorithm", $.String, "http://www.w3.org/2001/04/xmlenc#sha256");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityKeyElement */ 

(function SecurityKeyElement$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"), 
      Name: "System.IdentityModel.Tokens.SecurityKeyElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsAsymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSupportedAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveKey", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_securityKey", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"));

    $.Field({Static:false, Public:false}, "_keyLock", $.Object);

    $.Field({Static:false, Public:false}, "_securityTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Field({Static:false, Public:false}, "_securityKeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityKeyIdentifier */ 

(function SecurityKeyIdentifier$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SecurityKeyIdentifier", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")]))
    )
      .Parameter(0, "clauses", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature("!!0", null, ["TClause"])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanCreateKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeReadOnly", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "TryFind", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["TClause"])
    );

    $.Constant({Static:true , Public:false}, "InitialSize", $.Int32, 2);

    $.Field({Static:false, Public:false, ReadOnly:true }, "clauses", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")]));

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"));

    $.Property({Static:false, Public:true }, "CanCreateKey", $.Boolean);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer */ 

(function SecurityKeyIdentifierClauseSerializer$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanWriteKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClause", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.Tokens.SecurityKeyType */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.Tokens.SecurityKeyType", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    SymmetricKey: 0, 
    AsymmetricKey: 1, 
    BearerKey: 2, 
  }
);

/* class System.IdentityModel.Tokens.SecurityKeyTypeHelper */ 

(function SecurityKeyTypeHelper$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.IdentityModel.Tokens.SecurityKeyTypeHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Validate", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyType"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.Tokens.SecurityKeyUsage */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.Tokens.SecurityKeyUsage", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Exchange: 0, 
    Signature: 1, 
  }
);

/* class System.IdentityModel.Tokens.SecurityKeyUsageHelper */ 

(function SecurityKeyUsageHelper$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.IdentityModel.Tokens.SecurityKeyUsageHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyUsage")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Validate", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyUsage"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityTokenDescriptor */ 

(function SecurityTokenDescriptor$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SecurityTokenDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAuthenticationClaims", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAuthenticationClaims", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ApplyTo", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AppliesToAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttachedReference", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationInfo", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.Security.Claims.AuthenticationInformation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncryptingCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Lifetime", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Proof", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.ProofDescriptor"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReplyToAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Subject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Claims.ClaimsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Token", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenIssuerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnattachedReference", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AppliesToAddress", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttachedReference", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AuthenticationInfo", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.Security.Claims.AuthenticationInformation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EncryptingCredentials", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Lifetime", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Proof", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.ProofDescriptor"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReplyToAddress", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SigningCredentials", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Subject", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Claims.ClaimsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Token", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TokenIssuerName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TokenType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnattachedReference", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"))
    );

    $.Field({Static:false, Public:false}, "attachedReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"));

    $.Field({Static:false, Public:false}, "authenticationInfo", $asm19.TypeRef("System.Security.Claims.AuthenticationInformation"));

    $.Field({Static:false, Public:false}, "tokenIssuerName", $.String);

    $.Field({Static:false, Public:false}, "proofDescriptor", $asm19.TypeRef("System.IdentityModel.Tokens.ProofDescriptor"));

    $.Field({Static:false, Public:false}, "subject", $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"));

    $.Field({Static:false, Public:false}, "token", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Field({Static:false, Public:false}, "tokenType", $.String);

    $.Field({Static:false, Public:false}, "unattachedReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"));

    $.Field({Static:false, Public:false}, "lifetime", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime"));

    $.Field({Static:false, Public:false}, "appliesToAddress", $.String);

    $.Field({Static:false, Public:false}, "replyToAddress", $.String);

    $.Field({Static:false, Public:false}, "encryptingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Field({Static:false, Public:false}, "signingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Field({Static:false, Public:false}, "properties", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Property({Static:false, Public:true }, "AppliesToAddress", $.String);

    $.Property({Static:false, Public:true }, "ReplyToAddress", $.String);

    $.Property({Static:false, Public:true }, "EncryptingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Property({Static:false, Public:true }, "SigningCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Property({Static:false, Public:true }, "AttachedReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"));

    $.Property({Static:false, Public:true }, "TokenIssuerName", $.String);

    $.Property({Static:false, Public:true }, "Proof", $asm19.TypeRef("System.IdentityModel.Tokens.ProofDescriptor"));

    $.Property({Static:false, Public:true }, "Properties", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Property({Static:false, Public:true }, "Token", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true }, "TokenType", $.String);

    $.Property({Static:false, Public:true }, "UnattachedReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"));

    $.Property({Static:false, Public:true }, "Lifetime", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime"));

    $.Property({Static:false, Public:true }, "Subject", $asm07.TypeRef("System.Security.Claims.ClaimsIdentity"));

    $.Property({Static:false, Public:true }, "AuthenticationInfo", $asm19.TypeRef("System.Security.Claims.AuthenticationInformation"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityTokenElement */ 

(function SecurityTokenElement$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SecurityTokenElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlElement"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenXml", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIdentities", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSecurityToken", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSecurityToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlElement"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]), [$asm2F.TypeRef("System.Xml.XmlElement"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection")])
    );

    $.Field({Static:false, Public:false}, "_securityToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Field({Static:false, Public:false}, "_securityTokenXml", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Field({Static:false, Public:false}, "_securityTokenHandlers", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"));

    $.Field({Static:false, Public:false}, "_subject", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]));

    $.Property({Static:false, Public:true }, "SecurityTokenXml", $asm2F.TypeRef("System.Xml.XmlElement"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityTokenExpiredException */ 

(function SecurityTokenExpiredException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenValidationException"), 
      Name: "System.IdentityModel.Tokens.SecurityTokenExpiredException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityTokenNotYetValidException */ 

(function SecurityTokenNotYetValidException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenValidationException"), 
      Name: "System.IdentityModel.Tokens.SecurityTokenNotYetValidException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityTokenReplayDetectedException */ 

(function SecurityTokenReplayDetectedException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenValidationException"), 
      Name: "System.IdentityModel.Tokens.SecurityTokenReplayDetectedException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityTokenTypes */ 

(function SecurityTokenTypes$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.IdentityModel.Tokens.SecurityTokenTypes", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_Kerberos", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Rsa", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Saml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UserName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_X509Certificate", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "Namespace", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/tokens");

    $.Constant({Static:true , Public:false}, "userName", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/tokens/UserName");

    $.Constant({Static:true , Public:false}, "x509Certificate", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/tokens/X509Certificate");

    $.Constant({Static:true , Public:false}, "kerberos", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/tokens/Kerberos");

    $.Constant({Static:true , Public:false}, "saml", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/tokens/Saml");

    $.Constant({Static:true , Public:false}, "rsa", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/tokens/Rsa");

    $.Constant({Static:true , Public:false}, "SamlTokenProfile11", $.String, "urn:oasis:names:tc:SAML:1.0:assertion");

    $.Constant({Static:true , Public:false}, "Saml2TokenProfile11", $.String, "urn:oasis:names:tc:SAML:2.0:assertion");

    $.Constant({Static:true , Public:false}, "OasisWssSamlTokenProfile11", $.String, "http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1");

    $.Constant({Static:true , Public:false}, "OasisWssSaml2TokenProfile11", $.String, "http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0");

    $.Property({Static:true , Public:true }, "UserName", $.String);

    $.Property({Static:true , Public:true }, "X509Certificate", $.String);

    $.Property({Static:true , Public:true }, "Kerberos", $.String);

    $.Property({Static:true , Public:true }, "Saml", $.String);

    $.Property({Static:true , Public:true }, "Rsa", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SigningCredentials */ 

(function SigningCredentials$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SigningCredentials", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"), $.String, 
          $.String, $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DigestAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningKeyIdentifier", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.Field({Static:false, Public:false}, "digestAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "signatureAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "signingKey", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"));

    $.Field({Static:false, Public:false}, "signingKeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Property({Static:false, Public:true }, "DigestAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "SignatureAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "SigningKey", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"));

    $.Property({Static:false, Public:true }, "SigningKeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityTokenHandlerCollection */ 

(function SecurityTokenHandlerCollection$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler")]), 
      Name: "System.IdentityModel.Tokens.SecurityTokenHandlerCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler")]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler")]), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddOrReplace", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToDictionaries", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CanReadKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanReadToken", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanReadToken", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanWriteToken", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ClearItems", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDefaultSecurityTokenHandlerCollection", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDefaultSecurityTokenHandlerCollection", 
      new JSIL.MethodSignature($.Type, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Configuration", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"), [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyInfoSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenTypeIdentifiers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenTypes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InsertItem", 
      new JSIL.MethodSignature(null, [$.Int32, $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadKeyIdentifierClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveFromDictionaries", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RemoveItem", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItem", 
      new JSIL.MethodSignature(null, [$.Int32, $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteKeyIdentifierClause", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToken", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteToken", 
      new JSIL.MethodSignature($.String, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:true , Public:false}, "defaultHandlerCollectionCount", $.Int32, 8);

    $.Field({Static:false, Public:false}, "handlersByIdentifier", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler")]));

    $.Field({Static:false, Public:false}, "handlersByType", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Type"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler")]));

    $.Field({Static:false, Public:false}, "configuration", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"));

    $.Field({Static:false, Public:false}, "keyInfoSerializer", $asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"));

    $.Property({Static:false, Public:true }, "Configuration", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"));

    $.Property({Static:false, Public:true }, "TokenTypes", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "TokenTypeIdentifiers", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true }, "Item", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"));

    $.Property({Static:false, Public:true }, "Item", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"));

    $.Property({Static:false, Public:true }, "Item", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"));

    $.Property({Static:false, Public:false}, "KeyInfoSerializer", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager */ 

(function SecurityTokenHandlerCollectionManager$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDefaultSecurityTokenHandlerCollectionManager", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEmptySecurityTokenHandlerCollectionManager", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenHandlerCollections", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection")])
    );

    $.Field({Static:false, Public:false}, "collections", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection")]));

    $.Field({Static:false, Public:false}, "serviceName", $.String);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "ServiceName", $.String);

    $.Property({Static:false, Public:true }, "SecurityTokenHandlerCollections", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection")]));

    $.Property({Static:false, Public:true }, "Item", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager+Usage */ 

(function Usage$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager+Usage", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Default", $.String, "");

    $.Constant({Static:true , Public:true }, "ActAs", $.String, "ActAs");

    $.Constant({Static:true , Public:true }, "OnBehalfOf", $.String, "OnBehalfOf");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration */ 

(function SecurityTokenHandlerConfiguration$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AudienceRestriction", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.AudienceRestriction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Caches", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelCaches"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateValidationMode", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateValidator", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DetectReplayedTokens", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuerNameRegistry", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.IssuerNameRegistry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuerTokenResolver", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxClockSkew", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RevocationMode", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SaveBootstrapContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceTokenResolver", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenReplayCacheExpirationPeriod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustedStoreLocation", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AudienceRestriction", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.AudienceRestriction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Caches", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelCaches"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateValidationMode", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateValidator", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DetectReplayedTokens", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IssuerNameRegistry", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.IssuerNameRegistry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IssuerTokenResolver", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxClockSkew", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RevocationMode", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SaveBootstrapContext", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServiceTokenResolver", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TokenReplayCacheExpirationPeriod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrustedStoreLocation", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"))
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultDetectReplayedTokens", $.Boolean);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultIssuerNameRegistry", $asm19.TypeRef("System.IdentityModel.Tokens.IssuerNameRegistry"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultIssuerTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), function ($pi) {
        return $asm19.System.IdentityModel.Tokens.IssuerTokenResolver.DefaultInstance;
      });

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultMaxClockSkew", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultSaveBootstrapContext", $.Boolean);

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultTokenReplayCacheExpirationPeriod", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultCertificateValidationMode", $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"), function ($pi) {
        return $asm19.System.IdentityModel.Configuration.IdentityConfiguration.DefaultCertificateValidationMode;
      });

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultRevocationMode", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"), function ($pi) {
        return $asm19.System.IdentityModel.Configuration.IdentityConfiguration.DefaultRevocationMode;
      });

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultTrustedStoreLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"), function ($pi) {
        return $asm19.System.IdentityModel.Configuration.IdentityConfiguration.DefaultTrustedStoreLocation;
      });

    $.Field({Static:false, Public:false}, "trustedStoreLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"));

    $.Field({Static:false, Public:false}, "revocationMode", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"));

    $.Field({Static:false, Public:false}, "certificateValidationMode", $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultCertificateValidator", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.Field({Static:false, Public:false}, "audienceRestriction", $asm19.TypeRef("System.IdentityModel.Tokens.AudienceRestriction"));

    $.Field({Static:false, Public:false}, "certificateValidator", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.Field({Static:false, Public:false}, "detectReplayedTokens", $.Boolean);

    $.Field({Static:false, Public:false}, "issuerNameRegistry", $asm19.TypeRef("System.IdentityModel.Tokens.IssuerNameRegistry"));

    $.Field({Static:false, Public:false}, "issuerTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Field({Static:false, Public:false}, "maxClockSkew", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "saveBootstrapContext", $.Boolean);

    $.Field({Static:false, Public:false}, "serviceTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Field({Static:false, Public:false}, "tokenReplayCacheExpirationPeriod", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "caches", $asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelCaches"));


    function SecurityTokenHandlerConfiguration__cctor () {
      $thisType.DefaultMaxClockSkew = new $asm07.System.TimeSpan();
      $thisType.DefaultTokenReplayCacheExpirationPeriod = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SecurityTokenHandlerConfiguration__cctor
    );

    $.Property({Static:false, Public:true }, "AudienceRestriction", $asm19.TypeRef("System.IdentityModel.Tokens.AudienceRestriction"));

    $.Property({Static:false, Public:true }, "CertificateValidator", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.Property({Static:false, Public:true }, "RevocationMode", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"));

    $.Property({Static:false, Public:true }, "TrustedStoreLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"));

    $.Property({Static:false, Public:true }, "CertificateValidationMode", $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"));

    $.Property({Static:false, Public:true }, "DetectReplayedTokens", $.Boolean);

    $.Property({Static:false, Public:true }, "IssuerNameRegistry", $asm19.TypeRef("System.IdentityModel.Tokens.IssuerNameRegistry"));

    $.Property({Static:false, Public:true }, "IssuerTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Property({Static:false, Public:true }, "MaxClockSkew", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "SaveBootstrapContext", $.Boolean);

    $.Property({Static:false, Public:true }, "ServiceTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Property({Static:false, Public:true }, "Caches", $asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelCaches"));

    $.Property({Static:false, Public:true }, "TokenReplayCacheExpirationPeriod", $asm07.TypeRef("System.TimeSpan"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SecurityTokenSerializerAdapter */ 

(function SecurityTokenSerializerAdapter$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), 
      Name: "System.IdentityModel.Tokens.SecurityTokenSerializerAdapter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadKeyIdentifierCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanReadTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteKeyIdentifierCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanWriteTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenHandlers", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadKeyIdentifierCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadTokenCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteKeyIdentifierCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTokenCore", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:false, Public:false}, "_securityTokenHandlers", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"));

    $.Property({Static:false, Public:true }, "SecurityTokenHandlers", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SessionSecurityToken */ 

(function SessionSecurityToken$Members () {
  var $, $thisType;















































  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
      Name: "System.IdentityModel.Tokens.SessionSecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 13, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $.String, 
          $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]), $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $.String, 
          $.String, $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]), 
          $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm21.TypeRef("System.Xml.UniqueId"), 
          $.String, $.String, 
          $asm07.TypeRef("System.TimeSpan"), $asm19.TypeRef("System.IdentityModel.Tokens.SymmetricSecurityKey")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm21.TypeRef("System.Xml.UniqueId"), 
          $.String, $.String, 
          $asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.TimeSpan"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SymmetricSecurityKey")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm21.TypeRef("System.Xml.UniqueId"), 
          $.String, $.String, 
          $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]), $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]), 
          $asm19.TypeRef("System.IdentityModel.Tokens.SymmetricSecurityKey")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $asm21.TypeRef("System.Xml.UniqueId"), 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String, 
          $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]), $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]), 
          $asm21.TypeRef("System.Xml.UniqueId"), $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]), 
          $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]), $asm19.TypeRef("System.IdentityModel.Tokens.SctAuthorizationPolicy"), 
          $asm0A.TypeRef("System.Uri")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeSysClaim", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Claims.Claim"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimsPrincipal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextId", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndpointId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPersistent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReferenceMode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSecurityContextSecurityTokenWrapper", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyEffectiveTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyExpirationTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyGeneration", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SctAuthorizationPolicy", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SctAuthorizationPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecureConversationVersion", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUpn", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPossibleUpn", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadClaimProperties", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Claims.SessionDictionary"), 
          $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadClaims", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Claims.SessionDictionary"), 
          $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm07.TypeRef("System.Security.Claims.Claim")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadIdentities", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Claims.SessionDictionary"), 
          $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadIdentity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Claims.SessionDictionary")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadPrincipal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Claims.SessionDictionary")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadRightAttribute", 
      new JSIL.MethodSignature($.String, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $asm19.TypeRef("System.IdentityModel.Claims.SessionDictionary")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SerializeSid", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.SecurityIdentifier"), $asm19.TypeRef("System.IdentityModel.Claims.SessionDictionary"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeSysClaim", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Claims.Claim"), $asm21.TypeRef("System.Xml.XmlDictionaryWriter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsPersistent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsReferenceMode", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteClaimProperties", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Claims.SessionDictionary"), 
          $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteClaims", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Claims.SessionDictionary"), 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Security.Claims.Claim")]), $asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken+OutboundClaimsFilter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIdentities", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Claims.SessionDictionary"), 
          $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIdentity", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Claims.SessionDictionary"), 
          $asm07.TypeRef("System.Security.Claims.ClaimsIdentity")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrincipal", 
      new JSIL.MethodSignature(null, [
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Claims.SessionDictionary"), 
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteRightAttribute", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Claims.Claim"), $asm19.TypeRef("System.IdentityModel.Claims.SessionDictionary"), 
          $asm21.TypeRef("System.Xml.XmlDictionaryWriter")
        ])
    );

    $.Constant({Static:true , Public:false}, "SupportedVersion", $.String, "1");

    $.Constant({Static:true , Public:false}, "tokenKey", $.String, "SessionToken");

    $.Constant({Static:true , Public:false}, "WindowsSecurityTokenStubElementName", $.String, "WindowsSecurityTokenStub");

    $.Field({Static:true , Public:false}, "DomainNameMap", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Constant({Static:true , Public:false}, "MaxDomainNameMapSize", $.Int32, 50);

    $.Field({Static:true , Public:false}, "rnd", $asm07.TypeRef("System.Random"));

    $.Field({Static:false, Public:false}, "_context", $.String);

    $.Field({Static:false, Public:false}, "_isPersistent", $.Boolean);

    $.Field({Static:false, Public:false}, "_claimsPrincipal", $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"));

    $.Field({Static:false, Public:false}, "_sctAuthorizationPolicy", $asm19.TypeRef("System.IdentityModel.Tokens.SctAuthorizationPolicy"));

    $.Field({Static:false, Public:false}, "_endpointId", $.String);

    $.Field({Static:false, Public:false}, "_isReferenceMode", $.Boolean);

    $.Field({Static:false, Public:false}, "_isSecurityContextSecurityTokenWrapper", $.Boolean);

    $.Field({Static:false, Public:false}, "_id", $.String);

    $.Field({Static:false, Public:false}, "_contextId", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Field({Static:false, Public:false}, "_keyGeneration", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Field({Static:false, Public:false}, "_keyEffectiveTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_keyExpirationTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_secureConversationVersion", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "_validFrom", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_validTo", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "_securityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Property({Static:false, Public:true }, "ClaimsPrincipal", $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"));

    $.Property({Static:false, Public:true }, "Context", $.String);

    $.Property({Static:false, Public:true }, "ContextId", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Property({Static:false, Public:true }, "EndpointId", $.String);

    $.Property({Static:false, Public:false}, "IsSecurityContextSecurityTokenWrapper", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyEffectiveTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "KeyExpirationTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "KeyGeneration", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true }, "IsPersistent", $.Boolean);

    $.Property({Static:false, Public:true }, "IsReferenceMode", $.Boolean);

    $.Property({Static:false, Public:false}, "SctAuthorizationPolicy", $asm19.TypeRef("System.IdentityModel.Tokens.SctAuthorizationPolicy"));

    $.Property({Static:false, Public:true }, "SecureConversationVersion", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.IdentityModel.Tokens.SessionSecurityToken+OutboundClaimsFilter */ 

JSIL.MakeDelegate("System.IdentityModel.Tokens.SessionSecurityToken+OutboundClaimsFilter", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Security.Claims.Claim")]));

/* class System.IdentityModel.Tokens.SessionSecurityToken+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SessionSecurityToken+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lWriteIdentity$gb__75_0", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.Claims.Claim")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__75_0", $asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken+OutboundClaimsFilter"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.IdentityModel.Tokens.SessionSecurityTokenCacheKey */ 

(function SessionSecurityTokenCacheKey$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Tokens.SessionSecurityTokenCacheKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm21.TypeRef("System.Xml.UniqueId"), 
          $asm21.TypeRef("System.Xml.UniqueId")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextId", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndpointId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreKeyGeneration", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyGeneration", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.UniqueId"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreKeyGeneration", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "contextId", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Field({Static:false, Public:false}, "keyGeneration", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Field({Static:false, Public:false}, "endpointId", $.String);

    $.Field({Static:false, Public:false}, "ignoreKeyGeneration", $.Boolean);

    $.Property({Static:false, Public:true }, "IgnoreKeyGeneration", $.Boolean);

    $.Property({Static:false, Public:true }, "ContextId", $asm21.TypeRef("System.Xml.UniqueId"));

    $.Property({Static:false, Public:true }, "EndpointId", $.String);

    $.Property({Static:false, Public:true }, "KeyGeneration", $asm21.TypeRef("System.Xml.UniqueId"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SessionSecurityTokenHandler */ 

(function SessionSecurityTokenHandler$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"), 
      Name: "System.IdentityModel.Tokens.SessionSecurityTokenHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.CookieTransform")]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.CookieTransform")]), $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ApplyTransforms", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadToken", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateBootstrapTokenHandlerCollection", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSessionSecurityToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken"), [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $.String, 
          $.String, $asm07.TypeRef("System.DateTime"), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenDescriptor")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanValidateToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWriteToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CookieElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CookieNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultTokenLifetime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenLifetime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Transforms", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.CookieTransform")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeIdentifiers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCustomConfiguration", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_TokenLifetime", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTransforms", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.CookieTransform")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateSession", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteToken", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Constant({Static:true , Public:false}, "DefaultCookieElementName", $.String, "Cookie");

    $.Constant({Static:true , Public:false}, "DefaultCookieNamespace", $.String, "http://schemas.microsoft.com/ws/2006/05/security");

    $.Constant({Static:true , Public:false}, "SecureConversationTokenIdentifier", $.String, "http://schemas.microsoft.com/ws/2006/05/servicemodel/tokens/SecureConversation");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultLifetime", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultCookieTransforms", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.CookieTransform")]));

    $.Field({Static:false, Public:false}, "_tokenLifetime", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "_transforms", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.CookieTransform")]));


    function SessionSecurityTokenHandler__cctor () {
      $thisType.DefaultLifetime = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      SessionSecurityTokenHandler__cctor
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CookieElementName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CookieNamespace", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanValidateToken", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWriteToken", $.Boolean);

    $.Property({Static:true , Public:true }, "DefaultTokenLifetime", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenLifetime", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Transforms", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.CookieTransform")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SymmetricSecurityKey */ 

(function SymmetricSecurityKey$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"), 
      Name: "System.IdentityModel.Tokens.SymmetricSecurityKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateDerivedKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecryptionTransform", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEncryptionTransform", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIVSize", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetKeyedHashAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.KeyedHashAlgorithm"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSymmetricAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.SymmetricAlgorithm"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSymmetricKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.InMemorySymmetricSecurityKey */ 

(function InMemorySymmetricSecurityKey$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SymmetricSecurityKey"), 
      Name: "System.IdentityModel.Tokens.InMemorySymmetricSecurityKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateDerivedKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecryptionTransform", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEncryptionTransform", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIVSize", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetKeyedHashAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.KeyedHashAlgorithm"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSymmetricAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.SymmetricAlgorithm"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSymmetricKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsAsymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSupportedAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:false}, "keySize", $.Int32);

    $.Field({Static:false, Public:false}, "symmetricKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.SymmetricProofDescriptor */ 

(function SymmetricProofDescriptor$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.ProofDescriptor"), 
      Name: "System.IdentityModel.Tokens.SymmetricProofDescriptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), 
          $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ApplyTo", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyIdentifier", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestorEncryptingCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TargetEncryptingCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKeyBytes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSourceEntropy", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTargetEntropy", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:false}, "_key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_keySizeInBits", $.Int32);

    $.Field({Static:false, Public:false}, "_sourceEntropy", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_targetEntropy", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_ski", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Field({Static:false, Public:false}, "_requestorWrappingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Field({Static:false, Public:false}, "_targetWrappingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Property({Static:false, Public:false}, "RequestorEncryptingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Property({Static:false, Public:false}, "TargetEncryptingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Property({Static:false, Public:true , Virtual:true }, "KeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.UserNameSecurityToken */ 

(function UserNameSecurityToken$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
      Name: "System.IdentityModel.Tokens.UserNameSecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Password", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UserName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "password", $.String);

    $.Field({Static:false, Public:false}, "userName", $.String);

    $.Field({Static:false, Public:false}, "effectiveTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "UserName", $.String);

    $.Property({Static:false, Public:true }, "Password", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.UserNameSecurityTokenHandler */ 

(function UserNameSecurityTokenHandler$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"), 
      Name: "System.IdentityModel.Tokens.UserNameSecurityTokenHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadToken", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWriteToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RetainPassword", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeIdentifiers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_RetainPassword", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteToken", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:false, Public:false}, "_retainPassword", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "RetainPassword", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWriteToken", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler */ 

(function WindowsUserNameSecurityTokenHandler$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.UserNameSecurityTokenHandler"), 
      Name: "System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanValidateToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CanValidateToken", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WrappedSaml2AssertionKeyIdentifierClause */ 

(function WrappedSaml2AssertionKeyIdentifierClause$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.WrappedSaml2AssertionKeyIdentifierClause", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCreateKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WrappedClause", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "clause", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanCreateKey", $.Boolean);

    $.Property({Static:false, Public:true }, "WrappedClause", $asm19.TypeRef("System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004 */ 

(function WSSecurityJan2004$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+SerializerEntries"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateJan2004StrEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "PopulateJan2004TokenEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateKeyIdentifierClauseEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateStrEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateTokenEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry")]))
    );

    $.Field({Static:false, Public:false}, "securityTokenSerializer", $asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"));

    $.Property({Static:false, Public:true }, "SecurityTokenSerializer", $asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+BinaryTokenEntry */ 

(function BinaryTokenEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+BinaryTokenEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsTokenTypeUri", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ElementName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "EncodingTypeAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Constant({Static:true , Public:false}, "EncodingTypeAttributeString", $.String, "EncodingType");

    $.Constant({Static:true , Public:false}, "EncodingTypeValueBase64Binary", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary");

    $.Constant({Static:true , Public:false}, "EncodingTypeValueHexBinary", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#HexBinary");

    $.Field({Static:true , Public:false, ReadOnly:true }, "ValueTypeAttribute", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "valueTypeUris", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenTypeUri", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ValueTypeUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+GenericXmlTokenEntry */ 

(function GenericXmlTokenEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+GenericXmlTokenEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenTypesCore", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenTypeUri", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ValueTypeUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+KerberosTokenEntry */ 

(function KerberosTokenEntry$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.WSSecurityJan2004+BinaryTokenEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+KerberosTokenEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenTypesCore", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+SamlTokenEntry */ 

(function SamlTokenEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+SamlTokenEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenTypesCore", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenTypeUri", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ValueTypeUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+UserNamePasswordTokenEntry */ 

(function UserNamePasswordTokenEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+UserNamePasswordTokenEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenTypesCore", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenTypeUri", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ValueTypeUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+WrappedKeyTokenEntry */ 

(function WrappedKeyTokenEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+WrappedKeyTokenEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenTypesCore", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenTypeUri", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ValueTypeUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+X509TokenEntry */ 

(function X509TokenEntry$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.WSSecurityJan2004+BinaryTokenEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+X509TokenEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenTypesCore", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]))
    );

    $.Constant({Static:true , Public:false}, "ValueTypeAbsoluteUri", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+SecurityTokenReferenceJan2004ClauseEntry */ 

(function SecurityTokenReferenceJan2004ClauseEntry$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+SecurityTokenReferenceJan2004ClauseEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EmitBspRequiredAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StrEntries", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadTokenType", 
      new JSIL.MethodSignature($.String, [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Constant({Static:true , Public:false}, "DefaultDerivedKeyLength", $.Int32, 32);

    $.Field({Static:false, Public:false}, "emitBspRequiredAttributes", $.Boolean);

    $.Field({Static:false, Public:false}, "strEntries", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry")]));

    $.Property({Static:false, Public:false}, "EmitBspRequiredAttributes", $.Boolean);

    $.Property({Static:false, Public:false}, "StrEntries", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+KeyIdentifierStrEntry */ 

(function KeyIdentifierStrEntry$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+KeyIdentifierStrEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadClause", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ClauseType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DefaultEncodingType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EmitBspRequiredAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContent", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "emitBspRequiredAttributes", $.Boolean);

    $.Constant({Static:true , Public:false}, "EncodingTypeValueBase64Binary", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary");

    $.Constant({Static:true , Public:false}, "EncodingTypeValueHexBinary", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#HexBinary");

    $.Constant({Static:true , Public:false}, "EncodingTypeValueText", $.String, "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Text");

    $.Property({Static:false, Public:false, Virtual:true }, "ClauseType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "DefaultEncodingType", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValueTypeUri", $.String);

    $.Property({Static:false, Public:false}, "EmitBspRequiredAttributes", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+KerberosHashStrEntry */ 

(function KerberosHashStrEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.WSSecurityJan2004+KeyIdentifierStrEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+KerberosHashStrEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ClauseType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContent", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ClauseType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValueTypeUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+X509SkiStrEntry */ 

(function X509SkiStrEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.WSSecurityJan2004+KeyIdentifierStrEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+X509SkiStrEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ClauseType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ClauseType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValueTypeUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+LocalReferenceStrEntry */ 

(function LocalReferenceStrEntry$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+LocalReferenceStrEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadClause", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLocalTokenTypeUri", 
      new JSIL.MethodSignature($.String, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContent", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "emitBspRequiredAttributes", $.Boolean);

    $.Field({Static:false, Public:false}, "tokenSerializer", $asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+SamlJan2004KeyIdentifierStrEntry */ 

(function SamlJan2004KeyIdentifierStrEntry$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+SamlJan2004KeyIdentifierStrEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadClause", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsMatchingValueType", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContent", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+Saml2Jan2004KeyIdentifierStrEntry */ 

(function Saml2Jan2004KeyIdentifierStrEntry$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.WSSecurityJan2004+SamlJan2004KeyIdentifierStrEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+Saml2Jan2004KeyIdentifierStrEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsMatchingValueType", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+RelDirectStrEntry */ 

(function RelDirectStrEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+RelDirectStrEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadClause", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContent", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+X509IssuerSerialStrEntry */ 

(function X509IssuerSerialStrEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+X509IssuerSerialStrEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadClause", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContent", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityJan2004+IdManager */ 

(function IdManager$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.SignatureTargetIdManager"), 
      Name: "System.IdentityModel.Tokens.WSSecurityJan2004+IdManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExtractId", 
      new JSIL.MethodSignature($.String, [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultIdNamespacePrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultIdNamespaceUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteIdAttribute", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ElementName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "instance", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultIdNamespacePrefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultIdNamespaceUri", $.String);

    $.Property({Static:true , Public:false}, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityXXX2005 */ 

(function WSSecurityXXX2005$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.WSSecurityJan2004"), 
      Name: "System.IdentityModel.Tokens.WSSecurityXXX2005", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateKeyIdentifierClauseEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateStrEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateTokenEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+TokenEntry")]))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityXXX2005+SamlTokenEntry */ 

(function SamlTokenEntry$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.WSSecurityJan2004+SamlTokenEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityXXX2005+SamlTokenEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TokenTypeUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityXXX2005+WrappedKeyTokenEntry */ 

(function WrappedKeyTokenEntry$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.WSSecurityJan2004+WrappedKeyTokenEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityXXX2005+WrappedKeyTokenEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TokenTypeUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityXXX2005+SecurityTokenReferenceXXX2005ClauseEntry */ 

(function SecurityTokenReferenceXXX2005ClauseEntry$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.WSSecurityJan2004+SecurityTokenReferenceJan2004ClauseEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityXXX2005+SecurityTokenReferenceXXX2005ClauseEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitTokenType", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTokenTypeUri", 
      new JSIL.MethodSignature($.String, [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadTokenType", 
      new JSIL.MethodSignature($.String, [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityXXX2005+EncryptedKeyHashStrEntry */ 

(function EncryptedKeyHashStrEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.WSSecurityJan2004+KeyIdentifierStrEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityXXX2005+EncryptedKeyHashStrEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadClause", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ClauseType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ClauseType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValueTypeUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityXXX2005+X509ThumbprintStrEntry */ 

(function X509ThumbprintStrEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.WSSecurityJan2004+KeyIdentifierStrEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityXXX2005+X509ThumbprintStrEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ClauseType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ClauseType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValueTypeUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.WSSecurityXXX2005+SamlDirectStrEntry */ 

(function SamlDirectStrEntry$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+StrEntry"), 
      Name: "System.IdentityModel.Tokens.WSSecurityXXX2005+SamlDirectStrEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadClause", 
      new JSIL.MethodSignature($.Boolean, [$asm21.TypeRef("System.Xml.XmlDictionaryReader"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [
          $asm21.TypeRef("System.Xml.XmlDictionaryReader"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContent", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.X509AsymmetricSecurityKey */ 

(function X509AsymmetricSecurityKey$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.AsymmetricSecurityKey"), 
      Name: "System.IdentityModel.Tokens.X509AsymmetricSecurityKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PrivateKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PublicKey", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThisLock", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAsymmetricAlgorithm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashAlgorithmForSignature", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSignatureDeformatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureDeformatter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSignatureFormatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricSignatureFormatter"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasPrivateKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsAsymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSupportedAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSymmetricAlgorithm", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "LevelUpRsa", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), [$asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), $.String])
    );

    $.Field({Static:false, Public:false}, "certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Field({Static:false, Public:false}, "privateKey", $asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Field({Static:false, Public:false}, "privateKeyAvailabilityDetermined", $.Boolean);

    $.Field({Static:false, Public:false}, "publicKey", $asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Field({Static:false, Public:false}, "publicKeyAvailabilityDetermined", $.Boolean);

    $.Field({Static:false, Public:false}, "thisLock", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

    $.Property({Static:false, Public:false}, "PrivateKey", $asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Property({Static:false, Public:false}, "PublicKey", $asm07.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Property({Static:false, Public:false}, "ThisLock", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.X509CertificateStoreTokenResolver */ 

(function X509CertificateStoreTokenResolver$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), 
      Name: "System.IdentityModel.Tokens.X509CertificateStoreTokenResolver", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreName"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StoreLocation", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StoreName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveSecurityKeyCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryResolveTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])])
    );

    $.Field({Static:false, Public:false}, "storeName", $.String);

    $.Field({Static:false, Public:false}, "storeLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"));

    $.Property({Static:false, Public:true }, "StoreName", $.String);

    $.Property({Static:false, Public:true }, "StoreLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer */ 

(function X509DataSecurityKeyIdentifierClauseSerializer$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer"), 
      Name: "System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanWriteKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateIssuerSerialKeyIdentifierClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateRawDataKeyIdentifierClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSubjectKeyIdentifierClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClause", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.X509EncryptingCredentials */ 

(function X509EncryptingCredentials$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), 
      Name: "System.IdentityModel.Tokens.X509EncryptingCredentials", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.X509SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.X509SecurityToken"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.X509SecurityToken"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Certificate", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.Field({Static:false, Public:false}, "certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "Certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause */ 

(function X509IssuerSerialKeyIdentifierClause$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuerSerialNumber", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "issuerName", $.String);

    $.Field({Static:false, Public:false, ReadOnly:true }, "issuerSerialNumber", $.String);

    $.Property({Static:false, Public:true }, "IssuerName", $.String);

    $.Property({Static:false, Public:true }, "IssuerSerialNumber", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.X509NTAuthChainTrustValidator */ 

(function X509NTAuthChainTrustValidator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"), 
      Name: "System.IdentityModel.Tokens.X509NTAuthChainTrustValidator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChainStatusInformation", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatus")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.Field({Static:false, Public:false}, "useMachineContext", $.Boolean);

    $.Field({Static:false, Public:false}, "chainPolicy", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy"));

    $.Field({Static:false, Public:false}, "chainPolicyOID", $.UInt32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause */ 

(function X509RawDataKeyIdentifierClause$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.BinaryKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCreateKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRawData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetX509RawData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Field({Static:false, Public:false}, "key", $asm19.TypeRef("System.IdentityModel.Tokens.X509AsymmetricSecurityKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanCreateKey", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.X509SecurityToken */ 

(function X509SecurityToken$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
      Name: "System.IdentityModel.Tokens.X509SecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanCreateKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateKeyIdentifierClause", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Certificate", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityKeys", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchesKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Field({Static:false, Public:false}, "securityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Field({Static:false, Public:false}, "effectiveTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "expirationTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "disposable", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityKeys", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKey")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidFrom", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidTo", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "Certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.X509SecurityTokenHandler */ 

(function X509SecurityTokenHandler$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandler"), 
      Name: "System.IdentityModel.Tokens.X509SecurityTokenHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanReadToken", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanWriteKeyIdentifierClause", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanValidateToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWriteToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateValidator", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MapToWindows", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WriteXmlDSigDefinedClauseTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_X509NTAuthChainTrustValidator", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.X509NTAuthChainTrustValidator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetTokenTypeIdentifiers", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "KerberosCertificateLogon", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.WindowsIdentity"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadCustomConfiguration", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClause", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateValidator", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MapToWindows", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WriteXmlDSigDefinedClauseTypes", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_X509NTAuthChainTrustValidator", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.X509NTAuthChainTrustValidator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClause", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteToken", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:true , Public:false}, "defaultRevocationMode", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"), function ($pi) {
        return $asm0A.System.Security.Cryptography.X509Certificates.X509RevocationMode.Online;
      });

    $.Field({Static:true , Public:false}, "defaultValidationMode", $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"), function ($pi) {
        return $asm19.System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust;
      });

    $.Field({Static:true , Public:false}, "defaultStoreLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"), function ($pi) {
        return $asm0A.System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine;
      });

    $.Field({Static:false, Public:false}, "x509NTAuthChainTrustValidator", $asm19.TypeRef("System.IdentityModel.Tokens.X509NTAuthChainTrustValidator"));

    $.Field({Static:false, Public:false}, "lockObject", $.Object);

    $.Field({Static:false, Public:false}, "mapToWindows", $.Boolean);

    $.Field({Static:false, Public:false}, "certificateValidator", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.Field({Static:false, Public:false}, "writeXmlDSigDefinedClauseTypes", $.Boolean);

    $.Field({Static:false, Public:false}, "x509DataKeyIdentifierClauseSerializer", $asm19.TypeRef("System.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer"));

    $.Property({Static:false, Public:true }, "MapToWindows", $.Boolean);

    $.Property({Static:false, Public:true }, "CertificateValidator", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.Property({Static:false, Public:true }, "X509NTAuthChainTrustValidator", $asm19.TypeRef("System.IdentityModel.Tokens.X509NTAuthChainTrustValidator"));

    $.Property({Static:false, Public:true }, "WriteXmlDSigDefinedClauseTypes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanValidateToken", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWriteToken", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TokenType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.X509SigningCredentials */ 

(function X509SigningCredentials$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"), 
      Name: "System.IdentityModel.Tokens.X509SigningCredentials", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.X509SecurityToken"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Certificate", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.Field({Static:false, Public:false}, "certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "Certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause */ 

(function X509SubjectKeyIdentifierClause$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.BinaryKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "CanCreateFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSkiRawData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetX509SubjectKeyIdentifier", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCreateFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.Constant({Static:true , Public:false}, "SubjectKeyIdentifierOid", $.String, "2.5.29.14");

    $.Constant({Static:true , Public:false}, "SkiDataOffset", $.Int32, 2);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause */ 

(function X509ThumbprintKeyIdentifierClause$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.BinaryKeyIdentifierClause"), 
      Name: "System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetX509Thumbprint", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.X509WindowsSecurityToken */ 

(function X509WindowsSecurityToken$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Tokens.X509SecurityToken"), 
      Name: "System.IdentityModel.Tokens.X509WindowsSecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm07.TypeRef("System.Security.Principal.WindowsIdentity")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm07.TypeRef("System.Security.Principal.WindowsIdentity"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm07.TypeRef("System.Security.Principal.WindowsIdentity"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm07.TypeRef("System.Security.Principal.WindowsIdentity"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $asm07.TypeRef("System.Security.Principal.WindowsIdentity"), 
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WindowsIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    );

    $.Field({Static:false, Public:false}, "windowsIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "authenticationType", $.String);

    $.Property({Static:false, Public:true }, "WindowsIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Property({Static:false, Public:true }, "AuthenticationType", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.XmlDsigSep2000 */ 

(function XmlDsigSep2000$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+SerializerEntries"), 
      Name: "System.IdentityModel.Tokens.XmlDsigSep2000", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateKeyIdentifierClauseEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateKeyIdentifierEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierEntry")]))
    );

    $.Field({Static:false, Public:false}, "securityTokenSerializer", $asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.XmlDsigSep2000+KeyInfoEntry */ 

(function KeyInfoEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierEntry"), 
      Name: "System.IdentityModel.Tokens.XmlDsigSep2000+KeyInfoEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierCore", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.Field({Static:false, Public:false}, "securityTokenSerializer", $asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"));

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.XmlDsigSep2000+KeyNameClauseEntry */ 

(function KeyNameClauseEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry"), 
      Name: "System.IdentityModel.Tokens.XmlDsigSep2000+KeyNameClauseEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.XmlDsigSep2000+KeyValueClauseEntry */ 

(function KeyValueClauseEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry"), 
      Name: "System.IdentityModel.Tokens.XmlDsigSep2000+KeyValueClauseEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.XmlDsigSep2000+X509CertificateClauseEntry */ 

(function X509CertificateClauseEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry"), 
      Name: "System.IdentityModel.Tokens.XmlDsigSep2000+X509CertificateClauseEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.XmlEncApr2001 */ 

(function XmlEncApr2001$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+SerializerEntries"), 
      Name: "System.IdentityModel.Tokens.XmlEncApr2001", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopulateKeyIdentifierClauseEntries", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry")]))
    );

    $.Field({Static:false, Public:false}, "securityTokenSerializer", $asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Tokens.XmlEncApr2001+EncryptedKeyClauseEntry */ 

(function EncryptedKeyClauseEntry$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer+KeyIdentifierClauseEntry"), 
      Name: "System.IdentityModel.Tokens.XmlEncApr2001+EncryptedKeyClauseEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadKeyIdentifierClauseCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"), [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SupportsCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKeyIdentifierClauseCore", 
      new JSIL.MethodSignature(null, [$asm21.TypeRef("System.Xml.XmlDictionaryWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause")])
    );

    $.Field({Static:false, Public:false}, "securityTokenSerializer", $asm19.TypeRef("System.IdentityModel.Tokens.KeyInfoSerializer"));

    $.Property({Static:false, Public:false, Virtual:true }, "LocalName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceUri", $asm21.TypeRef("System.Xml.XmlDictionaryString"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IdentityModel.Selectors.AudienceUriMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.IdentityModel.Selectors.AudienceUriMode", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Never: 0, 
    Always: 1, 
    BearerKeyOnly: 2, 
  }
);

/* class System.IdentityModel.Selectors.AudienceUriModeValidationHelper */ 

(function AudienceUriModeValidationHelper$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.IdentityModel.Selectors.AudienceUriModeValidationHelper", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Validate", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SecurityTokenAuthenticator */ 

(function SecurityTokenAuthenticator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenAuthenticator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CanValidateToken", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanValidateTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateTokenCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator */ 

(function UserNameSecurityTokenAuthenticator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenAuthenticator"), 
      Name: "System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanValidateTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateTokenCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateUserNamePasswordCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator */ 

(function CustomUserNameSecurityTokenAuthenticator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator"), 
      Name: "System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.UserNamePasswordValidator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateUserNamePasswordCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "validator", $asm19.TypeRef("System.IdentityModel.Selectors.UserNamePasswordValidator"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IdentityModel.Claims");
/* class System.IdentityModel.Claims.ClaimSet */ 

(function ClaimSet$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Claims.ClaimSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsClaim", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Claims.Claim"), $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsClaim", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Claims.Claim")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindClaims", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Anonymous", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Issuer", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Claims.Claim"), [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_System", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Windows", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SupportedRight", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:true , Public:false}, "system", $.Type);

    $.Field({Static:true , Public:false}, "windows", $.Type);

    $.Field({Static:true , Public:false}, "anonymous", $.Type);

    $.Property({Static:true , Public:true }, "System", $.Type);

    $.Property({Static:true , Public:true }, "Windows", $.Type);

    $.Property({Static:true , Public:false}, "Anonymous", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm19.TypeRef("System.IdentityModel.Claims.Claim"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Issuer", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class System.IdentityModel.Claims.DefaultClaimSet */ 

(function DefaultClaimSet$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), 
      Name: "System.IdentityModel.Claims.DefaultClaimSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    )
      .Parameter(0, "claims", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), $jsilcore.TypeRef("System.Array", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")])])
    )
      .Parameter(1, "claims", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsClaim", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Claims.Claim")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindClaims", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), [$.String, $.String])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm19.System.IdentityModel.Claims.DefaultClaimSet_$lFindClaims$gd__13.__Type__]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Issuer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Claims.Claim"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "issuer", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "claims", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm19.TypeRef("System.IdentityModel.Claims.Claim"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Issuer", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class System.IdentityModel.Claims.DefaultClaimSet+<FindClaims>d__13 */ 

(function $lFindClaims$gd__13$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Claims.DefaultClaimSet+<FindClaims>d__13", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.IdentityModel.Claims.Claim$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.IdentityModel.Claims.Claim$g.get_Current", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Claims.Claim"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm19.TypeRef("System.IdentityModel.Claims.Claim"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "claimType", $.String);

    $.Field({Static:false, Public:true }, "$l$g3__claimType", $.String);

    $.Field({Static:false, Public:false}, "right", $.String);

    $.Field({Static:false, Public:true }, "$l$g3__right", $.String);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm19.TypeRef("System.IdentityModel.Claims.DefaultClaimSet"));

    $.Field({Static:false, Public:false}, "$lanyClaimType$g5__1", $.Boolean);

    $.Field({Static:false, Public:false}, "$lanyRight$g5__2", $.Boolean);

    $.Field({Static:false, Public:false}, "$li$g5__3", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.IdentityModel.Claims.Claim$g.Current", $asm19.TypeRef("System.IdentityModel.Claims.Claim"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator+UserNameClaimSet */ 

(function UserNameClaimSet$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Claims.DefaultClaimSet"), 
      Name: "System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator+UserNameClaimSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Identity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.IIdentity"))
    );

    $.Field({Static:false, Public:false}, "identity", $asm07.TypeRef("System.Security.Principal.IIdentity"));

    $.Property({Static:false, Public:true , Virtual:true }, "Identity", $asm07.TypeRef("System.Security.Principal.IIdentity"));

    $.ImplementInterfaces(
      /* 2 */ $asm19.TypeRef("System.IdentityModel.Policy.IIdentityInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.EmptySecurityTokenResolver */ 

(function EmptySecurityTokenResolver$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.IdentityModel.Selectors.EmptySecurityTokenResolver", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_instance", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Property({Static:true , Public:true }, "Instance", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator */ 

(function WindowsSecurityTokenAuthenticator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenAuthenticator"), 
      Name: "System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanValidateTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateTokenCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:false, Public:false}, "includeWindowsGroups", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator */ 

(function KerberosSecurityTokenAuthenticator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator"), 
      Name: "System.IdentityModel.Selectors.KerberosSecurityTokenAuthenticator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanValidateTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SecurityTokenProvider */ 

(function SecurityTokenProvider$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginCancelToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginCancelTokenCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginGetToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginGetTokenCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginRenewToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeginRenewTokenCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $asm07.TypeRef("System.TimeSpan"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), 
          $asm07.TypeRef("System.AsyncCallback"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CancelToken", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.TimeSpan"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CancelTokenCore", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.TimeSpan"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndCancelToken", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndCancelTokenCore", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "EndGetToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndGetTokenCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndRenewToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndRenewTokenCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsTokenCancellation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsTokenRenewal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RenewToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm07.TypeRef("System.TimeSpan"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RenewTokenCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm07.TypeRef("System.TimeSpan"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsTokenRenewal", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsTokenCancellation", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SecurityTokenProvider+SecurityTokenAsyncResult */ 

(function SecurityTokenAsyncResult$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenProvider+SecurityTokenAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.WaitHandle"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "token", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Field({Static:false, Public:false}, "state", $.Object);

    $.Field({Static:false, Public:false}, "manualResetEvent", $asm07.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "thisLock", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm07.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IAsyncResult")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.KerberosSecurityTokenProvider */ 

(function KerberosSecurityTokenProvider$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenProvider"), 
      Name: "System.IdentityModel.Selectors.KerberosSecurityTokenProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Security.Principal.TokenImpersonationLevel")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Security.Principal.TokenImpersonationLevel"), 
          $asm0A.TypeRef("System.Net.NetworkCredential")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NetworkCredential", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.NetworkCredential"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServicePrincipalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenImpersonationLevel", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.TokenImpersonationLevel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm07.TypeRef("System.TimeSpan"), $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm07.TypeRef("System.TimeSpan")])
    );

    $.Field({Static:false, Public:false}, "servicePrincipalName", $.String);

    $.Field({Static:false, Public:false}, "tokenImpersonationLevel", $asm07.TypeRef("System.Security.Principal.TokenImpersonationLevel"));

    $.Field({Static:false, Public:false}, "networkCredential", $asm0A.TypeRef("System.Net.NetworkCredential"));

    $.Property({Static:false, Public:true }, "ServicePrincipalName", $.String);

    $.Property({Static:false, Public:true }, "TokenImpersonationLevel", $asm07.TypeRef("System.Security.Principal.TokenImpersonationLevel"));

    $.Property({Static:false, Public:true }, "NetworkCredential", $asm0A.TypeRef("System.Net.NetworkCredential"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator */ 

(function RsaSecurityTokenAuthenticator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenAuthenticator"), 
      Name: "System.IdentityModel.Selectors.RsaSecurityTokenAuthenticator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanValidateTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateTokenCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator */ 

(function SamlSecurityTokenAuthenticator$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenAuthenticator"), 
      Name: "System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenAuthenticator")]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenAuthenticator")]), $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanValidateTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowedAudienceUris", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AudienceUriMode", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsCurrentlyTimeEffective", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SamlSecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveClaimSet", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveClaimSet", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveIdentity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.IIdentity"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveIdentity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.IIdentity"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AudienceUriMode", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateAudienceRestriction", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SamlAudienceRestrictionCondition")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateTokenCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:false, Public:false}, "supportingAuthenticators", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenAuthenticator")]));

    $.Field({Static:false, Public:false}, "allowedAudienceUris", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$.String]));

    $.Field({Static:false, Public:false}, "audienceUriMode", $asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"));

    $.Field({Static:false, Public:false}, "maxClockSkew", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "AudienceUriMode", $asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"));

    $.Property({Static:false, Public:true }, "AllowedAudienceUris", $asm07.TypeRef("System.Collections.Generic.IList`1", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SecurityTokenManager */ 

(function SecurityTokenManager$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSecurityTokenAuthenticator", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenAuthenticator"), [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenRequirement"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSecurityTokenProvider", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenProvider"), [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenRequirement")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSecurityTokenSerializer", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenSerializer"), [$asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenVersion")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SecurityTokenRequirement */ 

(function SecurityTokenRequirement$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenRequirement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOptionalToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IsOptionalTokenProperty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_KeySizeProperty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyType", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_KeyTypeProperty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyUsage", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyUsage"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_KeyUsageProperty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PeerAuthenticationMode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequireCryptographicToken", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_RequireCryptographicTokenProperty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TokenTypeProperty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetProperty", 
      new JSIL.MethodSignature("!!0", [$.String], ["TValue"])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsOptionalToken", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeySize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyType", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyUsage", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyUsage"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequireCryptographicToken", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TokenType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetProperty", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["TValue"])
    );

    $.Constant({Static:true , Public:false}, "Namespace", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/securitytokenrequirement");

    $.Constant({Static:true , Public:false}, "tokenTypeProperty", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/securitytokenrequirement/TokenType");

    $.Constant({Static:true , Public:false}, "keyUsageProperty", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/securitytokenrequirement/KeyUsage");

    $.Constant({Static:true , Public:false}, "keyTypeProperty", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/securitytokenrequirement/KeyType");

    $.Constant({Static:true , Public:false}, "keySizeProperty", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/securitytokenrequirement/KeySize");

    $.Constant({Static:true , Public:false}, "requireCryptographicTokenProperty", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/securitytokenrequirement/RequireCryptographicToken");

    $.Constant({Static:true , Public:false}, "peerAuthenticationMode", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/securitytokenrequirement/PeerAuthenticationMode");

    $.Constant({Static:true , Public:false}, "isOptionalTokenProperty", $.String, "http://schemas.microsoft.com/ws/2006/05/identitymodel/securitytokenrequirement/IsOptionalTokenProperty");

    $.Constant({Static:true , Public:false}, "defaultRequireCryptographicToken", $.Boolean, false);

    $.Constant({Static:true , Public:false}, "defaultKeyUsage", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyUsage"), 1);

    $.Constant({Static:true , Public:false}, "defaultKeyType", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyType"), 0);

    $.Constant({Static:true , Public:false}, "defaultKeySize", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "defaultIsOptionalToken", $.Boolean, false);

    $.Field({Static:false, Public:false}, "properties", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Property({Static:true , Public:true }, "TokenTypeProperty", $.String);

    $.Property({Static:true , Public:true }, "KeyUsageProperty", $.String);

    $.Property({Static:true , Public:true }, "KeyTypeProperty", $.String);

    $.Property({Static:true , Public:true }, "KeySizeProperty", $.String);

    $.Property({Static:true , Public:true }, "RequireCryptographicTokenProperty", $.String);

    $.Property({Static:true , Public:true }, "PeerAuthenticationMode", $.String);

    $.Property({Static:true , Public:true }, "IsOptionalTokenProperty", $.String);

    $.Property({Static:false, Public:true }, "TokenType", $.String);

    $.Property({Static:false, Public:false}, "IsOptionalToken", $.Boolean);

    $.Property({Static:false, Public:true }, "RequireCryptographicToken", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyUsage", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyUsage"));

    $.Property({Static:false, Public:true }, "KeyType", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyType"));

    $.Property({Static:false, Public:true }, "KeySize", $.Int32);

    $.Property({Static:false, Public:true }, "Properties", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.SecurityTokenVersion */ 

(function SecurityTokenVersion$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.SecurityTokenVersion", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSecuritySpecifications", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.UserNamePasswordValidator */ 

(function UserNamePasswordValidator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.UserNamePasswordValidator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMembershipProviderValidator", 
      new JSIL.MethodSignature($.Type, [$asm29.TypeRef("System.Web.Security.MembershipProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_None", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:true , Public:false}, "none", $.Type);

    $.Property({Static:true , Public:true }, "None", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.UserNamePasswordValidator+NoneUserNamePasswordValidator */ 

(function NoneUserNamePasswordValidator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.UserNamePasswordValidator"), 
      Name: "System.IdentityModel.Selectors.UserNamePasswordValidator+NoneUserNamePasswordValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.UserNamePasswordValidator+MembershipProviderValidator */ 

(function MembershipProviderValidator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.UserNamePasswordValidator"), 
      Name: "System.IdentityModel.Selectors.UserNamePasswordValidator+MembershipProviderValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm29.TypeRef("System.Web.Security.MembershipProvider"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "provider", $asm29.TypeRef("System.Web.Security.MembershipProvider"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.UserNameSecurityTokenProvider */ 

(function UserNameSecurityTokenProvider$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenProvider"), 
      Name: "System.IdentityModel.Selectors.UserNameSecurityTokenProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm07.TypeRef("System.TimeSpan")])
    );

    $.Field({Static:false, Public:false}, "userNameToken", $asm19.TypeRef("System.IdentityModel.Tokens.UserNameSecurityToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator */ 

(function WindowsUserNameSecurityTokenAuthenticator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator"), 
      Name: "System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateUserNamePasswordCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "includeWindowsGroups", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.X509CertificateChain */ 

(function X509CertificateChain$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.X509CertificateChain", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Build", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "BuildChain", 
      new JSIL.MethodSignature(null, [
          $.IntPtr, $.IntPtr, 
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"), $asm0A.TypeRef("System.Security.Cryptography.OidCollection"), 
          $asm0A.TypeRef("System.Security.Cryptography.OidCollection"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"), 
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm07.TypeRef("System.DateTime"), 
          $asm07.TypeRef("System.TimeSpan"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.SafeCertChainHandle")])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CopyOidsToUnmanagedMemory", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.SafeHGlobalHandle"), [$asm0A.TypeRef("System.Security.Cryptography.OidCollection")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExportToMemoryStore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.SafeCertStoreHandle"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"), $.IntPtr])
    )
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ChainPolicy", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChainStatus", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatus")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "MapRevocationFlags", 
      new JSIL.MethodSignature($.UInt32, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ChainPolicy", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy"))
    );

    $.Constant({Static:true , Public:true }, "DefaultChainPolicyOID", $.UInt32, 1);

    $.Field({Static:false, Public:false}, "useMachineContext", $.Boolean);

    $.Field({Static:false, Public:false}, "chainPolicy", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy"));

    $.Field({Static:false, Public:false}, "chainPolicyOID", $.UInt32);

    $.Property({Static:false, Public:true }, "ChainPolicy", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainPolicy"));

    $.Property({Static:false, Public:true }, "ChainStatus", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainStatus")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.X509CertificateStore */ 

(function X509CertificateStore$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Selectors.X509CertificateStore", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreName"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BinaryMatches", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2Collection"), [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509FindType"), $.Object, 
          $.Boolean
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "MapX509StoreFlags", 
      new JSIL.MethodSignature($.UInt32, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.OpenFlags")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Open", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.OpenFlags"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TryGetMatchingX509Certificate", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509FindType"), 
          $.UInt32, $.Object, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
        ])
    );

    $.Field({Static:false, Public:false}, "certStoreHandle", $asm19.TypeRef("System.IdentityModel.SafeCertStoreHandle"));

    $.Field({Static:false, Public:false}, "storeName", $.String);

    $.Field({Static:false, Public:false}, "storeLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.X509SecurityTokenAuthenticator */ 

(function X509SecurityTokenAuthenticator$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenAuthenticator"), 
      Name: "System.IdentityModel.Selectors.X509SecurityTokenAuthenticator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"), $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanValidateTokenCore", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MapCertificateToWindowsAccount", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "KerberosCertificateLogon", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Security.Principal.WindowsIdentity"), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ValidateTokenCore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy")]), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.Field({Static:false, Public:false}, "validator", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.Field({Static:false, Public:false}, "mapToWindows", $.Boolean);

    $.Field({Static:false, Public:false}, "includeWindowsGroups", $.Boolean);

    $.Field({Static:false, Public:false}, "cloneHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "MapCertificateToWindowsAccount", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Selectors.X509SecurityTokenProvider */ 

(function X509SecurityTokenProvider$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenProvider"), 
      Name: "System.IdentityModel.Selectors.X509SecurityTokenProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"), $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreName"), 
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509FindType"), $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Certificate", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetTokenCore", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"), [$asm07.TypeRef("System.TimeSpan")])
    );

    $.Field({Static:false, Public:false}, "certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "Certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Policy.DefaultAuthorizationContext */ 

(function DefaultAuthorizationContext$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Policy.AuthorizationContext"), 
      Name: "System.IdentityModel.Policy.DefaultAuthorizationContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Policy.DefaultEvaluationContext"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ClaimSets", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Empty", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ExpirationTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]))
    );

    $.Field({Static:true , Public:false}, "empty", $.Type);

    $.Field({Static:false, Public:false}, "id", $asm19.TypeRef("System.IdentityModel.SecurityUniqueId"));

    $.Field({Static:false, Public:false}, "claimSets", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]));

    $.Field({Static:false, Public:false}, "expirationTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "properties", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]));

    $.Property({Static:true , Public:true }, "Empty", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ClaimSets", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ExpirationTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Policy.EvaluationContext */ 

(function EvaluationContext$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Policy.EvaluationContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddClaimSet", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy"), $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ClaimSets", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Generation", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RecordExpirationTime", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ClaimSets", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]));

    $.Property({Static:false, Public:true , Virtual:true }, "Generation", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Policy.DefaultEvaluationContext */ 

(function DefaultEvaluationContext$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Policy.EvaluationContext"), 
      Name: "System.IdentityModel.Policy.DefaultEvaluationContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddClaimSet", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy"), $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ClaimSets", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExpirationTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Generation", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RecordExpirationTime", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTime"))
    );

    $.Field({Static:false, Public:false}, "claimSets", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]));

    $.Field({Static:false, Public:false}, "properties", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]));

    $.Field({Static:false, Public:false}, "expirationTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "generation", $.Int32);

    $.Field({Static:false, Public:false}, "readOnlyClaimSets", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Generation", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ClaimSets", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]));

    $.Property({Static:false, Public:true }, "ExpirationTime", $asm07.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.IdentityModel.Policy.IAuthorizationComponent */ 

JSIL.MakeInterface(
  "System.IdentityModel.Policy.IAuthorizationComponent", true, [], function ($) {
    $.Method({}, "get_Id", JSIL.MethodSignature.Return($.String));
    $.Property({}, "Id");
  }, []);

/* interface System.IdentityModel.Policy.IAuthorizationPolicy */ 

JSIL.MakeInterface(
  "System.IdentityModel.Policy.IAuthorizationPolicy", true, [], function ($) {
    $.Method({}, "get_Issuer", JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")));
    $.Method({}, "Evaluate", new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Policy.EvaluationContext"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])]));
    $.Property({}, "Issuer");
  }, [$asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationComponent")]);

/* interface System.IdentityModel.Policy.IIdentityInfo */ 

JSIL.MakeInterface(
  "System.IdentityModel.Policy.IIdentityInfo", false, [], function ($) {
    $.Method({}, "get_Identity", JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.IIdentity")));
    $.Property({}, "Identity");
  }, []);

/* class System.IdentityModel.Policy.UnconditionalPolicy */ 

(function UnconditionalPolicy$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Policy.UnconditionalPolicy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Principal.IIdentity"), $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IIdentity"), $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.IIdentity"), $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]), 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Policy.EvaluationContext"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExpirationTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDisposable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Issuances", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Issuer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PrimaryIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.IIdentity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), 
          $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]), $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "id", $asm19.TypeRef("System.IdentityModel.SecurityUniqueId"));

    $.Field({Static:false, Public:false}, "issuer", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"));

    $.Field({Static:false, Public:false}, "issuance", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"));

    $.Field({Static:false, Public:false}, "issuances", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]));

    $.Field({Static:false, Public:false}, "expirationTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "primaryIdentity", $asm07.TypeRef("System.Security.Principal.IIdentity"));

    $.Field({Static:false, Public:false}, "disposable", $.Boolean);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Issuer", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"));

    $.Property({Static:false, Public:false}, "PrimaryIdentity", $asm07.TypeRef("System.Security.Principal.IIdentity"));

    $.Property({Static:false, Public:false}, "Issuances", $asm07.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm19.TypeRef("System.IdentityModel.Claims.ClaimSet")]));

    $.Property({Static:false, Public:true }, "ExpirationTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "IsDisposable", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationPolicy"), 
      /* 1 */ $asm19.TypeRef("System.IdentityModel.Policy.IAuthorizationComponent"), 
      /* 2 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IdentityModel.Configuration");
/* class System.IdentityModel.Configuration.ConfigurationElementInterceptor */ 

(function ConfigurationElementInterceptor$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.IdentityModel.Configuration.ConfigurationElementInterceptor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeElement", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChildNodes", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementAsXml", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserializeUnrecognizedAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserializeUnrecognizedElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false}, "elementXml", $asm2F.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:true }, "ElementAsXml", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true }, "ChildNodes", $asm2F.TypeRef("System.Xml.XmlNodeList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.ApplicationServiceConfigurationElement */ 

(function ApplicationServiceConfigurationElement$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Configuration.ConfigurationElementInterceptor"), 
      Name: "System.IdentityModel.Configuration.ApplicationServiceConfigurationElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.AudienceUriElement */ 

(function AudienceUriElement$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.IdentityModel.Configuration.AudienceUriElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "DefaultValue", $.String, " ");

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Value", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["value"]; })
      .Attribute($asm0E.TypeRef("System.Configuration.StringValidatorAttribute"));

    $.Property({Static:false, Public:false}, "IsConfigured", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.AudienceUriElementCollection */ 

(function AudienceUriElementCollection$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.IdentityModel.Configuration.AudienceUriElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Mode", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Mode", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"))
    );

    $.Constant({Static:true , Public:false}, "DefaultAudienceUriMode", $asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"), 1);

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Mode", $asm19.TypeRef("System.IdentityModel.Selectors.AudienceUriMode"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["mode"]; })
      .Attribute($asm19.TypeRef("System.IdentityModel.Configuration.StandardRuntimeEnumValidatorAttribute"), function () { return [$asm19.System.IdentityModel.Selectors.AudienceUriMode.__Type__]; });

    $.Property({Static:false, Public:false}, "IsConfigured", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm19.System.IdentityModel.Configuration.AudienceUriElement.__Type__]; });

})();

/* class System.IdentityModel.Configuration.ConfigurationStrings */ 

(function ConfigurationStrings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Configuration.ConfigurationStrings", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Add", $.String, "add");

    $.Constant({Static:true , Public:true }, "ApplicationService", $.String, "applicationService");

    $.Constant({Static:true , Public:true }, "AudienceUris", $.String, "audienceUris");

    $.Constant({Static:true , Public:true }, "AudienceUriMode", $.String, "audienceUriMode");

    $.Constant({Static:true , Public:true }, "Caches", $.String, "caches");

    $.Constant({Static:true , Public:true }, "Capacity", $.String, "capacity");

    $.Constant({Static:true , Public:true }, "CertificateReference", $.String, "certificateReference");

    $.Constant({Static:true , Public:true }, "ClaimsAuthenticationManager", $.String, "claimsAuthenticationManager");

    $.Constant({Static:true , Public:true }, "ClaimsAuthorizationManager", $.String, "claimsAuthorizationManager");

    $.Constant({Static:true , Public:true }, "Clear", $.String, "clear");

    $.Constant({Static:true , Public:true }, "Compression", $.String, "compression");

    $.Constant({Static:true , Public:true }, "CookieTransforms", $.String, "cookieTransforms");

    $.Constant({Static:true , Public:true }, "DefaultCollectionName", $.String, "");

    $.Constant({Static:true , Public:true }, "DefaultConfigurationElementName", $.String, "");

    $.Constant({Static:true , Public:true }, "DefaultServiceName", $.String, "");

    $.Constant({Static:true , Public:true }, "DetectReplayedTokens", $.String, "detectReplayedTokens");

    $.Constant({Static:true , Public:true }, "Enabled", $.String, "enabled");

    $.Constant({Static:true , Public:true }, "ExpirationPeriod", $.String, "expirationPeriod");

    $.Constant({Static:true , Public:true }, "FederatedAuthentication", $.String, "federatedAuthentication");

    $.Constant({Static:true , Public:true }, "FindValue", $.String, "findValue");

    $.Constant({Static:true , Public:true }, "IsChainIncluded", $.String, "isChainIncluded");

    $.Constant({Static:true , Public:true }, "IssuerNameRegistry", $.String, "issuerNameRegistry");

    $.Constant({Static:true , Public:true }, "IssuerTokenResolver", $.String, "issuerTokenResolver");

    $.Constant({Static:true , Public:true }, "IssuerCertificateRevocationMode", $.String, "issuerCertificateRevocationMode");

    $.Constant({Static:true , Public:true }, "IssuerCertificateTrustedStoreLocation", $.String, "issuerCertificateTrustedStoreLocation");

    $.Constant({Static:true , Public:true }, "IssuerCertificateValidationMode", $.String, "issuerCertificateValidationMode");

    $.Constant({Static:true , Public:true }, "IssuerCertificateValidator", $.String, "issuerCertificateValidator");

    $.Constant({Static:true , Public:true }, "KerberosTokenHandlerRequirement", $.String, "kerberosTokenHandlerRequirement");

    $.Constant({Static:true , Public:true }, "Lifetime", $.String, "lifetime");

    $.Constant({Static:true , Public:true }, "MapToWindows", $.String, "mapToWindows");

    $.Constant({Static:true , Public:true }, "MaximumClockSkew", $.String, "maximumClockSkew");

    $.Constant({Static:true , Public:true }, "MembershipProviderName", $.String, "membershipProviderName");

    $.Constant({Static:true , Public:true }, "Mode", $.String, "mode");

    $.Constant({Static:true , Public:true }, "IdentityConfiguration", $.String, "identityConfiguration");

    $.Constant({Static:true , Public:true }, "SystemIdentityModel", $.String, "system.identityModel");

    $.Constant({Static:true , Public:true }, "Name", $.String, "name");

    $.Constant({Static:true , Public:true }, "NameClaimType", $.String, "nameClaimType");

    $.Constant({Static:true , Public:true }, "PersistentSessionLifetime", $.String, "persistentSessionLifetime");

    $.Constant({Static:true , Public:true }, "Protection", $.String, "protection");

    $.Constant({Static:true , Public:true }, "PurgeInterval", $.String, "purgeInterval");

    $.Constant({Static:true , Public:true }, "Remove", $.String, "remove");

    $.Constant({Static:true , Public:true }, "RoleClaimType", $.String, "roleClaimType");

    $.Constant({Static:true , Public:true }, "ServiceCertificate", $.String, "serviceCertificate");

    $.Constant({Static:true , Public:true }, "SamlSecurityTokenRequirement", $.String, "samlSecurityTokenRequirement");

    $.Constant({Static:true , Public:true }, "SaveBootstrapContext", $.String, "saveBootstrapContext");

    $.Constant({Static:true , Public:true }, "ServiceTokenResolver", $.String, "serviceTokenResolver");

    $.Constant({Static:true , Public:true }, "SecurityTokenHandlerConfiguration", $.String, "securityTokenHandlerConfiguration");

    $.Constant({Static:true , Public:true }, "SecurityTokenHandlers", $.String, "securityTokenHandlers");

    $.Constant({Static:true , Public:true }, "SessionSecurityTokenCache", $.String, "sessionSecurityTokenCache");

    $.Constant({Static:true , Public:true }, "SessionTokenRequirement", $.String, "sessionTokenRequirement");

    $.Constant({Static:true , Public:true }, "SecurityTokenCacheType", $.String, "securityTokenCacheType");

    $.Constant({Static:true , Public:true }, "SecurityTokenCacheSize", $.String, "securityTokenCacheSize");

    $.Constant({Static:true , Public:true }, "StoreLocation", $.String, "storeLocation");

    $.Constant({Static:true , Public:true }, "StoreName", $.String, "storeName");

    $.Constant({Static:true , Public:true }, "Thumbprint", $.String, "thumbprint");

    $.Constant({Static:true , Public:true }, "TimeSpanZero", $.String, "00:00:00");

    $.Constant({Static:true , Public:true }, "TimeSpanMaxValue", $.String, "10675199.02:48:05.4775807");

    $.Constant({Static:true , Public:true }, "TokenReplayCache", $.String, "tokenReplayCache");

    $.Constant({Static:true , Public:true }, "TokenReplayDetection", $.String, "tokenReplayDetection");

    $.Constant({Static:true , Public:true }, "TransientSessionLifetime", $.String, "transientSessionLifetime");

    $.Constant({Static:true , Public:true }, "TrustedIssuers", $.String, "trustedIssuers");

    $.Constant({Static:true , Public:true }, "Type", $.String, "type");

    $.Constant({Static:true , Public:true }, "UserNameSecurityTokenHandlerRequirement", $.String, "userNameSecurityTokenHandlerRequirement");

    $.Constant({Static:true , Public:true }, "UseWindowsTokenService", $.String, "useWindowsTokenService");

    $.Constant({Static:true , Public:true }, "Value", $.String, "value");

    $.Constant({Static:true , Public:true }, "WindowsClaimsIdentity", $.String, "windowsClaimsIdentity");

    $.Constant({Static:true , Public:true }, "X509CertificateRevocationMode", $.String, "revocationMode");

    $.Constant({Static:true , Public:true }, "X509CertificateValidation", $.String, "certificateValidation");

    $.Constant({Static:true , Public:true }, "X509CertificateValidationMode", $.String, "certificateValidationMode");

    $.Constant({Static:true , Public:true }, "X509CertificateValidationModeChainTrust", $.String, "ChainTrust");

    $.Constant({Static:true , Public:true }, "X509CertificateValidationModeCustom", $.String, "Custom");

    $.Constant({Static:true , Public:true }, "X509CertificateValidationModeNone", $.String, "None");

    $.Constant({Static:true , Public:true }, "X509CertificateValidationModePeerTrust", $.String, "PeerTrust");

    $.Constant({Static:true , Public:true }, "X509CertificateValidationModePeerOrChainTrust", $.String, "PeerOrChainTrust");

    $.Constant({Static:true , Public:true }, "X509CertificateValidator", $.String, "certificateValidator");

    $.Constant({Static:true , Public:true }, "X509FindType", $.String, "x509FindType");

    $.Constant({Static:true , Public:true }, "X509RevocationModeNoCheck", $.String, "NoCheck");

    $.Constant({Static:true , Public:true }, "X509RevocationModeOnline", $.String, "Online");

    $.Constant({Static:true , Public:true }, "X509RevocationModeOffline", $.String, "Offline");

    $.Constant({Static:true , Public:true }, "X509SecurityTokenHandlerRequirement", $.String, "x509SecurityTokenHandlerRequirement");

    $.Constant({Static:true , Public:true }, "X509TrustedStoreLocation", $.String, "trustedStoreLocation");

    $.Constant({Static:true , Public:true }, "X509TrustedStoreLocationCurrentUser", $.String, "CurrentUser");

    $.Constant({Static:true , Public:true }, "X509TrustedStoreLocationLocalMachine", $.String, "LocalMachine");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.CustomTypeElement */ 

(function CustomTypeElement$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Configuration.ConfigurationElementInterceptor"), 
      Name: "System.IdentityModel.Configuration.CustomTypeElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Resolve", 
      new JSIL.MethodSignature("!!0", [$.Type], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "IsConfigured", $.Boolean);

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0E.System.Configuration.TypeNameConverter.__Type__]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.IdentityModel.Configuration.ICustomIdentityConfiguration */ 

JSIL.MakeInterface(
  "System.IdentityModel.Configuration.ICustomIdentityConfiguration", true, [], function ($) {
    $.Method({}, "LoadCustomConfiguration", JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlNodeList")));
  }, []);

/* class System.IdentityModel.Configuration.IdentityConfiguration */ 

(function IdentityConfiguration$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Configuration.IdentityConfiguration", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AudienceRestriction", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.AudienceRestriction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Caches", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelCaches"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateValidationMode", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateValidator", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimsAuthenticationManager", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.Security.Claims.ClaimsAuthenticationManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimsAuthorizationManager", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.Security.Claims.ClaimsAuthorizationManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DetectReplayedTokens", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInitialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuerNameRegistry", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.IssuerNameRegistry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuerTokenResolver", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KnownIssuerCertificates", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxClockSkew", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RevocationMode", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SaveBootstrapContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenHandlerCollectionManager", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenHandlers", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceCertificate", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceTokenResolver", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenReplayCacheExpirationPeriod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustedStoreLocation", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClaimsAuthenticationManager", 
      new JSIL.MethodSignature($asm19.TypeRef("System.Security.Claims.ClaimsAuthenticationManager"), [$asm19.TypeRef("System.IdentityModel.Configuration.IdentityConfigurationElement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIssuerNameRegistry", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.IssuerNameRegistry"), [$asm19.TypeRef("System.IdentityModel.Configuration.IssuerNameRegistryElement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIssuerTokenResolver", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), [$asm19.TypeRef("System.IdentityModel.Configuration.IdentityConfigurationElement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetServiceTokenResolver", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), [$asm19.TypeRef("System.IdentityModel.Configuration.IdentityConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadConfiguration", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.IdentityConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadHandlerConfiguration", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"), [$asm19.TypeRef("System.IdentityModel.Configuration.IdentityConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadHandlerConfiguration", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"), [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"), $asm19.TypeRef("System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadHandlers", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager"), [$asm19.TypeRef("System.IdentityModel.Configuration.IdentityConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AudienceRestriction", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.AudienceRestriction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Caches", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelCaches"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateValidationMode", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateValidator", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ClaimsAuthenticationManager", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.Security.Claims.ClaimsAuthenticationManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ClaimsAuthorizationManager", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.Security.Claims.ClaimsAuthorizationManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DetectReplayedTokens", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsInitialized", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IssuerNameRegistry", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.IssuerNameRegistry"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IssuerTokenResolver", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_KnownIssuerCertificates", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxClockSkew", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RevocationMode", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SaveBootstrapContext", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServiceCertificate", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServiceTokenResolver", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TokenReplayCacheExpirationPeriod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrustedStoreLocation", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"))
    );

    $.Constant({Static:true , Public:true }, "DefaultServiceName", $.String, "");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultMaxClockSkew", $asm07.TypeRef("System.TimeSpan"));

    $.Constant({Static:true , Public:false}, "DefaultMaxClockSkewString", $.String, "00:05:00");

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultCertificateValidationMode", $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"), function ($pi) {
        return $asm19.System.ServiceModel.Security.X509CertificateValidationMode.PeerOrChainTrust;
      });

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultIssuerNameRegistryType", $asm07.TypeRef("System.Type"), function ($pi) {
        return $asm19.System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.__Type__;
      });

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultRevocationMode", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"), function ($pi) {
        return $asm0A.System.Security.Cryptography.X509Certificates.X509RevocationMode.Online;
      });

    $.Field({Static:true , Public:true , ReadOnly:true }, "DefaultTrustedStoreLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"), function ($pi) {
        return $asm0A.System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine;
      });

    $.Field({Static:false, Public:false}, "_claimsAuthenticationManager", $asm19.TypeRef("System.Security.Claims.ClaimsAuthenticationManager"));

    $.Field({Static:false, Public:false}, "_claimsAuthorizationManager", $asm19.TypeRef("System.Security.Claims.ClaimsAuthorizationManager"));

    $.Field({Static:false, Public:false}, "_isInitialized", $.Boolean);

    $.Field({Static:false, Public:false}, "_securityTokenHandlerCollectionManager", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager"));

    $.Field({Static:false, Public:false}, "_identityConfigurationName", $.String);

    $.Field({Static:false, Public:false}, "_serviceMaxClockSkew", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "_serviceHandlerConfiguration", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"));

    $.Field({Static:false, Public:false}, "_serviceCertificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Field({Static:false, Public:false}, "knownCertificates", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")]));


    function IdentityConfiguration__cctor () {
      $thisType.DefaultMaxClockSkew = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      IdentityConfiguration__cctor
    );

    $.Property({Static:false, Public:true }, "AudienceRestriction", $asm19.TypeRef("System.IdentityModel.Tokens.AudienceRestriction"));

    $.Property({Static:false, Public:true }, "Caches", $asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelCaches"));

    $.Property({Static:false, Public:true }, "CertificateValidationMode", $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"));

    $.Property({Static:false, Public:true }, "CertificateValidator", $asm19.TypeRef("System.IdentityModel.Selectors.X509CertificateValidator"));

    $.Property({Static:false, Public:true }, "ClaimsAuthenticationManager", $asm19.TypeRef("System.Security.Claims.ClaimsAuthenticationManager"));

    $.Property({Static:false, Public:true }, "ClaimsAuthorizationManager", $asm19.TypeRef("System.Security.Claims.ClaimsAuthorizationManager"));

    $.Property({Static:false, Public:true }, "DetectReplayedTokens", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsInitialized", $.Boolean);

    $.Property({Static:false, Public:true }, "MaxClockSkew", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IssuerNameRegistry", $asm19.TypeRef("System.IdentityModel.Tokens.IssuerNameRegistry"));

    $.Property({Static:false, Public:true }, "ServiceCertificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:false}, "KnownIssuerCertificates", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")]));

    $.Property({Static:false, Public:true }, "IssuerTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Property({Static:false, Public:true }, "RevocationMode", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"));

    $.Property({Static:false, Public:true }, "ServiceTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Property({Static:false, Public:true }, "SaveBootstrapContext", $.Boolean);

    $.Property({Static:false, Public:true }, "SecurityTokenHandlerCollectionManager", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager"));

    $.Property({Static:false, Public:true }, "SecurityTokenHandlers", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"));

    $.Property({Static:false, Public:true }, "TokenReplayCacheExpirationPeriod", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "TrustedStoreLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.IdentityConfigurationElement */ 

(function IdentityConfigurationElement$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.IdentityModel.Configuration.IdentityConfigurationElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ApplicationService", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.ApplicationServiceConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AudienceUris", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.AudienceUriElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Caches", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelCachesElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateValidation", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.X509CertificateValidationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimsAuthenticationManager", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimsAuthorizationManager", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuerNameRegistry", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.IssuerNameRegistryElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuerTokenResolver", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumClockSkew", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SaveBootstrapContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenHandlerSets", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceTokenResolver", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenReplayDetection", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.TokenReplayDetectionElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ApplicationService", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.ApplicationServiceConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Caches", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelCachesElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateValidation", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.X509CertificateValidationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ClaimsAuthenticationManager", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ClaimsAuthorizationManager", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IssuerNameRegistry", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.IssuerNameRegistryElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IssuerTokenResolver", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaximumClockSkew", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SaveBootstrapContext", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServiceTokenResolver", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TokenReplayDetection", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.TokenReplayDetectionElement"))
    );

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; })
      .Attribute($asm0E.TypeRef("System.Configuration.StringValidatorAttribute"));

    $.Property({Static:false, Public:true }, "AudienceUris", $asm19.TypeRef("System.IdentityModel.Configuration.AudienceUriElementCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["audienceUris"]; });

    $.Property({Static:false, Public:true }, "Caches", $asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelCachesElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["caches"]; });

    $.Property({Static:false, Public:true }, "CertificateValidation", $asm19.TypeRef("System.IdentityModel.Configuration.X509CertificateValidationElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["certificateValidation"]; });

    $.Property({Static:false, Public:true }, "ClaimsAuthenticationManager", $asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["claimsAuthenticationManager"]; });

    $.Property({Static:false, Public:true }, "ClaimsAuthorizationManager", $asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["claimsAuthorizationManager"]; });

    $.Property({Static:false, Public:true }, "IssuerNameRegistry", $asm19.TypeRef("System.IdentityModel.Configuration.IssuerNameRegistryElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["issuerNameRegistry"]; });

    $.Property({Static:false, Public:true }, "IssuerTokenResolver", $asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["issuerTokenResolver"]; });

    $.Property({Static:false, Public:true }, "MaximumClockSkew", $asm07.TypeRef("System.TimeSpan"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["maximumClockSkew"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm19.System.IdentityModel.Configuration.TimeSpanOrInfiniteConverter.__Type__]; })
      .Attribute($asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelTimeSpanValidatorAttribute"));

    $.Property({Static:false, Public:true }, "SaveBootstrapContext", $.Boolean)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["saveBootstrapContext"]; });

    $.Property({Static:false, Public:true }, "ServiceTokenResolver", $asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["serviceTokenResolver"]; });

    $.Property({Static:false, Public:true }, "TokenReplayDetection", $asm19.TypeRef("System.IdentityModel.Configuration.TokenReplayDetectionElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["tokenReplayDetection"]; });

    $.Property({Static:false, Public:true }, "SecurityTokenHandlerSets", $asm19.TypeRef("System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:false}, "ApplicationService", $asm19.TypeRef("System.IdentityModel.Configuration.ApplicationServiceConfigurationElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["applicationService"]; });

    $.Property({Static:false, Public:false}, "IsConfigured", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.IdentityConfigurationElementCollection */ 

(function IdentityConfigurationElementCollection$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.IdentityModel.Configuration.IdentityConfigurationElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BaseAdd", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ThrowOnDuplicate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetElement", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Configuration.IdentityConfigurationElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ThrowOnDuplicate", $.Boolean);

    $.Property({Static:false, Public:false}, "IsConfigured", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm19.System.IdentityModel.Configuration.IdentityConfigurationElement.__Type__]; });

})();

/* class System.IdentityModel.Configuration.IdentityModelCaches */ 

(function IdentityModelCaches$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Configuration.IdentityModelCaches", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SessionSecurityTokenCache", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCache"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenReplayCache", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.TokenReplayCache"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SessionSecurityTokenCache", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCache"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TokenReplayCache", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.TokenReplayCache"))
    );

    $.Field({Static:false, Public:false}, "tokenReplayCache", $asm19.TypeRef("System.IdentityModel.Tokens.TokenReplayCache"));

    $.Field({Static:false, Public:false}, "sessionSecurityTokenCache", $asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCache"));

    $.Property({Static:false, Public:true }, "TokenReplayCache", $asm19.TypeRef("System.IdentityModel.Tokens.TokenReplayCache"));

    $.Property({Static:false, Public:true }, "SessionSecurityTokenCache", $asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenCache"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.IdentityModelCachesElement */ 

(function IdentityModelCachesElement$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.IdentityModel.Configuration.IdentityModelCachesElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SessionSecurityTokenCache", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenReplayCache", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SessionSecurityTokenCache", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TokenReplayCache", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "TokenReplayCache", $asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["tokenReplayCache"]; });

    $.Property({Static:false, Public:true }, "SessionSecurityTokenCache", $asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["sessionSecurityTokenCache"]; });

    $.Property({Static:false, Public:true }, "IsConfigured", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.IssuerNameRegistryElement */ 

(function IssuerNameRegistryElement$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Configuration.ConfigurationElementInterceptor"), 
      Name: "System.IdentityModel.Configuration.IssuerNameRegistryElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false}, "IsConfigured", $.Boolean);

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; })
      .Attribute($asm0E.TypeRef("System.Configuration.StringValidatorAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.X509CertificateValidationElement */ 

(function X509CertificateValidationElement$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.IdentityModel.Configuration.X509CertificateValidationElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateValidationMode", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateValidator", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RevocationMode", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustedStoreLocation", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateValidationMode", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateValidator", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RevocationMode", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TrustedStoreLocation", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Constant({Static:true , Public:false}, "DefaultX509CertificateValidationMode", $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"), 3);

    $.Constant({Static:true , Public:false}, "DefaultX509RevocationMode", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"), 1);

    $.Constant({Static:true , Public:false}, "DefaultStoreLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"), 2);

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "CertificateValidationMode", $asm19.TypeRef("System.ServiceModel.Security.X509CertificateValidationMode"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["certificateValidationMode"]; })
      .Attribute($asm19.TypeRef("System.IdentityModel.Configuration.StandardRuntimeEnumValidatorAttribute"), function () { return [$asm19.System.ServiceModel.Security.X509CertificateValidationMode.__Type__]; });

    $.Property({Static:false, Public:true }, "RevocationMode", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["revocationMode"]; })
      .Attribute($asm19.TypeRef("System.IdentityModel.Configuration.StandardRuntimeEnumValidatorAttribute"), function () { return [$asm0A.System.Security.Cryptography.X509Certificates.X509RevocationMode.__Type__]; });

    $.Property({Static:false, Public:true }, "TrustedStoreLocation", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.StoreLocation"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["trustedStoreLocation"]; })
      .Attribute($asm19.TypeRef("System.IdentityModel.Configuration.StandardRuntimeEnumValidatorAttribute"), function () { return [$asm0A.System.Security.Cryptography.X509Certificates.StoreLocation.__Type__]; });

    $.Property({Static:false, Public:true }, "CertificateValidator", $asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["certificateValidator"]; });

    $.Property({Static:false, Public:false}, "IsConfigured", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement */ 

(function SecurityTokenHandlerConfigurationElement$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AudienceUris", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.AudienceUriElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Caches", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelCachesElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CertificateValidation", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.X509CertificateValidationElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuerNameRegistry", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.IssuerNameRegistryElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuerTokenResolver", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumClockSkew", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SaveBootstrapContext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceTokenResolver", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenReplayDetection", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.TokenReplayDetectionElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Caches", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelCachesElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CertificateValidation", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.X509CertificateValidationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IssuerNameRegistry", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.IssuerNameRegistryElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IssuerTokenResolver", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaximumClockSkew", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SaveBootstrapContext", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ServiceTokenResolver", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TokenReplayDetection", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.TokenReplayDetectionElement"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "AudienceUris", $asm19.TypeRef("System.IdentityModel.Configuration.AudienceUriElementCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["audienceUris"]; });

    $.Property({Static:false, Public:true }, "Caches", $asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelCachesElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["caches"]; });

    $.Property({Static:false, Public:true }, "CertificateValidation", $asm19.TypeRef("System.IdentityModel.Configuration.X509CertificateValidationElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["certificateValidation"]; });

    $.Property({Static:false, Public:true }, "IssuerNameRegistry", $asm19.TypeRef("System.IdentityModel.Configuration.IssuerNameRegistryElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["issuerNameRegistry"]; });

    $.Property({Static:false, Public:true }, "IssuerTokenResolver", $asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["issuerTokenResolver"]; });

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; })
      .Attribute($asm0E.TypeRef("System.Configuration.StringValidatorAttribute"));

    $.Property({Static:false, Public:true }, "SaveBootstrapContext", $.Boolean)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["saveBootstrapContext"]; });

    $.Property({Static:false, Public:true }, "MaximumClockSkew", $asm07.TypeRef("System.TimeSpan"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["maximumClockSkew"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm19.System.IdentityModel.Configuration.TimeSpanOrInfiniteConverter.__Type__]; })
      .Attribute($asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelTimeSpanValidatorAttribute"));

    $.Property({Static:false, Public:true }, "ServiceTokenResolver", $asm19.TypeRef("System.IdentityModel.Configuration.CustomTypeElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["serviceTokenResolver"]; });

    $.Property({Static:false, Public:true }, "TokenReplayDetection", $asm19.TypeRef("System.IdentityModel.Configuration.TokenReplayDetectionElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["tokenReplayDetection"]; });

    $.Property({Static:false, Public:false}, "IsConfigured", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection */ 

(function SecurityTokenHandlerElementCollection$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenHandlerConfiguration", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityTokenHandlerConfiguration", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; })
      .Attribute($asm0E.TypeRef("System.Configuration.StringValidatorAttribute"));

    $.Property({Static:false, Public:true }, "SecurityTokenHandlerConfiguration", $asm19.TypeRef("System.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["securityTokenHandlerConfiguration"]; });

    $.Property({Static:false, Public:false}, "IsConfigured", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm19.System.IdentityModel.Configuration.CustomTypeElement.__Type__]; });

})();

/* class System.IdentityModel.Configuration.TokenReplayDetectionElement */ 

(function TokenReplayDetectionElement$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.IdentityModel.Configuration.TokenReplayDetectionElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExpirationPeriod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Enabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExpirationPeriod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0E.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Enabled", $.Boolean)
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["enabled"]; });

    $.Property({Static:false, Public:true }, "ExpirationPeriod", $asm07.TypeRef("System.TimeSpan"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["expirationPeriod"]; })
      .Attribute($asm0A.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm19.System.IdentityModel.Configuration.TimeSpanOrInfiniteConverter.__Type__]; })
      .Attribute($asm19.TypeRef("System.IdentityModel.Configuration.IdentityModelTimeSpanValidatorAttribute"));

    $.Property({Static:false, Public:false}, "IsConfigured", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.SecurityTokenServiceConfiguration */ 

(function SecurityTokenServiceConfiguration$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Configuration.IdentityConfiguration"), 
      Name: "System.IdentityModel.Configuration.SecurityTokenServiceConfiguration", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSecurityTokenService", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.SecurityTokenService"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultMaxSymmetricKeySizeInBits", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultSymmetricKeySizeInBits", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultTokenLifetime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultTokenType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisableWsdl", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumTokenLifetime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenService", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenIssuerName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WSTrust13RequestSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WSTrust13ResponseSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WSTrustFeb2005RequestSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WSTrustFeb2005ResponseSerializer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultMaxSymmetricKeySizeInBits", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultSymmetricKeySizeInBits", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultTokenLifetime", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultTokenType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DisableWsdl", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaximumTokenLifetime", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityTokenService", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SigningCredentials", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TokenIssuerName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WSTrust13RequestSerializer", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WSTrust13ResponseSerializer", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WSTrustFeb2005RequestSerializer", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WSTrustFeb2005ResponseSerializer", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer"))
    );

    $.Field({Static:false, Public:false}, "_tokenIssuerName", $.String);

    $.Field({Static:false, Public:false}, "_signingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Field({Static:false, Public:false}, "_defaultTokenLifetime", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "_maximumTokenLifetime", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "_defaultTokenType", $.String);

    $.Constant({Static:true , Public:false}, "DefaultKeySizeInBitsConstant", $.Int32, 256);

    $.Field({Static:false, Public:false}, "_defaultSymmetricKeySizeInBits", $.Int32);

    $.Field({Static:false, Public:false}, "_defaultMaxSymmetricKeySizeInBits", $.Int32);

    $.Field({Static:false, Public:false}, "_disableWsdl", $.Boolean);

    $.Field({Static:false, Public:false}, "_securityTokenServiceType", $asm07.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "_wsTrust13RequestSerializer", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer"));

    $.Field({Static:false, Public:false}, "_wsTrust13ResponseSerializer", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer"));

    $.Field({Static:false, Public:false}, "_wsTrustFeb2005RequestSerializer", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer"));

    $.Field({Static:false, Public:false}, "_wsTrustFeb2005ResponseSerializer", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer"));

    $.Property({Static:false, Public:true }, "SecurityTokenService", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "DefaultSymmetricKeySizeInBits", $.Int32);

    $.Property({Static:false, Public:true }, "DefaultMaxSymmetricKeySizeInBits", $.Int32);

    $.Property({Static:false, Public:true }, "DefaultTokenLifetime", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "DefaultTokenType", $.String);

    $.Property({Static:false, Public:true }, "DisableWsdl", $.Boolean);

    $.Property({Static:false, Public:true }, "MaximumTokenLifetime", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "SigningCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.SigningCredentials"));

    $.Property({Static:false, Public:true }, "TokenIssuerName", $.String);

    $.Property({Static:false, Public:true }, "WSTrust13RequestSerializer", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer"));

    $.Property({Static:false, Public:true }, "WSTrust13ResponseSerializer", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer"));

    $.Property({Static:false, Public:true }, "WSTrustFeb2005RequestSerializer", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer"));

    $.Property({Static:false, Public:true }, "WSTrustFeb2005ResponseSerializer", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection */ 

(function SecurityTokenHandlerSetElementCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BaseAdd", 
      JSIL.MethodSignature.Action($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ThrowOnDuplicate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ThrowOnDuplicate", $.Boolean);

    $.Property({Static:false, Public:true }, "IsConfigured", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm19.System.IdentityModel.Configuration.SecurityTokenHandlerElementCollection.__Type__]; });

})();

/* class System.IdentityModel.Configuration.StandardRuntimeEnumValidator */ 

(function StandardRuntimeEnumValidator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationValidatorBase"), 
      Name: "System.IdentityModel.Configuration.StandardRuntimeEnumValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "enumType", $asm07.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.StandardRuntimeEnumValidatorAttribute */ 

(function StandardRuntimeEnumValidatorAttribute$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationValidatorAttribute"), 
      Name: "System.IdentityModel.Configuration.StandardRuntimeEnumValidatorAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnumType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationValidatorBase"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnumType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "enumType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "EnumType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm0E.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Property]; });

})();

/* class System.IdentityModel.Configuration.SystemIdentityModelSection */ 

(function SystemIdentityModelSection$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.IdentityModel.Configuration.SystemIdentityModelSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultIdentityConfigurationElement", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.IdentityConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IdentityConfigurationElements", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Configuration.IdentityConfigurationElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConfigured", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Constant({Static:true , Public:true }, "SectionName", $.String, "system.identityModel");

    $.Property({Static:true , Public:true }, "Current", $.Type);

    $.Property({Static:true , Public:true }, "DefaultIdentityConfigurationElement", $asm19.TypeRef("System.IdentityModel.Configuration.IdentityConfigurationElement"));

    $.Property({Static:false, Public:true }, "IdentityConfigurationElements", $asm19.TypeRef("System.IdentityModel.Configuration.IdentityConfigurationElementCollection"))
      .Attribute($asm0E.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:false}, "IsConfigured", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.TypeResolveHelper */ 

(function TypeResolveHelper$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Configuration.TypeResolveHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Resolve", 
      new JSIL.MethodSignature("!!0", [$asm19.TypeRef("System.IdentityModel.Configuration.ConfigurationElementInterceptor"), $asm07.TypeRef("System.Type")], ["T"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.IdentityModelTimeSpanValidatorAttribute */ 

(function IdentityModelTimeSpanValidatorAttribute$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.ConfigurationValidatorAttribute"), 
      Name: "System.IdentityModel.Configuration.IdentityModelTimeSpanValidatorAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxValueString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinValue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinValueString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      JSIL.MethodSignature.Return($asm0E.TypeRef("System.Configuration.ConfigurationValidatorBase"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxValueString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinValueString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "innerValidatorAttribute", $asm0E.TypeRef("System.Configuration.TimeSpanValidatorAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm0E.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:true }, "MinValue", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "MinValueString", $.String);

    $.Property({Static:false, Public:true }, "MaxValue", $asm07.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "MaxValueString", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Property]; });

})();

/* class System.IdentityModel.Configuration.TimeSpanOrInfiniteValidator */ 

(function TimeSpanOrInfiniteValidator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Configuration.TimeSpanValidator"), 
      Name: "System.IdentityModel.Configuration.TimeSpanOrInfiniteValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Configuration.TimeSpanOrInfiniteConverter */ 

(function TimeSpanOrInfiniteConverter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("System.ComponentModel.TimeSpanConverter"), 
      Name: "System.IdentityModel.Configuration.TimeSpanOrInfiniteConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0A.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm07.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm07.TypeRef("System.Type")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.Claim */ 

(function Claim$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Claims.Claim", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.String, $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDenyOnlyWindowsSidClaim", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Security.Principal.SecurityIdentifier")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDnsClaim", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateHashClaim", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMailAddressClaim", 
      new JSIL.MethodSignature($.Type, [$asm0A.TypeRef("System.Net.Mail.MailAddress")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateNameClaim", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRsaClaim", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Security.Cryptography.RSA")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateSpnClaim", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateThumbprintClaim", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateUpnClaim", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateUriClaim", 
      new JSIL.MethodSignature($.Type, [$asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateWindowsSidClaim", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Security.Principal.SecurityIdentifier")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateX500DistinguishedNameClaim", 
      new JSIL.MethodSignature($.Type, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X500DistinguishedName")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultComparer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Resource", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_System", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "system", $.Type);

    $.Field({Static:false, Public:false}, "claimType", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "resource", $.Object)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "right", $.String)
      .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Field({Static:false, Public:false}, "comparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.Type]));

    $.Property({Static:true , Public:true }, "DefaultComparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.Type]));

    $.Property({Static:true , Public:true }, "System", $.Type);

    $.Property({Static:false, Public:true }, "Resource", $.Object);

    $.Property({Static:false, Public:true }, "ClaimType", $.String);

    $.Property({Static:false, Public:true }, "Right", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm21.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class System.IdentityModel.Claims.ClaimComparer */ 

(function ClaimComparer$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Claims.ClaimComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.IEqualityComparer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm19.TypeRef("System.IdentityModel.Claims.Claim"), $asm19.TypeRef("System.IdentityModel.Claims.Claim")])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Default", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Dns", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Hash", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Rsa", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Thumbprint", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Upn", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_X500DistinguishedName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetComparer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm19.TypeRef("System.IdentityModel.Claims.Claim")])
    );

    $.Field({Static:true , Public:false}, "defaultComparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Field({Static:true , Public:false}, "hashComparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Field({Static:true , Public:false}, "dnsComparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Field({Static:true , Public:false}, "rsaComparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Field({Static:true , Public:false}, "thumbprintComparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Field({Static:true , Public:false}, "upnComparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Field({Static:true , Public:false}, "x500DistinguishedNameComparer", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Field({Static:false, Public:false}, "resourceComparer", $asm07.TypeRef("System.Collections.IEqualityComparer"));

    $.Property({Static:true , Public:true }, "Default", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Property({Static:true , Public:true }, "Dns", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Property({Static:true , Public:true }, "Hash", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Property({Static:true , Public:true }, "Rsa", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Property({Static:true , Public:true }, "Thumbprint", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Property({Static:true , Public:true }, "Upn", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Property({Static:true , Public:true }, "X500DistinguishedName", $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.ClaimComparer+ObjectComparer */ 

(function ObjectComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Claims.ClaimComparer+ObjectComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IEqualityComparer"), "Equals");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IEqualityComparer"), "GetHashCode");

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEqualityComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.ClaimComparer+BinaryObjectComparer */ 

(function BinaryObjectComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Claims.ClaimComparer+BinaryObjectComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IEqualityComparer"), "Equals");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IEqualityComparer"), "GetHashCode");

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEqualityComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.ClaimComparer+RsaObjectComparer */ 

(function RsaObjectComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Claims.ClaimComparer+RsaObjectComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IEqualityComparer"), "Equals");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IEqualityComparer"), "GetHashCode");

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEqualityComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.ClaimComparer+X500DistinguishedNameObjectComparer */ 

(function X500DistinguishedNameObjectComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Claims.ClaimComparer+X500DistinguishedNameObjectComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IEqualityComparer"), "Equals");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IEqualityComparer"), "GetHashCode");

    $.Field({Static:false, Public:false}, "binaryComparer", $asm07.TypeRef("System.Collections.IEqualityComparer"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEqualityComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.ClaimComparer+UpnObjectComparer */ 

(function UpnObjectComparer$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Claims.ClaimComparer+UpnObjectComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IEqualityComparer"), "Equals");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm07.TypeRef("System.Collections.IEqualityComparer"), "GetHashCode");

    $.ExternalMethod({Static:false, Public:false}, "TryLookupSidFromName", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Security.Principal.SecurityIdentifier")])])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEqualityComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.ClaimTypes */ 

(function ClaimTypes$Members () {
  var $, $thisType;
































  JSIL.MakeStaticClass("System.IdentityModel.Claims.ClaimTypes", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_Anonymous", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Authentication", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AuthorizationDecision", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Country", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DateOfBirth", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DenyOnlySid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Dns", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Email", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Gender", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GivenName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Hash", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_HomePhone", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Locality", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MobilePhone", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_NameIdentifier", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OtherPhone", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PostalCode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PPID", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Rsa", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Spn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_StateOrProvince", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_StreetAddress", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Surname", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_System", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Thumbprint", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Upn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Uri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Webpage", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_X500DistinguishedName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "claimTypeNamespace", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims");

    $.Constant({Static:true , Public:false}, "anonymous", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/anonymous");

    $.Constant({Static:true , Public:false}, "dns", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dns");

    $.Constant({Static:true , Public:false}, "email", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress");

    $.Constant({Static:true , Public:false}, "hash", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/hash");

    $.Constant({Static:true , Public:false}, "$name", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name");

    $.Constant({Static:true , Public:false}, "rsa", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/rsa");

    $.Constant({Static:true , Public:false}, "sid", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/sid");

    $.Constant({Static:true , Public:false}, "denyOnlySid", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/denyonlysid");

    $.Constant({Static:true , Public:false}, "spn", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/spn");

    $.Constant({Static:true , Public:false}, "system", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/system");

    $.Constant({Static:true , Public:false}, "thumbprint", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/thumbprint");

    $.Constant({Static:true , Public:false}, "upn", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn");

    $.Constant({Static:true , Public:false}, "uri", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/uri");

    $.Constant({Static:true , Public:false}, "x500DistinguishedName", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/x500distinguishedname");

    $.Constant({Static:true , Public:false}, "givenname", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname");

    $.Constant({Static:true , Public:false}, "surname", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname");

    $.Constant({Static:true , Public:false}, "streetaddress", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/streetaddress");

    $.Constant({Static:true , Public:false}, "locality", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/locality");

    $.Constant({Static:true , Public:false}, "stateorprovince", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/stateorprovince");

    $.Constant({Static:true , Public:false}, "postalcode", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/postalcode");

    $.Constant({Static:true , Public:false}, "country", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country");

    $.Constant({Static:true , Public:false}, "homephone", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/homephone");

    $.Constant({Static:true , Public:false}, "otherphone", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/otherphone");

    $.Constant({Static:true , Public:false}, "mobilephone", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/mobilephone");

    $.Constant({Static:true , Public:false}, "dateofbirth", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth");

    $.Constant({Static:true , Public:false}, "gender", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/gender");

    $.Constant({Static:true , Public:false}, "ppid", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/privatepersonalidentifier");

    $.Constant({Static:true , Public:false}, "webpage", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/webpage");

    $.Constant({Static:true , Public:false}, "nameidentifier", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier");

    $.Constant({Static:true , Public:false}, "authentication", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication");

    $.Constant({Static:true , Public:false}, "authorizationdecision", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authorizationdecision");

    $.Property({Static:true , Public:true }, "Anonymous", $.String);

    $.Property({Static:true , Public:true }, "DenyOnlySid", $.String);

    $.Property({Static:true , Public:true }, "Dns", $.String);

    $.Property({Static:true , Public:true }, "Email", $.String);

    $.Property({Static:true , Public:true }, "Hash", $.String);

    $.Property({Static:true , Public:true }, "Name", $.String);

    $.Property({Static:true , Public:true }, "Rsa", $.String);

    $.Property({Static:true , Public:true }, "Sid", $.String);

    $.Property({Static:true , Public:true }, "Spn", $.String);

    $.Property({Static:true , Public:true }, "System", $.String);

    $.Property({Static:true , Public:true }, "Thumbprint", $.String);

    $.Property({Static:true , Public:true }, "Upn", $.String);

    $.Property({Static:true , Public:true }, "Uri", $.String);

    $.Property({Static:true , Public:true }, "X500DistinguishedName", $.String);

    $.Property({Static:true , Public:true }, "NameIdentifier", $.String);

    $.Property({Static:true , Public:true }, "Authentication", $.String);

    $.Property({Static:true , Public:true }, "AuthorizationDecision", $.String);

    $.Property({Static:true , Public:true }, "GivenName", $.String);

    $.Property({Static:true , Public:true }, "Surname", $.String);

    $.Property({Static:true , Public:true }, "StreetAddress", $.String);

    $.Property({Static:true , Public:true }, "Locality", $.String);

    $.Property({Static:true , Public:true }, "StateOrProvince", $.String);

    $.Property({Static:true , Public:true }, "PostalCode", $.String);

    $.Property({Static:true , Public:true }, "Country", $.String);

    $.Property({Static:true , Public:true }, "HomePhone", $.String);

    $.Property({Static:true , Public:true }, "OtherPhone", $.String);

    $.Property({Static:true , Public:true }, "MobilePhone", $.String);

    $.Property({Static:true , Public:true }, "DateOfBirth", $.String);

    $.Property({Static:true , Public:true }, "Gender", $.String);

    $.Property({Static:true , Public:true }, "PPID", $.String);

    $.Property({Static:true , Public:true }, "Webpage", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.Rights */ 

(function Rights$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.IdentityModel.Claims.Rights", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_Identity", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PossessProperty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "rightNamespace", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/right");

    $.Constant({Static:true , Public:false}, "identity", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/right/identity");

    $.Constant({Static:true , Public:false}, "possessProperty", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/right/possessproperty");

    $.Property({Static:true , Public:true }, "Identity", $.String);

    $.Property({Static:true , Public:true }, "PossessProperty", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.WindowsClaimSet */ 

(function WindowsClaimSet$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), 
      Name: "System.IdentityModel.Claims.WindowsClaimSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Principal.WindowsIdentity"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Principal.WindowsIdentity"), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.WindowsIdentity"), $.Boolean, 
          $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.WindowsIdentity"), $.String, 
          $.Boolean, $asm07.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.WindowsIdentity"), $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Principal.WindowsIdentity"), $.String, 
          $.Boolean, $asm07.TypeRef("System.DateTime"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureClaims", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindClaims", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), [$.String, $.String])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm19.System.IdentityModel.Claims.WindowsClaimSet_$lFindClaims$gd__36.__Type__]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExpirationTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Groups", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Claims.WindowsClaimSet+GroupSidClaimCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Issuer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Claims.Claim"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WindowsIdentity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTokenInformation", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.SafeHGlobalHandle"), [
          $.IntPtr, $asm19.TypeRef("System.IdentityModel.TokenInformationClass"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "InitializeClaimsCore", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SupportedClaimType", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IIdentityInfo.get_Identity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.IIdentity"))
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.Policy.IIdentityInfo"), "get_Identity");

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "TryCreateWindowsSidClaim", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Security.Principal.WindowsIdentity"), $jsilcore.TypeRef("JSIL.Reference", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "DefaultIncludeWindowsGroups", $.Boolean, true);

    $.Field({Static:false, Public:false}, "windowsIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Field({Static:false, Public:false}, "expirationTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "includeWindowsGroups", $.Boolean);

    $.Field({Static:false, Public:false}, "claims", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Field({Static:false, Public:false}, "groups", $asm19.TypeRef("System.IdentityModel.Claims.WindowsClaimSet+GroupSidClaimCollection"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "authenticationType", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm19.TypeRef("System.IdentityModel.Claims.Claim"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IIdentityInfo.Identity", $asm07.TypeRef("System.Security.Principal.IIdentity"));

    $.Property({Static:false, Public:true }, "WindowsIdentity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));

    $.Property({Static:false, Public:true , Virtual:true }, "Issuer", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"));

    $.Property({Static:false, Public:true }, "ExpirationTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:false}, "Groups", $asm19.TypeRef("System.IdentityModel.Claims.WindowsClaimSet+GroupSidClaimCollection"));

    $.ImplementInterfaces(
      /* 2 */ $asm19.TypeRef("System.IdentityModel.Policy.IIdentityInfo"), 
      /* 3 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.IdentityModel.Claims.WindowsClaimSet+GroupSidClaimCollection */ 

(function GroupSidClaimCollection$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), 
      Name: "System.IdentityModel.Claims.WindowsClaimSet+GroupSidClaimCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Principal.WindowsIdentity"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.WindowsClaimSet+<FindClaims>d__36 */ 

(function $lFindClaims$gd__36$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Claims.WindowsClaimSet+<FindClaims>d__36", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.IdentityModel.Claims.Claim$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.IdentityModel.Claims.Claim$g.get_Current", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Claims.Claim"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm19.TypeRef("System.IdentityModel.Claims.Claim"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm19.TypeRef("System.IdentityModel.Claims.WindowsClaimSet"));

    $.Field({Static:false, Public:false}, "claimType", $.String);

    $.Field({Static:false, Public:true }, "$l$g3__claimType", $.String);

    $.Field({Static:false, Public:false}, "right", $.String);

    $.Field({Static:false, Public:true }, "$l$g3__right", $.String);

    $.Field({Static:false, Public:false}, "$li$g5__1", $.Int32);

    $.Field({Static:false, Public:false}, "$lanyClaimType$g5__2", $.Boolean);

    $.Field({Static:false, Public:false}, "$lanyRight$g5__3", $.Boolean);

    $.Field({Static:false, Public:false}, "$li$g5__4", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.IdentityModel.Claims.Claim$g.Current", $asm19.TypeRef("System.IdentityModel.Claims.Claim"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.IdentityModel.Claims.X509CertificateClaimSet */ 

(function X509CertificateClaimSet$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"), 
      Name: "System.IdentityModel.Claims.X509CertificateClaimSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainElementCollection"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureClaims", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindClaims", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), [$.String, $.String])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm19.System.IdentityModel.Claims.X509CertificateClaimSet_$lFindClaims$gd__29.__Type__]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExpirationTime", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Issuer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Claims.Claim"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_X509Certificate", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDnsClaims", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), [$asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeClaimsCore", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SupportedClaimType", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IIdentityInfo.get_Identity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.IIdentity"))
    )
      .Overrides($asm19.TypeRef("System.IdentityModel.Policy.IIdentityInfo"), "get_Identity");

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Field({Static:false, Public:false}, "expirationTime", $asm07.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "issuer", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"));

    $.Field({Static:false, Public:false}, "identity", $asm19.TypeRef("System.IdentityModel.Claims.X509Identity"));

    $.Field({Static:false, Public:false}, "elements", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509ChainElementCollection"));

    $.Field({Static:false, Public:false}, "claims", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm19.TypeRef("System.IdentityModel.Claims.Claim"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IdentityModel.Policy.IIdentityInfo.Identity", $asm07.TypeRef("System.Security.Principal.IIdentity"));

    $.Property({Static:false, Public:true }, "ExpirationTime", $asm07.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "Issuer", $asm19.TypeRef("System.IdentityModel.Claims.ClaimSet"));

    $.Property({Static:false, Public:true }, "X509Certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.ImplementInterfaces(
      /* 2 */ $asm19.TypeRef("System.IdentityModel.Policy.IIdentityInfo"), 
      /* 3 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.IdentityModel.Claims.X509CertificateClaimSet+X500DistinguishedNameClaimSet */ 

(function X500DistinguishedNameClaimSet$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Claims.DefaultClaimSet"), 
      Name: "System.IdentityModel.Claims.X509CertificateClaimSet+X500DistinguishedNameClaimSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X500DistinguishedName"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Identity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Principal.IIdentity"))
    );

    $.Field({Static:false, Public:false}, "identity", $asm07.TypeRef("System.Security.Principal.IIdentity"));

    $.Property({Static:false, Public:true , Virtual:true }, "Identity", $asm07.TypeRef("System.Security.Principal.IIdentity"));

    $.ImplementInterfaces(
      /* 2 */ $asm19.TypeRef("System.IdentityModel.Policy.IIdentityInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.X509CertificateClaimSet+X509SubjectAlternativeNameConstants */ 

(function X509SubjectAlternativeNameConstants$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Char)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm07.System.String))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };


  function X509SubjectAlternativeNameConstants_get_Delimiter () {
    return $thisType.X509SubjectAlternativeNameConstants$Delimiter$value;
  }; 

  function X509SubjectAlternativeNameConstants_get_Identifier () {
    return $thisType.X509SubjectAlternativeNameConstants$Identifier$value;
  }; 

  function X509SubjectAlternativeNameConstants_get_Separator () {
    return $thisType.X509SubjectAlternativeNameConstants$Separator$value;
  }; 

  function X509SubjectAlternativeNameConstants_get_SeparatorArray () {
    return $thisType.X509SubjectAlternativeNameConstants$SeparatorArray$value;
  }; 

  function X509SubjectAlternativeNameConstants_get_SuccessfullyInitialized () {
    return $thisType.X509SubjectAlternativeNameConstants$SuccessfullyInitialized$value;
  }; 

  function X509SubjectAlternativeNameConstants_set_Delimiter (value) {
    $thisType.X509SubjectAlternativeNameConstants$Delimiter$value = value;
  }; 

  function X509SubjectAlternativeNameConstants_set_Identifier (value) {
    $thisType.X509SubjectAlternativeNameConstants$Identifier$value = value;
  }; 

  function X509SubjectAlternativeNameConstants_set_Separator (value) {
    $thisType.X509SubjectAlternativeNameConstants$Separator$value = value;
  }; 

  function X509SubjectAlternativeNameConstants_set_SeparatorArray (value) {
    $thisType.X509SubjectAlternativeNameConstants$SeparatorArray$value = value;
  }; 

  function X509SubjectAlternativeNameConstants_set_SuccessfullyInitialized (value) {
    $thisType.X509SubjectAlternativeNameConstants$SuccessfullyInitialized$value = value;
  }; 

  JSIL.MakeStaticClass("System.IdentityModel.Claims.X509CertificateClaimSet+X509SubjectAlternativeNameConstants", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "get_Delimiter", 
      JSIL.MethodSignature.Return($.Char), 
      X509SubjectAlternativeNameConstants_get_Delimiter
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Identifier", 
      JSIL.MethodSignature.Return($.String), 
      X509SubjectAlternativeNameConstants_get_Identifier
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Separator", 
      JSIL.MethodSignature.Return($.String), 
      X509SubjectAlternativeNameConstants_get_Separator
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_SeparatorArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String])), 
      X509SubjectAlternativeNameConstants_get_SeparatorArray
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_SuccessfullyInitialized", 
      JSIL.MethodSignature.Return($.Boolean), 
      X509SubjectAlternativeNameConstants_get_SuccessfullyInitialized
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Delimiter", 
      JSIL.MethodSignature.Action($.Char), 
      X509SubjectAlternativeNameConstants_set_Delimiter
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Identifier", 
      JSIL.MethodSignature.Action($.String), 
      X509SubjectAlternativeNameConstants_set_Identifier
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_Separator", 
      JSIL.MethodSignature.Action($.String), 
      X509SubjectAlternativeNameConstants_set_Separator
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_SeparatorArray", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String])), 
      X509SubjectAlternativeNameConstants_set_SeparatorArray
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:false}, "set_SuccessfullyInitialized", 
      JSIL.MethodSignature.Action($.Boolean), 
      X509SubjectAlternativeNameConstants_set_SuccessfullyInitialized
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Constant({Static:true , Public:true }, "SanOid", $.String, "2.5.29.7");

    $.Constant({Static:true , Public:true }, "San2Oid", $.String, "2.5.29.17");

    $.Field({Static:true , Public:false}, "X509SubjectAlternativeNameConstants$Identifier$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false}, "X509SubjectAlternativeNameConstants$Delimiter$value", $.Char)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false}, "X509SubjectAlternativeNameConstants$Separator$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false}, "X509SubjectAlternativeNameConstants$SeparatorArray$value", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:true , Public:false}, "X509SubjectAlternativeNameConstants$SuccessfullyInitialized$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:true , Public:true }, "Identifier", $.String);

    $.Property({Static:true , Public:true }, "Delimiter", $.Char);

    $.Property({Static:true , Public:true }, "Separator", $.String);

    $.Property({Static:true , Public:true }, "SeparatorArray", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:true , Public:true }, "SuccessfullyInitialized", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.X509CertificateClaimSet+<FindClaims>d__29 */ 

(function $lFindClaims$gd__29$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Claims.X509CertificateClaimSet+<FindClaims>d__29", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.IdentityModel.Claims.Claim$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.IdentityModel.Claims.Claim$g.get_Current", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Claims.Claim"))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm19.TypeRef("System.IdentityModel.Claims.Claim"));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm19.TypeRef("System.IdentityModel.Claims.X509CertificateClaimSet"));

    $.Field({Static:false, Public:false}, "claimType", $.String);

    $.Field({Static:false, Public:true }, "$l$g3__claimType", $.String);

    $.Field({Static:false, Public:false}, "right", $.String);

    $.Field({Static:false, Public:true }, "$l$g3__right", $.String);

    $.Field({Static:false, Public:false}, "$lanyClaimType$g5__1", $.Boolean);

    $.Field({Static:false, Public:false}, "$lanyRight$g5__2", $.Boolean);

    $.Field({Static:false, Public:false}, "$li$g5__3", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.List`1+Enumerator", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.IdentityModel.Claims.Claim$g.Current", $asm19.TypeRef("System.IdentityModel.Claims.Claim"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm19.TypeRef("System.IdentityModel.Claims.Claim")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.IdentityModel.Claims.X509Identity */ 

(function X509Identity$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Security.Principal.GenericIdentity"), 
      Name: "System.IdentityModel.Claims.X509Identity", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X500DistinguishedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Security.Claims.ClaimsIdentity"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "X509", $.String, "X509");

    $.Constant({Static:true , Public:false}, "Thumbprint", $.String, "; ");

    $.Field({Static:false, Public:false}, "x500DistinguishedName", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X500DistinguishedName"));

    $.Field({Static:false, Public:false}, "certificate", $asm0A.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "disposable", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.XsiConstants */ 

(function XsiConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Claims.XsiConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity");

    $.Constant({Static:true , Public:true }, "System", $.String, "System");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Claims.SessionDictionary */ 

(function SessionDictionary$Members () {
  var $, $thisType;


































































  JSIL.MakeType({
      BaseType: $asm21.TypeRef("System.Xml.XmlDictionary"), 
      Name: "System.IdentityModel.Claims.SessionDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Actor", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationType", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BootstrapToken", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Claim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimCollection", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimProperties", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimProperty", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimPropertyName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimPropertyValue", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimsPrincipal", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContextId", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DenyOnlySidClaim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DnsClaim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EffectiveTime", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EmptyString", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndpointId", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExpiryTime", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashClaim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Identities", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Identity", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Issuer", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuerRef", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyEffectiveTime", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyExpiryTime", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyGeneration", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Label", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MailAddressClaim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameClaim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameClaimType", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NullValue", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginalIssuer", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PersistentTrue", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferenceModeTrue", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RoleClaimType", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RsaClaim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SctAuthorizationPolicy", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecureConversationVersion", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityContextToken", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SessionId", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SessionToken", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SessionTokenCookie", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sid", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SpnClaim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubjectId", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SystemClaim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UpnClaim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UrlClaim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidFrom", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidTo", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WindowsIdentity", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WindowsLogonName", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WindowsPrincipal", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WindowsSidClaim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_X500DistinguishedNameClaim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_X509ThumbprintClaim", 
      JSIL.MethodSignature.Return($asm21.TypeRef("System.Xml.XmlDictionaryString"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "instance", $.Type);

    $.Field({Static:false, Public:false}, "_claim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_sct", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_issuer", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_originalIssuer", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_issuerRef", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_claimCollection", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_actor", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_claimProperty", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_claimProperties", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_value", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_valueType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_label", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_claimPropertyName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_claimPropertyValue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_type", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_subjectId", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_contextId", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_authenticationType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_nameClaimType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_roleClaimType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_version", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_scVersion", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_emptyString", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_nullValue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_key", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_effectiveTime", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_expiryTime", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_keyGeneration", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_keyEffectiveTime", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_keyExpiryTime", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_sessionId", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_id", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_validFrom", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_validTo", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_sesionToken", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_sesionTokenCookie", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_bootStrapToken", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_context", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_claimsPrincipal", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_windowsPrincipal", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_windowsIdentity", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_identity", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_identities", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_windowsLogonName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_persistentTrue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_sctAuthorizationPolicy", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_right", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_endpointId", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_windowsSidClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_denyOnlySidClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_x500DistinguishedNameClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_x509ThumbprintClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_nameClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_dnsClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_rsaClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_mailAddressClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_systemClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_hashClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_spnClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_upnClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_urlClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_sid", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Field({Static:false, Public:false}, "_referenceModeTrue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:true , Public:true }, "Instance", $.Type);

    $.Property({Static:false, Public:true }, "PersistentTrue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "WindowsLogonName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ClaimsPrincipal", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "WindowsPrincipal", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "WindowsIdentity", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Identity", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Identities", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "SessionId", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ReferenceModeTrue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ValidFrom", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ValidTo", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "EffectiveTime", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ExpiryTime", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "KeyEffectiveTime", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "KeyExpiryTime", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Claim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Issuer", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "OriginalIssuer", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "IssuerRef", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ClaimCollection", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Actor", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ClaimProperties", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ClaimProperty", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Value", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ValueType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Label", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Type", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "SubjectId", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ClaimPropertyName", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ClaimPropertyValue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "AuthenticationType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "NameClaimType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "RoleClaimType", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "NullValue", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "SecurityContextToken", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Version", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "SecureConversationVersion", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "EmptyString", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Key", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "KeyGeneration", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Id", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "ContextId", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "SessionToken", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "SessionTokenCookie", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "BootstrapToken", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Context", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "SctAuthorizationPolicy", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Right", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "EndpointId", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "WindowsSidClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "DenyOnlySidClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "X500DistinguishedNameClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "X509ThumbprintClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "NameClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "DnsClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "RsaClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "MailAddressClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "SystemClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "HashClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "SpnClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "UpnClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "UrlClaim", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Sid", $asm21.TypeRef("System.Xml.XmlDictionaryString"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IdentityModel.Diagnostics");
/* class System.IdentityModel.Diagnostics.AuthorizeTraceRecord */ 

(function AuthorizeTraceRecord$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "System.IdentityModel.Diagnostics.AuthorizeTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "_elementName", $.String, "AuthorizeTraceRecord");

    $.Constant({Static:true , Public:false}, "_eventId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/AuthorizeTraceRecord");

    $.Field({Static:false, Public:false}, "_claimsPrincipal", $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"));

    $.Field({Static:false, Public:false}, "_url", $.String);

    $.Field({Static:false, Public:false}, "_action", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Diagnostics.ClaimsPrincipalTraceRecord */ 

(function ClaimsPrincipalTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "System.IdentityModel.Diagnostics.ClaimsPrincipalTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteClaimsIdentity", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Security.Claims.ClaimsIdentity"), $asm2F.TypeRef("System.Xml.XmlWriter")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "ElementName", $.String, "ClaimsPrincipalTraceRecord");

    $.Constant({Static:true , Public:false}, "_eventId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/ClaimsPrincipalTraceRecord");

    $.Field({Static:false, Public:false}, "_claimsPrincipal", $asm07.TypeRef("System.Security.Claims.ClaimsPrincipal"));

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Diagnostics.DeflateCookieTraceRecord */ 

(function DeflateCookieTraceRecord$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "System.IdentityModel.Diagnostics.DeflateCookieTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "ElementName", $.String, "DeflateCookieTraceRecord");

    $.Constant({Static:true , Public:false}, "_eventId", $.String, "http://schemas.microsoft.com/2006/08/ServiceModel/DeflateCookieTraceRecord");

    $.Field({Static:false, Public:false}, "_originalSize", $.Int32);

    $.Field({Static:false, Public:false}, "_deflatedSize", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Diagnostics.DigestTraceRecord */ 

(function DigestTraceRecord$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "System.IdentityModel.Diagnostics.DigestTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.IO.MemoryStream"), 
          $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "_logStream", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "_hash", $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm"));

    $.Field({Static:false, Public:false}, "_traceName", $.String);

    $.Constant({Static:true , Public:false}, "Empty", $.String, "Empty");

    $.Constant({Static:true , Public:false}, "CanonicalElementString", $.String, "CanonicalElementString");

    $.Constant({Static:true , Public:false}, "CanonicalElementStringLength", $.String, "CanonicalElementStringLength");

    $.Constant({Static:true , Public:false}, "CanonicalOctets", $.String, "CanonicalOctets");

    $.Constant({Static:true , Public:false}, "CanonicalOctetsLength", $.String, "CanonicalOctetsLength");

    $.Constant({Static:true , Public:false}, "CanonicalOctetsHash", $.String, "CanonicalOctetsHash");

    $.Constant({Static:true , Public:false}, "CanonicalOctetsHashLength", $.String, "CanonicalOctetsHashLength");

    $.Constant({Static:true , Public:false}, "Key", $.String, "Key");

    $.Constant({Static:true , Public:false}, "Length", $.String, "Length");

    $.Constant({Static:true , Public:false}, "FirstByte", $.String, "FirstByte");

    $.Constant({Static:true , Public:false}, "LastByte", $.String, "LastByte");

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Diagnostics.DigestTraceRecordHelper */ 

(function DigestTraceRecordHelper$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.IdentityModel.Diagnostics.DigestTraceRecordHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceDigest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeShouldTraceDigest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceDigest", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.MemoryStream"), $asm07.TypeRef("System.Security.Cryptography.HashAlgorithm")])
    );

    $.Constant({Static:true , Public:false}, "DigestTrace", $.String, "DigestTrace");

    $.Field({Static:true , Public:false}, "_shouldTraceDigest", $.Boolean);

    $.Field({Static:true , Public:false}, "_initialized", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceDigest", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Diagnostics.SecurityTraceRecord */ 

(function SecurityTraceRecord$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "System.IdentityModel.Diagnostics.SecurityTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "traceName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Diagnostics.SecurityTraceRecordHelper */ 

(function SecurityTraceRecordHelper$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.IdentityModel.Diagnostics.SecurityTraceRecordHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "TraceChannelBindingInformation", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.ExtendedProtectionPolicyHelper"), $.Boolean, 
          $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceServiceNameBindingOnServer", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ServiceNameCollection")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Diagnostics.SecurityTraceRecordHelper+ServiceBindingNameTraceRecord */ 

(function ServiceBindingNameTraceRecord$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Diagnostics.SecurityTraceRecord"), 
      Name: "System.IdentityModel.Diagnostics.SecurityTraceRecordHelper+ServiceBindingNameTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ServiceNameCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "serviceBindingNameSentByClient", $.String);

    $.Field({Static:false, Public:false}, "defaultServiceBindingNameOfServer", $.String);

    $.Field({Static:false, Public:false}, "serviceNameCollectionConfiguredOnServer", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ServiceNameCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Diagnostics.SecurityTraceRecordHelper+ChannelBindingNameTraceRecord */ 

(function ChannelBindingNameTraceRecord$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Diagnostics.SecurityTraceRecord"), 
      Name: "System.IdentityModel.Diagnostics.SecurityTraceRecordHelper+ChannelBindingNameTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.ExtendedProtectionPolicyHelper"), $.Boolean, 
          $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBase64EncodedChannelBindingData", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "policyHelper", $asm19.TypeRef("System.IdentityModel.ExtendedProtectionPolicyHelper"));

    $.Field({Static:false, Public:false}, "isServer", $.Boolean);

    $.Field({Static:false, Public:false}, "channelBindingUsed", $.Boolean);

    $.Field({Static:false, Public:false}, "channelBinding", $asm0A.TypeRef("System.Security.Authentication.ExtendedProtection.ChannelBinding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Diagnostics.SecurityTraceRecordHelper+TokenTraceRecord */ 

(function TokenTraceRecord$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Diagnostics.SecurityTraceRecord"), 
      Name: "System.IdentityModel.Diagnostics.SecurityTraceRecordHelper+TokenTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOrCreateSessionSecurityTokenHandler", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityTokenHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSessionToken", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Tokens.SessionSecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "ElementName", $.String, "TokenTraceRecord");

    $.Field({Static:false, Public:false}, "_securityToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Diagnostics.TraceCode */ 

(function TraceCode$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Diagnostics.TraceCode", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "IdentityModel", $.Int32, 786432);

    $.Constant({Static:true , Public:true }, "AuthorizationContextCreated", $.Int32, 786434);

    $.Constant({Static:true , Public:true }, "AuthorizationPolicyEvaluated", $.Int32, 786435);

    $.Constant({Static:true , Public:true }, "ServiceBindingCheck", $.Int32, 786436);

    $.Constant({Static:true , Public:true }, "ChannelBindingCheck", $.Int32, 786437);

    $.Constant({Static:true , Public:true }, "Diagnostics", $.Int32, 786438);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Diagnostics.TraceUtility */ 

(function TraceUtility$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.IdentityModel.Diagnostics.TraceUtility", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $asm25.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
          $.Object, $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceString", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Diagnostics.TraceEventType"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(2, "args", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.Field({Static:true , Public:false}, "traceCodes", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IdentityModel.Diagnostics.Application");
/* class System.IdentityModel.Diagnostics.Application.TD */ 

(function TD$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Diagnostics.Application.TD", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateEventDescriptors", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EnsureEventDescriptors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIssuerNameFailure", 
      new JSIL.MethodSignature(null, [$asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIssuerNameFailureIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIssuerNameSuccess", 
      new JSIL.MethodSignature(null, [
          $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIssuerNameSuccessIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEtwEventEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TokenValidationFailure", 
      new JSIL.MethodSignature(null, [
          $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TokenValidationFailureIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "TokenValidationStarted", 
      new JSIL.MethodSignature(null, [
          $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TokenValidationStartedIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "TokenValidationSuccess", 
      new JSIL.MethodSignature(null, [
          $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TokenValidationSuccessIsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $asm25.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "resourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:true , Public:false}, "eventDescriptors", $jsilcore.TypeRef("System.Array", [$asm25.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "syncLock", $.Object);

    $.Field({Static:true , Public:false}, "eventDescriptorsCreated", $asm07.TypeRef("System.Boolean"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Diagnostics.Application.FxTrace */ 

(function FxTrace$Members () {
  var $, $thisType;























  JSIL.MakeStaticClass("System.IdentityModel.Diagnostics.Application.FxTrace", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EnsureEtwProviderInitialized", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EventLog", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.Diagnostics.EventLogger"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EventSourceName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Exception", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.ExceptionTrace"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceCritical", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceCriticalToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceError", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceErrorToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceInformation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceInformationToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceVerbose", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceVerboseToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceWarning", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ShouldTraceWarningToTraceSource", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Trace", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TracingEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "InitializeTracing", 
      JSIL.MethodSignature.Return($asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "IsEventEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEnabledEventsList", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "UpdateEventDefinitions", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm25.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $jsilcore.TypeRef("System.Array", [$.UInt16])])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      JSIL.MethodSignature.Action($asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "baseEventSourceName", $.String, "System.IdentityModel");

    $.Constant({Static:true , Public:false}, "EventSourceVersion", $.String, "4.0.0.0");

    $.Field({Static:true , Public:false}, "etwProviderId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:true , Public:false}, "eventSourceName", $.String);

    $.Field({Static:true , Public:false}, "exceptionTrace", $asm25.TypeRef("System.Runtime.ExceptionTrace"));

    $.Field({Static:true , Public:false}, "enabledEvents", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:true , Public:false}, "end2EndEvents", $asm0A.TypeRef("System.Collections.Generic.SortedSet`1", [$.UInt16]));

    $.Field({Static:true , Public:false}, "eventDescriptors", $jsilcore.TypeRef("System.Array", [$asm25.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]))
      .Attribute($asm07.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "lockObject", $.Object);

    $.Field({Static:true , Public:false}, "tracingEnabled", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceVerbose", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceInformation", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceWarning", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceError", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceCritical", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceVerboseToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceInformationToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceWarningToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceErrorToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "shouldTraceCriticalToTraceSource", $.Boolean, true);

    $.Field({Static:true , Public:false}, "diagnosticTrace", $asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"));


    function FxTrace__cctor () {
      $thisType.etwProviderId = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      FxTrace__cctor
    );

    $.Property({Static:true , Public:true }, "ShouldTraceCritical", $.Boolean);

    $.Property({Static:true , Public:true }, "TracingEnabled", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceError", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceInformation", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceVerbose", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceWarning", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceCriticalToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceErrorToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceInformationToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceVerboseToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "ShouldTraceWarningToTraceSource", $.Boolean);

    $.Property({Static:true , Public:true }, "Exception", $asm25.TypeRef("System.Runtime.ExceptionTrace"));

    $.Property({Static:true , Public:true }, "Trace", $asm25.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"));

    $.Property({Static:true , Public:true }, "EventLog", $asm25.TypeRef("System.Runtime.Diagnostics.EventLogger"));

    $.Property({Static:true , Public:false}, "EventSourceName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Diagnostics.Application.FxTrace+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Diagnostics.Application.FxTrace+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lInitializeTracing$gb__54_0", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__54_0", $asm07.TypeRef("System.Action"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("System.IdentityModel.Protocols");
/* class System.IdentityModel.Protocols.WSMetadataExchangeConstants */ 

(function WSMetadataExchangeConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSMetadataExchangeConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/ws/2004/09/mex");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IdentityModel.Protocols.WSTrust");
/* class System.IdentityModel.Protocols.WSTrust.AdditionalContext */ 

(function AdditionalContext$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.AdditionalContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ContextItem")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ContextItem")]))
    );

    $.Field({Static:false, Public:false}, "_contextItems", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ContextItem")]));

    $.Property({Static:false, Public:true }, "Items", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ContextItem")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.BinaryExchange */ 

(function BinaryExchange$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.BinaryExchange", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm0A.TypeRef("System.Uri"), 
          $asm0A.TypeRef("System.Uri")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BinaryData", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncodingType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.Field({Static:false, Public:false}, "_binaryData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_valueType", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "_encodingType", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "BinaryData", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "ValueType", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "EncodingType", $asm0A.TypeRef("System.Uri"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.ContextItem */ 

(function ContextItem$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.ContextItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Uri"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("System.Uri"), $.String, 
          $asm0A.TypeRef("System.Uri")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Scope", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Scope", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_name", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "_scope", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "_value", $.String);

    $.Property({Static:false, Public:true }, "Name", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "Scope", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.EndpointReference */ 

(function EndpointReference$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.EndpointReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Details", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm2F.TypeRef("System.Xml.XmlElement")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Uri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature($.Type, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFrom", 
      new JSIL.MethodSignature($.Type, [$asm21.TypeRef("System.Xml.XmlDictionaryReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "_details", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm2F.TypeRef("System.Xml.XmlElement")]));

    $.Field({Static:false, Public:false}, "uri", $asm0A.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "Details", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm2F.TypeRef("System.Xml.XmlElement")]));

    $.Property({Static:false, Public:true }, "Uri", $asm0A.TypeRef("System.Uri"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.ProtectedKey */ 

(function ProtectedKey$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.ProtectedKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WrappingCredentials", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKeyBytes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:false}, "_secret", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_wrappingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));

    $.Property({Static:false, Public:true }, "WrappingCredentials", $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.Entropy */ 

(function Entropy$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ProtectedKey"), 
      Name: "System.IdentityModel.Protocols.WSTrust.Entropy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ProtectedKey"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKeyBytesFromProtectedKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ProtectedKey")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWrappingCredentialsFromProtectedKey", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials"), [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ProtectedKey")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.FederatedClientCredentialsParameters */ 

(function FederatedClientCredentialsParameters$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.FederatedClientCredentialsParameters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActAs", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IssuedSecurityToken", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OnBehalfOf", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ActAs", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IssuedSecurityToken", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OnBehalfOf", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.Field({Static:false, Public:false}, "_actAs", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Field({Static:false, Public:false}, "_onBehalfOf", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Field({Static:false, Public:false}, "_issuedSecurityToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true }, "ActAs", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true }, "OnBehalfOf", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true }, "IssuedSecurityToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.InvalidRequestException */ 

(function InvalidRequestException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.RequestException"), 
      Name: "System.IdentityModel.Protocols.WSTrust.InvalidRequestException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.KeyTypes */ 

(function KeyTypes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.KeyTypes", true, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Symmetric", $.String, "http://schemas.microsoft.com/idfx/keytype/symmetric");

    $.Constant({Static:true , Public:true }, "Asymmetric", $.String, "http://schemas.microsoft.com/idfx/keytype/asymmetric");

    $.Constant({Static:true , Public:true }, "Bearer", $.String, "http://schemas.microsoft.com/idfx/keytype/bearer");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.Lifetime */ 

(function Lifetime$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.Lifetime", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]), $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Created", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expires", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Created", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Expires", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]))
    );

    $.Field({Static:false, Public:false}, "_created", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "_expires", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "Created", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "Expires", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTime")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.Participants */ 

(function Participants$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.Participants", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Participant", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Primary", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Primary", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"))
    );

    $.Field({Static:false, Public:false}, "_primary", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"));

    $.Field({Static:false, Public:false}, "_participant", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]));

    $.Property({Static:false, Public:true }, "Primary", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"));

    $.Property({Static:false, Public:true }, "Participant", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.Renewing */ 

(function Renewing$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.Renewing", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowRenewal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OkForRenewalAfterExpiration", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowRenewal", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OkForRenewalAfterExpiration", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_allowRenewal", $.Boolean);

    $.Field({Static:false, Public:false}, "_okForRenewalAfterExpiration", $.Boolean);

    $.Property({Static:false, Public:true }, "AllowRenewal", $.Boolean);

    $.Property({Static:false, Public:true }, "OkForRenewalAfterExpiration", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.RequestClaim */ 

(function RequestClaim$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.RequestClaim", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClaimType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsOptional", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsOptional", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_claimType", $.String);

    $.Field({Static:false, Public:false}, "_isOptional", $.Boolean);

    $.Field({Static:false, Public:false}, "_value", $.String);

    $.Property({Static:false, Public:true }, "ClaimType", $.String);

    $.Property({Static:false, Public:true }, "IsOptional", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.RequestClaimCollection */ 

(function RequestClaimCollection$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestClaim")]), 
      Name: "System.IdentityModel.Protocols.WSTrust.RequestClaimCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Dialect", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Dialect", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_dialect", $.String);

    $.Property({Static:false, Public:true }, "Dialect", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.RequestedProofToken */ 

(function RequestedProofToken$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.RequestedProofToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm19.TypeRef("System.IdentityModel.Tokens.EncryptingCredentials")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ProtectedKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ComputedKeyAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtectedKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ProtectedKey"))
    );

    $.Field({Static:false, Public:false}, "_computedKeyAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "_keys", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ProtectedKey"));

    $.Property({Static:false, Public:true }, "ComputedKeyAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "ProtectedKey", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ProtectedKey"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken */ 

(function RequestedSecurityToken$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityToken", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SecurityTokenXml", 
      JSIL.MethodSignature.Return($asm2F.TypeRef("System.Xml.XmlElement"))
    );

    $.Field({Static:false, Public:false}, "_tokenAsXml", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Field({Static:false, Public:false}, "_requestedToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true , Virtual:true }, "SecurityTokenXml", $asm2F.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true }, "SecurityToken", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustMessage */ 

(function WSTrustMessage$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.OpenObject"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustMessage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowPostdating", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AppliesTo", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticationType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BinaryExchange", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.BinaryExchange"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanonicalizationAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Context", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncryptionAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EncryptWith", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Entropy", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Entropy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeySizeInBits", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyWrapAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Lifetime", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReplyTo", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignWith", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseKey", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.UseKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowPostdating", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AppliesTo", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AuthenticationType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BinaryExchange", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.BinaryExchange"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CanonicalizationAlgorithm", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Context", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EncryptionAlgorithm", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EncryptWith", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Entropy", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Entropy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeySizeInBits", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyWrapAlgorithm", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Lifetime", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReplyTo", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SignatureAlgorithm", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SignWith", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TokenType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseKey", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.UseKey"))
    );

    $.Field({Static:false, Public:false}, "allowPostdating", $.Boolean);

    $.Field({Static:false, Public:false}, "appliesTo", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"));

    $.Field({Static:false, Public:false}, "replyTo", $.String);

    $.Field({Static:false, Public:false}, "authenticationType", $.String);

    $.Field({Static:false, Public:false}, "canonicalizationAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "context", $.String);

    $.Field({Static:false, Public:false}, "encryptionAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "entropy", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Entropy"));

    $.Field({Static:false, Public:false}, "issuedTokenEncryptionAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "keyWrapAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "issuedTokenSignatureAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "keySizeInBits", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "keyType", $.String);

    $.Field({Static:false, Public:false}, "lifetime", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime"));

    $.Field({Static:false, Public:false}, "requestType", $.String);

    $.Field({Static:false, Public:false}, "signatureAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "tokenType", $.String);

    $.Field({Static:false, Public:false}, "useKey", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.UseKey"));

    $.Field({Static:false, Public:false}, "binaryExchange", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.BinaryExchange"));

    $.Property({Static:false, Public:true }, "AllowPostdating", $.Boolean);

    $.Property({Static:false, Public:true }, "AppliesTo", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"));

    $.Property({Static:false, Public:true }, "BinaryExchange", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.BinaryExchange"));

    $.Property({Static:false, Public:true }, "ReplyTo", $.String);

    $.Property({Static:false, Public:true }, "AuthenticationType", $.String);

    $.Property({Static:false, Public:true }, "CanonicalizationAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "Context", $.String);

    $.Property({Static:false, Public:true }, "EncryptionAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "Entropy", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Entropy"));

    $.Property({Static:false, Public:true }, "EncryptWith", $.String);

    $.Property({Static:false, Public:true }, "SignWith", $.String);

    $.Property({Static:false, Public:true }, "KeySizeInBits", $asm07.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "KeyType", $.String);

    $.Property({Static:false, Public:true }, "KeyWrapAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "Lifetime", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime"));

    $.Property({Static:false, Public:true }, "RequestType", $.String);

    $.Property({Static:false, Public:true }, "SignatureAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "TokenType", $.String);

    $.Property({Static:false, Public:true }, "UseKey", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.UseKey"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken */ 

(function RequestSecurityToken$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustMessage"), 
      Name: "System.IdentityModel.Protocols.WSTrust.RequestSecurityToken", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActAs", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AdditionalContext", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.AdditionalContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CancelTarget", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Claims", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestClaimCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ComputedKeyAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Delegatable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DelegateTo", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encryption", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Forwardable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Issuer", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OnBehalfOf", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Participants", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Participants"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProofEncryption", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Renewing", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Renewing"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RenewTarget", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecondaryParameters", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidateTarget", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ActAs", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AdditionalContext", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.AdditionalContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CancelTarget", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ComputedKeyAlgorithm", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Delegatable", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DelegateTo", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encryption", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Forwardable", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Issuer", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OnBehalfOf", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Participants", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Participants"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProofEncryption", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Renewing", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Renewing"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RenewTarget", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecondaryParameters", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ValidateTarget", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"))
    );

    $.Field({Static:false, Public:false}, "_additionalContext", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.AdditionalContext"));

    $.Field({Static:false, Public:false}, "_claims", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestClaimCollection"));

    $.Field({Static:false, Public:false}, "_computedKeyAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "_renewing", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Renewing"));

    $.Field({Static:false, Public:false}, "_renewTarget", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Field({Static:false, Public:false}, "_proofEncryption", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Field({Static:false, Public:false}, "_secondaryParameters", $.Type);

    $.Field({Static:false, Public:false}, "_onBehalfOf", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Field({Static:false, Public:false}, "_onBehalfOfIssuer", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"));

    $.Field({Static:false, Public:false}, "_actAs", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Field({Static:false, Public:false}, "_delegateTo", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Field({Static:false, Public:false}, "_forwardable", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "_delegatable", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Field({Static:false, Public:false}, "_cancelTarget", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Field({Static:false, Public:false}, "_validateTarget", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Field({Static:false, Public:false}, "_participants", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Participants"));

    $.Field({Static:false, Public:false}, "_encryption", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Property({Static:false, Public:true }, "Claims", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestClaimCollection"));

    $.Property({Static:false, Public:true }, "Encryption", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Property({Static:false, Public:true }, "ComputedKeyAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "Delegatable", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:true }, "DelegateTo", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Property({Static:false, Public:true }, "Forwardable", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:true }, "OnBehalfOf", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Property({Static:false, Public:true }, "Participants", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Participants"));

    $.Property({Static:false, Public:true }, "Issuer", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"));

    $.Property({Static:false, Public:true }, "AdditionalContext", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.AdditionalContext"));

    $.Property({Static:false, Public:true }, "ActAs", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Property({Static:false, Public:true }, "CancelTarget", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Property({Static:false, Public:true }, "ProofEncryption", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Property({Static:false, Public:true }, "Renewing", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Renewing"));

    $.Property({Static:false, Public:true }, "RenewTarget", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));

    $.Property({Static:false, Public:true }, "SecondaryParameters", $.Type);

    $.Property({Static:false, Public:true }, "ValidateTarget", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse */ 

(function RequestSecurityTokenResponse$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustMessage"), 
      Name: "System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustMessage"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsFinal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestedAttachedReference", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestedProofToken", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestedProofToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestedSecurityToken", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestedTokenCancelled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequestedUnattachedReference", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Status", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Status"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsFinal", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestedAttachedReference", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestedProofToken", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestedProofToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestedSecurityToken", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestedTokenCancelled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequestedUnattachedReference", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Status", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Status"))
    );

    $.Field({Static:false, Public:false}, "_requestedAttachedReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"));

    $.Field({Static:false, Public:false}, "_requestedProofToken", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestedProofToken"));

    $.Field({Static:false, Public:false}, "_requestedSecurityToken", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken"));

    $.Field({Static:false, Public:false}, "_requestedUnattachedReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"));

    $.Field({Static:false, Public:false}, "_requestedTokenCancelled", $.Boolean);

    $.Field({Static:false, Public:false}, "_status", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Status"));

    $.Field({Static:false, Public:false}, "_isFinal", $.Boolean);

    $.Property({Static:false, Public:true }, "IsFinal", $.Boolean);

    $.Property({Static:false, Public:true }, "RequestedAttachedReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"));

    $.Property({Static:false, Public:true }, "RequestedSecurityToken", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestedSecurityToken"));

    $.Property({Static:false, Public:true }, "RequestedProofToken", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestedProofToken"));

    $.Property({Static:false, Public:true }, "RequestedUnattachedReference", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifierClause"));

    $.Property({Static:false, Public:true }, "RequestedTokenCancelled", $.Boolean);

    $.Property({Static:false, Public:true }, "Status", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Status"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.RequestTypes */ 

(function RequestTypes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.RequestTypes", true, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Cancel", $.String, "http://schemas.microsoft.com/idfx/requesttype/cancel");

    $.Constant({Static:true , Public:true }, "Issue", $.String, "http://schemas.microsoft.com/idfx/requesttype/issue");

    $.Constant({Static:true , Public:true }, "Renew", $.String, "http://schemas.microsoft.com/idfx/requesttype/renew");

    $.Constant({Static:true , Public:true }, "Validate", $.String, "http://schemas.microsoft.com/idfx/requesttype/validate");

    $.Constant({Static:true , Public:true }, "IssueCard", $.String, "http://schemas.microsoft.com/idfx/requesttype/issueCard");

    $.Constant({Static:true , Public:true }, "GetMetadata", $.String, "http://schemas.microsoft.com/idfx/requesttype/getMetadata");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.Status */ 

(function Status$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.Status", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Code", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reason", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Code", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Reason", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_code", $.String);

    $.Field({Static:false, Public:false}, "_reason", $.String);

    $.Property({Static:false, Public:true }, "Code", $.String);

    $.Property({Static:false, Public:true }, "Reason", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.UseKey */ 

(function UseKey$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.UseKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"), $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityKeyIdentifier", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Token", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"))
    );

    $.Field({Static:false, Public:false}, "_token", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Field({Static:false, Public:false}, "_ski", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));

    $.Property({Static:false, Public:true }, "Token", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityToken"));

    $.Property({Static:false, Public:true }, "SecurityKeyIdentifier", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityKeyIdentifier"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSIdentityConstants */ 

(function WSIdentityConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSIdentityConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "i");

    $.Constant({Static:true , Public:true }, "Dialect", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSIdentityConstants+Attributes */ 

(function Attributes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSIdentityConstants+Attributes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Optional", $.String, "Optional");

    $.Constant({Static:true , Public:true }, "Uri", $.String, "Uri");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSIdentityConstants+Elements */ 

(function Elements$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSIdentityConstants+Elements", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "ClaimType", $.String, "ClaimType");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSPolicyConstants */ 

(function WSPolicyConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSPolicyConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "NamespaceURI", $.String, "http://schemas.xmlsoap.org/ws/2004/09/policy");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "wsp");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSPolicyConstants+ElementNames */ 

(function ElementNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSPolicyConstants+ElementNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "AppliesTo", $.String, "AppliesTo");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13Constants */ 

(function WSTrust13Constants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrust13Constants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "NamespaceURI", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "trust");

    $.Constant({Static:true , Public:true }, "SchemaLocation", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/ws-trust-1.3.xsd");

    $.Constant({Static:true , Public:true }, "Schema", $.String, "<?xml version='1.0' encoding='utf-8'?>\r\n<xs:schema xmlns:xs='http://www.w3.org/2001/XMLSchema'\r\n           xmlns:trust='http://docs.oasis-open.org/ws-sx/ws-trust/200512'\r\n           targetNamespace='http://docs.oasis-open.org/ws-sx/ws-trust/200512'\r\n           elementFormDefault='qualified' >\r\n\r\n<xs:element name='RequestSecurityToken' type='trust:RequestSecurityTokenType' />\r\n  <xs:complexType name='RequestSecurityTokenType' >\r\n    <xs:choice minOccurs='0' maxOccurs='unbounded' >\r\n        <xs:any namespace='##any' processContents='lax' minOccurs='0' maxOccurs='unbounded' />\r\n    </xs:choice>\r\n    <xs:attribute name='Context' type='xs:anyURI' use='optional' />\r\n    <xs:anyAttribute namespace='##other' processContents='lax' />\r\n  </xs:complexType>\r\n\r\n<xs:element name='RequestSecurityTokenResponse' type='trust:RequestSecurityTokenResponseType' />\r\n  <xs:complexType name='RequestSecurityTokenResponseType' >\r\n    <xs:choice minOccurs='0' maxOccurs='unbounded' >\r\n        <xs:any namespace='##any' processContents='lax' minOccurs='0' maxOccurs='unbounded' />\r\n    </xs:choice>\r\n    <xs:attribute name='Context' type='xs:anyURI' use='optional' />\r\n    <xs:anyAttribute namespace='##other' processContents='lax' />\r\n  </xs:complexType>\r\n\r\n  <xs:element name='RequestSecurityTokenResponseCollection' type='trust:RequestSecurityTokenResponseCollectionType' />\r\n  <xs:complexType name='RequestSecurityTokenResponseCollectionType' >\r\n    <xs:sequence>\r\n      <xs:element ref='trust:RequestSecurityTokenResponse' minOccurs='1' maxOccurs='unbounded' />\r\n    </xs:sequence>\r\n    <xs:anyAttribute namespace='##other' processContents='lax' />\r\n  </xs:complexType>\r\n\r\n        </xs:schema>");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+Actions */ 

(function Actions$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+Actions", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Issue", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue");

    $.Constant({Static:true , Public:true }, "IssueFinalResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTRC/IssueFinal");

    $.Constant({Static:true , Public:true }, "IssueResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Issue");

    $.Constant({Static:true , Public:true }, "Renew", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Renew");

    $.Constant({Static:true , Public:true }, "RenewFinalResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/RenewFinal");

    $.Constant({Static:true , Public:true }, "RenewResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Renew");

    $.Constant({Static:true , Public:true }, "Validate", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Validate");

    $.Constant({Static:true , Public:true }, "ValidateFinalResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/ValidateFinal");

    $.Constant({Static:true , Public:true }, "ValidateResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Validate");

    $.Constant({Static:true , Public:true }, "Cancel", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Cancel");

    $.Constant({Static:true , Public:true }, "CancelFinalResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/CancelFinal");

    $.Constant({Static:true , Public:true }, "CancelResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Cancel");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextToken", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/SCT");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextTokenResponse", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/SCT");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextTokenCancel", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/SCT-Cancel");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextTokenResponseCancel", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/SCT-Cancel");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+AttributeNames */ 

(function AttributeNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+AttributeNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Allow", $.String, "Allow");

    $.Constant({Static:true , Public:true }, "Context", $.String, "Context");

    $.Constant({Static:true , Public:true }, "EncodingType", $.String, "EncodingType");

    $.Constant({Static:true , Public:true }, "OK", $.String, "OK");

    $.Constant({Static:true , Public:true }, "Type", $.String, "Type");

    $.Constant({Static:true , Public:true }, "ValueType", $.String, "ValueType");

    $.Constant({Static:true , Public:true }, "Dialect", $.String, "Dialect");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+ElementNames */ 

(function ElementNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+ElementNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "AllowPostdating", $.String, "AllowPostdating");

    $.Constant({Static:true , Public:true }, "AuthenticationType", $.String, "AuthenticationType");

    $.Constant({Static:true , Public:true }, "BinarySecret", $.String, "BinarySecret");

    $.Constant({Static:true , Public:true }, "BinaryExchange", $.String, "BinaryExchange");

    $.Constant({Static:true , Public:true }, "Delegatable", $.String, "Delegatable");

    $.Constant({Static:true , Public:true }, "DelegateTo", $.String, "DelegateTo");

    $.Constant({Static:true , Public:true }, "Encryption", $.String, "Encryption");

    $.Constant({Static:true , Public:true }, "EncryptionAlgorithm", $.String, "EncryptionAlgorithm");

    $.Constant({Static:true , Public:true }, "EncryptWith", $.String, "EncryptWith");

    $.Constant({Static:true , Public:true }, "Entropy", $.String, "Entropy");

    $.Constant({Static:true , Public:true }, "Forwardable", $.String, "Forwardable");

    $.Constant({Static:true , Public:true }, "Lifetime", $.String, "Lifetime");

    $.Constant({Static:true , Public:true }, "Claims", $.String, "Claims");

    $.Constant({Static:true , Public:true }, "ComputedKey", $.String, "ComputedKey");

    $.Constant({Static:true , Public:true }, "ComputedKeyAlgorithm", $.String, "ComputedKeyAlgorithm");

    $.Constant({Static:true , Public:true }, "CanonicalizationAlgorithm", $.String, "CanonicalizationAlgorithm");

    $.Constant({Static:true , Public:true }, "CancelTarget", $.String, "CancelTarget");

    $.Constant({Static:true , Public:true }, "Code", $.String, "Code");

    $.Constant({Static:true , Public:true }, "Issuer", $.String, "Issuer");

    $.Constant({Static:true , Public:true }, "KeyType", $.String, "KeyType");

    $.Constant({Static:true , Public:true }, "KeySize", $.String, "KeySize");

    $.Constant({Static:true , Public:true }, "KeyWrapAlgorithm", $.String, "KeyWrapAlgorithm");

    $.Constant({Static:true , Public:true }, "OnBehalfOf", $.String, "OnBehalfOf");

    $.Constant({Static:true , Public:true }, "Participant", $.String, "Participant");

    $.Constant({Static:true , Public:true }, "Participants", $.String, "Participants");

    $.Constant({Static:true , Public:true }, "Primary", $.String, "Primary");

    $.Constant({Static:true , Public:true }, "ProofEncryption", $.String, "ProofEncryption");

    $.Constant({Static:true , Public:true }, "Reason", $.String, "Reason");

    $.Constant({Static:true , Public:true }, "Renewing", $.String, "Renewing");

    $.Constant({Static:true , Public:true }, "RenewTarget", $.String, "RenewTarget");

    $.Constant({Static:true , Public:true }, "RequestType", $.String, "RequestType");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenResponse", $.String, "RequestSecurityTokenResponse");

    $.Constant({Static:true , Public:true }, "RequestSecurityToken", $.String, "RequestSecurityToken");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenResponseCollection", $.String, "RequestSecurityTokenResponseCollection");

    $.Constant({Static:true , Public:true }, "RequestedSecurityToken", $.String, "RequestedSecurityToken");

    $.Constant({Static:true , Public:true }, "RequestedProofToken", $.String, "RequestedProofToken");

    $.Constant({Static:true , Public:true }, "RequestKeySize", $.String, "RequestKeySize");

    $.Constant({Static:true , Public:true }, "RequestedAttachedReference", $.String, "RequestedAttachedReference");

    $.Constant({Static:true , Public:true }, "RequestedUnattachedReference", $.String, "RequestedUnattachedReference");

    $.Constant({Static:true , Public:true }, "RequestedTokenCancelled", $.String, "RequestedTokenCancelled");

    $.Constant({Static:true , Public:true }, "SecondaryParameters", $.String, "SecondaryParameters");

    $.Constant({Static:true , Public:true }, "SecurityContextToken", $.String, "SecurityContextToken");

    $.Constant({Static:true , Public:true }, "SignatureAlgorithm", $.String, "SignatureAlgorithm");

    $.Constant({Static:true , Public:true }, "SignWith", $.String, "SignWith");

    $.Constant({Static:true , Public:true }, "Status", $.String, "Status");

    $.Constant({Static:true , Public:true }, "TokenType", $.String, "TokenType");

    $.Constant({Static:true , Public:true }, "UseKey", $.String, "UseKey");

    $.Constant({Static:true , Public:true }, "ValidateTarget", $.String, "ValidateTarget");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+FaultCodeValues */ 

(function FaultCodeValues$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+FaultCodeValues", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "AuthenticationBadElements", $.String, "AuthenticationBadElements");

    $.Constant({Static:true , Public:true }, "BadRequest", $.String, "BadRequest");

    $.Constant({Static:true , Public:true }, "ExpiredData", $.String, "ExpiredData");

    $.Constant({Static:true , Public:true }, "FailedAuthentication", $.String, "FailedAuthentication");

    $.Constant({Static:true , Public:true }, "InvalidRequest", $.String, "InvalidRequest");

    $.Constant({Static:true , Public:true }, "InvalidScope", $.String, "InvalidScope");

    $.Constant({Static:true , Public:true }, "InvalidSecurityToken", $.String, "InvalidSecurityToken");

    $.Constant({Static:true , Public:true }, "InvalidTimeRange", $.String, "InvalidTimeRange");

    $.Constant({Static:true , Public:true }, "RenewNeeded", $.String, "RenewNeeded");

    $.Constant({Static:true , Public:true }, "RequestFailed", $.String, "RequestFailed");

    $.Constant({Static:true , Public:true }, "UnableToRenew", $.String, "UnableToRenew");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+RequestTypes */ 

(function RequestTypes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+RequestTypes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Issue", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue");

    $.Constant({Static:true , Public:true }, "Renew", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Renew");

    $.Constant({Static:true , Public:true }, "Validate", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Validate");

    $.Constant({Static:true , Public:true }, "Cancel", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Cancel");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+KeyTypes */ 

(function KeyTypes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+KeyTypes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Asymmetric", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/PublicKey");

    $.Constant({Static:true , Public:true }, "Symmetric", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/SymmetricKey");

    $.Constant({Static:true , Public:true }, "Bearer", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+ComputedKeyAlgorithms */ 

(function ComputedKeyAlgorithms$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrust13Constants+ComputedKeyAlgorithms", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "PSHA1", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200512/CK/PSHA1");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter */ 

(function WSTrustConstantsAdapter$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Actions", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustActions"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustAttributeNames"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ComputedKeyAlgorithm", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustComputedKeyAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Elements", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustElementNames"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FaultCodes", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+FaultCodeValues"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KeyTypes", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustKeyTypes"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_RequestTypes", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustRequestTypes"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Trust13", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TrustFeb2005", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConstantsAdapter", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NamespaceURI", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:true , Public:false}, "attributeNames", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustAttributeNames"));

    $.Field({Static:true , Public:false}, "elementNames", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustElementNames"));

    $.Field({Static:true , Public:false}, "faultCodes", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+FaultCodeValues"));

    $.Field({Static:false, Public:false}, "namespaceURI", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Property({Static:true , Public:false}, "TrustFeb2005", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter"));

    $.Property({Static:true , Public:false}, "Trust13", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter"));

    $.Property({Static:false, Public:false}, "NamespaceURI", $.String);

    $.Property({Static:false, Public:false}, "Prefix", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "Actions", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustActions"));

    $.Property({Static:false, Public:false, Virtual:true }, "Attributes", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustAttributeNames"));

    $.Property({Static:false, Public:false, Virtual:true }, "ComputedKeyAlgorithm", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustComputedKeyAlgorithm"));

    $.Property({Static:false, Public:false, Virtual:true }, "Elements", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustElementNames"));

    $.Property({Static:false, Public:false, Virtual:true }, "FaultCodes", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+FaultCodeValues"));

    $.Property({Static:false, Public:false, Virtual:true }, "RequestTypes", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustRequestTypes"));

    $.Property({Static:false, Public:false, Virtual:true }, "KeyTypes", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustKeyTypes"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustActions */ 

(function WSTrustActions$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };



  function WSTrustActions_get_Cancel () {
    return this.WSTrustActions$Cancel$value;
  }; 

  function WSTrustActions_get_CancelResponse () {
    return this.WSTrustActions$CancelResponse$value;
  }; 

  function WSTrustActions_get_Issue () {
    return this.WSTrustActions$Issue$value;
  }; 

  function WSTrustActions_get_IssueResponse () {
    return this.WSTrustActions$IssueResponse$value;
  }; 

  function WSTrustActions_get_Renew () {
    return this.WSTrustActions$Renew$value;
  }; 

  function WSTrustActions_get_RenewResponse () {
    return this.WSTrustActions$RenewResponse$value;
  }; 

  function WSTrustActions_get_RequestSecurityContextToken () {
    return this.WSTrustActions$RequestSecurityContextToken$value;
  }; 

  function WSTrustActions_get_RequestSecurityContextTokenCancel () {
    return this.WSTrustActions$RequestSecurityContextTokenCancel$value;
  }; 

  function WSTrustActions_get_RequestSecurityContextTokenResponse () {
    return this.WSTrustActions$RequestSecurityContextTokenResponse$value;
  }; 

  function WSTrustActions_get_RequestSecurityContextTokenResponseCancel () {
    return this.WSTrustActions$RequestSecurityContextTokenResponseCancel$value;
  }; 

  function WSTrustActions_get_Validate () {
    return this.WSTrustActions$Validate$value;
  }; 

  function WSTrustActions_get_ValidateResponse () {
    return this.WSTrustActions$ValidateResponse$value;
  }; 

  function WSTrustActions_set_Cancel (value) {
    this.WSTrustActions$Cancel$value = value;
  }; 

  function WSTrustActions_set_CancelResponse (value) {
    this.WSTrustActions$CancelResponse$value = value;
  }; 

  function WSTrustActions_set_Issue (value) {
    this.WSTrustActions$Issue$value = value;
  }; 

  function WSTrustActions_set_IssueResponse (value) {
    this.WSTrustActions$IssueResponse$value = value;
  }; 

  function WSTrustActions_set_Renew (value) {
    this.WSTrustActions$Renew$value = value;
  }; 

  function WSTrustActions_set_RenewResponse (value) {
    this.WSTrustActions$RenewResponse$value = value;
  }; 

  function WSTrustActions_set_RequestSecurityContextToken (value) {
    this.WSTrustActions$RequestSecurityContextToken$value = value;
  }; 

  function WSTrustActions_set_RequestSecurityContextTokenCancel (value) {
    this.WSTrustActions$RequestSecurityContextTokenCancel$value = value;
  }; 

  function WSTrustActions_set_RequestSecurityContextTokenResponse (value) {
    this.WSTrustActions$RequestSecurityContextTokenResponse$value = value;
  }; 

  function WSTrustActions_set_RequestSecurityContextTokenResponseCancel (value) {
    this.WSTrustActions$RequestSecurityContextTokenResponseCancel$value = value;
  }; 

  function WSTrustActions_set_Validate (value) {
    this.WSTrustActions$Validate$value = value;
  }; 

  function WSTrustActions_set_ValidateResponse (value) {
    this.WSTrustActions$ValidateResponse$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustActions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "get_Cancel", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustActions_get_Cancel
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_CancelResponse", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustActions_get_CancelResponse
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Issue", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustActions_get_Issue
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_IssueResponse", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustActions_get_IssueResponse
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Renew", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustActions_get_Renew
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_RenewResponse", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustActions_get_RenewResponse
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_RequestSecurityContextToken", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustActions_get_RequestSecurityContextToken
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_RequestSecurityContextTokenCancel", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustActions_get_RequestSecurityContextTokenCancel
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_RequestSecurityContextTokenResponse", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustActions_get_RequestSecurityContextTokenResponse
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_RequestSecurityContextTokenResponseCancel", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustActions_get_RequestSecurityContextTokenResponseCancel
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Validate", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustActions_get_Validate
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_ValidateResponse", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustActions_get_ValidateResponse
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Cancel", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustActions_set_Cancel
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_CancelResponse", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustActions_set_CancelResponse
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Issue", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustActions_set_Issue
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IssueResponse", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustActions_set_IssueResponse
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Renew", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustActions_set_Renew
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RenewResponse", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustActions_set_RenewResponse
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RequestSecurityContextToken", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustActions_set_RequestSecurityContextToken
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RequestSecurityContextTokenCancel", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustActions_set_RequestSecurityContextTokenCancel
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RequestSecurityContextTokenResponse", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustActions_set_RequestSecurityContextTokenResponse
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RequestSecurityContextTokenResponseCancel", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustActions_set_RequestSecurityContextTokenResponseCancel
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Validate", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustActions_set_Validate
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ValidateResponse", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustActions_set_ValidateResponse
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustActions$Cancel$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustActions$CancelResponse$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustActions$Issue$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustActions$IssueResponse$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustActions$Renew$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustActions$RenewResponse$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustActions$RequestSecurityContextToken$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustActions$RequestSecurityContextTokenCancel$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustActions$RequestSecurityContextTokenResponse$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustActions$RequestSecurityContextTokenResponseCancel$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustActions$Validate$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustActions$ValidateResponse$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "Cancel", $.String);

    $.Property({Static:false, Public:false}, "CancelResponse", $.String);

    $.Property({Static:false, Public:false}, "Issue", $.String);

    $.Property({Static:false, Public:false}, "IssueResponse", $.String);

    $.Property({Static:false, Public:false}, "Renew", $.String);

    $.Property({Static:false, Public:false}, "RenewResponse", $.String);

    $.Property({Static:false, Public:false}, "RequestSecurityContextToken", $.String);

    $.Property({Static:false, Public:false}, "RequestSecurityContextTokenCancel", $.String);

    $.Property({Static:false, Public:false}, "RequestSecurityContextTokenResponse", $.String);

    $.Property({Static:false, Public:false}, "RequestSecurityContextTokenResponseCancel", $.String);

    $.Property({Static:false, Public:false}, "Validate", $.String);

    $.Property({Static:false, Public:false}, "ValidateResponse", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustAttributeNames */ 

(function WSTrustAttributeNames$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustAttributeNames", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Allow", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Context", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Dialect", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncodingType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OK", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "allow", $.String);

    $.Field({Static:false, Public:false}, "context", $.String);

    $.Field({Static:false, Public:false}, "dialect", $.String);

    $.Field({Static:false, Public:false}, "encodingType", $.String);

    $.Field({Static:false, Public:false}, "oK", $.String);

    $.Field({Static:false, Public:false}, "type", $.String);

    $.Field({Static:false, Public:false}, "valueType", $.String);

    $.Property({Static:false, Public:false}, "Allow", $.String);

    $.Property({Static:false, Public:false}, "Context", $.String);

    $.Property({Static:false, Public:false}, "Dialect", $.String);

    $.Property({Static:false, Public:false}, "EncodingType", $.String);

    $.Property({Static:false, Public:false}, "OK", $.String);

    $.Property({Static:false, Public:false}, "Type", $.String);

    $.Property({Static:false, Public:false}, "ValueType", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustComputedKeyAlgorithm */ 

(function WSTrustComputedKeyAlgorithm$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };



  function WSTrustComputedKeyAlgorithm_get_Psha1 () {
    return this.WSTrustComputedKeyAlgorithm$Psha1$value;
  }; 

  function WSTrustComputedKeyAlgorithm_set_Psha1 (value) {
    this.WSTrustComputedKeyAlgorithm$Psha1$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustComputedKeyAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "get_Psha1", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustComputedKeyAlgorithm_get_Psha1
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Psha1", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustComputedKeyAlgorithm_set_Psha1
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustComputedKeyAlgorithm$Psha1$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "Psha1", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustElementNames */ 

(function WSTrustElementNames$Members () {
  var $, $thisType;














































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustElementNames", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowPostdating", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AuthenticationType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BinaryExchange", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BinarySecret", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CancelTarget", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanonicalizationAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Claims", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Code", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ComputedKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ComputedKeyAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Delegatable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DelegateTo", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Encryption", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncryptionAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EncryptWith", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Entropy", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Forwardable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Issuer", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeySize", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Lifetime", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OnBehalfOf", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Participant", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Participants", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Primary", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProofEncryption", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Reason", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Renewing", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RenewTarget", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestedAttachedReference", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestedProofToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestedSecurityToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestedTokenCancelled", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestedUnattachedReference", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestKeySize", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestSecurityToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestSecurityTokenResponse", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SecurityContextToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SignatureAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SignWith", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Status", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TokenType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UseKey", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "allowPostdating", $.String);

    $.Field({Static:false, Public:false}, "authenticationType", $.String);

    $.Field({Static:false, Public:false}, "binarySecret", $.String);

    $.Field({Static:false, Public:false}, "binaryExchange", $.String);

    $.Field({Static:false, Public:false}, "cancelTarget", $.String);

    $.Field({Static:false, Public:false}, "claims", $.String);

    $.Field({Static:false, Public:false}, "computedKey", $.String);

    $.Field({Static:false, Public:false}, "computedKeyAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "canonicalizationAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "code", $.String);

    $.Field({Static:false, Public:false}, "delegatable", $.String);

    $.Field({Static:false, Public:false}, "delegateTo", $.String);

    $.Field({Static:false, Public:false}, "encryption", $.String);

    $.Field({Static:false, Public:false}, "encryptionAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "encryptWith", $.String);

    $.Field({Static:false, Public:false}, "entropy", $.String);

    $.Field({Static:false, Public:false}, "forwardable", $.String);

    $.Field({Static:false, Public:false}, "issuer", $.String);

    $.Field({Static:false, Public:false}, "keySize", $.String);

    $.Field({Static:false, Public:false}, "keyType", $.String);

    $.Field({Static:false, Public:false}, "lifetime", $.String);

    $.Field({Static:false, Public:false}, "onBehalfOf", $.String);

    $.Field({Static:false, Public:false}, "participant", $.String);

    $.Field({Static:false, Public:false}, "participants", $.String);

    $.Field({Static:false, Public:false}, "primary", $.String);

    $.Field({Static:false, Public:false}, "proofEncryption", $.String);

    $.Field({Static:false, Public:false}, "reason", $.String);

    $.Field({Static:false, Public:false}, "renewing", $.String);

    $.Field({Static:false, Public:false}, "renewTarget", $.String);

    $.Field({Static:false, Public:false}, "requestedAttachedReference", $.String);

    $.Field({Static:false, Public:false}, "requestedProofToken", $.String);

    $.Field({Static:false, Public:false}, "requestedSecurityToken", $.String);

    $.Field({Static:false, Public:false}, "requestedTokenCancelled", $.String);

    $.Field({Static:false, Public:false}, "requestedUnattachedReference", $.String);

    $.Field({Static:false, Public:false}, "requestKeySize", $.String);

    $.Field({Static:false, Public:false}, "requestSecurityToken", $.String);

    $.Field({Static:false, Public:false}, "requestSecurityTokenResponse", $.String);

    $.Field({Static:false, Public:false}, "requestType", $.String);

    $.Field({Static:false, Public:false}, "securityContextToken", $.String);

    $.Field({Static:false, Public:false}, "signWith", $.String);

    $.Field({Static:false, Public:false}, "signatureAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "status", $.String);

    $.Field({Static:false, Public:false}, "tokenType", $.String);

    $.Field({Static:false, Public:false}, "useKey", $.String);

    $.Property({Static:false, Public:false}, "AllowPostdating", $.String);

    $.Property({Static:false, Public:false}, "AuthenticationType", $.String);

    $.Property({Static:false, Public:false}, "BinarySecret", $.String);

    $.Property({Static:false, Public:false}, "BinaryExchange", $.String);

    $.Property({Static:false, Public:false}, "CancelTarget", $.String);

    $.Property({Static:false, Public:false}, "Claims", $.String);

    $.Property({Static:false, Public:false}, "ComputedKey", $.String);

    $.Property({Static:false, Public:false}, "ComputedKeyAlgorithm", $.String);

    $.Property({Static:false, Public:false}, "CanonicalizationAlgorithm", $.String);

    $.Property({Static:false, Public:false}, "Code", $.String);

    $.Property({Static:false, Public:false}, "Delegatable", $.String);

    $.Property({Static:false, Public:false}, "DelegateTo", $.String);

    $.Property({Static:false, Public:false}, "Encryption", $.String);

    $.Property({Static:false, Public:false}, "EncryptionAlgorithm", $.String);

    $.Property({Static:false, Public:false}, "EncryptWith", $.String);

    $.Property({Static:false, Public:false}, "Entropy", $.String);

    $.Property({Static:false, Public:false}, "Forwardable", $.String);

    $.Property({Static:false, Public:false}, "Issuer", $.String);

    $.Property({Static:false, Public:false}, "KeySize", $.String);

    $.Property({Static:false, Public:false}, "KeyType", $.String);

    $.Property({Static:false, Public:false}, "Lifetime", $.String);

    $.Property({Static:false, Public:false}, "OnBehalfOf", $.String);

    $.Property({Static:false, Public:false}, "Participant", $.String);

    $.Property({Static:false, Public:false}, "Participants", $.String);

    $.Property({Static:false, Public:false}, "Primary", $.String);

    $.Property({Static:false, Public:false}, "ProofEncryption", $.String);

    $.Property({Static:false, Public:false}, "Reason", $.String);

    $.Property({Static:false, Public:false}, "Renewing", $.String);

    $.Property({Static:false, Public:false}, "RenewTarget", $.String);

    $.Property({Static:false, Public:false}, "RequestedAttachedReference", $.String);

    $.Property({Static:false, Public:false}, "RequestedProofToken", $.String);

    $.Property({Static:false, Public:false}, "RequestedSecurityToken", $.String);

    $.Property({Static:false, Public:false}, "RequestedTokenCancelled", $.String);

    $.Property({Static:false, Public:false}, "RequestedUnattachedReference", $.String);

    $.Property({Static:false, Public:false}, "RequestKeySize", $.String);

    $.Property({Static:false, Public:false}, "RequestSecurityToken", $.String);

    $.Property({Static:false, Public:false}, "RequestSecurityTokenResponse", $.String);

    $.Property({Static:false, Public:false}, "RequestType", $.String);

    $.Property({Static:false, Public:false}, "SecurityContextToken", $.String);

    $.Property({Static:false, Public:false}, "SignWith", $.String);

    $.Property({Static:false, Public:false}, "SignatureAlgorithm", $.String);

    $.Property({Static:false, Public:false}, "Status", $.String);

    $.Property({Static:false, Public:false}, "TokenType", $.String);

    $.Property({Static:false, Public:false}, "UseKey", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustRequestTypes */ 

(function WSTrustRequestTypes$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };



  function WSTrustRequestTypes_get_Cancel () {
    return this.WSTrustRequestTypes$Cancel$value;
  }; 

  function WSTrustRequestTypes_get_Issue () {
    return this.WSTrustRequestTypes$Issue$value;
  }; 

  function WSTrustRequestTypes_get_Renew () {
    return this.WSTrustRequestTypes$Renew$value;
  }; 

  function WSTrustRequestTypes_get_Validate () {
    return this.WSTrustRequestTypes$Validate$value;
  }; 

  function WSTrustRequestTypes_set_Cancel (value) {
    this.WSTrustRequestTypes$Cancel$value = value;
  }; 

  function WSTrustRequestTypes_set_Issue (value) {
    this.WSTrustRequestTypes$Issue$value = value;
  }; 

  function WSTrustRequestTypes_set_Renew (value) {
    this.WSTrustRequestTypes$Renew$value = value;
  }; 

  function WSTrustRequestTypes_set_Validate (value) {
    this.WSTrustRequestTypes$Validate$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustRequestTypes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "get_Cancel", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustRequestTypes_get_Cancel
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Issue", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustRequestTypes_get_Issue
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Renew", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustRequestTypes_get_Renew
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Validate", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustRequestTypes_get_Validate
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Cancel", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustRequestTypes_set_Cancel
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Issue", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustRequestTypes_set_Issue
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Renew", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustRequestTypes_set_Renew
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Validate", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustRequestTypes_set_Validate
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustRequestTypes$Cancel$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustRequestTypes$Issue$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustRequestTypes$Renew$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustRequestTypes$Validate$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "Cancel", $.String);

    $.Property({Static:false, Public:false}, "Issue", $.String);

    $.Property({Static:false, Public:false}, "Renew", $.String);

    $.Property({Static:false, Public:false}, "Validate", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustKeyTypes */ 

(function WSTrustKeyTypes$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };



  function WSTrustKeyTypes_get_Asymmetric () {
    return this.WSTrustKeyTypes$Asymmetric$value;
  }; 

  function WSTrustKeyTypes_get_Bearer () {
    return this.WSTrustKeyTypes$Bearer$value;
  }; 

  function WSTrustKeyTypes_get_Symmetric () {
    return this.WSTrustKeyTypes$Symmetric$value;
  }; 

  function WSTrustKeyTypes_set_Asymmetric (value) {
    this.WSTrustKeyTypes$Asymmetric$value = value;
  }; 

  function WSTrustKeyTypes_set_Bearer (value) {
    this.WSTrustKeyTypes$Bearer$value = value;
  }; 

  function WSTrustKeyTypes_set_Symmetric (value) {
    this.WSTrustKeyTypes$Symmetric$value = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustKeyTypes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Method({Static:false, Public:false}, "get_Asymmetric", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustKeyTypes_get_Asymmetric
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Bearer", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustKeyTypes_get_Bearer
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_Symmetric", 
      JSIL.MethodSignature.Return($.String), 
      WSTrustKeyTypes_get_Symmetric
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Asymmetric", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustKeyTypes_set_Asymmetric
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Bearer", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustKeyTypes_set_Bearer
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Symmetric", 
      JSIL.MethodSignature.Action($.String), 
      WSTrustKeyTypes_set_Symmetric
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustKeyTypes$Asymmetric$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustKeyTypes$Bearer$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "WSTrustKeyTypes$Symmetric$value", $.String)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Property({Static:false, Public:false}, "Asymmetric", $.String);

    $.Property({Static:false, Public:false}, "Bearer", $.String);

    $.Property({Static:false, Public:false}, "Symmetric", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+FaultCodeValues */ 

(function FaultCodeValues$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+FaultCodeValues", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AuthenticationBadElements", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BadRequest", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExpiredData", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FailedAuthentication", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InvalidRequest", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InvalidScope", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InvalidSecurityToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InvalidTimeRange", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RenewNeeded", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestFailed", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnableToRenew", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:false}, "AuthenticationBadElements", $.String);

    $.Property({Static:false, Public:false}, "BadRequest", $.String);

    $.Property({Static:false, Public:false}, "ExpiredData", $.String);

    $.Property({Static:false, Public:false}, "FailedAuthentication", $.String);

    $.Property({Static:false, Public:false}, "InvalidRequest", $.String);

    $.Property({Static:false, Public:false}, "InvalidScope", $.String);

    $.Property({Static:false, Public:false}, "InvalidSecurityToken", $.String);

    $.Property({Static:false, Public:false}, "InvalidTimeRange", $.String);

    $.Property({Static:false, Public:false}, "RenewNeeded", $.String);

    $.Property({Static:false, Public:false}, "RequestFailed", $.String);

    $.Property({Static:false, Public:false}, "UnableToRenew", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter */ 

(function WSTrust13ConstantsAdapter$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Actions", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustActions"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ComputedKeyAlgorithm", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustComputedKeyAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Elements", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustElementNames"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KeyTypes", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustKeyTypes"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_RequestTypes", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustRequestTypes"))
    );

    $.Field({Static:true , Public:false}, "instance", $.Type);

    $.Field({Static:true , Public:false}, "trust13ElementNames", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13ElementNames"));

    $.Field({Static:true , Public:false}, "trust13ActionNames", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13Actions"));

    $.Field({Static:true , Public:false}, "trust13ComputedKeyAlgorithm", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13ComputedKeyAlgorithm"));

    $.Field({Static:true , Public:false}, "trust13KeyTypes", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13KeyTypes"));

    $.Field({Static:true , Public:false}, "trust13RequestTypes", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13RequestTypes"));

    $.Property({Static:true , Public:false}, "Instance", $.Type);

    $.Property({Static:false, Public:false, Virtual:true }, "Actions", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustActions"));

    $.Property({Static:false, Public:false, Virtual:true }, "ComputedKeyAlgorithm", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustComputedKeyAlgorithm"));

    $.Property({Static:false, Public:false, Virtual:true }, "Elements", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustElementNames"));

    $.Property({Static:false, Public:false, Virtual:true }, "KeyTypes", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustKeyTypes"));

    $.Property({Static:false, Public:false, Virtual:true }, "RequestTypes", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustRequestTypes"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13ElementNames */ 

(function WSTrust13ElementNames$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustElementNames"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13ElementNames", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyWrapAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequestSecurityTokenResponseCollection", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SecondaryParamters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValidateTarget", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "keyWrapAlgorithm", $.String);

    $.Field({Static:false, Public:false}, "secondaryParameters", $.String);

    $.Field({Static:false, Public:false}, "requestSecurityTokenResponseCollection", $.String);

    $.Field({Static:false, Public:false}, "validateTarget", $.String);

    $.Property({Static:false, Public:false}, "KeyWrapAlgorithm", $.String);

    $.Property({Static:false, Public:false}, "SecondaryParamters", $.String);

    $.Property({Static:false, Public:false}, "RequestSecurityTokenResponseCollection", $.String);

    $.Property({Static:false, Public:false}, "ValidateTarget", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13Actions */ 

(function WSTrust13Actions$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustActions"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13Actions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13ComputedKeyAlgorithm */ 

(function WSTrust13ComputedKeyAlgorithm$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustComputedKeyAlgorithm"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13ComputedKeyAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13KeyTypes */ 

(function WSTrust13KeyTypes$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustKeyTypes"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13KeyTypes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13RequestTypes */ 

(function WSTrust13RequestTypes$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustRequestTypes"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter+WSTrust13RequestTypes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer */ 

(function WSTrustRequestSerializer$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanRead", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateRequestSecurityToken", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadCustomElement", 
      new JSIL.MethodSignature(null, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlElement", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKnownRequestElement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlElement", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String, 
          $.Object, $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer */ 

(function WSTrust13RequestSerializer$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanRead", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadSecondaryParameters", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlElement", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKnownRequestElement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlElement", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String, 
          $.Object, $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer */ 

(function WSTrustResponseSerializer$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanRead", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlElement", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKnownResponseElement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlElement", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String, 
          $.Object, $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer */ 

(function WSTrust13ResponseSerializer$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanRead", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlElement", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKnownResponseElement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlElement", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String, 
          $.Object, $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust14Constants */ 

(function WSTrust14Constants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrust14Constants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "NamespaceURI", $.String, "http://docs.oasis-open.org/ws-sx/ws-trust/200802");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "tr");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrust14Constants+ElementNames */ 

(function ElementNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrust14Constants+ElementNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "ActAs", $.String, "ActAs");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants */ 

(function WSTrustFeb2005Constants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "NamespaceURI", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "t");

    $.Constant({Static:true , Public:true }, "SchemaLocation", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/ws-trust.xsd");

    $.Constant({Static:true , Public:true }, "Schema", $.String, "<?xml version='1.0' encoding='utf-8'?>\r\n<xs:schema xmlns:xs='http://www.w3.org/2001/XMLSchema'\r\n           xmlns:wst='http://schemas.xmlsoap.org/ws/2005/02/trust'\r\n           targetNamespace='http://schemas.xmlsoap.org/ws/2005/02/trust'\r\n           elementFormDefault='qualified' >\r\n\r\n<xs:element name='RequestSecurityToken' type='wst:RequestSecurityTokenType' />\r\n  <xs:complexType name='RequestSecurityTokenType' >\r\n    <xs:choice minOccurs='0' maxOccurs='unbounded' >\r\n        <xs:any namespace='##any' processContents='lax' minOccurs='0' maxOccurs='unbounded' />\r\n    </xs:choice>\r\n    <xs:attribute name='Context' type='xs:anyURI' use='optional' />\r\n    <xs:anyAttribute namespace='##other' processContents='lax' />\r\n  </xs:complexType>\r\n\r\n<xs:element name='RequestSecurityTokenResponse' type='wst:RequestSecurityTokenResponseType' />\r\n  <xs:complexType name='RequestSecurityTokenResponseType' >\r\n    <xs:choice minOccurs='0' maxOccurs='unbounded' >\r\n        <xs:any namespace='##any' processContents='lax' minOccurs='0' maxOccurs='unbounded' />\r\n    </xs:choice>\r\n    <xs:attribute name='Context' type='xs:anyURI' use='optional' />\r\n    <xs:anyAttribute namespace='##other' processContents='lax' />\r\n  </xs:complexType>\r\n\r\n        </xs:schema>");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+Actions */ 

(function Actions$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+Actions", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Issue", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Issue");

    $.Constant({Static:true , Public:true }, "IssueResponse", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Issue");

    $.Constant({Static:true , Public:true }, "Renew", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Renew");

    $.Constant({Static:true , Public:true }, "RenewResponse", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Renew");

    $.Constant({Static:true , Public:true }, "Validate", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Validate");

    $.Constant({Static:true , Public:true }, "ValidateResponse", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Validate");

    $.Constant({Static:true , Public:true }, "Cancel", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/Cancel");

    $.Constant({Static:true , Public:true }, "CancelResponse", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/Cancel");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextToken", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/SCT");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextTokenResponse", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/SCT");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextTokenCancel", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RST/SCT-Cancel");

    $.Constant({Static:true , Public:true }, "RequestSecurityContextTokenResponseCancel", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/RSTR/SCT-Cancel");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+AttributeNames */ 

(function AttributeNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+AttributeNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Allow", $.String, "Allow");

    $.Constant({Static:true , Public:true }, "Context", $.String, "Context");

    $.Constant({Static:true , Public:true }, "EncodingType", $.String, "EncodingType");

    $.Constant({Static:true , Public:true }, "OK", $.String, "OK");

    $.Constant({Static:true , Public:true }, "Type", $.String, "Type");

    $.Constant({Static:true , Public:true }, "ValueType", $.String, "ValueType");

    $.Constant({Static:true , Public:true }, "Dialect", $.String, "Dialect");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+ElementNames */ 

(function ElementNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+ElementNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "AllowPostdating", $.String, "AllowPostdating");

    $.Constant({Static:true , Public:true }, "AuthenticationType", $.String, "AuthenticationType");

    $.Constant({Static:true , Public:true }, "BinarySecret", $.String, "BinarySecret");

    $.Constant({Static:true , Public:true }, "BinaryExchange", $.String, "BinaryExchange");

    $.Constant({Static:true , Public:true }, "Code", $.String, "Code");

    $.Constant({Static:true , Public:true }, "Delegatable", $.String, "Delegatable");

    $.Constant({Static:true , Public:true }, "DelegateTo", $.String, "DelegateTo");

    $.Constant({Static:true , Public:true }, "Encryption", $.String, "Encryption");

    $.Constant({Static:true , Public:true }, "EncryptionAlgorithm", $.String, "EncryptionAlgorithm");

    $.Constant({Static:true , Public:true }, "EncryptWith", $.String, "EncryptWith");

    $.Constant({Static:true , Public:true }, "Entropy", $.String, "Entropy");

    $.Constant({Static:true , Public:true }, "Forwardable", $.String, "Forwardable");

    $.Constant({Static:true , Public:true }, "Lifetime", $.String, "Lifetime");

    $.Constant({Static:true , Public:true }, "Claims", $.String, "Claims");

    $.Constant({Static:true , Public:true }, "ComputedKey", $.String, "ComputedKey");

    $.Constant({Static:true , Public:true }, "ComputedKeyAlgorithm", $.String, "ComputedKeyAlgorithm");

    $.Constant({Static:true , Public:true }, "CanonicalizationAlgorithm", $.String, "CanonicalizationAlgorithm");

    $.Constant({Static:true , Public:true }, "CancelTarget", $.String, "CancelTarget");

    $.Constant({Static:true , Public:true }, "Issuer", $.String, "Issuer");

    $.Constant({Static:true , Public:true }, "KeyType", $.String, "KeyType");

    $.Constant({Static:true , Public:true }, "KeySize", $.String, "KeySize");

    $.Constant({Static:true , Public:true }, "OnBehalfOf", $.String, "OnBehalfOf");

    $.Constant({Static:true , Public:true }, "Participant", $.String, "Participant");

    $.Constant({Static:true , Public:true }, "Participants", $.String, "Participants");

    $.Constant({Static:true , Public:true }, "Primary", $.String, "Primary");

    $.Constant({Static:true , Public:true }, "ProofEncryption", $.String, "ProofEncryption");

    $.Constant({Static:true , Public:true }, "Reason", $.String, "Reason");

    $.Constant({Static:true , Public:true }, "Renewing", $.String, "Renewing");

    $.Constant({Static:true , Public:true }, "RenewTarget", $.String, "RenewTarget");

    $.Constant({Static:true , Public:true }, "RequestType", $.String, "RequestType");

    $.Constant({Static:true , Public:true }, "RequestSecurityTokenResponse", $.String, "RequestSecurityTokenResponse");

    $.Constant({Static:true , Public:true }, "RequestSecurityToken", $.String, "RequestSecurityToken");

    $.Constant({Static:true , Public:true }, "RequestedSecurityToken", $.String, "RequestedSecurityToken");

    $.Constant({Static:true , Public:true }, "RequestedProofToken", $.String, "RequestedProofToken");

    $.Constant({Static:true , Public:true }, "RequestKeySize", $.String, "RequestKeySize");

    $.Constant({Static:true , Public:true }, "RequestedAttachedReference", $.String, "RequestedAttachedReference");

    $.Constant({Static:true , Public:true }, "RequestedUnattachedReference", $.String, "RequestedUnattachedReference");

    $.Constant({Static:true , Public:true }, "RequestedTokenCancelled", $.String, "RequestedTokenCancelled");

    $.Constant({Static:true , Public:true }, "SecurityContextToken", $.String, "SecurityContextToken");

    $.Constant({Static:true , Public:true }, "SignatureAlgorithm", $.String, "SignatureAlgorithm");

    $.Constant({Static:true , Public:true }, "SignWith", $.String, "SignWith");

    $.Constant({Static:true , Public:true }, "Status", $.String, "Status");

    $.Constant({Static:true , Public:true }, "TokenType", $.String, "TokenType");

    $.Constant({Static:true , Public:true }, "UseKey", $.String, "UseKey");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+FaultCodeValues */ 

(function FaultCodeValues$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+FaultCodeValues", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "AuthenticationBadElements", $.String, "AuthenticationBadElements");

    $.Constant({Static:true , Public:true }, "BadRequest", $.String, "BadRequest");

    $.Constant({Static:true , Public:true }, "ExpiredData", $.String, "ExpiredData");

    $.Constant({Static:true , Public:true }, "FailedAuthentication", $.String, "FailedAuthentication");

    $.Constant({Static:true , Public:true }, "InvalidRequest", $.String, "InvalidRequest");

    $.Constant({Static:true , Public:true }, "InvalidScope", $.String, "InvalidScope");

    $.Constant({Static:true , Public:true }, "InvalidSecurityToken", $.String, "InvalidSecurityToken");

    $.Constant({Static:true , Public:true }, "InvalidTimeRange", $.String, "InvalidTimeRange");

    $.Constant({Static:true , Public:true }, "RenewNeeded", $.String, "RenewNeeded");

    $.Constant({Static:true , Public:true }, "RequestFailed", $.String, "RequestFailed");

    $.Constant({Static:true , Public:true }, "UnableToRenew", $.String, "UnableToRenew");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+RequestTypes */ 

(function RequestTypes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+RequestTypes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Issue", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/Issue");

    $.Constant({Static:true , Public:true }, "Renew", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/Renew");

    $.Constant({Static:true , Public:true }, "Validate", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/Validate");

    $.Constant({Static:true , Public:true }, "Cancel", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/Cancel");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+KeyTypes */ 

(function KeyTypes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+KeyTypes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Asymmetric", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/PublicKey");

    $.Constant({Static:true , Public:true }, "Symmetric", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/SymmetricKey");

    $.Constant({Static:true , Public:true }, "Bearer", $.String, "http://schemas.xmlsoap.org/ws/2005/05/identity/NoProofKey");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+ComputedKeyAlgorithms */ 

(function ComputedKeyAlgorithms$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants+ComputedKeyAlgorithms", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "PSHA1", $.String, "http://schemas.xmlsoap.org/ws/2005/02/trust/CK/PSHA1");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter */ 

(function WSTrustFeb2005ConstantsAdapter$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Actions", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustActions"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ComputedKeyAlgorithm", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustComputedKeyAlgorithm"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KeyTypes", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustKeyTypes"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_RequestTypes", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustRequestTypes"))
    );

    $.Field({Static:true , Public:false}, "instance", $.Type);

    $.Field({Static:true , Public:false}, "trustFeb2005Actions", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter+WSTrustFeb2005Actions"));

    $.Field({Static:true , Public:false}, "trustFeb2005ComputedKeyAlgorithm", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter+WSTrustFeb2005ComputedKeyAlgorithm"));

    $.Field({Static:true , Public:false}, "trustFeb2005KeyTypes", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter+WSTrustFeb2005KeyTypes"));

    $.Field({Static:true , Public:false}, "trustFeb2005RequestTypes", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter+WSTrustFeb2005RequestTypes"));

    $.Property({Static:true , Public:false}, "Instance", $.Type);

    $.Property({Static:false, Public:false, Virtual:true }, "Actions", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustActions"));

    $.Property({Static:false, Public:false, Virtual:true }, "ComputedKeyAlgorithm", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustComputedKeyAlgorithm"));

    $.Property({Static:false, Public:false, Virtual:true }, "KeyTypes", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustKeyTypes"));

    $.Property({Static:false, Public:false, Virtual:true }, "RequestTypes", $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustRequestTypes"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter+WSTrustFeb2005Actions */ 

(function WSTrustFeb2005Actions$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustActions"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter+WSTrustFeb2005Actions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter+WSTrustFeb2005ComputedKeyAlgorithm */ 

(function WSTrustFeb2005ComputedKeyAlgorithm$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustComputedKeyAlgorithm"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter+WSTrustFeb2005ComputedKeyAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter+WSTrustFeb2005KeyTypes */ 

(function WSTrustFeb2005KeyTypes$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustKeyTypes"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter+WSTrustFeb2005KeyTypes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter+WSTrustFeb2005RequestTypes */ 

(function WSTrustFeb2005RequestTypes$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter+WSTrustRequestTypes"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter+WSTrustFeb2005RequestTypes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer */ 

(function WSTrustFeb2005RequestSerializer$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanRead", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlElement", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKnownRequestElement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlElement", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String, 
          $.Object, $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer */ 

(function WSTrustFeb2005ResponseSerializer$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanRead", 
      new JSIL.MethodSignature($.Boolean, [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXml", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlElement", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteKnownResponseElement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXml", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlElement", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String, 
          $.Object, $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext */ 

(function WSTrustSerializationContext$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager"), $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"), 
          $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenHandlerCollectionManager", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityTokenHandlers", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TokenResolver", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseKeyTokenResolver", 
      JSIL.MethodSignature.Return($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityTokenHandlerCollectionManager", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TokenResolver", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseKeyTokenResolver", 
      JSIL.MethodSignature.Action($asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"))
    );

    $.Field({Static:false, Public:false}, "securityTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Field({Static:false, Public:false}, "useKeyTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Field({Static:false, Public:false}, "securityTokenHandlerCollectionManager", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager"));

    $.Property({Static:false, Public:true }, "TokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Property({Static:false, Public:true }, "UseKeyTokenResolver", $asm19.TypeRef("System.IdentityModel.Selectors.SecurityTokenResolver"));

    $.Property({Static:false, Public:true }, "SecurityTokenHandlerCollectionManager", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager"));

    $.Property({Static:false, Public:true }, "SecurityTokenHandlers", $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenHandlerCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException */ 

(function WSTrustSerializationException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustSerializationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSTrust.WSTrustSerializationHelper */ 

(function WSTrustSerializationHelper$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.IdentityModel.Protocols.WSTrust.WSTrustSerializationHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRequest", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateResponse", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRequestClaimNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRequestClaimPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadAppliesTo", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadBinaryExchange", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.BinaryExchange"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadBinarySecretSecurityToken", 
      new JSIL.MethodSignature($asm19.TypeRef("System.ServiceModel.Security.Tokens.BinarySecretSecurityToken"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadComputedKeyAlgorithm", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadInnerXml", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadInnerXml", 
      new JSIL.MethodSignature($asm2F.TypeRef("System.Xml.XmlElement"), [$asm2F.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadKeyType", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadLifetime", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadOnBehalfOfIssuer", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadProtectedKey", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ProtectedKey"), [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadRequestType", 
      new JSIL.MethodSignature($.String, [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadRSTRXml", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadRSTXml", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadStatus", 
      new JSIL.MethodSignature($asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Status"), [$asm2F.TypeRef("System.Xml.XmlReader"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteAppliesTo", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteBinaryExchange", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.BinaryExchange"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteBinarySecretSecurityToken", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.ServiceModel.Security.Tokens.BinarySecretSecurityToken"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteComputedKeyAlgorithm", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String, 
          $.String, $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteKeyType", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String, 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteKnownRequestElement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteKnownResponseElement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteLifetime", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Lifetime"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteOnBehalfOfIssuer", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.EndpointReference"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteProtectedKey", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.ProtectedKey"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteRequest", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityToken"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteRequestType", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String, 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteResponse", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse"), $asm2F.TypeRef("System.Xml.XmlWriter"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteRSTRXml", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String, 
          $.Object, $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteRSTXml", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $.String, 
          $.Object, $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteStatus", 
      new JSIL.MethodSignature(null, [
          $asm2F.TypeRef("System.Xml.XmlWriter"), $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.Status"), 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTokenElement", 
      new JSIL.MethodSignature(null, [
          $asm19.TypeRef("System.IdentityModel.Tokens.SecurityTokenElement"), $.String, 
          $asm19.TypeRef("System.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext"), $asm2F.TypeRef("System.Xml.XmlWriter")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IdentityModel.Protocols.WSFederation");
/* class System.IdentityModel.Protocols.WSFederation.WSAuthorizationConstants */ 

(function WSAuthorizationConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSFederation.WSAuthorizationConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "auth");

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://docs.oasis-open.org/wsfed/authorization/200706");

    $.Constant({Static:true , Public:true }, "Dialect", $.String, "http://docs.oasis-open.org/wsfed/authorization/200706/authclaims");

    $.Constant({Static:true , Public:true }, "Action", $.String, "http://docs.oasis-open.org/wsfed/authorization/200706/claims/action");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSFederation.WSAuthorizationConstants+Attributes */ 

(function Attributes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSFederation.WSAuthorizationConstants+Attributes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Name", $.String, "Name");

    $.Constant({Static:true , Public:true }, "Scope", $.String, "Scope");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSFederation.WSAuthorizationConstants+Elements */ 

(function Elements$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSFederation.WSAuthorizationConstants+Elements", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "AdditionalContext", $.String, "AdditionalContext");

    $.Constant({Static:true , Public:true }, "ClaimType", $.String, "ClaimType");

    $.Constant({Static:true , Public:true }, "ContextItem", $.String, "ContextItem");

    $.Constant({Static:true , Public:true }, "Description", $.String, "Description");

    $.Constant({Static:true , Public:true }, "DisplayName", $.String, "DisplayName");

    $.Constant({Static:true , Public:true }, "Value", $.String, "Value");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSFederation.WSFederationMetadataConstants */ 

(function WSFederationMetadataConstants$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSFederation.WSFederationMetadataConstants", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://docs.oasis-open.org/wsfed/federation/200706");

    $.Constant({Static:true , Public:true }, "Prefix", $.String, "fed");

    $.Constant({Static:true , Public:true }, "WSTransferAction", $.String, "http://schemas.xmlsoap.org/ws/2004/09/transfer/Get");

    $.Constant({Static:true , Public:true }, "WSTransferResponseAction", $.String, "http://schemas.xmlsoap.org/ws/2004/09/transfer/GetResponse");

    $.Constant({Static:true , Public:true }, "FederationMetadataHandler", $.String, "FederationMetadataHandler");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSFederation.WSFederationMetadataConstants+Attributes */ 

(function Attributes$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSFederation.WSFederationMetadataConstants+Attributes", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "RealmName", $.String, "RealmName");

    $.Constant({Static:true , Public:true }, "FederationId", $.String, "FederationID");

    $.Constant({Static:true , Public:true }, "Uri", $.String, "Uri");

    $.Constant({Static:true , Public:true }, "Optional", $.String, "Optional");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IdentityModel.Protocols.WSFederation.WSFederationMetadataConstants+Elements */ 

(function Elements$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.IdentityModel.Protocols.WSFederation.WSFederationMetadataConstants+Elements", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "AttributeServiceEndpoint", $.String, "AttributeServiceEndpoint");

    $.Constant({Static:true , Public:true }, "AutomaticPseudonyms", $.String, "AutomaticPseudonyms");

    $.Constant({Static:true , Public:true }, "ClaimTypesOffered", $.String, "ClaimTypesOffered");

    $.Constant({Static:true , Public:true }, "Federation", $.String, "Federation");

    $.Constant({Static:true , Public:true }, "FederationMetadata", $.String, "FederationMetadata");

    $.Constant({Static:true , Public:true }, "IssuerName", $.String, "IssuerName");

    $.Constant({Static:true , Public:true }, "IssuerNamesOffered", $.String, "IssuerNamesOffered");

    $.Constant({Static:true , Public:true }, "MetadataReference", $.String, "MetadataReference");

    $.Constant({Static:true , Public:true }, "PassiveRequestorEndpoints", $.String, "PassiveRequestorEndpoints");

    $.Constant({Static:true , Public:true }, "PseudonymServiceEndpoint", $.String, "PseudonymServiceEndpoint");

    $.Constant({Static:true , Public:true }, "SingleSignoutNotificationEndpoint", $.String, "SingleSignoutNotificationEndpoint");

    $.Constant({Static:true , Public:true }, "SingleSignOutSubscriptionEndpoint", $.String, "SingleSignOutSubscriptionEndpoint");

    $.Constant({Static:true , Public:true }, "TokenIssuerEndpoints", $.String, "TokenIssuerEndpoints");

    $.Constant({Static:true , Public:true }, "TokenIssuerName", $.String, "TokenIssuerName");

    $.Constant({Static:true , Public:true }, "TokenKeyTransferKeyInfo", $.String, "TokenKeyTransferKeyInfo");

    $.Constant({Static:true , Public:true }, "TokenSigningKeyInfo", $.String, "TokenSigningKeyInfo");

    $.Constant({Static:true , Public:true }, "TokenType", $.String, "TokenType");

    $.Constant({Static:true , Public:true }, "TokenTypesOffered", $.String, "TokenTypesOffered");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ComputeStringHash", 
      new JSIL.MethodSignature($.UInt32, [$.String])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "53C35FB7B9AF2450998AA8FDACE9F2E6A983ADB9", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

