/* Generated by JSIL v0.8.2 build 17182. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm1D = JSIL.DeclareAssembly("System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "System.Net.Http.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "System.Net.Http.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "System.Net.Http.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "4.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "4.7.2046.0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", $.String, "30319");

    $.Constant({Static:true , Public:false}, "BuildRevisionStr", $.String, "0");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 30319);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", $.String, "7cec85d7bea7798e");

    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", $.String, "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB");

    $.Constant({Static:true , Public:false}, "PlatformPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "Mscorlib", $.String, "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemData", $.String, "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", $.String, "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "System", $.String, "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemCore", $.String, "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemNumerics", $.String, "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", $.String, "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemThreadingTasksDataflow", $.String, "System.Threading.Tasks.Dataflow, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWindowsForms", $.String, "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemXml", $.String, "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", $.String, "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", $.String, "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemConfiguration", $.String, "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", $.String, "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDeployment", $.String, "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDesign", $.String, "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", $.String, "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", $.String, "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawing", $.String, "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", $.String, "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemManagement", $.String, "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemMessaging", $.String, "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttp", $.String, "System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemNetHttpWebRequest", $.String, "System.Net.Http.WebRequest, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", $.String, "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntime", $.String, "System.Runtime.WindowsRuntime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntimeUIXaml", $.String, "System.Runtime.WindowsRuntimeUIXaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemSecurity", $.String, "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemServiceModelWeb", $.String, "System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemServiceProcess", $.String, "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWeb", $.String, "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", $.String, "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", $.String, "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", $.String, "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", $.String, "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWebExtensions", $.String, "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", $.String, "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebMobile", $.String, "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", $.String, "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRouting", $.String, "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebServices", $.String, "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "WindowsBase", $.String, "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", $.String, "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", $.String, "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", $.String, "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", $.String, "b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", $.String, "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", $.String, "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", $.String, "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", $.String, "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", $.String, "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftJScript", $.String, "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Net");
JSIL.DeclareNamespace("System.Net.Http");
/* class System.Net.Http.SR */ 

(function SR$Members () {
  var $, $thisType;

























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_argument_empty_string", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_client_absolute_baseaddress_required", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_client_content_headers", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_client_execution_error", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_client_http_baseaddress_required", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_client_invalid_requesturi", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_client_request_already_sent", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_client_request_headers", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_client_response_headers", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_client_send_canceled", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_client_send_completed", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_client_send_error", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_content_buffersize_exceeded", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_content_buffersize_limit", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_content_encoding_set", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_content_field_too_long", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_content_invalid_charset", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_content_no_task_returned", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_content_readonly_stream", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_content_stream_already_read", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_content_stream_copy_error", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_copyto_array_too_small", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_handler_nocontentlength", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_handler_norequest", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_handler_noresponse", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_handler_not_assigned", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_headers_cant_add_any_to_collection", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_headers_invalid_etag_name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_headers_invalid_from_header", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_headers_invalid_header_name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_headers_invalid_host_header", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_headers_invalid_range", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_headers_invalid_value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_headers_no_newlines", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_headers_not_allowed_header_name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_headers_not_found", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_headers_single_value_header", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_httpmethod_format_error", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_invalid_enable_first", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_log_content_no_task_returned_copytoasync", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_log_content_null", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_log_content_offload_async", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_log_headers_invalid_quality", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_log_headers_invalid_value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_log_headers_no_newlines", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_log_headers_wrong_email_format", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_message_not_success_statuscode", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_operation_started", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_parser_invalid_base64_string", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_parser_invalid_date_format", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_read_error", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_net_http_reasonphrase_format_error", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Globalization.CultureInfo"))
    );

    $.Field({Static:true , Public:false}, "resourceMan", $asm07.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm07.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm07.TypeRef("System.Resources.ResourceManager"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "Culture", $asm07.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm0A.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0A.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "net_http_argument_empty_string", $.String);

    $.Property({Static:true , Public:false}, "net_http_client_absolute_baseaddress_required", $.String);

    $.Property({Static:true , Public:false}, "net_http_client_content_headers", $.String);

    $.Property({Static:true , Public:false}, "net_http_client_execution_error", $.String);

    $.Property({Static:true , Public:false}, "net_http_client_http_baseaddress_required", $.String);

    $.Property({Static:true , Public:false}, "net_http_client_invalid_requesturi", $.String);

    $.Property({Static:true , Public:false}, "net_http_client_request_already_sent", $.String);

    $.Property({Static:true , Public:false}, "net_http_client_request_headers", $.String);

    $.Property({Static:true , Public:false}, "net_http_client_response_headers", $.String);

    $.Property({Static:true , Public:false}, "net_http_client_send_canceled", $.String);

    $.Property({Static:true , Public:false}, "net_http_client_send_completed", $.String);

    $.Property({Static:true , Public:false}, "net_http_client_send_error", $.String);

    $.Property({Static:true , Public:false}, "net_http_content_buffersize_exceeded", $.String);

    $.Property({Static:true , Public:false}, "net_http_content_buffersize_limit", $.String);

    $.Property({Static:true , Public:false}, "net_http_content_encoding_set", $.String);

    $.Property({Static:true , Public:false}, "net_http_content_field_too_long", $.String);

    $.Property({Static:true , Public:false}, "net_http_content_invalid_charset", $.String);

    $.Property({Static:true , Public:false}, "net_http_content_no_task_returned", $.String);

    $.Property({Static:true , Public:false}, "net_http_content_readonly_stream", $.String);

    $.Property({Static:true , Public:false}, "net_http_content_stream_already_read", $.String);

    $.Property({Static:true , Public:false}, "net_http_content_stream_copy_error", $.String);

    $.Property({Static:true , Public:false}, "net_http_copyto_array_too_small", $.String);

    $.Property({Static:true , Public:false}, "net_http_handler_nocontentlength", $.String);

    $.Property({Static:true , Public:false}, "net_http_handler_norequest", $.String);

    $.Property({Static:true , Public:false}, "net_http_handler_noresponse", $.String);

    $.Property({Static:true , Public:false}, "net_http_handler_not_assigned", $.String);

    $.Property({Static:true , Public:false}, "net_http_headers_cant_add_any_to_collection", $.String);

    $.Property({Static:true , Public:false}, "net_http_headers_invalid_etag_name", $.String);

    $.Property({Static:true , Public:false}, "net_http_headers_invalid_from_header", $.String);

    $.Property({Static:true , Public:false}, "net_http_headers_invalid_header_name", $.String);

    $.Property({Static:true , Public:false}, "net_http_headers_invalid_host_header", $.String);

    $.Property({Static:true , Public:false}, "net_http_headers_invalid_range", $.String);

    $.Property({Static:true , Public:false}, "net_http_headers_invalid_value", $.String);

    $.Property({Static:true , Public:false}, "net_http_headers_no_newlines", $.String);

    $.Property({Static:true , Public:false}, "net_http_headers_not_allowed_header_name", $.String);

    $.Property({Static:true , Public:false}, "net_http_headers_not_found", $.String);

    $.Property({Static:true , Public:false}, "net_http_headers_single_value_header", $.String);

    $.Property({Static:true , Public:false}, "net_http_httpmethod_format_error", $.String);

    $.Property({Static:true , Public:false}, "net_http_invalid_enable_first", $.String);

    $.Property({Static:true , Public:false}, "net_http_log_content_no_task_returned_copytoasync", $.String);

    $.Property({Static:true , Public:false}, "net_http_log_content_null", $.String);

    $.Property({Static:true , Public:false}, "net_http_log_content_offload_async", $.String);

    $.Property({Static:true , Public:false}, "net_http_log_headers_invalid_quality", $.String);

    $.Property({Static:true , Public:false}, "net_http_log_headers_invalid_value", $.String);

    $.Property({Static:true , Public:false}, "net_http_log_headers_no_newlines", $.String);

    $.Property({Static:true , Public:false}, "net_http_log_headers_wrong_email_format", $.String);

    $.Property({Static:true , Public:false}, "net_http_message_not_success_statuscode", $.String);

    $.Property({Static:true , Public:false}, "net_http_operation_started", $.String);

    $.Property({Static:true , Public:false}, "net_http_parser_invalid_base64_string", $.String);

    $.Property({Static:true , Public:false}, "net_http_parser_invalid_date_format", $.String);

    $.Property({Static:true , Public:false}, "net_http_read_error", $.String);

    $.Property({Static:true , Public:false}, "net_http_reasonphrase_format_error", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0A.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"]; })
    .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"))
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpContent */ 

(function HttpContent$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpContent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ByteArrayHasPrefix", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTaskNotNull", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyToAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.IO.Stream"), $asm0A.TypeRef("System.Net.TransportContext")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CopyToAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.IO.Stream")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateCompletedTask", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateContentReadStreamAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm07.TypeRef("System.IO.Stream")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateMemoryStream", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.MemoryStream"), [$.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Exception")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Headers", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpContentHeaders"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsBuffered", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetComputedOrBufferLength", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStreamCopyException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LoadIntoBufferAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "LoadIntoBufferAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$.Int64])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadAsByteArrayAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$jsilcore.TypeRef("System.Array", [$.Byte])]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadAsStreamAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm07.TypeRef("System.IO.Stream")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadAsStringAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.String]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeToStreamAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.IO.Stream"), $asm0A.TypeRef("System.Net.TransportContext")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryComputeLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "headers", $asm1D.TypeRef("System.Net.Http.Headers.HttpContentHeaders"));

    $.Field({Static:false, Public:false}, "bufferedContent", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "contentReadStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "canCalculateLength", $.Boolean);

    $.Constant({Static:true , Public:false}, "MaxBufferSize", $.Int64, 2147483647);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultStringEncoding", $asm07.TypeRef("System.Text.Encoding"));

    $.Field({Static:true , Public:false}, "EncodingsWithBom", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Text.Encoding")]));

    $.Property({Static:false, Public:true }, "Headers", $asm1D.TypeRef("System.Net.Http.Headers.HttpContentHeaders"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false}, "IsBuffered", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.HttpContent+LimitMemoryStream */ 

(function LimitMemoryStream$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.MemoryStream"), 
      Name: "System.Net.Http.HttpContent+LimitMemoryStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:false, Public:false}, "maxSize", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.HttpContent+<>c__DisplayClass13_0 */ 

(function $l$gc__DisplayClass13_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpContent+<>c__DisplayClass13_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReadAsStringAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.String]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.HttpContent"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpContent+<>c__DisplayClass14_0 */ 

(function $l$gc__DisplayClass14_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpContent+<>c__DisplayClass14_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReadAsByteArrayAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$jsilcore.TypeRef("System.Array", [$.Byte])]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.HttpContent"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpContent+<>c__DisplayClass15_0 */ 

(function $l$gc__DisplayClass15_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpContent+<>c__DisplayClass15_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lReadAsStreamAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm07.TypeRef("System.IO.Stream")]))
    );

    $.Field({Static:false, Public:true }, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm07.TypeRef("System.IO.Stream")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.HttpContent"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpContent+<>c__DisplayClass17_0 */ 

(function $l$gc__DisplayClass17_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpContent+<>c__DisplayClass17_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCopyToAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpContent+<>c__DisplayClass21_0 */ 

(function $l$gc__DisplayClass21_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpContent+<>c__DisplayClass21_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lLoadIntoBufferAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "tempBuffer", $asm07.TypeRef("System.IO.MemoryStream"));

    $.Field({Static:false, Public:true }, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.HttpContent"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpContent+<>c__DisplayClass22_0 */ 

(function $l$gc__DisplayClass22_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpContent+<>c__DisplayClass22_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lCreateContentReadStreamAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm07.TypeRef("System.IO.Stream")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.HttpContent"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.ByteArrayContent */ 

(function ByteArrayContent$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.HttpContent"), 
      Name: "System.Net.Http.ByteArrayContent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateContentReadStreamAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm07.TypeRef("System.IO.Stream")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeToStreamAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.IO.Stream"), $asm0A.TypeRef("System.Net.TransportContext")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryComputeLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "content", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "offset", $.Int32);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.FormUrlEncodedContent */ 

(function FormUrlEncodedContent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.ByteArrayContent"), 
      Name: "System.Net.Http.FormUrlEncodedContent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Encode", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetContentByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])])])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.MultipartContent */ 

(function MultipartContent$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.HttpContent"), 
      Name: "System.Net.Http.MultipartContent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$lWriteTerminatingBoundaryAsync$gb__18_0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpContent"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CleanupAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EncodeStringToStreamAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.IO.Stream"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultBoundary", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncodedLength", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm1D.TypeRef("System.Net.Http.HttpContent")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "HandleAsyncException", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeToStreamAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.IO.Stream"), $asm0A.TypeRef("System.Net.TransportContext")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryComputeLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ValidateBoundary", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNextContentAsync", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNextContentHeadersAsync", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTerminatingBoundaryAsync", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "crlf", $.String, "\r\n");

    $.Field({Static:false, Public:false}, "nestedContent", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm1D.TypeRef("System.Net.Http.HttpContent")]));

    $.Field({Static:false, Public:false}, "boundary", $.String);

    $.Field({Static:false, Public:false}, "nextContentIndex", $.Int32);

    $.Field({Static:false, Public:false}, "outputStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm1D.TypeRef("System.Net.Http.HttpContent")]), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.MultipartFormDataContent */ 

(function MultipartFormDataContent$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.MultipartContent"), 
      Name: "System.Net.Http.MultipartFormDataContent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpContent"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.HttpContent"), $.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $asm1D.TypeRef("System.Net.Http.HttpContent"), $.String, 
          $.String
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddInternal", 
      new JSIL.MethodSignature(null, [
          $asm1D.TypeRef("System.Net.Http.HttpContent"), $.String, 
          $.String
        ])
    );

    $.Constant({Static:true , Public:false}, "formData", $.String, "form-data");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.HttpMessageHandler */ 

(function HttpMessageHandler$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpMessageHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SendAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm07.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.HttpClientHandler */ 

(function HttpClientHandler$Members () {
  var $, $thisType;




















































  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.HttpMessageHandler"), 
      Name: "System.Net.Http.HttpClientHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AreEqual", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDisposedOrStarted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAndPrepareWebRequest", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Net.HttpWebRequest"), [$asm1D.TypeRef("System.Net.Http.HttpRequestMessage")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateResponseMessage", 
      new JSIL.MethodSignature($asm1D.TypeRef("System.Net.Http.HttpResponseMessage"), [$asm0A.TypeRef("System.Net.HttpWebResponse"), $asm1D.TypeRef("System.Net.Http.HttpRequestMessage")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AllowAutoRedirect", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AutomaticDecompression", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.DecompressionMethods"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ClientCertificateOptions", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.ClientCertificateOption"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CookieContainer", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.CookieContainer"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Credentials", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.ICredentials"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxAutomaticRedirections", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxRequestContentBufferSize", 
      JSIL.MethodSignature.Return($.Int64)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_PreAuthenticate", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Proxy", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.IWebProxy"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsAutomaticDecompression", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsProxy", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsRedirectConfiguration", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UseCookies", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UseDefaultCredentials", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UseProxy", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetRequestStreamCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResponseCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleAsyncException", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.HttpClientHandler+RequestState"), $asm07.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeWebRequest", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm0A.TypeRef("System.Net.HttpWebRequest")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnCancel", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareAndStartContentUpload", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpClientHandler+RequestState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeCaptureIdenity", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpClientHandler+RequestState"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SendAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm07.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_AllowAutoRedirect", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_AutomaticDecompression", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.DecompressionMethods"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ClientCertificateOptions", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.ClientCertificateOption"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_CookieContainer", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.CookieContainer"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Credentials", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.ICredentials"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MaxAutomaticRedirections", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MaxRequestContentBufferSize", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_PreAuthenticate", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Proxy", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.IWebProxy"))
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_UseCookies", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_UseDefaultCredentials", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_UseProxy", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetConnectionOptions", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.HttpWebRequest"), $asm1D.TypeRef("System.Net.Http.HttpRequestMessage")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetContentHeaders", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.HttpWebRequest"), $asm1D.TypeRef("System.Net.Http.HttpRequestMessage")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaultOptions", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.HttpWebRequest"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetOperationStarted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "SetRequestHeaders", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.HttpWebRequest"), $asm1D.TypeRef("System.Net.Http.HttpRequestMessage")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetServicePointOptions", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Net.HttpWebRequest"), $asm1D.TypeRef("System.Net.Http.HttpRequestMessage")])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartGettingRequestStream", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpClientHandler+RequestState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StartGettingResponse", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpClientHandler+RequestState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StartRequest", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "onCancel", $asm07.TypeRef("System.Action`1", [$.Object]), function ($pi) {
        return $asm07.System.Action$b1.Of($asm07.System.Object).New(null, null, new JSIL.MethodPointerInfo($thisType, "OnCancel", JSIL.MethodSignature.Action($.Object), true, false));
      });

    $.Field({Static:false, Public:false, ReadOnly:true }, "startRequest", $asm07.TypeRef("System.Action`1", [$.Object]));

    $.Field({Static:false, Public:false, ReadOnly:true }, "getRequestStreamCallback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "getResponseCallback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "operationStarted", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "disposed", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "maxRequestContentBufferSize", $.Int64);

    $.Field({Static:false, Public:false}, "cookieContainer", $asm0A.TypeRef("System.Net.CookieContainer"));

    $.Field({Static:false, Public:false}, "useCookies", $.Boolean);

    $.Field({Static:false, Public:false}, "automaticDecompression", $asm0A.TypeRef("System.Net.DecompressionMethods"));

    $.Field({Static:false, Public:false}, "proxy", $asm0A.TypeRef("System.Net.IWebProxy"));

    $.Field({Static:false, Public:false}, "useProxy", $.Boolean);

    $.Field({Static:false, Public:false}, "preAuthenticate", $.Boolean);

    $.Field({Static:false, Public:false}, "useDefaultCredentials", $.Boolean);

    $.Field({Static:false, Public:false}, "credentials", $asm0A.TypeRef("System.Net.ICredentials"));

    $.Field({Static:false, Public:false}, "allowAutoRedirect", $.Boolean);

    $.Field({Static:false, Public:false}, "maxAutomaticRedirections", $.Int32);

    $.Field({Static:false, Public:false}, "connectionGroupName", $.String);

    $.Field({Static:false, Public:false}, "clientCertOptions", $asm1D.TypeRef("System.Net.Http.ClientCertificateOption"));

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsAutomaticDecompression", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsProxy", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsRedirectConfiguration", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "UseCookies", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "CookieContainer", $asm0A.TypeRef("System.Net.CookieContainer"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ClientCertificateOptions", $asm1D.TypeRef("System.Net.Http.ClientCertificateOption"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "AutomaticDecompression", $asm0A.TypeRef("System.Net.DecompressionMethods"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "UseProxy", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Proxy", $asm0A.TypeRef("System.Net.IWebProxy"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "PreAuthenticate", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "UseDefaultCredentials", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Credentials", $asm0A.TypeRef("System.Net.ICredentials"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "AllowAutoRedirect", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxAutomaticRedirections", $.Int32)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxRequestContentBufferSize", $.Int64)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.HttpClientHandler+RequestState */ 

(function RequestState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpClientHandler+RequestState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "webRequest", $asm0A.TypeRef("System.Net.HttpWebRequest"));

    $.Field({Static:false, Public:false}, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]));

    $.Field({Static:false, Public:false}, "cancellationToken", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "requestMessage", $asm1D.TypeRef("System.Net.Http.HttpRequestMessage"));

    $.Field({Static:false, Public:false}, "requestStream", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "identity", $asm07.TypeRef("System.Security.Principal.WindowsIdentity"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.DelegatingStream */ 

(function DelegatingStream$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.IO.Stream"), 
      Name: "System.Net.Http.DelegatingStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FlushAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm07.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:false, Public:false}, "innerStream", $asm07.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.HttpClientHandler+WebExceptionWrapperStream */ 

(function WebExceptionWrapperStream$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.DelegatingStream"), 
      Name: "System.Net.Http.HttpClientHandler+WebExceptionWrapperStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gn__0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.Int32]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.AsyncStateMachineAttribute"), function () { return [$asm1D.System.Net.Http.HttpClientHandler_WebExceptionWrapperStream_$lReadAsync$gd__4.__Type__]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Net.Http.HttpClientHandler+WebExceptionWrapperStream+<ReadAsync>d__4 */ 

(function $lReadAsync$gd__4$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Net.Http.HttpClientHandler+WebExceptionWrapperStream+<ReadAsync>d__4", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStateMachine", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"))
    )
      .Overrides($asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine"), "SetStateMachine")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:true }, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:true }, "$l$gt__builder", $asm07.TypeRef("System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1", [$.Int32]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.HttpClientHandler+WebExceptionWrapperStream"));

    $.Field({Static:false, Public:true }, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:true }, "offset", $.Int32);

    $.Field({Static:false, Public:true }, "count", $.Int32);

    $.Field({Static:false, Public:true }, "cancellationToken", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:false}, "$l$gu__1", $asm07.TypeRef("System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter", [$.Int32]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpClientHandler+<>c__DisplayClass72_0 */ 

(function $l$gc__DisplayClass72_0$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpClientHandler+<>c__DisplayClass72_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "state", $asm1D.TypeRef("System.Net.Http.HttpClientHandler+RequestState"));

    $.Field({Static:false, Public:true }, "requestContent", $asm1D.TypeRef("System.Net.Http.HttpContent"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.HttpClientHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpClientHandler+<>c__DisplayClass72_1 */ 

(function $l$gc__DisplayClass72_1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpClientHandler+<>c__DisplayClass72_1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lPrepareAndStartContentUpload$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "contentLength", $asm07.TypeRef("System.Nullable`1", [$.Int64]));

    $.Field({Static:false, Public:true }, "CS$$l$g8__locals1", $asm1D.TypeRef("System.Net.Http.HttpClientHandler+<>c__DisplayClass72_0"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpClientHandler+<>c__DisplayClass74_0 */ 

(function $l$gc__DisplayClass74_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpClientHandler+<>c__DisplayClass74_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetRequestStreamCallback$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "state", $asm1D.TypeRef("System.Net.Http.HttpClientHandler+RequestState"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.HttpClientHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpRuleParser */ 

(function HttpRuleParser$Members () {
  var $, $thisType;















  JSIL.MakeStaticClass("System.Net.Http.HttpRuleParser", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ContainsInvalidNewLine", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsInvalidNewLine", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCommentLength", 
      new JSIL.MethodSignature($asm1D.TypeRef("System.Net.Http.HttpParseResult"), [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExpressionLength", 
      new JSIL.MethodSignature($asm1D.TypeRef("System.Net.Http.HttpParseResult"), [
          $.String, $.Int32, 
          $.Char, $.Char, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHostLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNumberLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetQuotedPairLength", 
      new JSIL.MethodSignature($asm1D.TypeRef("System.Net.Http.HttpParseResult"), [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetQuotedStringLength", 
      new JSIL.MethodSignature($asm1D.TypeRef("System.Net.Http.HttpParseResult"), [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTokenLength", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWhitespaceLength", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTokenChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidHostName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryStringToDate", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.DateTimeOffset")])])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "tokenChars", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm07.System.Boolean, 128);
      });

    $.Constant({Static:true , Public:false}, "maxNestedCount", $.Int32, 5);

    $.Field({Static:true , Public:false, ReadOnly:true }, "dateFormats", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Constant({Static:true , Public:false}, "CR", $.Char, "\r");

    $.Constant({Static:true , Public:false}, "LF", $.Char, "\n");

    $.Constant({Static:true , Public:false}, "MaxInt64Digits", $.Int32, 19);

    $.Constant({Static:true , Public:false}, "MaxInt32Digits", $.Int32, 10);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultHttpEncoding", $asm07.TypeRef("System.Text.Encoding"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Net.Http.HttpParseResult */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Http.HttpParseResult", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Parsed: 0, 
    NotParsed: 1, 
    InvalidFormat: 2, 
  }
);

/* enum System.Net.Http.HttpCompletionOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Http.HttpCompletionOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    ResponseContentRead: 0, 
    ResponseHeadersRead: 1, 
  }
);

/* class System.Net.Http.DelegatingHandler */ 

(function DelegatingHandler$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.HttpMessageHandler"), 
      Name: "System.Net.Http.DelegatingHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpMessageHandler"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDisposedOrStarted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_InnerHandler", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.HttpMessageHandler"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SendAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm07.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_InnerHandler", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpMessageHandler"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetOperationStarted", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "innerHandler", $asm1D.TypeRef("System.Net.Http.HttpMessageHandler"));

    $.Field({Static:false, Public:false}, "operationStarted", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "disposed", $asm07.TypeRef("System.Boolean"));

    $.Property({Static:false, Public:true }, "InnerHandler", $asm1D.TypeRef("System.Net.Http.HttpMessageHandler"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.HttpRequestException */ 

(function HttpRequestException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "System.Net.Http.HttpRequestException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HandleSerialization", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Runtime.Serialization.SafeSerializationEventArgs")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "handleSerialization", $asm07.TypeRef("System.EventHandler`1", [$asm07.TypeRef("System.Runtime.Serialization.SafeSerializationEventArgs")]), function ($pi) {
        return $asm07.System.EventHandler$b1.Of($asm07.System.Runtime.Serialization.SafeSerializationEventArgs).New(null, null, new JSIL.MethodPointerInfo($thisType, "HandleSerialization", new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Runtime.Serialization.SafeSerializationEventArgs")]), true, false));
      });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.HttpRequestException+EmptyState */ 

(function EmptyState$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpRequestException+EmptyState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.Serialization.ISafeSerializationData")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.HttpMessageInvoker */ 

(function HttpMessageInvoker$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpMessageInvoker", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpMessageHandler"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.HttpMessageHandler"), $.Boolean])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SendAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm07.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "disposed", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "disposeHandler", $.Boolean);

    $.Field({Static:false, Public:false}, "handler", $asm1D.TypeRef("System.Net.Http.HttpMessageHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.HttpClient */ 

(function HttpClient$Members () {
  var $, $thisType;



























































  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.HttpMessageInvoker"), 
      Name: "System.Net.Http.HttpClient", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpMessageHandler"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.HttpMessageHandler"), $.Boolean])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CancelPendingRequests", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CheckBaseAddress", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("System.Uri"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDisposedOrStarted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckRequestMessage", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpRequestMessage"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUri", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Uri"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DeleteAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm0A.TypeRef("System.Uri")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DeleteAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$.String, $asm07.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DeleteAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm0A.TypeRef("System.Uri"), $asm07.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "DisposeRequestContent", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpRequestMessage"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseAddress", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultRequestHeaders", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpRequestHeaders"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxResponseContentBufferSize", 
      JSIL.MethodSignature.Return($.Int64)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Timeout", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.TimeSpan"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm0A.TypeRef("System.Uri")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$.String, $asm1D.TypeRef("System.Net.Http.HttpCompletionOption")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm0A.TypeRef("System.Uri"), $asm1D.TypeRef("System.Net.Http.HttpCompletionOption")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$.String, $asm07.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm0A.TypeRef("System.Uri"), $asm07.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [
          $.String, $asm1D.TypeRef("System.Net.Http.HttpCompletionOption"), 
          $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [
          $asm0A.TypeRef("System.Uri"), $asm1D.TypeRef("System.Net.Http.HttpCompletionOption"), 
          $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetByteArrayAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$jsilcore.TypeRef("System.Array", [$.Byte])]), [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetByteArrayAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$jsilcore.TypeRef("System.Array", [$.Byte])]), [$asm0A.TypeRef("System.Uri")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetContentAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [
          $asm0A.TypeRef("System.Uri"), $asm1D.TypeRef("System.Net.Http.HttpCompletionOption"), 
          "!!0", $asm07.TypeRef("System.Func`2", [$asm1D.TypeRef("System.Net.Http.HttpContent"), $asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])])
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetStreamAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm07.TypeRef("System.IO.Stream")]), [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetStreamAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm07.TypeRef("System.IO.Stream")]), [$asm0A.TypeRef("System.Uri")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetStringAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.String]), [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetStringAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.String]), [$asm0A.TypeRef("System.Uri")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HandleRequestFaultsAndCancelation", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogSendError", 
      new JSIL.MethodSignature(null, [
          $asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm07.TypeRef("System.Threading.CancellationTokenSource"), 
          $.String, $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "PostAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$.String, $asm1D.TypeRef("System.Net.Http.HttpContent")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "PostAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm0A.TypeRef("System.Uri"), $asm1D.TypeRef("System.Net.Http.HttpContent")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "PostAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [
          $.String, $asm1D.TypeRef("System.Net.Http.HttpContent"), 
          $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "PostAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [
          $asm0A.TypeRef("System.Uri"), $asm1D.TypeRef("System.Net.Http.HttpContent"), 
          $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "PrepareRequestMessage", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpRequestMessage"))
    );

    $.ExternalMethod({Static:false, Public:true }, "PutAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$.String, $asm1D.TypeRef("System.Net.Http.HttpContent")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "PutAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm0A.TypeRef("System.Uri"), $asm1D.TypeRef("System.Net.Http.HttpContent")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "PutAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [
          $.String, $asm1D.TypeRef("System.Net.Http.HttpContent"), 
          $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "PutAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [
          $asm0A.TypeRef("System.Uri"), $asm1D.TypeRef("System.Net.Http.HttpContent"), 
          $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SendAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm1D.TypeRef("System.Net.Http.HttpRequestMessage")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SendAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm07.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SendAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm1D.TypeRef("System.Net.Http.HttpCompletionOption")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SendAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [
          $asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm1D.TypeRef("System.Net.Http.HttpCompletionOption"), 
          $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_BaseAddress", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MaxResponseContentBufferSize", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Timeout", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetOperationStarted", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTaskCanceled", 
      new JSIL.MethodSignature(null, [
          $asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm07.TypeRef("System.Threading.CancellationTokenSource"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTaskCompleted", 
      new JSIL.MethodSignature(null, [
          $asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm07.TypeRef("System.Threading.CancellationTokenSource"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), $asm1D.TypeRef("System.Net.Http.HttpResponseMessage")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTaskFaulted", 
      new JSIL.MethodSignature(null, [
          $asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm07.TypeRef("System.Threading.CancellationTokenSource"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), $asm07.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTimeout", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.CancellationTokenSource"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StartContentBuffering", 
      new JSIL.MethodSignature(null, [
          $asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm07.TypeRef("System.Threading.CancellationTokenSource"), 
          $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), $asm1D.TypeRef("System.Net.Http.HttpResponseMessage")
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "maxTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "infiniteTimeout", $asm07.TypeRef("System.TimeSpan"));

    $.Constant({Static:true , Public:false}, "defaultCompletionOption", $asm1D.TypeRef("System.Net.Http.HttpCompletionOption"), 0);

    $.Field({Static:false, Public:false}, "operationStarted", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "disposed", $asm07.TypeRef("System.Boolean"));

    $.Field({Static:false, Public:false}, "pendingRequestsCts", $asm07.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:false}, "defaultRequestHeaders", $asm1D.TypeRef("System.Net.Http.Headers.HttpRequestHeaders"));

    $.Field({Static:false, Public:false}, "baseAddress", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "timeout", $asm07.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "maxResponseContentBufferSize", $.Int64);


    function HttpClient__cctor () {
      $thisType.defaultTimeout = new $asm07.System.TimeSpan();
      $thisType.maxTimeout = new $asm07.System.TimeSpan();
      $thisType.infiniteTimeout = new $asm07.System.TimeSpan();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      HttpClient__cctor
    );

    $.Property({Static:false, Public:true }, "DefaultRequestHeaders", $asm1D.TypeRef("System.Net.Http.Headers.HttpRequestHeaders"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "BaseAddress", $asm0A.TypeRef("System.Uri"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Timeout", $asm07.TypeRef("System.TimeSpan"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxResponseContentBufferSize", $.Int64)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.HttpClient+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpClient+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetByteArrayAsync$gb__28_0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$jsilcore.TypeRef("System.Array", [$.Byte])]), [$asm1D.TypeRef("System.Net.Http.HttpContent")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetStreamAsync$gb__30_0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm07.TypeRef("System.IO.Stream")]), [$asm1D.TypeRef("System.Net.Http.HttpContent")])
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetStringAsync$gb__26_0", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$.String]), [$asm1D.TypeRef("System.Net.Http.HttpContent")])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__26_0", $asm07.TypeRef("System.Func`2", [$asm1D.TypeRef("System.Net.Http.HttpContent"), $asm07.TypeRef("System.Threading.Tasks.Task`1", [$.String])]));

    $.Field({Static:true , Public:true }, "$l$g9__28_0", $asm07.TypeRef("System.Func`2", [$asm1D.TypeRef("System.Net.Http.HttpContent"), $asm07.TypeRef("System.Threading.Tasks.Task`1", [$jsilcore.TypeRef("System.Array", [$.Byte])])]));

    $.Field({Static:true , Public:true }, "$l$g9__30_0", $asm07.TypeRef("System.Func`2", [$asm1D.TypeRef("System.Net.Http.HttpContent"), $asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm07.TypeRef("System.IO.Stream")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpClient+<>c__DisplayClass31_0`1 */ 

(function $l$gc__DisplayClass31_0$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpClient+<>c__DisplayClass31_0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetContentAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "$lGetContentAsync$gb__1", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("T")])])
    );

    $.Field({Static:false, Public:true }, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:true }, "defaultValue", $.GenericParameter("T"));

    $.Field({Static:false, Public:true }, "readAs", $asm07.TypeRef("System.Func`2", [$asm1D.TypeRef("System.Net.Http.HttpContent"), $asm07.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:true }, "$l$g9__1", $asm07.TypeRef("System.Action`1", [$asm07.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("T")])]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpClient+<>c__DisplayClass55_0 */ 

(function $l$gc__DisplayClass55_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpClient+<>c__DisplayClass55_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSendAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]))
    );

    $.Field({Static:false, Public:true }, "request", $asm1D.TypeRef("System.Net.Http.HttpRequestMessage"));

    $.Field({Static:false, Public:true }, "linkedCts", $asm07.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:true }, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]));

    $.Field({Static:false, Public:true }, "completionOption", $asm1D.TypeRef("System.Net.Http.HttpCompletionOption"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.HttpClient"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpClient+<>c__DisplayClass59_0 */ 

(function $l$gc__DisplayClass59_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpClient+<>c__DisplayClass59_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lStartContentBuffering$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.Field({Static:false, Public:true }, "cancellationTokenSource", $asm07.TypeRef("System.Threading.CancellationTokenSource"));

    $.Field({Static:false, Public:true }, "response", $asm1D.TypeRef("System.Net.Http.HttpResponseMessage"));

    $.Field({Static:false, Public:true }, "request", $asm1D.TypeRef("System.Net.Http.HttpRequestMessage"));

    $.Field({Static:false, Public:true }, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.HttpClient"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.HttpUtilities */ 

(function HttpUtilities$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Net.Http.HttpUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ContinueWithStandard", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Action`1", [$asm07.TypeRef("System.Threading.Tasks.Task")])])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ContinueWithStandard", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), $asm07.TypeRef("System.Action`1", [$asm07.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])])], ["T"])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HandleFaultsAndCancelation", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Threading.Tasks.Task"), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsHttpUri", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("System.Uri")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultVersion", $asm07.TypeRef("System.Version"), function ($pi) {
        return $asm0A.System.Net.HttpVersion.Version11;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyByteArray", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm07.System.Byte, 0);
      });


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Net.Http.HttpMethod */ 

(function HttpMethod$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpMethod", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Delete", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Get", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Head", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Post", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Put", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Trace", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "method", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "getMethod", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "putMethod", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "postMethod", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "deleteMethod", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "headMethod", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "optionsMethod", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "traceMethod", $.Type);

    $.Property({Static:true , Public:true }, "Get", $.Type)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "Put", $.Type)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "Post", $.Type)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "Delete", $.Type)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "Head", $.Type)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "Options", $.Type)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "Trace", $.Type)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Method", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.HttpRequestMessage */ 

(function HttpRequestMessage$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpRequestMessage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.HttpMethod"), $asm0A.TypeRef("System.Uri")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.HttpMethod"), $.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Content", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.HttpContent"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Headers", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpRequestHeaders"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.HttpMethod"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_RequestUri", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "InitializeValues", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.HttpMethod"), $asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkAsSent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Content", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpContent"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Method", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpMethod"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_RequestUri", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:false}, "messageAlreadySent", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "messageNotYetSent", $.Int32, 0);

    $.Field({Static:false, Public:false}, "sendStatus", $.Int32);

    $.Field({Static:false, Public:false}, "method", $asm1D.TypeRef("System.Net.Http.HttpMethod"));

    $.Field({Static:false, Public:false}, "requestUri", $asm0A.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "headers", $asm1D.TypeRef("System.Net.Http.Headers.HttpRequestHeaders"));

    $.Field({Static:false, Public:false}, "version", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "content", $asm1D.TypeRef("System.Net.Http.HttpContent"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Field({Static:false, Public:false}, "properties", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]));

    $.Property({Static:false, Public:true }, "Version", $asm07.TypeRef("System.Version"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Content", $asm1D.TypeRef("System.Net.Http.HttpContent"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Method", $asm1D.TypeRef("System.Net.Http.HttpMethod"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "RequestUri", $asm0A.TypeRef("System.Uri"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Headers", $asm1D.TypeRef("System.Net.Http.Headers.HttpRequestHeaders"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Properties", $asm07.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.HttpResponseMessage */ 

(function HttpResponseMessage$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.HttpResponseMessage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.HttpStatusCode"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckDisposed", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsNewLineCharacter", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "EnsureSuccessStatusCode", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Content", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.HttpContent"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Headers", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpResponseHeaders"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsSuccessStatusCode", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ReasonPhrase", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_RequestMessage", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.HttpRequestMessage"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_StatusCode", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Net.HttpStatusCode"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Version"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Content", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpContent"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ReasonPhrase", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_RequestMessage", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpRequestMessage"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_StatusCode", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Net.HttpStatusCode"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Version"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:false}, "defaultStatusCode", $asm0A.TypeRef("System.Net.HttpStatusCode"), 200);

    $.Field({Static:false, Public:false}, "statusCode", $asm0A.TypeRef("System.Net.HttpStatusCode"));

    $.Field({Static:false, Public:false}, "headers", $asm1D.TypeRef("System.Net.Http.Headers.HttpResponseHeaders"));

    $.Field({Static:false, Public:false}, "reasonPhrase", $.String);

    $.Field({Static:false, Public:false}, "requestMessage", $asm1D.TypeRef("System.Net.Http.HttpRequestMessage"));

    $.Field({Static:false, Public:false}, "version", $asm07.TypeRef("System.Version"));

    $.Field({Static:false, Public:false}, "content", $asm1D.TypeRef("System.Net.Http.HttpContent"));

    $.Field({Static:false, Public:false}, "disposed", $.Boolean);

    $.Property({Static:false, Public:true }, "Version", $asm07.TypeRef("System.Version"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Content", $asm1D.TypeRef("System.Net.Http.HttpContent"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "StatusCode", $asm0A.TypeRef("System.Net.HttpStatusCode"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ReasonPhrase", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Headers", $asm1D.TypeRef("System.Net.Http.Headers.HttpResponseHeaders"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "RequestMessage", $asm1D.TypeRef("System.Net.Http.HttpRequestMessage"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsSuccessStatusCode", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.MessageProcessingHandler */ 

(function MessageProcessingHandler$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.DelegatingHandler"), 
      Name: "System.Net.Http.MessageProcessingHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpMessageHandler"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HandleCanceledOperations", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Threading.CancellationToken"), $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), 
          $asm07.TypeRef("System.OperationCanceledException")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessRequest", 
      new JSIL.MethodSignature($asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), [$asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm07.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessResponse", 
      new JSIL.MethodSignature($asm1D.TypeRef("System.Net.Http.HttpResponseMessage"), [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage"), $asm07.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SendAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]), [$asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm07.TypeRef("System.Threading.CancellationToken")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.MessageProcessingHandler+<>c__DisplayClass4_0 */ 

(function $l$gc__DisplayClass4_0$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.MessageProcessingHandler+<>c__DisplayClass4_0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$lSendAsync$gb__0", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]))
    );

    $.Field({Static:false, Public:true }, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm1D.TypeRef("System.Net.Http.HttpResponseMessage")]));

    $.Field({Static:false, Public:true }, "cancellationToken", $asm07.TypeRef("System.Threading.CancellationToken"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.MessageProcessingHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.StreamContent */ 

(function StreamContent$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.HttpContent"), 
      Name: "System.Net.Http.StreamContent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Int32])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateContentReadStreamAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task`1", [$asm07.TypeRef("System.IO.Stream")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "PrepareContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeToStreamAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.IO.Stream"), $asm0A.TypeRef("System.Net.TransportContext")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryComputeLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:false}, "defaultBufferSize", $.Int32, 4096);

    $.Field({Static:false, Public:false}, "content", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "bufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "contentConsumed", $.Boolean);

    $.Field({Static:false, Public:false}, "start", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.StreamContent+ReadOnlyStream */ 

(function ReadOnlyStream$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.DelegatingStream"), 
      Name: "System.Net.Http.StreamContent+ReadOnlyStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FlushAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [$asm07.TypeRef("System.Threading.CancellationToken")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAsync", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Threading.Tasks.Task"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.Threading.CancellationToken")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.StreamToStreamCopy */ 

(function StreamToStreamCopy$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.StreamToStreamCopy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.IO.Stream"), 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BufferReadCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BufferWrittenCallback", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCompleted", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "StartAsync", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Threading.Tasks.Task"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StartRead", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TryStartWriteSync", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "bufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "source", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "destination", $asm07.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "bufferReadCallback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "bufferWrittenCallback", $asm07.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "tcs", $asm07.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object]));

    $.Field({Static:false, Public:false}, "sourceIsMemoryStream", $.Boolean);

    $.Field({Static:false, Public:false}, "destinationIsMemoryStream", $.Boolean);

    $.Field({Static:false, Public:false}, "disposeSource", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.StringContent */ 

(function StringContent$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.ByteArrayContent"), 
      Name: "System.Net.Http.StringContent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Text.Encoding")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Text.Encoding"), 
          $.String
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetContentByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $asm07.TypeRef("System.Text.Encoding")])
    );

    $.Constant({Static:true , Public:false}, "defaultMediaType", $.String, "text/plain");

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* enum System.Net.Http.ClientCertificateOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Http.ClientCertificateOption", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Manual: 0, 
    Automatic: 1, 
  }
);

/* class System.Net.Http.RtcRequestMessage */ 

(function RtcRequestMessage$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), 
      Name: "System.Net.Http.RtcRequestMessage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.HttpMethod"), $asm0A.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ApplySetting", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm1D.TypeRef("System.Net.Http.TRANSPORT_SETTING_ID")]), $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteDelivery", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "QuerySetting", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm1D.TypeRef("System.Net.Http.TRANSPORT_SETTING_ID")]), $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ])
    )
      .Attribute($asm07.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "TransportSettingsId", $asm07.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "state", $asm0A.TypeRef("System.Net.RtcState"));


    function RtcRequestMessage__cctor () {
      $thisType.TransportSettingsId = new $asm07.System.Guid();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      RtcRequestMessage__cctor
    );

    $.ImplementInterfaces(
      /* 1 */ $asm1D.TypeRef("System.Net.Http.INetworkTransportSettings"), 
      /* 2 */ $asm1D.TypeRef("System.Net.Http.INotificationTransportSync")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class System.Net.Http.RtcRequestMessageExtensions */ 

(function RtcRequestMessageExtensions$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Net.Http.RtcRequestMessageExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AbortRtcRequest", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpRequestMessage"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MarkRtcFlushComplete", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.HttpRequestMessage"))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetRtcOptions", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.HttpRequestMessage"), $asm0A.TypeRef("System.Net.HttpWebRequest")])
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* interface System.Net.Http.INetworkTransportSettings */ 

JSIL.MakeInterface(
  "System.Net.Http.INetworkTransportSettings", false, [], function ($) {
    $.Method({}, "ApplySetting", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm1D.TypeRef("System.Net.Http.TRANSPORT_SETTING_ID")]), $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
    $.Method({}, "QuerySetting", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm1D.TypeRef("System.Net.Http.TRANSPORT_SETTING_ID")]), $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr])
        ]));
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["5e7abb2c-f2c1-4a61-bd35-deb7a08ab0f1"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

/* struct System.Net.Http.TRANSPORT_SETTING_ID */ 

(function TRANSPORT_SETTING_ID$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "System.Net.Http.TRANSPORT_SETTING_ID", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
      Pack: 4, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Guid", $asm07.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Net.Http.INotificationTransportSync */ 

JSIL.MakeInterface(
  "System.Net.Http.INotificationTransportSync", false, [], function ($) {
    $.Method({}, "CompleteDelivery", JSIL.MethodSignature.Void);
    $.Method({}, "Flush", JSIL.MethodSignature.Void);
  }, [])
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["79eb1402-0ab8-49c0-9e14-a1ae4ba93058"]; })
  .Attribute($asm07.TypeRef("System.Runtime.InteropServices.InterfaceTypeAttribute"), function () { return [$asm07.System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown]; });

JSIL.DeclareNamespace("System.Net.Http.Headers");
/* class System.Net.Http.Headers.AuthenticationHeaderValue */ 

(function AuthenticationHeaderValue$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.AuthenticationHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Parameter", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Scheme", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetAuthenticationLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryGetParametersEndIndex", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TrySkipFirstBlob", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.Field({Static:false, Public:false}, "scheme", $.String);

    $.Field({Static:false, Public:false}, "parameter", $.String);

    $.Property({Static:false, Public:true }, "Scheme", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Parameter", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.HttpHeaderParser */ 

(function HttpHeaderParser$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.HttpHeaderParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Comparer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEqualityComparer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Separator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportsMultipleValues", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Constant({Static:true , Public:false}, "DefaultSeparator", $.String, ", ");

    $.Field({Static:false, Public:false}, "supportsMultipleValues", $.Boolean);

    $.Field({Static:false, Public:false}, "separator", $.String);

    $.Property({Static:false, Public:true }, "SupportsMultipleValues", $.Boolean);

    $.Property({Static:false, Public:true }, "Separator", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Comparer", $asm07.TypeRef("System.Collections.IEqualityComparer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.BaseHeaderParser */ 

(function BaseHeaderParser$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"), 
      Name: "System.Net.Http.Headers.BaseHeaderParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParsedValueLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.ByteArrayHeaderParser */ 

(function ByteArrayHeaderParser$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"), 
      Name: "System.Net.Http.Headers.ByteArrayHeaderParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Parser", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.CacheControlHeaderParser */ 

(function CacheControlHeaderParser$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.BaseHeaderParser"), 
      Name: "System.Net.Http.Headers.CacheControlHeaderParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParsedValueLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Parser", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.CacheControlHeaderValue */ 

(function CacheControlHeaderValue$Members () {
  var $, $thisType;















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.CacheControlHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "AppendValueIfRequired", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Text.StringBuilder"), $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AppendValues", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "AppendValueWithSeparatorIfRequired", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Text.StringBuilder"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIsValidToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxAge", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxStale", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxStaleLimit", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MinFresh", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MustRevalidate", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_NoCache", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_NoCacheHeaders", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_NoStore", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_NoTransform", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_OnlyIfCached", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Private", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_PrivateHeaders", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ProxyRevalidate", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Public", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SharedMaxAge", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCacheControlLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Type, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MaxAge", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MaxStale", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MaxStaleLimit", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MinFresh", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MustRevalidate", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_NoCache", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_NoStore", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_NoTransform", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_OnlyIfCached", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Private", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ProxyRevalidate", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Public", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_SharedMaxAge", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TrySetCacheControlValues", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm07.TypeRef("System.Collections.Generic.List`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TrySetOptionalTokenList", 
      new JSIL.MethodSignature($.Boolean, [
          $asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TrySetTimeSpan", 
      new JSIL.MethodSignature($.Boolean, [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")])])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TrySetTokenOnlyValue", 
      new JSIL.MethodSignature($.Boolean, [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "maxAgeString", $.String, "max-age");

    $.Constant({Static:true , Public:false}, "maxStaleString", $.String, "max-stale");

    $.Constant({Static:true , Public:false}, "minFreshString", $.String, "min-fresh");

    $.Constant({Static:true , Public:false}, "mustRevalidateString", $.String, "must-revalidate");

    $.Constant({Static:true , Public:false}, "noCacheString", $.String, "no-cache");

    $.Constant({Static:true , Public:false}, "noStoreString", $.String, "no-store");

    $.Constant({Static:true , Public:false}, "noTransformString", $.String, "no-transform");

    $.Constant({Static:true , Public:false}, "onlyIfCachedString", $.String, "only-if-cached");

    $.Constant({Static:true , Public:false}, "privateString", $.String, "private");

    $.Constant({Static:true , Public:false}, "proxyRevalidateString", $.String, "proxy-revalidate");

    $.Constant({Static:true , Public:false}, "publicString", $.String, "public");

    $.Constant({Static:true , Public:false}, "sharedMaxAgeString", $.String, "s-maxage");

    $.Field({Static:true , Public:false, ReadOnly:true }, "nameValueListParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"), function ($pi) {
        return $asm1D.System.Net.Http.Headers.GenericHeaderParser.MultipleValueNameValueParser;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "checkIsValidToken", $asm07.TypeRef("System.Action`1", [$.String]), function ($pi) {
        return $asm07.System.Action$b1.Of($asm07.System.String).New(null, null, new JSIL.MethodPointerInfo($thisType, "CheckIsValidToken", JSIL.MethodSignature.Action($.String), true, false));
      });

    $.Field({Static:false, Public:false}, "noCache", $.Boolean);

    $.Field({Static:false, Public:false}, "noCacheHeaders", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]));

    $.Field({Static:false, Public:false}, "noStore", $.Boolean);

    $.Field({Static:false, Public:false}, "maxAge", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]));

    $.Field({Static:false, Public:false}, "sharedMaxAge", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]));

    $.Field({Static:false, Public:false}, "maxStale", $.Boolean);

    $.Field({Static:false, Public:false}, "maxStaleLimit", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]));

    $.Field({Static:false, Public:false}, "minFresh", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]));

    $.Field({Static:false, Public:false}, "noTransform", $.Boolean);

    $.Field({Static:false, Public:false}, "onlyIfCached", $.Boolean);

    $.Field({Static:false, Public:false}, "publicField", $.Boolean);

    $.Field({Static:false, Public:false}, "privateField", $.Boolean);

    $.Field({Static:false, Public:false}, "privateHeaders", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]));

    $.Field({Static:false, Public:false}, "mustRevalidate", $.Boolean);

    $.Field({Static:false, Public:false}, "proxyRevalidate", $.Boolean);

    $.Field({Static:false, Public:false}, "extensions", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]));

    $.Property({Static:false, Public:true }, "NoCache", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "NoCacheHeaders", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "NoStore", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxAge", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "SharedMaxAge", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxStale", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxStaleLimit", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MinFresh", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "NoTransform", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "OnlyIfCached", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Public", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Private", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "PrivateHeaders", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MustRevalidate", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ProxyRevalidate", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Extensions", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.ContentDispositionHeaderValue */ 

(function ContentDispositionHeaderValue$Members () {
  var $, $thisType;









































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.ContentDispositionHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CheckDispositionTypeFormat", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Encode5987", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeAndQuoteMime", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeMime", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CreationDate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_DispositionType", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_FileName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_FileNameStar", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ModificationDate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ReadDate", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int64]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetDate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDispositionTypeExpressionLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDispositionTypeLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsQuoted", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "RequiresEncoding", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CreationDate", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_DispositionType", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_FileName", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_FileNameStar", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ModificationDate", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ReadDate", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Size", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Int64]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetDate", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TryDecode5987", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDecodeMime", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:false}, "fileName", $.String, "filename");

    $.Constant({Static:true , Public:false}, "$name", $.String, "name");

    $.Constant({Static:true , Public:false}, "fileNameStar", $.String, "filename*");

    $.Constant({Static:true , Public:false}, "creationDate", $.String, "creation-date");

    $.Constant({Static:true , Public:false}, "modificationDate", $.String, "modification-date");

    $.Constant({Static:true , Public:false}, "readDate", $.String, "read-date");

    $.Constant({Static:true , Public:false}, "size", $.String, "size");

    $.Field({Static:false, Public:false}, "parameters", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]));

    $.Field({Static:false, Public:false}, "dispositionType", $.String);

    $.Property({Static:false, Public:true }, "DispositionType", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Parameters", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "FileName", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "FileNameStar", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "CreationDate", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ModificationDate", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ReadDate", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Size", $asm07.TypeRef("System.Nullable`1", [$.Int64]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.ContentRangeHeaderValue */ 

(function ContentRangeHeaderValue$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.ContentRangeHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Int64
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int64])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_From", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int64]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_HasLength", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_HasRange", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int64]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_To", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int64]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Unit", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetContentRangeLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Unit", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryCreateContentRange", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetLengthLength", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetRangeLength", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "unit", $.String);

    $.Field({Static:false, Public:false}, "from", $asm07.TypeRef("System.Nullable`1", [$.Int64]));

    $.Field({Static:false, Public:false}, "to", $asm07.TypeRef("System.Nullable`1", [$.Int64]));

    $.Field({Static:false, Public:false}, "$length", $asm07.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "Unit", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "From", $asm07.TypeRef("System.Nullable`1", [$.Int64]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "To", $asm07.TypeRef("System.Nullable`1", [$.Int64]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Length", $asm07.TypeRef("System.Nullable`1", [$.Int64]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "HasLength", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "HasRange", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.DateHeaderParser */ 

(function DateHeaderParser$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"), 
      Name: "System.Net.Http.Headers.DateHeaderParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Parser", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.EntityTagHeaderValue */ 

(function EntityTagHeaderValue$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.EntityTagHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Any", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsWeak", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Tag", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetEntityTagLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:false}, "any", $.Type);

    $.Field({Static:false, Public:false}, "tag", $.String);

    $.Field({Static:false, Public:false}, "isWeak", $.Boolean);

    $.Property({Static:false, Public:true }, "Tag", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsWeak", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "Any", $.Type)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.GenericHeaderParser */ 

(function GenericHeaderParser$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.BaseHeaderParser"), 
      Name: "System.Net.Http.Headers.GenericHeaderParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm1D.TypeRef("System.Net.Http.Headers.GenericHeaderParser+GetParsedValueLengthDelegate")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm1D.TypeRef("System.Net.Http.Headers.GenericHeaderParser+GetParsedValueLengthDelegate"), 
          $asm07.TypeRef("System.Collections.IEqualityComparer")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Comparer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEqualityComparer"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParsedValueLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseHost", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseMailAddress", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseMultipleEntityTags", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseNameValue", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseProduct", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseSingleEntityTag", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseTokenList", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "HostParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "TokenListParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleValueNameValueWithParametersParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MultipleValueNameValueWithParametersParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleValueNameValueParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MultipleValueNameValueParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MailAddressParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleValueProductParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MultipleValueProductParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "RangeConditionParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleValueAuthenticationParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MultipleValueAuthenticationParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "RangeParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "RetryConditionParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ContentRangeParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ContentDispositionParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleValueStringWithQualityParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MultipleValueStringWithQualityParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleValueEntityTagParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MultipleValueEntityTagParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleValueViaParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MultipleValueViaParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleValueWarningParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "MultipleValueWarningParser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Field({Static:false, Public:false}, "getParsedValueLength", $asm1D.TypeRef("System.Net.Http.Headers.GenericHeaderParser+GetParsedValueLengthDelegate"));

    $.Field({Static:false, Public:false}, "comparer", $asm07.TypeRef("System.Collections.IEqualityComparer"));

    $.Property({Static:false, Public:true , Virtual:true }, "Comparer", $asm07.TypeRef("System.Collections.IEqualityComparer"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Net.Http.Headers.GenericHeaderParser+GetParsedValueLengthDelegate */ 

JSIL.MakeDelegate("System.Net.Http.Headers.GenericHeaderParser+GetParsedValueLengthDelegate", false, [], 
  new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
      $asm07.TypeRef("System.String"), $asm07.TypeRef("System.Int32"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Object")])
    ]));

/* class System.Net.Http.Headers.HeaderUtilities */ 

(function HeaderUtilities$Members () {
  var $, $thisType;
















  JSIL.MakeStaticClass("System.Net.Http.Headers.HeaderUtilities", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AreEqualCollections", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm07.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreEqualCollections", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm07.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), 
          $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckValidComment", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckValidQuotedString", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckValidToken", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DumpHeaders", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders")])])
    )
      .Parameter(0, "headers", function (_) {
          _.Attribute($asm07.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetDateTimeOffsetValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]), [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNextNonEmptyOrWhitespaceIndex", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetQuality", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$.Double]), [$asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTimeSpanValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]), [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidEmailAddress", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetQuality", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]), $asm07.TypeRef("System.Nullable`1", [$.Double])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseInt32", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseInt64", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateToken", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]), $.String])
    );

    $.Constant({Static:true , Public:false}, "qualityName", $.String, "q");

    $.Constant({Static:true , Public:false}, "ConnectionClose", $.String, "close");

    $.Field({Static:true , Public:false, ReadOnly:true }, "TransferEncodingChunked", $asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ExpectContinue", $asm1D.TypeRef("System.Net.Http.Headers.NameValueWithParametersHeaderValue"));

    $.Constant({Static:true , Public:false}, "BytesUnit", $.String, "bytes");

    $.Field({Static:true , Public:false, ReadOnly:true }, "TokenValidator", $asm07.TypeRef("System.Action`2", [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]), $.String]), function ($pi) {
        return $asm07.System.Action$b2.Of($asm1D.System.Net.Http.Headers.HttpHeaderValueCollection$b1.Of($asm07.System.String), $asm07.System.String).New(null, null, new JSIL.MethodPointerInfo($thisType, "ValidateToken", new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]), $.String]), true, false));
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.HttpHeaders */ 

(function HttpHeaders$Members () {
  var $, $thisType;
























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.HttpHeaders", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddHeaderInfo", 
      new JSIL.MethodSignature(null, [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddHeaders", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddHeaderToStore", 
      new JSIL.MethodSignature(null, [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddParsedValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddValue", 
      new JSIL.MethodSignature(null, [
          $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo"), $.Object, 
          $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+StoreLocation")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddValueToStoreValue", 
      new JSIL.MethodSignature(null, [
          $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo"), $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "AreEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Object, 
          $asm07.TypeRef("System.Collections.IEqualityComparer")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckHeaderName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckInvalidNewLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CloneAndAddValue", 
      new JSIL.MethodSignature(null, [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneStringHeaderInfoValues", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ContainsInvalidNewLine", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsParsedValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAndAddHeaderToStore", 
      new JSIL.MethodSignature($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm1D.System.Net.Http.Headers.HttpHeaders_$lGetEnumerator$gd__20.__Type__]; })
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetHeaderString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHeaderString", 
      new JSIL.MethodSignature($.String, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHeaderString", 
      new JSIL.MethodSignature($.String, [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHeaderString", 
      new JSIL.MethodSignature($.String, [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHeaderStrings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]))
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm1D.System.Net.Http.Headers.HttpHeaders_$lGetHeaderStrings$gd__15.__Type__]; });

    $.ExternalMethod({Static:false, Public:false}, "GetOrCreateHeaderInfo", 
      new JSIL.MethodSignature($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParsedValues", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParser", 
      new JSIL.MethodSignature($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValueCount", 
      new JSIL.MethodSignature($.Int32, [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetValuesAsStrings", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValuesAsStrings", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAndAddValue", 
      new JSIL.MethodSignature(null, [
          $.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseMultipleRawHeaderValues", 
      new JSIL.MethodSignature(null, [
          $.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo"), 
          $asm07.TypeRef("System.Collections.Generic.List`1", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseRawHeaderValues", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseSingleRawHeaderValue", 
      new JSIL.MethodSignature(null, [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareHeaderInfoForAdd", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadStoreValues", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.String]), $.Object, 
          $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"), "!!0", 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "RemoveParsedValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetConfiguration", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser")]), $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetOrRemoveParsedValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParsedValue", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldAdd", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"), 
          "!!0"
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "TryAddWithoutValidation", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "TryAddWithoutValidation", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TryCheckHeaderName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetAndParseHeaderInfo", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetHeaderInfo", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetValues", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryParseAndAddRawHeaderValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryParseAndAddValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateValueCount", 
      new JSIL.MethodSignature(null, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], ["T"])
    );

    $.Field({Static:false, Public:false}, "headerStore", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo")]));

    $.Field({Static:false, Public:false}, "parserStore", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser")]));

    $.Field({Static:false, Public:false}, "invalidHeaders", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* enum System.Net.Http.Headers.HttpHeaders+StoreLocation */ 

JSIL.MakeEnum(
  {
    FullName: "System.Net.Http.Headers.HttpHeaders+StoreLocation", 
    BaseType: $asm07.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Raw: 0, 
    Invalid: 1, 
    Parsed: 2, 
  }
);

/* class System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo */ 

(function HeaderStoreItemInfo$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanAddValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InvalidValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParsedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parser", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RawValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InvalidValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ParsedValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RawValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "rawValue", $.Object);

    $.Field({Static:false, Public:false}, "invalidValue", $.Object);

    $.Field({Static:false, Public:false}, "parsedValue", $.Object);

    $.Field({Static:false, Public:false}, "parser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Property({Static:false, Public:false}, "RawValue", $.Object);

    $.Property({Static:false, Public:false}, "InvalidValue", $.Object);

    $.Property({Static:false, Public:false}, "ParsedValue", $.Object);

    $.Property({Static:false, Public:false}, "Parser", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"));

    $.Property({Static:false, Public:false}, "CanAddValue", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEmpty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.HttpHeaders+<GetHeaderStrings>d__15 */ 

(function $lGetHeaderStrings$gd__15$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.HttpHeaders+<GetHeaderStrings>d__15", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.String$g$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")])]), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.String$g$g.get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")])]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String]));

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.Dictionary`2+Enumerator", [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.String$g$g.Current", $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.String])]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.Headers.HttpHeaders+<GetEnumerator>d__20 */ 

(function $lGetEnumerator$gd__20$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.HttpHeaders+<GetEnumerator>d__20", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Collections.Generic.IEnumerable$lSystem.String$g$g$g.get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])]))
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.String")])])]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])]));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"));

    $.Field({Static:false, Public:false}, "$linvalidHeaders$g5__1", $asm07.TypeRef("System.Collections.Generic.List`1", [$.String]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.Dictionary`2+Enumerator", [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders+HeaderStoreItemInfo")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Collections.Generic.IEnumerable$lSystem.String$g$g$g.Current", $asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])])]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.Headers.HttpContentHeaders */ 

(function HttpContentHeaders$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"), 
      Name: "System.Net.Http.Headers.HttpContentHeaders", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Func`1", [$asm07.TypeRef("System.Nullable`1", [$.Int64])]))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddKnownHeaders", 
      JSIL.MethodSignature.Action($asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Allow", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContentDisposition", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.ContentDispositionHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContentEncoding", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContentLanguage", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContentLength", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int64]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContentLocation", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContentMD5", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContentRange", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.ContentRangeHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContentType", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.MediaTypeHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Expires", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_LastModified", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ContentDisposition", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.ContentDispositionHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ContentLength", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Int64]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ContentLocation", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ContentMD5", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ContentRange", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.ContentRangeHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ContentType", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.MediaTypeHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Expires", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_LastModified", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "parserStore", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "invalidHeaders", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]));

    $.Field({Static:false, Public:false}, "calculateLengthFunc", $asm07.TypeRef("System.Func`1", [$asm07.TypeRef("System.Nullable`1", [$.Int64])]));

    $.Field({Static:false, Public:false}, "contentLengthSet", $.Boolean);

    $.Field({Static:false, Public:false}, "allow", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]));

    $.Field({Static:false, Public:false}, "contentEncoding", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]));

    $.Field({Static:false, Public:false}, "contentLanguage", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]));

    $.Property({Static:false, Public:true }, "Allow", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ContentDisposition", $asm1D.TypeRef("System.Net.Http.Headers.ContentDispositionHeaderValue"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ContentEncoding", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ContentLanguage", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.String]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ContentLength", $asm07.TypeRef("System.Nullable`1", [$.Int64]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ContentLocation", $asm0A.TypeRef("System.Uri"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ContentMD5", $jsilcore.TypeRef("System.Array", [$.Byte]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ContentRange", $asm1D.TypeRef("System.Net.Http.Headers.ContentRangeHeaderValue"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ContentType", $asm1D.TypeRef("System.Net.Http.Headers.MediaTypeHeaderValue"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Expires", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "LastModified", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.HttpGeneralHeaders */ 

(function HttpGeneralHeaders$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.HttpGeneralHeaders", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddKnownHeaders", 
      JSIL.MethodSignature.Action($asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddParsers", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSpecialsFrom", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CacheControl", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.CacheControlHeaderValue"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionClose", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConnectionCore", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Date", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Pragma", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Trailer", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransferEncoding", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransferEncodingChunked", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TransferEncodingCore", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Upgrade", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ProductHeaderValue")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Via", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ViaHeaderValue")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Warning", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.WarningHeaderValue")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CacheControl", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.CacheControlHeaderValue"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConnectionClose", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Date", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TransferEncodingChunked", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.Field({Static:false, Public:false}, "connection", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]));

    $.Field({Static:false, Public:false}, "trailer", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]));

    $.Field({Static:false, Public:false}, "transferEncoding", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue")]));

    $.Field({Static:false, Public:false}, "upgrade", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ProductHeaderValue")]));

    $.Field({Static:false, Public:false}, "via", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ViaHeaderValue")]));

    $.Field({Static:false, Public:false}, "warning", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.WarningHeaderValue")]));

    $.Field({Static:false, Public:false}, "pragma", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]));

    $.Field({Static:false, Public:false}, "parent", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"));

    $.Field({Static:false, Public:false}, "transferEncodingChunkedSet", $.Boolean);

    $.Field({Static:false, Public:false}, "connectionCloseSet", $.Boolean);

    $.Property({Static:false, Public:true }, "CacheControl", $asm1D.TypeRef("System.Net.Http.Headers.CacheControlHeaderValue"));

    $.Property({Static:false, Public:true }, "Connection", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]));

    $.Property({Static:false, Public:true }, "ConnectionClose", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:true }, "Date", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]));

    $.Property({Static:false, Public:true }, "Pragma", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]));

    $.Property({Static:false, Public:true }, "Trailer", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]));

    $.Property({Static:false, Public:true }, "TransferEncoding", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue")]));

    $.Property({Static:false, Public:true }, "TransferEncodingChunked", $asm07.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:true }, "Upgrade", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ProductHeaderValue")]));

    $.Property({Static:false, Public:true }, "Via", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ViaHeaderValue")]));

    $.Property({Static:false, Public:true }, "Warning", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.WarningHeaderValue")]));

    $.Property({Static:false, Public:false}, "ConnectionCore", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]));

    $.Property({Static:false, Public:false}, "TransferEncodingCore", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.HttpHeaderValueCollection`1 */ 

(function HttpHeaderValueCollection$b1$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.HttpHeaderValueCollection`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"), 
          $asm07.TypeRef("System.Action`2", [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.GenericParameter("T")]), $.GenericParameter("T")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"), 
          $.GenericParameter("T")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"), 
          $.GenericParameter("T"), $asm07.TypeRef("System.Action`2", [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.GenericParameter("T")]), $.GenericParameter("T")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsSpecialValueSet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.IteratorStateMachineAttribute"), function () { return [$asm1D.System.Net.Http.Headers.HttpHeaderValueCollection$b1_$lGetEnumerator$gd__21.__Type__]; })
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetHeaderStringWithoutSpecial", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ParseAdd", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "RemoveSpecialValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSpecialValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "TryParseAdd", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "headerName", $.String);

    $.Field({Static:false, Public:false}, "store", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"));

    $.Field({Static:false, Public:false}, "specialValue", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "validator", $asm07.TypeRef("System.Action`2", [$asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.GenericParameter("T")]), $.GenericParameter("T")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false}, "IsSpecialValueSet", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.HttpHeaderValueCollection`1+<GetEnumerator>d__21 */ 

(function $lGetEnumerator$gd__21$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.HttpHeaderValueCollection`1+<GetEnumerator>d__21", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    )
      .Overrides($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm07.TypeRef("System.IDisposable"), "Dispose")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("T"));

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "$lstoreValues$g5__1", $asm07.TypeRef("System.Collections.Generic.List`1", [$.Object]));

    $.Field({Static:false, Public:false}, "$l$g7__wrap1", $asm07.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm07.TypeRef("System.IDisposable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Net.Http.Headers.HttpRequestHeaders */ 

(function HttpRequestHeaders$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"), 
      Name: "System.Net.Http.Headers.HttpRequestHeaders", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddHeaders", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddKnownHeaders", 
      JSIL.MethodSignature.Action($asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Accept", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.MediaTypeWithQualityHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AcceptCharset", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.StringWithQualityHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AcceptEncoding", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.StringWithQualityHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AcceptLanguage", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.StringWithQualityHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Authorization", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.AuthenticationHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CacheControl", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.CacheControlHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionClose", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Date", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Expect", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueWithParametersHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ExpectContinue", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ExpectCore", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueWithParametersHeaderValue")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_From", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Host", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IfMatch", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.EntityTagHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IfModifiedSince", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IfNoneMatch", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.EntityTagHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IfRange", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.RangeConditionHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IfUnmodifiedSince", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MaxForwards", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int32]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Pragma", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ProxyAuthorization", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.AuthenticationHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Range", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.RangeHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Referrer", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TE", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingWithQualityHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Trailer", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TransferEncoding", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TransferEncodingChunked", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Upgrade", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ProductHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UserAgent", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ProductInfoHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Via", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ViaHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Warning", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.WarningHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Authorization", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.AuthenticationHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_CacheControl", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.CacheControlHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ConnectionClose", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Date", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ExpectContinue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_From", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Host", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_IfModifiedSince", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_IfRange", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.RangeConditionHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_IfUnmodifiedSince", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MaxForwards", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Int32]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ProxyAuthorization", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.AuthenticationHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Range", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.RangeHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Referrer", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_TransferEncodingChunked", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "parserStore", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "invalidHeaders", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]));

    $.Field({Static:false, Public:false}, "generalHeaders", $asm1D.TypeRef("System.Net.Http.Headers.HttpGeneralHeaders"));

    $.Field({Static:false, Public:false}, "accept", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.MediaTypeWithQualityHeaderValue")]));

    $.Field({Static:false, Public:false}, "expect", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueWithParametersHeaderValue")]));

    $.Field({Static:false, Public:false}, "expectContinueSet", $.Boolean);

    $.Field({Static:false, Public:false}, "ifMatch", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.EntityTagHeaderValue")]));

    $.Field({Static:false, Public:false}, "ifNoneMatch", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.EntityTagHeaderValue")]));

    $.Field({Static:false, Public:false}, "te", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingWithQualityHeaderValue")]));

    $.Field({Static:false, Public:false}, "userAgent", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ProductInfoHeaderValue")]));

    $.Field({Static:false, Public:false}, "acceptCharset", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.StringWithQualityHeaderValue")]));

    $.Field({Static:false, Public:false}, "acceptEncoding", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.StringWithQualityHeaderValue")]));

    $.Field({Static:false, Public:false}, "acceptLanguage", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.StringWithQualityHeaderValue")]));

    $.Property({Static:false, Public:true }, "Accept", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.MediaTypeWithQualityHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "AcceptCharset", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.StringWithQualityHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "AcceptEncoding", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.StringWithQualityHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "AcceptLanguage", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.StringWithQualityHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Authorization", $asm1D.TypeRef("System.Net.Http.Headers.AuthenticationHeaderValue"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Expect", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueWithParametersHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ExpectContinue", $asm07.TypeRef("System.Nullable`1", [$.Boolean]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "From", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Host", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IfMatch", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.EntityTagHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IfModifiedSince", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IfNoneMatch", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.EntityTagHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IfRange", $asm1D.TypeRef("System.Net.Http.Headers.RangeConditionHeaderValue"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IfUnmodifiedSince", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MaxForwards", $asm07.TypeRef("System.Nullable`1", [$.Int32]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ProxyAuthorization", $asm1D.TypeRef("System.Net.Http.Headers.AuthenticationHeaderValue"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Range", $asm1D.TypeRef("System.Net.Http.Headers.RangeHeaderValue"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Referrer", $asm0A.TypeRef("System.Uri"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "TE", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingWithQualityHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "UserAgent", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ProductInfoHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false}, "ExpectCore", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueWithParametersHeaderValue")]));

    $.Property({Static:false, Public:true }, "CacheControl", $asm1D.TypeRef("System.Net.Http.Headers.CacheControlHeaderValue"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Connection", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ConnectionClose", $asm07.TypeRef("System.Nullable`1", [$.Boolean]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Date", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Pragma", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Trailer", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "TransferEncoding", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "TransferEncodingChunked", $asm07.TypeRef("System.Nullable`1", [$.Boolean]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Upgrade", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ProductHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Via", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ViaHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Warning", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.WarningHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.HttpResponseHeaders */ 

(function HttpResponseHeaders$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"), 
      Name: "System.Net.Http.Headers.HttpResponseHeaders", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddHeaders", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaders"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddKnownHeaders", 
      JSIL.MethodSignature.Action($asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AcceptRanges", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Age", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CacheControl", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.CacheControlHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Connection", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionClose", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Date", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ETag", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.EntityTagHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Uri"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Pragma", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ProxyAuthenticate", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.AuthenticationHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_RetryAfter", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.RetryConditionHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Server", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ProductInfoHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Trailer", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TransferEncoding", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TransferEncodingChunked", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Upgrade", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ProductHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Vary", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Via", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ViaHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Warning", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.WarningHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_WwwAuthenticate", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.AuthenticationHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Age", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_CacheControl", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.CacheControlHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ConnectionClose", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Date", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ETag", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.EntityTagHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Uri"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_RetryAfter", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.RetryConditionHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_TransferEncodingChunked", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Boolean]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "parserStore", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "invalidHeaders", $asm10.TypeRef("System.Collections.Generic.HashSet`1", [$.String]));

    $.Field({Static:false, Public:false}, "generalHeaders", $asm1D.TypeRef("System.Net.Http.Headers.HttpGeneralHeaders"));

    $.Field({Static:false, Public:false}, "acceptRanges", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]));

    $.Field({Static:false, Public:false}, "wwwAuthenticate", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.AuthenticationHeaderValue")]));

    $.Field({Static:false, Public:false}, "proxyAuthenticate", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.AuthenticationHeaderValue")]));

    $.Field({Static:false, Public:false}, "server", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ProductInfoHeaderValue")]));

    $.Field({Static:false, Public:false}, "vary", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]));

    $.Property({Static:false, Public:true }, "AcceptRanges", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Age", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ETag", $asm1D.TypeRef("System.Net.Http.Headers.EntityTagHeaderValue"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Location", $asm0A.TypeRef("System.Uri"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ProxyAuthenticate", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.AuthenticationHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "RetryAfter", $asm1D.TypeRef("System.Net.Http.Headers.RetryConditionHeaderValue"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Server", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ProductInfoHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Vary", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "WwwAuthenticate", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.AuthenticationHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "CacheControl", $asm1D.TypeRef("System.Net.Http.Headers.CacheControlHeaderValue"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Connection", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ConnectionClose", $asm07.TypeRef("System.Nullable`1", [$.Boolean]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Date", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Pragma", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Trailer", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$.String]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "TransferEncoding", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "TransferEncodingChunked", $asm07.TypeRef("System.Nullable`1", [$.Boolean]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Upgrade", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ProductHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Via", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.ViaHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Warning", $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderValueCollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.WarningHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.Int32NumberHeaderParser */ 

(function Int32NumberHeaderParser$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.BaseHeaderParser"), 
      Name: "System.Net.Http.Headers.Int32NumberHeaderParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParsedValueLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Parser", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.Int64NumberHeaderParser */ 

(function Int64NumberHeaderParser$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.BaseHeaderParser"), 
      Name: "System.Net.Http.Headers.Int64NumberHeaderParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParsedValueLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Parser", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.MediaTypeHeaderParser */ 

(function MediaTypeHeaderParser$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.BaseHeaderParser"), 
      Name: "System.Net.Http.Headers.MediaTypeHeaderParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm07.TypeRef("System.Func`1", [$asm1D.TypeRef("System.Net.Http.Headers.MediaTypeHeaderValue")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMediaType", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.MediaTypeHeaderValue"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMediaTypeWithQuality", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.MediaTypeHeaderValue"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParsedValueLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:false, Public:false}, "supportsMultipleValues", $.Boolean);

    $.Field({Static:false, Public:false}, "mediaTypeCreator", $asm07.TypeRef("System.Func`1", [$asm1D.TypeRef("System.Net.Http.Headers.MediaTypeHeaderValue")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleValueParser", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleValueWithQualityParser", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MultipleValuesParser", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.MediaTypeHeaderValue */ 

(function MediaTypeHeaderValue$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.MediaTypeHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CheckMediaTypeFormat", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CharSet", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MediaType", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetMediaTypeExpressionLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMediaTypeLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Func`1", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_CharSet", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_MediaType", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Constant({Static:true , Public:false}, "charSet", $.String, "charset");

    $.Field({Static:false, Public:false}, "parameters", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]));

    $.Field({Static:false, Public:false}, "mediaType", $.String);

    $.Property({Static:false, Public:true }, "CharSet", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Parameters", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "MediaType", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.MediaTypeWithQualityHeaderValue */ 

(function MediaTypeWithQualityHeaderValue$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.MediaTypeHeaderValue"), 
      Name: "System.Net.Http.Headers.MediaTypeWithQualityHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Double])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Quality", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Double]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Quality", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Double]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Quality", $asm07.TypeRef("System.Nullable`1", [$.Double]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.NameValueHeaderValue */ 

(function NameValueHeaderValue$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.NameValueHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CheckNameValueFormat", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckValueFormat", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateNameValue", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Find", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.Type]), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNameValueLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNameValueLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Func`1", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNameValueListLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Char, $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValueLength", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.Type]), $.Char, 
          $.Boolean, $asm07.TypeRef("System.Text.StringBuilder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.Type]), $.Char, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultNameValueCreator", $asm07.TypeRef("System.Func`1", [$.Type]), function ($pi) {
        return $asm07.System.Func$b1.Of($thisType).New(null, null, new JSIL.MethodPointerInfo($thisType, "CreateNameValue", JSIL.MethodSignature.Return($.Type), true, false));
      });

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Value", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.NameValueWithParametersHeaderValue */ 

(function NameValueWithParametersHeaderValue$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue"), 
      Name: "System.Net.Http.Headers.NameValueWithParametersHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateNameValue", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetNameValueWithParametersLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "nameValueCreator", $asm07.TypeRef("System.Func`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]), function ($pi) {
        return $asm07.System.Func$b1.Of($asm1D.System.Net.Http.Headers.NameValueHeaderValue).New(null, null, new JSIL.MethodPointerInfo($thisType, "CreateNameValue", JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")), true, false));
      });

    $.Field({Static:false, Public:false}, "parameters", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]));

    $.Property({Static:false, Public:true }, "Parameters", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.ObjectCollection`1 */ 

(function ObjectCollection$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [new JSIL.GenericParameter("T", "System.Net.Http.Headers.ObjectCollection`1")]), 
      Name: "System.Net.Http.Headers.ObjectCollection`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Action`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckNotNull", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InsertItem", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItem", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultValidator", $asm07.TypeRef("System.Action`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "validator", $asm07.TypeRef("System.Action`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.ProductHeaderValue */ 

(function ProductHeaderValue$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.ProductHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProductLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "version", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Version", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.ProductInfoHeaderParser */ 

(function ProductInfoHeaderParser$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"), 
      Name: "System.Net.Http.Headers.ProductInfoHeaderParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Constant({Static:true , Public:false}, "separator", $.String, " ");

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleValueParser", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MultipleValueParser", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.ProductInfoHeaderValue */ 

(function ProductInfoHeaderValue$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.ProductInfoHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.ProductHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Comment", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Product", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.ProductHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProductInfoLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "product", $asm1D.TypeRef("System.Net.Http.Headers.ProductHeaderValue"));

    $.Field({Static:false, Public:false}, "comment", $.String);

    $.Property({Static:false, Public:true }, "Product", $asm1D.TypeRef("System.Net.Http.Headers.ProductHeaderValue"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Comment", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.RangeConditionHeaderValue */ 

(function RangeConditionHeaderValue$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.RangeConditionHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTimeOffset"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm1D.TypeRef("System.Net.Http.Headers.EntityTagHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Date", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_EntityTag", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.EntityTagHeaderValue"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetRangeConditionLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "date", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]));

    $.Field({Static:false, Public:false}, "entityTag", $asm1D.TypeRef("System.Net.Http.Headers.EntityTagHeaderValue"));

    $.Property({Static:false, Public:true }, "Date", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "EntityTag", $asm1D.TypeRef("System.Net.Http.Headers.EntityTagHeaderValue"))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.RangeHeaderValue */ 

(function RangeHeaderValue$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.RangeHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Nullable`1", [$.Int64]), $asm07.TypeRef("System.Nullable`1", [$.Int64])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Ranges", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.RangeItemHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Unit", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetRangeLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Unit", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "unit", $.String);

    $.Field({Static:false, Public:false}, "ranges", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.RangeItemHeaderValue")]));

    $.Property({Static:false, Public:true }, "Unit", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Ranges", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.RangeItemHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.RangeItemHeaderValue */ 

(function RangeItemHeaderValue$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.RangeItemHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Nullable`1", [$.Int64]), $asm07.TypeRef("System.Nullable`1", [$.Int64])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_From", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int64]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_To", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Int64]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetRangeItemLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRangeItemListLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "from", $asm07.TypeRef("System.Nullable`1", [$.Int64]));

    $.Field({Static:false, Public:false}, "to", $asm07.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "From", $asm07.TypeRef("System.Nullable`1", [$.Int64]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "To", $asm07.TypeRef("System.Nullable`1", [$.Int64]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.RetryConditionHeaderValue */ 

(function RetryConditionHeaderValue$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.RetryConditionHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.DateTimeOffset"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.TimeSpan"))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Date", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Delta", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetRetryConditionLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "date", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]));

    $.Field({Static:false, Public:false}, "delta", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]));

    $.Property({Static:false, Public:true }, "Date", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Delta", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.TimeSpan")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.StringWithQualityHeaderValue */ 

(function StringWithQualityHeaderValue$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.StringWithQualityHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Double])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Quality", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Double]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetStringWithQualityLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryReadQuality", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Type, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Field({Static:false, Public:false}, "quality", $asm07.TypeRef("System.Nullable`1", [$.Double]));

    $.Property({Static:false, Public:true }, "Value", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Quality", $asm07.TypeRef("System.Nullable`1", [$.Double]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.TimeSpanHeaderParser */ 

(function TimeSpanHeaderParser$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.BaseHeaderParser"), 
      Name: "System.Net.Http.Headers.TimeSpanHeaderParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParsedValueLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Parser", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.TransferCodingHeaderParser */ 

(function TransferCodingHeaderParser$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.BaseHeaderParser"), 
      Name: "System.Net.Http.Headers.TransferCodingHeaderParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm07.TypeRef("System.Func`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateTransferCoding", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateTransferCodingWithQuality", 
      JSIL.MethodSignature.Return($asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetParsedValueLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:false, Public:false}, "transferCodingCreator", $asm07.TypeRef("System.Func`1", [$asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleValueParser", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MultipleValueParser", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleValueWithQualityParser", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MultipleValueWithQualityParser", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.TransferCodingHeaderValue */ 

(function TransferCodingHeaderValue$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.TransferCodingHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetTransferCodingLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $asm07.TypeRef("System.Func`1", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "parameters", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]));

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Property({Static:false, Public:true }, "Value", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Parameters", $asm07.TypeRef("System.Collections.Generic.ICollection`1", [$asm1D.TypeRef("System.Net.Http.Headers.NameValueHeaderValue")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.TransferCodingWithQualityHeaderValue */ 

(function TransferCodingWithQualityHeaderValue$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.TransferCodingHeaderValue"), 
      Name: "System.Net.Http.Headers.TransferCodingWithQualityHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Double])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Quality", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$.Double]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Quality", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Nullable`1", [$.Double]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Quality", $asm07.TypeRef("System.Nullable`1", [$.Double]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.UriHeaderParser */ 

(function UriHeaderParser$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm1D.TypeRef("System.Net.Http.Headers.HttpHeaderParser"), 
      Name: "System.Net.Http.Headers.UriHeaderParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.UriKind"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:false, Public:false}, "uriKind", $asm0A.TypeRef("System.UriKind"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "RelativeOrAbsoluteUriParser", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Net.Http.Headers.ViaHeaderValue */ 

(function ViaHeaderValue$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.ViaHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckReceivedBy", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Comment", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ProtocolVersion", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ReceivedBy", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProtocolEndIndex", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetViaLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "protocolName", $.String);

    $.Field({Static:false, Public:false}, "protocolVersion", $.String);

    $.Field({Static:false, Public:false}, "receivedBy", $.String);

    $.Field({Static:false, Public:false}, "comment", $.String);

    $.Property({Static:false, Public:true }, "ProtocolName", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ProtocolVersion", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "ReceivedBy", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Comment", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class System.Net.Http.Headers.WarningHeaderValue */ 

(function WarningHeaderValue$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "System.Net.Http.Headers.WarningHeaderValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String, $asm07.TypeRef("System.DateTimeOffset")
        ])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckAgent", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckCode", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Agent", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Code", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Date", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Text", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetWarningLength", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm07.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryReadAgent", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryReadCode", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryReadDate", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")])])
        ])
    );

    $.Field({Static:false, Public:false}, "code", $.Int32);

    $.Field({Static:false, Public:false}, "agent", $.String);

    $.Field({Static:false, Public:false}, "text", $.String);

    $.Field({Static:false, Public:false}, "date", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]));

    $.Property({Static:false, Public:true }, "Code", $.Int32)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Agent", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Text", $.String)
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Date", $asm07.TypeRef("System.Nullable`1", [$asm07.TypeRef("System.DateTimeOffset")]))
      .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm1D.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* class <PrivateImplementationDetails> */ 

(function $lPrivateImplementationDetails$g$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "<PrivateImplementationDetails>", 
      IsPublic: false, 
      IsReferenceType: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ComputeStringHash", 
      new JSIL.MethodSignature($.UInt32, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class __DynamicallyInvokableAttribute */ 

(function __DynamicallyInvokableAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "__DynamicallyInvokableAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.All]; });

})();

